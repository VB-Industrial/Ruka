
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  08015f70  08015f70  00025f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017524  08017524  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08017524  08017524  00027524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801752c  0801752c  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801752c  0801752c  0002752c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0801753c  0801753c  0002753c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0801754c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000210  0801775c  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0801775c  00030a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 13 .debug_info   000472a1  00000000  00000000  00030283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008586  00000000  00000000  00077524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002980  00000000  00000000  0007fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002091  00000000  00000000  00082430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000311cb  00000000  00000000  000844c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035ff2  00000000  00000000  000b568c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012a988  00000000  00000000  000eb67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ca94  00000000  00000000  00216008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00222a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015f58 	.word	0x08015f58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	08015f58 	.word	0x08015f58

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	0801699c 	.word	0x0801699c

08001060 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	0801699c 	.word	0x0801699c

08001080 <_ZN15Adafruit_SensorD0Ev>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe9 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800108e:	2108      	movs	r1, #8
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f010 fb2e 	bl	80116f2 <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffb9 	bl	8001040 <_ZN15Adafruit_SensorC1Ev>
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	609a      	str	r2, [r3, #8]
  _address = address;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	715a      	strb	r2, [r3, #5]
}
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	08016980 	.word	0x08016980

080010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 fa5c 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2206      	movs	r2, #6
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f011 fbdc 	bl	80128ca <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	83fb      	strh	r3, [r7, #30]
 8001116:	8bfb      	ldrh	r3, [r7, #30]
 8001118:	83bb      	strh	r3, [r7, #28]
 800111a:	8bbb      	ldrh	r3, [r7, #28]
 800111c:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 800111e:	f107 0214 	add.w	r2, r7, #20
 8001122:	79f9      	ldrb	r1, [r7, #7]
 8001124:	2306      	movs	r3, #6
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	f000 fa05 	bl	8001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 800112c:	7d3b      	ldrb	r3, [r7, #20]
 800112e:	b21a      	sxth	r2, r3
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800113a:	7dbb      	ldrb	r3, [r7, #22]
 800113c:	b21a      	sxth	r2, r3
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8001148:	7e3b      	ldrb	r3, [r7, #24]
 800114a:	b21a      	sxth	r2, r3
 800114c:	7e7b      	ldrb	r3, [r7, #25]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3b08      	subs	r3, #8
 800115a:	2b26      	cmp	r3, #38	; 0x26
 800115c:	f200 8152 	bhi.w	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001385 	.word	0x08001385
 800116c:	08001405 	.word	0x08001405
 8001170:	08001405 	.word	0x08001405
 8001174:	08001405 	.word	0x08001405
 8001178:	08001405 	.word	0x08001405
 800117c:	08001405 	.word	0x08001405
 8001180:	08001205 	.word	0x08001205
 8001184:	08001405 	.word	0x08001405
 8001188:	08001405 	.word	0x08001405
 800118c:	08001405 	.word	0x08001405
 8001190:	08001405 	.word	0x08001405
 8001194:	08001405 	.word	0x08001405
 8001198:	08001285 	.word	0x08001285
 800119c:	08001405 	.word	0x08001405
 80011a0:	08001405 	.word	0x08001405
 80011a4:	08001405 	.word	0x08001405
 80011a8:	08001405 	.word	0x08001405
 80011ac:	08001405 	.word	0x08001405
 80011b0:	08001305 	.word	0x08001305
 80011b4:	08001405 	.word	0x08001405
 80011b8:	08001405 	.word	0x08001405
 80011bc:	08001405 	.word	0x08001405
 80011c0:	08001405 	.word	0x08001405
 80011c4:	08001405 	.word	0x08001405
 80011c8:	08001405 	.word	0x08001405
 80011cc:	08001405 	.word	0x08001405
 80011d0:	08001405 	.word	0x08001405
 80011d4:	08001405 	.word	0x08001405
 80011d8:	08001405 	.word	0x08001405
 80011dc:	08001405 	.word	0x08001405
 80011e0:	08001405 	.word	0x08001405
 80011e4:	08001405 	.word	0x08001405
 80011e8:	08001385 	.word	0x08001385
 80011ec:	08001405 	.word	0x08001405
 80011f0:	08001405 	.word	0x08001405
 80011f4:	08001405 	.word	0x08001405
 80011f8:	08001405 	.word	0x08001405
 80011fc:	08001405 	.word	0x08001405
 8001200:	08001385 	.word	0x08001385
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 8001204:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9b3 	bl	8000574 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001214:	f7ff fb42 	bl	800089c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	2100      	movs	r1, #0
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f9d9 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001228:	4603      	mov	r3, r0
 800122a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 800122e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f99e 	bl	8000574 <__aeabi_i2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b74      	ldr	r3, [pc, #464]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800123e:	f7ff fb2d 	bl	800089c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4614      	mov	r4, r2
 8001248:	461d      	mov	r5, r3
 800124a:	2101      	movs	r1, #1
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f9c4 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001252:	4603      	mov	r3, r0
 8001254:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 8001258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f989 	bl	8000574 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001268:	f7ff fb18 	bl	800089c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	2102      	movs	r1, #2
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f9af 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800127c:	4603      	mov	r3, r0
 800127e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001282:	e0bf      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001284:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f973 	bl	8000574 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001294:	f7ff fb02 	bl	800089c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f999 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f95e 	bl	8000574 <__aeabi_i2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012be:	f7ff faed 	bl	800089c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4614      	mov	r4, r2
 80012c8:	461d      	mov	r5, r3
 80012ca:	2101      	movs	r1, #1
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f984 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f949 	bl	8000574 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012e8:	f7ff fad8 	bl	800089c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	2102      	movs	r1, #2
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f96f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001302:	e07f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001304:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f933 	bl	8000574 <__aeabi_i2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001314:	f7ff fac2 	bl	800089c <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	2100      	movs	r1, #0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f959 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001328:	4603      	mov	r3, r0
 800132a:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 800132e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f91e 	bl	8000574 <__aeabi_i2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800133e:	f7ff faad 	bl	800089c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4614      	mov	r4, r2
 8001348:	461d      	mov	r5, r3
 800134a:	2101      	movs	r1, #1
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f944 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 8001352:	4603      	mov	r3, r0
 8001354:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 8001358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f909 	bl	8000574 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001368:	f7ff fa98 	bl	800089c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
 8001374:	2102      	movs	r1, #2
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f92f 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 800137c:	4603      	mov	r3, r0
 800137e:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001382:	e03f      	b.n	8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001384:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8f3 	bl	8000574 <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001394:	f7ff fa82 	bl	800089c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4614      	mov	r4, r2
 800139e:	461d      	mov	r5, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f919 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013a8:	4603      	mov	r3, r0
 80013aa:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8de 	bl	8000574 <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013be:	f7ff fa6d 	bl	800089c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	2101      	movs	r1, #1
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f904 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8c9 	bl	8000574 <__aeabi_i2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	2102      	movs	r1, #2
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f8ef 	bl	80015da <_ZN3imu6VectorILh3EEixEi>
 80013fc:	4603      	mov	r3, r0
 80013fe:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001402:	bf00      	nop
  }

  return xyz;
 8001404:	bf00      	nop
}
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bdb0      	pop	{r4, r5, r7, pc}
 800140e:	bf00      	nop
 8001410:	40300000 	.word	0x40300000
 8001414:	408c2000 	.word	0x408c2000
 8001418:	40590000 	.word	0x40590000

0800141c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	2100      	movs	r1, #0
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f011 fa4d 	bl	80128ca <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	220b      	movs	r2, #11
 8001434:	4911      	ldr	r1, [pc, #68]	; (800147c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 8001436:	4618      	mov	r0, r3
 8001438:	f011 fa4f 	bl	80128da <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2203      	movs	r2, #3
 8001454:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->max_value   = 0.0F;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001470:	621a      	str	r2, [r3, #32]
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	08015f70 	.word	0x08015f70
 8001480:	3c23d70a 	.word	0x3c23d70a

08001484 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	2100      	movs	r1, #0
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f011 fa19 	bl	80128ca <memset>

  event->version   = sizeof(sensors_event_t);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2203      	movs	r2, #3
 80014aa:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014ac:	f007 fd20 	bl	8008ef0 <HAL_GetTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	221a      	movs	r2, #26
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe15 	bl	80010f0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f853 	bl	8001576 <_ZN3imu6VectorILh3EE1xEv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fbad 	bl	8000c38 <__aeabi_d2f>
 80014de:	4602      	mov	r2, r0
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f84f 	bl	800158c <_ZN3imu6VectorILh3EE1yEv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb9e 	bl	8000c38 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f84c 	bl	80015a4 <_ZN3imu6VectorILh3EE1zEv>
 800150c:	4603      	mov	r3, r0
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb8f 	bl	8000c38 <__aeabi_d2f>
 800151a:	4602      	mov	r2, r0
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	61da      	str	r2, [r3, #28]

  return true;
 8001520:	2401      	movs	r4, #1
}
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f81a 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 800152c:	4623      	mov	r3, r4
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}

08001536 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	460b      	mov	r3, r1
 8001544:	72fb      	strb	r3, [r7, #11]
 8001546:	4613      	mov	r3, r2
 8001548:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800154a:	7aba      	ldrb	r2, [r7, #10]
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f89b 	bl	800168c <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    {
    }
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3308      	adds	r3, #8
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3310      	adds	r3, #16
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2218      	movs	r2, #24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f011 f97d 	bl	80128ca <memset>
    }
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
    }
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_ZN15Adafruit_BNO055D1Ev+0x20>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd29 	bl	8001060 <_ZN15Adafruit_SensorD1Ev>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08016980 	.word	0x08016980

0800161c <_ZN15Adafruit_BNO055D0Ev>:
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
 800162a:	2110      	movs	r1, #16
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f010 f860 	bl	80116f2 <_ZdlPvj>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <_ZN3imu10QuaternionC1Ev+0x4c>)
 800164c:	e9c1 2300 	strd	r2, r3, [r1]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	3ff00000 	.word	0x3ff00000

0800168c <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2164      	movs	r1, #100	; 0x64
 80016a6:	9102      	str	r1, [sp, #8]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	2152      	movs	r1, #82	; 0x52
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016b4:	f008 feb8 	bl	800a428 <HAL_I2C_Mem_Read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016bc:	bf00      	nop
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <I2C_n_byte_receive+0x54>)
 80016c0:	f009 f881 	bl	800a7c6 <HAL_I2C_GetState>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f4      	bne.n	80016be <I2C_n_byte_receive+0x32>

  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200002dc 	.word	0x200002dc

080016e4 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10f      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10a      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016fe:	2229      	movs	r2, #41	; 0x29
 8001700:	2137      	movs	r1, #55	; 0x37
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001704:	f7ff fcd8 	bl	80010b8 <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800170a:	f7ff ff97 	bl	800163c <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001710:	f7ff ff54 	bl	80015bc <_ZN3imu6VectorILh3EEC1Ev>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001720:	4293      	cmp	r3, r2
 8001722:	d105      	bne.n	8001730 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001726:	f7ff ff1b 	bl	8001560 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800172c:	f7ff ff64 	bl	80015f8 <_ZN15Adafruit_BNO055D1Ev>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000022c 	.word	0x2000022c
 800173c:	20000240 	.word	0x20000240
 8001740:	20000260 	.word	0x20000260

08001744 <_GLOBAL__sub_I_bno>:
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
 8001748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff ffc9 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001752:	bd80      	pop	{r7, pc}

08001754 <_GLOBAL__sub_D_bno>:
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ffc1 	bl	80016e4 <_Z41__static_initialization_and_destruction_0ii>
 8001762:	bd80      	pop	{r7, pc}

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_DMA_Init+0x60>)
 800176c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_DMA_Init+0x60>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6493      	str	r3, [r2, #72]	; 0x48
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_DMA_Init+0x60>)
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_DMA_Init+0x60>)
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <MX_DMA_Init+0x60>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6493      	str	r3, [r2, #72]	; 0x48
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_DMA_Init+0x60>)
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	200b      	movs	r0, #11
 80017a0:	f007 fcaf 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a4:	200b      	movs	r0, #11
 80017a6:	f007 fcc6 	bl	8009136 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	200c      	movs	r0, #12
 80017b0:	f007 fca7 	bl	8009102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b4:	200c      	movs	r0, #12
 80017b6:	f007 fcbe 	bl	8009136 <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <MX_FDCAN1_Init+0x8c>)
 80017d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_FDCAN1_Init+0x88>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001800:	2201      	movs	r2, #1
 8001802:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001806:	221d      	movs	r2, #29
 8001808:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800180c:	220a      	movs	r2, #10
 800180e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001812:	2204      	movs	r2, #4
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001818:	2201      	movs	r2, #1
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800181e:	2202      	movs	r2, #2
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001824:	2202      	movs	r2, #2
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001830:	2203      	movs	r2, #3
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_FDCAN1_Init+0x88>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_FDCAN1_Init+0x88>)
 800183c:	f007 ff1e 	bl	800967c <HAL_FDCAN_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001846:	f000 fac6 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000278 	.word	0x20000278
 8001854:	40006400 	.word	0x40006400

08001858 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09e      	sub	sp, #120	; 0x78
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2254      	movs	r2, #84	; 0x54
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f011 f826 	bl	80128ca <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_FDCAN_MspInit+0xac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d138      	bne.n	80018fa <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800188e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4618      	mov	r0, r3
 800189a:	f00a fdad 	bl	800c3f8 <HAL_RCCEx_PeriphCLKConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80018a4:	f000 fa97 	bl	8001dd6 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_FDCAN_MspInit+0xb0>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018ea:	2309      	movs	r3, #9
 80018ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_FDCAN_MspInit+0xb4>)
 80018f6:	f008 fb47 	bl	8009f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3778      	adds	r7, #120	; 0x78
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40006400 	.word	0x40006400
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400

08001910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <MX_GPIO_Init+0x140>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	4a43      	ldr	r2, [pc, #268]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <MX_GPIO_Init+0x140>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a3d      	ldr	r2, [pc, #244]	; (8001a50 <MX_GPIO_Init+0x140>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a37      	ldr	r2, [pc, #220]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <MX_GPIO_Init+0x140>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <MX_GPIO_Init+0x140>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <MX_GPIO_Init+0x140>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 800199e:	2200      	movs	r2, #0
 80019a0:	f649 3110 	movw	r1, #39696	; 0x9b10
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f008 fc70 	bl	800a28c <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2120      	movs	r1, #32
 80019b0:	4828      	ldr	r0, [pc, #160]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019b2:	f008 fc6b 	bl	800a28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2104      	movs	r1, #4
 80019ba:	4827      	ldr	r0, [pc, #156]	; (8001a58 <MX_GPIO_Init+0x148>)
 80019bc:	f008 fc66 	bl	800a28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 80019c0:	2301      	movs	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c4:	2303      	movs	r3, #3
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4820      	ldr	r0, [pc, #128]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019d4:	f008 fad8 	bl	8009f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 80019d8:	230c      	movs	r3, #12
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	481a      	ldr	r0, [pc, #104]	; (8001a54 <MX_GPIO_Init+0x144>)
 80019ec:	f008 facc 	bl	8009f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 80019f0:	f649 3310 	movw	r3, #39696	; 0x9b10
 80019f4:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f008 fabc 	bl	8009f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001a10:	2320      	movs	r3, #32
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <MX_GPIO_Init+0x144>)
 8001a28:	f008 faae 	bl	8009f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_GPIO_Init+0x148>)
 8001a44:	f008 faa0 	bl	8009f88 <HAL_GPIO_Init>

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00

08001a5c <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_I2C4_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <MX_I2C4_Init+0x7c>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001a98:	f008 fc2a 	bl	800a2f0 <HAL_I2C_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001aa2:	f000 f998 	bl	8001dd6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001aaa:	f009 fe2b 	bl	800b704 <HAL_I2CEx_ConfigAnalogFilter>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 f98f 	bl	8001dd6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_I2C4_Init+0x74>)
 8001abc:	f009 fe6d 	bl	800b79a <HAL_I2CEx_ConfigDigitalFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 f986 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002dc 	.word	0x200002dc
 8001ad4:	40008400 	.word	0x40008400
 8001ad8:	00702991 	.word	0x00702991

08001adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0a0      	sub	sp, #128	; 0x80
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2254      	movs	r2, #84	; 0x54
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f010 fee4 	bl	80128ca <memset>
  if(i2cHandle->Instance==I2C4)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5e      	ldr	r2, [pc, #376]	; (8001c80 <HAL_I2C_MspInit+0x1a4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	f040 80b5 	bne.w	8001c78 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00a fc6b 	bl	800c3f8 <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b28:	f000 f955 	bl	8001dd6 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2c:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	4a54      	ldr	r2, [pc, #336]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b38:	4b52      	ldr	r3, [pc, #328]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b4f      	ldr	r3, [pc, #316]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4844      	ldr	r0, [pc, #272]	; (8001c88 <HAL_I2C_MspInit+0x1ac>)
 8001b78:	f008 fa06 	bl	8009f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b94:	4619      	mov	r1, r3
 8001b96:	483d      	ldr	r0, [pc, #244]	; (8001c8c <HAL_I2C_MspInit+0x1b0>)
 8001b98:	f008 f9f6 	bl	8009f88 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_I2C_MspInit+0x1a8>)
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bb6:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_I2C_MspInit+0x1b8>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001bea:	4829      	ldr	r0, [pc, #164]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bec:	f007 fabe 	bl	800916c <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8001bf6:	f000 f8ee 	bl	8001dd6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c00:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_I2C_MspInit+0x1b4>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c08:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <HAL_I2C_MspInit+0x1c0>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c0e:	2217      	movs	r2, #23
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c14:	2210      	movs	r2, #16
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001c3c:	4816      	ldr	r0, [pc, #88]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c3e:	f007 fa95 	bl	800916c <HAL_DMA_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8001c48:	f000 f8c5 	bl	8001dd6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
 8001c52:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_I2C_MspInit+0x1bc>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2052      	movs	r0, #82	; 0x52
 8001c5e:	f007 fa50 	bl	8009102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001c62:	2052      	movs	r0, #82	; 0x52
 8001c64:	f007 fa67 	bl	8009136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2053      	movs	r0, #83	; 0x53
 8001c6e:	f007 fa48 	bl	8009102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001c72:	2053      	movs	r0, #83	; 0x53
 8001c74:	f007 fa5f 	bl	8009136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3780      	adds	r7, #128	; 0x80
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40008400 	.word	0x40008400
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000800 	.word	0x48000800
 8001c8c:	48000400 	.word	0x48000400
 8001c90:	20000330 	.word	0x20000330
 8001c94:	40020008 	.word	0x40020008
 8001c98:	20000390 	.word	0x20000390
 8001c9c:	4002001c 	.word	0x4002001c

08001ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b09c      	sub	sp, #112	; 0x70
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca6:	f007 f8be 	bl	8008e26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001caa:	f000 f849 	bl	8001d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cae:	f7ff fe2f 	bl	8001910 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cb2:	f7ff fd57 	bl	8001764 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001cb6:	f7ff fd87 	bl	80017c8 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 8001cba:	f7ff fecf 	bl	8001a5c <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8001cbe:	f006 ffdd 	bl	8008c7c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001cc2:	f006 faf7 	bl	80082b4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001cc6:	f006 fb33 	bl	8008330 <MX_SPI3_Init>
  MX_TIM8_Init();
 8001cca:	f006 fd4f 	bl	800876c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  joint_config joint_config;
  cyphal_can_starter(&hfdcan1);
 8001cce:	481b      	ldr	r0, [pc, #108]	; (8001d3c <main+0x9c>)
 8001cd0:	f004 fb6e 	bl	80063b0 <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 8001cd4:	4819      	ldr	r0, [pc, #100]	; (8001d3c <main+0x9c>)
 8001cd6:	f004 fac7 	bl	8006268 <setup_cyphal>
  HAL_Delay(10);
 8001cda:	200a      	movs	r0, #10
 8001cdc:	f007 f914 	bl	8008f08 <HAL_Delay>
  tmc5160_init();
 8001ce0:	f006 fee4 	bl	8008aac <tmc5160_init>
  HAL_Delay(10);
 8001ce4:	200a      	movs	r0, #10
 8001ce6:	f007 f90f 	bl	8008f08 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	66bb      	str	r3, [r7, #104]	; 0x68
  //uint16_t addr9250=0xD0; //0x68<<1

  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8001cee:	f007 f8ff 	bl	8008ef0 <HAL_GetTick>
 8001cf2:	66f8      	str	r0, [r7, #108]	; 0x6c

  vec_4ax linear = {0};
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  //IMU_setup();

  while (1)
  {

      uint32_t now = HAL_GetTick();
 8001d1c:	f007 f8e8 	bl	8008ef0 <HAL_GetTick>
 8001d20:	6678      	str	r0, [r7, #100]	; 0x64
      if ( (now - last_hbeat) >= 1000) {
 8001d22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d2c:	d303      	bcc.n	8001d36 <main+0x96>
      	  //imu_get_quat(&quat);
      	  //imu_get_linear(&linear);
      	  //imu_get_gyro(&gyro);
          last_hbeat = now;
 8001d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d30:	66fb      	str	r3, [r7, #108]	; 0x6c
          heartbeat();
 8001d32:	f004 fa69 	bl	8006208 <heartbeat>
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
      }
      cyphal_loop();
 8001d36:	f004 fb2d 	bl	8006394 <cyphal_loop>
  {
 8001d3a:	e7ef      	b.n	8001d1c <main+0x7c>
 8001d3c:	20000278 	.word	0x20000278

08001d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b094      	sub	sp, #80	; 0x50
 8001d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d46:	f107 0318 	add.w	r3, r7, #24
 8001d4a:	2238      	movs	r2, #56	; 0x38
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f010 fdbb 	bl	80128ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f009 fd66 	bl	800b834 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d70:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d72:	2302      	movs	r3, #2
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d76:	2303      	movs	r3, #3
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d7e:	2328      	movs	r3, #40	; 0x28
 8001d80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d82:	2302      	movs	r3, #2
 8001d84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d86:	2302      	movs	r3, #2
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8e:	f107 0318 	add.w	r3, r7, #24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f009 fe02 	bl	800b99c <HAL_RCC_OscConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001d9e:	f000 f81a 	bl	8001dd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da2:	230f      	movs	r3, #15
 8001da4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da6:	2303      	movs	r3, #3
 8001da8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00a f8fe 	bl	800bfc0 <HAL_RCC_ClockConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001dca:	f000 f804 	bl	8001dd6 <Error_Handler>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3750      	adds	r7, #80	; 0x50
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dda:	b672      	cpsid	i
}
 8001ddc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dde:	e7fe      	b.n	8001dde <Error_Handler+0x8>

08001de0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	1e5a      	subs	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d019      	beq.n	8001e6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3308      	adds	r3, #8
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	330c      	adds	r3, #12
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
        }
    }
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	4798      	blx	r3
    }
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ffd4 	bl	8001ea2 <_ZNSt14_Function_baseD1Ev>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_ZNSt8functionIFvvEED1Ev>:
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ffc7 	bl	8001ea2 <_ZNSt14_Function_baseD1Ev>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 fb14 	bl	800655c <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3310      	adds	r3, #16
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fb39 	bl	80065b2 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	08016a6c 	.word	0x08016a6c

08001f78 <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001f84:	f004 fb40 	bl	8006608 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f083 0301 	eor.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f00f fbf3 	bl	8011780 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001f9c:	f004 fb45 	bl	800662a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	6814      	ldr	r4, [r2, #0]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	47a0      	blx	r4
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	2000090c 	.word	0x2000090c

08001fbc <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001fc6:	480d      	ldr	r0, [pc, #52]	; (8001ffc <_Z6free_fP14CanardInstancePv+0x40>)
 8001fc8:	f004 fb1e 	bl	8006608 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f00f fbd1 	bl	8011780 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8001fde:	4807      	ldr	r0, [pc, #28]	; (8001ffc <_Z6free_fP14CanardInstancePv+0x40>)
 8001fe0:	f004 fb23 	bl	800662a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	3204      	adds	r2, #4
 8001fea:	6814      	ldr	r4, [r2, #0]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	47a0      	blx	r4
 8001ff4:	bf00      	nop
}
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	2000090c 	.word	0x2000090c

08002000 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 800200e:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	330c      	adds	r3, #12
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f00f f89c 	bl	8011168 <canardTxInit>
        utilities(utilities)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	63da      	str	r2, [r3, #60]	; 0x3c
    {};
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	08016c30 	.word	0x08016c30

08002044 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	460b      	mov	r3, r1
 8002052:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	7afa      	ldrb	r2, [r7, #11]
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3308      	adds	r3, #8
 8002064:	6839      	ldr	r1, [r7, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f004 fafb 	bl	8006662 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2248      	movs	r2, #72	; 0x48
 8002090:	2140      	movs	r1, #64	; 0x40
 8002092:	f7ff ffb5 	bl	8002000 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	08016c0c 	.word	0x08016c0c

080020b0 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff42 	bl	8001f4c <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 80020c8:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	08016af0 	.word	0x08016af0

080020dc <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80020e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ea:	eef0 7ae7 	vabs.f32	s15, s15
 80020ee:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002120 <_ZSt8isfinitef+0x44>
 80020f2:	eef4 7a47 	vcmp.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	bf8c      	ite	hi
 80020fc:	2301      	movhi	r3, #1
 80020fe:	2300      	movls	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f083 0301 	eor.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf14      	ite	ne
 800210c:	2301      	movne	r3, #1
 800210e:	2300      	moveq	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	7f7fffff 	.word	0x7f7fffff

08002124 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d201      	bcs.n	800213a <nunavutChooseMin+0x16>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	e000      	b.n	800213c <nunavutChooseMin+0x18>
 800213a:	683b      	ldr	r3, [r7, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	6978      	ldr	r0, [r7, #20]
 800215e:	f7ff ffe1 	bl	8002124 <nunavutChooseMin>
 8002162:	4602      	mov	r2, r0
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 800216a:	6939      	ldr	r1, [r7, #16]
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffd9 	bl	8002124 <nunavutChooseMin>
 8002172:	4603      	mov	r3, r0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b092      	sub	sp, #72	; 0x48
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 800218a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	2b00      	cmp	r3, #0
 8002192:	d145      	bne.n	8002220 <nunavutCopyBits+0xa4>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	2b00      	cmp	r3, #0
 800219c:	d140      	bne.n	8002220 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	08db      	lsrs	r3, r3, #3
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 80021a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
        (void) memmove(pdst, psrc, length_bytes);
 80021b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021be:	f010 fb6a 	bl	8012896 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 80021ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 808a 	beq.w	80022ec <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 80021d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021dc:	4413      	add	r3, r2
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 80021e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e4:	4413      	add	r3, r2
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 80021e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021ec:	2201      	movs	r2, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002202:	43db      	mvns	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4013      	ands	r3, r2
 8002208:	b2da      	uxtb	r2, r3
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	7819      	ldrb	r1, [r3, #0]
 800220e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002212:	400b      	ands	r3, r1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	b2da      	uxtb	r2, r3
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	701a      	strb	r2, [r3, #0]
        }
    }
 800221e:	e065      	b.n	80022ec <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8002228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800222a:	647b      	str	r3, [r7, #68]	; 0x44
        size_t       dst_off  = dst_offset_bits;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t last_bit = src_off + length_bits;
 8002230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8002238:	e053      	b.n	80022e2 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 800223a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8002244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 800224e:	7dfa      	ldrb	r2, [r7, #23]
 8002250:	7dbb      	ldrb	r3, [r7, #22]
 8002252:	429a      	cmp	r2, r3
 8002254:	d901      	bls.n	800225a <nunavutCopyBits+0xde>
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	e000      	b.n	800225c <nunavutCopyBits+0xe0>
 800225a:	7dbb      	ldrb	r3, [r7, #22]
 800225c:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 800225e:	7d7b      	ldrb	r3, [r7, #21]
 8002260:	f1c3 0008 	rsb	r0, r3, #8
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	4619      	mov	r1, r3
 800226c:	f7ff ff5a 	bl	8002124 <nunavutChooseMin>
 8002270:	4603      	mov	r3, r0
 8002272:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8002274:	7d3b      	ldrb	r3, [r7, #20]
 8002276:	2201      	movs	r2, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	7dbb      	ldrb	r3, [r7, #22]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8002286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002288:	08db      	lsrs	r3, r3, #3
 800228a:	6a3a      	ldr	r2, [r7, #32]
 800228c:	4413      	add	r3, r2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	fa42 f303 	asr.w	r3, r2, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	7dbb      	ldrb	r3, [r7, #22]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 80022a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a6:	08db      	lsrs	r3, r3, #3
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	4413      	add	r3, r2
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4013      	ands	r3, r2
 80022b6:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 80022b8:	7cba      	ldrb	r2, [r7, #18]
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	4013      	ands	r3, r2
 80022be:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 80022c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	7c79      	ldrb	r1, [r7, #17]
 80022ca:	7c3a      	ldrb	r2, [r7, #16]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]
            src_off += size;
 80022d2:	7d3b      	ldrb	r3, [r7, #20]
 80022d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022d6:	4413      	add	r3, r2
 80022d8:	647b      	str	r3, [r7, #68]	; 0x44
            dst_off += size;
 80022da:	7d3b      	ldrb	r3, [r7, #20]
 80022dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022de:	4413      	add	r3, r2
 80022e0:	643b      	str	r3, [r7, #64]	; 0x40
        while (last_bit > src_off)
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d8a7      	bhi.n	800223a <nunavutCopyBits+0xbe>
        }

    }
}
 80022ea:	e000      	b.n	80022ee <nunavutCopyBits+0x172>
    }
 80022ec:	bf00      	nop
}
 80022ee:	bf00      	nop
 80022f0:	3748      	adds	r7, #72	; 0x48
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b088      	sub	sp, #32
 80022fa:	af02      	add	r7, sp, #8
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	6839      	ldr	r1, [r7, #0]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff1d 	bl	8002148 <nunavutSaturateBufferFragmentBitLength>
 800230e:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	08db      	lsrs	r3, r3, #3
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	18d0      	adds	r0, r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	3307      	adds	r3, #7
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	461a      	mov	r2, r3
 8002326:	2100      	movs	r1, #0
 8002328:	f010 facf 	bl	80128ca <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	2100      	movs	r1, #0
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff ff20 	bl	800217c <nunavutCopyBits>
}
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	00da      	lsls	r2, r3, #3
 8002354:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	440b      	add	r3, r1
 800235c:	429a      	cmp	r2, r3
 800235e:	d202      	bcs.n	8002366 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002360:	f06f 0302 	mvn.w	r3, #2
 8002364:	e010      	b.n	8002388 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8002366:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800236a:	2140      	movs	r1, #64	; 0x40
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fed9 	bl	8002124 <nunavutChooseMin>
 8002372:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8002374:	2300      	movs	r3, #0
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f107 0320 	add.w	r3, r7, #32
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fefb 	bl	800217c <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	2110      	movs	r1, #16
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff febe 	bl	8002124 <nunavutChooseMin>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	68b8      	ldr	r0, [r7, #8]
 80023b0:	f7ff feca 	bl	8002148 <nunavutSaturateBufferFragmentBitLength>
 80023b4:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 80023ba:	f107 0012 	add.w	r0, r7, #18
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	2100      	movs	r1, #0
 80023c8:	f7ff fed8 	bl	800217c <nunavutCopyBits>
    return val;
 80023cc:	8a7b      	ldrh	r3, [r7, #18]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b088      	sub	sp, #32
 80023da:	af02      	add	r7, sp, #8
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	2120      	movs	r1, #32
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fe9b 	bl	8002124 <nunavutChooseMin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f7ff fea7 	bl	8002148 <nunavutSaturateBufferFragmentBitLength>
 80023fa:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8002400:	f107 0010 	add.w	r0, r7, #16
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	2100      	movs	r1, #0
 800240e:	f7ff feb5 	bl	800217c <nunavutCopyBits>
    return val;
 8002412:	693b      	ldr	r3, [r7, #16]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 800241c:	b480      	push	{r7}
 800241e:	b08b      	sub	sp, #44	; 0x2c
 8002420:	af00      	add	r7, sp, #0
 8002422:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 8002426:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <nunavutFloat16Pack+0xb8>)
 8002428:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 800242a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800242e:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 8002430:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 8002434:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 8002436:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 800243a:	613b      	str	r3, [r7, #16]
    in.real = value;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002446:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	4053      	eors	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (in.bits >= f32inf.bits)
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	429a      	cmp	r2, r3
 800245a:	d313      	bcc.n	8002484 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 8002466:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 800246a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800246c:	e025      	b.n	80024ba <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	429a      	cmp	r2, r3
 8002474:	d902      	bls.n	800247c <nunavutFloat16Pack+0x60>
 8002476:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800247a:	e001      	b.n	8002480 <nunavutFloat16Pack+0x64>
 800247c:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8002480:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002482:	e01a      	b.n	80024ba <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800248a:	f023 030f 	bic.w	r3, r3, #15
 800248e:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 8002490:	ed97 7a03 	vldr	s14, [r7, #12]
 8002494:	edd7 7a04 	vldr	s15, [r7, #16]
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d901      	bls.n	80024b4 <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	0b5b      	lsrs	r3, r3, #13
 80024b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	b29a      	uxth	r2, r3
 80024c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024c2:	4313      	orrs	r3, r2
 80024c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    return out;
 80024c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	372c      	adds	r7, #44	; 0x2c
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	fffff000 	.word	0xfffff000

080024d8 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 80024e2:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 80024e6:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 80024e8:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 80024ec:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	035a      	lsls	r2, r3, #13
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <nunavutFloat16Unpack+0x6c>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 80024f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80024fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8002508:	ed97 7a03 	vldr	s14, [r7, #12]
 800250c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	db03      	blt.n	8002522 <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8002520:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	041b      	lsls	r3, r3, #16
 8002528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
    return out.real;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	ee07 3a90 	vmov	s15, r3
}
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	0fffe000 	.word	0x0fffe000

08002548 <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 8002554:	2310      	movs	r3, #16
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7ff ff18 	bl	8002390 <nunavutGetU16>
 8002560:	4603      	mov	r3, r0
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ffb8 	bl	80024d8 <nunavutFloat16Unpack>
 8002568:	eef0 7a40 	vmov.f32	s15, s0
}
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8002582:	2320      	movs	r3, #32
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff ff24 	bl	80023d6 <nunavutGetU32>
 800258e:	4603      	mov	r3, r0
 8002590:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	ee07 3a90 	vmov	s15, r3
}
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08c      	sub	sp, #48	; 0x30
 80025a6:	af04      	add	r7, sp, #16
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <uavcan_node_Health_1_0_serialize_+0x1e>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <uavcan_node_Health_1_0_serialize_+0x1e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80025c0:	f06f 0301 	mvn.w	r3, #1
 80025c4:	e048      	b.n	8002658 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	2b07      	cmp	r3, #7
 80025d2:	d802      	bhi.n	80025da <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80025d4:	f06f 0302 	mvn.w	r3, #2
 80025d8:	e03e      	b.n	8002658 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 80025e4:	7efb      	ldrb	r3, [r7, #27]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d901      	bls.n	80025ee <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 80025ea:	2303      	movs	r3, #3
 80025ec:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	4413      	add	r3, r2
 80025f6:	7efa      	ldrb	r2, [r7, #27]
 80025f8:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3302      	adds	r3, #2
 80025fe:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	2b00      	cmp	r3, #0
 8002608:	d021      	beq.n	800264e <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f1c3 0308 	rsb	r3, r3, #8
 8002618:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	9302      	str	r3, [sp, #8]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9cd 2300 	strd	r2, r3, [sp]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	6979      	ldr	r1, [r7, #20]
 800262e:	68b8      	ldr	r0, [r7, #8]
 8002630:	f7ff fe88 	bl	8002344 <nunavutSetUxx>
 8002634:	4603      	mov	r3, r0
 8002636:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002638:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800263c:	2b00      	cmp	r3, #0
 800263e:	da02      	bge.n	8002646 <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002640:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002644:	e008      	b.n	8002658 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <uavcan_node_Health_1_0_deserialize_+0x26>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <uavcan_node_Health_1_0_deserialize_+0x2c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002686:	f06f 0301 	mvn.w	r3, #1
 800268a:	e030      	b.n	80026ee <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <uavcan_node_Health_1_0_deserialize_+0x98>)
 8002694:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3302      	adds	r3, #2
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d30a      	bcc.n	80026c6 <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e002      	b.n	80026cc <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3302      	adds	r3, #2
 80026d0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3307      	adds	r3, #7
 80026d6:	f023 0307 	bic.w	r3, r3, #7
 80026da:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80026dc:	69b9      	ldr	r1, [r7, #24]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff fd20 	bl	8002124 <nunavutChooseMin>
 80026e4:	4603      	mov	r3, r0
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	080169b0 	.word	0x080169b0

080026fc <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af04      	add	r7, sp, #16
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <uavcan_node_Mode_1_0_serialize_+0x1e>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800271a:	f06f 0301 	mvn.w	r3, #1
 800271e:	e048      	b.n	80027b2 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	2b07      	cmp	r3, #7
 800272c:	d802      	bhi.n	8002734 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800272e:	f06f 0302 	mvn.w	r3, #2
 8002732:	e03e      	b.n	80027b2 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 800273e:	7efb      	ldrb	r3, [r7, #27]
 8002740:	2b07      	cmp	r3, #7
 8002742:	d901      	bls.n	8002748 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002744:	2307      	movs	r3, #7
 8002746:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	08db      	lsrs	r3, r3, #3
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	4413      	add	r3, r2
 8002750:	7efa      	ldrb	r2, [r7, #27]
 8002752:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3303      	adds	r3, #3
 8002758:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	2b00      	cmp	r3, #0
 8002762:	d021      	beq.n	80027a8 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f1c3 0308 	rsb	r3, r3, #8
 8002772:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9cd 2300 	strd	r2, r3, [sp]
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	6979      	ldr	r1, [r7, #20]
 8002788:	68b8      	ldr	r0, [r7, #8]
 800278a:	f7ff fddb 	bl	8002344 <nunavutSetUxx>
 800278e:	4603      	mov	r3, r0
 8002790:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002792:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002796:	2b00      	cmp	r3, #0
 8002798:	da02      	bge.n	80027a0 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 800279a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800279e:	e008      	b.n	80027b2 <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <uavcan_node_Mode_1_0_deserialize_+0x26>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <uavcan_node_Mode_1_0_deserialize_+0x26>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <uavcan_node_Mode_1_0_deserialize_+0x2c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80027e2:	f06f 0301 	mvn.w	r3, #1
 80027e6:	e030      	b.n	800284a <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 80027f0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3303      	adds	r3, #3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	429a      	cmp	r2, r3
 800280a:	d30a      	bcc.n	8002822 <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	08db      	lsrs	r3, r3, #3
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e002      	b.n	8002828 <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3303      	adds	r3, #3
 800282c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3307      	adds	r3, #7
 8002832:	f023 0307 	bic.w	r3, r3, #7
 8002836:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002838:	69b9      	ldr	r1, [r7, #24]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff fc72 	bl	8002124 <nunavutChooseMin>
 8002840:	4603      	mov	r3, r0
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	080169b0 	.word	0x080169b0

08002858 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08e      	sub	sp, #56	; 0x38
 800285c:	af04      	add	r7, sp, #16
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002876:	f06f 0301 	mvn.w	r3, #1
 800287a:	e0cf      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	2b37      	cmp	r3, #55	; 0x37
 8002888:	d802      	bhi.n	8002890 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800288a:	f06f 0302 	mvn.w	r3, #2
 800288e:	e0c5      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	4413      	add	r3, r2
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	3320      	adds	r3, #32
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d021      	beq.n	80028f6 <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f1c3 0308 	rsb	r3, r3, #8
 80028c0:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80028c2:	7ffb      	ldrb	r3, [r7, #31]
 80028c4:	9302      	str	r3, [sp, #8]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9cd 2300 	strd	r2, r3, [sp]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	f7ff fd34 	bl	8002344 <nunavutSetUxx>
 80028dc:	4603      	mov	r3, r0
 80028de:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 80028e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da02      	bge.n	80028ee <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 80028e8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80028ec:	e096      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 80028ee:	7ffb      	ldrb	r3, [r7, #31]
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	4413      	add	r3, r2
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 80028f6:	2301      	movs	r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4413      	add	r3, r2
 8002906:	f107 0214 	add.w	r2, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	f7ff fe49 	bl	80025a2 <uavcan_node_Health_1_0_serialize_>
 8002910:	4603      	mov	r3, r0
 8002912:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002914:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002918:	2b00      	cmp	r3, #0
 800291a:	da02      	bge.n	8002922 <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 800291c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002920:	e07c      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	4413      	add	r3, r2
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	2b00      	cmp	r3, #0
 8002934:	d021      	beq.n	800297a <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f1c3 0308 	rsb	r3, r3, #8
 8002944:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002946:	7f3b      	ldrb	r3, [r7, #28]
 8002948:	9302      	str	r3, [sp, #8]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9cd 2300 	strd	r2, r3, [sp]
 8002956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002958:	6a39      	ldr	r1, [r7, #32]
 800295a:	68b8      	ldr	r0, [r7, #8]
 800295c:	f7ff fcf2 	bl	8002344 <nunavutSetUxx>
 8002960:	4603      	mov	r3, r0
 8002962:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002964:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002968:	2b00      	cmp	r3, #0
 800296a:	da02      	bge.n	8002972 <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 800296c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002970:	e054      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002972:	7f3b      	ldrb	r3, [r7, #28]
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	4413      	add	r3, r2
 8002978:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 800297a:	2301      	movs	r3, #1
 800297c:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	4413      	add	r3, r2
 800298a:	f107 0210 	add.w	r2, r7, #16
 800298e:	4619      	mov	r1, r3
 8002990:	f7ff feb4 	bl	80026fc <uavcan_node_Mode_1_0_serialize_>
 8002994:	4603      	mov	r3, r0
 8002996:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002998:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800299c:	2b00      	cmp	r3, #0
 800299e:	da02      	bge.n	80029a6 <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 80029a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80029a4:	e03a      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ac:	4413      	add	r3, r2
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	4413      	add	r3, r2
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	7992      	ldrb	r2, [r2, #6]
 80029bc:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	3308      	adds	r3, #8
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d021      	beq.n	8002a12 <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f1c3 0308 	rsb	r3, r3, #8
 80029dc:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80029de:	7e7b      	ldrb	r3, [r7, #25]
 80029e0:	9302      	str	r3, [sp, #8]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9cd 2300 	strd	r2, r3, [sp]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	6a39      	ldr	r1, [r7, #32]
 80029f2:	68b8      	ldr	r0, [r7, #8]
 80029f4:	f7ff fca6 	bl	8002344 <nunavutSetUxx>
 80029f8:	4603      	mov	r3, r0
 80029fa:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 80029fc:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da02      	bge.n	8002a0a <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002a04:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a08:	e008      	b.n	8002a1c <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002a0a:	7e7b      	ldrb	r3, [r7, #25]
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	4413      	add	r3, r2
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	08da      	lsrs	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a4a:	f06f 0301 	mvn.w	r3, #1
 8002a4e:	e089      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002a56:	4b45      	ldr	r3, [pc, #276]	; (8002b6c <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002a58:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a70:	68b8      	ldr	r0, [r7, #8]
 8002a72:	f7ff fcb0 	bl	80023d6 <nunavutGetU32>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3320      	adds	r3, #32
 8002a80:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3307      	adds	r3, #7
 8002a86:	f023 0307 	bic.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	08db      	lsrs	r3, r3, #3
 8002a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fb46 	bl	8002124 <nunavutChooseMin>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f107 0214 	add.w	r2, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7ff fdd5 	bl	8002660 <uavcan_node_Health_1_0_deserialize_>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002aba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da02      	bge.n	8002ac8 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002ac2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ac6:	e04d      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3307      	adds	r3, #7
 8002ad6:	f023 0307 	bic.w	r3, r3, #7
 8002ada:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	08db      	lsrs	r3, r3, #3
 8002ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fb1e 	bl	8002124 <nunavutChooseMin>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	4413      	add	r3, r2
 8002afc:	f107 0210 	add.w	r2, r7, #16
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7ff fe5b 	bl	80027bc <uavcan_node_Mode_1_0_deserialize_>
 8002b06:	4603      	mov	r3, r0
 8002b08:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002b0a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	da02      	bge.n	8002b18 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002b12:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002b16:	e025      	b.n	8002b64 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3308      	adds	r3, #8
 8002b26:	6a3a      	ldr	r2, [r7, #32]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d307      	bcc.n	8002b3c <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	08db      	lsrs	r3, r3, #3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	4413      	add	r3, r2
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	719a      	strb	r2, [r3, #6]
 8002b3a:	e002      	b.n	8002b42 <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3308      	adds	r3, #8
 8002b46:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	3307      	adds	r3, #7
 8002b4c:	f023 0307 	bic.w	r3, r3, #7
 8002b50:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002b52:	6a39      	ldr	r1, [r7, #32]
 8002b54:	69f8      	ldr	r0, [r7, #28]
 8002b56:	f7ff fae5 	bl	8002124 <nunavutChooseMin>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	080169b0 	.word	0x080169b0

08002b70 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b96:	f06f 0301 	mvn.w	r3, #1
 8002b9a:	e027      	b.n	8002bec <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 8002ba4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	69f9      	ldr	r1, [r7, #28]
 8002bba:	68b8      	ldr	r0, [r7, #8]
 8002bbc:	f7ff fcdb 	bl	8002576 <nunavutGetF32>
 8002bc0:	eef0 7a40 	vmov.f32	s15, s0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3320      	adds	r3, #32
 8002bce:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3307      	adds	r3, #7
 8002bd4:	f023 0307 	bic.w	r3, r3, #7
 8002bd8:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002bda:	69b9      	ldr	r1, [r7, #24]
 8002bdc:	6978      	ldr	r0, [r7, #20]
 8002bde:	f7ff faa1 	bl	8002124 <nunavutChooseMin>
 8002be2:	4603      	mov	r3, r0
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	080169b0 	.word	0x080169b0

08002bf8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d006      	beq.n	8002c1e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c1e:	f06f 0301 	mvn.w	r3, #1
 8002c22:	e027      	b.n	8002c74 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 8002c2c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	69f9      	ldr	r1, [r7, #28]
 8002c42:	68b8      	ldr	r0, [r7, #8]
 8002c44:	f7ff fc97 	bl	8002576 <nunavutGetF32>
 8002c48:	eef0 7a40 	vmov.f32	s15, s0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3320      	adds	r3, #32
 8002c56:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3307      	adds	r3, #7
 8002c5c:	f023 0307 	bic.w	r3, r3, #7
 8002c60:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	6978      	ldr	r0, [r7, #20]
 8002c66:	f7ff fa5d 	bl	8002124 <nunavutChooseMin>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	08da      	lsrs	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	080169b0 	.word	0x080169b0

08002c80 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ca6:	f06f 0301 	mvn.w	r3, #1
 8002caa:	e027      	b.n	8002cfc <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 8002cb4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	69f9      	ldr	r1, [r7, #28]
 8002cca:	68b8      	ldr	r0, [r7, #8]
 8002ccc:	f7ff fc53 	bl	8002576 <nunavutGetF32>
 8002cd0:	eef0 7a40 	vmov.f32	s15, s0
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3320      	adds	r3, #32
 8002cde:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3307      	adds	r3, #7
 8002ce4:	f023 0307 	bic.w	r3, r3, #7
 8002ce8:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	6978      	ldr	r0, [r7, #20]
 8002cee:	f7ff fa19 	bl	8002124 <nunavutChooseMin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	08da      	lsrs	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	080169b0 	.word	0x080169b0

08002d08 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08c      	sub	sp, #48	; 0x30
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d2e:	f06f 0301 	mvn.w	r3, #1
 8002d32:	e090      	b.n	8002e56 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002d3a:	4b49      	ldr	r3, [pc, #292]	; (8002e60 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 8002d3c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t offset_bits = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	08db      	lsrs	r3, r3, #3
 8002d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f9e5 	bl	8002124 <nunavutChooseMin>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002d62:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f107 021c 	add.w	r2, r7, #28
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7ff fefd 	bl	8002b70 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (_err6_ < 0)
 8002d7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	da02      	bge.n	8002d8a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 8002d84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002d88:	e065      	b.n	8002e56 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	4413      	add	r3, r2
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	3307      	adds	r3, #7
 8002d98:	f023 0307 	bic.w	r3, r3, #7
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff f9bd 	bl	8002124 <nunavutChooseMin>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f107 0218 	add.w	r2, r7, #24
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7ff ff5c 	bl	8002c80 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err7_ < 0)
 8002dce:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da02      	bge.n	8002ddc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 8002dd6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002dda:	e03c      	b.n	8002e56 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de2:	4413      	add	r3, r2
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	3307      	adds	r3, #7
 8002dea:	f023 0307 	bic.w	r3, r3, #7
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	08db      	lsrs	r3, r3, #3
 8002df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f994 	bl	8002124 <nunavutChooseMin>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	f107 0214 	add.w	r2, r7, #20
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7ff feee 	bl	8002bf8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err8_ < 0)
 8002e22:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da02      	bge.n	8002e30 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 8002e2a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002e2e:	e012      	b.n	8002e56 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	4413      	add	r3, r2
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	3307      	adds	r3, #7
 8002e3e:	f023 0307 	bic.w	r3, r3, #7
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e48:	f7ff f96c 	bl	8002124 <nunavutChooseMin>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3730      	adds	r7, #48	; 0x30
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	080169b0 	.word	0x080169b0

08002e64 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <uavcan_register_Name_1_0_deserialize_+0x26>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <uavcan_register_Name_1_0_deserialize_+0x26>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <uavcan_register_Name_1_0_deserialize_+0x2c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002e8a:	f06f 0301 	mvn.w	r3, #1
 8002e8e:	e04a      	b.n	8002f26 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <uavcan_register_Name_1_0_deserialize_+0xcc>)
 8002e98:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3308      	adds	r3, #8
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d309      	bcc.n	8002ec8 <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	08db      	lsrs	r3, r3, #3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8002ec6:	e003      	b.n	8002ed0 <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002edc:	2bff      	cmp	r3, #255	; 0xff
 8002ede:	d902      	bls.n	8002ee6 <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002ee0:	f06f 0309 	mvn.w	r3, #9
 8002ee4:	e01f      	b.n	8002f26 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	f7ff f9fd 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4413      	add	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3307      	adds	r3, #7
 8002f0e:	f023 0307 	bic.w	r3, r3, #7
 8002f12:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002f14:	69b9      	ldr	r1, [r7, #24]
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7ff f904 	bl	8002124 <nunavutChooseMin>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	080169b0 	.word	0x080169b0

08002f34 <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	; 0x30
 8002f38:	af04      	add	r7, sp, #16
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f52:	f06f 0301 	mvn.w	r3, #1
 8002f56:	e05e      	b.n	8003016 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002f66:	d202      	bcs.n	8002f6e <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002f68:	f06f 0302 	mvn.w	r3, #2
 8002f6c:	e053      	b.n	8003016 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7c:	d902      	bls.n	8002f84 <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002f7e:	f06f 0309 	mvn.w	r3, #9
 8002f82:	e048      	b.n	8003016 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002f92:	8812      	ldrh	r2, [r2, #0]
 8002f94:	b292      	uxth	r2, r2
 8002f96:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	3310      	adds	r3, #16
 8002f9c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	9100      	str	r1, [sp, #0]
 8002faa:	69f9      	ldr	r1, [r7, #28]
 8002fac:	68b8      	ldr	r0, [r7, #8]
 8002fae:	f7ff f8e5 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d021      	beq.n	800300c <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f1c3 0308 	rsb	r3, r3, #8
 8002fd6:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	69b9      	ldr	r1, [r7, #24]
 8002fec:	68b8      	ldr	r0, [r7, #8]
 8002fee:	f7ff f9a9 	bl	8002344 <nunavutSetUxx>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002ff6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da02      	bge.n	8003004 <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 8002ffe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003002:	e008      	b.n	8003016 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	4413      	add	r3, r2
 800300a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003046:	f06f 0301 	mvn.w	r3, #1
 800304a:	e041      	b.n	80030d0 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 8003054:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003066:	2310      	movs	r3, #16
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	69f9      	ldr	r1, [r7, #28]
 800306c:	68b8      	ldr	r0, [r7, #8]
 800306e:	f7ff f98f 	bl	8002390 <nunavutGetU16>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3310      	adds	r3, #16
 8003080:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308c:	d902      	bls.n	8003094 <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800308e:	f06f 0309 	mvn.w	r3, #9
 8003092:	e01d      	b.n	80030d0 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	f7ff f927 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4413      	add	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3307      	adds	r3, #7
 80030b8:	f023 0307 	bic.w	r3, r3, #7
 80030bc:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80030be:	69b9      	ldr	r1, [r7, #24]
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7ff f82f 	bl	8002124 <nunavutChooseMin>
 80030c6:	4603      	mov	r3, r0
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	080169b0 	.word	0x080169b0

080030dc <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	; 0x30
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80030fa:	f06f 0301 	mvn.w	r3, #1
 80030fe:	e05f      	b.n	80031c0 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	f640 0207 	movw	r2, #2055	; 0x807
 800310e:	4293      	cmp	r3, r2
 8003110:	d802      	bhi.n	8003118 <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003112:	f06f 0302 	mvn.w	r3, #2
 8003116:	e053      	b.n	80031c0 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003122:	2b80      	cmp	r3, #128	; 0x80
 8003124:	d902      	bls.n	800312c <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003126:	f06f 0309 	mvn.w	r3, #9
 800312a:	e049      	b.n	80031c0 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4413      	add	r3, r2
 800313a:	b2ca      	uxtb	r2, r1
 800313c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3308      	adds	r3, #8
 8003142:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800314a:	011a      	lsls	r2, r3, #4
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2100      	movs	r1, #0
 8003150:	9100      	str	r1, [sp, #0]
 8003152:	69f9      	ldr	r1, [r7, #28]
 8003154:	68b8      	ldr	r0, [r7, #8]
 8003156:	f7ff f811 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	2b00      	cmp	r3, #0
 8003170:	d021      	beq.n	80031b6 <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f1c3 0308 	rsb	r3, r3, #8
 8003180:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	9302      	str	r3, [sp, #8]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9cd 2300 	strd	r2, r3, [sp]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	69b9      	ldr	r1, [r7, #24]
 8003196:	68b8      	ldr	r0, [r7, #8]
 8003198:	f7ff f8d4 	bl	8002344 <nunavutSetUxx>
 800319c:	4603      	mov	r3, r0
 800319e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80031a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	da02      	bge.n	80031ae <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 80031a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031ac:	e008      	b.n	80031c0 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	08da      	lsrs	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	; 0x28
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80031ee:	f06f 0301 	mvn.w	r3, #1
 80031f2:	e04a      	b.n	800328a <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 80031fc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3308      	adds	r3, #8
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	429a      	cmp	r2, r3
 8003216:	d309      	bcc.n	800322c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	08db      	lsrs	r3, r3, #3
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	4413      	add	r3, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800322a:	e003      	b.n	8003234 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3308      	adds	r3, #8
 8003238:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003240:	2b80      	cmp	r3, #128	; 0x80
 8003242:	d902      	bls.n	800324a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003244:	f06f 0309 	mvn.w	r3, #9
 8003248:	e01f      	b.n	800328a <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	f7ff f84b 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3307      	adds	r3, #7
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003278:	69b9      	ldr	r1, [r7, #24]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7fe ff52 	bl	8002124 <nunavutChooseMin>
 8003280:	4603      	mov	r3, r0
 8003282:	08da      	lsrs	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	080169b0 	.word	0x080169b0

08003298 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08c      	sub	sp, #48	; 0x30
 800329c:	af04      	add	r7, sp, #16
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80032b6:	f06f 0301 	mvn.w	r3, #1
 80032ba:	e05f      	b.n	800337c <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	f640 0207 	movw	r2, #2055	; 0x807
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d802      	bhi.n	80032d4 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80032ce:	f06f 0302 	mvn.w	r3, #2
 80032d2:	e053      	b.n	800337c <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d902      	bls.n	80032e8 <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80032e2:	f06f 0309 	mvn.w	r3, #9
 80032e6:	e049      	b.n	800337c <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	4413      	add	r3, r2
 80032f6:	b2ca      	uxtb	r2, r1
 80032f8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3308      	adds	r3, #8
 80032fe:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2100      	movs	r1, #0
 800330c:	9100      	str	r1, [sp, #0]
 800330e:	69f9      	ldr	r1, [r7, #28]
 8003310:	68b8      	ldr	r0, [r7, #8]
 8003312:	f7fe ff33 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800331c:	015b      	lsls	r3, r3, #5
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	2b00      	cmp	r3, #0
 800332c:	d021      	beq.n	8003372 <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f1c3 0308 	rsb	r3, r3, #8
 800333c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800333e:	7dfb      	ldrb	r3, [r7, #23]
 8003340:	9302      	str	r3, [sp, #8]
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9cd 2300 	strd	r2, r3, [sp]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	69b9      	ldr	r1, [r7, #24]
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f7fe fff6 	bl	8002344 <nunavutSetUxx>
 8003358:	4603      	mov	r3, r0
 800335a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800335c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003360:	2b00      	cmp	r3, #0
 8003362:	da02      	bge.n	800336a <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003364:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003368:	e008      	b.n	800337c <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	08da      	lsrs	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033aa:	f06f 0301 	mvn.w	r3, #1
 80033ae:	e04a      	b.n	8003446 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 80033b8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3308      	adds	r3, #8
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d309      	bcc.n	80033e8 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	4413      	add	r3, r2
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80033e6:	e003      	b.n	80033f0 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3308      	adds	r3, #8
 80033f4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d902      	bls.n	8003406 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003400:	f06f 0309 	mvn.w	r3, #9
 8003404:	e01f      	b.n	8003446 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800340e:	015b      	lsls	r3, r3, #5
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	f7fe ff6d 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003422:	015b      	lsls	r3, r3, #5
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4413      	add	r3, r2
 8003428:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3307      	adds	r3, #7
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003434:	69b9      	ldr	r1, [r7, #24]
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7fe fe74 	bl	8002124 <nunavutChooseMin>
 800343c:	4603      	mov	r3, r0
 800343e:	08da      	lsrs	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	080169b0 	.word	0x080169b0

08003454 <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08c      	sub	sp, #48	; 0x30
 8003458:	af04      	add	r7, sp, #16
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003472:	f06f 0301 	mvn.w	r3, #1
 8003476:	e05f      	b.n	8003538 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	f640 0207 	movw	r2, #2055	; 0x807
 8003486:	4293      	cmp	r3, r2
 8003488:	d802      	bhi.n	8003490 <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800348a:	f06f 0302 	mvn.w	r3, #2
 800348e:	e053      	b.n	8003538 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800349a:	2b20      	cmp	r3, #32
 800349c:	d902      	bls.n	80034a4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800349e:	f06f 0309 	mvn.w	r3, #9
 80034a2:	e049      	b.n	8003538 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	4413      	add	r3, r2
 80034b2:	b2ca      	uxtb	r2, r1
 80034b4:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3308      	adds	r3, #8
 80034ba:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034c2:	019a      	lsls	r2, r3, #6
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2100      	movs	r1, #0
 80034c8:	9100      	str	r1, [sp, #0]
 80034ca:	69f9      	ldr	r1, [r7, #28]
 80034cc:	68b8      	ldr	r0, [r7, #8]
 80034ce:	f7fe fe55 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d021      	beq.n	800352e <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f1c3 0308 	rsb	r3, r3, #8
 80034f8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	9302      	str	r3, [sp, #8]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9cd 2300 	strd	r2, r3, [sp]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	69b9      	ldr	r1, [r7, #24]
 800350e:	68b8      	ldr	r0, [r7, #8]
 8003510:	f7fe ff18 	bl	8002344 <nunavutSetUxx>
 8003514:	4603      	mov	r3, r0
 8003516:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003518:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800351c:	2b00      	cmp	r3, #0
 800351e:	da02      	bge.n	8003526 <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003520:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003524:	e008      	b.n	8003538 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	08da      	lsrs	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d006      	beq.n	8003566 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003566:	f06f 0301 	mvn.w	r3, #1
 800356a:	e04a      	b.n	8003602 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 8003574:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3308      	adds	r3, #8
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	429a      	cmp	r2, r3
 800358e:	d309      	bcc.n	80035a4 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	08db      	lsrs	r3, r3, #3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80035a2:	e003      	b.n	80035ac <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3308      	adds	r3, #8
 80035b0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d902      	bls.n	80035c2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80035bc:	f06f 0309 	mvn.w	r3, #9
 80035c0:	e01f      	b.n	8003602 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035ca:	019b      	lsls	r3, r3, #6
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	f7fe fe8f 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80035de:	019b      	lsls	r3, r3, #6
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4413      	add	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	3307      	adds	r3, #7
 80035ea:	f023 0307 	bic.w	r3, r3, #7
 80035ee:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80035f0:	69b9      	ldr	r1, [r7, #24]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7fe fd96 	bl	8002124 <nunavutChooseMin>
 80035f8:	4603      	mov	r3, r0
 80035fa:	08da      	lsrs	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	080169b0 	.word	0x080169b0

08003610 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af04      	add	r7, sp, #16
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800362e:	f06f 0301 	mvn.w	r3, #1
 8003632:	e060      	b.n	80036f6 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003642:	d202      	bcs.n	800364a <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003644:	f06f 0302 	mvn.w	r3, #2
 8003648:	e055      	b.n	80036f6 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d902      	bls.n	8003660 <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800365a:	f06f 0309 	mvn.w	r3, #9
 800365e:	e04a      	b.n	80036f6 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	08db      	lsrs	r3, r3, #3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	4413      	add	r3, r2
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800366e:	8812      	ldrh	r2, [r2, #0]
 8003670:	b292      	uxth	r2, r2
 8003672:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3310      	adds	r3, #16
 8003678:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003680:	00da      	lsls	r2, r3, #3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2100      	movs	r1, #0
 8003686:	9100      	str	r1, [sp, #0]
 8003688:	69f9      	ldr	r1, [r7, #28]
 800368a:	68b8      	ldr	r0, [r7, #8]
 800368c:	f7fe fd76 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d021      	beq.n	80036ec <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f1c3 0308 	rsb	r3, r3, #8
 80036b6:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9cd 2300 	strd	r2, r3, [sp]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	68b8      	ldr	r0, [r7, #8]
 80036ce:	f7fe fe39 	bl	8002344 <nunavutSetUxx>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80036d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	da02      	bge.n	80036e4 <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 80036de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80036e2:	e008      	b.n	80036f6 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003726:	f06f 0301 	mvn.w	r3, #1
 800372a:	e043      	b.n	80037b4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 8003734:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003746:	2310      	movs	r3, #16
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	68b8      	ldr	r0, [r7, #8]
 800374e:	f7fe fe1f 	bl	8002390 <nunavutGetU16>
 8003752:	4603      	mov	r3, r0
 8003754:	461a      	mov	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3310      	adds	r3, #16
 8003760:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376c:	d902      	bls.n	8003774 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800376e:	f06f 0309 	mvn.w	r3, #9
 8003772:	e01f      	b.n	80037b4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	f7fe fdb6 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4413      	add	r3, r2
 8003796:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3307      	adds	r3, #7
 800379c:	f023 0307 	bic.w	r3, r3, #7
 80037a0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	6978      	ldr	r0, [r7, #20]
 80037a6:	f7fe fcbd 	bl	8002124 <nunavutChooseMin>
 80037aa:	4603      	mov	r3, r0
 80037ac:	08da      	lsrs	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	080169b0 	.word	0x080169b0

080037c0 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	; 0x30
 80037c4:	af04      	add	r7, sp, #16
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037de:	f06f 0301 	mvn.w	r3, #1
 80037e2:	e05f      	b.n	80038a4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	f640 0207 	movw	r2, #2055	; 0x807
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d802      	bhi.n	80037fc <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80037f6:	f06f 0302 	mvn.w	r3, #2
 80037fa:	e053      	b.n	80038a4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003806:	2b80      	cmp	r3, #128	; 0x80
 8003808:	d902      	bls.n	8003810 <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800380a:	f06f 0309 	mvn.w	r3, #9
 800380e:	e049      	b.n	80038a4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08db      	lsrs	r3, r3, #3
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4413      	add	r3, r2
 800381e:	b2ca      	uxtb	r2, r1
 8003820:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3308      	adds	r3, #8
 8003826:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800382e:	011a      	lsls	r2, r3, #4
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2100      	movs	r1, #0
 8003834:	9100      	str	r1, [sp, #0]
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68b8      	ldr	r0, [r7, #8]
 800383a:	f7fe fc9f 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	2b00      	cmp	r3, #0
 8003854:	d021      	beq.n	800389a <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f1c3 0308 	rsb	r3, r3, #8
 8003864:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	9302      	str	r3, [sp, #8]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9cd 2300 	strd	r2, r3, [sp]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	68b8      	ldr	r0, [r7, #8]
 800387c:	f7fe fd62 	bl	8002344 <nunavutSetUxx>
 8003880:	4603      	mov	r3, r0
 8003882:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003884:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003888:	2b00      	cmp	r3, #0
 800388a:	da02      	bge.n	8003892 <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 800388c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003890:	e008      	b.n	80038a4 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	08da      	lsrs	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80038d2:	f06f 0301 	mvn.w	r3, #1
 80038d6:	e04a      	b.n	800396e <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 80038e0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3308      	adds	r3, #8
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d309      	bcc.n	8003910 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	08db      	lsrs	r3, r3, #3
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	4413      	add	r3, r2
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800390e:	e003      	b.n	8003918 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3308      	adds	r3, #8
 800391c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d902      	bls.n	800392e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003928:	f06f 0309 	mvn.w	r3, #9
 800392c:	e01f      	b.n	800396e <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	f7fe fcd9 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3307      	adds	r3, #7
 8003956:	f023 0307 	bic.w	r3, r3, #7
 800395a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7fe fbe0 	bl	8002124 <nunavutChooseMin>
 8003964:	4603      	mov	r3, r0
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	080169b0 	.word	0x080169b0

0800397c <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af04      	add	r7, sp, #16
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800399a:	f06f 0301 	mvn.w	r3, #1
 800399e:	e05f      	b.n	8003a60 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f640 0207 	movw	r2, #2055	; 0x807
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d802      	bhi.n	80039b8 <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80039b2:	f06f 0302 	mvn.w	r3, #2
 80039b6:	e053      	b.n	8003a60 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d902      	bls.n	80039cc <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80039c6:	f06f 0309 	mvn.w	r3, #9
 80039ca:	e049      	b.n	8003a60 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	b2ca      	uxtb	r2, r1
 80039dc:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3308      	adds	r3, #8
 80039e2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2100      	movs	r1, #0
 80039f0:	9100      	str	r1, [sp, #0]
 80039f2:	69f9      	ldr	r1, [r7, #28]
 80039f4:	68b8      	ldr	r0, [r7, #8]
 80039f6:	f7fe fbc1 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a00:	015b      	lsls	r3, r3, #5
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d021      	beq.n	8003a56 <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f1c3 0308 	rsb	r3, r3, #8
 8003a20:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	69b9      	ldr	r1, [r7, #24]
 8003a36:	68b8      	ldr	r0, [r7, #8]
 8003a38:	f7fe fc84 	bl	8002344 <nunavutSetUxx>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003a40:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	da02      	bge.n	8003a4e <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003a48:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a4c:	e008      	b.n	8003a60 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	08da      	lsrs	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003a8e:	f06f 0301 	mvn.w	r3, #1
 8003a92:	e04a      	b.n	8003b2a <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 8003a9c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d309      	bcc.n	8003acc <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	08db      	lsrs	r3, r3, #3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4413      	add	r3, r2
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003aca:	e003      	b.n	8003ad4 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d902      	bls.n	8003aea <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ae4:	f06f 0309 	mvn.w	r3, #9
 8003ae8:	e01f      	b.n	8003b2a <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003af2:	015b      	lsls	r3, r3, #5
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	f7fe fbfb 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b06:	015b      	lsls	r3, r3, #5
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3307      	adds	r3, #7
 8003b12:	f023 0307 	bic.w	r3, r3, #7
 8003b16:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7fe fb02 	bl	8002124 <nunavutChooseMin>
 8003b20:	4603      	mov	r3, r0
 8003b22:	08da      	lsrs	r2, r3, #3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	080169b0 	.word	0x080169b0

08003b38 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af04      	add	r7, sp, #16
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b56:	f06f 0301 	mvn.w	r3, #1
 8003b5a:	e05f      	b.n	8003c1c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	f640 0207 	movw	r2, #2055	; 0x807
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d802      	bhi.n	8003b74 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003b6e:	f06f 0302 	mvn.w	r3, #2
 8003b72:	e053      	b.n	8003c1c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d902      	bls.n	8003b88 <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b82:	f06f 0309 	mvn.w	r3, #9
 8003b86:	e049      	b.n	8003c1c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	08db      	lsrs	r3, r3, #3
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	4413      	add	r3, r2
 8003b96:	b2ca      	uxtb	r2, r1
 8003b98:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ba6:	019a      	lsls	r2, r3, #6
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2100      	movs	r1, #0
 8003bac:	9100      	str	r1, [sp, #0]
 8003bae:	69f9      	ldr	r1, [r7, #28]
 8003bb0:	68b8      	ldr	r0, [r7, #8]
 8003bb2:	f7fe fae3 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003bbc:	019b      	lsls	r3, r3, #6
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d021      	beq.n	8003c12 <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f1c3 0308 	rsb	r3, r3, #8
 8003bdc:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	9302      	str	r3, [sp, #8]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9cd 2300 	strd	r2, r3, [sp]
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	68b8      	ldr	r0, [r7, #8]
 8003bf4:	f7fe fba6 	bl	8002344 <nunavutSetUxx>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003bfc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	da02      	bge.n	8003c0a <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003c04:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c08:	e008      	b.n	8003c1c <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d006      	beq.n	8003c4a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c4a:	f06f 0301 	mvn.w	r3, #1
 8003c4e:	e04a      	b.n	8003ce6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 8003c58:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d309      	bcc.n	8003c88 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	08db      	lsrs	r3, r3, #3
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003c86:	e003      	b.n	8003c90 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	3308      	adds	r3, #8
 8003c94:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d902      	bls.n	8003ca6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ca0:	f06f 0309 	mvn.w	r3, #9
 8003ca4:	e01f      	b.n	8003ce6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cae:	019b      	lsls	r3, r3, #6
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	f7fe fb1d 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cc2:	019b      	lsls	r3, r3, #6
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3307      	adds	r3, #7
 8003cce:	f023 0307 	bic.w	r3, r3, #7
 8003cd2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003cd4:	69b9      	ldr	r1, [r7, #24]
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7fe fa24 	bl	8002124 <nunavutChooseMin>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	08da      	lsrs	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	080169b0 	.word	0x080169b0

08003cf4 <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08c      	sub	sp, #48	; 0x30
 8003cf8:	af04      	add	r7, sp, #16
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003d12:	f06f 0301 	mvn.w	r3, #1
 8003d16:	e060      	b.n	8003dda <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003d26:	d202      	bcs.n	8003d2e <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003d28:	f06f 0302 	mvn.w	r3, #2
 8003d2c:	e055      	b.n	8003dda <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3c:	d902      	bls.n	8003d44 <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003d3e:	f06f 0309 	mvn.w	r3, #9
 8003d42:	e04a      	b.n	8003dda <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003d52:	8812      	ldrh	r2, [r2, #0]
 8003d54:	b292      	uxth	r2, r2
 8003d56:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3310      	adds	r3, #16
 8003d5c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d64:	00da      	lsls	r2, r3, #3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	9100      	str	r1, [sp, #0]
 8003d6c:	69f9      	ldr	r1, [r7, #28]
 8003d6e:	68b8      	ldr	r0, [r7, #8]
 8003d70:	f7fe fa04 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d021      	beq.n	8003dd0 <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f1c3 0308 	rsb	r3, r3, #8
 8003d9a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	9302      	str	r3, [sp, #8]
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9cd 2300 	strd	r2, r3, [sp]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	68b8      	ldr	r0, [r7, #8]
 8003db2:	f7fe fac7 	bl	8002344 <nunavutSetUxx>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003dba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	da02      	bge.n	8003dc8 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003dc2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dc6:	e008      	b.n	8003dda <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	08da      	lsrs	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e0a:	f06f 0301 	mvn.w	r3, #1
 8003e0e:	e043      	b.n	8003e98 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 8003e18:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	69f9      	ldr	r1, [r7, #28]
 8003e30:	68b8      	ldr	r0, [r7, #8]
 8003e32:	f7fe faad 	bl	8002390 <nunavutGetU16>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3310      	adds	r3, #16
 8003e44:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e50:	d902      	bls.n	8003e58 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003e52:	f06f 0309 	mvn.w	r3, #9
 8003e56:	e01f      	b.n	8003e98 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	f7fe fa44 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4413      	add	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3307      	adds	r3, #7
 8003e80:	f023 0307 	bic.w	r3, r3, #7
 8003e84:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003e86:	69b9      	ldr	r1, [r7, #24]
 8003e88:	6978      	ldr	r0, [r7, #20]
 8003e8a:	f7fe f94b 	bl	8002124 <nunavutChooseMin>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	08da      	lsrs	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	080169b0 	.word	0x080169b0

08003ea4 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08e      	sub	sp, #56	; 0x38
 8003ea8:	af04      	add	r7, sp, #16
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ec2:	f06f 0301 	mvn.w	r3, #1
 8003ec6:	e08b      	b.n	8003fe0 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	f640 0207 	movw	r2, #2055	; 0x807
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d802      	bhi.n	8003ee0 <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003eda:	f06f 0302 	mvn.w	r3, #2
 8003ede:	e07f      	b.n	8003fe0 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d902      	bls.n	8003ef4 <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003eee:	f06f 0309 	mvn.w	r3, #9
 8003ef2:	e075      	b.n	8003fe0 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4413      	add	r3, r2
 8003f02:	b2ca      	uxtb	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	3308      	adds	r3, #8
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	623b      	str	r3, [r7, #32]
 8003f10:	e034      	b.n	8003f7c <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 8003f1e:	ed97 0a07 	vldr	s0, [r7, #28]
 8003f22:	f7fe f8db 	bl	80020dc <_ZSt8isfinitef>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 8003f2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f30:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003fe8 <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 8003f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3c:	d501      	bpl.n	8003f42 <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 8003f40:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 8003f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f46:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003ff0 <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 8003f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f52:	dd01      	ble.n	8003f58 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 8003f56:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 8003f58:	ed97 0a07 	vldr	s0, [r7, #28]
 8003f5c:	f7fe fa5e 	bl	800241c <nunavutFloat16Pack>
 8003f60:	4603      	mov	r3, r0
 8003f62:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	08db      	lsrs	r3, r3, #3
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	8aba      	ldrh	r2, [r7, #20]
 8003f6e:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	3310      	adds	r3, #16
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d3c4      	bcc.n	8003f12 <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d021      	beq.n	8003fd6 <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f1c3 0308 	rsb	r3, r3, #8
 8003fa0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
 8003fa4:	9302      	str	r3, [sp, #8]
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9cd 2300 	strd	r2, r3, [sp]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	69b9      	ldr	r1, [r7, #24]
 8003fb6:	68b8      	ldr	r0, [r7, #8]
 8003fb8:	f7fe f9c4 	bl	8002344 <nunavutSetUxx>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003fc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	da02      	bge.n	8003fce <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 8003fc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003fcc:	e008      	b.n	8003fe0 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	4413      	add	r3, r2
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3728      	adds	r7, #40	; 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	c77fe000 	.word	0xc77fe000
 8003fec:	c77fe000 	.word	0xc77fe000
 8003ff0:	477fe000 	.word	0x477fe000
 8003ff4:	477fe000 	.word	0x477fe000

08003ff8 <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800401e:	f06f 0301 	mvn.w	r3, #1
 8004022:	e054      	b.n	80040ce <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 800402c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3308      	adds	r3, #8
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	429a      	cmp	r2, r3
 8004046:	d309      	bcc.n	800405c <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	08db      	lsrs	r3, r3, #3
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800405a:	e003      	b.n	8004064 <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }
    offset_bits += 8U;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	3308      	adds	r3, #8
 8004068:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004070:	2b80      	cmp	r3, #128	; 0x80
 8004072:	d902      	bls.n	800407a <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004074:	f06f 0309 	mvn.w	r3, #9
 8004078:	e029      	b.n	80040ce <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	e012      	b.n	80040a6 <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	6979      	ldr	r1, [r7, #20]
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	f7fe fa5f 	bl	8002548 <nunavutGetF16>
 800408a:	eef0 7a40 	vmov.f32	s15, s0
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3310      	adds	r3, #16
 800409e:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	3301      	adds	r3, #1
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3e6      	bcc.n	8004080 <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3307      	adds	r3, #7
 80040b6:	f023 0307 	bic.w	r3, r3, #7
 80040ba:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80040bc:	6939      	ldr	r1, [r7, #16]
 80040be:	69f8      	ldr	r0, [r7, #28]
 80040c0:	f7fe f830 	bl	8002124 <nunavutChooseMin>
 80040c4:	4603      	mov	r3, r0
 80040c6:	08da      	lsrs	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	080169b0 	.word	0x080169b0

080040dc <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08c      	sub	sp, #48	; 0x30
 80040e0:	af04      	add	r7, sp, #16
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80040fa:	f06f 0301 	mvn.w	r3, #1
 80040fe:	e05f      	b.n	80041c0 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	f640 0207 	movw	r2, #2055	; 0x807
 800410e:	4293      	cmp	r3, r2
 8004110:	d802      	bhi.n	8004118 <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004112:	f06f 0302 	mvn.w	r3, #2
 8004116:	e053      	b.n	80041c0 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d902      	bls.n	800412c <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004126:	f06f 0309 	mvn.w	r3, #9
 800412a:	e049      	b.n	80041c0 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	08db      	lsrs	r3, r3, #3
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	4413      	add	r3, r2
 800413a:	b2ca      	uxtb	r2, r1
 800413c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3308      	adds	r3, #8
 8004142:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2100      	movs	r1, #0
 8004150:	9100      	str	r1, [sp, #0]
 8004152:	69f9      	ldr	r1, [r7, #28]
 8004154:	68b8      	ldr	r0, [r7, #8]
 8004156:	f7fe f811 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004160:	015b      	lsls	r3, r3, #5
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	2b00      	cmp	r3, #0
 8004170:	d021      	beq.n	80041b6 <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f1c3 0308 	rsb	r3, r3, #8
 8004180:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9cd 2300 	strd	r2, r3, [sp]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	69b9      	ldr	r1, [r7, #24]
 8004196:	68b8      	ldr	r0, [r7, #8]
 8004198:	f7fe f8d4 	bl	8002344 <nunavutSetUxx>
 800419c:	4603      	mov	r3, r0
 800419e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80041a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da02      	bge.n	80041ae <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80041a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80041ac:	e008      	b.n	80041c0 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	08da      	lsrs	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80041ee:	f06f 0301 	mvn.w	r3, #1
 80041f2:	e04a      	b.n	800428a <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80041fa:	4b26      	ldr	r3, [pc, #152]	; (8004294 <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 80041fc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3308      	adds	r3, #8
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d309      	bcc.n	800422c <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	08db      	lsrs	r3, r3, #3
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4413      	add	r3, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800422a:	e003      	b.n	8004234 <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3308      	adds	r3, #8
 8004238:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d902      	bls.n	800424a <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004244:	f06f 0309 	mvn.w	r3, #9
 8004248:	e01f      	b.n	800428a <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004252:	015b      	lsls	r3, r3, #5
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	f7fe f84b 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004266:	015b      	lsls	r3, r3, #5
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4413      	add	r3, r2
 800426c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3307      	adds	r3, #7
 8004272:	f023 0307 	bic.w	r3, r3, #7
 8004276:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004278:	69b9      	ldr	r1, [r7, #24]
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7fd ff52 	bl	8002124 <nunavutChooseMin>
 8004280:	4603      	mov	r3, r0
 8004282:	08da      	lsrs	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	080169b0 	.word	0x080169b0

08004298 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08c      	sub	sp, #48	; 0x30
 800429c:	af04      	add	r7, sp, #16
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80042b6:	f06f 0301 	mvn.w	r3, #1
 80042ba:	e05f      	b.n	800437c <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	f640 0207 	movw	r2, #2055	; 0x807
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d802      	bhi.n	80042d4 <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80042ce:	f06f 0302 	mvn.w	r3, #2
 80042d2:	e053      	b.n	800437c <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d902      	bls.n	80042e8 <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80042e2:	f06f 0309 	mvn.w	r3, #9
 80042e6:	e049      	b.n	800437c <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4413      	add	r3, r2
 80042f6:	b2ca      	uxtb	r2, r1
 80042f8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3308      	adds	r3, #8
 80042fe:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004306:	019a      	lsls	r2, r3, #6
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2100      	movs	r1, #0
 800430c:	9100      	str	r1, [sp, #0]
 800430e:	69f9      	ldr	r1, [r7, #28]
 8004310:	68b8      	ldr	r0, [r7, #8]
 8004312:	f7fd ff33 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	2b00      	cmp	r3, #0
 800432c:	d021      	beq.n	8004372 <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f1c3 0308 	rsb	r3, r3, #8
 800433c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	9302      	str	r3, [sp, #8]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9cd 2300 	strd	r2, r3, [sp]
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	68b8      	ldr	r0, [r7, #8]
 8004354:	f7fd fff6 	bl	8002344 <nunavutSetUxx>
 8004358:	4603      	mov	r3, r0
 800435a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800435c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004360:	2b00      	cmp	r3, #0
 8004362:	da02      	bge.n	800436a <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004364:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004368:	e008      	b.n	800437c <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	08da      	lsrs	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	; 0x28
 8004388:	af02      	add	r7, sp, #8
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80043aa:	f06f 0301 	mvn.w	r3, #1
 80043ae:	e04a      	b.n	8004446 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80043b6:	4b26      	ldr	r3, [pc, #152]	; (8004450 <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 80043b8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	3308      	adds	r3, #8
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d309      	bcc.n	80043e8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	08db      	lsrs	r3, r3, #3
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	4413      	add	r3, r2
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80043e6:	e003      	b.n	80043f0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    offset_bits += 8U;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3308      	adds	r3, #8
 80043f4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d902      	bls.n	8004406 <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004400:	f06f 0309 	mvn.w	r3, #9
 8004404:	e01f      	b.n	8004446 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800440e:	019b      	lsls	r3, r3, #6
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	f7fd ff6d 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004422:	019b      	lsls	r3, r3, #6
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4413      	add	r3, r2
 8004428:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	3307      	adds	r3, #7
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004434:	69b9      	ldr	r1, [r7, #24]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7fd fe74 	bl	8002124 <nunavutChooseMin>
 800443c:	4603      	mov	r3, r0
 800443e:	08da      	lsrs	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	080169b0 	.word	0x080169b0

08004454 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d102      	bne.n	8004478 <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004472:	f06f 0301 	mvn.w	r3, #1
 8004476:	e003      	b.n	8004480 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d006      	beq.n	80044b2 <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80044b2:	f06f 0301 	mvn.w	r3, #1
 80044b6:	e008      	b.n	80044ca <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 80044c0:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	080169b0 	.word	0x080169b0

080044dc <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	; 0x30
 80044e0:	af04      	add	r7, sp, #16
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <uavcan_primitive_String_1_0_serialize_+0x1e>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <uavcan_primitive_String_1_0_serialize_+0x1e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80044fa:	f06f 0301 	mvn.w	r3, #1
 80044fe:	e060      	b.n	80045c2 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800450e:	d202      	bcs.n	8004516 <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004510:	f06f 0302 	mvn.w	r3, #2
 8004514:	e055      	b.n	80045c2 <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004524:	d902      	bls.n	800452c <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004526:	f06f 0309 	mvn.w	r3, #9
 800452a:	e04a      	b.n	80045c2 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	08db      	lsrs	r3, r3, #3
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	4413      	add	r3, r2
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	b292      	uxth	r2, r2
 800453e:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	3310      	adds	r3, #16
 8004544:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800454c:	00da      	lsls	r2, r3, #3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2100      	movs	r1, #0
 8004552:	9100      	str	r1, [sp, #0]
 8004554:	69f9      	ldr	r1, [r7, #28]
 8004556:	68b8      	ldr	r0, [r7, #8]
 8004558:	f7fd fe10 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	4413      	add	r3, r2
 8004568:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	2b00      	cmp	r3, #0
 8004572:	d021      	beq.n	80045b8 <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f1c3 0308 	rsb	r3, r3, #8
 8004582:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	9302      	str	r3, [sp, #8]
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9cd 2300 	strd	r2, r3, [sp]
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f7fd fed3 	bl	8002344 <nunavutSetUxx>
 800459e:	4603      	mov	r3, r0
 80045a0:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80045a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	da02      	bge.n	80045b0 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 80045aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80045ae:	e008      	b.n	80045c2 <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	08da      	lsrs	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <uavcan_primitive_String_1_0_deserialize_+0x26>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d006      	beq.n	80045f2 <uavcan_primitive_String_1_0_deserialize_+0x26>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <uavcan_primitive_String_1_0_deserialize_+0x2c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80045f2:	f06f 0301 	mvn.w	r3, #1
 80045f6:	e043      	b.n	8004680 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80045fe:	4b22      	ldr	r3, [pc, #136]	; (8004688 <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 8004600:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004612:	2310      	movs	r3, #16
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	69f9      	ldr	r1, [r7, #28]
 8004618:	68b8      	ldr	r0, [r7, #8]
 800461a:	f7fd feb9 	bl	8002390 <nunavutGetU16>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3310      	adds	r3, #16
 800462c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004638:	d902      	bls.n	8004640 <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800463a:	f06f 0309 	mvn.w	r3, #9
 800463e:	e01f      	b.n	8004680 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	f7fd fe50 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4413      	add	r3, r2
 8004662:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3307      	adds	r3, #7
 8004668:	f023 0307 	bic.w	r3, r3, #7
 800466c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800466e:	69b9      	ldr	r1, [r7, #24]
 8004670:	6978      	ldr	r0, [r7, #20]
 8004672:	f7fd fd57 	bl	8002124 <nunavutChooseMin>
 8004676:	4603      	mov	r3, r0
 8004678:	08da      	lsrs	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	080169b0 	.word	0x080169b0

0800468c <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	; 0x30
 8004690:	af04      	add	r7, sp, #16
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80046aa:	f06f 0301 	mvn.w	r3, #1
 80046ae:	e060      	b.n	8004772 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80046be:	d202      	bcs.n	80046c6 <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80046c0:	f06f 0302 	mvn.w	r3, #2
 80046c4:	e055      	b.n	8004772 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d4:	d902      	bls.n	80046dc <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80046d6:	f06f 0309 	mvn.w	r3, #9
 80046da:	e04a      	b.n	8004772 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	08db      	lsrs	r3, r3, #3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4413      	add	r3, r2
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80046ea:	8812      	ldrh	r2, [r2, #0]
 80046ec:	b292      	uxth	r2, r2
 80046ee:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3310      	adds	r3, #16
 80046f4:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046fc:	00da      	lsls	r2, r3, #3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2100      	movs	r1, #0
 8004702:	9100      	str	r1, [sp, #0]
 8004704:	69f9      	ldr	r1, [r7, #28]
 8004706:	68b8      	ldr	r0, [r7, #8]
 8004708:	f7fd fd38 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	2b00      	cmp	r3, #0
 8004722:	d021      	beq.n	8004768 <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f1c3 0308 	rsb	r3, r3, #8
 8004732:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9cd 2300 	strd	r2, r3, [sp]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	69b9      	ldr	r1, [r7, #24]
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f7fd fdfb 	bl	8002344 <nunavutSetUxx>
 800474e:	4603      	mov	r3, r0
 8004750:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004752:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004756:	2b00      	cmp	r3, #0
 8004758:	da02      	bge.n	8004760 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 800475a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800475e:	e008      	b.n	8004772 <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	08da      	lsrs	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80047a2:	f06f 0301 	mvn.w	r3, #1
 80047a6:	e043      	b.n	8004830 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80047ae:	4b22      	ldr	r3, [pc, #136]	; (8004838 <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 80047b0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80047c2:	2310      	movs	r3, #16
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	69f9      	ldr	r1, [r7, #28]
 80047c8:	68b8      	ldr	r0, [r7, #8]
 80047ca:	f7fd fde1 	bl	8002390 <nunavutGetU16>
 80047ce:	4603      	mov	r3, r0
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    offset_bits += 16U;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3310      	adds	r3, #16
 80047dc:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e8:	d902      	bls.n	80047f0 <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80047ea:	f06f 0309 	mvn.w	r3, #9
 80047ee:	e01f      	b.n	8004830 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	f7fd fd78 	bl	80022f6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3307      	adds	r3, #7
 8004818:	f023 0307 	bic.w	r3, r3, #7
 800481c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	6978      	ldr	r0, [r7, #20]
 8004822:	f7fd fc7f 	bl	8002124 <nunavutChooseMin>
 8004826:	4603      	mov	r3, r0
 8004828:	08da      	lsrs	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	080169b0 	.word	0x080169b0

0800483c <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b09e      	sub	sp, #120	; 0x78
 8004840:	af04      	add	r7, sp, #16
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <uavcan_register_Value_1_0_serialize_+0x1e>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <uavcan_register_Value_1_0_serialize_+0x1e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800485a:	f06f 0301 	mvn.w	r3, #1
 800485e:	e248      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	663b      	str	r3, [r7, #96]	; 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 8004866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	f640 0217 	movw	r2, #2071	; 0x817
 800486e:	4293      	cmp	r3, r2
 8004870:	d802      	bhi.n	8004878 <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004872:	f06f 0302 	mvn.w	r3, #2
 8004876:	e23c      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	667b      	str	r3, [r7, #100]	; 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 800487c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800487e:	08db      	lsrs	r3, r3, #3
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	4413      	add	r3, r2
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	f892 2208 	ldrb.w	r2, [r2, #520]	; 0x208
 800488a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800488c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488e:	3308      	adds	r3, #8
 8004890:	667b      	str	r3, [r7, #100]	; 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11b      	bne.n	80048d4 <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 800489c:	2300      	movs	r3, #0
 800489e:	64bb      	str	r3, [r7, #72]	; 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 80048a0:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 80048a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a4:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4413      	add	r3, r2
 80048aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7ff fdd0 	bl	8004454 <uavcan_primitive_Empty_1_0_serialize_>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
        if (_err0_ < 0)
 80048ba:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 80048be:	2b00      	cmp	r3, #0
 80048c0:	da02      	bge.n	80048c8 <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 80048c2:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 80048c6:	e214      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80048c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048ce:	4413      	add	r3, r2
 80048d0:	667b      	str	r3, [r7, #100]	; 0x64
 80048d2:	e1de      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d11c      	bne.n	8004918 <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 80048de:	f44f 7381 	mov.w	r3, #258	; 0x102
 80048e2:	647b      	str	r3, [r7, #68]	; 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 80048e4:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 80048e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e8:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80048f2:	4619      	mov	r1, r3
 80048f4:	f7ff fdf2 	bl	80044dc <uavcan_primitive_String_1_0_serialize_>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (_err1_ < 0)
 80048fe:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004902:	2b00      	cmp	r3, #0
 8004904:	da02      	bge.n	800490c <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 8004906:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800490a:	e1f2      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004912:	4413      	add	r3, r2
 8004914:	667b      	str	r3, [r7, #100]	; 0x64
 8004916:	e1bc      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800491e:	2b02      	cmp	r3, #2
 8004920:	d11c      	bne.n	800495c <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 8004922:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004926:	643b      	str	r3, [r7, #64]	; 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8004928:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 800492a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492c:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	4413      	add	r3, r2
 8004932:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004936:	4619      	mov	r1, r3
 8004938:	f7ff fea8 	bl	800468c <uavcan_primitive_Unstructured_1_0_serialize_>
 800493c:	4603      	mov	r3, r0
 800493e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (_err2_ < 0)
 8004942:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004946:	2b00      	cmp	r3, #0
 8004948:	da02      	bge.n	8004950 <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 800494a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800494e:	e1d0      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8004950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004956:	4413      	add	r3, r2
 8004958:	667b      	str	r3, [r7, #100]	; 0x64
 800495a:	e19a      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004962:	2b03      	cmp	r3, #3
 8004964:	d11c      	bne.n	80049a0 <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 8004966:	f44f 7381 	mov.w	r3, #258	; 0x102
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 800496c:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 800496e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004970:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800497a:	4619      	mov	r1, r3
 800497c:	f7fe fada 	bl	8002f34 <uavcan_primitive_array_Bit_1_0_serialize_>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
        if (_err3_ < 0)
 8004986:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 800498a:	2b00      	cmp	r3, #0
 800498c:	da02      	bge.n	8004994 <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 800498e:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004992:	e1ae      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 8004994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800499a:	4413      	add	r3, r2
 800499c:	667b      	str	r3, [r7, #100]	; 0x64
 800499e:	e178      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d11c      	bne.n	80049e4 <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 80049aa:	f240 1301 	movw	r3, #257	; 0x101
 80049ae:	63bb      	str	r3, [r7, #56]	; 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80049b0:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 80049b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b4:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4413      	add	r3, r2
 80049ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80049be:	4619      	mov	r1, r3
 80049c0:	f7fe fd48 	bl	8003454 <uavcan_primitive_array_Integer64_1_0_serialize_>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        if (_err4_ < 0)
 80049ca:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	da02      	bge.n	80049d8 <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 80049d2:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 80049d6:	e18c      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80049de:	4413      	add	r3, r2
 80049e0:	667b      	str	r3, [r7, #100]	; 0x64
 80049e2:	e156      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d11c      	bne.n	8004a28 <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 80049ee:	f240 1301 	movw	r3, #257	; 0x101
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 80049f4:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 80049f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f8:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004a02:	4619      	mov	r1, r3
 8004a04:	f7fe fc48 	bl	8003298 <uavcan_primitive_array_Integer32_1_0_serialize_>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
        if (_err5_ < 0)
 8004a0e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da02      	bge.n	8004a1c <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 8004a16:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8004a1a:	e16a      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a22:	4413      	add	r3, r2
 8004a24:	667b      	str	r3, [r7, #100]	; 0x64
 8004a26:	e134      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d11c      	bne.n	8004a6c <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 8004a32:	f240 1301 	movw	r3, #257	; 0x101
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004a38:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 8004a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a3c:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	4413      	add	r3, r2
 8004a42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7fe fb48 	bl	80030dc <uavcan_primitive_array_Integer16_1_0_serialize_>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if (_err6_ < 0)
 8004a52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da02      	bge.n	8004a60 <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 8004a5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a5e:	e148      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a66:	4413      	add	r3, r2
 8004a68:	667b      	str	r3, [r7, #100]	; 0x64
 8004a6a:	e112      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004a72:	2b07      	cmp	r3, #7
 8004a74:	d11c      	bne.n	8004ab0 <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 8004a76:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004a7c:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8004a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a80:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4413      	add	r3, r2
 8004a86:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f7fe fdc0 	bl	8003610 <uavcan_primitive_array_Integer8_1_0_serialize_>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
        if (_err7_ < 0)
 8004a96:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da02      	bge.n	8004aa4 <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 8004a9e:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8004aa2:	e126      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004aaa:	4413      	add	r3, r2
 8004aac:	667b      	str	r3, [r7, #100]	; 0x64
 8004aae:	e0f0      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d11c      	bne.n	8004af4 <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 8004aba:	f240 1301 	movw	r3, #257	; 0x101
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8004ac0:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 8004ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac4:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ace:	4619      	mov	r1, r3
 8004ad0:	f7ff f832 	bl	8003b38 <uavcan_primitive_array_Natural64_1_0_serialize_>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        if (_err8_ < 0)
 8004ada:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da02      	bge.n	8004ae8 <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 8004ae2:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8004ae6:	e104      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004aee:	4413      	add	r3, r2
 8004af0:	667b      	str	r3, [r7, #100]	; 0x64
 8004af2:	e0ce      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004afa:	2b09      	cmp	r3, #9
 8004afc:	d11c      	bne.n	8004b38 <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 8004afe:	f240 1301 	movw	r3, #257	; 0x101
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8004b04:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 8004b06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b08:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004b12:	4619      	mov	r1, r3
 8004b14:	f7fe ff32 	bl	800397c <uavcan_primitive_array_Natural32_1_0_serialize_>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
        if (_err9_ < 0)
 8004b1e:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	da02      	bge.n	8004b2c <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 8004b26:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 8004b2a:	e0e2      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b32:	4413      	add	r3, r2
 8004b34:	667b      	str	r3, [r7, #100]	; 0x64
 8004b36:	e0ac      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004b3e:	2b0a      	cmp	r3, #10
 8004b40:	d11c      	bne.n	8004b7c <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 8004b42:	f240 1301 	movw	r3, #257	; 0x101
 8004b46:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8004b48:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 8004b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b4c:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	f107 0220 	add.w	r2, r7, #32
 8004b56:	4619      	mov	r1, r3
 8004b58:	f7fe fe32 	bl	80037c0 <uavcan_primitive_array_Natural16_1_0_serialize_>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        if (_err10_ < 0)
 8004b62:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	da02      	bge.n	8004b70 <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 8004b6a:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8004b6e:	e0c0      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b76:	4413      	add	r3, r2
 8004b78:	667b      	str	r3, [r7, #100]	; 0x64
 8004b7a:	e08a      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004b82:	2b0b      	cmp	r3, #11
 8004b84:	d11c      	bne.n	8004bc0 <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 8004b86:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004b8a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8004b8c:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 8004b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b90:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4413      	add	r3, r2
 8004b96:	f107 021c 	add.w	r2, r7, #28
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f7ff f8aa 	bl	8003cf4 <uavcan_primitive_array_Natural8_1_0_serialize_>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (_err11_ < 0)
 8004ba6:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da02      	bge.n	8004bb4 <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 8004bae:	f997 305c 	ldrsb.w	r3, [r7, #92]	; 0x5c
 8004bb2:	e09e      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bba:	4413      	add	r3, r2
 8004bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bbe:	e068      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d11c      	bne.n	8004c04 <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 8004bca:	f240 1301 	movw	r3, #257	; 0x101
 8004bce:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8004bd0:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 8004bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bd4:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f107 0218 	add.w	r2, r7, #24
 8004bde:	4619      	mov	r1, r3
 8004be0:	f7ff fb5a 	bl	8004298 <uavcan_primitive_array_Real64_1_0_serialize_>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if (_err12_ < 0)
 8004bea:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da02      	bge.n	8004bf8 <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 8004bf2:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8004bf6:	e07c      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bfe:	4413      	add	r3, r2
 8004c00:	667b      	str	r3, [r7, #100]	; 0x64
 8004c02:	e046      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004c0a:	2b0d      	cmp	r3, #13
 8004c0c:	d11c      	bne.n	8004c48 <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 8004c0e:	f240 1301 	movw	r3, #257	; 0x101
 8004c12:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8004c14:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 8004c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c18:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f107 0214 	add.w	r2, r7, #20
 8004c22:	4619      	mov	r1, r3
 8004c24:	f7ff fa5a 	bl	80040dc <uavcan_primitive_array_Real32_1_0_serialize_>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        if (_err13_ < 0)
 8004c2e:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da02      	bge.n	8004c3c <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 8004c36:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004c3a:	e05a      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c42:	4413      	add	r3, r2
 8004c44:	667b      	str	r3, [r7, #100]	; 0x64
 8004c46:	e024      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004c4e:	2b0e      	cmp	r3, #14
 8004c50:	d11c      	bne.n	8004c8c <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 8004c52:	f240 1301 	movw	r3, #257	; 0x101
 8004c56:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004c58:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 8004c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c5c:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4413      	add	r3, r2
 8004c62:	f107 0210 	add.w	r2, r7, #16
 8004c66:	4619      	mov	r1, r3
 8004c68:	f7ff f91c 	bl	8003ea4 <uavcan_primitive_array_Real16_1_0_serialize_>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (_err14_ < 0)
 8004c72:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da02      	bge.n	8004c80 <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 8004c7a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004c7e:	e038      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c86:	4413      	add	r3, r2
 8004c88:	667b      	str	r3, [r7, #100]	; 0x64
 8004c8a:	e002      	b.n	8004c92 <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8004c8c:	f06f 030a 	mvn.w	r3, #10
 8004c90:	e02f      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d025      	beq.n	8004ce8 <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f1c3 0308 	rsb	r3, r3, #8
 8004caa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004cae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004cb2:	9302      	str	r3, [sp, #8]
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9cd 2300 	strd	r2, r3, [sp]
 8004cc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cc2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004cc4:	68b8      	ldr	r0, [r7, #8]
 8004cc6:	f7fd fb3d 	bl	8002344 <nunavutSetUxx>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (_err15_ < 0)
 8004cd0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da02      	bge.n	8004cde <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 8004cd8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004cdc:	e009      	b.n	8004cf2 <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 8004cde:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004ce2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ce4:	4413      	add	r3, r2
 8004ce6:	667b      	str	r3, [r7, #100]	; 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cea:	08da      	lsrs	r2, r3, #3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3768      	adds	r7, #104	; 0x68
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b09a      	sub	sp, #104	; 0x68
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <uavcan_register_Value_1_0_deserialize_+0x26>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <uavcan_register_Value_1_0_deserialize_+0x26>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <uavcan_register_Value_1_0_deserialize_+0x2c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004d22:	f06f 0301 	mvn.w	r3, #1
 8004d26:	e29b      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004d2e:	4bb0      	ldr	r3, [pc, #704]	; (8004ff0 <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 8004d30:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	663b      	str	r3, [r7, #96]	; 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t offset_bits = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	667b      	str	r3, [r7, #100]	; 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d44:	3308      	adds	r3, #8
 8004d46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d308      	bcc.n	8004d5e <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 8004d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	4413      	add	r3, r2
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8004d5c:	e003      	b.n	8004d66 <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    }
    offset_bits += 8U;
 8004d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d68:	3308      	adds	r3, #8
 8004d6a:	667b      	str	r3, [r7, #100]	; 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d123      	bne.n	8004dbe <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d78:	08db      	lsrs	r3, r3, #3
 8004d7a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd f9d1 	bl	8002124 <nunavutChooseMin>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	64bb      	str	r3, [r7, #72]	; 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004d8a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 8004d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8e:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	4413      	add	r3, r2
 8004d94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7ff fb77 	bl	800448c <uavcan_primitive_Empty_1_0_deserialize_>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            if (_err16_ < 0)
 8004da4:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da02      	bge.n	8004db2 <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 8004dac:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004db0:	e256      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 8004db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004db8:	4413      	add	r3, r2
 8004dba:	667b      	str	r3, [r7, #100]	; 0x64
 8004dbc:	e242      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d123      	bne.n	8004e10 <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dca:	08db      	lsrs	r3, r3, #3
 8004dcc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd f9a8 	bl	8002124 <nunavutChooseMin>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8004ddc:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 8004dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004de0:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	4413      	add	r3, r2
 8004de6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004dea:	4619      	mov	r1, r3
 8004dec:	f7ff fbee 	bl	80045cc <uavcan_primitive_String_1_0_deserialize_>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            if (_err17_ < 0)
 8004df6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	da02      	bge.n	8004e04 <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 8004dfe:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8004e02:	e22d      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8004e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e0a:	4413      	add	r3, r2
 8004e0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e0e:	e219      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d123      	bne.n	8004e62 <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd f97f 	bl	8002124 <nunavutChooseMin>
 8004e26:	4602      	mov	r2, r0
 8004e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	643b      	str	r3, [r7, #64]	; 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8004e2e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 8004e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e32:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	4413      	add	r3, r2
 8004e38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f7ff fc9d 	bl	800477c <uavcan_primitive_Unstructured_1_0_deserialize_>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (_err18_ < 0)
 8004e48:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	da02      	bge.n	8004e56 <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 8004e50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004e54:	e204      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 8004e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e5c:	4413      	add	r3, r2
 8004e5e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e60:	e1f0      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d123      	bne.n	8004eb4 <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e6e:	08db      	lsrs	r3, r3, #3
 8004e70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd f956 	bl	8002124 <nunavutChooseMin>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8004e80:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 8004e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e84:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f7fe f8c6 	bl	8003020 <uavcan_primitive_array_Bit_1_0_deserialize_>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if (_err19_ < 0)
 8004e9a:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da02      	bge.n	8004ea8 <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 8004ea2:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8004ea6:	e1db      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004eae:	4413      	add	r3, r2
 8004eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8004eb2:	e1c7      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d123      	bne.n	8004f06 <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec0:	08db      	lsrs	r3, r3, #3
 8004ec2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fd f92d 	bl	8002124 <nunavutChooseMin>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8004ed2:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8004ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed6:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	4413      	add	r3, r2
 8004edc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f7fe fb2d 	bl	8003540 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            if (_err20_ < 0)
 8004eec:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da02      	bge.n	8004efa <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 8004ef4:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8004ef8:	e1b2      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f00:	4413      	add	r3, r2
 8004f02:	667b      	str	r3, [r7, #100]	; 0x64
 8004f04:	e19e      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f0c:	2b05      	cmp	r3, #5
 8004f0e:	d123      	bne.n	8004f58 <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f12:	08db      	lsrs	r3, r3, #3
 8004f14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fd f904 	bl	8002124 <nunavutChooseMin>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8004f24:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 8004f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f28:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7fe fa26 	bl	8003384 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            if (_err21_ < 0)
 8004f3e:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da02      	bge.n	8004f4c <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 8004f46:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004f4a:	e189      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f52:	4413      	add	r3, r2
 8004f54:	667b      	str	r3, [r7, #100]	; 0x64
 8004f56:	e175      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d123      	bne.n	8004faa <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f64:	08db      	lsrs	r3, r3, #3
 8004f66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fd f8db 	bl	8002124 <nunavutChooseMin>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8004f76:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 8004f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f7a:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f84:	4619      	mov	r1, r3
 8004f86:	f7fe f91f 	bl	80031c8 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (_err22_ < 0)
 8004f90:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	da02      	bge.n	8004f9e <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 8004f98:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004f9c:	e160      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fa4:	4413      	add	r3, r2
 8004fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa8:	e14c      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004fb0:	2b07      	cmp	r3, #7
 8004fb2:	d125      	bne.n	8005000 <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fb6:	08db      	lsrs	r3, r3, #3
 8004fb8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fd f8b2 	bl	8002124 <nunavutChooseMin>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004fc8:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 8004fca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fcc:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7fe fb92 	bl	8003700 <uavcan_primitive_array_Integer8_1_0_deserialize_>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            if (_err23_ < 0)
 8004fe2:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da04      	bge.n	8004ff4 <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 8004fea:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8004fee:	e137      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
 8004ff0:	080169b0 	.word	0x080169b0
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ffa:	4413      	add	r3, r2
 8004ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffe:	e121      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005006:	2b08      	cmp	r3, #8
 8005008:	d123      	bne.n	8005052 <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800500a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005010:	4618      	mov	r0, r3
 8005012:	f7fd f887 	bl	8002124 <nunavutChooseMin>
 8005016:	4602      	mov	r2, r0
 8005018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 800501e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 8005020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005022:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	4413      	add	r3, r2
 8005028:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800502c:	4619      	mov	r1, r3
 800502e:	f7fe fdf9 	bl	8003c24 <uavcan_primitive_array_Natural64_1_0_deserialize_>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            if (_err24_ < 0)
 8005038:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 800503c:	2b00      	cmp	r3, #0
 800503e:	da02      	bge.n	8005046 <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 8005040:	f997 3055 	ldrsb.w	r3, [r7, #85]	; 0x55
 8005044:	e10c      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800504c:	4413      	add	r3, r2
 800504e:	667b      	str	r3, [r7, #100]	; 0x64
 8005050:	e0f8      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005058:	2b09      	cmp	r3, #9
 800505a:	d123      	bne.n	80050a4 <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800505c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800505e:	08db      	lsrs	r3, r3, #3
 8005060:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005062:	4618      	mov	r0, r3
 8005064:	f7fd f85e 	bl	8002124 <nunavutChooseMin>
 8005068:	4602      	mov	r2, r0
 800506a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8005070:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 8005072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005074:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	4413      	add	r3, r2
 800507a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800507e:	4619      	mov	r1, r3
 8005080:	f7fe fcf2 	bl	8003a68 <uavcan_primitive_array_Natural32_1_0_deserialize_>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            if (_err25_ < 0)
 800508a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800508e:	2b00      	cmp	r3, #0
 8005090:	da02      	bge.n	8005098 <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 8005092:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8005096:	e0e3      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800509e:	4413      	add	r3, r2
 80050a0:	667b      	str	r3, [r7, #100]	; 0x64
 80050a2:	e0cf      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050aa:	2b0a      	cmp	r3, #10
 80050ac:	d123      	bne.n	80050f6 <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80050ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fd f835 	bl	8002124 <nunavutChooseMin>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 80050c2:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 80050c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050c6:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	4413      	add	r3, r2
 80050cc:	f107 0220 	add.w	r2, r7, #32
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fe fbeb 	bl	80038ac <uavcan_primitive_array_Natural16_1_0_deserialize_>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (_err26_ < 0)
 80050dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	da02      	bge.n	80050ea <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 80050e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050e8:	e0ba      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050f0:	4413      	add	r3, r2
 80050f2:	667b      	str	r3, [r7, #100]	; 0x64
 80050f4:	e0a6      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050fc:	2b0b      	cmp	r3, #11
 80050fe:	d123      	bne.n	8005148 <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005102:	08db      	lsrs	r3, r3, #3
 8005104:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005106:	4618      	mov	r0, r3
 8005108:	f7fd f80c 	bl	8002124 <nunavutChooseMin>
 800510c:	4602      	mov	r2, r0
 800510e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005114:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 8005116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005118:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	f107 021c 	add.w	r2, r7, #28
 8005122:	4619      	mov	r1, r3
 8005124:	f7fe fe5e 	bl	8003de4 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            if (_err27_ < 0)
 800512e:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8005132:	2b00      	cmp	r3, #0
 8005134:	da02      	bge.n	800513c <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 8005136:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 800513a:	e091      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005142:	4413      	add	r3, r2
 8005144:	667b      	str	r3, [r7, #100]	; 0x64
 8005146:	e07d      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d123      	bne.n	800519a <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005154:	08db      	lsrs	r3, r3, #3
 8005156:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005158:	4618      	mov	r0, r3
 800515a:	f7fc ffe3 	bl	8002124 <nunavutChooseMin>
 800515e:	4602      	mov	r2, r0
 8005160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 8005166:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 8005168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800516a:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	4413      	add	r3, r2
 8005170:	f107 0218 	add.w	r2, r7, #24
 8005174:	4619      	mov	r1, r3
 8005176:	f7ff f905 	bl	8004384 <uavcan_primitive_array_Real64_1_0_deserialize_>
 800517a:	4603      	mov	r3, r0
 800517c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if (_err28_ < 0)
 8005180:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8005184:	2b00      	cmp	r3, #0
 8005186:	da02      	bge.n	800518e <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 8005188:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 800518c:	e068      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005194:	4413      	add	r3, r2
 8005196:	667b      	str	r3, [r7, #100]	; 0x64
 8005198:	e054      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80051a0:	2b0d      	cmp	r3, #13
 80051a2:	d123      	bne.n	80051ec <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80051a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a6:	08db      	lsrs	r3, r3, #3
 80051a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc ffba 	bl	8002124 <nunavutChooseMin>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 80051b8:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 80051ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051bc:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	f107 0214 	add.w	r2, r7, #20
 80051c6:	4619      	mov	r1, r3
 80051c8:	f7fe fffe 	bl	80041c8 <uavcan_primitive_array_Real32_1_0_deserialize_>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if (_err29_ < 0)
 80051d2:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da02      	bge.n	80051e0 <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 80051da:	f997 305a 	ldrsb.w	r3, [r7, #90]	; 0x5a
 80051de:	e03f      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051e6:	4413      	add	r3, r2
 80051e8:	667b      	str	r3, [r7, #100]	; 0x64
 80051ea:	e02b      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80051f2:	2b0e      	cmp	r3, #14
 80051f4:	d123      	bne.n	800523e <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80051f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fc ff91 	bl	8002124 <nunavutChooseMin>
 8005202:	4602      	mov	r2, r0
 8005204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 800520a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 800520c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520e:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4413      	add	r3, r2
 8005214:	f107 0210 	add.w	r2, r7, #16
 8005218:	4619      	mov	r1, r3
 800521a:	f7fe feed 	bl	8003ff8 <uavcan_primitive_array_Real16_1_0_deserialize_>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (_err30_ < 0)
 8005224:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005228:	2b00      	cmp	r3, #0
 800522a:	da02      	bge.n	8005232 <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 800522c:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005230:	e016      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005238:	4413      	add	r3, r2
 800523a:	667b      	str	r3, [r7, #100]	; 0x64
 800523c:	e002      	b.n	8005244 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 800523e:	f06f 030a 	mvn.w	r3, #10
 8005242:	e00d      	b.n	8005260 <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005246:	3307      	adds	r3, #7
 8005248:	f023 0307 	bic.w	r3, r3, #7
 800524c:	667b      	str	r3, [r7, #100]	; 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800524e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005250:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005252:	f7fc ff67 	bl	8002124 <nunavutChooseMin>
 8005256:	4603      	mov	r3, r0
 8005258:	08da      	lsrs	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3768      	adds	r7, #104	; 0x68
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08c      	sub	sp, #48	; 0x30
 800526c:	af04      	add	r7, sp, #16
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005286:	f06f 0301 	mvn.w	r3, #1
 800528a:	e043      	b.n	8005314 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	2b37      	cmp	r3, #55	; 0x37
 8005298:	d802      	bhi.n	80052a0 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800529a:	f06f 0302 	mvn.w	r3, #2
 800529e:	e039      	b.n	8005314 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	08db      	lsrs	r3, r3, #3
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	4413      	add	r3, r2
 80052ac:	68f9      	ldr	r1, [r7, #12]
 80052ae:	2207      	movs	r2, #7
 80052b0:	4618      	mov	r0, r3
 80052b2:	f00d faf0 	bl	8012896 <memmove>
        offset_bits += 56U;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3338      	adds	r3, #56	; 0x38
 80052ba:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d021      	beq.n	800530a <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f1c3 0308 	rsb	r3, r3, #8
 80052d4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	9302      	str	r3, [sp, #8]
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9cd 2300 	strd	r2, r3, [sp]
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	69b9      	ldr	r1, [r7, #24]
 80052ea:	68b8      	ldr	r0, [r7, #8]
 80052ec:	f7fd f82a 	bl	8002344 <nunavutSetUxx>
 80052f0:	4603      	mov	r3, r0
 80052f2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80052f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da02      	bge.n	8005302 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 80052fc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005300:	e008      	b.n	8005314 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	08da      	lsrs	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d006      	beq.n	8005342 <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005342:	f06f 0301 	mvn.w	r3, #1
 8005346:	e065      	b.n	8005414 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800534e:	4b33      	ldr	r3, [pc, #204]	; (800541c <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 8005350:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f7fc fedb 	bl	8002124 <nunavutChooseMin>
 800536e:	4602      	mov	r2, r0
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005376:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	4413      	add	r3, r2
 8005380:	f107 0214 	add.w	r2, r7, #20
 8005384:	4619      	mov	r1, r3
 8005386:	f7fd fd6d 	bl	8002e64 <uavcan_register_Name_1_0_deserialize_>
 800538a:	4603      	mov	r3, r0
 800538c:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 800538e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005392:	2b00      	cmp	r3, #0
 8005394:	da02      	bge.n	800539c <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 8005396:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800539a:	e03b      	b.n	8005414 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3307      	adds	r3, #7
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	08db      	lsrs	r3, r3, #3
 80053b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fc feb4 	bl	8002124 <nunavutChooseMin>
 80053bc:	4602      	mov	r2, r0
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 7084 	add.w	r0, r3, #264	; 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4413      	add	r3, r2
 80053d2:	f107 0210 	add.w	r2, r7, #16
 80053d6:	4619      	mov	r1, r3
 80053d8:	f7ff fc90 	bl	8004cfc <uavcan_register_Value_1_0_deserialize_>
 80053dc:	4603      	mov	r3, r0
 80053de:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 80053e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da02      	bge.n	80053ee <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 80053e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80053ec:	e012      	b.n	8005414 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	3307      	adds	r3, #7
 80053fc:	f023 0307 	bic.w	r3, r3, #7
 8005400:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005402:	6a39      	ldr	r1, [r7, #32]
 8005404:	69f8      	ldr	r0, [r7, #28]
 8005406:	f7fc fe8d 	bl	8002124 <nunavutChooseMin>
 800540a:	4603      	mov	r3, r0
 800540c:	08da      	lsrs	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3728      	adds	r7, #40	; 0x28
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	080169b0 	.word	0x080169b0

08005420 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	; 0x38
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800543e:	f06f 0301 	mvn.w	r3, #1
 8005442:	e0f0      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	f640 0257 	movw	r2, #2135	; 0x857
 8005452:	4293      	cmp	r3, r2
 8005454:	d802      	bhi.n	800545c <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005456:	f06f 0302 	mvn.w	r3, #2
 800545a:	e0e4      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 8005460:	2307      	movs	r3, #7
 8005462:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8005464:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	f107 0214 	add.w	r2, r7, #20
 8005472:	4619      	mov	r1, r3
 8005474:	f7ff fef8 	bl	8005268 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 8005478:	4603      	mov	r3, r0
 800547a:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 800547c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005480:	2b00      	cmp	r3, #0
 8005482:	da02      	bge.n	800548a <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 8005484:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005488:	e0cd      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	4413      	add	r3, r2
 8005492:	627b      	str	r3, [r7, #36]	; 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	7a1b      	ldrb	r3, [r3, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <uavcan_register_Access_Response_1_0_serialize_+0x80>
 800549c:	2101      	movs	r1, #1
 800549e:	e000      	b.n	80054a2 <uavcan_register_Access_Response_1_0_serialize_+0x82>
 80054a0:	2100      	movs	r1, #0
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	08db      	lsrs	r3, r3, #3
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4413      	add	r3, r2
 80054aa:	460a      	mov	r2, r1
 80054ac:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	3301      	adds	r3, #1
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	7a5b      	ldrb	r3, [r3, #9]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d013      	beq.n	80054e4 <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	08db      	lsrs	r3, r3, #3
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4413      	add	r3, r2
 80054c4:	7819      	ldrb	r1, [r3, #0]
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	2201      	movs	r2, #1
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	08db      	lsrs	r3, r3, #3
 80054d8:	68b8      	ldr	r0, [r7, #8]
 80054da:	4403      	add	r3, r0
 80054dc:	430a      	orrs	r2, r1
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e014      	b.n	800550e <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	08db      	lsrs	r3, r3, #3
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	4413      	add	r3, r2
 80054ec:	7819      	ldrb	r1, [r3, #0]
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	2201      	movs	r2, #1
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	08db      	lsrs	r3, r3, #3
 8005504:	68b8      	ldr	r0, [r7, #8]
 8005506:	4403      	add	r3, r0
 8005508:	400a      	ands	r2, r1
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	3301      	adds	r3, #1
 8005512:	627b      	str	r3, [r7, #36]	; 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8005514:	2306      	movs	r3, #6
 8005516:	9302      	str	r3, [sp, #8]
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9cd 2300 	strd	r2, r3, [sp]
 8005524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005526:	6a39      	ldr	r1, [r7, #32]
 8005528:	68b8      	ldr	r0, [r7, #8]
 800552a:	f7fc ff0b 	bl	8002344 <nunavutSetUxx>
 800552e:	4603      	mov	r3, r0
 8005530:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 8005532:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005536:	2b00      	cmp	r3, #0
 8005538:	da02      	bge.n	8005540 <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 800553a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800553e:	e072      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	3306      	adds	r3, #6
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	2b00      	cmp	r3, #0
 800554e:	d021      	beq.n	8005594 <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f1c3 0308 	rsb	r3, r3, #8
 800555e:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005560:	7f7b      	ldrb	r3, [r7, #29]
 8005562:	9302      	str	r3, [sp, #8]
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	e9cd 2300 	strd	r2, r3, [sp]
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	6a39      	ldr	r1, [r7, #32]
 8005574:	68b8      	ldr	r0, [r7, #8]
 8005576:	f7fc fee5 	bl	8002344 <nunavutSetUxx>
 800557a:	4603      	mov	r3, r0
 800557c:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 800557e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da02      	bge.n	800558c <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 8005586:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800558a:	e04c      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 800558c:	7f7b      	ldrb	r3, [r7, #29]
 800558e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005590:	4413      	add	r3, r2
 8005592:	627b      	str	r3, [r7, #36]	; 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8005594:	f240 1303 	movw	r3, #259	; 0x103
 8005598:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4413      	add	r3, r2
 80055a8:	f107 0210 	add.w	r2, r7, #16
 80055ac:	4619      	mov	r1, r3
 80055ae:	f7ff f945 	bl	800483c <uavcan_register_Value_1_0_serialize_>
 80055b2:	4603      	mov	r3, r0
 80055b4:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 80055b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	da02      	bge.n	80055c4 <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 80055be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80055c2:	e030      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ca:	4413      	add	r3, r2
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d021      	beq.n	800561c <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f1c3 0308 	rsb	r3, r3, #8
 80055e6:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 80055e8:	7ebb      	ldrb	r3, [r7, #26]
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9cd 2300 	strd	r2, r3, [sp]
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	6a39      	ldr	r1, [r7, #32]
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f7fc fea1 	bl	8002344 <nunavutSetUxx>
 8005602:	4603      	mov	r3, r0
 8005604:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 8005606:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800560a:	2b00      	cmp	r3, #0
 800560c:	da02      	bge.n	8005614 <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 800560e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005612:	e008      	b.n	8005626 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 8005614:	7ebb      	ldrb	r3, [r7, #26]
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	4413      	add	r3, r2
 800561a:	627b      	str	r3, [r7, #36]	; 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	08da      	lsrs	r2, r3, #3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3728      	adds	r7, #40	; 0x28
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b08c      	sub	sp, #48	; 0x30
 8005632:	af04      	add	r7, sp, #16
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <uavcan_node_Version_1_0_serialize_+0x1e>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <uavcan_node_Version_1_0_serialize_+0x1e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <uavcan_node_Version_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800564c:	f06f 0301 	mvn.w	r3, #1
 8005650:	e04b      	b.n	80056ea <uavcan_node_Version_1_0_serialize_+0xbc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	2b0f      	cmp	r3, #15
 800565e:	d802      	bhi.n	8005666 <uavcan_node_Version_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005660:	f06f 0302 	mvn.w	r3, #2
 8005664:	e041      	b.n	80056ea <uavcan_node_Version_1_0_serialize_+0xbc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	08db      	lsrs	r3, r3, #3
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	4413      	add	r3, r2
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	7812      	ldrb	r2, [r2, #0]
 8005676:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	3308      	adds	r3, #8
 800567c:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	4413      	add	r3, r2
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	7852      	ldrb	r2, [r2, #1]
 800568a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3308      	adds	r3, #8
 8005690:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	2b00      	cmp	r3, #0
 800569a:	d021      	beq.n	80056e0 <uavcan_node_Version_1_0_serialize_+0xb2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	f1c3 0308 	rsb	r3, r3, #8
 80056aa:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	9302      	str	r3, [sp, #8]
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9cd 2300 	strd	r2, r3, [sp]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	69b9      	ldr	r1, [r7, #24]
 80056c0:	68b8      	ldr	r0, [r7, #8]
 80056c2:	f7fc fe3f 	bl	8002344 <nunavutSetUxx>
 80056c6:	4603      	mov	r3, r0
 80056c8:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80056ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da02      	bge.n	80056d8 <uavcan_node_Version_1_0_serialize_+0xaa>
        {
            return _err0_;
 80056d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80056d6:	e008      	b.n	80056ea <uavcan_node_Version_1_0_serialize_+0xbc>
        }
        offset_bits += _pad0_;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 16ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	08da      	lsrs	r2, r3, #3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d006      	beq.n	800571a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800571a:	f06f 0301 	mvn.w	r3, #1
 800571e:	e008      	b.n	8005732 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005726:	4b06      	ldr	r3, [pc, #24]	; (8005740 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8005728:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	080169b0 	.word	0x080169b0

08005744 <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b090      	sub	sp, #64	; 0x40
 8005748:	af04      	add	r7, sp, #16
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <uavcan_node_GetInfo_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005762:	f06f 0301 	mvn.w	r3, #1
 8005766:	e16b      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	f640 12c7 	movw	r2, #2503	; 0x9c7
 8005776:	4293      	cmp	r3, r2
 8005778:	d802      	bhi.n	8005780 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800577a:	f06f 0302 	mvn.w	r3, #2
 800577e:	e15f      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 8005784:	2302      	movs	r3, #2
 8005786:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005788:	68f8      	ldr	r0, [r7, #12]
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4413      	add	r3, r2
 8005792:	f107 0218 	add.w	r2, r7, #24
 8005796:	4619      	mov	r1, r3
 8005798:	f7ff ff49 	bl	800562e <uavcan_node_Version_1_0_serialize_>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (_err0_ < 0)
 80057a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	da02      	bge.n	80057b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6c>
        {
            return _err0_;
 80057aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057ae:	e147      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b6:	4413      	add	r3, r2
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d025      	beq.n	8005810 <uavcan_node_GetInfo_Response_1_0_serialize_+0xcc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f1c3 0308 	rsb	r3, r3, #8
 80057d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80057d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057da:	9302      	str	r3, [sp, #8]
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9cd 2300 	strd	r2, r3, [sp]
 80057e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ec:	68b8      	ldr	r0, [r7, #8]
 80057ee:	f7fc fda9 	bl	8002344 <nunavutSetUxx>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (_err1_ < 0)
 80057f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da02      	bge.n	8005806 <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
        {
            return _err1_;
 8005800:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005804:	e11c      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad0_;
 8005806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800580a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580c:	4413      	add	r3, r2
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 8005810:	2302      	movs	r3, #2
 8005812:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	4413      	add	r3, r2
 8005820:	f107 0214 	add.w	r2, r7, #20
 8005824:	4619      	mov	r1, r3
 8005826:	f7ff ff02 	bl	800562e <uavcan_node_Version_1_0_serialize_>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (_err2_ < 0)
 8005830:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	da02      	bge.n	800583e <uavcan_node_GetInfo_Response_1_0_serialize_+0xfa>
        {
            return _err2_;
 8005838:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800583c:	e100      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005844:	4413      	add	r3, r2
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b00      	cmp	r3, #0
 8005850:	d025      	beq.n	800589e <uavcan_node_GetInfo_Response_1_0_serialize_+0x15a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f1c3 0308 	rsb	r3, r3, #8
 8005860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8005864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005868:	9302      	str	r3, [sp, #8]
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9cd 2300 	strd	r2, r3, [sp]
 8005876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800587a:	68b8      	ldr	r0, [r7, #8]
 800587c:	f7fc fd62 	bl	8002344 <nunavutSetUxx>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (_err3_ < 0)
 8005886:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800588a:	2b00      	cmp	r3, #0
 800588c:	da02      	bge.n	8005894 <uavcan_node_GetInfo_Response_1_0_serialize_+0x150>
        {
            return _err3_;
 800588e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005892:	e0d5      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad1_;
 8005894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800589a:	4413      	add	r3, r2
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 800589e:	2302      	movs	r3, #2
 80058a0:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4413      	add	r3, r2
 80058ae:	f107 0210 	add.w	r2, r7, #16
 80058b2:	4619      	mov	r1, r3
 80058b4:	f7ff febb 	bl	800562e <uavcan_node_Version_1_0_serialize_>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (_err4_ < 0)
 80058be:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da02      	bge.n	80058cc <uavcan_node_GetInfo_Response_1_0_serialize_+0x188>
        {
            return _err4_;
 80058c6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80058ca:	e0b9      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d2:	4413      	add	r3, r2
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	08db      	lsrs	r3, r3, #3
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	18d0      	adds	r0, r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3308      	adds	r3, #8
 80058e2:	2208      	movs	r2, #8
 80058e4:	4619      	mov	r1, r3
 80058e6:	f00c ffd6 	bl	8012896 <memmove>
        offset_bits += 64U;
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	3340      	adds	r3, #64	; 0x40
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3310      	adds	r3, #16
 80058f4:	2200      	movs	r2, #0
 80058f6:	9200      	str	r2, [sp, #0]
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058fc:	68b8      	ldr	r0, [r7, #8]
 80058fe:	f7fc fc3d 	bl	800217c <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	3380      	adds	r3, #128	; 0x80
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
        if (obj->name.count > 50)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	2b32      	cmp	r3, #50	; 0x32
 800590e:	d902      	bls.n	8005916 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1d2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005910:	f06f 0309 	mvn.w	r3, #9
 8005914:	e094      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	08db      	lsrs	r3, r3, #3
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4413      	add	r3, r2
 8005922:	b2ca      	uxtb	r2, r1
 8005924:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	3308      	adds	r3, #8
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005930:	00da      	lsls	r2, r3, #3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3320      	adds	r3, #32
 8005936:	2100      	movs	r1, #0
 8005938:	9100      	str	r1, [sp, #0]
 800593a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800593c:	68b8      	ldr	r0, [r7, #8]
 800593e:	f7fc fc1d 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594a:	4413      	add	r3, r2
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
        if (obj->software_image_crc.count > 1)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005952:	2b01      	cmp	r3, #1
 8005954:	d902      	bls.n	800595c <uavcan_node_GetInfo_Response_1_0_serialize_+0x218>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005956:	f06f 0309 	mvn.w	r3, #9
 800595a:	e071      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	08db      	lsrs	r3, r3, #3
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4413      	add	r3, r2
 8005968:	b2ca      	uxtb	r2, r1
 800596a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	3308      	adds	r3, #8
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005976:	019a      	lsls	r2, r3, #6
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3358      	adds	r3, #88	; 0x58
 800597c:	2100      	movs	r1, #0
 800597e:	9100      	str	r1, [sp, #0]
 8005980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005982:	68b8      	ldr	r0, [r7, #8]
 8005984:	f7fc fbfa 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005990:	4413      	add	r3, r2
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c


    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
        if (obj->certificate_of_authenticity.count > 222)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800599a:	2bde      	cmp	r3, #222	; 0xde
 800599c:	d902      	bls.n	80059a4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x260>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800599e:	f06f 0309 	mvn.w	r3, #9
 80059a2:	e04d      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	08db      	lsrs	r3, r3, #3
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	b2ca      	uxtb	r2, r1
 80059b4:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	3308      	adds	r3, #8
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80059c2:	00da      	lsls	r2, r3, #3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3368      	adds	r3, #104	; 0x68
 80059c8:	2100      	movs	r1, #0
 80059ca:	9100      	str	r1, [sp, #0]
 80059cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ce:	68b8      	ldr	r0, [r7, #8]
 80059d0:	f7fc fbd4 	bl	800217c <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059de:	4413      	add	r3, r2
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d024      	beq.n	8005a36 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2f2>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f1c3 0308 	rsb	r3, r3, #8
 80059fa:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80059fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a02:	9302      	str	r3, [sp, #8]
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8005a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a14:	68b8      	ldr	r0, [r7, #8]
 8005a16:	f7fc fc95 	bl	8002344 <nunavutSetUxx>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8005a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	da02      	bge.n	8005a2c <uavcan_node_GetInfo_Response_1_0_serialize_+0x2e8>
        {
            return _err5_;
 8005a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a2a:	e009      	b.n	8005a40 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad2_;
 8005a2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a32:	4413      	add	r3, r2
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c

    NUNAVUT_ASSERT(offset_bits >= 264ULL);
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	08da      	lsrs	r2, r3, #3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3730      	adds	r7, #48	; 0x30
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fe35 	bl	80066c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
      { }
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	f7fc f9a7 	bl	8001dd6 <Error_Handler>
 8005a88:	bf00      	nop
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <micros_64>:
// Тут не нужен точный таймер, поэтому так
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	f003 fa2e 	bl	8008ef0 <HAL_GetTick>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	461c      	mov	r4, r3
 8005aa2:	4615      	mov	r5, r2
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	462b      	mov	r3, r5
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	bdb0      	pop	{r4, r5, r7, pc}

08005aae <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	1d1a      	adds	r2, r3, #4
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f000 fe6c 	bl	80067a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff ffdf 	bl	8005aae <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff ff9f 	bl	8005a48 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 8005b1e:	687c      	ldr	r4, [r7, #4]
 8005b20:	f107 0308 	add.w	r3, r7, #8
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff ffd7 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005b2c:	f107 0308 	add.w	r3, r7, #8
 8005b30:	f641 5255 	movw	r2, #7509	; 0x1d55
 8005b34:	4619      	mov	r1, r3
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 fe4d 	bl	80067d6 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8005b3c:	f107 0308 	add.w	r3, r7, #8
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff ffda 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005b46:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd90      	pop	{r4, r7, pc}
 8005b56:	bf00      	nop
 8005b58:	08016a40 	.word	0x08016a40

08005b5c <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {}
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 8005b7e:	687c      	ldr	r4, [r7, #4]
 8005b80:	f107 0308 	add.w	r3, r7, #8
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff ffa7 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005b8c:	f107 0308 	add.w	r3, r7, #8
 8005b90:	f240 4265 	movw	r2, #1125	; 0x465
 8005b94:	4619      	mov	r1, r3
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 fe3b 	bl	8006812 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8005b9c:	f107 0308 	add.w	r3, r7, #8
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff ffaa 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005ba6:	4a04      	ldr	r2, [pc, #16]	; (8005bb8 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd90      	pop	{r4, r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08016a20 	.word	0x08016a20

08005bbc <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005bc8:	2104      	movs	r1, #4
 8005bca:	4803      	ldr	r0, [pc, #12]	; (8005bd8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x1c>)
 8005bcc:	f004 fb76 	bl	800a2bc <HAL_GPIO_TogglePin>
    }
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	48000c00 	.word	0x48000c00

08005bdc <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
RegisterListReader* reg_list_service;


class NodeInfoReader : public AbstractSubscription<NodeInfoRequest> {
public:
    NodeInfoReader(InterfacePtr interface): AbstractSubscription<NodeInfoRequest>(
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 8005be6:	687c      	ldr	r4, [r7, #4]
 8005be8:	f107 0308 	add.w	r3, r7, #8
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff ff73 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005bf4:	f107 0108 	add.w	r1, r7, #8
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 fe36 	bl	8006870 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8005c04:	f107 0308 	add.w	r3, r7, #8
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff ff76 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005c0e:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd90      	pop	{r4, r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	08016a00 	.word	0x08016a00

08005c24 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer>:
NodeInfoReader* nireader;

void NodeInfoReader::handler(
    const uavcan_node_GetInfo_Request_1_0& object,
    CanardRxTransfer* transfer
) {
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	b0e5      	sub	sp, #404	; 0x194
 8005c28:	af06      	add	r7, sp, #24
 8005c2a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005c32:	6018      	str	r0, [r3, #0]
 8005c34:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c38:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005c3c:	6019      	str	r1, [r3, #0]
 8005c3e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c42:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005c46:	601a      	str	r2, [r3, #0]
    static uint8_t node_info_buf[NodeInfoResponse::buffer_size];

    NodeInfoResponse::Type node_info_response = {
 8005c48:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c4c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c50:	4618      	mov	r0, r3
 8005c52:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005c56:	461a      	mov	r2, r3
 8005c58:	2100      	movs	r1, #0
 8005c5a:	f00c fe36 	bl	80128ca <memset>
 8005c5e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c62:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c6e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c72:	2201      	movs	r2, #1
 8005c74:	709a      	strb	r2, [r3, #2]
 8005c76:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c7a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c7e:	2201      	movs	r2, #1
 8005c80:	715a      	strb	r2, [r3, #5]
                1,
                0,
            },
        .software_version = {0, 1},
        .software_vcs_revision_id = 0};
    node_info_response.certificate_of_authenticity.count = 0;
 8005c82:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c86:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    node_info_response.software_image_crc.count = 0;
 8005c90:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c94:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005c98:	2200      	movs	r2, #0
 8005c9a:	661a      	str	r2, [r3, #96]	; 0x60
        case 4:
            name_len = 23;
            memcpy(node_info_response.name.elements, "org.voltbro.motor.right", name_len);
            break;
        default:
            name_len = 7;
 8005c9c:	2307      	movs	r3, #7
 8005c9e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
            memcpy(node_info_response.name.elements, "JOINT_5", name_len);
 8005ca2:	f107 0320 	add.w	r3, r7, #32
 8005ca6:	3320      	adds	r3, #32
 8005ca8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005cac:	4933      	ldr	r1, [pc, #204]	; (8005d7c <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x158>)
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f00c fef1 	bl	8012a96 <memcpy>
            break;
 8005cb4:	bf00      	nop
    }
    node_info_response.name.count = name_len;
 8005cb6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005cba:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005cbe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54

    uint32_t word0 = 1;
 8005cc4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005cc8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
    uint32_t word1 = 2;
 8005cd0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005cd4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005cd8:	2202      	movs	r2, #2
 8005cda:	601a      	str	r2, [r3, #0]
    uint32_t word2 = 3;
 8005cdc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005ce0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005cec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8005cf0:	681a      	ldr	r2, [r3, #0]
    memcpy(node_info_response.unique_id, &word0, 4);
 8005cf2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005cf6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005cfa:	611a      	str	r2, [r3, #16]
    memcpy(node_info_response.unique_id + 4, &word1, 4);
 8005cfc:	f107 0320 	add.w	r3, r7, #32
 8005d00:	3310      	adds	r3, #16
 8005d02:	3304      	adds	r3, #4
 8005d04:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8005d08:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id + 8, &word2, 4);
 8005d10:	f107 0320 	add.w	r3, r7, #32
 8005d14:	3310      	adds	r3, #16
 8005d16:	3308      	adds	r3, #8
 8005d18:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8005d1c:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	601a      	str	r2, [r3, #0]

    node_info_response.unique_id[0] = JOINT_N;
 8005d24:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005d28:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005d2c:	2205      	movs	r2, #5
 8005d2e:	741a      	strb	r2, [r3, #16]

    interface->send_response<NodeInfoResponse>(
 8005d30:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005d34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fdc8 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8005d44:	4604      	mov	r4, r0
 8005d46:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005d4a:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8005d4e:	f107 0020 	add.w	r0, r7, #32
 8005d52:	2304      	movs	r3, #4
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x15c>)
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d60:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	680b      	ldr	r3, [r1, #0]
 8005d68:	4a06      	ldr	r2, [pc, #24]	; (8005d84 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x160>)
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 fdbd 	bl	80068ec <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &node_info_response,
        node_info_buf,
        transfer,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_
    );
}
 8005d72:	bf00      	nop
 8005d74:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd90      	pop	{r4, r7, pc}
 8005d7c:	080169b4 	.word	0x080169b4
 8005d80:	000f4240 	.word	0x000f4240
 8005d84:	2000047c 	.word	0x2000047c

08005d88 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:



class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 8005d88:	b590      	push	{r4, r7, lr}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 8005d92:	687c      	ldr	r4, [r7, #4]
 8005d94:	f107 0308 	add.w	r3, r7, #8
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fe9d 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005da0:	f107 0108 	add.w	r1, r7, #8
 8005da4:	2302      	movs	r3, #2
 8005da6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 fde8 	bl	8006980 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8005db0:	f107 0308 	add.w	r3, r7, #8
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fea0 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8005dba:	4a04      	ldr	r2, [pc, #16]	; (8005dcc <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd90      	pop	{r4, r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	080169e0 	.word	0x080169e0

08005dd0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:
uint8_t motor_voltage_reg_name[MOTOR_VOLTAGE_REG_NAME_LEN + 1] = "motor.voltage";

void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 8005dd0:	b590      	push	{r4, r7, lr}
 8005dd2:	f2ad 5d84 	subw	sp, sp, #1412	; 0x584
 8005dd6:	af06      	add	r7, sp, #24
 8005dd8:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005ddc:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8005de0:	6018      	str	r0, [r3, #0]
 8005de2:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005de6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005dea:	6019      	str	r1, [r3, #0]
 8005dec:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005df0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8005df4:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 8005df6:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005dfa:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005e04:	461a      	mov	r2, r3
 8005e06:	2100      	movs	r1, #0
 8005e08:	f00c fd5f 	bl	80128ca <memset>

    register_access_response.timestamp.microsecond = micros_64();
 8005e0c:	f7ff fe3e 	bl	8005a8c <micros_64>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8005e18:	f5a1 7110 	sub.w	r1, r1, #576	; 0x240
 8005e1c:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 8005e20:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005e24:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f44f 7304 	mov.w	r3, #528	; 0x210
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2100      	movs	r1, #0
 8005e32:	f00c fd4a 	bl	80128ca <memset>
    uint64_t tv = 0; //PZDC!!!! temp value...
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8005e42:	e9c1 2300 	strd	r2, r3, [r1]
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 8005e46:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005e4a:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2208      	movs	r2, #8
 8005e52:	49c4      	ldr	r1, [pc, #784]	; (8006164 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x394>)
 8005e54:	4618      	mov	r0, r3
 8005e56:	f00c fd0e 	bl	8012876 <memcmp>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d15b      	bne.n	8005f18 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x148>
    {
    	//tv = register_access_request.value._tag_;
        if (register_access_request.value._tag_ == 4) {
 8005e60:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005e64:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d113      	bne.n	8005e9a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xca>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005e72:	2104      	movs	r1, #4
 8005e74:	48bc      	ldr	r0, [pc, #752]	; (8006168 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 8005e76:	f004 fa21 	bl	800a2bc <HAL_GPIO_TogglePin>
//            if (register_access_request.value.integer64.value.elements[0] != 0)
//            {
            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
 8005e7a:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005e7e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8005e88:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8005e8c:	e9c1 2300 	strd	r2, r3, [r1]
            	tmc5160_move(tv);
 8005e90:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8005e94:	4618      	mov	r0, r3
 8005e96:	f002 fd27 	bl	80088e8 <tmc5160_move>
//            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
//            	tmc5160_move(0);
//            }
        }

        register_access_response.persistent = true;
 8005e9a:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005e9e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005ea6:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005eaa:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8005eae:	2201      	movs	r2, #1
 8005eb0:	721a      	strb	r2, [r3, #8]
        value._tag_ = 4;
 8005eb2:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005eb6:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8005eba:	2204      	movs	r2, #4
 8005ebc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Integer64_1_0 result = {};
 8005ec0:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005ec4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	f00c fcfa 	bl	80128ca <memset>
        result.value.elements[0] = tv; //PZDC!!!
 8005ed6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8005ee2:	f5a1 61ab 	sub.w	r1, r1, #1368	; 0x558
 8005ee6:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8005eea:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005eee:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.integer64 = result;
 8005ef8:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005efc:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 8005f00:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005f04:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005f10:	461a      	mov	r2, r3
 8005f12:	f00c fdc0 	bl	8012a96 <memcpy>
 8005f16:	e13e      	b.n	8006196 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c6>
    } else if (memcmp(register_access_request.name.name.elements, motor_speed_reg_name, MOTOR_SPEED_REG_NAME_LEN) == 0) {
 8005f18:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005f1c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	220b      	movs	r2, #11
 8005f24:	4991      	ldr	r1, [pc, #580]	; (800616c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x39c>)
 8005f26:	4618      	mov	r0, r3
 8005f28:	f00c fca5 	bl	8012876 <memcmp>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d15a      	bne.n	8005fe8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x218>
        if (register_access_request.value._tag_ == 12) {
 8005f32:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005f36:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8005f40:	2b0c      	cmp	r3, #12
 8005f42:	d10a      	bne.n	8005f5a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x18a>
            double new_speed = register_access_request.value.real64.value.elements[0];
 8005f44:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005f48:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8005f52:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8005f56:	e9c1 2300 	strd	r2, r3, [r1]
            //motor_set_speed(new_speed);
        }

        register_access_response.persistent = true;
 8005f5a:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005f5e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8005f62:	2201      	movs	r2, #1
 8005f64:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005f66:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005f6a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8005f6e:	2201      	movs	r2, #1
 8005f70:	721a      	strb	r2, [r3, #8]
        value._tag_ = 12;
 8005f72:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005f76:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8005f7a:	220c      	movs	r2, #12
 8005f7c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Real64_1_0 result = {};
 8005f80:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005f84:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2100      	movs	r1, #0
 8005f92:	f00c fc9a 	bl	80128ca <memset>
        result.value.elements[0] = register_access_request.value._tag_; //motor_get_speed();
 8005f96:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005f9a:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fa fad5 	bl	8000554 <__aeabi_ui2d>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8005fb2:	f5a1 61ab 	sub.w	r1, r1, #1368	; 0x558
 8005fb6:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8005fba:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005fbe:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.real64 = result;
 8005fc8:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005fcc:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 8005fd0:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005fd4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4619      	mov	r1, r3
 8005fdc:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f00c fd58 	bl	8012a96 <memcpy>
 8005fe6:	e0d6      	b.n	8006196 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c6>
    } else if (memcmp(register_access_request.name.name.elements, motor_current_lim_reg_name, MOTOR_CURRENT_LIM_REG_NAME_LEN) == 0) {
 8005fe8:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005fec:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2213      	movs	r2, #19
 8005ff4:	495e      	ldr	r1, [pc, #376]	; (8006170 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a0>)
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f00c fc3d 	bl	8012876 <memcmp>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d151      	bne.n	80060a6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2d6>
        if (register_access_request.value._tag_ == 12) {
 8006002:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006006:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d10a      	bne.n	800602a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x25a>
            double new_current_lim = register_access_request.value.real64.value.elements[0];
 8006014:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006018:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8006022:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8006026:	e9c1 2300 	strd	r2, r3, [r1]
            if (new_current_lim > 0) {
                //motor_set_current_lim(new_current_lim);
            }
        }

        register_access_response.persistent = true;
 800602a:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800602e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8006032:	2201      	movs	r2, #1
 8006034:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006036:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800603a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800603e:	2201      	movs	r2, #1
 8006040:	721a      	strb	r2, [r3, #8]
        value._tag_ = 12;
 8006042:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006046:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800604a:	220c      	movs	r2, #12
 800604c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Real64_1_0 result = {};
 8006050:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006054:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006058:	4618      	mov	r0, r3
 800605a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800605e:	461a      	mov	r2, r3
 8006060:	2100      	movs	r1, #0
 8006062:	f00c fc32 	bl	80128ca <memset>
        result.value.elements[0] = 1; //motor_get_current_lim();
 8006066:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800606a:	f5a3 61ab 	sub.w	r1, r3, #1368	; 0x558
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	4b40      	ldr	r3, [pc, #256]	; (8006174 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a4>)
 8006074:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8006078:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800607c:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006080:	2201      	movs	r2, #1
 8006082:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.real64 = result;
 8006086:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800608a:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 800608e:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006092:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006096:	4610      	mov	r0, r2
 8006098:	4619      	mov	r1, r3
 800609a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800609e:	461a      	mov	r2, r3
 80060a0:	f00c fcf9 	bl	8012a96 <memcpy>
 80060a4:	e077      	b.n	8006196 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c6>
    } else if (memcmp(register_access_request.name.name.elements, motor_voltage_reg_name, MOTOR_VOLTAGE_REG_NAME_LEN) == 0) {
 80060a6:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80060aa:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	220d      	movs	r2, #13
 80060b2:	4931      	ldr	r1, [pc, #196]	; (8006178 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a8>)
 80060b4:	4618      	mov	r0, r3
 80060b6:	f00c fbde 	bl	8012876 <memcmp>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d15d      	bne.n	800617c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>
        if (register_access_request.value._tag_ == 12) {
 80060c0:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80060c4:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 80060ce:	2b0c      	cmp	r3, #12
 80060d0:	d10a      	bne.n	80060e8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x318>
            double new_voltage = register_access_request.value.real64.value.elements[0];
 80060d2:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80060d6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 80060e0:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80060e4:	e9c1 2300 	strd	r2, r3, [r1]
            //motor_set_voltage(new_voltage);
        }

        register_access_response.persistent = true;
 80060e8:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80060ec:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80060f0:	2201      	movs	r2, #1
 80060f2:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80060f4:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80060f8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80060fc:	2201      	movs	r2, #1
 80060fe:	721a      	strb	r2, [r3, #8]
        value._tag_ = 12;
 8006100:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006104:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8006108:	220c      	movs	r2, #12
 800610a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        uavcan_primitive_array_Real64_1_0 result = {};
 800610e:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006112:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006116:	4618      	mov	r0, r3
 8006118:	f44f 7384 	mov.w	r3, #264	; 0x108
 800611c:	461a      	mov	r2, r3
 800611e:	2100      	movs	r1, #0
 8006120:	f00c fbd3 	bl	80128ca <memset>
        result.value.elements[0] = 1; //motor_get_current_lim();
 8006124:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006128:	f5a3 61ab 	sub.w	r1, r3, #1368	; 0x558
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	4b10      	ldr	r3, [pc, #64]	; (8006174 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a4>)
 8006132:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8006136:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800613a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800613e:	2201      	movs	r2, #1
 8006140:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        value.real64 = result;
 8006144:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006148:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 800614c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006150:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006154:	4610      	mov	r0, r2
 8006156:	4619      	mov	r1, r3
 8006158:	f44f 7384 	mov.w	r3, #264	; 0x108
 800615c:	461a      	mov	r2, r3
 800615e:	f00c fc9a 	bl	8012a96 <memcpy>
 8006162:	e018      	b.n	8006196 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3c6>
 8006164:	20000000 	.word	0x20000000
 8006168:	48000c00 	.word	0x48000c00
 800616c:	20000020 	.word	0x20000020
 8006170:	2000000c 	.word	0x2000000c
 8006174:	3ff00000 	.word	0x3ff00000
 8006178:	2000002c 	.word	0x2000002c
    } else {
        value._tag_ = 0;
 800617c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8006180:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 800618a:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800618e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 8006196:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800619a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800619e:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 80061a2:	f5a2 628a 	sub.w	r2, r2, #1104	; 0x450
 80061a6:	3310      	adds	r3, #16
 80061a8:	4611      	mov	r1, r2
 80061aa:	f44f 7204 	mov.w	r2, #528	; 0x210
 80061ae:	4618      	mov	r0, r3
 80061b0:	f00c fc71 	bl	8012a96 <memcpy>

    interface->send_response<RegisterAccessResponse>(
 80061b4:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80061b8:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fb86 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80061c8:	4604      	mov	r4, r0
 80061ca:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80061ce:	f2a3 5164 	subw	r1, r3, #1380	; 0x564
 80061d2:	f507 704a 	add.w	r0, r7, #808	; 0x328
 80061d6:	2304      	movs	r3, #4
 80061d8:	9304      	str	r3, [sp, #16]
 80061da:	4a09      	ldr	r2, [pc, #36]	; (8006200 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x430>)
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	680b      	ldr	r3, [r1, #0]
 80061ec:	4a05      	ldr	r2, [pc, #20]	; (8006204 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x434>)
 80061ee:	4601      	mov	r1, r0
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 fbf7 	bl	80069e4 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 80061f6:	bf00      	nop
 80061f8:	f207 576c 	addw	r7, r7, #1388	; 0x56c
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd90      	pop	{r4, r7, pc}
 8006200:	000f4240 	.word	0x000f4240
 8006204:	200005bc 	.word	0x200005bc

08006208 <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 800620e:	463b      	mov	r3, r7
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <heartbeat+0x4c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 800621c:	480e      	ldr	r0, [pc, #56]	; (8006258 <heartbeat+0x50>)
 800621e:	f000 fb59 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006222:	4639      	mov	r1, r7
 8006224:	2304      	movs	r3, #4
 8006226:	9304      	str	r3, [sp, #16]
 8006228:	4a0c      	ldr	r2, [pc, #48]	; (800625c <heartbeat+0x54>)
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <heartbeat+0x58>)
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	f641 5355 	movw	r3, #7509	; 0x1d55
 800623a:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <heartbeat+0x5c>)
 800623c:	f000 fc1b 	bl	8006a76 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <heartbeat+0x4c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	4a03      	ldr	r2, [pc, #12]	; (8006254 <heartbeat+0x4c>)
 8006248:	6013      	str	r3, [r2, #0]

}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	200006d0 	.word	0x200006d0
 8006258:	20000448 	.word	0x20000448
 800625c:	000f4240 	.word	0x000f4240
 8006260:	200006cf 	.word	0x200006cf
 8006264:	200006c8 	.word	0x200006c8

08006268 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 8006268:	b5b0      	push	{r4, r5, r7, lr}
 800626a:	b08e      	sub	sp, #56	; 0x38
 800626c:	af02      	add	r7, sp, #8
 800626e:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 8006270:	4b41      	ldr	r3, [pc, #260]	; (8006378 <setup_cyphal+0x110>)
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	2105      	movs	r1, #5
 800627c:	483f      	ldr	r0, [pc, #252]	; (800637c <setup_cyphal+0x114>)
 800627e:	f000 fc19 	bl	8006ab4 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8006282:	4602      	mov	r2, r0
 8006284:	f107 0308 	add.w	r3, r7, #8
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fc3b 	bl	8006b06 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8006290:	f107 0308 	add.w	r3, r7, #8
 8006294:	4619      	mov	r1, r3
 8006296:	483a      	ldr	r0, [pc, #232]	; (8006380 <setup_cyphal+0x118>)
 8006298:	f000 fc44 	bl	8006b24 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 800629c:	f107 0308 	add.w	r3, r7, #8
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fc2a 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 80062a6:	f107 0310 	add.w	r3, r7, #16
 80062aa:	4935      	ldr	r1, [pc, #212]	; (8006380 <setup_cyphal+0x118>)
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fc14 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80062b2:	f107 0510 	add.w	r5, r7, #16
 80062b6:	f44f 700e 	mov.w	r0, #568	; 0x238
 80062ba:	f00b fa1c 	bl	80116f6 <_Znwj>
 80062be:	4603      	mov	r3, r0
 80062c0:	461c      	mov	r4, r3
 80062c2:	4629      	mov	r1, r5
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7ff fc25 	bl	8005b14 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80062ca:	4b2e      	ldr	r3, [pc, #184]	; (8006384 <setup_cyphal+0x11c>)
 80062cc:	601c      	str	r4, [r3, #0]
 80062ce:	f107 0310 	add.w	r3, r7, #16
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fc11 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 80062d8:	f107 0318 	add.w	r3, r7, #24
 80062dc:	4928      	ldr	r1, [pc, #160]	; (8006380 <setup_cyphal+0x118>)
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff fbfb 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80062e4:	f107 0518 	add.w	r5, r7, #24
 80062e8:	f44f 700e 	mov.w	r0, #568	; 0x238
 80062ec:	f00b fa03 	bl	80116f6 <_Znwj>
 80062f0:	4603      	mov	r3, r0
 80062f2:	461c      	mov	r4, r3
 80062f4:	4629      	mov	r1, r5
 80062f6:	4620      	mov	r0, r4
 80062f8:	f7ff fc3c 	bl	8005b74 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80062fc:	4b22      	ldr	r3, [pc, #136]	; (8006388 <setup_cyphal+0x120>)
 80062fe:	601c      	str	r4, [r3, #0]
 8006300:	f107 0318 	add.w	r3, r7, #24
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff fbf8 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 800630a:	f107 0320 	add.w	r3, r7, #32
 800630e:	491c      	ldr	r1, [pc, #112]	; (8006380 <setup_cyphal+0x118>)
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff fbe2 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006316:	f107 0520 	add.w	r5, r7, #32
 800631a:	f44f 700e 	mov.w	r0, #568	; 0x238
 800631e:	f00b f9ea 	bl	80116f6 <_Znwj>
 8006322:	4603      	mov	r3, r0
 8006324:	461c      	mov	r4, r3
 8006326:	4629      	mov	r1, r5
 8006328:	4620      	mov	r0, r4
 800632a:	f7ff fd2d 	bl	8005d88 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <setup_cyphal+0x124>)
 8006330:	601c      	str	r4, [r3, #0]
 8006332:	f107 0320 	add.w	r3, r7, #32
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff fbdf 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	nireader = new NodeInfoReader(interface);
 800633c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006340:	490f      	ldr	r1, [pc, #60]	; (8006380 <setup_cyphal+0x118>)
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fbc9 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006348:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800634c:	f44f 700e 	mov.w	r0, #568	; 0x238
 8006350:	f00b f9d1 	bl	80116f6 <_Znwj>
 8006354:	4603      	mov	r3, r0
 8006356:	461c      	mov	r4, r3
 8006358:	4629      	mov	r1, r5
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff fc3e 	bl	8005bdc <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <setup_cyphal+0x128>)
 8006362:	601c      	str	r4, [r3, #0]
 8006364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff fbc6 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 800636e:	bf00      	nop
 8006370:	3730      	adds	r7, #48	; 0x30
 8006372:	46bd      	mov	sp, r7
 8006374:	bdb0      	pop	{r4, r5, r7, pc}
 8006376:	bf00      	nop
 8006378:	20000450 	.word	0x20000450
 800637c:	200003f0 	.word	0x200003f0
 8006380:	20000448 	.word	0x20000448
 8006384:	20000470 	.word	0x20000470
 8006388:	20000474 	.word	0x20000474
 800638c:	200005b8 	.word	0x200005b8
 8006390:	20000478 	.word	0x20000478

08006394 <cyphal_loop>:

void cyphal_loop() {
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
    interface->loop();
 8006398:	4804      	ldr	r0, [pc, #16]	; (80063ac <cyphal_loop+0x18>)
 800639a:	f000 fa9b 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800639e:	4603      	mov	r3, r0
 80063a0:	4618      	mov	r0, r3
 80063a2:	f008 fbe7 	bl	800eb74 <_ZN15CyphalInterface4loopEv>
}
 80063a6:	bf00      	nop
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000448 	.word	0x20000448

080063b0 <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08c      	sub	sp, #48	; 0x30
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 80063b8:	f107 0320 	add.w	r3, r7, #32
 80063bc:	2105      	movs	r1, #5
 80063be:	4618      	mov	r0, r3
 80063c0:	f00b f94a 	bl	8011658 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(1125);//JS_SUB_PORT_ID
 80063c4:	f107 0318 	add.w	r3, r7, #24
 80063c8:	f240 4165 	movw	r1, #1125	; 0x465
 80063cc:	4618      	mov	r0, r3
 80063ce:	f00b f923 	bl	8011618 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 80063d2:	f107 0310 	add.w	r3, r7, #16
 80063d6:	f641 5155 	movw	r1, #7509	; 0x1d55
 80063da:	4618      	mov	r0, r3
 80063dc:	f00b f91c 	bl	8011618 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 80063e0:	f107 0308 	add.w	r3, r7, #8
 80063e4:	f107 0218 	add.w	r2, r7, #24
 80063e8:	f107 0120 	add.w	r1, r7, #32
 80063ec:	4618      	mov	r0, r3
 80063ee:	f00b f955 	bl	801169c <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80063f2:	4b45      	ldr	r3, [pc, #276]	; (8006508 <cyphal_can_starter+0x158>)
 80063f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80063f8:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 80063fa:	4b43      	ldr	r3, [pc, #268]	; (8006508 <cyphal_can_starter+0x158>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8006400:	4b41      	ldr	r3, [pc, #260]	; (8006508 <cyphal_can_starter+0x158>)
 8006402:	2202      	movs	r2, #2
 8006404:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006406:	4b40      	ldr	r3, [pc, #256]	; (8006508 <cyphal_can_starter+0x158>)
 8006408:	2201      	movs	r2, #1
 800640a:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	4a3e      	ldr	r2, [pc, #248]	; (8006508 <cyphal_can_starter+0x158>)
 8006410:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	4a3c      	ldr	r2, [pc, #240]	; (8006508 <cyphal_can_starter+0x158>)
 8006416:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006418:	4b3c      	ldr	r3, [pc, #240]	; (800650c <cyphal_can_starter+0x15c>)
 800641a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800641e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 8006420:	4b3a      	ldr	r3, [pc, #232]	; (800650c <cyphal_can_starter+0x15c>)
 8006422:	2201      	movs	r2, #1
 8006424:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8006426:	4b39      	ldr	r3, [pc, #228]	; (800650c <cyphal_can_starter+0x15c>)
 8006428:	2202      	movs	r2, #2
 800642a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800642c:	4b37      	ldr	r3, [pc, #220]	; (800650c <cyphal_can_starter+0x15c>)
 800642e:	2201      	movs	r2, #1
 8006430:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	4a35      	ldr	r2, [pc, #212]	; (800650c <cyphal_can_starter+0x15c>)
 8006436:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4a34      	ldr	r2, [pc, #208]	; (800650c <cyphal_can_starter+0x15c>)
 800643c:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800643e:	4b34      	ldr	r3, [pc, #208]	; (8006510 <cyphal_can_starter+0x160>)
 8006440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006444:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 8006446:	4b32      	ldr	r3, [pc, #200]	; (8006510 <cyphal_can_starter+0x160>)
 8006448:	2202      	movs	r2, #2
 800644a:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800644c:	4b30      	ldr	r3, [pc, #192]	; (8006510 <cyphal_can_starter+0x160>)
 800644e:	2202      	movs	r2, #2
 8006450:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006452:	4b2f      	ldr	r3, [pc, #188]	; (8006510 <cyphal_can_starter+0x160>)
 8006454:	2201      	movs	r2, #1
 8006456:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4a2d      	ldr	r2, [pc, #180]	; (8006510 <cyphal_can_starter+0x160>)
 800645c:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <cyphal_can_starter+0x160>)
 8006462:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 8006464:	2302      	movs	r3, #2
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	2302      	movs	r3, #2
 800646a:	2202      	movs	r2, #2
 800646c:	2102      	movs	r1, #2
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f003 fab8 	bl	80099e4 <HAL_FDCAN_ConfigGlobalFilter>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	bf14      	ite	ne
 800647a:	2301      	movne	r3, #1
 800647c:	2300      	moveq	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 8006484:	f7fb fca7 	bl	8001dd6 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 8006488:	491f      	ldr	r1, [pc, #124]	; (8006508 <cyphal_can_starter+0x158>)
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f003 fa50 	bl	8009930 <HAL_FDCAN_ConfigFilter>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf14      	ite	ne
 8006496:	2301      	movne	r3, #1
 8006498:	2300      	moveq	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <cyphal_can_starter+0xf4>
	  Error_Handler();
 80064a0:	f7fb fc99 	bl	8001dd6 <Error_Handler>
	}
//	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
//	  Error_Handler();
//	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 80064a4:	491a      	ldr	r1, [pc, #104]	; (8006510 <cyphal_can_starter+0x160>)
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f003 fa42 	bl	8009930 <HAL_FDCAN_ConfigFilter>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bf14      	ite	ne
 80064b2:	2301      	movne	r3, #1
 80064b4:	2300      	moveq	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <cyphal_can_starter+0x110>
	  Error_Handler();
 80064bc:	f7fb fc8b 	bl	8001dd6 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 80064c0:	2200      	movs	r2, #0
 80064c2:	2105      	movs	r1, #5
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f003 fabe 	bl	8009a46 <HAL_FDCAN_ConfigTxDelayCompensation>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bf14      	ite	ne
 80064d0:	2301      	movne	r3, #1
 80064d2:	2300      	moveq	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <cyphal_can_starter+0x12e>
	  Error_Handler();
 80064da:	f7fb fc7c 	bl	8001dd6 <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f003 fad3 	bl	8009a8a <HAL_FDCAN_EnableTxDelayCompensation>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bf14      	ite	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	2300      	moveq	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <cyphal_can_starter+0x148>
	  Error_Handler();
 80064f4:	f7fb fc6f 	bl	8001dd6 <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f003 fae7 	bl	8009acc <HAL_FDCAN_Start>
}
 80064fe:	bf00      	nop
 8006500:	3728      	adds	r7, #40	; 0x28
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20000704 	.word	0x20000704
 800650c:	200006d4 	.word	0x200006d4
 8006510:	200006ec 	.word	0x200006ec

08006514 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
      { delete this; }
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3304      	adds	r3, #4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	461a      	mov	r2, r3
 8006542:	2300      	movs	r3, #0
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	6053      	str	r3, [r2, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	609a      	str	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	461a      	mov	r2, r3
 800656a:	2300      	movs	r3, #0
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	6053      	str	r3, [r2, #4]
 8006570:	6093      	str	r3, [r2, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff ffde 	bl	8006536 <_ZNSt14_Function_baseC1Ev>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8006580:	6838      	ldr	r0, [r7, #0]
 8006582:	f000 fb03 	bl	8006b8c <_ZNKSt8functionIFyvEEcvbEv>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00d      	beq.n	80065a8 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	2202      	movs	r2, #2
 8006596:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	609a      	str	r2, [r3, #8]
	  }
      }
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	461a      	mov	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	6053      	str	r3, [r2, #4]
 80065c6:	6093      	str	r3, [r2, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff ffb3 	bl	8006536 <_ZNSt14_Function_baseC1Ev>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 80065d6:	6838      	ldr	r0, [r7, #0]
 80065d8:	f000 fae8 	bl	8006bac <_ZNKSt8functionIFvvEEcvbEv>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00d      	beq.n	80065fe <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	2202      	movs	r2, #2
 80065ec:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	609a      	str	r2, [r3, #8]
      }
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fadb 	bl	8006bcc <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
	return get();
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 faca 	bl	8006bcc <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8006638:	4603      	mov	r3, r0
      }
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fac7 	bl	8006be6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff ffe6 	bl	8006642 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fabf 	bl	8006c0e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8006690:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fac4 	bl	8006c28 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 80066a0:	4604      	mov	r4, r0
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 facd 	bl	8006c42 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 80066a8:	4603      	mov	r3, r0
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4619      	mov	r1, r3
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 fad2 	bl	8006c58 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
      }
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd90      	pop	{r4, r7, pc}

080066c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fb fb9c 	bl	8001e16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	461a      	mov	r2, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	6053      	str	r3, [r2, #4]
 80066fc:	6093      	str	r3, [r2, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff ff18 	bl	8006536 <_ZNSt14_Function_baseC1Ev>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 800670c:	6838      	ldr	r0, [r7, #0]
 800670e:	f000 fab4 	bl	8006c7a <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8006718:	687c      	ldr	r4, [r7, #4]
 800671a:	6838      	ldr	r0, [r7, #0]
 800671c:	f000 fabd 	bl	8006c9a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006720:	4603      	mov	r3, r0
 8006722:	4619      	mov	r1, r3
 8006724:	4620      	mov	r0, r4
 8006726:	f000 fac3 	bl	8006cb0 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a04      	ldr	r2, [pc, #16]	; (8006740 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 800672e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a04      	ldr	r2, [pc, #16]	; (8006744 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8006734:	609a      	str	r2, [r3, #8]
	    }
	}
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bd90      	pop	{r4, r7, pc}
 8006740:	08006cd5 	.word	0x08006cd5
 8006744:	08006cf9 	.word	0x08006cf9

08006748 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8006748:	b590      	push	{r4, r7, lr}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	461a      	mov	r2, r3
 8006756:	2300      	movs	r3, #0
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	6053      	str	r3, [r2, #4]
 800675c:	6093      	str	r3, [r2, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fee8 	bl	8006536 <_ZNSt14_Function_baseC1Ev>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800676c:	6838      	ldr	r0, [r7, #0]
 800676e:	f000 fae2 	bl	8006d36 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00e      	beq.n	8006796 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8006778:	687c      	ldr	r4, [r7, #4]
 800677a:	6838      	ldr	r0, [r7, #0]
 800677c:	f000 faeb 	bl	8006d56 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006780:	4603      	mov	r3, r0
 8006782:	4619      	mov	r1, r3
 8006784:	4620      	mov	r0, r4
 8006786:	f000 faf1 	bl	8006d6c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 800678e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a04      	ldr	r2, [pc, #16]	; (80067a4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 8006794:	609a      	str	r2, [r3, #8]
	}
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bd90      	pop	{r4, r7, pc}
 80067a0:	08006d91 	.word	0x08006d91
 80067a4:	08006daf 	.word	0x08006daf

080067a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fb fb16 	bl	8001df8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b086      	sub	sp, #24
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	4613      	mov	r3, r2
 80067e2:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 80067e4:	f107 0310 	add.w	r3, r7, #16
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff f975 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80067f0:	88fa      	ldrh	r2, [r7, #6]
 80067f2:	f107 0110 	add.w	r1, r7, #16
 80067f6:	2300      	movs	r3, #0
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 faf7 	bl	8006dec <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80067fe:	f107 0310 	add.w	r3, r7, #16
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff f979 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8006812:	b580      	push	{r7, lr}
 8006814:	b086      	sub	sp, #24
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	4613      	mov	r3, r2
 800681e:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8006820:	f107 0310 	add.w	r3, r7, #16
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff f957 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800682c:	88fa      	ldrh	r2, [r7, #6]
 800682e:	f107 0110 	add.w	r1, r7, #16
 8006832:	2300      	movs	r3, #0
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 fb0b 	bl	8006e50 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 800683a:	f107 0310 	add.w	r3, r7, #16
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff f95b 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	4a04      	ldr	r2, [pc, #16]	; (800686c <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	08016a60 	.word	0x08016a60

08006870 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	460b      	mov	r3, r1
 8006880:	80fb      	strh	r3, [r7, #6]
 8006882:	4613      	mov	r3, r2
 8006884:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff ffe1 	bl	8006850 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 800688e:	4a10      	ldr	r2, [pc, #64]	; (80068d0 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	797a      	ldrb	r2, [r7, #5]
 8006898:	711a      	strb	r2, [r3, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3308      	adds	r3, #8
 800689e:	f44f 720a 	mov.w	r2, #552	; 0x228
 80068a2:	2100      	movs	r1, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	f00c f810 	bl	80128ca <memset>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff f911 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80068b8:	797a      	ldrb	r2, [r7, #5]
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	4619      	mov	r1, r3
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 faf8 	bl	8006eb4 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>
    };
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	08016a10 	.word	0x08016a10

080068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	return _M_get();
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fb07 	bl	8006ef0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80068e2:	4603      	mov	r3, r0
      }
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_response(
 80068ec:	b5b0      	push	{r4, r5, r7, lr}
 80068ee:	b08c      	sub	sp, #48	; 0x30
 80068f0:	af04      	add	r7, sp, #16
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
    CanardRxTransfer *transfer,
    CanardPortID port,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80068fa:	f240 1339 	movw	r3, #313	; 0x139
 80068fe:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8006900:	f107 031c 	add.w	r3, r7, #28
 8006904:	461a      	mov	r2, r3
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	68b8      	ldr	r0, [r7, #8]
 800690a:	f7fe ff1b 	bl	8005744 <uavcan_node_GetInfo_Response_1_0_serialize_>
 800690e:	4603      	mov	r3, r0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	09db      	lsrs	r3, r3, #7
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	3310      	adds	r3, #16
 8006920:	4618      	mov	r0, r3
 8006922:	f000 faf1 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	809a      	strh	r2, [r3, #4]
 8006930:	2301      	movs	r3, #1
 8006932:	757b      	strb	r3, [r7, #21]
 8006934:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006938:	753b      	strb	r3, [r7, #20]
 800693a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800693c:	82fb      	strh	r3, [r7, #22]
            .priority = priority,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006942:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006948:	767b      	strb	r3, [r7, #25]
    };
    push(
        utilities.micros_64() + timeout_delta,
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 faf0 	bl	8006f34 <_ZNKSt8functionIFyvEEclEv>
    push(
 8006954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006958:	1884      	adds	r4, r0, r2
 800695a:	eb41 0503 	adc.w	r5, r1, r3
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	9202      	str	r2, [sp, #8]
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	f107 0314 	add.w	r3, r7, #20
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	4622      	mov	r2, r4
 800696e:	462b      	mov	r3, r5
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f008 f891 	bl	800ea98 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 8006976:	bf00      	nop
 8006978:	3720      	adds	r7, #32
 800697a:	46bd      	mov	sp, r7
 800697c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006980 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4611      	mov	r1, r2
 800698c:	461a      	mov	r2, r3
 800698e:	460b      	mov	r3, r1
 8006990:	80fb      	strh	r3, [r7, #6]
 8006992:	4613      	mov	r3, r2
 8006994:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff ff59 	bl	8006850 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 800699e:	4a10      	ldr	r2, [pc, #64]	; (80069e0 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	797a      	ldrb	r2, [r7, #5]
 80069a8:	711a      	strb	r2, [r3, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3308      	adds	r3, #8
 80069ae:	f44f 720a 	mov.w	r2, #552	; 0x228
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f00b ff88 	bl	80128ca <memset>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff f889 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80069c8:	797a      	ldrb	r2, [r7, #5]
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	4619      	mov	r1, r3
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fac9 	bl	8006f66 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	080169f0 	.word	0x080169f0

080069e4 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
inline void CyphalInterface::send_response(
 80069e4:	b5b0      	push	{r4, r5, r7, lr}
 80069e6:	b08c      	sub	sp, #48	; 0x30
 80069e8:	af04      	add	r7, sp, #16
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80069f2:	f240 130b 	movw	r3, #267	; 0x10b
 80069f6:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80069f8:	f107 031c 	add.w	r3, r7, #28
 80069fc:	461a      	mov	r2, r3
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	68b8      	ldr	r0, [r7, #8]
 8006a02:	f7fe fd0d 	bl	8005420 <uavcan_register_Access_Response_1_0_serialize_>
 8006a06:	4603      	mov	r3, r0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	09db      	lsrs	r3, r3, #7
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	3310      	adds	r3, #16
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fa75 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006a1e:	f107 0314 	add.w	r3, r7, #20
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	809a      	strh	r2, [r3, #4]
 8006a28:	2301      	movs	r3, #1
 8006a2a:	757b      	strb	r3, [r7, #21]
 8006a2c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006a30:	753b      	strb	r3, [r7, #20]
 8006a32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a34:	82fb      	strh	r3, [r7, #22]
            .remote_node_id = transfer->metadata.remote_node_id,
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006a3a:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006a40:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fa74 	bl	8006f34 <_ZNKSt8functionIFyvEEclEv>
    push(
 8006a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a50:	1884      	adds	r4, r0, r2
 8006a52:	eb41 0503 	adc.w	r5, r1, r3
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	9202      	str	r2, [sp, #8]
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	f107 0314 	add.w	r3, r7, #20
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	4622      	mov	r2, r4
 8006a66:	462b      	mov	r3, r5
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f008 f815 	bl	800ea98 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
}
 8006a6e:	bf00      	nop
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bdb0      	pop	{r4, r5, r7, pc}

08006a76 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b08a      	sub	sp, #40	; 0x28
 8006a7a:	af06      	add	r7, sp, #24
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 8006a84:	8879      	ldrh	r1, [r7, #2]
 8006a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a8e:	23ff      	movs	r3, #255	; 0xff
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	2300      	movs	r3, #0
 8006a94:	9302      	str	r3, [sp, #8]
 8006a96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fa7c 	bl	8006fa4 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 8006ab4:	b590      	push	{r4, r7, lr}
 8006ab6:	b08b      	sub	sp, #44	; 0x2c
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8006ac4:	f107 030c 	add.w	r3, r7, #12
 8006ac8:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 8006aca:	7afa      	ldrb	r2, [r7, #11]
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	69f8      	ldr	r0, [r7, #28]
 8006ad6:	f000 faaf 	bl	8007038 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8006ada:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	200c      	movs	r0, #12
 8006ae8:	f7fb f97a 	bl	8001de0 <_ZnwjPv>
 8006aec:	4604      	mov	r4, r0
 8006aee:	7af9      	ldrb	r1, [r7, #11]
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af4:	4620      	mov	r0, r4
 8006af6:	f7fb faa5 	bl	8002044 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 8006afa:	613c      	str	r4, [r7, #16]

        return interface;
 8006afc:	693b      	ldr	r3, [r7, #16]
    }
 8006afe:	4618      	mov	r0, r3
 8006b00:	3724      	adds	r7, #36	; 0x24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd90      	pop	{r4, r7, pc}

08006b06 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fadd 	bl	80070d4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8006b24:	b590      	push	{r4, r7, lr}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8006b2e:	687c      	ldr	r4, [r7, #4]
 8006b30:	6838      	ldr	r0, [r7, #0]
 8006b32:	f000 fae7 	bl	8007104 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 8006b36:	4603      	mov	r3, r0
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 faed 	bl	800711a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8006b40:	687b      	ldr	r3, [r7, #4]
      }
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd90      	pop	{r4, r7, pc}
	...

08006b4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
      { }
 8006b54:	4a04      	ldr	r2, [pc, #16]	; (8006b68 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	08016a84 	.word	0x08016a84

08006b6c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
      { }
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff ffe9 	bl	8006b4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006b7a:	210c      	movs	r1, #12
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f00a fdb8 	bl	80116f2 <_ZdlPvj>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fb f996 	bl	8001ec8 <_ZNKSt14_Function_base8_M_emptyEv>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f083 0301 	eor.w	r3, r3, #1
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fb f986 	bl	8001ec8 <_ZNKSt14_Function_base8_M_emptyEv>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f083 0301 	eor.w	r3, r3, #1
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fabe 	bl	8007158 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8006be6:	b590      	push	{r4, r7, lr}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fabe 	bl	8007174 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8006bf8:	683c      	ldr	r4, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f807 	bl	8006c0e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8006c00:	4603      	mov	r3, r0
 8006c02:	601c      	str	r4, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd90      	pop	{r4, r7, pc}

08006c0e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fab8 	bl	800718e <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fab8 	bl	80071a8 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	3218      	adds	r2, #24
 8006c6c:	6812      	ldr	r2, [r2, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	4790      	blx	r2
      }
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8006cba:	6838      	ldr	r0, [r7, #0]
 8006cbc:	f7ff ffed 	bl	8006c9a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa7b 	bl	80071c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd90      	pop	{r4, r7, pc}

08006cd4 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fa88 	bl	80071f2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fa94 	bl	8007212 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
      }
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4613      	mov	r3, r2
 8006d04:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d109      	bne.n	8006d20 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006d0c:	68b8      	ldr	r0, [r7, #8]
 8006d0e:	f000 fa70 	bl	80071f2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8006d12:	4604      	mov	r4, r0
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fa8f 	bl	8007238 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	601c      	str	r4, [r3, #0]
	    break;
 8006d1e:	e005      	b.n	8006d2c <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	461a      	mov	r2, r3
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fa92 	bl	8007250 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8006d2c:	2300      	movs	r3, #0
      }
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd90      	pop	{r4, r7, pc}

08006d36 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	bf14      	ite	ne
 8006d44:	2301      	movne	r3, #1
 8006d46:	2300      	moveq	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8006d6c:	b590      	push	{r4, r7, lr}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8006d76:	6838      	ldr	r0, [r7, #0]
 8006d78:	f7ff ffed 	bl	8006d56 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	4622      	mov	r2, r4
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa9e 	bl	80072c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd90      	pop	{r4, r7, pc}

08006d90 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 faab 	bl	80072f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fab7 	bl	8007314 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8006da6:	bf00      	nop
      }
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8006dae:	b590      	push	{r4, r7, lr}
 8006db0:	b085      	sub	sp, #20
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	4613      	mov	r3, r2
 8006dba:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d109      	bne.n	8006dd6 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006dc2:	68b8      	ldr	r0, [r7, #8]
 8006dc4:	f000 fa96 	bl	80072f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8006dc8:	4604      	mov	r4, r0
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fab2 	bl	8007334 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	601c      	str	r4, [r3, #0]
	    break;
 8006dd4:	e005      	b.n	8006de2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 fab5 	bl	800734c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8006de2:	2300      	movs	r3, #0
      }
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd90      	pop	{r4, r7, pc}

08006dec <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4611      	mov	r1, r2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	80fb      	strh	r3, [r7, #6]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff fd23 	bl	8006850 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8006e0a:	4a10      	ldr	r2, [pc, #64]	; (8006e4c <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	797a      	ldrb	r2, [r7, #5]
 8006e14:	711a      	strb	r2, [r3, #4]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3308      	adds	r3, #8
 8006e1a:	f44f 720a 	mov.w	r2, #552	; 0x228
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f00b fd52 	bl	80128ca <memset>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fe53 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8006e34:	797a      	ldrb	r2, [r7, #5]
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fac0 	bl	80073c0 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08016a50 	.word	0x08016a50

08006e50 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	460b      	mov	r3, r1
 8006e60:	80fb      	strh	r3, [r7, #6]
 8006e62:	4613      	mov	r3, r2
 8006e64:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff fcf1 	bl	8006850 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8006e6e:	4a10      	ldr	r2, [pc, #64]	; (8006eb0 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	797a      	ldrb	r2, [r7, #5]
 8006e78:	711a      	strb	r2, [r3, #4]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	f44f 720a 	mov.w	r2, #552	; 0x228
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f00b fd20 	bl	80128ca <memset>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fe21 	bl	8005ada <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8006e98:	797a      	ldrb	r2, [r7, #5]
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 faac 	bl	80073fc <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	08016a30 	.word	0x08016a30

08006eb4 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	807b      	strh	r3, [r7, #2]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff fcff 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	787a      	ldrb	r2, [r7, #1]
 8006edc:	8879      	ldrh	r1, [r7, #2]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f007 fe12 	bl	800eb0c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fa9d 	bl	8007438 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8006efe:	4603      	mov	r3, r0
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fa ffd8 	bl	8001ec8 <_ZNKSt14_Function_base8_M_emptyEv>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8006f1e:	f00a fbfb 	bl	8011718 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	bf00      	nop
      }
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fa ffc2 	bl	8001ec8 <_ZNKSt14_Function_base8_M_emptyEv>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8006f4a:	f00a fbe5 	bl	8011718 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
      }
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4619      	mov	r1, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af02      	add	r7, sp, #8
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	807b      	strh	r3, [r7, #2]
 8006f72:	4613      	mov	r3, r2
 8006f74:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff fca6 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	787a      	ldrb	r2, [r7, #1]
 8006f8e:	8879      	ldrh	r1, [r7, #2]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	4613      	mov	r3, r2
 8006f94:	f240 2203 	movw	r2, #515	; 0x203
 8006f98:	f007 fdb8 	bl	800eb0c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 8006fa4:	b5b0      	push	{r4, r5, r7, lr}
 8006fa6:	b08c      	sub	sp, #48	; 0x30
 8006fa8:	af04      	add	r7, sp, #16
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8006fb2:	2307      	movs	r3, #7
 8006fb4:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8006fb6:	f107 031c 	add.w	r3, r7, #28
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	68b8      	ldr	r0, [r7, #8]
 8006fc0:	f7fb fc4a 	bl	8002858 <uavcan_node_Heartbeat_1_0_serialize_>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	09db      	lsrs	r3, r3, #7
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	3310      	adds	r3, #16
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff ff96 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006fdc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006fe0:	753b      	strb	r3, [r7, #20]
 8006fe2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006fe6:	757b      	strb	r3, [r7, #21]
 8006fe8:	887b      	ldrh	r3, [r7, #2]
 8006fea:	82fb      	strh	r3, [r7, #22]
 8006fec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006ff0:	763b      	strb	r3, [r7, #24]
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff ff99 	bl	8006f34 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007006:	1884      	adds	r4, r0, r2
 8007008:	eb41 0503 	adc.w	r5, r1, r3
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	9202      	str	r2, [sp, #8]
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	f107 0314 	add.w	r3, r7, #20
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	4622      	mov	r2, r4
 800701c:	462b      	mov	r3, r5
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f007 fd3a 	bl	800ea98 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	3301      	adds	r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702e:	701a      	strb	r2, [r3, #0]
}
 8007030:	bf00      	nop
 8007032:	3720      	adds	r7, #32
 8007034:	46bd      	mov	sp, r7
 8007036:	bdb0      	pop	{r4, r5, r7, pc}

08007038 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 8007038:	b590      	push	{r4, r7, lr}
 800703a:	b089      	sub	sp, #36	; 0x24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4619      	mov	r1, r3
 8007052:	2008      	movs	r0, #8
 8007054:	f7fa fec4 	bl	8001de0 <_ZnwjPv>
 8007058:	4604      	mov	r4, r0
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	4613      	mov	r3, r2
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	4413      	add	r3, r2
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f7f9 fa75 	bl	8000554 <__aeabi_ui2d>
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	4b18      	ldr	r3, [pc, #96]	; (80070d0 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 8007070:	f7f9 faea 	bl	8000648 <__aeabi_dmul>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4610      	mov	r0, r2
 800707a:	4619      	mov	r1, r3
 800707c:	f7f9 fdbc 	bl	8000bf8 <__aeabi_d2uiz>
 8007080:	4603      	mov	r3, r0
 8007082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007084:	4619      	mov	r1, r3
 8007086:	4620      	mov	r0, r4
 8007088:	f7fb f812 	bl	80020b0 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 800708c:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	3308      	adds	r3, #8
 8007092:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	4619      	mov	r1, r3
 8007098:	2044      	movs	r0, #68	; 0x44
 800709a:	f7fa fea1 	bl	8001de0 <_ZnwjPv>
 800709e:	4604      	mov	r4, r0
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	4620      	mov	r0, r4
 80070a8:	f7fa ffe6 	bl	8002078 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 80070ac:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	79fa      	ldrb	r2, [r7, #7]
 80070b2:	69b9      	ldr	r1, [r7, #24]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 f9cb 	bl	8007450 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	601a      	str	r2, [r3, #0]
        return ptr;
 80070c4:	693b      	ldr	r3, [r7, #16]
    }
 80070c6:	4618      	mov	r0, r3
 80070c8:	3724      	adds	r7, #36	; 0x24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd90      	pop	{r4, r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40040000 	.word	0x40040000

080070d4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 80070d4:	b590      	push	{r4, r7, lr}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3304      	adds	r3, #4
 80070e8:	4622      	mov	r2, r4
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 f9f3 	bl	80074d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f9fe 	bl	80074f6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bd90      	pop	{r4, r7, pc}

08007104 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8007124:	6838      	ldr	r0, [r7, #0]
 8007126:	f000 f9f1 	bl	800750c <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800712a:	4602      	mov	r2, r0
 800712c:	f107 0308 	add.w	r3, r7, #8
 8007130:	4611      	mov	r1, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f000 f9f5 	bl	8007522 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fa0d 	bl	800755e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8007144:	f107 0308 	add.w	r3, r7, #8
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe fc7d 	bl	8005a48 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800714e:	687b      	ldr	r3, [r7, #4]
      }
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fa12 	bl	800758c <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8007168:	4603      	mov	r3, r0
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fa11 	bl	80075a6 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fa14 	bl	80075c6 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800719e:	4603      	mov	r3, r0
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fa13 	bl	80075de <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80071b8:	4603      	mov	r3, r0
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80071c2:	b590      	push	{r4, r7, lr}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80071ce:	68b8      	ldr	r0, [r7, #8]
 80071d0:	f7ff fd63 	bl	8006c9a <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80071d4:	4604      	mov	r4, r0
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7fa fe4d 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 80071dc:	4603      	mov	r3, r0
 80071de:	4619      	mov	r1, r3
 80071e0:	2004      	movs	r0, #4
 80071e2:	f7fa fdfd 	bl	8001de0 <_ZnwjPv>
 80071e6:	4603      	mov	r3, r0
 80071e8:	601c      	str	r4, [r3, #0]
	  }
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd90      	pop	{r4, r7, pc}

080071f2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f9fb 	bl	80075f6 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8007200:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fa03 	bl	800760e <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8007208:	4603      	mov	r3, r0
	}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007212:	b590      	push	{r4, r7, lr}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa02 	bl	8007624 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007220:	4603      	mov	r3, r0
 8007222:	4619      	mov	r1, r3
 8007224:	4620      	mov	r0, r4
 8007226:	f000 fa08 	bl	800763a <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	bd90      	pop	{r4, r7, pc}

08007238 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access()
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fa fe18 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 8007246:	4603      	mov	r3, r0
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007250:	b590      	push	{r4, r7, lr}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	2b03      	cmp	r3, #3
 8007262:	d82a      	bhi.n	80072ba <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8007264:	a201      	add	r2, pc, #4	; (adr r2, 800726c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8007266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726a:	bf00      	nop
 800726c:	0800727d 	.word	0x0800727d
 8007270:	0800728b 	.word	0x0800728b
 8007274:	0800729f 	.word	0x0800729f
 8007278:	080072b1 	.word	0x080072b1
	      __dest._M_access<const type_info*>() = nullptr;
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f9ee 	bl	800765e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8007282:	4603      	mov	r3, r0
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
	      break;
 8007288:	e017      	b.n	80072ba <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800728a:	68b8      	ldr	r0, [r7, #8]
 800728c:	f7ff ffb1 	bl	80071f2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007290:	4604      	mov	r4, r0
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff ffd0 	bl	8007238 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8007298:	4603      	mov	r3, r0
 800729a:	601c      	str	r4, [r3, #0]
	      break;
 800729c:	e00d      	b.n	80072ba <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800729e:	68b8      	ldr	r0, [r7, #8]
 80072a0:	f7ff ffa7 	bl	80071f2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80072a4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80072a6:	4619      	mov	r1, r3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f9e4 	bl	8007676 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80072ae:	e004      	b.n	80072ba <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80072b0:	4621      	mov	r1, r4
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f9f1 	bl	800769a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80072b8:	bf00      	nop
	  return false;
 80072ba:	2300      	movs	r3, #0
	}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd90      	pop	{r4, r7, pc}

080072c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80072c4:	b590      	push	{r4, r7, lr}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80072d0:	68b8      	ldr	r0, [r7, #8]
 80072d2:	f7ff fd40 	bl	8006d56 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80072d6:	4604      	mov	r4, r0
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7fa fdcc 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 80072de:	4603      	mov	r3, r0
 80072e0:	4619      	mov	r1, r3
 80072e2:	2004      	movs	r0, #4
 80072e4:	f7fa fd7c 	bl	8001de0 <_ZnwjPv>
 80072e8:	4603      	mov	r3, r0
 80072ea:	601c      	str	r4, [r3, #0]
	  }
 80072ec:	bf00      	nop
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd90      	pop	{r4, r7, pc}

080072f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9d8 	bl	80076b2 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8007302:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 f9e0 	bl	80076ca <_ZSt11__addressofIKPFvvEEPT_RS3_>
 800730a:	4603      	mov	r3, r0
	}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007314:	b590      	push	{r4, r7, lr}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f9df 	bl	80076e0 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007322:	4603      	mov	r3, r0
 8007324:	4619      	mov	r1, r3
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f9e5 	bl	80076f6 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	bd90      	pop	{r4, r7, pc}

08007334 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fa fd9a 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 8007342:	4603      	mov	r3, r0
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800734c:	b590      	push	{r4, r7, lr}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	2b03      	cmp	r3, #3
 800735e:	d82a      	bhi.n	80073b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8007360:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8007362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007366:	bf00      	nop
 8007368:	08007379 	.word	0x08007379
 800736c:	08007387 	.word	0x08007387
 8007370:	0800739b 	.word	0x0800739b
 8007374:	080073ad 	.word	0x080073ad
	      __dest._M_access<const type_info*>() = nullptr;
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f970 	bl	800765e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800737e:	4603      	mov	r3, r0
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
	      break;
 8007384:	e017      	b.n	80073b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007386:	68b8      	ldr	r0, [r7, #8]
 8007388:	f7ff ffb4 	bl	80072f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800738c:	4604      	mov	r4, r0
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff ffd0 	bl	8007334 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8007394:	4603      	mov	r3, r0
 8007396:	601c      	str	r4, [r3, #0]
	      break;
 8007398:	e00d      	b.n	80073b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800739a:	68b8      	ldr	r0, [r7, #8]
 800739c:	f7ff ffaa 	bl	80072f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80073a0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80073a2:	4619      	mov	r1, r3
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f9b5 	bl	8007714 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80073aa:	e004      	b.n	80073b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80073ac:	4621      	mov	r1, r4
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 f9c2 	bl	8007738 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80073b4:	bf00      	nop
	  return false;
 80073b6:	2300      	movs	r3, #0
	}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd90      	pop	{r4, r7, pc}

080073c0 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	807b      	strh	r3, [r7, #2]
 80073cc:	4613      	mov	r3, r2
 80073ce:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fa79 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3308      	adds	r3, #8
 80073e6:	787a      	ldrb	r2, [r7, #1]
 80073e8:	8879      	ldrh	r1, [r7, #2]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	220c      	movs	r2, #12
 80073f0:	f007 fb8c 	bl	800eb0c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af02      	add	r7, sp, #8
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	807b      	strh	r3, [r7, #2]
 8007408:	4613      	mov	r3, r2
 800740a:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	629a      	str	r2, [r3, #40]	; 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fa5b 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3308      	adds	r3, #8
 8007422:	787a      	ldrb	r2, [r7, #1]
 8007424:	8879      	ldrh	r1, [r7, #2]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	220c      	movs	r2, #12
 800742c:	f007 fb6e 	bl	800eb0c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8007450:	b5b0      	push	{r4, r5, r7, lr}
 8007452:	b08e      	sub	sp, #56	; 0x38
 8007454:	af00      	add	r7, sp, #0
 8007456:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007458:	62b9      	str	r1, [r7, #40]	; 0x28
 800745a:	4613      	mov	r3, r2
 800745c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8007460:	481a      	ldr	r0, [pc, #104]	; (80074cc <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8007462:	f7ff f8d1 	bl	8006608 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007470:	3310      	adds	r3, #16
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fd48 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8007478:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800747c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800747e:	4618      	mov	r0, r3
 8007480:	f000 f976 	bl	8007770 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8007484:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007488:	4619      	mov	r1, r3
 800748a:	4810      	ldr	r0, [pc, #64]	; (80074cc <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 800748c:	f000 f9a1 	bl	80077d2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8007490:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007494:	4618      	mov	r0, r3
 8007496:	f000 f97a 	bl	800778e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 800749a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800749c:	463b      	mov	r3, r7
 800749e:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 80074a0:	490c      	ldr	r1, [pc, #48]	; (80074d4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 80074a2:	4618      	mov	r0, r3
 80074a4:	f009 fe22 	bl	80110ec <canardInit>
 80074a8:	3420      	adds	r4, #32
 80074aa:	463d      	mov	r5, r7
 80074ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80074be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80074c2:	bf00      	nop
 80074c4:	3738      	adds	r7, #56	; 0x38
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bdb0      	pop	{r4, r5, r7, pc}
 80074ca:	bf00      	nop
 80074cc:	2000090c 	.word	0x2000090c
 80074d0:	08001fbd 	.word	0x08001fbd
 80074d4:	08001f79 	.word	0x08001f79

080074d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f9a4 	bl	8007834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
	{ }
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe fa93 	bl	8005a64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	1d1a      	adds	r2, r3, #4
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	3304      	adds	r3, #4
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f000 f98b 	bl	8007864 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
      }
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f000 f998 	bl	80078a4 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	1d1a      	adds	r2, r3, #4
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f000 f970 	bl	8007864 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f9a3 	bl	80078e2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800759c:	4603      	mov	r3, r0
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f9a3 	bl	80078fa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f9ab 	bl	8007912 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f9ad 	bl	800792e <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 80075d4:	4603      	mov	r3, r0
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f9ae 	bl	8007948 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80075ec:	4603      	mov	r3, r0
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fa fc44 	bl	8001e8c <_ZNKSt9_Any_data9_M_accessEv>
 8007604:	4603      	mov	r3, r0
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	7138      	strb	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007644:	6838      	ldr	r0, [r7, #0]
 8007646:	f7ff ffed 	bl	8007624 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800764a:	4603      	mov	r3, r0
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4798      	blx	r3
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4610      	mov	r0, r2
 8007656:	4619      	mov	r1, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fa fc05 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 800766c:	4603      	mov	r3, r0
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007676:	b590      	push	{r4, r7, lr}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007680:	6838      	ldr	r0, [r7, #0]
 8007682:	f000 f96d 	bl	8007960 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007686:	4603      	mov	r3, r0
 8007688:	4622      	mov	r2, r4
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f972 	bl	8007976 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	bd90      	pop	{r4, r7, pc}

0800769a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f97f 	bl	80079a8 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fa fbe6 	bl	8001e8c <_ZNKSt9_Any_data9_M_accessEv>
 80076c0:	4603      	mov	r3, r0
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	7138      	strb	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007700:	6838      	ldr	r0, [r7, #0]
 8007702:	f7ff ffed 	bl	80076e0 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007706:	4603      	mov	r3, r0
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4798      	blx	r3
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007714:	b590      	push	{r4, r7, lr}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800771e:	6838      	ldr	r0, [r7, #0]
 8007720:	f000 f94e 	bl	80079c0 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007724:	4603      	mov	r3, r0
 8007726:	4622      	mov	r2, r4
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f953 	bl	80079d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	bd90      	pop	{r4, r7, pc}

08007738 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f960 	bl	8007a08 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f000 f95d 	bl	8007a20 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff ffe6 	bl	8007750 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800778e:	b590      	push	{r4, r7, lr}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 f955 	bl	8007a48 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800779e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00c      	beq.n	80077c2 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f95a 	bl	8007a62 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80077ae:	4604      	mov	r4, r0
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 f963 	bl	8007a7c <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80077b6:	4603      	mov	r3, r0
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4619      	mov	r1, r3
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 f968 	bl	8007a92 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
      }
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd90      	pop	{r4, r7, pc}

080077d2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 80077dc:	6838      	ldr	r0, [r7, #0]
 80077de:	f000 f97d 	bl	8007adc <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 80077e2:	4603      	mov	r3, r0
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f964 	bl	8007ab4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 80077ec:	6838      	ldr	r0, [r7, #0]
 80077ee:	f000 f938 	bl	8007a62 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80077f2:	4603      	mov	r3, r0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 f98b 	bl	8007b10 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 80077fa:	4602      	mov	r2, r0
 80077fc:	f107 030c 	add.w	r3, r7, #12
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f98f 	bl	8007b26 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f974 	bl	8007af6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 800780e:	687b      	ldr	r3, [r7, #4]
	}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3308      	adds	r3, #8
 8007824:	4618      	mov	r0, r3
 8007826:	f7fe ff2b 	bl	8006680 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8007834:	b590      	push	{r4, r7, lr}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8007844:	2010      	movs	r0, #16
 8007846:	f009 ff56 	bl	80116f6 <_Znwj>
 800784a:	4603      	mov	r3, r0
 800784c:	461c      	mov	r4, r3
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	4620      	mov	r0, r4
 8007852:	f000 f975 	bl	8007b40 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	601c      	str	r4, [r3, #0]
	}
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	bd90      	pop	{r4, r7, pc}

08007864 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	601a      	str	r2, [r3, #0]
      }
 8007882:	bf00      	nop
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff ffed 	bl	800788e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80078b4:	4603      	mov	r3, r0
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80078ba:	6838      	ldr	r0, [r7, #0]
 80078bc:	f7ff ffe7 	bl	800788e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80078c0:	4603      	mov	r3, r0
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80078c8:	f107 030c 	add.w	r3, r7, #12
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff ffde 	bl	800788e <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80078d2:	4603      	mov	r3, r0
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	601a      	str	r2, [r3, #0]
    }
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f93e 	bl	8007b6c <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 80078f0:	4603      	mov	r3, r0
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f93f 	bl	8007b86 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 f92f 	bl	8007b9c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 800793e:	4603      	mov	r3, r0
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f92e 	bl	8007bb2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8007956:	4603      	mov	r3, r0
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8007976:	b590      	push	{r4, r7, lr}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f7ff ffec 	bl	8007960 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007988:	4603      	mov	r3, r0
 800798a:	681c      	ldr	r4, [r3, #0]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7fa fa72 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 8007992:	4603      	mov	r3, r0
 8007994:	4619      	mov	r1, r3
 8007996:	2004      	movs	r0, #4
 8007998:	f7fa fa22 	bl	8001de0 <_ZnwjPv>
 800799c:	4603      	mov	r3, r0
 800799e:	601c      	str	r4, [r3, #0]
	  }
 80079a0:	bf00      	nop
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd90      	pop	{r4, r7, pc}

080079a8 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access()
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7fa fa60 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 80079b6:	4603      	mov	r3, r0
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80079d6:	b590      	push	{r4, r7, lr}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80079e2:	68b8      	ldr	r0, [r7, #8]
 80079e4:	f7ff ffec 	bl	80079c0 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80079e8:	4603      	mov	r3, r0
 80079ea:	681c      	ldr	r4, [r3, #0]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f7fa fa42 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 80079f2:	4603      	mov	r3, r0
 80079f4:	4619      	mov	r1, r3
 80079f6:	2004      	movs	r0, #4
 80079f8:	f7fa f9f2 	bl	8001de0 <_ZnwjPv>
 80079fc:	4603      	mov	r3, r0
 80079fe:	601c      	str	r4, [r3, #0]
	  }
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd90      	pop	{r4, r7, pc}

08007a08 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fa fa30 	bl	8001e76 <_ZNSt9_Any_data9_M_accessEv>
 8007a16:	4603      	mov	r3, r0
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8007a20:	b590      	push	{r4, r7, lr}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f8cc 	bl	8007bca <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8007a32:	683c      	ldr	r4, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f807 	bl	8007a48 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	601c      	str	r4, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4618      	mov	r0, r3
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd90      	pop	{r4, r7, pc}

08007a48 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f8c6 	bl	8007be4 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 f8c6 	bl	8007bfe <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8007a72:	4603      	mov	r3, r0
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4618      	mov	r0, r3
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	320c      	adds	r2, #12
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	4790      	blx	r2
      }
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8007ab4:	b590      	push	{r4, r7, lr}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8007abe:	687c      	ldr	r4, [r7, #4]
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f8a8 	bl	8007c18 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4619      	mov	r1, r3
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 f8ad 	bl	8007c2e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd90      	pop	{r4, r7, pc}

08007adc <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f8c1 	bl	8007c6e <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8007aec:	4603      	mov	r3, r0
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 f8c9 	bl	8007c98 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8007b06:	4603      	mov	r3, r0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 f8b1 	bl	8007cb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8007b52:	4a05      	ldr	r2, [pc, #20]	; (8007b68 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	60da      	str	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	080169c4 	.word	0x080169c4

08007b6c <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f8b2 	bl	8007ce0 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f89b 	bl	8007cf6 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 f899 	bl	8007d0c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f89c 	bl	8007d2c <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 f89b 	bl	8007d44 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8007c2e:	b590      	push	{r4, r7, lr}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f88f 	bl	8007d5c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8007c44:	683c      	ldr	r4, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f888 	bl	8007d5c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f81e 	bl	8007c98 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 f888 	bl	8007d76 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd90      	pop	{r4, r7, pc}

08007c6e <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff fee6 	bl	8007a48 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff fee0 	bl	8007a48 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
	return __p;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
      }
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f878 	bl	8007d98 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8007cbc:	4a07      	ldr	r2, [pc, #28]	; (8007cdc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	605a      	str	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	609a      	str	r2, [r3, #8]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	08016a84 	.word	0x08016a84

08007ce0 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4618      	mov	r0, r3
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f84b 	bl	8007db0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 f853 	bl	8007dc8 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f855 	bl	8007de4 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f856 	bl	8007dfe <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007d52:	4603      	mov	r3, r0
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 f855 	bl	8007e16 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d004      	beq.n	8007d90 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	320c      	adds	r2, #12
 8007d8a:	6812      	ldr	r2, [r2, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	4790      	blx	r2
      }
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f845 	bl	8007e30 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007da6:	4603      	mov	r3, r0
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f845 	bl	8007e48 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 f835 	bl	8007e5e <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8007df4:	4603      	mov	r3, r0
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f834 	bl	8007e74 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 f833 	bl	8007e8c <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007e26:	4603      	mov	r3, r0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f833 	bl	8007ea4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f81d 	bl	8007ebc <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8007e82:	4603      	mov	r3, r0
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f81c 	bl	8007ed2 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f81d 	bl	8007eec <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 f810 	bl	8007f02 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	4a05      	ldr	r2, [pc, #20]	; (8007f38 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fe0f 	bl	8006b4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	080169c4 	.word	0x080169c4

08007f3c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff ffe7 	bl	8007f18 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007f4a:	2110      	movs	r1, #16
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f009 fbd0 	bl	80116f2 <_ZdlPvj>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3310      	adds	r3, #16
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f9 ffcb 	bl	8001f04 <_ZNSt8functionIFvvEED1Ev>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7f9 ffba 	bl	8001eea <_ZNSt8functionIFyvEED1Ev>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <_Z41__static_initialization_and_destruction_0ii>:

}
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	; 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d122      	bne.n	8007fd6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d11d      	bne.n	8007fd6 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8007f9a:	f107 0308 	add.w	r3, r7, #8
 8007f9e:	4917      	ldr	r1, [pc, #92]	; (8007ffc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fba1 	bl	80066e8 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8007fa6:	f107 0318 	add.w	r3, r7, #24
 8007faa:	4915      	ldr	r1, [pc, #84]	; (8008000 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fbcb 	bl	8006748 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8007fb2:	f107 0218 	add.w	r2, r7, #24
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4811      	ldr	r0, [pc, #68]	; (8008004 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007fbe:	f7f9 ffae 	bl	8001f1e <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8007fc2:	f107 0318 	add.w	r3, r7, #24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7f9 ff9c 	bl	8001f04 <_ZNSt8functionIFvvEED1Ev>
 8007fcc:	f107 0308 	add.w	r3, r7, #8
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7f9 ff8a 	bl	8001eea <_ZNSt8functionIFyvEED1Ev>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d105      	bne.n	8007ff2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8007fe6:	4807      	ldr	r0, [pc, #28]	; (8008004 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007fe8:	f7ff ffb8 	bl	8007f5c <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8007fec:	4806      	ldr	r0, [pc, #24]	; (8008008 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007fee:	f7fd fd84 	bl	8005afa <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8007ff2:	bf00      	nop
 8007ff4:	3728      	adds	r7, #40	; 0x28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	08005a8d 	.word	0x08005a8d
 8008000:	08005a81 	.word	0x08005a81
 8008004:	20000450 	.word	0x20000450
 8008008:	20000448 	.word	0x20000448

0800800c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800800c:	b590      	push	{r4, r7, lr}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68dc      	ldr	r4, [r3, #12]
 8008018:	2c00      	cmp	r4, #0
 800801a:	d006      	beq.n	800802a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 800801c:	4620      	mov	r0, r4
 800801e:	f7ff fbfb 	bl	8007818 <_ZN15CyphalInterfaceD1Ev>
 8008022:	210c      	movs	r1, #12
 8008024:	4620      	mov	r0, r4
 8008026:	f009 fb64 	bl	80116f2 <_ZdlPvj>
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	bd90      	pop	{r4, r7, pc}

08008032 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
      { delete this; }
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff ff7b 	bl	8007f3c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8008046:	bf00      	nop
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8008058:	2300      	movs	r3, #0
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 8008066:	b580      	push	{r7, lr}
 8008068:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 800806c:	af00      	add	r7, sp, #0
 800806e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008072:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008076:	6018      	str	r0, [r3, #0]
 8008078:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800807c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008080:	6019      	str	r1, [r3, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 8008082:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008086:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe fc1f 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008096:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800809a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800809e:	f107 0108 	add.w	r1, r7, #8
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	f000 f874 	bl	8008190 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 80080a8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80080ac:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3304      	adds	r3, #4
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80080bc:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 80080c0:	f107 0108 	add.w	r1, r7, #8
 80080c4:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80080c8:	f5a0 7047 	sub.w	r0, r0, #796	; 0x31c
 80080cc:	6812      	ldr	r2, [r2, #0]
 80080ce:	6800      	ldr	r0, [r0, #0]
 80080d0:	4798      	blx	r3
    }
 80080d2:	bf00      	nop
 80080d4:	f507 7748 	add.w	r7, r7, #800	; 0x320
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <_ZN20AbstractSubscriptionI15NodeInfoRequestE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe fbf1 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80080f2:	f107 030c 	add.w	r3, r7, #12
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	4619      	mov	r1, r3
 80080fa:	f000 f86a 	bl	80081d2 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3304      	adds	r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f107 010c 	add.w	r1, r7, #12
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
    }
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe fbd3 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800812e:	f107 030c 	add.w	r3, r7, #12
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	4619      	mov	r1, r3
 8008136:	f000 f86c 	bl	8008212 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3304      	adds	r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f107 010c 	add.w	r1, r7, #12
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	4798      	blx	r3
    }
 800814c:	bf00      	nop
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe fbb5 	bl	80068d4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800816a:	f107 0308 	add.w	r3, r7, #8
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	4619      	mov	r1, r3
 8008172:	f000 f86e 	bl	8008252 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3304      	adds	r3, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f107 0108 	add.w	r1, r7, #8
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	4798      	blx	r3
    }
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 800819c:	f240 2303 	movw	r3, #515	; 0x203
 80081a0:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	f107 0214 	add.w	r2, r7, #20
 80081aa:	4619      	mov	r1, r3
 80081ac:	68b8      	ldr	r0, [r7, #8]
 80081ae:	f7fd f8b5 	bl	800531c <uavcan_register_Access_Request_1_0_deserialize_>
 80081b2:	4603      	mov	r3, r0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	09db      	lsrs	r3, r3, #7
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d005      	beq.n	80081ca <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	3310      	adds	r3, #16
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fe9f 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
    }
}
 80081ca:	bf00      	nop
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b086      	sub	sp, #24
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 80081de:	2300      	movs	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	f107 0214 	add.w	r2, r7, #20
 80081ea:	4619      	mov	r1, r3
 80081ec:	68b8      	ldr	r0, [r7, #8]
 80081ee:	f7fd fa81 	bl	80056f4 <uavcan_node_GetInfo_Request_1_0_deserialize_>
 80081f2:	4603      	mov	r3, r0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	09db      	lsrs	r3, r3, #7
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	3310      	adds	r3, #16
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fe7f 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
}
 800820a:	bf00      	nop
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8008212:	b580      	push	{r7, lr}
 8008214:	b086      	sub	sp, #24
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 800821e:	230c      	movs	r3, #12
 8008220:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	f107 0214 	add.w	r2, r7, #20
 800822a:	4619      	mov	r1, r3
 800822c:	68b8      	ldr	r0, [r7, #8]
 800822e:	f7fa fd6b 	bl	8002d08 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 8008232:	4603      	mov	r3, r0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	09db      	lsrs	r3, r3, #7
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	3310      	adds	r3, #16
 8008244:	4618      	mov	r0, r3
 8008246:	f7fe fe5f 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
}
 800824a:	bf00      	nop
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8008252:	b580      	push	{r7, lr}
 8008254:	b086      	sub	sp, #24
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 800825e:	230c      	movs	r3, #12
 8008260:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f107 0214 	add.w	r2, r7, #20
 800826a:	4619      	mov	r1, r3
 800826c:	68b8      	ldr	r0, [r7, #8]
 800826e:	f7fa fbd9 	bl	8002a24 <uavcan_node_Heartbeat_1_0_deserialize_>
 8008272:	4603      	mov	r3, r0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	09db      	lsrs	r3, r3, #7
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	3310      	adds	r3, #16
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fe3f 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
}
 800828a:	bf00      	nop
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <_GLOBAL__sub_I_buffer>:
 8008292:	b580      	push	{r7, lr}
 8008294:	af00      	add	r7, sp, #0
 8008296:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800829a:	2001      	movs	r0, #1
 800829c:	f7ff fe70 	bl	8007f80 <_Z41__static_initialization_and_destruction_0ii>
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <_GLOBAL__sub_D_buffer>:
 80082a2:	b580      	push	{r7, lr}
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80082aa:	2000      	movs	r0, #0
 80082ac:	f7ff fe68 	bl	8007f80 <_Z41__static_initialization_and_destruction_0ii>
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80082b8:	4b1b      	ldr	r3, [pc, #108]	; (8008328 <MX_SPI1_Init+0x74>)
 80082ba:	4a1c      	ldr	r2, [pc, #112]	; (800832c <MX_SPI1_Init+0x78>)
 80082bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80082be:	4b1a      	ldr	r3, [pc, #104]	; (8008328 <MX_SPI1_Init+0x74>)
 80082c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80082c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80082c6:	4b18      	ldr	r3, [pc, #96]	; (8008328 <MX_SPI1_Init+0x74>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80082cc:	4b16      	ldr	r3, [pc, #88]	; (8008328 <MX_SPI1_Init+0x74>)
 80082ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80082d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80082d4:	4b14      	ldr	r3, [pc, #80]	; (8008328 <MX_SPI1_Init+0x74>)
 80082d6:	2202      	movs	r2, #2
 80082d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80082da:	4b13      	ldr	r3, [pc, #76]	; (8008328 <MX_SPI1_Init+0x74>)
 80082dc:	2201      	movs	r2, #1
 80082de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80082e0:	4b11      	ldr	r3, [pc, #68]	; (8008328 <MX_SPI1_Init+0x74>)
 80082e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80082e8:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <MX_SPI1_Init+0x74>)
 80082ea:	2220      	movs	r2, #32
 80082ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80082ee:	4b0e      	ldr	r3, [pc, #56]	; (8008328 <MX_SPI1_Init+0x74>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80082f4:	4b0c      	ldr	r3, [pc, #48]	; (8008328 <MX_SPI1_Init+0x74>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082fa:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <MX_SPI1_Init+0x74>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008300:	4b09      	ldr	r3, [pc, #36]	; (8008328 <MX_SPI1_Init+0x74>)
 8008302:	2207      	movs	r2, #7
 8008304:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008306:	4b08      	ldr	r3, [pc, #32]	; (8008328 <MX_SPI1_Init+0x74>)
 8008308:	2200      	movs	r2, #0
 800830a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <MX_SPI1_Init+0x74>)
 800830e:	2200      	movs	r2, #0
 8008310:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008312:	4805      	ldr	r0, [pc, #20]	; (8008328 <MX_SPI1_Init+0x74>)
 8008314:	f004 fabe 	bl	800c894 <HAL_SPI_Init>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800831e:	f7f9 fd5a 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008322:	bf00      	nop
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	2000071c 	.word	0x2000071c
 800832c:	40013000 	.word	0x40013000

08008330 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008334:	4b1b      	ldr	r3, [pc, #108]	; (80083a4 <MX_SPI3_Init+0x74>)
 8008336:	4a1c      	ldr	r2, [pc, #112]	; (80083a8 <MX_SPI3_Init+0x78>)
 8008338:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800833a:	4b1a      	ldr	r3, [pc, #104]	; (80083a4 <MX_SPI3_Init+0x74>)
 800833c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008340:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008342:	4b18      	ldr	r3, [pc, #96]	; (80083a4 <MX_SPI3_Init+0x74>)
 8008344:	2200      	movs	r2, #0
 8008346:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8008348:	4b16      	ldr	r3, [pc, #88]	; (80083a4 <MX_SPI3_Init+0x74>)
 800834a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800834e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008350:	4b14      	ldr	r3, [pc, #80]	; (80083a4 <MX_SPI3_Init+0x74>)
 8008352:	2200      	movs	r2, #0
 8008354:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008356:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <MX_SPI3_Init+0x74>)
 8008358:	2201      	movs	r2, #1
 800835a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800835c:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <MX_SPI3_Init+0x74>)
 800835e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008362:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008364:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <MX_SPI3_Init+0x74>)
 8008366:	2218      	movs	r2, #24
 8008368:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800836a:	4b0e      	ldr	r3, [pc, #56]	; (80083a4 <MX_SPI3_Init+0x74>)
 800836c:	2200      	movs	r2, #0
 800836e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008370:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <MX_SPI3_Init+0x74>)
 8008372:	2200      	movs	r2, #0
 8008374:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008376:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <MX_SPI3_Init+0x74>)
 8008378:	2200      	movs	r2, #0
 800837a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800837c:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <MX_SPI3_Init+0x74>)
 800837e:	2207      	movs	r2, #7
 8008380:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008382:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <MX_SPI3_Init+0x74>)
 8008384:	2200      	movs	r2, #0
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <MX_SPI3_Init+0x74>)
 800838a:	2200      	movs	r2, #0
 800838c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800838e:	4805      	ldr	r0, [pc, #20]	; (80083a4 <MX_SPI3_Init+0x74>)
 8008390:	f004 fa80 	bl	800c894 <HAL_SPI_Init>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800839a:	f7f9 fd1c 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800839e:	bf00      	nop
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20000780 	.word	0x20000780
 80083a8:	40003c00 	.word	0x40003c00

080083ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08c      	sub	sp, #48	; 0x30
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b4:	f107 031c 	add.w	r3, r7, #28
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	605a      	str	r2, [r3, #4]
 80083be:	609a      	str	r2, [r3, #8]
 80083c0:	60da      	str	r2, [r3, #12]
 80083c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a33      	ldr	r2, [pc, #204]	; (8008498 <HAL_SPI_MspInit+0xec>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d131      	bne.n	8008432 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80083ce:	4b33      	ldr	r3, [pc, #204]	; (800849c <HAL_SPI_MspInit+0xf0>)
 80083d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d2:	4a32      	ldr	r2, [pc, #200]	; (800849c <HAL_SPI_MspInit+0xf0>)
 80083d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083d8:	6613      	str	r3, [r2, #96]	; 0x60
 80083da:	4b30      	ldr	r3, [pc, #192]	; (800849c <HAL_SPI_MspInit+0xf0>)
 80083dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083e2:	61bb      	str	r3, [r7, #24]
 80083e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083e6:	4b2d      	ldr	r3, [pc, #180]	; (800849c <HAL_SPI_MspInit+0xf0>)
 80083e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ea:	4a2c      	ldr	r2, [pc, #176]	; (800849c <HAL_SPI_MspInit+0xf0>)
 80083ec:	f043 0301 	orr.w	r3, r3, #1
 80083f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083f2:	4b2a      	ldr	r3, [pc, #168]	; (800849c <HAL_SPI_MspInit+0xf0>)
 80083f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
 80083fc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80083fe:	23e0      	movs	r3, #224	; 0xe0
 8008400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008402:	2302      	movs	r3, #2
 8008404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008406:	2300      	movs	r3, #0
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800840a:	2300      	movs	r3, #0
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800840e:	2305      	movs	r3, #5
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008412:	f107 031c 	add.w	r3, r7, #28
 8008416:	4619      	mov	r1, r3
 8008418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800841c:	f001 fdb4 	bl	8009f88 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8008420:	2200      	movs	r2, #0
 8008422:	2100      	movs	r1, #0
 8008424:	2023      	movs	r0, #35	; 0x23
 8008426:	f000 fe6c 	bl	8009102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800842a:	2023      	movs	r0, #35	; 0x23
 800842c:	f000 fe83 	bl	8009136 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008430:	e02d      	b.n	800848e <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1a      	ldr	r2, [pc, #104]	; (80084a0 <HAL_SPI_MspInit+0xf4>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d128      	bne.n	800848e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800843c:	4b17      	ldr	r3, [pc, #92]	; (800849c <HAL_SPI_MspInit+0xf0>)
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	4a16      	ldr	r2, [pc, #88]	; (800849c <HAL_SPI_MspInit+0xf0>)
 8008442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008446:	6593      	str	r3, [r2, #88]	; 0x58
 8008448:	4b14      	ldr	r3, [pc, #80]	; (800849c <HAL_SPI_MspInit+0xf0>)
 800844a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008450:	613b      	str	r3, [r7, #16]
 8008452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008454:	4b11      	ldr	r3, [pc, #68]	; (800849c <HAL_SPI_MspInit+0xf0>)
 8008456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008458:	4a10      	ldr	r2, [pc, #64]	; (800849c <HAL_SPI_MspInit+0xf0>)
 800845a:	f043 0304 	orr.w	r3, r3, #4
 800845e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008460:	4b0e      	ldr	r3, [pc, #56]	; (800849c <HAL_SPI_MspInit+0xf0>)
 8008462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800846c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008472:	2302      	movs	r3, #2
 8008474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008476:	2300      	movs	r3, #0
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800847a:	2300      	movs	r3, #0
 800847c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800847e:	2306      	movs	r3, #6
 8008480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008482:	f107 031c 	add.w	r3, r7, #28
 8008486:	4619      	mov	r1, r3
 8008488:	4806      	ldr	r0, [pc, #24]	; (80084a4 <HAL_SPI_MspInit+0xf8>)
 800848a:	f001 fd7d 	bl	8009f88 <HAL_GPIO_Init>
}
 800848e:	bf00      	nop
 8008490:	3730      	adds	r7, #48	; 0x30
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	40013000 	.word	0x40013000
 800849c:	40021000 	.word	0x40021000
 80084a0:	40003c00 	.word	0x40003c00
 80084a4:	48000800 	.word	0x48000800

080084a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084ae:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <HAL_MspInit+0x44>)
 80084b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b2:	4a0e      	ldr	r2, [pc, #56]	; (80084ec <HAL_MspInit+0x44>)
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	6613      	str	r3, [r2, #96]	; 0x60
 80084ba:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <HAL_MspInit+0x44>)
 80084bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	607b      	str	r3, [r7, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <HAL_MspInit+0x44>)
 80084c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ca:	4a08      	ldr	r2, [pc, #32]	; (80084ec <HAL_MspInit+0x44>)
 80084cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084d0:	6593      	str	r3, [r2, #88]	; 0x58
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <HAL_MspInit+0x44>)
 80084d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80084de:	f003 fa4d 	bl	800b97c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	40021000 	.word	0x40021000

080084f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80084f4:	e7fe      	b.n	80084f4 <NMI_Handler+0x4>

080084f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084f6:	b480      	push	{r7}
 80084f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084fa:	e7fe      	b.n	80084fa <HardFault_Handler+0x4>

080084fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008500:	e7fe      	b.n	8008500 <MemManage_Handler+0x4>

08008502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008502:	b480      	push	{r7}
 8008504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008506:	e7fe      	b.n	8008506 <BusFault_Handler+0x4>

08008508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800850c:	e7fe      	b.n	800850c <UsageFault_Handler+0x4>

0800850e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800850e:	b480      	push	{r7}
 8008510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008512:	bf00      	nop
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008520:	bf00      	nop
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800852a:	b480      	push	{r7}
 800852c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800852e:	bf00      	nop
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800853c:	f000 fcc6 	bl	8008ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008540:	bf00      	nop
 8008542:	bd80      	pop	{r7, pc}

08008544 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8008548:	4802      	ldr	r0, [pc, #8]	; (8008554 <DMA1_Channel1_IRQHandler+0x10>)
 800854a:	f000 ff77 	bl	800943c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800854e:	bf00      	nop
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000330 	.word	0x20000330

08008558 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 800855c:	4802      	ldr	r0, [pc, #8]	; (8008568 <DMA1_Channel2_IRQHandler+0x10>)
 800855e:	f000 ff6d 	bl	800943c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008562:	bf00      	nop
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000390 	.word	0x20000390

0800856c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008570:	4802      	ldr	r0, [pc, #8]	; (800857c <SPI1_IRQHandler+0x10>)
 8008572:	f004 fbaf 	bl	800ccd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008576:	bf00      	nop
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	2000071c 	.word	0x2000071c

08008580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008584:	4802      	ldr	r0, [pc, #8]	; (8008590 <USART2_IRQHandler+0x10>)
 8008586:	f005 f85d 	bl	800d644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800858a:	bf00      	nop
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000834 	.word	0x20000834

08008594 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8008598:	4802      	ldr	r0, [pc, #8]	; (80085a4 <I2C4_EV_IRQHandler+0x10>)
 800859a:	f002 f85f 	bl	800a65c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800859e:	bf00      	nop
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	200002dc 	.word	0x200002dc

080085a8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80085ac:	4802      	ldr	r0, [pc, #8]	; (80085b8 <I2C4_ER_IRQHandler+0x10>)
 80085ae:	f002 f86f 	bl	800a690 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80085b2:	bf00      	nop
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	200002dc 	.word	0x200002dc

080085bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
  return 1;
 80085c0:	2301      	movs	r3, #1
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <_kill>:

int _kill(int pid, int sig)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80085d6:	f00a fa31 	bl	8012a3c <__errno>
 80085da:	4603      	mov	r3, r0
 80085dc:	2216      	movs	r2, #22
 80085de:	601a      	str	r2, [r3, #0]
  return -1;
 80085e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <_exit>:

void _exit (int status)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80085f4:	f04f 31ff 	mov.w	r1, #4294967295
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff ffe7 	bl	80085cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80085fe:	e7fe      	b.n	80085fe <_exit+0x12>

08008600 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e00a      	b.n	8008628 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008612:	f3af 8000 	nop.w
 8008616:	4601      	mov	r1, r0
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	60ba      	str	r2, [r7, #8]
 800861e:	b2ca      	uxtb	r2, r1
 8008620:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	3301      	adds	r3, #1
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	dbf0      	blt.n	8008612 <_read+0x12>
  }

  return len;
 8008630:	687b      	ldr	r3, [r7, #4]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]
 800864a:	e009      	b.n	8008660 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	60ba      	str	r2, [r7, #8]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	3301      	adds	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	dbf1      	blt.n	800864c <_write+0x12>
  }
  return len;
 8008668:	687b      	ldr	r3, [r7, #4]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <_close>:

int _close(int file)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800867a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800867e:	4618      	mov	r0, r3
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800869a:	605a      	str	r2, [r3, #4]
  return 0;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <_isatty>:

int _isatty(int file)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80086b2:	2301      	movs	r3, #1
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086e4:	4a14      	ldr	r2, [pc, #80]	; (8008738 <_sbrk+0x5c>)
 80086e6:	4b15      	ldr	r3, [pc, #84]	; (800873c <_sbrk+0x60>)
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80086f0:	4b13      	ldr	r3, [pc, #76]	; (8008740 <_sbrk+0x64>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086f8:	4b11      	ldr	r3, [pc, #68]	; (8008740 <_sbrk+0x64>)
 80086fa:	4a12      	ldr	r2, [pc, #72]	; (8008744 <_sbrk+0x68>)
 80086fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80086fe:	4b10      	ldr	r3, [pc, #64]	; (8008740 <_sbrk+0x64>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4413      	add	r3, r2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	429a      	cmp	r2, r3
 800870a:	d207      	bcs.n	800871c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800870c:	f00a f996 	bl	8012a3c <__errno>
 8008710:	4603      	mov	r3, r0
 8008712:	220c      	movs	r2, #12
 8008714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008716:	f04f 33ff 	mov.w	r3, #4294967295
 800871a:	e009      	b.n	8008730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800871c:	4b08      	ldr	r3, [pc, #32]	; (8008740 <_sbrk+0x64>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008722:	4b07      	ldr	r3, [pc, #28]	; (8008740 <_sbrk+0x64>)
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4413      	add	r3, r2
 800872a:	4a05      	ldr	r2, [pc, #20]	; (8008740 <_sbrk+0x64>)
 800872c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800872e:	68fb      	ldr	r3, [r7, #12]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20020000 	.word	0x20020000
 800873c:	00000400 	.word	0x00000400
 8008740:	200007e4 	.word	0x200007e4
 8008744:	20000a60 	.word	0x20000a60

08008748 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008748:	b480      	push	{r7}
 800874a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <SystemInit+0x20>)
 800874e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008752:	4a05      	ldr	r2, [pc, #20]	; (8008768 <SystemInit+0x20>)
 8008754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800875c:	bf00      	nop
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	e000ed00 	.word	0xe000ed00

0800876c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08c      	sub	sp, #48	; 0x30
 8008770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008772:	f107 030c 	add.w	r3, r7, #12
 8008776:	2224      	movs	r2, #36	; 0x24
 8008778:	2100      	movs	r1, #0
 800877a:	4618      	mov	r0, r3
 800877c:	f00a f8a5 	bl	80128ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008780:	463b      	mov	r3, r7
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	605a      	str	r2, [r3, #4]
 8008788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800878a:	4b23      	ldr	r3, [pc, #140]	; (8008818 <MX_TIM8_Init+0xac>)
 800878c:	4a23      	ldr	r2, [pc, #140]	; (800881c <MX_TIM8_Init+0xb0>)
 800878e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008790:	4b21      	ldr	r3, [pc, #132]	; (8008818 <MX_TIM8_Init+0xac>)
 8008792:	2200      	movs	r2, #0
 8008794:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008796:	4b20      	ldr	r3, [pc, #128]	; (8008818 <MX_TIM8_Init+0xac>)
 8008798:	2200      	movs	r2, #0
 800879a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800879c:	4b1e      	ldr	r3, [pc, #120]	; (8008818 <MX_TIM8_Init+0xac>)
 800879e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087a4:	4b1c      	ldr	r3, [pc, #112]	; (8008818 <MX_TIM8_Init+0xac>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80087aa:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <MX_TIM8_Init+0xac>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087b0:	4b19      	ldr	r3, [pc, #100]	; (8008818 <MX_TIM8_Init+0xac>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80087b6:	2301      	movs	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80087ba:	2300      	movs	r3, #0
 80087bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80087be:	2301      	movs	r3, #1
 80087c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80087c2:	2300      	movs	r3, #0
 80087c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80087ca:	2300      	movs	r3, #0
 80087cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80087ce:	2301      	movs	r3, #1
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80087d2:	2300      	movs	r3, #0
 80087d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80087da:	f107 030c 	add.w	r3, r7, #12
 80087de:	4619      	mov	r1, r3
 80087e0:	480d      	ldr	r0, [pc, #52]	; (8008818 <MX_TIM8_Init+0xac>)
 80087e2:	f004 fcef 	bl	800d1c4 <HAL_TIM_Encoder_Init>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80087ec:	f7f9 faf3 	bl	8001dd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80087f0:	2300      	movs	r3, #0
 80087f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80087f4:	2300      	movs	r3, #0
 80087f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80087fc:	463b      	mov	r3, r7
 80087fe:	4619      	mov	r1, r3
 8008800:	4805      	ldr	r0, [pc, #20]	; (8008818 <MX_TIM8_Init+0xac>)
 8008802:	f004 fe39 	bl	800d478 <HAL_TIMEx_MasterConfigSynchronization>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800880c:	f7f9 fae3 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008810:	bf00      	nop
 8008812:	3730      	adds	r7, #48	; 0x30
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	200007e8 	.word	0x200007e8
 800881c:	40013400 	.word	0x40013400

08008820 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08a      	sub	sp, #40	; 0x28
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008828:	f107 0314 	add.w	r3, r7, #20
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	605a      	str	r2, [r3, #4]
 8008832:	609a      	str	r2, [r3, #8]
 8008834:	60da      	str	r2, [r3, #12]
 8008836:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a25      	ldr	r2, [pc, #148]	; (80088d4 <HAL_TIM_Encoder_MspInit+0xb4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d143      	bne.n	80088ca <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008842:	4b25      	ldr	r3, [pc, #148]	; (80088d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008846:	4a24      	ldr	r2, [pc, #144]	; (80088d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008848:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800884c:	6613      	str	r3, [r2, #96]	; 0x60
 800884e:	4b22      	ldr	r3, [pc, #136]	; (80088d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800885a:	4b1f      	ldr	r3, [pc, #124]	; (80088d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 800885c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800885e:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008860:	f043 0304 	orr.w	r3, r3, #4
 8008864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008866:	4b1c      	ldr	r3, [pc, #112]	; (80088d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008872:	4b19      	ldr	r3, [pc, #100]	; (80088d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008876:	4a18      	ldr	r2, [pc, #96]	; (80088d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008878:	f043 0302 	orr.w	r3, r3, #2
 800887c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800887e:	4b16      	ldr	r3, [pc, #88]	; (80088d8 <HAL_TIM_Encoder_MspInit+0xb8>)
 8008880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	60bb      	str	r3, [r7, #8]
 8008888:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800888a:	2380      	movs	r3, #128	; 0x80
 800888c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888e:	2302      	movs	r3, #2
 8008890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008892:	2300      	movs	r3, #0
 8008894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008896:	2300      	movs	r3, #0
 8008898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800889a:	2304      	movs	r3, #4
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800889e:	f107 0314 	add.w	r3, r7, #20
 80088a2:	4619      	mov	r1, r3
 80088a4:	480d      	ldr	r0, [pc, #52]	; (80088dc <HAL_TIM_Encoder_MspInit+0xbc>)
 80088a6:	f001 fb6f 	bl	8009f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80088aa:	2340      	movs	r3, #64	; 0x40
 80088ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ae:	2302      	movs	r3, #2
 80088b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088b6:	2300      	movs	r3, #0
 80088b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80088ba:	2305      	movs	r3, #5
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088be:	f107 0314 	add.w	r3, r7, #20
 80088c2:	4619      	mov	r1, r3
 80088c4:	4806      	ldr	r0, [pc, #24]	; (80088e0 <HAL_TIM_Encoder_MspInit+0xc0>)
 80088c6:	f001 fb5f 	bl	8009f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80088ca:	bf00      	nop
 80088cc:	3728      	adds	r7, #40	; 0x28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40013400 	.word	0x40013400
 80088d8:	40021000 	.word	0x40021000
 80088dc:	48000800 	.word	0x48000800
 80088e0:	48000400 	.word	0x48000400
 80088e4:	00000000 	.word	0x00000000

080088e8 <tmc5160_move>:
	WData[4] = (position & 0x000000FF);
	tmc5160_write(WData);
}

void tmc5160_move(int32_t vel)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7f7 fe3f 	bl	8000574 <__aeabi_i2d>
 80088f6:	a334      	add	r3, pc, #208	; (adr r3, 80089c8 <tmc5160_move+0xe0>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	f7f7 fea4 	bl	8000648 <__aeabi_dmul>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4610      	mov	r0, r2
 8008906:	4619      	mov	r1, r3
 8008908:	f7f8 f94e 	bl	8000ba8 <__aeabi_d2iz>
 800890c:	4603      	mov	r3, r0
 800890e:	607b      	str	r3, [r7, #4]
	int32_t v1;
	uint8_t WData[5] = {0};
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	2300      	movs	r3, #0
 8008916:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	105b      	asrs	r3, r3, #1
 800891c:	617b      	str	r3, [r7, #20]

	if (vel < 0) //select positive or negative mode depending on vel sign
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	da0f      	bge.n	8008944 <tmc5160_move+0x5c>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 8008924:	23a0      	movs	r3, #160	; 0xa0
 8008926:	733b      	strb	r3, [r7, #12]
 8008928:	2300      	movs	r3, #0
 800892a:	737b      	strb	r3, [r7, #13]
 800892c:	2300      	movs	r3, #0
 800892e:	73bb      	strb	r3, [r7, #14]
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
 8008934:	2302      	movs	r3, #2
 8008936:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 8008938:	f107 030c 	add.w	r3, r7, #12
 800893c:	4618      	mov	r0, r3
 800893e:	f000 f897 	bl	8008a70 <tmc5160_write>
 8008942:	e00e      	b.n	8008962 <tmc5160_move+0x7a>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 8008944:	23a0      	movs	r3, #160	; 0xa0
 8008946:	733b      	strb	r3, [r7, #12]
 8008948:	2300      	movs	r3, #0
 800894a:	737b      	strb	r3, [r7, #13]
 800894c:	2300      	movs	r3, #0
 800894e:	73bb      	strb	r3, [r7, #14]
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]
 8008954:	2301      	movs	r3, #1
 8008956:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 8008958:	f107 030c 	add.w	r3, r7, #12
 800895c:	4618      	mov	r0, r3
 800895e:	f000 f887 	bl	8008a70 <tmc5160_write>
	}

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8008962:	23a5      	movs	r3, #165	; 0xa5
 8008964:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	0e1b      	lsrs	r3, r3, #24
 800896a:	b2db      	uxtb	r3, r3
 800896c:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	141b      	asrs	r3, r3, #16
 8008972:	b2db      	uxtb	r3, r3
 8008974:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	121b      	asrs	r3, r3, #8
 800897a:	b2db      	uxtb	r3, r3
 800897c:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8008984:	f107 030c 	add.w	r3, r7, #12
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f871 	bl	8008a70 <tmc5160_write>

	//vel = abs(vel); //TODO!!!
	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 800898e:	23a7      	movs	r3, #167	; 0xa7
 8008990:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	0e1b      	lsrs	r3, r3, #24
 8008996:	b2db      	uxtb	r3, r3
 8008998:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	141b      	asrs	r3, r3, #16
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	121b      	asrs	r3, r3, #8
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80089b0:	f107 030c 	add.w	r3, r7, #12
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 f85b 	bl	8008a70 <tmc5160_write>
}
 80089ba:	bf00      	nop
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	f3af 8000 	nop.w
 80089c8:	77ffebde 	.word	0x77ffebde
 80089cc:	3ff65e9f 	.word	0x3ff65e9f

080089d0 <tmc5160_velocity>:
	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
	tmc5160_write(WData);
}

void tmc5160_velocity(uint32_t vel)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7f7 fdbb 	bl	8000554 <__aeabi_ui2d>
 80089de:	a322      	add	r3, pc, #136	; (adr r3, 8008a68 <tmc5160_velocity+0x98>)
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f7f7 fe30 	bl	8000648 <__aeabi_dmul>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4610      	mov	r0, r2
 80089ee:	4619      	mov	r1, r3
 80089f0:	f7f8 f902 	bl	8000bf8 <__aeabi_d2uiz>
 80089f4:	4603      	mov	r3, r0
 80089f6:	607b      	str	r3, [r7, #4]
	uint32_t v1;
	uint8_t WData[5] = {0};
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	2300      	movs	r3, #0
 80089fe:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	085b      	lsrs	r3, r3, #1
 8008a04:	617b      	str	r3, [r7, #20]

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8008a06:	23a5      	movs	r3, #165	; 0xa5
 8008a08:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	0e1b      	lsrs	r3, r3, #24
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	0c1b      	lsrs	r3, r3, #16
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	0a1b      	lsrs	r3, r3, #8
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8008a28:	f107 030c 	add.w	r3, r7, #12
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f81f 	bl	8008a70 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 8008a32:	23a7      	movs	r3, #167	; 0xa7
 8008a34:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	0e1b      	lsrs	r3, r3, #24
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	0c1b      	lsrs	r3, r3, #16
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	0a1b      	lsrs	r3, r3, #8
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8008a54:	f107 030c 	add.w	r3, r7, #12
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 f809 	bl	8008a70 <tmc5160_write>

}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	77ffebde 	.word	0x77ffebde
 8008a6c:	3ff65e9f 	.word	0x3ff65e9f

08008a70 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2110      	movs	r1, #16
 8008a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a80:	f001 fc04 	bl	800a28c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 8008a84:	f04f 33ff 	mov.w	r3, #4294967295
 8008a88:	2205      	movs	r2, #5
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	4806      	ldr	r0, [pc, #24]	; (8008aa8 <tmc5160_write+0x38>)
 8008a8e:	f003 ffac 	bl	800c9ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 8008a92:	2201      	movs	r2, #1
 8008a94:	2110      	movs	r1, #16
 8008a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a9a:	f001 fbf7 	bl	800a28c <HAL_GPIO_WritePin>
}
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	2000071c 	.word	0x2000071c

08008aac <tmc5160_init>:

	return (rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
}

void tmc5160_init()
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2120      	movs	r1, #32
 8008ab6:	486f      	ldr	r0, [pc, #444]	; (8008c74 <tmc5160_init+0x1c8>)
 8008ab8:	f001 fbe8 	bl	800a28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 8008abc:	2201      	movs	r2, #1
 8008abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ac6:	f001 fbe1 	bl	800a28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 8008aca:	2200      	movs	r2, #0
 8008acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ad4:	f001 fbda 	bl	800a28c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8008ad8:	2201      	movs	r2, #1
 8008ada:	2110      	movs	r1, #16
 8008adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ae0:	f001 fbd4 	bl	800a28c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008aee:	f001 fbcd 	bl	800a28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 8008af2:	2200      	movs	r2, #0
 8008af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008afc:	f001 fbc6 	bl	800a28c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8008b00:	2064      	movs	r0, #100	; 0x64
 8008b02:	f000 fa01 	bl	8008f08 <HAL_Delay>

	uint8_t WData[5] = {0};
 8008b06:	2300      	movs	r3, #0
 8008b08:	603b      	str	r3, [r7, #0]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	713b      	strb	r3, [r7, #4]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 8008b0e:	23ec      	movs	r3, #236	; 0xec
 8008b10:	703b      	strb	r3, [r7, #0]
 8008b12:	2300      	movs	r3, #0
 8008b14:	707b      	strb	r3, [r7, #1]
 8008b16:	2300      	movs	r3, #0
 8008b18:	70bb      	strb	r3, [r7, #2]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	70fb      	strb	r3, [r7, #3]
 8008b1e:	23c3      	movs	r3, #195	; 0xc3
 8008b20:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008b22:	463b      	mov	r3, r7
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7ff ffa3 	bl	8008a70 <tmc5160_write>

	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x01; WData[4] = 0x01; //  IHOLDDELAY=10,  IRUN=10/31,  IHOLD=02/31
 8008b2a:	2390      	movs	r3, #144	; 0x90
 8008b2c:	703b      	strb	r3, [r7, #0]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	707b      	strb	r3, [r7, #1]
 8008b32:	2300      	movs	r3, #0
 8008b34:	70bb      	strb	r3, [r7, #2]
 8008b36:	2301      	movs	r3, #1
 8008b38:	70fb      	strb	r3, [r7, #3]
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008b3e:	463b      	mov	r3, r7
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff ff95 	bl	8008a70 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 8008b46:	2391      	movs	r3, #145	; 0x91
 8008b48:	703b      	strb	r3, [r7, #0]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	707b      	strb	r3, [r7, #1]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	70bb      	strb	r3, [r7, #2]
 8008b52:	2300      	movs	r3, #0
 8008b54:	70fb      	strb	r3, [r7, #3]
 8008b56:	230a      	movs	r3, #10
 8008b58:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008b5a:	463b      	mov	r3, r7
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff ff87 	bl	8008a70 <tmc5160_write>

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8008b62:	2380      	movs	r3, #128	; 0x80
 8008b64:	703b      	strb	r3, [r7, #0]
 8008b66:	2300      	movs	r3, #0
 8008b68:	707b      	strb	r3, [r7, #1]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	70bb      	strb	r3, [r7, #2]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	70fb      	strb	r3, [r7, #3]
 8008b72:	2304      	movs	r3, #4
 8008b74:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008b76:	463b      	mov	r3, r7
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff ff79 	bl	8008a70 <tmc5160_write>

	tmc5160_velocity(1000000); //initial vel config
 8008b7e:	483e      	ldr	r0, [pc, #248]	; (8008c78 <tmc5160_init+0x1cc>)
 8008b80:	f7ff ff26 	bl	80089d0 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 8008b84:	2393      	movs	r3, #147	; 0x93
 8008b86:	703b      	strb	r3, [r7, #0]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	707b      	strb	r3, [r7, #1]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	70bb      	strb	r3, [r7, #2]
 8008b90:	2300      	movs	r3, #0
 8008b92:	70fb      	strb	r3, [r7, #3]
 8008b94:	23c8      	movs	r3, #200	; 0xc8
 8008b96:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008b98:	463b      	mov	r3, r7
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff ff68 	bl	8008a70 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 8008ba0:	23a0      	movs	r3, #160	; 0xa0
 8008ba2:	703b      	strb	r3, [r7, #0]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	707b      	strb	r3, [r7, #1]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	70bb      	strb	r3, [r7, #2]
 8008bac:	2300      	movs	r3, #0
 8008bae:	70fb      	strb	r3, [r7, #3]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008bb4:	463b      	mov	r3, r7
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff ff5a 	bl	8008a70 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 8008bbc:	23a3      	movs	r3, #163	; 0xa3
 8008bbe:	703b      	strb	r3, [r7, #0]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	707b      	strb	r3, [r7, #1]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	70bb      	strb	r3, [r7, #2]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	70fb      	strb	r3, [r7, #3]
 8008bcc:	230a      	movs	r3, #10
 8008bce:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008bd0:	463b      	mov	r3, r7
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff ff4c 	bl	8008a70 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 8008bd8:	23a4      	movs	r3, #164	; 0xa4
 8008bda:	703b      	strb	r3, [r7, #0]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	707b      	strb	r3, [r7, #1]
 8008be0:	2300      	movs	r3, #0
 8008be2:	70bb      	strb	r3, [r7, #2]
 8008be4:	236e      	movs	r3, #110	; 0x6e
 8008be6:	70fb      	strb	r3, [r7, #3]
 8008be8:	2320      	movs	r3, #32
 8008bea:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008bec:	463b      	mov	r3, r7
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff ff3e 	bl	8008a70 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 8008bf4:	23a6      	movs	r3, #166	; 0xa6
 8008bf6:	703b      	strb	r3, [r7, #0]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	707b      	strb	r3, [r7, #1]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	70bb      	strb	r3, [r7, #2]
 8008c00:	2323      	movs	r3, #35	; 0x23
 8008c02:	70fb      	strb	r3, [r7, #3]
 8008c04:	2388      	movs	r3, #136	; 0x88
 8008c06:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008c08:	463b      	mov	r3, r7
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff ff30 	bl	8008a70 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 8008c10:	23a8      	movs	r3, #168	; 0xa8
 8008c12:	703b      	strb	r3, [r7, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	707b      	strb	r3, [r7, #1]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	70bb      	strb	r3, [r7, #2]
 8008c1c:	2323      	movs	r3, #35	; 0x23
 8008c1e:	70fb      	strb	r3, [r7, #3]
 8008c20:	2388      	movs	r3, #136	; 0x88
 8008c22:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008c24:	463b      	mov	r3, r7
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff ff22 	bl	8008a70 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 8008c2c:	23aa      	movs	r3, #170	; 0xaa
 8008c2e:	703b      	strb	r3, [r7, #0]
 8008c30:	2300      	movs	r3, #0
 8008c32:	707b      	strb	r3, [r7, #1]
 8008c34:	2300      	movs	r3, #0
 8008c36:	70bb      	strb	r3, [r7, #2]
 8008c38:	236e      	movs	r3, #110	; 0x6e
 8008c3a:	70fb      	strb	r3, [r7, #3]
 8008c3c:	2320      	movs	r3, #32
 8008c3e:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008c40:	463b      	mov	r3, r7
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff ff14 	bl	8008a70 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 8008c48:	23ab      	movs	r3, #171	; 0xab
 8008c4a:	703b      	strb	r3, [r7, #0]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	707b      	strb	r3, [r7, #1]
 8008c50:	2300      	movs	r3, #0
 8008c52:	70bb      	strb	r3, [r7, #2]
 8008c54:	2300      	movs	r3, #0
 8008c56:	70fb      	strb	r3, [r7, #3]
 8008c58:	230a      	movs	r3, #10
 8008c5a:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8008c5c:	463b      	mov	r3, r7
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff ff06 	bl	8008a70 <tmc5160_write>

	HAL_Delay(100);
 8008c64:	2064      	movs	r0, #100	; 0x64
 8008c66:	f000 f94f 	bl	8008f08 <HAL_Delay>
}
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	48000800 	.word	0x48000800
 8008c78:	000f4240 	.word	0x000f4240

08008c7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008c80:	4b22      	ldr	r3, [pc, #136]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008c82:	4a23      	ldr	r2, [pc, #140]	; (8008d10 <MX_USART2_UART_Init+0x94>)
 8008c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008c86:	4b21      	ldr	r3, [pc, #132]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008c8e:	4b1f      	ldr	r3, [pc, #124]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008c94:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008c9a:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008ca0:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008ca2:	220c      	movs	r2, #12
 8008ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ca6:	4b19      	ldr	r3, [pc, #100]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008cac:	4b17      	ldr	r3, [pc, #92]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008cb2:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008cb8:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008cc4:	4811      	ldr	r0, [pc, #68]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008cc6:	f004 fc6d 	bl	800d5a4 <HAL_UART_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008cd0:	f7f9 f881 	bl	8001dd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	480d      	ldr	r0, [pc, #52]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008cd8:	f005 fdab 	bl	800e832 <HAL_UARTEx_SetTxFifoThreshold>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008ce2:	f7f9 f878 	bl	8001dd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	4808      	ldr	r0, [pc, #32]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008cea:	f005 fde0 	bl	800e8ae <HAL_UARTEx_SetRxFifoThreshold>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008cf4:	f7f9 f86f 	bl	8001dd6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008cf8:	4804      	ldr	r0, [pc, #16]	; (8008d0c <MX_USART2_UART_Init+0x90>)
 8008cfa:	f005 fd61 	bl	800e7c0 <HAL_UARTEx_DisableFifoMode>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008d04:	f7f9 f867 	bl	8001dd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008d08:	bf00      	nop
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000834 	.word	0x20000834
 8008d10:	40004400 	.word	0x40004400

08008d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b09e      	sub	sp, #120	; 0x78
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	605a      	str	r2, [r3, #4]
 8008d26:	609a      	str	r2, [r3, #8]
 8008d28:	60da      	str	r2, [r3, #12]
 8008d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d2c:	f107 0310 	add.w	r3, r7, #16
 8008d30:	2254      	movs	r2, #84	; 0x54
 8008d32:	2100      	movs	r1, #0
 8008d34:	4618      	mov	r0, r3
 8008d36:	f009 fdc8 	bl	80128ca <memset>
  if(uartHandle->Instance==USART2)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a23      	ldr	r2, [pc, #140]	; (8008dcc <HAL_UART_MspInit+0xb8>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d13e      	bne.n	8008dc2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008d44:	2302      	movs	r3, #2
 8008d46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d4c:	f107 0310 	add.w	r3, r7, #16
 8008d50:	4618      	mov	r0, r3
 8008d52:	f003 fb51 	bl	800c3f8 <HAL_RCCEx_PeriphCLKConfig>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008d5c:	f7f9 f83b 	bl	8001dd6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008d60:	4b1b      	ldr	r3, [pc, #108]	; (8008dd0 <HAL_UART_MspInit+0xbc>)
 8008d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d64:	4a1a      	ldr	r2, [pc, #104]	; (8008dd0 <HAL_UART_MspInit+0xbc>)
 8008d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8008d6c:	4b18      	ldr	r3, [pc, #96]	; (8008dd0 <HAL_UART_MspInit+0xbc>)
 8008d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d78:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <HAL_UART_MspInit+0xbc>)
 8008d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d7c:	4a14      	ldr	r2, [pc, #80]	; (8008dd0 <HAL_UART_MspInit+0xbc>)
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d84:	4b12      	ldr	r3, [pc, #72]	; (8008dd0 <HAL_UART_MspInit+0xbc>)
 8008d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	60bb      	str	r3, [r7, #8]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008d90:	230c      	movs	r3, #12
 8008d92:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d94:	2302      	movs	r3, #2
 8008d96:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008da0:	2307      	movs	r3, #7
 8008da2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008da4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008da8:	4619      	mov	r1, r3
 8008daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008dae:	f001 f8eb 	bl	8009f88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008db2:	2200      	movs	r2, #0
 8008db4:	2100      	movs	r1, #0
 8008db6:	2026      	movs	r0, #38	; 0x26
 8008db8:	f000 f9a3 	bl	8009102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008dbc:	2026      	movs	r0, #38	; 0x26
 8008dbe:	f000 f9ba 	bl	8009136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3778      	adds	r7, #120	; 0x78
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40004400 	.word	0x40004400
 8008dd0:	40021000 	.word	0x40021000

08008dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008dd4:	480d      	ldr	r0, [pc, #52]	; (8008e0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008dd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008dd8:	f7ff fcb6 	bl	8008748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ddc:	480c      	ldr	r0, [pc, #48]	; (8008e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8008dde:	490d      	ldr	r1, [pc, #52]	; (8008e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008de0:	4a0d      	ldr	r2, [pc, #52]	; (8008e18 <LoopForever+0xe>)
  movs r3, #0
 8008de2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008de4:	e002      	b.n	8008dec <LoopCopyDataInit>

08008de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008dea:	3304      	adds	r3, #4

08008dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008df0:	d3f9      	bcc.n	8008de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008df2:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008df4:	4c0a      	ldr	r4, [pc, #40]	; (8008e20 <LoopForever+0x16>)
  movs r3, #0
 8008df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008df8:	e001      	b.n	8008dfe <LoopFillZerobss>

08008dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008dfc:	3204      	adds	r2, #4

08008dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e00:	d3fb      	bcc.n	8008dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008e02:	f009 fe21 	bl	8012a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008e06:	f7f8 ff4b 	bl	8001ca0 <main>

08008e0a <LoopForever>:

LoopForever:
    b LoopForever
 8008e0a:	e7fe      	b.n	8008e0a <LoopForever>
  ldr   r0, =_estack
 8008e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e14:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8008e18:	0801754c 	.word	0x0801754c
  ldr r2, =_sbss
 8008e1c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8008e20:	20000a60 	.word	0x20000a60

08008e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008e24:	e7fe      	b.n	8008e24 <ADC1_2_IRQHandler>

08008e26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e30:	2003      	movs	r0, #3
 8008e32:	f000 f95b 	bl	80090ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008e36:	200f      	movs	r0, #15
 8008e38:	f000 f80e 	bl	8008e58 <HAL_InitTick>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	71fb      	strb	r3, [r7, #7]
 8008e46:	e001      	b.n	8008e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008e48:	f7ff fb2e 	bl	80084a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008e4c:	79fb      	ldrb	r3, [r7, #7]

}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008e64:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <HAL_InitTick+0x68>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d022      	beq.n	8008eb2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008e6c:	4b15      	ldr	r3, [pc, #84]	; (8008ec4 <HAL_InitTick+0x6c>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <HAL_InitTick+0x68>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f966 	bl	8009152 <HAL_SYSTICK_Config>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10f      	bne.n	8008eac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b0f      	cmp	r3, #15
 8008e90:	d809      	bhi.n	8008ea6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e92:	2200      	movs	r2, #0
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9a:	f000 f932 	bl	8009102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008e9e:	4a0a      	ldr	r2, [pc, #40]	; (8008ec8 <HAL_InitTick+0x70>)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	e007      	b.n	8008eb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	73fb      	strb	r3, [r7, #15]
 8008eaa:	e004      	b.n	8008eb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	73fb      	strb	r3, [r7, #15]
 8008eb0:	e001      	b.n	8008eb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20000044 	.word	0x20000044
 8008ec4:	2000003c 	.word	0x2000003c
 8008ec8:	20000040 	.word	0x20000040

08008ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ed0:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <HAL_IncTick+0x1c>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4b05      	ldr	r3, [pc, #20]	; (8008eec <HAL_IncTick+0x20>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4413      	add	r3, r2
 8008eda:	4a03      	ldr	r2, [pc, #12]	; (8008ee8 <HAL_IncTick+0x1c>)
 8008edc:	6013      	str	r3, [r2, #0]
}
 8008ede:	bf00      	nop
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	200008c8 	.word	0x200008c8
 8008eec:	20000044 	.word	0x20000044

08008ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8008ef4:	4b03      	ldr	r3, [pc, #12]	; (8008f04 <HAL_GetTick+0x14>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	200008c8 	.word	0x200008c8

08008f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f10:	f7ff ffee 	bl	8008ef0 <HAL_GetTick>
 8008f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f20:	d004      	beq.n	8008f2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f22:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <HAL_Delay+0x40>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008f2c:	bf00      	nop
 8008f2e:	f7ff ffdf 	bl	8008ef0 <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d8f7      	bhi.n	8008f2e <HAL_Delay+0x26>
  {
  }
}
 8008f3e:	bf00      	nop
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000044 	.word	0x20000044

08008f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <__NVIC_SetPriorityGrouping+0x44>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f68:	4013      	ands	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f7e:	4a04      	ldr	r2, [pc, #16]	; (8008f90 <__NVIC_SetPriorityGrouping+0x44>)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	60d3      	str	r3, [r2, #12]
}
 8008f84:	bf00      	nop
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	e000ed00 	.word	0xe000ed00

08008f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f98:	4b04      	ldr	r3, [pc, #16]	; (8008fac <__NVIC_GetPriorityGrouping+0x18>)
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	0a1b      	lsrs	r3, r3, #8
 8008f9e:	f003 0307 	and.w	r3, r3, #7
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	e000ed00 	.word	0xe000ed00

08008fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	db0b      	blt.n	8008fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	f003 021f 	and.w	r2, r3, #31
 8008fc8:	4907      	ldr	r1, [pc, #28]	; (8008fe8 <__NVIC_EnableIRQ+0x38>)
 8008fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fce:	095b      	lsrs	r3, r3, #5
 8008fd0:	2001      	movs	r0, #1
 8008fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8008fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	e000e100 	.word	0xe000e100

08008fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	db0a      	blt.n	8009016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	b2da      	uxtb	r2, r3
 8009004:	490c      	ldr	r1, [pc, #48]	; (8009038 <__NVIC_SetPriority+0x4c>)
 8009006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900a:	0112      	lsls	r2, r2, #4
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	440b      	add	r3, r1
 8009010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009014:	e00a      	b.n	800902c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	4908      	ldr	r1, [pc, #32]	; (800903c <__NVIC_SetPriority+0x50>)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	3b04      	subs	r3, #4
 8009024:	0112      	lsls	r2, r2, #4
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	440b      	add	r3, r1
 800902a:	761a      	strb	r2, [r3, #24]
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	e000e100 	.word	0xe000e100
 800903c:	e000ed00 	.word	0xe000ed00

08009040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009040:	b480      	push	{r7}
 8009042:	b089      	sub	sp, #36	; 0x24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f1c3 0307 	rsb	r3, r3, #7
 800905a:	2b04      	cmp	r3, #4
 800905c:	bf28      	it	cs
 800905e:	2304      	movcs	r3, #4
 8009060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	3304      	adds	r3, #4
 8009066:	2b06      	cmp	r3, #6
 8009068:	d902      	bls.n	8009070 <NVIC_EncodePriority+0x30>
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	3b03      	subs	r3, #3
 800906e:	e000      	b.n	8009072 <NVIC_EncodePriority+0x32>
 8009070:	2300      	movs	r3, #0
 8009072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009074:	f04f 32ff 	mov.w	r2, #4294967295
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	43da      	mvns	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	401a      	ands	r2, r3
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009088:	f04f 31ff 	mov.w	r1, #4294967295
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	fa01 f303 	lsl.w	r3, r1, r3
 8009092:	43d9      	mvns	r1, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009098:	4313      	orrs	r3, r2
         );
}
 800909a:	4618      	mov	r0, r3
 800909c:	3724      	adds	r7, #36	; 0x24
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090b8:	d301      	bcc.n	80090be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090ba:	2301      	movs	r3, #1
 80090bc:	e00f      	b.n	80090de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090be:	4a0a      	ldr	r2, [pc, #40]	; (80090e8 <SysTick_Config+0x40>)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090c6:	210f      	movs	r1, #15
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295
 80090cc:	f7ff ff8e 	bl	8008fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090d0:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <SysTick_Config+0x40>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090d6:	4b04      	ldr	r3, [pc, #16]	; (80090e8 <SysTick_Config+0x40>)
 80090d8:	2207      	movs	r2, #7
 80090da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	e000e010 	.word	0xe000e010

080090ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff ff29 	bl	8008f4c <__NVIC_SetPriorityGrouping>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af00      	add	r7, sp, #0
 8009108:	4603      	mov	r3, r0
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	607a      	str	r2, [r7, #4]
 800910e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009110:	f7ff ff40 	bl	8008f94 <__NVIC_GetPriorityGrouping>
 8009114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	68b9      	ldr	r1, [r7, #8]
 800911a:	6978      	ldr	r0, [r7, #20]
 800911c:	f7ff ff90 	bl	8009040 <NVIC_EncodePriority>
 8009120:	4602      	mov	r2, r0
 8009122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff ff5f 	bl	8008fec <__NVIC_SetPriority>
}
 800912e:	bf00      	nop
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	4603      	mov	r3, r0
 800913e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff ff33 	bl	8008fb0 <__NVIC_EnableIRQ>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff ffa4 	bl	80090a8 <SysTick_Config>
 8009160:	4603      	mov	r3, r0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e08d      	b.n	800929a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	4b47      	ldr	r3, [pc, #284]	; (80092a4 <HAL_DMA_Init+0x138>)
 8009186:	429a      	cmp	r2, r3
 8009188:	d80f      	bhi.n	80091aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	4b45      	ldr	r3, [pc, #276]	; (80092a8 <HAL_DMA_Init+0x13c>)
 8009192:	4413      	add	r3, r2
 8009194:	4a45      	ldr	r2, [pc, #276]	; (80092ac <HAL_DMA_Init+0x140>)
 8009196:	fba2 2303 	umull	r2, r3, r2, r3
 800919a:	091b      	lsrs	r3, r3, #4
 800919c:	009a      	lsls	r2, r3, #2
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a42      	ldr	r2, [pc, #264]	; (80092b0 <HAL_DMA_Init+0x144>)
 80091a6:	641a      	str	r2, [r3, #64]	; 0x40
 80091a8:	e00e      	b.n	80091c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	4b40      	ldr	r3, [pc, #256]	; (80092b4 <HAL_DMA_Init+0x148>)
 80091b2:	4413      	add	r3, r2
 80091b4:	4a3d      	ldr	r2, [pc, #244]	; (80092ac <HAL_DMA_Init+0x140>)
 80091b6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ba:	091b      	lsrs	r3, r3, #4
 80091bc:	009a      	lsls	r2, r3, #2
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a3c      	ldr	r2, [pc, #240]	; (80092b8 <HAL_DMA_Init+0x14c>)
 80091c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80091de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80091ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f9cc 	bl	80095b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009228:	d102      	bne.n	8009230 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009238:	b2d2      	uxtb	r2, r2
 800923a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009244:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d010      	beq.n	8009270 <HAL_DMA_Init+0x104>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	2b04      	cmp	r3, #4
 8009254:	d80c      	bhi.n	8009270 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f9ec 	bl	8009634 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800926c:	605a      	str	r2, [r3, #4]
 800926e:	e008      	b.n	8009282 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	40020407 	.word	0x40020407
 80092a8:	bffdfff8 	.word	0xbffdfff8
 80092ac:	cccccccd 	.word	0xcccccccd
 80092b0:	40020000 	.word	0x40020000
 80092b4:	bffdfbf8 	.word	0xbffdfbf8
 80092b8:	40020400 	.word	0x40020400

080092bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d005      	beq.n	80092e0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2204      	movs	r2, #4
 80092d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	73fb      	strb	r3, [r7, #15]
 80092de:	e037      	b.n	8009350 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 020e 	bic.w	r2, r2, #14
 80092ee:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092fe:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f022 0201 	bic.w	r2, r2, #1
 800930e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009314:	f003 021f 	and.w	r2, r3, #31
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931c:	2101      	movs	r1, #1
 800931e:	fa01 f202 	lsl.w	r2, r1, r2
 8009322:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800932c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00c      	beq.n	8009350 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009344:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800934e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009360:	7bfb      	ldrb	r3, [r7, #15]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b02      	cmp	r3, #2
 8009384:	d00d      	beq.n	80093a2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2204      	movs	r2, #4
 800938a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
 80093a0:	e047      	b.n	8009432 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 020e 	bic.w	r2, r2, #14
 80093b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f022 0201 	bic.w	r2, r2, #1
 80093c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d6:	f003 021f 	and.w	r2, r3, #31
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	2101      	movs	r1, #1
 80093e0:	fa01 f202 	lsl.w	r2, r1, r2
 80093e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80093ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009406:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009410:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	4798      	blx	r3
    }
  }
  return status;
 8009432:	7bfb      	ldrb	r3, [r7, #15]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009458:	f003 031f 	and.w	r3, r3, #31
 800945c:	2204      	movs	r2, #4
 800945e:	409a      	lsls	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4013      	ands	r3, r2
 8009464:	2b00      	cmp	r3, #0
 8009466:	d026      	beq.n	80094b6 <HAL_DMA_IRQHandler+0x7a>
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	d021      	beq.n	80094b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0320 	and.w	r3, r3, #32
 800947c:	2b00      	cmp	r3, #0
 800947e:	d107      	bne.n	8009490 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0204 	bic.w	r2, r2, #4
 800948e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009494:	f003 021f 	and.w	r2, r3, #31
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949c:	2104      	movs	r1, #4
 800949e:	fa01 f202 	lsl.w	r2, r1, r2
 80094a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d071      	beq.n	8009590 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80094b4:	e06c      	b.n	8009590 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ba:	f003 031f 	and.w	r3, r3, #31
 80094be:	2202      	movs	r2, #2
 80094c0:	409a      	lsls	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	4013      	ands	r3, r2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d02e      	beq.n	8009528 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d029      	beq.n	8009528 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 0320 	and.w	r3, r3, #32
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10b      	bne.n	80094fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f022 020a 	bic.w	r2, r2, #10
 80094f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fe:	f003 021f 	and.w	r2, r3, #31
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009506:	2102      	movs	r1, #2
 8009508:	fa01 f202 	lsl.w	r2, r1, r2
 800950c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	2b00      	cmp	r3, #0
 800951c:	d038      	beq.n	8009590 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009526:	e033      	b.n	8009590 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952c:	f003 031f 	and.w	r3, r3, #31
 8009530:	2208      	movs	r2, #8
 8009532:	409a      	lsls	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4013      	ands	r3, r2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d02a      	beq.n	8009592 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f003 0308 	and.w	r3, r3, #8
 8009542:	2b00      	cmp	r3, #0
 8009544:	d025      	beq.n	8009592 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 020e 	bic.w	r2, r2, #14
 8009554:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955a:	f003 021f 	and.w	r2, r3, #31
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	2101      	movs	r1, #1
 8009564:	fa01 f202 	lsl.w	r2, r1, r2
 8009568:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009590:	bf00      	nop
 8009592:	bf00      	nop
}
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80095a8:	b2db      	uxtb	r3, r3
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
	...

080095b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	461a      	mov	r2, r3
 80095c6:	4b16      	ldr	r3, [pc, #88]	; (8009620 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d802      	bhi.n	80095d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80095cc:	4b15      	ldr	r3, [pc, #84]	; (8009624 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	e001      	b.n	80095d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80095d2:	4b15      	ldr	r3, [pc, #84]	; (8009628 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80095d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	3b08      	subs	r3, #8
 80095e2:	4a12      	ldr	r2, [pc, #72]	; (800962c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80095e4:	fba2 2303 	umull	r2, r3, r2, r3
 80095e8:	091b      	lsrs	r3, r3, #4
 80095ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f0:	089b      	lsrs	r3, r3, #2
 80095f2:	009a      	lsls	r2, r3, #2
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	4413      	add	r3, r2
 80095f8:	461a      	mov	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a0b      	ldr	r2, [pc, #44]	; (8009630 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009602:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f003 031f 	and.w	r3, r3, #31
 800960a:	2201      	movs	r2, #1
 800960c:	409a      	lsls	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009612:	bf00      	nop
 8009614:	371c      	adds	r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	40020407 	.word	0x40020407
 8009624:	40020800 	.word	0x40020800
 8009628:	40020820 	.word	0x40020820
 800962c:	cccccccd 	.word	0xcccccccd
 8009630:	40020880 	.word	0x40020880

08009634 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	461a      	mov	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a08      	ldr	r2, [pc, #32]	; (8009678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009656:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3b01      	subs	r3, #1
 800965c:	f003 031f 	and.w	r3, r3, #31
 8009660:	2201      	movs	r2, #1
 8009662:	409a      	lsls	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009668:	bf00      	nop
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	1000823f 	.word	0x1000823f
 8009678:	40020940 	.word	0x40020940

0800967c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e147      	b.n	800991e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d106      	bne.n	80096a8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7f8 f8d8 	bl	8001858 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	699a      	ldr	r2, [r3, #24]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0210 	bic.w	r2, r2, #16
 80096b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096b8:	f7ff fc1a 	bl	8008ef0 <HAL_GetTick>
 80096bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80096be:	e012      	b.n	80096e6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80096c0:	f7ff fc16 	bl	8008ef0 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b0a      	cmp	r3, #10
 80096cc:	d90b      	bls.n	80096e6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d2:	f043 0201 	orr.w	r2, r3, #1
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2203      	movs	r2, #3
 80096de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e11b      	b.n	800991e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	f003 0308 	and.w	r3, r3, #8
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d0e5      	beq.n	80096c0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 0201 	orr.w	r2, r2, #1
 8009702:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009704:	f7ff fbf4 	bl	8008ef0 <HAL_GetTick>
 8009708:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800970a:	e012      	b.n	8009732 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800970c:	f7ff fbf0 	bl	8008ef0 <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	2b0a      	cmp	r3, #10
 8009718:	d90b      	bls.n	8009732 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800971e:	f043 0201 	orr.w	r2, r3, #1
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2203      	movs	r2, #3
 800972a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e0f5      	b.n	800991e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0e5      	beq.n	800970c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699a      	ldr	r2, [r3, #24]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0202 	orr.w	r2, r2, #2
 800974e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a74      	ldr	r2, [pc, #464]	; (8009928 <HAL_FDCAN_Init+0x2ac>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d103      	bne.n	8009762 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800975a:	4a74      	ldr	r2, [pc, #464]	; (800992c <HAL_FDCAN_Init+0x2b0>)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	7c1b      	ldrb	r3, [r3, #16]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d108      	bne.n	800977c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	699a      	ldr	r2, [r3, #24]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009778:	619a      	str	r2, [r3, #24]
 800977a:	e007      	b.n	800978c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800978a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	7c5b      	ldrb	r3, [r3, #17]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d108      	bne.n	80097a6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097a2:	619a      	str	r2, [r3, #24]
 80097a4:	e007      	b.n	80097b6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	699a      	ldr	r2, [r3, #24]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7c9b      	ldrb	r3, [r3, #18]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d108      	bne.n	80097d0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097cc:	619a      	str	r2, [r3, #24]
 80097ce:	e007      	b.n	80097e0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097de:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	699a      	ldr	r2, [r3, #24]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8009804:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	691a      	ldr	r2, [r3, #16]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 0210 	bic.w	r2, r2, #16
 8009814:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d108      	bne.n	8009830 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	699a      	ldr	r2, [r3, #24]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f042 0204 	orr.w	r2, r2, #4
 800982c:	619a      	str	r2, [r3, #24]
 800982e:	e02c      	b.n	800988a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d028      	beq.n	800988a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d01c      	beq.n	800987a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	699a      	ldr	r2, [r3, #24]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800984e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691a      	ldr	r2, [r3, #16]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f042 0210 	orr.w	r2, r2, #16
 800985e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	2b03      	cmp	r3, #3
 8009866:	d110      	bne.n	800988a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699a      	ldr	r2, [r3, #24]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f042 0220 	orr.w	r2, r2, #32
 8009876:	619a      	str	r2, [r3, #24]
 8009878:	e007      	b.n	800988a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	699a      	ldr	r2, [r3, #24]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0220 	orr.w	r2, r2, #32
 8009888:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	3b01      	subs	r3, #1
 8009890:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	3b01      	subs	r3, #1
 8009898:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800989a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80098a2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80098b2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80098b4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098be:	d115      	bne.n	80098ec <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	3b01      	subs	r3, #1
 80098cc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80098ce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d4:	3b01      	subs	r3, #1
 80098d6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80098d8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e0:	3b01      	subs	r3, #1
 80098e2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80098e8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80098ea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fa58 	bl	8009db8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	40006400 	.word	0x40006400
 800992c:	40006500 	.word	0x40006500

08009930 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009940:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d002      	beq.n	800994e <HAL_FDCAN_ConfigFilter+0x1e>
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d13d      	bne.n	80099ca <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d119      	bne.n	800998a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8009962:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800996a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8009970:	4313      	orrs	r3, r2
 8009972:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	e01d      	b.n	80099c6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	075a      	lsls	r2, r3, #29
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	4313      	orrs	r3, r2
 8009996:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	079a      	lsls	r2, r3, #30
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	4413      	add	r3, r2
 80099b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	3304      	adds	r3, #4
 80099be:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	e006      	b.n	80099d8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ce:	f043 0202 	orr.w	r2, r3, #2
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
  }
}
 80099d8:	4618      	mov	r0, r3
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d116      	bne.n	8009a2c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a06:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	011a      	lsls	r2, r3, #4
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	431a      	orrs	r2, r3
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	431a      	orrs	r2, r3
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e006      	b.n	8009a3a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a30:	f043 0204 	orr.w	r2, r3, #4
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
  }
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d108      	bne.n	8009a70 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	0219      	lsls	r1, r3, #8
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	e006      	b.n	8009a7e <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a74:	f043 0204 	orr.w	r2, r3, #4
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
  }
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d109      	bne.n	8009ab2 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68da      	ldr	r2, [r3, #12]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009aac:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e006      	b.n	8009ac0 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab6:	f043 0204 	orr.w	r2, r3, #4
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
  }
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d110      	bne.n	8009b02 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	699a      	ldr	r2, [r3, #24]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f022 0201 	bic.w	r2, r2, #1
 8009af6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e006      	b.n	8009b10 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b06:	f043 0204 	orr.w	r2, r3, #4
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
  }
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d12c      	bne.n	8009b8e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d007      	beq.n	8009b54 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e023      	b.n	8009b9c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009b5c:	0c1b      	lsrs	r3, r3, #16
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	68b9      	ldr	r1, [r7, #8]
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 f990 	bl	8009e90 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2101      	movs	r1, #1
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	fa01 f202 	lsl.w	r2, r1, r2
 8009b7c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8009b80:	2201      	movs	r2, #1
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	409a      	lsls	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e006      	b.n	8009b9c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b92:	f043 0208 	orr.w	r2, r3, #8
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
  }
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b08b      	sub	sp, #44	; 0x2c
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009bb8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8009bba:	7efb      	ldrb	r3, [r7, #27]
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	f040 80bc 	bne.w	8009d3a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b40      	cmp	r3, #64	; 0x40
 8009bc6:	d121      	bne.n	8009c0c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd0:	f003 030f 	and.w	r3, r3, #15
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d107      	bne.n	8009be8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e0af      	b.n	8009d48 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf0:	0a1b      	lsrs	r3, r3, #8
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	4413      	add	r3, r2
 8009c04:	00db      	lsls	r3, r3, #3
 8009c06:	440b      	add	r3, r1
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0a:	e020      	b.n	8009c4e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c14:	f003 030f 	and.w	r3, r3, #15
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d107      	bne.n	8009c2c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e08d      	b.n	8009d48 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c34:	0a1b      	lsrs	r3, r3, #8
 8009c36:	f003 0303 	and.w	r3, r3, #3
 8009c3a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	4613      	mov	r3, r2
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	4413      	add	r3, r2
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	440b      	add	r3, r1
 8009c4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d107      	bne.n	8009c72 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	0c9b      	lsrs	r3, r3, #18
 8009c68:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	e005      	b.n	8009c7e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	3304      	adds	r3, #4
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	0e1b      	lsrs	r3, r3, #24
 8009cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	0fda      	lsrs	r2, r3, #31
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8009cec:	2300      	movs	r3, #0
 8009cee:	623b      	str	r3, [r7, #32]
 8009cf0:	e00a      	b.n	8009d08 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	441a      	add	r2, r3
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	440b      	add	r3, r1
 8009cfe:	7812      	ldrb	r2, [r2, #0]
 8009d00:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	3301      	adds	r3, #1
 8009d06:	623b      	str	r3, [r7, #32]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	0c1b      	lsrs	r3, r3, #16
 8009d0e:	4a11      	ldr	r2, [pc, #68]	; (8009d54 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8009d10:	5cd3      	ldrb	r3, [r2, r3]
 8009d12:	461a      	mov	r2, r3
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d3eb      	bcc.n	8009cf2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b40      	cmp	r3, #64	; 0x40
 8009d1e:	d105      	bne.n	8009d2c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8009d2a:	e004      	b.n	8009d36 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69fa      	ldr	r2, [r7, #28]
 8009d32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e006      	b.n	8009d48 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d3e:	f043 0208 	orr.w	r2, r3, #8
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
  }
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	372c      	adds	r7, #44	; 0x2c
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	08016ab0 	.word	0x08016ab0

08009d58 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b40      	cmp	r3, #64	; 0x40
 8009d66:	d107      	bne.n	8009d78 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d70:	f003 030f 	and.w	r3, r3, #15
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	e006      	b.n	8009d86 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d80:	f003 030f 	and.w	r3, r3, #15
 8009d84:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8009d86:	68fb      	ldr	r3, [r7, #12]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009da4:	f003 0307 	and.w	r3, r3, #7
 8009da8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8009daa:	68fb      	ldr	r3, [r7, #12]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009dc0:	4b30      	ldr	r3, [pc, #192]	; (8009e84 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8009dc2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a2f      	ldr	r2, [pc, #188]	; (8009e88 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d103      	bne.n	8009dd6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009dd4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a2c      	ldr	r2, [pc, #176]	; (8009e8c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d103      	bne.n	8009de8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8009de6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009df6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfe:	041a      	lsls	r2, r3, #16
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e1c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e24:	061a      	lsls	r2, r3, #24
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	60fb      	str	r3, [r7, #12]
 8009e5c:	e005      	b.n	8009e6a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3304      	adds	r3, #4
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d3f3      	bcc.n	8009e5e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8009e76:	bf00      	nop
 8009e78:	bf00      	nop
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	4000a400 	.word	0x4000a400
 8009e88:	40006800 	.word	0x40006800
 8009e8c:	40006c00 	.word	0x40006c00

08009e90 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b089      	sub	sp, #36	; 0x24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10a      	bne.n	8009ebc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8009eae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	61fb      	str	r3, [r7, #28]
 8009eba:	e00a      	b.n	8009ed2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009ec4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8009eca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ed0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009edc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009ee2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009ee8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	00db      	lsls	r3, r3, #3
 8009efc:	4413      	add	r3, r2
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	440b      	add	r3, r1
 8009f02:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	e020      	b.n	8009f64 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	3303      	adds	r3, #3
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	4413      	add	r3, r2
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	3302      	adds	r3, #2
 8009f32:	6879      	ldr	r1, [r7, #4]
 8009f34:	440b      	add	r3, r1
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009f3a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	440b      	add	r3, r1
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009f48:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	440a      	add	r2, r1
 8009f50:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009f52:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	3304      	adds	r3, #4
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	0c1b      	lsrs	r3, r3, #16
 8009f6a:	4a06      	ldr	r2, [pc, #24]	; (8009f84 <FDCAN_CopyMessageToRAM+0xf4>)
 8009f6c:	5cd3      	ldrb	r3, [r2, r3]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d3d5      	bcc.n	8009f22 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8009f76:	bf00      	nop
 8009f78:	bf00      	nop
 8009f7a:	3724      	adds	r7, #36	; 0x24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	08016ab0 	.word	0x08016ab0

08009f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b087      	sub	sp, #28
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009f96:	e15a      	b.n	800a24e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 814c 	beq.w	800a248 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f003 0303 	and.w	r3, r3, #3
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d005      	beq.n	8009fc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d130      	bne.n	800a02a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	2203      	movs	r2, #3
 8009fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd8:	43db      	mvns	r3, r3
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4013      	ands	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ffe:	2201      	movs	r2, #1
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	fa02 f303 	lsl.w	r3, r2, r3
 800a006:	43db      	mvns	r3, r3
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	4013      	ands	r3, r2
 800a00c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	091b      	lsrs	r3, r3, #4
 800a014:	f003 0201 	and.w	r2, r3, #1
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	4313      	orrs	r3, r2
 800a022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f003 0303 	and.w	r3, r3, #3
 800a032:	2b03      	cmp	r3, #3
 800a034:	d017      	beq.n	800a066 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	2203      	movs	r2, #3
 800a042:	fa02 f303 	lsl.w	r3, r2, r3
 800a046:	43db      	mvns	r3, r3
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	4013      	ands	r3, r2
 800a04c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	689a      	ldr	r2, [r3, #8]
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	fa02 f303 	lsl.w	r3, r2, r3
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f003 0303 	and.w	r3, r3, #3
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d123      	bne.n	800a0ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	08da      	lsrs	r2, r3, #3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	3208      	adds	r2, #8
 800a07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f003 0307 	and.w	r3, r3, #7
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	220f      	movs	r2, #15
 800a08a:	fa02 f303 	lsl.w	r3, r2, r3
 800a08e:	43db      	mvns	r3, r3
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4013      	ands	r3, r2
 800a094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	691a      	ldr	r2, [r3, #16]
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f003 0307 	and.w	r3, r3, #7
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	08da      	lsrs	r2, r3, #3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3208      	adds	r2, #8
 800a0b4:	6939      	ldr	r1, [r7, #16]
 800a0b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	2203      	movs	r2, #3
 800a0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ca:	43db      	mvns	r3, r3
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f003 0203 	and.w	r2, r3, #3
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 80a6 	beq.w	800a248 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0fc:	4b5b      	ldr	r3, [pc, #364]	; (800a26c <HAL_GPIO_Init+0x2e4>)
 800a0fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a100:	4a5a      	ldr	r2, [pc, #360]	; (800a26c <HAL_GPIO_Init+0x2e4>)
 800a102:	f043 0301 	orr.w	r3, r3, #1
 800a106:	6613      	str	r3, [r2, #96]	; 0x60
 800a108:	4b58      	ldr	r3, [pc, #352]	; (800a26c <HAL_GPIO_Init+0x2e4>)
 800a10a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	60bb      	str	r3, [r7, #8]
 800a112:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a114:	4a56      	ldr	r2, [pc, #344]	; (800a270 <HAL_GPIO_Init+0x2e8>)
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	089b      	lsrs	r3, r3, #2
 800a11a:	3302      	adds	r3, #2
 800a11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f003 0303 	and.w	r3, r3, #3
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	220f      	movs	r2, #15
 800a12c:	fa02 f303 	lsl.w	r3, r2, r3
 800a130:	43db      	mvns	r3, r3
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	4013      	ands	r3, r2
 800a136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a13e:	d01f      	beq.n	800a180 <HAL_GPIO_Init+0x1f8>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a4c      	ldr	r2, [pc, #304]	; (800a274 <HAL_GPIO_Init+0x2ec>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d019      	beq.n	800a17c <HAL_GPIO_Init+0x1f4>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a4b      	ldr	r2, [pc, #300]	; (800a278 <HAL_GPIO_Init+0x2f0>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d013      	beq.n	800a178 <HAL_GPIO_Init+0x1f0>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a4a      	ldr	r2, [pc, #296]	; (800a27c <HAL_GPIO_Init+0x2f4>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d00d      	beq.n	800a174 <HAL_GPIO_Init+0x1ec>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a49      	ldr	r2, [pc, #292]	; (800a280 <HAL_GPIO_Init+0x2f8>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d007      	beq.n	800a170 <HAL_GPIO_Init+0x1e8>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a48      	ldr	r2, [pc, #288]	; (800a284 <HAL_GPIO_Init+0x2fc>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d101      	bne.n	800a16c <HAL_GPIO_Init+0x1e4>
 800a168:	2305      	movs	r3, #5
 800a16a:	e00a      	b.n	800a182 <HAL_GPIO_Init+0x1fa>
 800a16c:	2306      	movs	r3, #6
 800a16e:	e008      	b.n	800a182 <HAL_GPIO_Init+0x1fa>
 800a170:	2304      	movs	r3, #4
 800a172:	e006      	b.n	800a182 <HAL_GPIO_Init+0x1fa>
 800a174:	2303      	movs	r3, #3
 800a176:	e004      	b.n	800a182 <HAL_GPIO_Init+0x1fa>
 800a178:	2302      	movs	r3, #2
 800a17a:	e002      	b.n	800a182 <HAL_GPIO_Init+0x1fa>
 800a17c:	2301      	movs	r3, #1
 800a17e:	e000      	b.n	800a182 <HAL_GPIO_Init+0x1fa>
 800a180:	2300      	movs	r3, #0
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	f002 0203 	and.w	r2, r2, #3
 800a188:	0092      	lsls	r2, r2, #2
 800a18a:	4093      	lsls	r3, r2
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4313      	orrs	r3, r2
 800a190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a192:	4937      	ldr	r1, [pc, #220]	; (800a270 <HAL_GPIO_Init+0x2e8>)
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	089b      	lsrs	r3, r3, #2
 800a198:	3302      	adds	r3, #2
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a1a0:	4b39      	ldr	r3, [pc, #228]	; (800a288 <HAL_GPIO_Init+0x300>)
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	43db      	mvns	r3, r3
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a1c4:	4a30      	ldr	r2, [pc, #192]	; (800a288 <HAL_GPIO_Init+0x300>)
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a1ca:	4b2f      	ldr	r3, [pc, #188]	; (800a288 <HAL_GPIO_Init+0x300>)
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	43db      	mvns	r3, r3
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a1ee:	4a26      	ldr	r2, [pc, #152]	; (800a288 <HAL_GPIO_Init+0x300>)
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a1f4:	4b24      	ldr	r3, [pc, #144]	; (800a288 <HAL_GPIO_Init+0x300>)
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	43db      	mvns	r3, r3
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	4013      	ands	r3, r2
 800a202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4313      	orrs	r3, r2
 800a216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a218:	4a1b      	ldr	r2, [pc, #108]	; (800a288 <HAL_GPIO_Init+0x300>)
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a21e:	4b1a      	ldr	r3, [pc, #104]	; (800a288 <HAL_GPIO_Init+0x300>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	43db      	mvns	r3, r3
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	4013      	ands	r3, r2
 800a22c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a242:	4a11      	ldr	r2, [pc, #68]	; (800a288 <HAL_GPIO_Init+0x300>)
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	3301      	adds	r3, #1
 800a24c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	fa22 f303 	lsr.w	r3, r2, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f47f ae9d 	bne.w	8009f98 <HAL_GPIO_Init+0x10>
  }
}
 800a25e:	bf00      	nop
 800a260:	bf00      	nop
 800a262:	371c      	adds	r7, #28
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	40021000 	.word	0x40021000
 800a270:	40010000 	.word	0x40010000
 800a274:	48000400 	.word	0x48000400
 800a278:	48000800 	.word	0x48000800
 800a27c:	48000c00 	.word	0x48000c00
 800a280:	48001000 	.word	0x48001000
 800a284:	48001400 	.word	0x48001400
 800a288:	40010400 	.word	0x40010400

0800a28c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	807b      	strh	r3, [r7, #2]
 800a298:	4613      	mov	r3, r2
 800a29a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a29c:	787b      	ldrb	r3, [r7, #1]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a2a2:	887a      	ldrh	r2, [r7, #2]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a2a8:	e002      	b.n	800a2b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a2aa:	887a      	ldrh	r2, [r7, #2]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a2ce:	887a      	ldrh	r2, [r7, #2]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	041a      	lsls	r2, r3, #16
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	43d9      	mvns	r1, r3
 800a2da:	887b      	ldrh	r3, [r7, #2]
 800a2dc:	400b      	ands	r3, r1
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	619a      	str	r2, [r3, #24]
}
 800a2e4:	bf00      	nop
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e08d      	b.n	800a41e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d106      	bne.n	800a31c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7f7 fbe0 	bl	8001adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2224      	movs	r2, #36	; 0x24
 800a320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f022 0201 	bic.w	r2, r2, #1
 800a332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a340:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a350:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d107      	bne.n	800a36a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a366:	609a      	str	r2, [r3, #8]
 800a368:	e006      	b.n	800a378 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	689a      	ldr	r2, [r3, #8]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a376:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d108      	bne.n	800a392 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a38e:	605a      	str	r2, [r3, #4]
 800a390:	e007      	b.n	800a3a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a3b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691a      	ldr	r2, [r3, #16]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	69d9      	ldr	r1, [r3, #28]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a1a      	ldr	r2, [r3, #32]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0201 	orr.w	r2, r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2220      	movs	r2, #32
 800a40a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af02      	add	r7, sp, #8
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	4608      	mov	r0, r1
 800a432:	4611      	mov	r1, r2
 800a434:	461a      	mov	r2, r3
 800a436:	4603      	mov	r3, r0
 800a438:	817b      	strh	r3, [r7, #10]
 800a43a:	460b      	mov	r3, r1
 800a43c:	813b      	strh	r3, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	f040 80fd 	bne.w	800a64a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d002      	beq.n	800a45c <HAL_I2C_Mem_Read+0x34>
 800a456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d105      	bne.n	800a468 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a462:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e0f1      	b.n	800a64c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d101      	bne.n	800a476 <HAL_I2C_Mem_Read+0x4e>
 800a472:	2302      	movs	r3, #2
 800a474:	e0ea      	b.n	800a64c <HAL_I2C_Mem_Read+0x224>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a47e:	f7fe fd37 	bl	8008ef0 <HAL_GetTick>
 800a482:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	2319      	movs	r3, #25
 800a48a:	2201      	movs	r2, #1
 800a48c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f000 fee4 	bl	800b25e <I2C_WaitOnFlagUntilTimeout>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e0d5      	b.n	800a64c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2222      	movs	r2, #34	; 0x22
 800a4a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2240      	movs	r2, #64	; 0x40
 800a4ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a3a      	ldr	r2, [r7, #32]
 800a4ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a4c8:	88f8      	ldrh	r0, [r7, #6]
 800a4ca:	893a      	ldrh	r2, [r7, #8]
 800a4cc:	8979      	ldrh	r1, [r7, #10]
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 fa7b 	bl	800a9d4 <I2C_RequestMemoryRead>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e0ad      	b.n	800a64c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	2bff      	cmp	r3, #255	; 0xff
 800a4f8:	d90e      	bls.n	800a518 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	22ff      	movs	r2, #255	; 0xff
 800a4fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a504:	b2da      	uxtb	r2, r3
 800a506:	8979      	ldrh	r1, [r7, #10]
 800a508:	4b52      	ldr	r3, [pc, #328]	; (800a654 <HAL_I2C_Mem_Read+0x22c>)
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f001 f867 	bl	800b5e4 <I2C_TransferConfig>
 800a516:	e00f      	b.n	800a538 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a526:	b2da      	uxtb	r2, r3
 800a528:	8979      	ldrh	r1, [r7, #10]
 800a52a:	4b4a      	ldr	r3, [pc, #296]	; (800a654 <HAL_I2C_Mem_Read+0x22c>)
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f001 f856 	bl	800b5e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	2200      	movs	r2, #0
 800a540:	2104      	movs	r1, #4
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 fe8b 	bl	800b25e <I2C_WaitOnFlagUntilTimeout>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e07c      	b.n	800a64c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	b2d2      	uxtb	r2, r2
 800a55e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a56e:	3b01      	subs	r3, #1
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	3b01      	subs	r3, #1
 800a57e:	b29a      	uxth	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a588:	b29b      	uxth	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d034      	beq.n	800a5f8 <HAL_I2C_Mem_Read+0x1d0>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	d130      	bne.n	800a5f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	2200      	movs	r2, #0
 800a59e:	2180      	movs	r1, #128	; 0x80
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 fe5c 	bl	800b25e <I2C_WaitOnFlagUntilTimeout>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e04d      	b.n	800a64c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	2bff      	cmp	r3, #255	; 0xff
 800a5b8:	d90e      	bls.n	800a5d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	22ff      	movs	r2, #255	; 0xff
 800a5be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	8979      	ldrh	r1, [r7, #10]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f001 f807 	bl	800b5e4 <I2C_TransferConfig>
 800a5d6:	e00f      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	8979      	ldrh	r1, [r7, #10]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 fff6 	bl	800b5e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d19a      	bne.n	800a538 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 fec9 	bl	800b39e <I2C_WaitOnSTOPFlagUntilTimeout>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e01a      	b.n	800a64c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2220      	movs	r2, #32
 800a61c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6859      	ldr	r1, [r3, #4]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	4b0b      	ldr	r3, [pc, #44]	; (800a658 <HAL_I2C_Mem_Read+0x230>)
 800a62a:	400b      	ands	r3, r1
 800a62c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2220      	movs	r2, #32
 800a632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	e000      	b.n	800a64c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a64a:	2302      	movs	r3, #2
  }
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	80002400 	.word	0x80002400
 800a658:	fe00e800 	.word	0xfe00e800

0800a65c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d005      	beq.n	800a688 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	68f9      	ldr	r1, [r7, #12]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	4798      	blx	r3
  }
}
 800a688:	bf00      	nop
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00f      	beq.n	800a6d2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c0:	f043 0201 	orr.w	r2, r3, #1
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00f      	beq.n	800a6fc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00a      	beq.n	800a6fc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ea:	f043 0208 	orr.w	r2, r3, #8
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00f      	beq.n	800a726 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00a      	beq.n	800a726 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a714:	f043 0202 	orr.w	r2, r3, #2
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a724:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f003 030b 	and.w	r3, r3, #11
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800a736:	68f9      	ldr	r1, [r7, #12]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fc37 	bl	800afac <I2C_ITError>
  }
}
 800a73e:	bf00      	nop
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a74e:	bf00      	nop
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a762:	bf00      	nop
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a76e:	b480      	push	{r7}
 800a770:	b083      	sub	sp, #12
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	460b      	mov	r3, r1
 800a778:	70fb      	strb	r3, [r7, #3]
 800a77a:	4613      	mov	r3, r2
 800a77c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a77e:	bf00      	nop
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a792:	bf00      	nop
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a7a6:	bf00      	nop
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a7ba:	bf00      	nop
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7d4:	b2db      	uxtb	r3, r3
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b086      	sub	sp, #24
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	60f8      	str	r0, [r7, #12]
 800a7ea:	60b9      	str	r1, [r7, #8]
 800a7ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <I2C_Slave_ISR_IT+0x24>
 800a802:	2302      	movs	r3, #2
 800a804:	e0e2      	b.n	800a9cc <I2C_Slave_ISR_IT+0x1ea>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f003 0320 	and.w	r3, r3, #32
 800a814:	2b00      	cmp	r3, #0
 800a816:	d009      	beq.n	800a82c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d004      	beq.n	800a82c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a822:	6939      	ldr	r1, [r7, #16]
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 fa09 	bl	800ac3c <I2C_ITSlaveCplt>
 800a82a:	e0ca      	b.n	800a9c2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f003 0310 	and.w	r3, r3, #16
 800a832:	2b00      	cmp	r3, #0
 800a834:	d04b      	beq.n	800a8ce <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d046      	beq.n	800a8ce <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a844:	b29b      	uxth	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d128      	bne.n	800a89c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b28      	cmp	r3, #40	; 0x28
 800a854:	d108      	bne.n	800a868 <I2C_Slave_ISR_IT+0x86>
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a85c:	d104      	bne.n	800a868 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a85e:	6939      	ldr	r1, [r7, #16]
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 fb4f 	bl	800af04 <I2C_ITListenCplt>
 800a866:	e031      	b.n	800a8cc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b29      	cmp	r3, #41	; 0x29
 800a872:	d10e      	bne.n	800a892 <I2C_Slave_ISR_IT+0xb0>
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a87a:	d00a      	beq.n	800a892 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2210      	movs	r2, #16
 800a882:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 fca8 	bl	800b1da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 f97a 	bl	800ab84 <I2C_ITSlaveSeqCplt>
 800a890:	e01c      	b.n	800a8cc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2210      	movs	r2, #16
 800a898:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a89a:	e08f      	b.n	800a9bc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2210      	movs	r2, #16
 800a8a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a8:	f043 0204 	orr.w	r2, r3, #4
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <I2C_Slave_ISR_IT+0xdc>
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8bc:	d17e      	bne.n	800a9bc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 fb71 	bl	800afac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a8ca:	e077      	b.n	800a9bc <I2C_Slave_ISR_IT+0x1da>
 800a8cc:	e076      	b.n	800a9bc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f003 0304 	and.w	r3, r3, #4
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d02f      	beq.n	800a938 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d02a      	beq.n	800a938 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d018      	beq.n	800a91e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	b2d2      	uxtb	r2, r2
 800a8f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a908:	3b01      	subs	r3, #1
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a914:	b29b      	uxth	r3, r3
 800a916:	3b01      	subs	r3, #1
 800a918:	b29a      	uxth	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a922:	b29b      	uxth	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d14b      	bne.n	800a9c0 <I2C_Slave_ISR_IT+0x1de>
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a92e:	d047      	beq.n	800a9c0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 f927 	bl	800ab84 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a936:	e043      	b.n	800a9c0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	f003 0308 	and.w	r3, r3, #8
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d009      	beq.n	800a956 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d004      	beq.n	800a956 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a94c:	6939      	ldr	r1, [r7, #16]
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f000 f894 	bl	800aa7c <I2C_ITAddrCplt>
 800a954:	e035      	b.n	800a9c2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f003 0302 	and.w	r3, r3, #2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d030      	beq.n	800a9c2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a966:	2b00      	cmp	r3, #0
 800a968:	d02b      	beq.n	800a9c2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a96e:	b29b      	uxth	r3, r3
 800a970:	2b00      	cmp	r3, #0
 800a972:	d018      	beq.n	800a9a6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	781a      	ldrb	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a98e:	b29b      	uxth	r3, r3
 800a990:	3b01      	subs	r3, #1
 800a992:	b29a      	uxth	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a99c:	3b01      	subs	r3, #1
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	851a      	strh	r2, [r3, #40]	; 0x28
 800a9a4:	e00d      	b.n	800a9c2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9ac:	d002      	beq.n	800a9b4 <I2C_Slave_ISR_IT+0x1d2>
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d106      	bne.n	800a9c2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 f8e5 	bl	800ab84 <I2C_ITSlaveSeqCplt>
 800a9ba:	e002      	b.n	800a9c2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800a9bc:	bf00      	nop
 800a9be:	e000      	b.n	800a9c2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800a9c0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af02      	add	r7, sp, #8
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	817b      	strh	r3, [r7, #10]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	813b      	strh	r3, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a9ee:	88fb      	ldrh	r3, [r7, #6]
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	8979      	ldrh	r1, [r7, #10]
 800a9f4:	4b20      	ldr	r3, [pc, #128]	; (800aa78 <I2C_RequestMemoryRead+0xa4>)
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 fdf2 	bl	800b5e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa00:	69fa      	ldr	r2, [r7, #28]
 800aa02:	69b9      	ldr	r1, [r7, #24]
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 fc83 	bl	800b310 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e02c      	b.n	800aa6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa14:	88fb      	ldrh	r3, [r7, #6]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d105      	bne.n	800aa26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aa1a:	893b      	ldrh	r3, [r7, #8]
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	629a      	str	r2, [r3, #40]	; 0x28
 800aa24:	e015      	b.n	800aa52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aa26:	893b      	ldrh	r3, [r7, #8]
 800aa28:	0a1b      	lsrs	r3, r3, #8
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa34:	69fa      	ldr	r2, [r7, #28]
 800aa36:	69b9      	ldr	r1, [r7, #24]
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f000 fc69 	bl	800b310 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e012      	b.n	800aa6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aa48:	893b      	ldrh	r3, [r7, #8]
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	2140      	movs	r1, #64	; 0x40
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 fbfe 	bl	800b25e <I2C_WaitOnFlagUntilTimeout>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e000      	b.n	800aa6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	80002000 	.word	0x80002000

0800aa7c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa92:	2b28      	cmp	r3, #40	; 0x28
 800aa94:	d16a      	bne.n	800ab6c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	0c1b      	lsrs	r3, r3, #16
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	0c1b      	lsrs	r3, r3, #16
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800aab4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aac2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800aad0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d138      	bne.n	800ab4c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800aada:	897b      	ldrh	r3, [r7, #10]
 800aadc:	09db      	lsrs	r3, r3, #7
 800aade:	b29a      	uxth	r2, r3
 800aae0:	89bb      	ldrh	r3, [r7, #12]
 800aae2:	4053      	eors	r3, r2
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	f003 0306 	and.w	r3, r3, #6
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d11c      	bne.n	800ab28 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800aaee:	897b      	ldrh	r3, [r7, #10]
 800aaf0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d13b      	bne.n	800ab7c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2208      	movs	r2, #8
 800ab10:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ab1a:	89ba      	ldrh	r2, [r7, #12]
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff fe24 	bl	800a76e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ab26:	e029      	b.n	800ab7c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ab28:	893b      	ldrh	r3, [r7, #8]
 800ab2a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ab2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fd89 	bl	800b648 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ab3e:	89ba      	ldrh	r2, [r7, #12]
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7ff fe12 	bl	800a76e <HAL_I2C_AddrCallback>
}
 800ab4a:	e017      	b.n	800ab7c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ab4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fd79 	bl	800b648 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ab5e:	89ba      	ldrh	r2, [r7, #12]
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff fe02 	bl	800a76e <HAL_I2C_AddrCallback>
}
 800ab6a:	e007      	b.n	800ab7c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2208      	movs	r2, #8
 800ab72:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800ab7c:	bf00      	nop
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d008      	beq.n	800abb8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	e00c      	b.n	800abd2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d007      	beq.n	800abd2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800abd0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b29      	cmp	r3, #41	; 0x29
 800abdc:	d112      	bne.n	800ac04 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2228      	movs	r2, #40	; 0x28
 800abe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2221      	movs	r2, #33	; 0x21
 800abea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800abec:	2101      	movs	r1, #1
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fd2a 	bl	800b648 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7ff fda2 	bl	800a746 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ac02:	e017      	b.n	800ac34 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac0e:	d111      	bne.n	800ac34 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2228      	movs	r2, #40	; 0x28
 800ac14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2222      	movs	r2, #34	; 0x22
 800ac1c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ac1e:	2102      	movs	r1, #2
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fd11 	bl	800b648 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff fd93 	bl	800a75a <HAL_I2C_SlaveRxCpltCallback>
}
 800ac34:	bf00      	nop
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac56:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac5e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2220      	movs	r2, #32
 800ac66:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ac68:	7afb      	ldrb	r3, [r7, #11]
 800ac6a:	2b21      	cmp	r3, #33	; 0x21
 800ac6c:	d002      	beq.n	800ac74 <I2C_ITSlaveCplt+0x38>
 800ac6e:	7afb      	ldrb	r3, [r7, #11]
 800ac70:	2b29      	cmp	r3, #41	; 0x29
 800ac72:	d108      	bne.n	800ac86 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ac74:	f248 0101 	movw	r1, #32769	; 0x8001
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fce5 	bl	800b648 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2221      	movs	r2, #33	; 0x21
 800ac82:	631a      	str	r2, [r3, #48]	; 0x30
 800ac84:	e019      	b.n	800acba <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ac86:	7afb      	ldrb	r3, [r7, #11]
 800ac88:	2b22      	cmp	r3, #34	; 0x22
 800ac8a:	d002      	beq.n	800ac92 <I2C_ITSlaveCplt+0x56>
 800ac8c:	7afb      	ldrb	r3, [r7, #11]
 800ac8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac90:	d108      	bne.n	800aca4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ac92:	f248 0102 	movw	r1, #32770	; 0x8002
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fcd6 	bl	800b648 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2222      	movs	r2, #34	; 0x22
 800aca0:	631a      	str	r2, [r3, #48]	; 0x30
 800aca2:	e00a      	b.n	800acba <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800aca4:	7afb      	ldrb	r3, [r7, #11]
 800aca6:	2b28      	cmp	r3, #40	; 0x28
 800aca8:	d107      	bne.n	800acba <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800acaa:	f248 0103 	movw	r1, #32771	; 0x8003
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fcca 	bl	800b648 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acc8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6859      	ldr	r1, [r3, #4]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	4b89      	ldr	r3, [pc, #548]	; (800aefc <I2C_ITSlaveCplt+0x2c0>)
 800acd6:	400b      	ands	r3, r1
 800acd8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa7d 	bl	800b1da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d013      	beq.n	800ad12 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800acf8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d01f      	beq.n	800ad42 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad10:	e017      	b.n	800ad42 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d012      	beq.n	800ad42 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad2a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d006      	beq.n	800ad42 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d020      	beq.n	800ad8e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f023 0304 	bic.w	r3, r3, #4
 800ad52:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	b2d2      	uxtb	r2, r2
 800ad60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00c      	beq.n	800ad8e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	3b01      	subs	r3, #1
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d005      	beq.n	800ada4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad9c:	f043 0204 	orr.w	r2, r3, #4
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f003 0310 	and.w	r3, r3, #16
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d049      	beq.n	800ae42 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d044      	beq.n	800ae42 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d128      	bne.n	800ae14 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b28      	cmp	r3, #40	; 0x28
 800adcc:	d108      	bne.n	800ade0 <I2C_ITSlaveCplt+0x1a4>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800add4:	d104      	bne.n	800ade0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800add6:	6979      	ldr	r1, [r7, #20]
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f893 	bl	800af04 <I2C_ITListenCplt>
 800adde:	e030      	b.n	800ae42 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b29      	cmp	r3, #41	; 0x29
 800adea:	d10e      	bne.n	800ae0a <I2C_ITSlaveCplt+0x1ce>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800adf2:	d00a      	beq.n	800ae0a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2210      	movs	r2, #16
 800adfa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f9ec 	bl	800b1da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff febe 	bl	800ab84 <I2C_ITSlaveSeqCplt>
 800ae08:	e01b      	b.n	800ae42 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2210      	movs	r2, #16
 800ae10:	61da      	str	r2, [r3, #28]
 800ae12:	e016      	b.n	800ae42 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2210      	movs	r2, #16
 800ae1a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae20:	f043 0204 	orr.w	r2, r3, #4
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <I2C_ITSlaveCplt+0x1fa>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae34:	d105      	bne.n	800ae42 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f8b5 	bl	800afac <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d010      	beq.n	800ae7a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f8a4 	bl	800afac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	2b28      	cmp	r3, #40	; 0x28
 800ae6e:	d141      	bne.n	800aef4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ae70:	6979      	ldr	r1, [r7, #20]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f846 	bl	800af04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ae78:	e03c      	b.n	800aef4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ae82:	d014      	beq.n	800aeae <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff fe7d 	bl	800ab84 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a1c      	ldr	r2, [pc, #112]	; (800af00 <I2C_ITSlaveCplt+0x2c4>)
 800ae8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2220      	movs	r2, #32
 800ae94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7ff fc6f 	bl	800a78a <HAL_I2C_ListenCpltCallback>
}
 800aeac:	e022      	b.n	800aef4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b22      	cmp	r3, #34	; 0x22
 800aeb8:	d10e      	bne.n	800aed8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2220      	movs	r2, #32
 800aebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff fc42 	bl	800a75a <HAL_I2C_SlaveRxCpltCallback>
}
 800aed6:	e00d      	b.n	800aef4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2220      	movs	r2, #32
 800aedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7ff fc29 	bl	800a746 <HAL_I2C_SlaveTxCpltCallback>
}
 800aef4:	bf00      	nop
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	fe00e800 	.word	0xfe00e800
 800af00:	ffff0000 	.word	0xffff0000

0800af04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a25      	ldr	r2, [pc, #148]	; (800afa8 <I2C_ITListenCplt+0xa4>)
 800af12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	f003 0304 	and.w	r3, r3, #4
 800af36:	2b00      	cmp	r3, #0
 800af38:	d022      	beq.n	800af80 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	b2d2      	uxtb	r2, r2
 800af46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af56:	2b00      	cmp	r3, #0
 800af58:	d012      	beq.n	800af80 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af5e:	3b01      	subs	r3, #1
 800af60:	b29a      	uxth	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	3b01      	subs	r3, #1
 800af6e:	b29a      	uxth	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af78:	f043 0204 	orr.w	r2, r3, #4
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800af80:	f248 0103 	movw	r1, #32771	; 0x8003
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fb5f 	bl	800b648 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2210      	movs	r2, #16
 800af90:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7ff fbf5 	bl	800a78a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	ffff0000 	.word	0xffff0000

0800afac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afbc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a6d      	ldr	r2, [pc, #436]	; (800b180 <I2C_ITError+0x1d4>)
 800afca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	431a      	orrs	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800afde:	7bfb      	ldrb	r3, [r7, #15]
 800afe0:	2b28      	cmp	r3, #40	; 0x28
 800afe2:	d005      	beq.n	800aff0 <I2C_ITError+0x44>
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	2b29      	cmp	r3, #41	; 0x29
 800afe8:	d002      	beq.n	800aff0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800afea:	7bfb      	ldrb	r3, [r7, #15]
 800afec:	2b2a      	cmp	r3, #42	; 0x2a
 800afee:	d10b      	bne.n	800b008 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800aff0:	2103      	movs	r1, #3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fb28 	bl	800b648 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2228      	movs	r2, #40	; 0x28
 800affc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a60      	ldr	r2, [pc, #384]	; (800b184 <I2C_ITError+0x1d8>)
 800b004:	635a      	str	r2, [r3, #52]	; 0x34
 800b006:	e030      	b.n	800b06a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b008:	f248 0103 	movw	r1, #32771	; 0x8003
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fb1b 	bl	800b648 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f8e1 	bl	800b1da <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b60      	cmp	r3, #96	; 0x60
 800b022:	d01f      	beq.n	800b064 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2220      	movs	r2, #32
 800b028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	f003 0320 	and.w	r3, r3, #32
 800b036:	2b20      	cmp	r3, #32
 800b038:	d114      	bne.n	800b064 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	f003 0310 	and.w	r3, r3, #16
 800b044:	2b10      	cmp	r3, #16
 800b046:	d109      	bne.n	800b05c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2210      	movs	r2, #16
 800b04e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b054:	f043 0204 	orr.w	r2, r3, #4
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2220      	movs	r2, #32
 800b062:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b074:	2b00      	cmp	r3, #0
 800b076:	d039      	beq.n	800b0ec <I2C_ITError+0x140>
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2b11      	cmp	r3, #17
 800b07c:	d002      	beq.n	800b084 <I2C_ITError+0xd8>
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2b21      	cmp	r3, #33	; 0x21
 800b082:	d133      	bne.n	800b0ec <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b08e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b092:	d107      	bne.n	800b0a4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b0a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fe fa76 	bl	800959a <HAL_DMA_GetState>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d017      	beq.n	800b0e4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	4a33      	ldr	r2, [pc, #204]	; (800b188 <I2C_ITError+0x1dc>)
 800b0ba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe f950 	bl	800936e <HAL_DMA_Abort_IT>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d04d      	beq.n	800b170 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b0de:	4610      	mov	r0, r2
 800b0e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b0e2:	e045      	b.n	800b170 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f851 	bl	800b18c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b0ea:	e041      	b.n	800b170 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d039      	beq.n	800b168 <I2C_ITError+0x1bc>
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	2b12      	cmp	r3, #18
 800b0f8:	d002      	beq.n	800b100 <I2C_ITError+0x154>
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	2b22      	cmp	r3, #34	; 0x22
 800b0fe:	d133      	bne.n	800b168 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b10a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b10e:	d107      	bne.n	800b120 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b11e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b124:	4618      	mov	r0, r3
 800b126:	f7fe fa38 	bl	800959a <HAL_DMA_GetState>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d017      	beq.n	800b160 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b134:	4a14      	ldr	r2, [pc, #80]	; (800b188 <I2C_ITError+0x1dc>)
 800b136:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b144:	4618      	mov	r0, r3
 800b146:	f7fe f912 	bl	800936e <HAL_DMA_Abort_IT>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d011      	beq.n	800b174 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b15a:	4610      	mov	r0, r2
 800b15c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b15e:	e009      	b.n	800b174 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f813 	bl	800b18c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b166:	e005      	b.n	800b174 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f80f 	bl	800b18c <I2C_TreatErrorCallback>
  }
}
 800b16e:	e002      	b.n	800b176 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b170:	bf00      	nop
 800b172:	e000      	b.n	800b176 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b174:	bf00      	nop
}
 800b176:	bf00      	nop
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	ffff0000 	.word	0xffff0000
 800b184:	0800a7e3 	.word	0x0800a7e3
 800b188:	0800b223 	.word	0x0800b223

0800b18c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b60      	cmp	r3, #96	; 0x60
 800b19e:	d10e      	bne.n	800b1be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff fafb 	bl	800a7b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b1bc:	e009      	b.n	800b1d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff fae6 	bl	800a79e <HAL_I2C_ErrorCallback>
}
 800b1d2:	bf00      	nop
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b083      	sub	sp, #12
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d103      	bne.n	800b1f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b01      	cmp	r3, #1
 800b204:	d007      	beq.n	800b216 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	699a      	ldr	r2, [r3, #24]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f042 0201 	orr.w	r2, r2, #1
 800b214:	619a      	str	r2, [r3, #24]
  }
}
 800b216:	bf00      	nop
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23c:	2200      	movs	r2, #0
 800b23e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b244:	2b00      	cmp	r3, #0
 800b246:	d003      	beq.n	800b250 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24c:	2200      	movs	r2, #0
 800b24e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff ff9b 	bl	800b18c <I2C_TreatErrorCallback>
}
 800b256:	bf00      	nop
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b084      	sub	sp, #16
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	603b      	str	r3, [r7, #0]
 800b26a:	4613      	mov	r3, r2
 800b26c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b26e:	e03b      	b.n	800b2e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 f8d5 	bl	800b424 <I2C_IsErrorOccurred>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	e041      	b.n	800b308 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28a:	d02d      	beq.n	800b2e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b28c:	f7fd fe30 	bl	8008ef0 <HAL_GetTick>
 800b290:	4602      	mov	r2, r0
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d302      	bcc.n	800b2a2 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d122      	bne.n	800b2e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	699a      	ldr	r2, [r3, #24]
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	bf0c      	ite	eq
 800b2b2:	2301      	moveq	r3, #1
 800b2b4:	2300      	movne	r3, #0
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d113      	bne.n	800b2e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c4:	f043 0220 	orr.w	r2, r3, #32
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e00f      	b.n	800b308 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	699a      	ldr	r2, [r3, #24]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	bf0c      	ite	eq
 800b2f8:	2301      	moveq	r3, #1
 800b2fa:	2300      	movne	r3, #0
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	461a      	mov	r2, r3
 800b300:	79fb      	ldrb	r3, [r7, #7]
 800b302:	429a      	cmp	r2, r3
 800b304:	d0b4      	beq.n	800b270 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b31c:	e033      	b.n	800b386 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	68b9      	ldr	r1, [r7, #8]
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f000 f87e 	bl	800b424 <I2C_IsErrorOccurred>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d001      	beq.n	800b332 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e031      	b.n	800b396 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b338:	d025      	beq.n	800b386 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b33a:	f7fd fdd9 	bl	8008ef0 <HAL_GetTick>
 800b33e:	4602      	mov	r2, r0
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	429a      	cmp	r2, r3
 800b348:	d302      	bcc.n	800b350 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d11a      	bne.n	800b386 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d013      	beq.n	800b386 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b362:	f043 0220 	orr.w	r2, r3, #32
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2220      	movs	r2, #32
 800b36e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e007      	b.n	800b396 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	f003 0302 	and.w	r3, r3, #2
 800b390:	2b02      	cmp	r3, #2
 800b392:	d1c4      	bne.n	800b31e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b084      	sub	sp, #16
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	60b9      	str	r1, [r7, #8]
 800b3a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b3aa:	e02f      	b.n	800b40c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	68b9      	ldr	r1, [r7, #8]
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 f837 	bl	800b424 <I2C_IsErrorOccurred>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e02d      	b.n	800b41c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3c0:	f7fd fd96 	bl	8008ef0 <HAL_GetTick>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d302      	bcc.n	800b3d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d11a      	bne.n	800b40c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	f003 0320 	and.w	r3, r3, #32
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	d013      	beq.n	800b40c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3e8:	f043 0220 	orr.w	r2, r3, #32
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2220      	movs	r2, #32
 800b3f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e007      	b.n	800b41c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	f003 0320 	and.w	r3, r3, #32
 800b416:	2b20      	cmp	r3, #32
 800b418:	d1c8      	bne.n	800b3ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08a      	sub	sp, #40	; 0x28
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	f003 0310 	and.w	r3, r3, #16
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d068      	beq.n	800b522 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2210      	movs	r2, #16
 800b456:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b458:	e049      	b.n	800b4ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b460:	d045      	beq.n	800b4ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b462:	f7fd fd45 	bl	8008ef0 <HAL_GetTick>
 800b466:	4602      	mov	r2, r0
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d302      	bcc.n	800b478 <I2C_IsErrorOccurred+0x54>
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d13a      	bne.n	800b4ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b482:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b48a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b49a:	d121      	bne.n	800b4e0 <I2C_IsErrorOccurred+0xbc>
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4a2:	d01d      	beq.n	800b4e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b4a4:	7cfb      	ldrb	r3, [r7, #19]
 800b4a6:	2b20      	cmp	r3, #32
 800b4a8:	d01a      	beq.n	800b4e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b4ba:	f7fd fd19 	bl	8008ef0 <HAL_GetTick>
 800b4be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4c0:	e00e      	b.n	800b4e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b4c2:	f7fd fd15 	bl	8008ef0 <HAL_GetTick>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	2b19      	cmp	r3, #25
 800b4ce:	d907      	bls.n	800b4e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b4d0:	6a3b      	ldr	r3, [r7, #32]
 800b4d2:	f043 0320 	orr.w	r3, r3, #32
 800b4d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b4de:	e006      	b.n	800b4ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	f003 0320 	and.w	r3, r3, #32
 800b4ea:	2b20      	cmp	r3, #32
 800b4ec:	d1e9      	bne.n	800b4c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	f003 0320 	and.w	r3, r3, #32
 800b4f8:	2b20      	cmp	r3, #32
 800b4fa:	d003      	beq.n	800b504 <I2C_IsErrorOccurred+0xe0>
 800b4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0aa      	beq.n	800b45a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d103      	bne.n	800b514 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2220      	movs	r2, #32
 800b512:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b514:	6a3b      	ldr	r3, [r7, #32]
 800b516:	f043 0304 	orr.w	r3, r3, #4
 800b51a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00b      	beq.n	800b54c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	f043 0301 	orr.w	r3, r3, #1
 800b53a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b544:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00b      	beq.n	800b56e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	f043 0308 	orr.w	r3, r3, #8
 800b55c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b566:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b578:	6a3b      	ldr	r3, [r7, #32]
 800b57a:	f043 0302 	orr.w	r3, r3, #2
 800b57e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01c      	beq.n	800b5d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f7ff fe1e 	bl	800b1da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6859      	ldr	r1, [r3, #4]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <I2C_IsErrorOccurred+0x1bc>)
 800b5aa:	400b      	ands	r3, r1
 800b5ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	431a      	orrs	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b5d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3728      	adds	r7, #40	; 0x28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	fe00e800 	.word	0xfe00e800

0800b5e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	607b      	str	r3, [r7, #4]
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	817b      	strh	r3, [r7, #10]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b5f6:	897b      	ldrh	r3, [r7, #10]
 800b5f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b5fc:	7a7b      	ldrb	r3, [r7, #9]
 800b5fe:	041b      	lsls	r3, r3, #16
 800b600:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b604:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b612:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	0d5b      	lsrs	r3, r3, #21
 800b61e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b622:	4b08      	ldr	r3, [pc, #32]	; (800b644 <I2C_TransferConfig+0x60>)
 800b624:	430b      	orrs	r3, r1
 800b626:	43db      	mvns	r3, r3
 800b628:	ea02 0103 	and.w	r1, r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	430a      	orrs	r2, r1
 800b634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b636:	bf00      	nop
 800b638:	371c      	adds	r7, #28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	03ff63ff 	.word	0x03ff63ff

0800b648 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b654:	2300      	movs	r3, #0
 800b656:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b658:	887b      	ldrh	r3, [r7, #2]
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00f      	beq.n	800b682 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b668:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b670:	b2db      	uxtb	r3, r3
 800b672:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b676:	2b28      	cmp	r3, #40	; 0x28
 800b678:	d003      	beq.n	800b682 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b680:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b682:	887b      	ldrh	r3, [r7, #2]
 800b684:	f003 0302 	and.w	r3, r3, #2
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00f      	beq.n	800b6ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b692:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b6a0:	2b28      	cmp	r3, #40	; 0x28
 800b6a2:	d003      	beq.n	800b6ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b6aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b6ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	da03      	bge.n	800b6bc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b6ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b6bc:	887b      	ldrh	r3, [r7, #2]
 800b6be:	2b10      	cmp	r3, #16
 800b6c0:	d103      	bne.n	800b6ca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b6c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b6ca:	887b      	ldrh	r3, [r7, #2]
 800b6cc:	2b20      	cmp	r3, #32
 800b6ce:	d103      	bne.n	800b6d8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f043 0320 	orr.w	r3, r3, #32
 800b6d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b6d8:	887b      	ldrh	r3, [r7, #2]
 800b6da:	2b40      	cmp	r3, #64	; 0x40
 800b6dc:	d103      	bne.n	800b6e6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6819      	ldr	r1, [r3, #0]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	43da      	mvns	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	400a      	ands	r2, r1
 800b6f6:	601a      	str	r2, [r3, #0]
}
 800b6f8:	bf00      	nop
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b20      	cmp	r3, #32
 800b718:	d138      	bne.n	800b78c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b720:	2b01      	cmp	r3, #1
 800b722:	d101      	bne.n	800b728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b724:	2302      	movs	r3, #2
 800b726:	e032      	b.n	800b78e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2224      	movs	r2, #36	; 0x24
 800b734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f022 0201 	bic.w	r2, r2, #1
 800b746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6819      	ldr	r1, [r3, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	430a      	orrs	r2, r1
 800b766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f042 0201 	orr.w	r2, r2, #1
 800b776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2220      	movs	r2, #32
 800b77c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	e000      	b.n	800b78e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b78c:	2302      	movs	r3, #2
  }
}
 800b78e:	4618      	mov	r0, r3
 800b790:	370c      	adds	r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b085      	sub	sp, #20
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b20      	cmp	r3, #32
 800b7ae:	d139      	bne.n	800b824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d101      	bne.n	800b7be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	e033      	b.n	800b826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2224      	movs	r2, #36	; 0x24
 800b7ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f022 0201 	bic.w	r2, r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b7ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	021b      	lsls	r3, r3, #8
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f042 0201 	orr.w	r2, r2, #1
 800b80e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2220      	movs	r2, #32
 800b814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	e000      	b.n	800b826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b824:	2302      	movs	r3, #2
  }
}
 800b826:	4618      	mov	r0, r3
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
	...

0800b834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d141      	bne.n	800b8c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b842:	4b4b      	ldr	r3, [pc, #300]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b84e:	d131      	bne.n	800b8b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b850:	4b47      	ldr	r3, [pc, #284]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b856:	4a46      	ldr	r2, [pc, #280]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b85c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b860:	4b43      	ldr	r3, [pc, #268]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b868:	4a41      	ldr	r2, [pc, #260]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b86a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b86e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b870:	4b40      	ldr	r3, [pc, #256]	; (800b974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2232      	movs	r2, #50	; 0x32
 800b876:	fb02 f303 	mul.w	r3, r2, r3
 800b87a:	4a3f      	ldr	r2, [pc, #252]	; (800b978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b87c:	fba2 2303 	umull	r2, r3, r2, r3
 800b880:	0c9b      	lsrs	r3, r3, #18
 800b882:	3301      	adds	r3, #1
 800b884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b886:	e002      	b.n	800b88e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3b01      	subs	r3, #1
 800b88c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b88e:	4b38      	ldr	r3, [pc, #224]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b89a:	d102      	bne.n	800b8a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1f2      	bne.n	800b888 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b8a2:	4b33      	ldr	r3, [pc, #204]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8ae:	d158      	bne.n	800b962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	e057      	b.n	800b964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b8b4:	4b2e      	ldr	r3, [pc, #184]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8ba:	4a2d      	ldr	r2, [pc, #180]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b8c4:	e04d      	b.n	800b962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8cc:	d141      	bne.n	800b952 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b8ce:	4b28      	ldr	r3, [pc, #160]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b8d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8da:	d131      	bne.n	800b940 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b8dc:	4b24      	ldr	r3, [pc, #144]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8e2:	4a23      	ldr	r2, [pc, #140]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b8ec:	4b20      	ldr	r3, [pc, #128]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b8f4:	4a1e      	ldr	r2, [pc, #120]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b8fc:	4b1d      	ldr	r3, [pc, #116]	; (800b974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2232      	movs	r2, #50	; 0x32
 800b902:	fb02 f303 	mul.w	r3, r2, r3
 800b906:	4a1c      	ldr	r2, [pc, #112]	; (800b978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b908:	fba2 2303 	umull	r2, r3, r2, r3
 800b90c:	0c9b      	lsrs	r3, r3, #18
 800b90e:	3301      	adds	r3, #1
 800b910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b912:	e002      	b.n	800b91a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	3b01      	subs	r3, #1
 800b918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b91a:	4b15      	ldr	r3, [pc, #84]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b926:	d102      	bne.n	800b92e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1f2      	bne.n	800b914 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b92e:	4b10      	ldr	r3, [pc, #64]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b93a:	d112      	bne.n	800b962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e011      	b.n	800b964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b940:	4b0b      	ldr	r3, [pc, #44]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b946:	4a0a      	ldr	r2, [pc, #40]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b94c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b950:	e007      	b.n	800b962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b952:	4b07      	ldr	r3, [pc, #28]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b95a:	4a05      	ldr	r2, [pc, #20]	; (800b970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b95c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b960:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	40007000 	.word	0x40007000
 800b974:	2000003c 	.word	0x2000003c
 800b978:	431bde83 	.word	0x431bde83

0800b97c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b980:	4b05      	ldr	r3, [pc, #20]	; (800b998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	4a04      	ldr	r2, [pc, #16]	; (800b998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b98a:	6093      	str	r3, [r2, #8]
}
 800b98c:	bf00      	nop
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	40007000 	.word	0x40007000

0800b99c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e2fe      	b.n	800bfac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d075      	beq.n	800baa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b9ba:	4b97      	ldr	r3, [pc, #604]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	f003 030c 	and.w	r3, r3, #12
 800b9c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b9c4:	4b94      	ldr	r3, [pc, #592]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	f003 0303 	and.w	r3, r3, #3
 800b9cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	2b0c      	cmp	r3, #12
 800b9d2:	d102      	bne.n	800b9da <HAL_RCC_OscConfig+0x3e>
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d002      	beq.n	800b9e0 <HAL_RCC_OscConfig+0x44>
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	2b08      	cmp	r3, #8
 800b9de:	d10b      	bne.n	800b9f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9e0:	4b8d      	ldr	r3, [pc, #564]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d05b      	beq.n	800baa4 <HAL_RCC_OscConfig+0x108>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d157      	bne.n	800baa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e2d9      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba00:	d106      	bne.n	800ba10 <HAL_RCC_OscConfig+0x74>
 800ba02:	4b85      	ldr	r3, [pc, #532]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a84      	ldr	r2, [pc, #528]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba0c:	6013      	str	r3, [r2, #0]
 800ba0e:	e01d      	b.n	800ba4c <HAL_RCC_OscConfig+0xb0>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba18:	d10c      	bne.n	800ba34 <HAL_RCC_OscConfig+0x98>
 800ba1a:	4b7f      	ldr	r3, [pc, #508]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a7e      	ldr	r2, [pc, #504]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba24:	6013      	str	r3, [r2, #0]
 800ba26:	4b7c      	ldr	r3, [pc, #496]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a7b      	ldr	r2, [pc, #492]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba30:	6013      	str	r3, [r2, #0]
 800ba32:	e00b      	b.n	800ba4c <HAL_RCC_OscConfig+0xb0>
 800ba34:	4b78      	ldr	r3, [pc, #480]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a77      	ldr	r2, [pc, #476]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	4b75      	ldr	r3, [pc, #468]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a74      	ldr	r2, [pc, #464]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d013      	beq.n	800ba7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba54:	f7fd fa4c 	bl	8008ef0 <HAL_GetTick>
 800ba58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba5a:	e008      	b.n	800ba6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba5c:	f7fd fa48 	bl	8008ef0 <HAL_GetTick>
 800ba60:	4602      	mov	r2, r0
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	2b64      	cmp	r3, #100	; 0x64
 800ba68:	d901      	bls.n	800ba6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	e29e      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba6e:	4b6a      	ldr	r3, [pc, #424]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d0f0      	beq.n	800ba5c <HAL_RCC_OscConfig+0xc0>
 800ba7a:	e014      	b.n	800baa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba7c:	f7fd fa38 	bl	8008ef0 <HAL_GetTick>
 800ba80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba82:	e008      	b.n	800ba96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba84:	f7fd fa34 	bl	8008ef0 <HAL_GetTick>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	2b64      	cmp	r3, #100	; 0x64
 800ba90:	d901      	bls.n	800ba96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e28a      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba96:	4b60      	ldr	r3, [pc, #384]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1f0      	bne.n	800ba84 <HAL_RCC_OscConfig+0xe8>
 800baa2:	e000      	b.n	800baa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800baa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0302 	and.w	r3, r3, #2
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d075      	beq.n	800bb9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bab2:	4b59      	ldr	r3, [pc, #356]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f003 030c 	and.w	r3, r3, #12
 800baba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800babc:	4b56      	ldr	r3, [pc, #344]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	f003 0303 	and.w	r3, r3, #3
 800bac4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	2b0c      	cmp	r3, #12
 800baca:	d102      	bne.n	800bad2 <HAL_RCC_OscConfig+0x136>
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d002      	beq.n	800bad8 <HAL_RCC_OscConfig+0x13c>
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	d11f      	bne.n	800bb18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bad8:	4b4f      	ldr	r3, [pc, #316]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d005      	beq.n	800baf0 <HAL_RCC_OscConfig+0x154>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e25d      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baf0:	4b49      	ldr	r3, [pc, #292]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	061b      	lsls	r3, r3, #24
 800bafe:	4946      	ldr	r1, [pc, #280]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bb00:	4313      	orrs	r3, r2
 800bb02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bb04:	4b45      	ldr	r3, [pc, #276]	; (800bc1c <HAL_RCC_OscConfig+0x280>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fd f9a5 	bl	8008e58 <HAL_InitTick>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d043      	beq.n	800bb9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e249      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d023      	beq.n	800bb68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb20:	4b3d      	ldr	r3, [pc, #244]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a3c      	ldr	r2, [pc, #240]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bb26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb2c:	f7fd f9e0 	bl	8008ef0 <HAL_GetTick>
 800bb30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb32:	e008      	b.n	800bb46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb34:	f7fd f9dc 	bl	8008ef0 <HAL_GetTick>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d901      	bls.n	800bb46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bb42:	2303      	movs	r3, #3
 800bb44:	e232      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb46:	4b34      	ldr	r3, [pc, #208]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d0f0      	beq.n	800bb34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb52:	4b31      	ldr	r3, [pc, #196]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	061b      	lsls	r3, r3, #24
 800bb60:	492d      	ldr	r1, [pc, #180]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	604b      	str	r3, [r1, #4]
 800bb66:	e01a      	b.n	800bb9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb68:	4b2b      	ldr	r3, [pc, #172]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a2a      	ldr	r2, [pc, #168]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bb6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb74:	f7fd f9bc 	bl	8008ef0 <HAL_GetTick>
 800bb78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb7a:	e008      	b.n	800bb8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb7c:	f7fd f9b8 	bl	8008ef0 <HAL_GetTick>
 800bb80:	4602      	mov	r2, r0
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d901      	bls.n	800bb8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e20e      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb8e:	4b22      	ldr	r3, [pc, #136]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1f0      	bne.n	800bb7c <HAL_RCC_OscConfig+0x1e0>
 800bb9a:	e000      	b.n	800bb9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d041      	beq.n	800bc2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d01c      	beq.n	800bbec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bbb2:	4b19      	ldr	r3, [pc, #100]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bbb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbb8:	4a17      	ldr	r2, [pc, #92]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bbba:	f043 0301 	orr.w	r3, r3, #1
 800bbbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbc2:	f7fd f995 	bl	8008ef0 <HAL_GetTick>
 800bbc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bbc8:	e008      	b.n	800bbdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbca:	f7fd f991 	bl	8008ef0 <HAL_GetTick>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d901      	bls.n	800bbdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e1e7      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bbdc:	4b0e      	ldr	r3, [pc, #56]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bbde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbe2:	f003 0302 	and.w	r3, r3, #2
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0ef      	beq.n	800bbca <HAL_RCC_OscConfig+0x22e>
 800bbea:	e020      	b.n	800bc2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bbec:	4b0a      	ldr	r3, [pc, #40]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bbee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbf2:	4a09      	ldr	r2, [pc, #36]	; (800bc18 <HAL_RCC_OscConfig+0x27c>)
 800bbf4:	f023 0301 	bic.w	r3, r3, #1
 800bbf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbfc:	f7fd f978 	bl	8008ef0 <HAL_GetTick>
 800bc00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bc02:	e00d      	b.n	800bc20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc04:	f7fd f974 	bl	8008ef0 <HAL_GetTick>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d906      	bls.n	800bc20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800bc12:	2303      	movs	r3, #3
 800bc14:	e1ca      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
 800bc16:	bf00      	nop
 800bc18:	40021000 	.word	0x40021000
 800bc1c:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bc20:	4b8c      	ldr	r3, [pc, #560]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bc22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc26:	f003 0302 	and.w	r3, r3, #2
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1ea      	bne.n	800bc04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 80a6 	beq.w	800bd88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bc40:	4b84      	ldr	r3, [pc, #528]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bc42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <HAL_RCC_OscConfig+0x2b4>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e000      	b.n	800bc52 <HAL_RCC_OscConfig+0x2b6>
 800bc50:	2300      	movs	r3, #0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00d      	beq.n	800bc72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc56:	4b7f      	ldr	r3, [pc, #508]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bc58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc5a:	4a7e      	ldr	r2, [pc, #504]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bc5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc60:	6593      	str	r3, [r2, #88]	; 0x58
 800bc62:	4b7c      	ldr	r3, [pc, #496]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc72:	4b79      	ldr	r3, [pc, #484]	; (800be58 <HAL_RCC_OscConfig+0x4bc>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d118      	bne.n	800bcb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc7e:	4b76      	ldr	r3, [pc, #472]	; (800be58 <HAL_RCC_OscConfig+0x4bc>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a75      	ldr	r2, [pc, #468]	; (800be58 <HAL_RCC_OscConfig+0x4bc>)
 800bc84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc8a:	f7fd f931 	bl	8008ef0 <HAL_GetTick>
 800bc8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc90:	e008      	b.n	800bca4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc92:	f7fd f92d 	bl	8008ef0 <HAL_GetTick>
 800bc96:	4602      	mov	r2, r0
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d901      	bls.n	800bca4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800bca0:	2303      	movs	r3, #3
 800bca2:	e183      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bca4:	4b6c      	ldr	r3, [pc, #432]	; (800be58 <HAL_RCC_OscConfig+0x4bc>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d0f0      	beq.n	800bc92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d108      	bne.n	800bcca <HAL_RCC_OscConfig+0x32e>
 800bcb8:	4b66      	ldr	r3, [pc, #408]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bcba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcbe:	4a65      	ldr	r2, [pc, #404]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bcc0:	f043 0301 	orr.w	r3, r3, #1
 800bcc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bcc8:	e024      	b.n	800bd14 <HAL_RCC_OscConfig+0x378>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	2b05      	cmp	r3, #5
 800bcd0:	d110      	bne.n	800bcf4 <HAL_RCC_OscConfig+0x358>
 800bcd2:	4b60      	ldr	r3, [pc, #384]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bcd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd8:	4a5e      	ldr	r2, [pc, #376]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bcda:	f043 0304 	orr.w	r3, r3, #4
 800bcde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bce2:	4b5c      	ldr	r3, [pc, #368]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce8:	4a5a      	ldr	r2, [pc, #360]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bcea:	f043 0301 	orr.w	r3, r3, #1
 800bcee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bcf2:	e00f      	b.n	800bd14 <HAL_RCC_OscConfig+0x378>
 800bcf4:	4b57      	ldr	r3, [pc, #348]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bcf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcfa:	4a56      	ldr	r2, [pc, #344]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bcfc:	f023 0301 	bic.w	r3, r3, #1
 800bd00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bd04:	4b53      	ldr	r3, [pc, #332]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bd06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd0a:	4a52      	ldr	r2, [pc, #328]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bd0c:	f023 0304 	bic.w	r3, r3, #4
 800bd10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d016      	beq.n	800bd4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd1c:	f7fd f8e8 	bl	8008ef0 <HAL_GetTick>
 800bd20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd22:	e00a      	b.n	800bd3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd24:	f7fd f8e4 	bl	8008ef0 <HAL_GetTick>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d901      	bls.n	800bd3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e138      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd3a:	4b46      	ldr	r3, [pc, #280]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd40:	f003 0302 	and.w	r3, r3, #2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d0ed      	beq.n	800bd24 <HAL_RCC_OscConfig+0x388>
 800bd48:	e015      	b.n	800bd76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd4a:	f7fd f8d1 	bl	8008ef0 <HAL_GetTick>
 800bd4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd50:	e00a      	b.n	800bd68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd52:	f7fd f8cd 	bl	8008ef0 <HAL_GetTick>
 800bd56:	4602      	mov	r2, r0
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d901      	bls.n	800bd68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e121      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd68:	4b3a      	ldr	r3, [pc, #232]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1ed      	bne.n	800bd52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bd76:	7ffb      	ldrb	r3, [r7, #31]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d105      	bne.n	800bd88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd7c:	4b35      	ldr	r3, [pc, #212]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bd7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd80:	4a34      	ldr	r2, [pc, #208]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bd82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 0320 	and.w	r3, r3, #32
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d03c      	beq.n	800be0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d01c      	beq.n	800bdd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bd9c:	4b2d      	ldr	r3, [pc, #180]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bd9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bda2:	4a2c      	ldr	r2, [pc, #176]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bda4:	f043 0301 	orr.w	r3, r3, #1
 800bda8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdac:	f7fd f8a0 	bl	8008ef0 <HAL_GetTick>
 800bdb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bdb2:	e008      	b.n	800bdc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdb4:	f7fd f89c 	bl	8008ef0 <HAL_GetTick>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d901      	bls.n	800bdc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e0f2      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bdc6:	4b23      	ldr	r3, [pc, #140]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bdc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bdcc:	f003 0302 	and.w	r3, r3, #2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d0ef      	beq.n	800bdb4 <HAL_RCC_OscConfig+0x418>
 800bdd4:	e01b      	b.n	800be0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bdd6:	4b1f      	ldr	r3, [pc, #124]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bdd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bddc:	4a1d      	ldr	r2, [pc, #116]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800bdde:	f023 0301 	bic.w	r3, r3, #1
 800bde2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bde6:	f7fd f883 	bl	8008ef0 <HAL_GetTick>
 800bdea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bdec:	e008      	b.n	800be00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdee:	f7fd f87f 	bl	8008ef0 <HAL_GetTick>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d901      	bls.n	800be00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e0d5      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800be00:	4b14      	ldr	r3, [pc, #80]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800be02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be06:	f003 0302 	and.w	r3, r3, #2
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1ef      	bne.n	800bdee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	69db      	ldr	r3, [r3, #28]
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 80c9 	beq.w	800bfaa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800be18:	4b0e      	ldr	r3, [pc, #56]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f003 030c 	and.w	r3, r3, #12
 800be20:	2b0c      	cmp	r3, #12
 800be22:	f000 8083 	beq.w	800bf2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d15e      	bne.n	800beec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a08      	ldr	r2, [pc, #32]	; (800be54 <HAL_RCC_OscConfig+0x4b8>)
 800be34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be3a:	f7fd f859 	bl	8008ef0 <HAL_GetTick>
 800be3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be40:	e00c      	b.n	800be5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be42:	f7fd f855 	bl	8008ef0 <HAL_GetTick>
 800be46:	4602      	mov	r2, r0
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d905      	bls.n	800be5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e0ab      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
 800be54:	40021000 	.word	0x40021000
 800be58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be5c:	4b55      	ldr	r3, [pc, #340]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1ec      	bne.n	800be42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be68:	4b52      	ldr	r3, [pc, #328]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	4b52      	ldr	r3, [pc, #328]	; (800bfb8 <HAL_RCC_OscConfig+0x61c>)
 800be6e:	4013      	ands	r3, r2
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	6a11      	ldr	r1, [r2, #32]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800be78:	3a01      	subs	r2, #1
 800be7a:	0112      	lsls	r2, r2, #4
 800be7c:	4311      	orrs	r1, r2
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800be82:	0212      	lsls	r2, r2, #8
 800be84:	4311      	orrs	r1, r2
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800be8a:	0852      	lsrs	r2, r2, #1
 800be8c:	3a01      	subs	r2, #1
 800be8e:	0552      	lsls	r2, r2, #21
 800be90:	4311      	orrs	r1, r2
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be96:	0852      	lsrs	r2, r2, #1
 800be98:	3a01      	subs	r2, #1
 800be9a:	0652      	lsls	r2, r2, #25
 800be9c:	4311      	orrs	r1, r2
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bea2:	06d2      	lsls	r2, r2, #27
 800bea4:	430a      	orrs	r2, r1
 800bea6:	4943      	ldr	r1, [pc, #268]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800bea8:	4313      	orrs	r3, r2
 800beaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800beac:	4b41      	ldr	r3, [pc, #260]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a40      	ldr	r2, [pc, #256]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800beb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800beb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800beb8:	4b3e      	ldr	r3, [pc, #248]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	4a3d      	ldr	r2, [pc, #244]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800bebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bec2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bec4:	f7fd f814 	bl	8008ef0 <HAL_GetTick>
 800bec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800beca:	e008      	b.n	800bede <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800becc:	f7fd f810 	bl	8008ef0 <HAL_GetTick>
 800bed0:	4602      	mov	r2, r0
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d901      	bls.n	800bede <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800beda:	2303      	movs	r3, #3
 800bedc:	e066      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bede:	4b35      	ldr	r3, [pc, #212]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0f0      	beq.n	800becc <HAL_RCC_OscConfig+0x530>
 800beea:	e05e      	b.n	800bfaa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800beec:	4b31      	ldr	r3, [pc, #196]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a30      	ldr	r2, [pc, #192]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800bef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bef8:	f7fc fffa 	bl	8008ef0 <HAL_GetTick>
 800befc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800befe:	e008      	b.n	800bf12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf00:	f7fc fff6 	bl	8008ef0 <HAL_GetTick>
 800bf04:	4602      	mov	r2, r0
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d901      	bls.n	800bf12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e04c      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bf12:	4b28      	ldr	r3, [pc, #160]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1f0      	bne.n	800bf00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bf1e:	4b25      	ldr	r3, [pc, #148]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800bf20:	68da      	ldr	r2, [r3, #12]
 800bf22:	4924      	ldr	r1, [pc, #144]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800bf24:	4b25      	ldr	r3, [pc, #148]	; (800bfbc <HAL_RCC_OscConfig+0x620>)
 800bf26:	4013      	ands	r3, r2
 800bf28:	60cb      	str	r3, [r1, #12]
 800bf2a:	e03e      	b.n	800bfaa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d101      	bne.n	800bf38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e039      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800bf38:	4b1e      	ldr	r3, [pc, #120]	; (800bfb4 <HAL_RCC_OscConfig+0x618>)
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f003 0203 	and.w	r2, r3, #3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a1b      	ldr	r3, [r3, #32]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d12c      	bne.n	800bfa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf56:	3b01      	subs	r3, #1
 800bf58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d123      	bne.n	800bfa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d11b      	bne.n	800bfa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d113      	bne.n	800bfa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf88:	085b      	lsrs	r3, r3, #1
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d109      	bne.n	800bfa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9c:	085b      	lsrs	r3, r3, #1
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d001      	beq.n	800bfaa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e000      	b.n	800bfac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3720      	adds	r7, #32
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	40021000 	.word	0x40021000
 800bfb8:	019f800c 	.word	0x019f800c
 800bfbc:	feeefffc 	.word	0xfeeefffc

0800bfc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d101      	bne.n	800bfd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e11e      	b.n	800c216 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bfd8:	4b91      	ldr	r3, [pc, #580]	; (800c220 <HAL_RCC_ClockConfig+0x260>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f003 030f 	and.w	r3, r3, #15
 800bfe0:	683a      	ldr	r2, [r7, #0]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d910      	bls.n	800c008 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfe6:	4b8e      	ldr	r3, [pc, #568]	; (800c220 <HAL_RCC_ClockConfig+0x260>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f023 020f 	bic.w	r2, r3, #15
 800bfee:	498c      	ldr	r1, [pc, #560]	; (800c220 <HAL_RCC_ClockConfig+0x260>)
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bff6:	4b8a      	ldr	r3, [pc, #552]	; (800c220 <HAL_RCC_ClockConfig+0x260>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 030f 	and.w	r3, r3, #15
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d001      	beq.n	800c008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e106      	b.n	800c216 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d073      	beq.n	800c0fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d129      	bne.n	800c070 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c01c:	4b81      	ldr	r3, [pc, #516]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	e0f4      	b.n	800c216 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c02c:	f000 f99e 	bl	800c36c <RCC_GetSysClockFreqFromPLLSource>
 800c030:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	4a7c      	ldr	r2, [pc, #496]	; (800c228 <HAL_RCC_ClockConfig+0x268>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d93f      	bls.n	800c0ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c03a:	4b7a      	ldr	r3, [pc, #488]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d009      	beq.n	800c05a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d033      	beq.n	800c0ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c056:	2b00      	cmp	r3, #0
 800c058:	d12f      	bne.n	800c0ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c05a:	4b72      	ldr	r3, [pc, #456]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c062:	4a70      	ldr	r2, [pc, #448]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c068:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c06a:	2380      	movs	r3, #128	; 0x80
 800c06c:	617b      	str	r3, [r7, #20]
 800c06e:	e024      	b.n	800c0ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	2b02      	cmp	r3, #2
 800c076:	d107      	bne.n	800c088 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c078:	4b6a      	ldr	r3, [pc, #424]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c080:	2b00      	cmp	r3, #0
 800c082:	d109      	bne.n	800c098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	e0c6      	b.n	800c216 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c088:	4b66      	ldr	r3, [pc, #408]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	e0be      	b.n	800c216 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c098:	f000 f8ce 	bl	800c238 <HAL_RCC_GetSysClockFreq>
 800c09c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	4a61      	ldr	r2, [pc, #388]	; (800c228 <HAL_RCC_ClockConfig+0x268>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d909      	bls.n	800c0ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c0a6:	4b5f      	ldr	r3, [pc, #380]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c0ae:	4a5d      	ldr	r2, [pc, #372]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c0b6:	2380      	movs	r3, #128	; 0x80
 800c0b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c0ba:	4b5a      	ldr	r3, [pc, #360]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	f023 0203 	bic.w	r2, r3, #3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	4957      	ldr	r1, [pc, #348]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0cc:	f7fc ff10 	bl	8008ef0 <HAL_GetTick>
 800c0d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0d2:	e00a      	b.n	800c0ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c0d4:	f7fc ff0c 	bl	8008ef0 <HAL_GetTick>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d901      	bls.n	800c0ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	e095      	b.n	800c216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0ea:	4b4e      	ldr	r3, [pc, #312]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	f003 020c 	and.w	r2, r3, #12
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d1eb      	bne.n	800c0d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 0302 	and.w	r3, r3, #2
 800c104:	2b00      	cmp	r3, #0
 800c106:	d023      	beq.n	800c150 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0304 	and.w	r3, r3, #4
 800c110:	2b00      	cmp	r3, #0
 800c112:	d005      	beq.n	800c120 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c114:	4b43      	ldr	r3, [pc, #268]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	4a42      	ldr	r2, [pc, #264]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c11a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c11e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 0308 	and.w	r3, r3, #8
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d007      	beq.n	800c13c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800c12c:	4b3d      	ldr	r3, [pc, #244]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c134:	4a3b      	ldr	r2, [pc, #236]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c13a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c13c:	4b39      	ldr	r3, [pc, #228]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	4936      	ldr	r1, [pc, #216]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c14a:	4313      	orrs	r3, r2
 800c14c:	608b      	str	r3, [r1, #8]
 800c14e:	e008      	b.n	800c162 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	2b80      	cmp	r3, #128	; 0x80
 800c154:	d105      	bne.n	800c162 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800c156:	4b33      	ldr	r3, [pc, #204]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	4a32      	ldr	r2, [pc, #200]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c15c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c160:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c162:	4b2f      	ldr	r3, [pc, #188]	; (800c220 <HAL_RCC_ClockConfig+0x260>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f003 030f 	and.w	r3, r3, #15
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d21d      	bcs.n	800c1ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c170:	4b2b      	ldr	r3, [pc, #172]	; (800c220 <HAL_RCC_ClockConfig+0x260>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f023 020f 	bic.w	r2, r3, #15
 800c178:	4929      	ldr	r1, [pc, #164]	; (800c220 <HAL_RCC_ClockConfig+0x260>)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c180:	f7fc feb6 	bl	8008ef0 <HAL_GetTick>
 800c184:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c186:	e00a      	b.n	800c19e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c188:	f7fc feb2 	bl	8008ef0 <HAL_GetTick>
 800c18c:	4602      	mov	r2, r0
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	f241 3288 	movw	r2, #5000	; 0x1388
 800c196:	4293      	cmp	r3, r2
 800c198:	d901      	bls.n	800c19e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800c19a:	2303      	movs	r3, #3
 800c19c:	e03b      	b.n	800c216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c19e:	4b20      	ldr	r3, [pc, #128]	; (800c220 <HAL_RCC_ClockConfig+0x260>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 030f 	and.w	r3, r3, #15
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d1ed      	bne.n	800c188 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0304 	and.w	r3, r3, #4
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d008      	beq.n	800c1ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c1b8:	4b1a      	ldr	r3, [pc, #104]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	4917      	ldr	r1, [pc, #92]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 0308 	and.w	r3, r3, #8
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d009      	beq.n	800c1ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c1d6:	4b13      	ldr	r3, [pc, #76]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	490f      	ldr	r1, [pc, #60]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c1ea:	f000 f825 	bl	800c238 <HAL_RCC_GetSysClockFreq>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	4b0c      	ldr	r3, [pc, #48]	; (800c224 <HAL_RCC_ClockConfig+0x264>)
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	091b      	lsrs	r3, r3, #4
 800c1f6:	f003 030f 	and.w	r3, r3, #15
 800c1fa:	490c      	ldr	r1, [pc, #48]	; (800c22c <HAL_RCC_ClockConfig+0x26c>)
 800c1fc:	5ccb      	ldrb	r3, [r1, r3]
 800c1fe:	f003 031f 	and.w	r3, r3, #31
 800c202:	fa22 f303 	lsr.w	r3, r2, r3
 800c206:	4a0a      	ldr	r2, [pc, #40]	; (800c230 <HAL_RCC_ClockConfig+0x270>)
 800c208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c20a:	4b0a      	ldr	r3, [pc, #40]	; (800c234 <HAL_RCC_ClockConfig+0x274>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fc fe22 	bl	8008e58 <HAL_InitTick>
 800c214:	4603      	mov	r3, r0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3718      	adds	r7, #24
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	40022000 	.word	0x40022000
 800c224:	40021000 	.word	0x40021000
 800c228:	04c4b400 	.word	0x04c4b400
 800c22c:	08016a98 	.word	0x08016a98
 800c230:	2000003c 	.word	0x2000003c
 800c234:	20000040 	.word	0x20000040

0800c238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c23e:	4b2c      	ldr	r3, [pc, #176]	; (800c2f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	f003 030c 	and.w	r3, r3, #12
 800c246:	2b04      	cmp	r3, #4
 800c248:	d102      	bne.n	800c250 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c24a:	4b2a      	ldr	r3, [pc, #168]	; (800c2f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c24c:	613b      	str	r3, [r7, #16]
 800c24e:	e047      	b.n	800c2e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c250:	4b27      	ldr	r3, [pc, #156]	; (800c2f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	f003 030c 	and.w	r3, r3, #12
 800c258:	2b08      	cmp	r3, #8
 800c25a:	d102      	bne.n	800c262 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c25c:	4b26      	ldr	r3, [pc, #152]	; (800c2f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c25e:	613b      	str	r3, [r7, #16]
 800c260:	e03e      	b.n	800c2e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c262:	4b23      	ldr	r3, [pc, #140]	; (800c2f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	f003 030c 	and.w	r3, r3, #12
 800c26a:	2b0c      	cmp	r3, #12
 800c26c:	d136      	bne.n	800c2dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c26e:	4b20      	ldr	r3, [pc, #128]	; (800c2f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	f003 0303 	and.w	r3, r3, #3
 800c276:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c278:	4b1d      	ldr	r3, [pc, #116]	; (800c2f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	091b      	lsrs	r3, r3, #4
 800c27e:	f003 030f 	and.w	r3, r3, #15
 800c282:	3301      	adds	r3, #1
 800c284:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d10c      	bne.n	800c2a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c28c:	4a1a      	ldr	r2, [pc, #104]	; (800c2f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	fbb2 f3f3 	udiv	r3, r2, r3
 800c294:	4a16      	ldr	r2, [pc, #88]	; (800c2f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c296:	68d2      	ldr	r2, [r2, #12]
 800c298:	0a12      	lsrs	r2, r2, #8
 800c29a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c29e:	fb02 f303 	mul.w	r3, r2, r3
 800c2a2:	617b      	str	r3, [r7, #20]
      break;
 800c2a4:	e00c      	b.n	800c2c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c2a6:	4a13      	ldr	r2, [pc, #76]	; (800c2f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ae:	4a10      	ldr	r2, [pc, #64]	; (800c2f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c2b0:	68d2      	ldr	r2, [r2, #12]
 800c2b2:	0a12      	lsrs	r2, r2, #8
 800c2b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c2b8:	fb02 f303 	mul.w	r3, r2, r3
 800c2bc:	617b      	str	r3, [r7, #20]
      break;
 800c2be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c2c0:	4b0b      	ldr	r3, [pc, #44]	; (800c2f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	0e5b      	lsrs	r3, r3, #25
 800c2c6:	f003 0303 	and.w	r3, r3, #3
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	005b      	lsls	r3, r3, #1
 800c2ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2d8:	613b      	str	r3, [r7, #16]
 800c2da:	e001      	b.n	800c2e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c2e0:	693b      	ldr	r3, [r7, #16]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	371c      	adds	r7, #28
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	40021000 	.word	0x40021000
 800c2f4:	00f42400 	.word	0x00f42400
 800c2f8:	007a1200 	.word	0x007a1200

0800c2fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c300:	4b03      	ldr	r3, [pc, #12]	; (800c310 <HAL_RCC_GetHCLKFreq+0x14>)
 800c302:	681b      	ldr	r3, [r3, #0]
}
 800c304:	4618      	mov	r0, r3
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	2000003c 	.word	0x2000003c

0800c314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c318:	f7ff fff0 	bl	800c2fc <HAL_RCC_GetHCLKFreq>
 800c31c:	4602      	mov	r2, r0
 800c31e:	4b06      	ldr	r3, [pc, #24]	; (800c338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	0a1b      	lsrs	r3, r3, #8
 800c324:	f003 0307 	and.w	r3, r3, #7
 800c328:	4904      	ldr	r1, [pc, #16]	; (800c33c <HAL_RCC_GetPCLK1Freq+0x28>)
 800c32a:	5ccb      	ldrb	r3, [r1, r3]
 800c32c:	f003 031f 	and.w	r3, r3, #31
 800c330:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c334:	4618      	mov	r0, r3
 800c336:	bd80      	pop	{r7, pc}
 800c338:	40021000 	.word	0x40021000
 800c33c:	08016aa8 	.word	0x08016aa8

0800c340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c344:	f7ff ffda 	bl	800c2fc <HAL_RCC_GetHCLKFreq>
 800c348:	4602      	mov	r2, r0
 800c34a:	4b06      	ldr	r3, [pc, #24]	; (800c364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	0adb      	lsrs	r3, r3, #11
 800c350:	f003 0307 	and.w	r3, r3, #7
 800c354:	4904      	ldr	r1, [pc, #16]	; (800c368 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c356:	5ccb      	ldrb	r3, [r1, r3]
 800c358:	f003 031f 	and.w	r3, r3, #31
 800c35c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c360:	4618      	mov	r0, r3
 800c362:	bd80      	pop	{r7, pc}
 800c364:	40021000 	.word	0x40021000
 800c368:	08016aa8 	.word	0x08016aa8

0800c36c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c372:	4b1e      	ldr	r3, [pc, #120]	; (800c3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	f003 0303 	and.w	r3, r3, #3
 800c37a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c37c:	4b1b      	ldr	r3, [pc, #108]	; (800c3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	091b      	lsrs	r3, r3, #4
 800c382:	f003 030f 	and.w	r3, r3, #15
 800c386:	3301      	adds	r3, #1
 800c388:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d10c      	bne.n	800c3aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c390:	4a17      	ldr	r2, [pc, #92]	; (800c3f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	fbb2 f3f3 	udiv	r3, r2, r3
 800c398:	4a14      	ldr	r2, [pc, #80]	; (800c3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c39a:	68d2      	ldr	r2, [r2, #12]
 800c39c:	0a12      	lsrs	r2, r2, #8
 800c39e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c3a2:	fb02 f303 	mul.w	r3, r2, r3
 800c3a6:	617b      	str	r3, [r7, #20]
    break;
 800c3a8:	e00c      	b.n	800c3c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c3aa:	4a12      	ldr	r2, [pc, #72]	; (800c3f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b2:	4a0e      	ldr	r2, [pc, #56]	; (800c3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c3b4:	68d2      	ldr	r2, [r2, #12]
 800c3b6:	0a12      	lsrs	r2, r2, #8
 800c3b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c3bc:	fb02 f303 	mul.w	r3, r2, r3
 800c3c0:	617b      	str	r3, [r7, #20]
    break;
 800c3c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c3c4:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	0e5b      	lsrs	r3, r3, #25
 800c3ca:	f003 0303 	and.w	r3, r3, #3
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c3de:	687b      	ldr	r3, [r7, #4]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	371c      	adds	r7, #28
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	40021000 	.word	0x40021000
 800c3f0:	007a1200 	.word	0x007a1200
 800c3f4:	00f42400 	.word	0x00f42400

0800c3f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c400:	2300      	movs	r3, #0
 800c402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c404:	2300      	movs	r3, #0
 800c406:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 8098 	beq.w	800c546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c416:	2300      	movs	r3, #0
 800c418:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c41a:	4b43      	ldr	r3, [pc, #268]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c41e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10d      	bne.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c426:	4b40      	ldr	r3, [pc, #256]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c42a:	4a3f      	ldr	r2, [pc, #252]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c42c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c430:	6593      	str	r3, [r2, #88]	; 0x58
 800c432:	4b3d      	ldr	r3, [pc, #244]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c43a:	60bb      	str	r3, [r7, #8]
 800c43c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c43e:	2301      	movs	r3, #1
 800c440:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c442:	4b3a      	ldr	r3, [pc, #232]	; (800c52c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a39      	ldr	r2, [pc, #228]	; (800c52c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c44c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c44e:	f7fc fd4f 	bl	8008ef0 <HAL_GetTick>
 800c452:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c454:	e009      	b.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c456:	f7fc fd4b 	bl	8008ef0 <HAL_GetTick>
 800c45a:	4602      	mov	r2, r0
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	2b02      	cmp	r3, #2
 800c462:	d902      	bls.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c464:	2303      	movs	r3, #3
 800c466:	74fb      	strb	r3, [r7, #19]
        break;
 800c468:	e005      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c46a:	4b30      	ldr	r3, [pc, #192]	; (800c52c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0ef      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c476:	7cfb      	ldrb	r3, [r7, #19]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d159      	bne.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c47c:	4b2a      	ldr	r3, [pc, #168]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c486:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d01e      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	429a      	cmp	r2, r3
 800c496:	d019      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c498:	4b23      	ldr	r3, [pc, #140]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c49e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c4a4:	4b20      	ldr	r3, [pc, #128]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4aa:	4a1f      	ldr	r2, [pc, #124]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c4ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c4b4:	4b1c      	ldr	r3, [pc, #112]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ba:	4a1b      	ldr	r2, [pc, #108]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c4bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c4c4:	4a18      	ldr	r2, [pc, #96]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d016      	beq.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4d6:	f7fc fd0b 	bl	8008ef0 <HAL_GetTick>
 800c4da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c4dc:	e00b      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c4de:	f7fc fd07 	bl	8008ef0 <HAL_GetTick>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d902      	bls.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	74fb      	strb	r3, [r7, #19]
            break;
 800c4f4:	e006      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c4f6:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4fc:	f003 0302 	and.w	r3, r3, #2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d0ec      	beq.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c504:	7cfb      	ldrb	r3, [r7, #19]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10b      	bne.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c50a:	4b07      	ldr	r3, [pc, #28]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c518:	4903      	ldr	r1, [pc, #12]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c520:	e008      	b.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c522:	7cfb      	ldrb	r3, [r7, #19]
 800c524:	74bb      	strb	r3, [r7, #18]
 800c526:	e005      	b.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c528:	40021000 	.word	0x40021000
 800c52c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c530:	7cfb      	ldrb	r3, [r7, #19]
 800c532:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c534:	7c7b      	ldrb	r3, [r7, #17]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d105      	bne.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c53a:	4ba7      	ldr	r3, [pc, #668]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53e:	4aa6      	ldr	r2, [pc, #664]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c544:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00a      	beq.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c552:	4ba1      	ldr	r3, [pc, #644]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c558:	f023 0203 	bic.w	r2, r3, #3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	499d      	ldr	r1, [pc, #628]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c562:	4313      	orrs	r3, r2
 800c564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0302 	and.w	r3, r3, #2
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00a      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c574:	4b98      	ldr	r3, [pc, #608]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c57a:	f023 020c 	bic.w	r2, r3, #12
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	4995      	ldr	r1, [pc, #596]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c584:	4313      	orrs	r3, r2
 800c586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 0304 	and.w	r3, r3, #4
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00a      	beq.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c596:	4b90      	ldr	r3, [pc, #576]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c59c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	498c      	ldr	r1, [pc, #560]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f003 0308 	and.w	r3, r3, #8
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00a      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c5b8:	4b87      	ldr	r3, [pc, #540]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	4984      	ldr	r1, [pc, #528]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 0310 	and.w	r3, r3, #16
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00a      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c5da:	4b7f      	ldr	r3, [pc, #508]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	497b      	ldr	r1, [pc, #492]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0320 	and.w	r3, r3, #32
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00a      	beq.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c5fc:	4b76      	ldr	r3, [pc, #472]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c602:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	4973      	ldr	r1, [pc, #460]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c60c:	4313      	orrs	r3, r2
 800c60e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c61e:	4b6e      	ldr	r3, [pc, #440]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	69db      	ldr	r3, [r3, #28]
 800c62c:	496a      	ldr	r1, [pc, #424]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c62e:	4313      	orrs	r3, r2
 800c630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00a      	beq.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c640:	4b65      	ldr	r3, [pc, #404]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	4962      	ldr	r1, [pc, #392]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c650:	4313      	orrs	r3, r2
 800c652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00a      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c662:	4b5d      	ldr	r3, [pc, #372]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c670:	4959      	ldr	r1, [pc, #356]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c672:	4313      	orrs	r3, r2
 800c674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00a      	beq.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c684:	4b54      	ldr	r3, [pc, #336]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c68a:	f023 0203 	bic.w	r2, r3, #3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c692:	4951      	ldr	r1, [pc, #324]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c694:	4313      	orrs	r3, r2
 800c696:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00a      	beq.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6a6:	4b4c      	ldr	r3, [pc, #304]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	4948      	ldr	r1, [pc, #288]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d015      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c6c8:	4b43      	ldr	r3, [pc, #268]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d6:	4940      	ldr	r1, [pc, #256]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6e6:	d105      	bne.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c6e8:	4b3b      	ldr	r3, [pc, #236]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	4a3a      	ldr	r2, [pc, #232]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c6ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d015      	beq.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c700:	4b35      	ldr	r3, [pc, #212]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c706:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c70e:	4932      	ldr	r1, [pc, #200]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c710:	4313      	orrs	r3, r2
 800c712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c71a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c71e:	d105      	bne.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c720:	4b2d      	ldr	r3, [pc, #180]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	4a2c      	ldr	r2, [pc, #176]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c72a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c734:	2b00      	cmp	r3, #0
 800c736:	d015      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c738:	4b27      	ldr	r3, [pc, #156]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c73e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c746:	4924      	ldr	r1, [pc, #144]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c748:	4313      	orrs	r3, r2
 800c74a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c752:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c756:	d105      	bne.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c758:	4b1f      	ldr	r3, [pc, #124]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	4a1e      	ldr	r2, [pc, #120]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c75e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c762:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d015      	beq.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c770:	4b19      	ldr	r3, [pc, #100]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c77e:	4916      	ldr	r1, [pc, #88]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c780:	4313      	orrs	r3, r2
 800c782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c78e:	d105      	bne.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c790:	4b11      	ldr	r3, [pc, #68]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	4a10      	ldr	r2, [pc, #64]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c79a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d019      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c7a8:	4b0b      	ldr	r3, [pc, #44]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c7aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b6:	4908      	ldr	r1, [pc, #32]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7c6:	d109      	bne.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c7c8:	4b03      	ldr	r3, [pc, #12]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	4a02      	ldr	r2, [pc, #8]	; (800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c7ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7d2:	60d3      	str	r3, [r2, #12]
 800c7d4:	e002      	b.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c7d6:	bf00      	nop
 800c7d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d015      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c7e8:	4b29      	ldr	r3, [pc, #164]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f6:	4926      	ldr	r1, [pc, #152]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c806:	d105      	bne.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c808:	4b21      	ldr	r3, [pc, #132]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	4a20      	ldr	r2, [pc, #128]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c80e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c812:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d015      	beq.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c820:	4b1b      	ldr	r3, [pc, #108]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c826:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c82e:	4918      	ldr	r1, [pc, #96]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c830:	4313      	orrs	r3, r2
 800c832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c83e:	d105      	bne.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c840:	4b13      	ldr	r3, [pc, #76]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	4a12      	ldr	r2, [pc, #72]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c84a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c854:	2b00      	cmp	r3, #0
 800c856:	d015      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c858:	4b0d      	ldr	r3, [pc, #52]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c85a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c85e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c866:	490a      	ldr	r1, [pc, #40]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c868:	4313      	orrs	r3, r2
 800c86a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c876:	d105      	bne.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c878:	4b05      	ldr	r3, [pc, #20]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	4a04      	ldr	r2, [pc, #16]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c87e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c882:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c884:	7cbb      	ldrb	r3, [r7, #18]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3718      	adds	r7, #24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	40021000 	.word	0x40021000

0800c894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e09d      	b.n	800c9e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d108      	bne.n	800c8c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8b6:	d009      	beq.n	800c8cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	61da      	str	r2, [r3, #28]
 800c8be:	e005      	b.n	800c8cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d106      	bne.n	800c8ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7fb fd60 	bl	80083ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2202      	movs	r2, #2
 800c8f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c902:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c90c:	d902      	bls.n	800c914 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c90e:	2300      	movs	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	e002      	b.n	800c91a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c918:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c922:	d007      	beq.n	800c934 <HAL_SPI_Init+0xa0>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c92c:	d002      	beq.n	800c934 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c944:	431a      	orrs	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	f003 0302 	and.w	r3, r3, #2
 800c94e:	431a      	orrs	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	695b      	ldr	r3, [r3, #20]
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	431a      	orrs	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	699b      	ldr	r3, [r3, #24]
 800c95e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c962:	431a      	orrs	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	69db      	ldr	r3, [r3, #28]
 800c968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c96c:	431a      	orrs	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a1b      	ldr	r3, [r3, #32]
 800c972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c976:	ea42 0103 	orr.w	r1, r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	699b      	ldr	r3, [r3, #24]
 800c98e:	0c1b      	lsrs	r3, r3, #16
 800c990:	f003 0204 	and.w	r2, r3, #4
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c998:	f003 0310 	and.w	r3, r3, #16
 800c99c:	431a      	orrs	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a2:	f003 0308 	and.w	r3, r3, #8
 800c9a6:	431a      	orrs	r2, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c9b0:	ea42 0103 	orr.w	r1, r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69da      	ldr	r2, [r3, #28]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c9d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b088      	sub	sp, #32
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	60f8      	str	r0, [r7, #12]
 800c9f2:	60b9      	str	r1, [r7, #8]
 800c9f4:	603b      	str	r3, [r7, #0]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d101      	bne.n	800ca0c <HAL_SPI_Transmit+0x22>
 800ca08:	2302      	movs	r3, #2
 800ca0a:	e15f      	b.n	800cccc <HAL_SPI_Transmit+0x2e2>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca14:	f7fc fa6c 	bl	8008ef0 <HAL_GetTick>
 800ca18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ca1a:	88fb      	ldrh	r3, [r7, #6]
 800ca1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d002      	beq.n	800ca30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ca2a:	2302      	movs	r3, #2
 800ca2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ca2e:	e148      	b.n	800ccc2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d002      	beq.n	800ca3c <HAL_SPI_Transmit+0x52>
 800ca36:	88fb      	ldrh	r3, [r7, #6]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ca40:	e13f      	b.n	800ccc2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2203      	movs	r2, #3
 800ca46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	88fa      	ldrh	r2, [r7, #6]
 800ca5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	88fa      	ldrh	r2, [r7, #6]
 800ca60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca8c:	d10f      	bne.n	800caae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800caac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab8:	2b40      	cmp	r3, #64	; 0x40
 800caba:	d007      	beq.n	800cacc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800caca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cad4:	d94f      	bls.n	800cb76 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <HAL_SPI_Transmit+0xfa>
 800cade:	8afb      	ldrh	r3, [r7, #22]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d142      	bne.n	800cb6a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae8:	881a      	ldrh	r2, [r3, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf4:	1c9a      	adds	r2, r3, #2
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	3b01      	subs	r3, #1
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cb08:	e02f      	b.n	800cb6a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	f003 0302 	and.w	r3, r3, #2
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d112      	bne.n	800cb3e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1c:	881a      	ldrh	r2, [r3, #0]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb28:	1c9a      	adds	r2, r3, #2
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	3b01      	subs	r3, #1
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cb3c:	e015      	b.n	800cb6a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb3e:	f7fc f9d7 	bl	8008ef0 <HAL_GetTick>
 800cb42:	4602      	mov	r2, r0
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	1ad3      	subs	r3, r2, r3
 800cb48:	683a      	ldr	r2, [r7, #0]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d803      	bhi.n	800cb56 <HAL_SPI_Transmit+0x16c>
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb54:	d102      	bne.n	800cb5c <HAL_SPI_Transmit+0x172>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d106      	bne.n	800cb6a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800cb68:	e0ab      	b.n	800ccc2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1ca      	bne.n	800cb0a <HAL_SPI_Transmit+0x120>
 800cb74:	e080      	b.n	800cc78 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d002      	beq.n	800cb84 <HAL_SPI_Transmit+0x19a>
 800cb7e:	8afb      	ldrh	r3, [r7, #22]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d174      	bne.n	800cc6e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d912      	bls.n	800cbb4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb92:	881a      	ldrh	r2, [r3, #0]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9e:	1c9a      	adds	r2, r3, #2
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	3b02      	subs	r3, #2
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cbb2:	e05c      	b.n	800cc6e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	330c      	adds	r3, #12
 800cbbe:	7812      	ldrb	r2, [r2, #0]
 800cbc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	b29a      	uxth	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800cbda:	e048      	b.n	800cc6e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	f003 0302 	and.w	r3, r3, #2
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d12b      	bne.n	800cc42 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d912      	bls.n	800cc1a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf8:	881a      	ldrh	r2, [r3, #0]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc04:	1c9a      	adds	r2, r3, #2
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	3b02      	subs	r3, #2
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cc18:	e029      	b.n	800cc6e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	330c      	adds	r3, #12
 800cc24:	7812      	ldrb	r2, [r2, #0]
 800cc26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2c:	1c5a      	adds	r2, r3, #1
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cc40:	e015      	b.n	800cc6e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc42:	f7fc f955 	bl	8008ef0 <HAL_GetTick>
 800cc46:	4602      	mov	r2, r0
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	1ad3      	subs	r3, r2, r3
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d803      	bhi.n	800cc5a <HAL_SPI_Transmit+0x270>
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc58:	d102      	bne.n	800cc60 <HAL_SPI_Transmit+0x276>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d106      	bne.n	800cc6e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800cc6c:	e029      	b.n	800ccc2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1b1      	bne.n	800cbdc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cc78:	69ba      	ldr	r2, [r7, #24]
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f000 fa5b 	bl	800d138 <SPI_EndRxTxTransaction>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d002      	beq.n	800cc8e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2220      	movs	r2, #32
 800cc8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10a      	bne.n	800ccac <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc96:	2300      	movs	r3, #0
 800cc98:	613b      	str	r3, [r7, #16]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	613b      	str	r3, [r7, #16]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	613b      	str	r3, [r7, #16]
 800ccaa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	77fb      	strb	r3, [r7, #31]
 800ccb8:	e003      	b.n	800ccc2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ccca:	7ffb      	ldrb	r3, [r7, #31]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3720      	adds	r7, #32
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b088      	sub	sp, #32
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10e      	bne.n	800cd14 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d009      	beq.n	800cd14 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d004      	beq.n	800cd14 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	4798      	blx	r3
    return;
 800cd12:	e0ce      	b.n	800ceb2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	f003 0302 	and.w	r3, r3, #2
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d009      	beq.n	800cd32 <HAL_SPI_IRQHandler+0x5e>
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d004      	beq.n	800cd32 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	4798      	blx	r3
    return;
 800cd30:	e0bf      	b.n	800ceb2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	f003 0320 	and.w	r3, r3, #32
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <HAL_SPI_IRQHandler+0x7e>
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d105      	bne.n	800cd52 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f000 80b0 	beq.w	800ceb2 <HAL_SPI_IRQHandler+0x1de>
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	f003 0320 	and.w	r3, r3, #32
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f000 80aa 	beq.w	800ceb2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d023      	beq.n	800cdb0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d011      	beq.n	800cd98 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd78:	f043 0204 	orr.w	r2, r3, #4
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd80:	2300      	movs	r3, #0
 800cd82:	617b      	str	r3, [r7, #20]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	617b      	str	r3, [r7, #20]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	617b      	str	r3, [r7, #20]
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	e00b      	b.n	800cdb0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd98:	2300      	movs	r3, #0
 800cd9a:	613b      	str	r3, [r7, #16]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	613b      	str	r3, [r7, #16]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	613b      	str	r3, [r7, #16]
 800cdac:	693b      	ldr	r3, [r7, #16]
        return;
 800cdae:	e080      	b.n	800ceb2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	f003 0320 	and.w	r3, r3, #32
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d014      	beq.n	800cde4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdbe:	f043 0201 	orr.w	r2, r3, #1
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60fb      	str	r3, [r7, #12]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	60fb      	str	r3, [r7, #12]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cde4:	69bb      	ldr	r3, [r7, #24]
 800cde6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00c      	beq.n	800ce08 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdf2:	f043 0208 	orr.w	r2, r3, #8
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	60bb      	str	r3, [r7, #8]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	60bb      	str	r3, [r7, #8]
 800ce06:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d04f      	beq.n	800ceb0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	685a      	ldr	r2, [r3, #4]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ce1e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	f003 0302 	and.w	r3, r3, #2
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d104      	bne.n	800ce3c <HAL_SPI_IRQHandler+0x168>
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	f003 0301 	and.w	r3, r3, #1
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d034      	beq.n	800cea6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f022 0203 	bic.w	r2, r2, #3
 800ce4a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d011      	beq.n	800ce78 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce58:	4a17      	ldr	r2, [pc, #92]	; (800ceb8 <HAL_SPI_IRQHandler+0x1e4>)
 800ce5a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fc fa84 	bl	800936e <HAL_DMA_Abort_IT>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d005      	beq.n	800ce78 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d016      	beq.n	800ceae <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce84:	4a0c      	ldr	r2, [pc, #48]	; (800ceb8 <HAL_SPI_IRQHandler+0x1e4>)
 800ce86:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fc fa6e 	bl	800936e <HAL_DMA_Abort_IT>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00a      	beq.n	800ceae <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800cea4:	e003      	b.n	800ceae <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 f808 	bl	800cebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ceac:	e000      	b.n	800ceb0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800ceae:	bf00      	nop
    return;
 800ceb0:	bf00      	nop
  }
}
 800ceb2:	3720      	adds	r7, #32
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	0800ced1 	.word	0x0800ced1

0800cebc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cedc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f7ff ffe5 	bl	800cebc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cef2:	bf00      	nop
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
	...

0800cefc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b088      	sub	sp, #32
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cf0c:	f7fb fff0 	bl	8008ef0 <HAL_GetTick>
 800cf10:	4602      	mov	r2, r0
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	1a9b      	subs	r3, r3, r2
 800cf16:	683a      	ldr	r2, [r7, #0]
 800cf18:	4413      	add	r3, r2
 800cf1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cf1c:	f7fb ffe8 	bl	8008ef0 <HAL_GetTick>
 800cf20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cf22:	4b39      	ldr	r3, [pc, #228]	; (800d008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	015b      	lsls	r3, r3, #5
 800cf28:	0d1b      	lsrs	r3, r3, #20
 800cf2a:	69fa      	ldr	r2, [r7, #28]
 800cf2c:	fb02 f303 	mul.w	r3, r2, r3
 800cf30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cf32:	e054      	b.n	800cfde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf3a:	d050      	beq.n	800cfde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cf3c:	f7fb ffd8 	bl	8008ef0 <HAL_GetTick>
 800cf40:	4602      	mov	r2, r0
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	69fa      	ldr	r2, [r7, #28]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d902      	bls.n	800cf52 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d13d      	bne.n	800cfce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cf60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf6a:	d111      	bne.n	800cf90 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf74:	d004      	beq.n	800cf80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf7e:	d107      	bne.n	800cf90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf98:	d10f      	bne.n	800cfba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cfb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e017      	b.n	800cffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d101      	bne.n	800cfd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	689a      	ldr	r2, [r3, #8]
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	68ba      	ldr	r2, [r7, #8]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	bf0c      	ite	eq
 800cfee:	2301      	moveq	r3, #1
 800cff0:	2300      	movne	r3, #0
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	461a      	mov	r2, r3
 800cff6:	79fb      	ldrb	r3, [r7, #7]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d19b      	bne.n	800cf34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3720      	adds	r7, #32
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	2000003c 	.word	0x2000003c

0800d00c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b08a      	sub	sp, #40	; 0x28
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d01e:	f7fb ff67 	bl	8008ef0 <HAL_GetTick>
 800d022:	4602      	mov	r2, r0
 800d024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d026:	1a9b      	subs	r3, r3, r2
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	4413      	add	r3, r2
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d02e:	f7fb ff5f 	bl	8008ef0 <HAL_GetTick>
 800d032:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	330c      	adds	r3, #12
 800d03a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d03c:	4b3d      	ldr	r3, [pc, #244]	; (800d134 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	4613      	mov	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	00da      	lsls	r2, r3, #3
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	0d1b      	lsrs	r3, r3, #20
 800d04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d04e:	fb02 f303 	mul.w	r3, r2, r3
 800d052:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d054:	e060      	b.n	800d118 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d05c:	d107      	bne.n	800d06e <SPI_WaitFifoStateUntilTimeout+0x62>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d104      	bne.n	800d06e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d06c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d074:	d050      	beq.n	800d118 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d076:	f7fb ff3b 	bl	8008ef0 <HAL_GetTick>
 800d07a:	4602      	mov	r2, r0
 800d07c:	6a3b      	ldr	r3, [r7, #32]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d082:	429a      	cmp	r2, r3
 800d084:	d902      	bls.n	800d08c <SPI_WaitFifoStateUntilTimeout+0x80>
 800d086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d13d      	bne.n	800d108 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	685a      	ldr	r2, [r3, #4]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d09a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0a4:	d111      	bne.n	800d0ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0ae:	d004      	beq.n	800d0ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0b8:	d107      	bne.n	800d0ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0d2:	d10f      	bne.n	800d0f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d104:	2303      	movs	r3, #3
 800d106:	e010      	b.n	800d12a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d10e:	2300      	movs	r3, #0
 800d110:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	3b01      	subs	r3, #1
 800d116:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	689a      	ldr	r2, [r3, #8]
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	4013      	ands	r3, r2
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	429a      	cmp	r2, r3
 800d126:	d196      	bne.n	800d056 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d128:	2300      	movs	r3, #0
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3728      	adds	r7, #40	; 0x28
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	2000003c 	.word	0x2000003c

0800d138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af02      	add	r7, sp, #8
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f7ff ff5b 	bl	800d00c <SPI_WaitFifoStateUntilTimeout>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d007      	beq.n	800d16c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d160:	f043 0220 	orr.w	r2, r3, #32
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d168:	2303      	movs	r3, #3
 800d16a:	e027      	b.n	800d1bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	2200      	movs	r2, #0
 800d174:	2180      	movs	r1, #128	; 0x80
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f7ff fec0 	bl	800cefc <SPI_WaitFlagStateUntilTimeout>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d007      	beq.n	800d192 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d186:	f043 0220 	orr.w	r2, r3, #32
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d18e:	2303      	movs	r3, #3
 800d190:	e014      	b.n	800d1bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	2200      	movs	r2, #0
 800d19a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f7ff ff34 	bl	800d00c <SPI_WaitFifoStateUntilTimeout>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d007      	beq.n	800d1ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1ae:	f043 0220 	orr.w	r2, r3, #32
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d1b6:	2303      	movs	r3, #3
 800d1b8:	e000      	b.n	800d1bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d1ba:	2300      	movs	r3, #0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d101      	bne.n	800d1d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e097      	b.n	800d308 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d106      	bne.n	800d1f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7fb fb17 	bl	8008820 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2202      	movs	r2, #2
 800d1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	6812      	ldr	r2, [r2, #0]
 800d204:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d208:	f023 0307 	bic.w	r3, r3, #7
 800d20c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3304      	adds	r3, #4
 800d216:	4619      	mov	r1, r3
 800d218:	4610      	mov	r0, r2
 800d21a:	f000 f879 	bl	800d310 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	6a1b      	ldr	r3, [r3, #32]
 800d234:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d246:	f023 0303 	bic.w	r3, r3, #3
 800d24a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	689a      	ldr	r2, [r3, #8]
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	021b      	lsls	r3, r3, #8
 800d256:	4313      	orrs	r3, r2
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	4313      	orrs	r3, r2
 800d25c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d264:	f023 030c 	bic.w	r3, r3, #12
 800d268:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d270:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	68da      	ldr	r2, [r3, #12]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	021b      	lsls	r3, r3, #8
 800d280:	4313      	orrs	r3, r2
 800d282:	693a      	ldr	r2, [r7, #16]
 800d284:	4313      	orrs	r3, r2
 800d286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	011a      	lsls	r2, r3, #4
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	031b      	lsls	r3, r3, #12
 800d294:	4313      	orrs	r3, r2
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	4313      	orrs	r3, r2
 800d29a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d2a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d2aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	685a      	ldr	r2, [r3, #4]
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	011b      	lsls	r3, r3, #4
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	693a      	ldr	r2, [r7, #16]
 800d2cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d310:	b480      	push	{r7}
 800d312:	b085      	sub	sp, #20
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4a4c      	ldr	r2, [pc, #304]	; (800d454 <TIM_Base_SetConfig+0x144>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d017      	beq.n	800d358 <TIM_Base_SetConfig+0x48>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d32e:	d013      	beq.n	800d358 <TIM_Base_SetConfig+0x48>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a49      	ldr	r2, [pc, #292]	; (800d458 <TIM_Base_SetConfig+0x148>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d00f      	beq.n	800d358 <TIM_Base_SetConfig+0x48>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a48      	ldr	r2, [pc, #288]	; (800d45c <TIM_Base_SetConfig+0x14c>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d00b      	beq.n	800d358 <TIM_Base_SetConfig+0x48>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a47      	ldr	r2, [pc, #284]	; (800d460 <TIM_Base_SetConfig+0x150>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d007      	beq.n	800d358 <TIM_Base_SetConfig+0x48>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a46      	ldr	r2, [pc, #280]	; (800d464 <TIM_Base_SetConfig+0x154>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d003      	beq.n	800d358 <TIM_Base_SetConfig+0x48>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a45      	ldr	r2, [pc, #276]	; (800d468 <TIM_Base_SetConfig+0x158>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d108      	bne.n	800d36a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d35e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	4313      	orrs	r3, r2
 800d368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a39      	ldr	r2, [pc, #228]	; (800d454 <TIM_Base_SetConfig+0x144>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d023      	beq.n	800d3ba <TIM_Base_SetConfig+0xaa>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d378:	d01f      	beq.n	800d3ba <TIM_Base_SetConfig+0xaa>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4a36      	ldr	r2, [pc, #216]	; (800d458 <TIM_Base_SetConfig+0x148>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d01b      	beq.n	800d3ba <TIM_Base_SetConfig+0xaa>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4a35      	ldr	r2, [pc, #212]	; (800d45c <TIM_Base_SetConfig+0x14c>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d017      	beq.n	800d3ba <TIM_Base_SetConfig+0xaa>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4a34      	ldr	r2, [pc, #208]	; (800d460 <TIM_Base_SetConfig+0x150>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d013      	beq.n	800d3ba <TIM_Base_SetConfig+0xaa>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4a33      	ldr	r2, [pc, #204]	; (800d464 <TIM_Base_SetConfig+0x154>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d00f      	beq.n	800d3ba <TIM_Base_SetConfig+0xaa>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a33      	ldr	r2, [pc, #204]	; (800d46c <TIM_Base_SetConfig+0x15c>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d00b      	beq.n	800d3ba <TIM_Base_SetConfig+0xaa>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	4a32      	ldr	r2, [pc, #200]	; (800d470 <TIM_Base_SetConfig+0x160>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d007      	beq.n	800d3ba <TIM_Base_SetConfig+0xaa>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4a31      	ldr	r2, [pc, #196]	; (800d474 <TIM_Base_SetConfig+0x164>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d003      	beq.n	800d3ba <TIM_Base_SetConfig+0xaa>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	4a2c      	ldr	r2, [pc, #176]	; (800d468 <TIM_Base_SetConfig+0x158>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d108      	bne.n	800d3cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	689a      	ldr	r2, [r3, #8]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4a18      	ldr	r2, [pc, #96]	; (800d454 <TIM_Base_SetConfig+0x144>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d013      	beq.n	800d420 <TIM_Base_SetConfig+0x110>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4a1a      	ldr	r2, [pc, #104]	; (800d464 <TIM_Base_SetConfig+0x154>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d00f      	beq.n	800d420 <TIM_Base_SetConfig+0x110>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4a1a      	ldr	r2, [pc, #104]	; (800d46c <TIM_Base_SetConfig+0x15c>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d00b      	beq.n	800d420 <TIM_Base_SetConfig+0x110>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	4a19      	ldr	r2, [pc, #100]	; (800d470 <TIM_Base_SetConfig+0x160>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d007      	beq.n	800d420 <TIM_Base_SetConfig+0x110>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4a18      	ldr	r2, [pc, #96]	; (800d474 <TIM_Base_SetConfig+0x164>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d003      	beq.n	800d420 <TIM_Base_SetConfig+0x110>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4a13      	ldr	r2, [pc, #76]	; (800d468 <TIM_Base_SetConfig+0x158>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d103      	bne.n	800d428 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	691a      	ldr	r2, [r3, #16]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	2b01      	cmp	r3, #1
 800d438:	d105      	bne.n	800d446 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	f023 0201 	bic.w	r2, r3, #1
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	611a      	str	r2, [r3, #16]
  }
}
 800d446:	bf00      	nop
 800d448:	3714      	adds	r7, #20
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	40012c00 	.word	0x40012c00
 800d458:	40000400 	.word	0x40000400
 800d45c:	40000800 	.word	0x40000800
 800d460:	40000c00 	.word	0x40000c00
 800d464:	40013400 	.word	0x40013400
 800d468:	40015000 	.word	0x40015000
 800d46c:	40014000 	.word	0x40014000
 800d470:	40014400 	.word	0x40014400
 800d474:	40014800 	.word	0x40014800

0800d478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d101      	bne.n	800d490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d48c:	2302      	movs	r3, #2
 800d48e:	e074      	b.n	800d57a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2201      	movs	r2, #1
 800d494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2202      	movs	r2, #2
 800d49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a34      	ldr	r2, [pc, #208]	; (800d588 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d009      	beq.n	800d4ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4a33      	ldr	r2, [pc, #204]	; (800d58c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d004      	beq.n	800d4ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a31      	ldr	r2, [pc, #196]	; (800d590 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d108      	bne.n	800d4e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d4d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a21      	ldr	r2, [pc, #132]	; (800d588 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d022      	beq.n	800d54e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d510:	d01d      	beq.n	800d54e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a1f      	ldr	r2, [pc, #124]	; (800d594 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d018      	beq.n	800d54e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a1d      	ldr	r2, [pc, #116]	; (800d598 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d013      	beq.n	800d54e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a1c      	ldr	r2, [pc, #112]	; (800d59c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d00e      	beq.n	800d54e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a15      	ldr	r2, [pc, #84]	; (800d58c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d009      	beq.n	800d54e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a18      	ldr	r2, [pc, #96]	; (800d5a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d004      	beq.n	800d54e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a11      	ldr	r2, [pc, #68]	; (800d590 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d10c      	bne.n	800d568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3714      	adds	r7, #20
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	40012c00 	.word	0x40012c00
 800d58c:	40013400 	.word	0x40013400
 800d590:	40015000 	.word	0x40015000
 800d594:	40000400 	.word	0x40000400
 800d598:	40000800 	.word	0x40000800
 800d59c:	40000c00 	.word	0x40000c00
 800d5a0:	40014000 	.word	0x40014000

0800d5a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d101      	bne.n	800d5b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e042      	b.n	800d63c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d106      	bne.n	800d5ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7fb fba3 	bl	8008d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2224      	movs	r2, #36	; 0x24
 800d5d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f022 0201 	bic.w	r2, r2, #1
 800d5e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d002      	beq.n	800d5f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 fe68 	bl	800e2c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 fb69 	bl	800dccc <UART_SetConfig>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d101      	bne.n	800d604 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d600:	2301      	movs	r3, #1
 800d602:	e01b      	b.n	800d63c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	685a      	ldr	r2, [r3, #4]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	689a      	ldr	r2, [r3, #8]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f042 0201 	orr.w	r2, r2, #1
 800d632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 fee7 	bl	800e408 <UART_CheckIdleState>
 800d63a:	4603      	mov	r3, r0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b0ba      	sub	sp, #232	; 0xe8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	69db      	ldr	r3, [r3, #28]
 800d652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d66a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d66e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d672:	4013      	ands	r3, r2
 800d674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d11b      	bne.n	800d6b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d684:	f003 0320 	and.w	r3, r3, #32
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d015      	beq.n	800d6b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d690:	f003 0320 	and.w	r3, r3, #32
 800d694:	2b00      	cmp	r3, #0
 800d696:	d105      	bne.n	800d6a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d69c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d009      	beq.n	800d6b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f000 82e3 	beq.w	800dc74 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	4798      	blx	r3
      }
      return;
 800d6b6:	e2dd      	b.n	800dc74 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d6b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f000 8123 	beq.w	800d908 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d6c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d6c6:	4b8d      	ldr	r3, [pc, #564]	; (800d8fc <HAL_UART_IRQHandler+0x2b8>)
 800d6c8:	4013      	ands	r3, r2
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d106      	bne.n	800d6dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d6ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d6d2:	4b8b      	ldr	r3, [pc, #556]	; (800d900 <HAL_UART_IRQHandler+0x2bc>)
 800d6d4:	4013      	ands	r3, r2
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 8116 	beq.w	800d908 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d011      	beq.n	800d70c <HAL_UART_IRQHandler+0xc8>
 800d6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00b      	beq.n	800d70c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d702:	f043 0201 	orr.w	r2, r3, #1
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d710:	f003 0302 	and.w	r3, r3, #2
 800d714:	2b00      	cmp	r3, #0
 800d716:	d011      	beq.n	800d73c <HAL_UART_IRQHandler+0xf8>
 800d718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d71c:	f003 0301 	and.w	r3, r3, #1
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00b      	beq.n	800d73c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2202      	movs	r2, #2
 800d72a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d732:	f043 0204 	orr.w	r2, r3, #4
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d740:	f003 0304 	and.w	r3, r3, #4
 800d744:	2b00      	cmp	r3, #0
 800d746:	d011      	beq.n	800d76c <HAL_UART_IRQHandler+0x128>
 800d748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2204      	movs	r2, #4
 800d75a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d762:	f043 0202 	orr.w	r2, r3, #2
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d770:	f003 0308 	and.w	r3, r3, #8
 800d774:	2b00      	cmp	r3, #0
 800d776:	d017      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d77c:	f003 0320 	and.w	r3, r3, #32
 800d780:	2b00      	cmp	r3, #0
 800d782:	d105      	bne.n	800d790 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d784:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d788:	4b5c      	ldr	r3, [pc, #368]	; (800d8fc <HAL_UART_IRQHandler+0x2b8>)
 800d78a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00b      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2208      	movs	r2, #8
 800d796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d79e:	f043 0208 	orr.w	r2, r3, #8
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d012      	beq.n	800d7da <HAL_UART_IRQHandler+0x196>
 800d7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00c      	beq.n	800d7da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7d0:	f043 0220 	orr.w	r2, r3, #32
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f000 8249 	beq.w	800dc78 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7ea:	f003 0320 	and.w	r3, r3, #32
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d013      	beq.n	800d81a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d7f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7f6:	f003 0320 	and.w	r3, r3, #32
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d105      	bne.n	800d80a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d7fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d806:	2b00      	cmp	r3, #0
 800d808:	d007      	beq.n	800d81a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d003      	beq.n	800d81a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d82e:	2b40      	cmp	r3, #64	; 0x40
 800d830:	d005      	beq.n	800d83e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d836:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d054      	beq.n	800d8e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fef9 	bl	800e636 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d84e:	2b40      	cmp	r3, #64	; 0x40
 800d850:	d146      	bne.n	800d8e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	3308      	adds	r3, #8
 800d858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d860:	e853 3f00 	ldrex	r3, [r3]
 800d864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d86c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	3308      	adds	r3, #8
 800d87a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d87e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d886:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d88a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d88e:	e841 2300 	strex	r3, r2, [r1]
 800d892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d1d9      	bne.n	800d852 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d017      	beq.n	800d8d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8ae:	4a15      	ldr	r2, [pc, #84]	; (800d904 <HAL_UART_IRQHandler+0x2c0>)
 800d8b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fb fd58 	bl	800936e <HAL_DMA_Abort_IT>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d019      	beq.n	800d8f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d8d2:	4610      	mov	r0, r2
 800d8d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8d6:	e00f      	b.n	800d8f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 f9e1 	bl	800dca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8de:	e00b      	b.n	800d8f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 f9dd 	bl	800dca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8e6:	e007      	b.n	800d8f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 f9d9 	bl	800dca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d8f6:	e1bf      	b.n	800dc78 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8f8:	bf00      	nop
    return;
 800d8fa:	e1bd      	b.n	800dc78 <HAL_UART_IRQHandler+0x634>
 800d8fc:	10000001 	.word	0x10000001
 800d900:	04000120 	.word	0x04000120
 800d904:	0800e703 	.word	0x0800e703

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	f040 8153 	bne.w	800dbb8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d916:	f003 0310 	and.w	r3, r3, #16
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f000 814c 	beq.w	800dbb8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d924:	f003 0310 	and.w	r3, r3, #16
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f000 8145 	beq.w	800dbb8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2210      	movs	r2, #16
 800d934:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d940:	2b40      	cmp	r3, #64	; 0x40
 800d942:	f040 80bb 	bne.w	800dabc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f000 818f 	beq.w	800dc7c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d964:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d968:	429a      	cmp	r2, r3
 800d96a:	f080 8187 	bcs.w	800dc7c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d974:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 0320 	and.w	r3, r3, #32
 800d986:	2b00      	cmp	r3, #0
 800d988:	f040 8087 	bne.w	800da9a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d998:	e853 3f00 	ldrex	r3, [r3]
 800d99c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d9a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d9a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d9b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d9ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d9c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d9c6:	e841 2300 	strex	r3, r2, [r1]
 800d9ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d9ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d1da      	bne.n	800d98c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3308      	adds	r3, #8
 800d9dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9e0:	e853 3f00 	ldrex	r3, [r3]
 800d9e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d9e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9e8:	f023 0301 	bic.w	r3, r3, #1
 800d9ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3308      	adds	r3, #8
 800d9f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d9fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d9fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800da02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da06:	e841 2300 	strex	r3, r2, [r1]
 800da0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800da0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1e1      	bne.n	800d9d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3308      	adds	r3, #8
 800da18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da1c:	e853 3f00 	ldrex	r3, [r3]
 800da20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800da22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3308      	adds	r3, #8
 800da32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800da36:	66fa      	str	r2, [r7, #108]	; 0x6c
 800da38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800da3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da3e:	e841 2300 	strex	r3, r2, [r1]
 800da42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800da44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1e3      	bne.n	800da12 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2220      	movs	r2, #32
 800da4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da68:	f023 0310 	bic.w	r3, r3, #16
 800da6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800da7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da82:	e841 2300 	strex	r3, r2, [r1]
 800da86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1e4      	bne.n	800da58 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da94:	4618      	mov	r0, r3
 800da96:	f7fb fc11 	bl	80092bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2202      	movs	r2, #2
 800da9e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800daac:	b29b      	uxth	r3, r3
 800daae:	1ad3      	subs	r3, r2, r3
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	4619      	mov	r1, r3
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f8fd 	bl	800dcb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800daba:	e0df      	b.n	800dc7c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dac8:	b29b      	uxth	r3, r3
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f000 80d1 	beq.w	800dc80 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800dade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f000 80cc 	beq.w	800dc80 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf0:	e853 3f00 	ldrex	r3, [r3]
 800daf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800daf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dafc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	461a      	mov	r2, r3
 800db06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db0a:	647b      	str	r3, [r7, #68]	; 0x44
 800db0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db12:	e841 2300 	strex	r3, r2, [r1]
 800db16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1e4      	bne.n	800dae8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	3308      	adds	r3, #8
 800db24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db28:	e853 3f00 	ldrex	r3, [r3]
 800db2c:	623b      	str	r3, [r7, #32]
   return(result);
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db34:	f023 0301 	bic.w	r3, r3, #1
 800db38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	3308      	adds	r3, #8
 800db42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800db46:	633a      	str	r2, [r7, #48]	; 0x30
 800db48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db4e:	e841 2300 	strex	r3, r2, [r1]
 800db52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1e1      	bne.n	800db1e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2220      	movs	r2, #32
 800db5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	e853 3f00 	ldrex	r3, [r3]
 800db7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f023 0310 	bic.w	r3, r3, #16
 800db82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	461a      	mov	r2, r3
 800db8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800db90:	61fb      	str	r3, [r7, #28]
 800db92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db94:	69b9      	ldr	r1, [r7, #24]
 800db96:	69fa      	ldr	r2, [r7, #28]
 800db98:	e841 2300 	strex	r3, r2, [r1]
 800db9c:	617b      	str	r3, [r7, #20]
   return(result);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1e4      	bne.n	800db6e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2202      	movs	r2, #2
 800dba8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dbaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 f87f 	bl	800dcb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dbb6:	e063      	b.n	800dc80 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dbb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00e      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x59e>
 800dbc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d008      	beq.n	800dbe2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dbd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 fdd2 	bl	800e784 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbe0:	e051      	b.n	800dc86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d014      	beq.n	800dc18 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dbee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d105      	bne.n	800dc06 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dbfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d008      	beq.n	800dc18 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d03a      	beq.n	800dc84 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	4798      	blx	r3
    }
    return;
 800dc16:	e035      	b.n	800dc84 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dc18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d009      	beq.n	800dc38 <HAL_UART_IRQHandler+0x5f4>
 800dc24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d003      	beq.n	800dc38 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 fd7c 	bl	800e72e <UART_EndTransmit_IT>
    return;
 800dc36:	e026      	b.n	800dc86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d009      	beq.n	800dc58 <HAL_UART_IRQHandler+0x614>
 800dc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d003      	beq.n	800dc58 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 fdab 	bl	800e7ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc56:	e016      	b.n	800dc86 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dc58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d010      	beq.n	800dc86 <HAL_UART_IRQHandler+0x642>
 800dc64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	da0c      	bge.n	800dc86 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fd93 	bl	800e798 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc72:	e008      	b.n	800dc86 <HAL_UART_IRQHandler+0x642>
      return;
 800dc74:	bf00      	nop
 800dc76:	e006      	b.n	800dc86 <HAL_UART_IRQHandler+0x642>
    return;
 800dc78:	bf00      	nop
 800dc7a:	e004      	b.n	800dc86 <HAL_UART_IRQHandler+0x642>
      return;
 800dc7c:	bf00      	nop
 800dc7e:	e002      	b.n	800dc86 <HAL_UART_IRQHandler+0x642>
      return;
 800dc80:	bf00      	nop
 800dc82:	e000      	b.n	800dc86 <HAL_UART_IRQHandler+0x642>
    return;
 800dc84:	bf00      	nop
  }
}
 800dc86:	37e8      	adds	r7, #232	; 0xe8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dcc0:	bf00      	nop
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dcd0:	b08c      	sub	sp, #48	; 0x30
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	689a      	ldr	r2, [r3, #8]
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	691b      	ldr	r3, [r3, #16]
 800dce4:	431a      	orrs	r2, r3
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	695b      	ldr	r3, [r3, #20]
 800dcea:	431a      	orrs	r2, r3
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	4baa      	ldr	r3, [pc, #680]	; (800dfa4 <UART_SetConfig+0x2d8>)
 800dcfc:	4013      	ands	r3, r2
 800dcfe:	697a      	ldr	r2, [r7, #20]
 800dd00:	6812      	ldr	r2, [r2, #0]
 800dd02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd04:	430b      	orrs	r3, r1
 800dd06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	68da      	ldr	r2, [r3, #12]
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	699b      	ldr	r3, [r3, #24]
 800dd22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a9f      	ldr	r2, [pc, #636]	; (800dfa8 <UART_SetConfig+0x2dc>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d004      	beq.n	800dd38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd34:	4313      	orrs	r3, r2
 800dd36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800dd42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	6812      	ldr	r2, [r2, #0]
 800dd4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd4c:	430b      	orrs	r3, r1
 800dd4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd56:	f023 010f 	bic.w	r1, r3, #15
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	430a      	orrs	r2, r1
 800dd64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a90      	ldr	r2, [pc, #576]	; (800dfac <UART_SetConfig+0x2e0>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d125      	bne.n	800ddbc <UART_SetConfig+0xf0>
 800dd70:	4b8f      	ldr	r3, [pc, #572]	; (800dfb0 <UART_SetConfig+0x2e4>)
 800dd72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd76:	f003 0303 	and.w	r3, r3, #3
 800dd7a:	2b03      	cmp	r3, #3
 800dd7c:	d81a      	bhi.n	800ddb4 <UART_SetConfig+0xe8>
 800dd7e:	a201      	add	r2, pc, #4	; (adr r2, 800dd84 <UART_SetConfig+0xb8>)
 800dd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd84:	0800dd95 	.word	0x0800dd95
 800dd88:	0800dda5 	.word	0x0800dda5
 800dd8c:	0800dd9d 	.word	0x0800dd9d
 800dd90:	0800ddad 	.word	0x0800ddad
 800dd94:	2301      	movs	r3, #1
 800dd96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd9a:	e116      	b.n	800dfca <UART_SetConfig+0x2fe>
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dda2:	e112      	b.n	800dfca <UART_SetConfig+0x2fe>
 800dda4:	2304      	movs	r3, #4
 800dda6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddaa:	e10e      	b.n	800dfca <UART_SetConfig+0x2fe>
 800ddac:	2308      	movs	r3, #8
 800ddae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddb2:	e10a      	b.n	800dfca <UART_SetConfig+0x2fe>
 800ddb4:	2310      	movs	r3, #16
 800ddb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddba:	e106      	b.n	800dfca <UART_SetConfig+0x2fe>
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a7c      	ldr	r2, [pc, #496]	; (800dfb4 <UART_SetConfig+0x2e8>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d138      	bne.n	800de38 <UART_SetConfig+0x16c>
 800ddc6:	4b7a      	ldr	r3, [pc, #488]	; (800dfb0 <UART_SetConfig+0x2e4>)
 800ddc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddcc:	f003 030c 	and.w	r3, r3, #12
 800ddd0:	2b0c      	cmp	r3, #12
 800ddd2:	d82d      	bhi.n	800de30 <UART_SetConfig+0x164>
 800ddd4:	a201      	add	r2, pc, #4	; (adr r2, 800dddc <UART_SetConfig+0x110>)
 800ddd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddda:	bf00      	nop
 800dddc:	0800de11 	.word	0x0800de11
 800dde0:	0800de31 	.word	0x0800de31
 800dde4:	0800de31 	.word	0x0800de31
 800dde8:	0800de31 	.word	0x0800de31
 800ddec:	0800de21 	.word	0x0800de21
 800ddf0:	0800de31 	.word	0x0800de31
 800ddf4:	0800de31 	.word	0x0800de31
 800ddf8:	0800de31 	.word	0x0800de31
 800ddfc:	0800de19 	.word	0x0800de19
 800de00:	0800de31 	.word	0x0800de31
 800de04:	0800de31 	.word	0x0800de31
 800de08:	0800de31 	.word	0x0800de31
 800de0c:	0800de29 	.word	0x0800de29
 800de10:	2300      	movs	r3, #0
 800de12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de16:	e0d8      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de18:	2302      	movs	r3, #2
 800de1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de1e:	e0d4      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de20:	2304      	movs	r3, #4
 800de22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de26:	e0d0      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de28:	2308      	movs	r3, #8
 800de2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de2e:	e0cc      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de30:	2310      	movs	r3, #16
 800de32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de36:	e0c8      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a5e      	ldr	r2, [pc, #376]	; (800dfb8 <UART_SetConfig+0x2ec>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d125      	bne.n	800de8e <UART_SetConfig+0x1c2>
 800de42:	4b5b      	ldr	r3, [pc, #364]	; (800dfb0 <UART_SetConfig+0x2e4>)
 800de44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800de4c:	2b30      	cmp	r3, #48	; 0x30
 800de4e:	d016      	beq.n	800de7e <UART_SetConfig+0x1b2>
 800de50:	2b30      	cmp	r3, #48	; 0x30
 800de52:	d818      	bhi.n	800de86 <UART_SetConfig+0x1ba>
 800de54:	2b20      	cmp	r3, #32
 800de56:	d00a      	beq.n	800de6e <UART_SetConfig+0x1a2>
 800de58:	2b20      	cmp	r3, #32
 800de5a:	d814      	bhi.n	800de86 <UART_SetConfig+0x1ba>
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <UART_SetConfig+0x19a>
 800de60:	2b10      	cmp	r3, #16
 800de62:	d008      	beq.n	800de76 <UART_SetConfig+0x1aa>
 800de64:	e00f      	b.n	800de86 <UART_SetConfig+0x1ba>
 800de66:	2300      	movs	r3, #0
 800de68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de6c:	e0ad      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de6e:	2302      	movs	r3, #2
 800de70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de74:	e0a9      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de76:	2304      	movs	r3, #4
 800de78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de7c:	e0a5      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de7e:	2308      	movs	r3, #8
 800de80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de84:	e0a1      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de86:	2310      	movs	r3, #16
 800de88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de8c:	e09d      	b.n	800dfca <UART_SetConfig+0x2fe>
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a4a      	ldr	r2, [pc, #296]	; (800dfbc <UART_SetConfig+0x2f0>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d125      	bne.n	800dee4 <UART_SetConfig+0x218>
 800de98:	4b45      	ldr	r3, [pc, #276]	; (800dfb0 <UART_SetConfig+0x2e4>)
 800de9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dea2:	2bc0      	cmp	r3, #192	; 0xc0
 800dea4:	d016      	beq.n	800ded4 <UART_SetConfig+0x208>
 800dea6:	2bc0      	cmp	r3, #192	; 0xc0
 800dea8:	d818      	bhi.n	800dedc <UART_SetConfig+0x210>
 800deaa:	2b80      	cmp	r3, #128	; 0x80
 800deac:	d00a      	beq.n	800dec4 <UART_SetConfig+0x1f8>
 800deae:	2b80      	cmp	r3, #128	; 0x80
 800deb0:	d814      	bhi.n	800dedc <UART_SetConfig+0x210>
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d002      	beq.n	800debc <UART_SetConfig+0x1f0>
 800deb6:	2b40      	cmp	r3, #64	; 0x40
 800deb8:	d008      	beq.n	800decc <UART_SetConfig+0x200>
 800deba:	e00f      	b.n	800dedc <UART_SetConfig+0x210>
 800debc:	2300      	movs	r3, #0
 800debe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dec2:	e082      	b.n	800dfca <UART_SetConfig+0x2fe>
 800dec4:	2302      	movs	r3, #2
 800dec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800deca:	e07e      	b.n	800dfca <UART_SetConfig+0x2fe>
 800decc:	2304      	movs	r3, #4
 800dece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ded2:	e07a      	b.n	800dfca <UART_SetConfig+0x2fe>
 800ded4:	2308      	movs	r3, #8
 800ded6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800deda:	e076      	b.n	800dfca <UART_SetConfig+0x2fe>
 800dedc:	2310      	movs	r3, #16
 800dede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dee2:	e072      	b.n	800dfca <UART_SetConfig+0x2fe>
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a35      	ldr	r2, [pc, #212]	; (800dfc0 <UART_SetConfig+0x2f4>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d12a      	bne.n	800df44 <UART_SetConfig+0x278>
 800deee:	4b30      	ldr	r3, [pc, #192]	; (800dfb0 <UART_SetConfig+0x2e4>)
 800def0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800def4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800def8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800defc:	d01a      	beq.n	800df34 <UART_SetConfig+0x268>
 800defe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df02:	d81b      	bhi.n	800df3c <UART_SetConfig+0x270>
 800df04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df08:	d00c      	beq.n	800df24 <UART_SetConfig+0x258>
 800df0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df0e:	d815      	bhi.n	800df3c <UART_SetConfig+0x270>
 800df10:	2b00      	cmp	r3, #0
 800df12:	d003      	beq.n	800df1c <UART_SetConfig+0x250>
 800df14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df18:	d008      	beq.n	800df2c <UART_SetConfig+0x260>
 800df1a:	e00f      	b.n	800df3c <UART_SetConfig+0x270>
 800df1c:	2300      	movs	r3, #0
 800df1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df22:	e052      	b.n	800dfca <UART_SetConfig+0x2fe>
 800df24:	2302      	movs	r3, #2
 800df26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df2a:	e04e      	b.n	800dfca <UART_SetConfig+0x2fe>
 800df2c:	2304      	movs	r3, #4
 800df2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df32:	e04a      	b.n	800dfca <UART_SetConfig+0x2fe>
 800df34:	2308      	movs	r3, #8
 800df36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df3a:	e046      	b.n	800dfca <UART_SetConfig+0x2fe>
 800df3c:	2310      	movs	r3, #16
 800df3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df42:	e042      	b.n	800dfca <UART_SetConfig+0x2fe>
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a17      	ldr	r2, [pc, #92]	; (800dfa8 <UART_SetConfig+0x2dc>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d13a      	bne.n	800dfc4 <UART_SetConfig+0x2f8>
 800df4e:	4b18      	ldr	r3, [pc, #96]	; (800dfb0 <UART_SetConfig+0x2e4>)
 800df50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800df58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800df5c:	d01a      	beq.n	800df94 <UART_SetConfig+0x2c8>
 800df5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800df62:	d81b      	bhi.n	800df9c <UART_SetConfig+0x2d0>
 800df64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df68:	d00c      	beq.n	800df84 <UART_SetConfig+0x2b8>
 800df6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df6e:	d815      	bhi.n	800df9c <UART_SetConfig+0x2d0>
 800df70:	2b00      	cmp	r3, #0
 800df72:	d003      	beq.n	800df7c <UART_SetConfig+0x2b0>
 800df74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df78:	d008      	beq.n	800df8c <UART_SetConfig+0x2c0>
 800df7a:	e00f      	b.n	800df9c <UART_SetConfig+0x2d0>
 800df7c:	2300      	movs	r3, #0
 800df7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df82:	e022      	b.n	800dfca <UART_SetConfig+0x2fe>
 800df84:	2302      	movs	r3, #2
 800df86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df8a:	e01e      	b.n	800dfca <UART_SetConfig+0x2fe>
 800df8c:	2304      	movs	r3, #4
 800df8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df92:	e01a      	b.n	800dfca <UART_SetConfig+0x2fe>
 800df94:	2308      	movs	r3, #8
 800df96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df9a:	e016      	b.n	800dfca <UART_SetConfig+0x2fe>
 800df9c:	2310      	movs	r3, #16
 800df9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfa2:	e012      	b.n	800dfca <UART_SetConfig+0x2fe>
 800dfa4:	cfff69f3 	.word	0xcfff69f3
 800dfa8:	40008000 	.word	0x40008000
 800dfac:	40013800 	.word	0x40013800
 800dfb0:	40021000 	.word	0x40021000
 800dfb4:	40004400 	.word	0x40004400
 800dfb8:	40004800 	.word	0x40004800
 800dfbc:	40004c00 	.word	0x40004c00
 800dfc0:	40005000 	.word	0x40005000
 800dfc4:	2310      	movs	r3, #16
 800dfc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4aae      	ldr	r2, [pc, #696]	; (800e288 <UART_SetConfig+0x5bc>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	f040 8097 	bne.w	800e104 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dfd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfda:	2b08      	cmp	r3, #8
 800dfdc:	d823      	bhi.n	800e026 <UART_SetConfig+0x35a>
 800dfde:	a201      	add	r2, pc, #4	; (adr r2, 800dfe4 <UART_SetConfig+0x318>)
 800dfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe4:	0800e009 	.word	0x0800e009
 800dfe8:	0800e027 	.word	0x0800e027
 800dfec:	0800e011 	.word	0x0800e011
 800dff0:	0800e027 	.word	0x0800e027
 800dff4:	0800e017 	.word	0x0800e017
 800dff8:	0800e027 	.word	0x0800e027
 800dffc:	0800e027 	.word	0x0800e027
 800e000:	0800e027 	.word	0x0800e027
 800e004:	0800e01f 	.word	0x0800e01f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e008:	f7fe f984 	bl	800c314 <HAL_RCC_GetPCLK1Freq>
 800e00c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e00e:	e010      	b.n	800e032 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e010:	4b9e      	ldr	r3, [pc, #632]	; (800e28c <UART_SetConfig+0x5c0>)
 800e012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e014:	e00d      	b.n	800e032 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e016:	f7fe f90f 	bl	800c238 <HAL_RCC_GetSysClockFreq>
 800e01a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e01c:	e009      	b.n	800e032 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e01e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e024:	e005      	b.n	800e032 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800e026:	2300      	movs	r3, #0
 800e028:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e030:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	2b00      	cmp	r3, #0
 800e036:	f000 8130 	beq.w	800e29a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	4a94      	ldr	r2, [pc, #592]	; (800e290 <UART_SetConfig+0x5c4>)
 800e040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e044:	461a      	mov	r2, r3
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	fbb3 f3f2 	udiv	r3, r3, r2
 800e04c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	4613      	mov	r3, r2
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	4413      	add	r3, r2
 800e058:	69ba      	ldr	r2, [r7, #24]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d305      	bcc.n	800e06a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e064:	69ba      	ldr	r2, [r7, #24]
 800e066:	429a      	cmp	r2, r3
 800e068:	d903      	bls.n	800e072 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e070:	e113      	b.n	800e29a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e074:	2200      	movs	r2, #0
 800e076:	60bb      	str	r3, [r7, #8]
 800e078:	60fa      	str	r2, [r7, #12]
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07e:	4a84      	ldr	r2, [pc, #528]	; (800e290 <UART_SetConfig+0x5c4>)
 800e080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e084:	b29b      	uxth	r3, r3
 800e086:	2200      	movs	r2, #0
 800e088:	603b      	str	r3, [r7, #0]
 800e08a:	607a      	str	r2, [r7, #4]
 800e08c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e090:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e094:	f7f2 fe20 	bl	8000cd8 <__aeabi_uldivmod>
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	4610      	mov	r0, r2
 800e09e:	4619      	mov	r1, r3
 800e0a0:	f04f 0200 	mov.w	r2, #0
 800e0a4:	f04f 0300 	mov.w	r3, #0
 800e0a8:	020b      	lsls	r3, r1, #8
 800e0aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e0ae:	0202      	lsls	r2, r0, #8
 800e0b0:	6979      	ldr	r1, [r7, #20]
 800e0b2:	6849      	ldr	r1, [r1, #4]
 800e0b4:	0849      	lsrs	r1, r1, #1
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	460c      	mov	r4, r1
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	eb12 0804 	adds.w	r8, r2, r4
 800e0c0:	eb43 0905 	adc.w	r9, r3, r5
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	469a      	mov	sl, r3
 800e0cc:	4693      	mov	fp, r2
 800e0ce:	4652      	mov	r2, sl
 800e0d0:	465b      	mov	r3, fp
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	4649      	mov	r1, r9
 800e0d6:	f7f2 fdff 	bl	8000cd8 <__aeabi_uldivmod>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4613      	mov	r3, r2
 800e0e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0e8:	d308      	bcc.n	800e0fc <UART_SetConfig+0x430>
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0f0:	d204      	bcs.n	800e0fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	6a3a      	ldr	r2, [r7, #32]
 800e0f8:	60da      	str	r2, [r3, #12]
 800e0fa:	e0ce      	b.n	800e29a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e102:	e0ca      	b.n	800e29a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	69db      	ldr	r3, [r3, #28]
 800e108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e10c:	d166      	bne.n	800e1dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800e10e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e112:	2b08      	cmp	r3, #8
 800e114:	d827      	bhi.n	800e166 <UART_SetConfig+0x49a>
 800e116:	a201      	add	r2, pc, #4	; (adr r2, 800e11c <UART_SetConfig+0x450>)
 800e118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11c:	0800e141 	.word	0x0800e141
 800e120:	0800e149 	.word	0x0800e149
 800e124:	0800e151 	.word	0x0800e151
 800e128:	0800e167 	.word	0x0800e167
 800e12c:	0800e157 	.word	0x0800e157
 800e130:	0800e167 	.word	0x0800e167
 800e134:	0800e167 	.word	0x0800e167
 800e138:	0800e167 	.word	0x0800e167
 800e13c:	0800e15f 	.word	0x0800e15f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e140:	f7fe f8e8 	bl	800c314 <HAL_RCC_GetPCLK1Freq>
 800e144:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e146:	e014      	b.n	800e172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e148:	f7fe f8fa 	bl	800c340 <HAL_RCC_GetPCLK2Freq>
 800e14c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e14e:	e010      	b.n	800e172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e150:	4b4e      	ldr	r3, [pc, #312]	; (800e28c <UART_SetConfig+0x5c0>)
 800e152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e154:	e00d      	b.n	800e172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e156:	f7fe f86f 	bl	800c238 <HAL_RCC_GetSysClockFreq>
 800e15a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e15c:	e009      	b.n	800e172 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e164:	e005      	b.n	800e172 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e174:	2b00      	cmp	r3, #0
 800e176:	f000 8090 	beq.w	800e29a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17e:	4a44      	ldr	r2, [pc, #272]	; (800e290 <UART_SetConfig+0x5c4>)
 800e180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e184:	461a      	mov	r2, r3
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	fbb3 f3f2 	udiv	r3, r3, r2
 800e18c:	005a      	lsls	r2, r3, #1
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	085b      	lsrs	r3, r3, #1
 800e194:	441a      	add	r2, r3
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e19e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1a0:	6a3b      	ldr	r3, [r7, #32]
 800e1a2:	2b0f      	cmp	r3, #15
 800e1a4:	d916      	bls.n	800e1d4 <UART_SetConfig+0x508>
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1ac:	d212      	bcs.n	800e1d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e1ae:	6a3b      	ldr	r3, [r7, #32]
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	f023 030f 	bic.w	r3, r3, #15
 800e1b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e1b8:	6a3b      	ldr	r3, [r7, #32]
 800e1ba:	085b      	lsrs	r3, r3, #1
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	f003 0307 	and.w	r3, r3, #7
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	8bfb      	ldrh	r3, [r7, #30]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	8bfa      	ldrh	r2, [r7, #30]
 800e1d0:	60da      	str	r2, [r3, #12]
 800e1d2:	e062      	b.n	800e29a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e1da:	e05e      	b.n	800e29a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e1dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e1e0:	2b08      	cmp	r3, #8
 800e1e2:	d828      	bhi.n	800e236 <UART_SetConfig+0x56a>
 800e1e4:	a201      	add	r2, pc, #4	; (adr r2, 800e1ec <UART_SetConfig+0x520>)
 800e1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ea:	bf00      	nop
 800e1ec:	0800e211 	.word	0x0800e211
 800e1f0:	0800e219 	.word	0x0800e219
 800e1f4:	0800e221 	.word	0x0800e221
 800e1f8:	0800e237 	.word	0x0800e237
 800e1fc:	0800e227 	.word	0x0800e227
 800e200:	0800e237 	.word	0x0800e237
 800e204:	0800e237 	.word	0x0800e237
 800e208:	0800e237 	.word	0x0800e237
 800e20c:	0800e22f 	.word	0x0800e22f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e210:	f7fe f880 	bl	800c314 <HAL_RCC_GetPCLK1Freq>
 800e214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e216:	e014      	b.n	800e242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e218:	f7fe f892 	bl	800c340 <HAL_RCC_GetPCLK2Freq>
 800e21c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e21e:	e010      	b.n	800e242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e220:	4b1a      	ldr	r3, [pc, #104]	; (800e28c <UART_SetConfig+0x5c0>)
 800e222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e224:	e00d      	b.n	800e242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e226:	f7fe f807 	bl	800c238 <HAL_RCC_GetSysClockFreq>
 800e22a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e22c:	e009      	b.n	800e242 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e22e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e234:	e005      	b.n	800e242 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800e236:	2300      	movs	r3, #0
 800e238:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e23a:	2301      	movs	r3, #1
 800e23c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e240:	bf00      	nop
    }

    if (pclk != 0U)
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	2b00      	cmp	r3, #0
 800e246:	d028      	beq.n	800e29a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	4a10      	ldr	r2, [pc, #64]	; (800e290 <UART_SetConfig+0x5c4>)
 800e24e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e252:	461a      	mov	r2, r3
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	fbb3 f2f2 	udiv	r2, r3, r2
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	085b      	lsrs	r3, r3, #1
 800e260:	441a      	add	r2, r3
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	fbb2 f3f3 	udiv	r3, r2, r3
 800e26a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e26c:	6a3b      	ldr	r3, [r7, #32]
 800e26e:	2b0f      	cmp	r3, #15
 800e270:	d910      	bls.n	800e294 <UART_SetConfig+0x5c8>
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e278:	d20c      	bcs.n	800e294 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e27a:	6a3b      	ldr	r3, [r7, #32]
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	60da      	str	r2, [r3, #12]
 800e284:	e009      	b.n	800e29a <UART_SetConfig+0x5ce>
 800e286:	bf00      	nop
 800e288:	40008000 	.word	0x40008000
 800e28c:	00f42400 	.word	0x00f42400
 800e290:	08016ac0 	.word	0x08016ac0
      }
      else
      {
        ret = HAL_ERROR;
 800e294:	2301      	movs	r3, #1
 800e296:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e2b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3730      	adds	r7, #48	; 0x30
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e2c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d0:	f003 0308 	and.w	r3, r3, #8
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00a      	beq.n	800e2ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	430a      	orrs	r2, r1
 800e2ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f2:	f003 0301 	and.w	r3, r3, #1
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00a      	beq.n	800e310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	430a      	orrs	r2, r1
 800e30e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e314:	f003 0302 	and.w	r3, r3, #2
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00a      	beq.n	800e332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	430a      	orrs	r2, r1
 800e330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e336:	f003 0304 	and.w	r3, r3, #4
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00a      	beq.n	800e354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	430a      	orrs	r2, r1
 800e352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e358:	f003 0310 	and.w	r3, r3, #16
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00a      	beq.n	800e376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	430a      	orrs	r2, r1
 800e374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e37a:	f003 0320 	and.w	r3, r3, #32
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00a      	beq.n	800e398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	430a      	orrs	r2, r1
 800e396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d01a      	beq.n	800e3da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	430a      	orrs	r2, r1
 800e3b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3c2:	d10a      	bne.n	800e3da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	430a      	orrs	r2, r1
 800e3d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00a      	beq.n	800e3fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	430a      	orrs	r2, r1
 800e3fa:	605a      	str	r2, [r3, #4]
  }
}
 800e3fc:	bf00      	nop
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b098      	sub	sp, #96	; 0x60
 800e40c:	af02      	add	r7, sp, #8
 800e40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e418:	f7fa fd6a 	bl	8008ef0 <HAL_GetTick>
 800e41c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 0308 	and.w	r3, r3, #8
 800e428:	2b08      	cmp	r3, #8
 800e42a:	d12f      	bne.n	800e48c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e42c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e430:	9300      	str	r3, [sp, #0]
 800e432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e434:	2200      	movs	r2, #0
 800e436:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f88e 	bl	800e55c <UART_WaitOnFlagUntilTimeout>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d022      	beq.n	800e48c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44e:	e853 3f00 	ldrex	r3, [r3]
 800e452:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e45a:	653b      	str	r3, [r7, #80]	; 0x50
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	461a      	mov	r2, r3
 800e462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e464:	647b      	str	r3, [r7, #68]	; 0x44
 800e466:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e46a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e46c:	e841 2300 	strex	r3, r2, [r1]
 800e470:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e474:	2b00      	cmp	r3, #0
 800e476:	d1e6      	bne.n	800e446 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2220      	movs	r2, #32
 800e47c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e488:	2303      	movs	r3, #3
 800e48a:	e063      	b.n	800e554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f003 0304 	and.w	r3, r3, #4
 800e496:	2b04      	cmp	r3, #4
 800e498:	d149      	bne.n	800e52e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e49a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e49e:	9300      	str	r3, [sp, #0]
 800e4a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 f857 	bl	800e55c <UART_WaitOnFlagUntilTimeout>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d03c      	beq.n	800e52e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	e853 3f00 	ldrex	r3, [r3]
 800e4c0:	623b      	str	r3, [r7, #32]
   return(result);
 800e4c2:	6a3b      	ldr	r3, [r7, #32]
 800e4c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4d2:	633b      	str	r3, [r7, #48]	; 0x30
 800e4d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4da:	e841 2300 	strex	r3, r2, [r1]
 800e4de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1e6      	bne.n	800e4b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	e853 3f00 	ldrex	r3, [r3]
 800e4f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f023 0301 	bic.w	r3, r3, #1
 800e4fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3308      	adds	r3, #8
 800e504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e506:	61fa      	str	r2, [r7, #28]
 800e508:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50a:	69b9      	ldr	r1, [r7, #24]
 800e50c:	69fa      	ldr	r2, [r7, #28]
 800e50e:	e841 2300 	strex	r3, r2, [r1]
 800e512:	617b      	str	r3, [r7, #20]
   return(result);
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1e5      	bne.n	800e4e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2220      	movs	r2, #32
 800e51e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	e012      	b.n	800e554 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2220      	movs	r2, #32
 800e532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2220      	movs	r2, #32
 800e53a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3758      	adds	r7, #88	; 0x58
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	603b      	str	r3, [r7, #0]
 800e568:	4613      	mov	r3, r2
 800e56a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e56c:	e04f      	b.n	800e60e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e574:	d04b      	beq.n	800e60e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e576:	f7fa fcbb 	bl	8008ef0 <HAL_GetTick>
 800e57a:	4602      	mov	r2, r0
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	69ba      	ldr	r2, [r7, #24]
 800e582:	429a      	cmp	r2, r3
 800e584:	d302      	bcc.n	800e58c <UART_WaitOnFlagUntilTimeout+0x30>
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d101      	bne.n	800e590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e58c:	2303      	movs	r3, #3
 800e58e:	e04e      	b.n	800e62e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f003 0304 	and.w	r3, r3, #4
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d037      	beq.n	800e60e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	2b80      	cmp	r3, #128	; 0x80
 800e5a2:	d034      	beq.n	800e60e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2b40      	cmp	r3, #64	; 0x40
 800e5a8:	d031      	beq.n	800e60e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	69db      	ldr	r3, [r3, #28]
 800e5b0:	f003 0308 	and.w	r3, r3, #8
 800e5b4:	2b08      	cmp	r3, #8
 800e5b6:	d110      	bne.n	800e5da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2208      	movs	r2, #8
 800e5be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f000 f838 	bl	800e636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2208      	movs	r2, #8
 800e5ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e029      	b.n	800e62e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	69db      	ldr	r3, [r3, #28]
 800e5e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5e8:	d111      	bne.n	800e60e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f000 f81e 	bl	800e636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2220      	movs	r2, #32
 800e5fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e60a:	2303      	movs	r3, #3
 800e60c:	e00f      	b.n	800e62e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	69da      	ldr	r2, [r3, #28]
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	4013      	ands	r3, r2
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	bf0c      	ite	eq
 800e61e:	2301      	moveq	r3, #1
 800e620:	2300      	movne	r3, #0
 800e622:	b2db      	uxtb	r3, r3
 800e624:	461a      	mov	r2, r3
 800e626:	79fb      	ldrb	r3, [r7, #7]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d0a0      	beq.n	800e56e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e62c:	2300      	movs	r3, #0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e636:	b480      	push	{r7}
 800e638:	b095      	sub	sp, #84	; 0x54
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e646:	e853 3f00 	ldrex	r3, [r3]
 800e64a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e652:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	461a      	mov	r2, r3
 800e65a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e65c:	643b      	str	r3, [r7, #64]	; 0x40
 800e65e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e660:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e664:	e841 2300 	strex	r3, r2, [r1]
 800e668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d1e6      	bne.n	800e63e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	3308      	adds	r3, #8
 800e676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e678:	6a3b      	ldr	r3, [r7, #32]
 800e67a:	e853 3f00 	ldrex	r3, [r3]
 800e67e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e686:	f023 0301 	bic.w	r3, r3, #1
 800e68a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3308      	adds	r3, #8
 800e692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e694:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e69a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e69c:	e841 2300 	strex	r3, r2, [r1]
 800e6a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d1e3      	bne.n	800e670 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d118      	bne.n	800e6e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	e853 3f00 	ldrex	r3, [r3]
 800e6bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	f023 0310 	bic.w	r3, r3, #16
 800e6c4:	647b      	str	r3, [r7, #68]	; 0x44
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ce:	61bb      	str	r3, [r7, #24]
 800e6d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d2:	6979      	ldr	r1, [r7, #20]
 800e6d4:	69ba      	ldr	r2, [r7, #24]
 800e6d6:	e841 2300 	strex	r3, r2, [r1]
 800e6da:	613b      	str	r3, [r7, #16]
   return(result);
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1e6      	bne.n	800e6b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2220      	movs	r2, #32
 800e6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e6f6:	bf00      	nop
 800e6f8:	3754      	adds	r7, #84	; 0x54
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e702:	b580      	push	{r7, lr}
 800e704:	b084      	sub	sp, #16
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e70e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2200      	movs	r2, #0
 800e714:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f7ff fabd 	bl	800dca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e726:	bf00      	nop
 800e728:	3710      	adds	r7, #16
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b088      	sub	sp, #32
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	e853 3f00 	ldrex	r3, [r3]
 800e742:	60bb      	str	r3, [r7, #8]
   return(result);
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e74a:	61fb      	str	r3, [r7, #28]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	461a      	mov	r2, r3
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	61bb      	str	r3, [r7, #24]
 800e756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e758:	6979      	ldr	r1, [r7, #20]
 800e75a:	69ba      	ldr	r2, [r7, #24]
 800e75c:	e841 2300 	strex	r3, r2, [r1]
 800e760:	613b      	str	r3, [r7, #16]
   return(result);
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d1e6      	bne.n	800e736 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2220      	movs	r2, #32
 800e76c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2200      	movs	r2, #0
 800e774:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7ff fa88 	bl	800dc8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e77c:	bf00      	nop
 800e77e:	3720      	adds	r7, #32
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d101      	bne.n	800e7d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800e7d2:	2302      	movs	r3, #2
 800e7d4:	e027      	b.n	800e826 <HAL_UARTEx_DisableFifoMode+0x66>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2224      	movs	r2, #36	; 0x24
 800e7e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f022 0201 	bic.w	r2, r2, #1
 800e7fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e804:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2220      	movs	r2, #32
 800e818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e824:	2300      	movs	r3, #0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3714      	adds	r7, #20
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b084      	sub	sp, #16
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
 800e83a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e842:	2b01      	cmp	r3, #1
 800e844:	d101      	bne.n	800e84a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e846:	2302      	movs	r3, #2
 800e848:	e02d      	b.n	800e8a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2201      	movs	r2, #1
 800e84e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2224      	movs	r2, #36	; 0x24
 800e856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f022 0201 	bic.w	r2, r2, #1
 800e870:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	683a      	ldr	r2, [r7, #0]
 800e882:	430a      	orrs	r2, r1
 800e884:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f850 	bl	800e92c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2220      	movs	r2, #32
 800e898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e8a4:	2300      	movs	r3, #0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b084      	sub	sp, #16
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
 800e8b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d101      	bne.n	800e8c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e8c2:	2302      	movs	r3, #2
 800e8c4:	e02d      	b.n	800e922 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2224      	movs	r2, #36	; 0x24
 800e8d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f022 0201 	bic.w	r2, r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	430a      	orrs	r2, r1
 800e900:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 f812 	bl	800e92c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	68fa      	ldr	r2, [r7, #12]
 800e90e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2220      	movs	r2, #32
 800e914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
	...

0800e92c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d108      	bne.n	800e94e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2201      	movs	r2, #1
 800e940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e94c:	e031      	b.n	800e9b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e94e:	2308      	movs	r3, #8
 800e950:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e952:	2308      	movs	r3, #8
 800e954:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	0e5b      	lsrs	r3, r3, #25
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	f003 0307 	and.w	r3, r3, #7
 800e964:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	0f5b      	lsrs	r3, r3, #29
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	f003 0307 	and.w	r3, r3, #7
 800e974:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e976:	7bbb      	ldrb	r3, [r7, #14]
 800e978:	7b3a      	ldrb	r2, [r7, #12]
 800e97a:	4911      	ldr	r1, [pc, #68]	; (800e9c0 <UARTEx_SetNbDataToProcess+0x94>)
 800e97c:	5c8a      	ldrb	r2, [r1, r2]
 800e97e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e982:	7b3a      	ldrb	r2, [r7, #12]
 800e984:	490f      	ldr	r1, [pc, #60]	; (800e9c4 <UARTEx_SetNbDataToProcess+0x98>)
 800e986:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e988:	fb93 f3f2 	sdiv	r3, r3, r2
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e994:	7bfb      	ldrb	r3, [r7, #15]
 800e996:	7b7a      	ldrb	r2, [r7, #13]
 800e998:	4909      	ldr	r1, [pc, #36]	; (800e9c0 <UARTEx_SetNbDataToProcess+0x94>)
 800e99a:	5c8a      	ldrb	r2, [r1, r2]
 800e99c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9a0:	7b7a      	ldrb	r2, [r7, #13]
 800e9a2:	4908      	ldr	r1, [pc, #32]	; (800e9c4 <UARTEx_SetNbDataToProcess+0x98>)
 800e9a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e9b2:	bf00      	nop
 800e9b4:	3714      	adds	r7, #20
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	08016ad8 	.word	0x08016ad8
 800e9c4:	08016ae0 	.word	0x08016ae0

0800e9c8 <_ZN17AbstractAllocatorD1Ev>:
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	4a04      	ldr	r2, [pc, #16]	; (800e9e4 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	08016a6c 	.word	0x08016a6c

0800e9e8 <_ZN17AbstractAllocatorD0Ev>:
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7ff ffe9 	bl	800e9c8 <_ZN17AbstractAllocatorD1Ev>
 800e9f6:	2108      	movs	r1, #8
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f002 fe7a 	bl	80116f2 <_ZdlPvj>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	4618      	mov	r0, r3
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include <cyphal/allocators/sys/sys_allocator.h>
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b086      	sub	sp, #24
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f002 fec5 	bl	80117a4 <malloc>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d105      	bne.n	800ea30 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	3310      	adds	r3, #16
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7f8 fa6c 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 800ea30:	697b      	ldr	r3, [r7, #20]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3718      	adds	r7, #24
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b084      	sub	sp, #16
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	60f8      	str	r0, [r7, #12]
 800ea42:	60b9      	str	r1, [r7, #8]
 800ea44:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f002 feb4 	bl	80117b4 <free>
}
 800ea4c:	bf00      	nop
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	4a05      	ldr	r2, [pc, #20]	; (800ea74 <_ZN15SystemAllocatorD1Ev+0x20>)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7ff ffaf 	bl	800e9c8 <_ZN17AbstractAllocatorD1Ev>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	08016af0 	.word	0x08016af0

0800ea78 <_ZN15SystemAllocatorD0Ev>:
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7ff ffe7 	bl	800ea54 <_ZN15SystemAllocatorD1Ev>
 800ea86:	2108      	movs	r1, #8
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f002 fe32 	bl	80116f2 <_ZdlPvj>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 800ea98:	b590      	push	{r4, r7, lr}
 800ea9a:	b08b      	sub	sp, #44	; 0x2c
 800ea9c:	af04      	add	r7, sp, #16
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	3308      	adds	r3, #8
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f000 f876 	bl	800eb9a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800eaae:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800eab0:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	3308      	adds	r3, #8
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 f86e 	bl	800eb9a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800eabe:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800eac0:	f103 0120 	add.w	r1, r3, #32
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	9302      	str	r3, [sp, #8]
 800eac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaca:	9301      	str	r3, [sp, #4]
 800eacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ead4:	4620      	mov	r0, r4
 800ead6:	f002 fb65 	bl	80111a4 <canardTxPush>
 800eada:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	f113 0f03 	cmn.w	r3, #3
 800eae2:	d106      	bne.n	800eaf2 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	3310      	adds	r3, #16
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7f8 fa0c 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 800eaf0:	e008      	b.n	800eb04 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	da05      	bge.n	800eb04 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	3310      	adds	r3, #16
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7f8 fa02 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800eb04:	371c      	adds	r7, #28
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd90      	pop	{r4, r7, pc}
	...

0800eb0c <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 800eb0c:	b590      	push	{r4, r7, lr}
 800eb0e:	b089      	sub	sp, #36	; 0x24
 800eb10:	af04      	add	r7, sp, #16
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	607a      	str	r2, [r7, #4]
 800eb16:	461a      	mov	r2, r3
 800eb18:	460b      	mov	r3, r1
 800eb1a:	817b      	strh	r3, [r7, #10]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	3308      	adds	r3, #8
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 f838 	bl	800eb9a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800eb2a:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 800eb2c:	f103 0020 	add.w	r0, r3, #32
 800eb30:	897c      	ldrh	r4, [r7, #10]
 800eb32:	7a79      	ldrb	r1, [r7, #9]
 800eb34:	6a3b      	ldr	r3, [r7, #32]
 800eb36:	9302      	str	r3, [sp, #8]
 800eb38:	4a0d      	ldr	r2, [pc, #52]	; (800eb70 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 800eb3a:	f04f 0300 	mov.w	r3, #0
 800eb3e:	e9cd 2300 	strd	r2, r3, [sp]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4622      	mov	r2, r4
 800eb46:	f002 fc7d 	bl	8011444 <canardRxSubscribe>
 800eb4a:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	bf14      	ite	ne
 800eb50:	2301      	movne	r3, #1
 800eb52:	2300      	moveq	r3, #0
 800eb54:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d005      	beq.n	800eb66 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	3310      	adds	r3, #16
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7f8 f9d1 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
    }
}
 800eb66:	bf00      	nop
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd90      	pop	{r4, r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	001e8480 	.word	0x001e8480

0800eb74 <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	4618      	mov	r0, r3
 800eb82:	f000 f80a 	bl	800eb9a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800eb86:	4603      	mov	r3, r0
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	3208      	adds	r2, #8
 800eb8c:	6812      	ldr	r2, [r2, #0]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	4790      	blx	r2
}
 800eb92:	bf00      	nop
 800eb94:	3708      	adds	r7, #8
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b082      	sub	sp, #8
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
	return get();
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 f805 	bl	800ebb2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800eba8:	4603      	mov	r3, r0
      }
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b082      	sub	sp, #8
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f000 f805 	bl	800ebcc <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 f806 	bl	800ebe8 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 f805 	bl	800ec02 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b082      	sub	sp, #8
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 f805 	bl	800ec1a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ec10:	4603      	mov	r3, r0
 800ec12:	4618      	mov	r0, r3
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b082      	sub	sp, #8
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 f805 	bl	800ec34 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	370c      	adds	r7, #12
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr

0800ec4a <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 800ec4a:	b480      	push	{r7}
 800ec4c:	b085      	sub	sp, #20
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	0c1b      	lsrs	r3, r3, #16
 800ec56:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 800ec58:	7bfb      	ldrb	r3, [r7, #15]
 800ec5a:	2b08      	cmp	r3, #8
 800ec5c:	d801      	bhi.n	800ec62 <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 800ec5e:	7bfb      	ldrb	r3, [r7, #15]
 800ec60:	e009      	b.n	800ec76 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 800ec62:	7bfb      	ldrb	r3, [r7, #15]
 800ec64:	2b0c      	cmp	r3, #12
 800ec66:	d803      	bhi.n	800ec70 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 800ec68:	7bfb      	ldrb	r3, [r7, #15]
 800ec6a:	3b06      	subs	r3, #6
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	e002      	b.n	800ec76 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 800ec70:	7bfb      	ldrb	r3, [r7, #15]
 800ec72:	3b0b      	subs	r3, #11
 800ec74:	011b      	lsls	r3, r3, #4
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3714      	adds	r7, #20
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr
	...

0800ec84 <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 800ec84:	f1a0 0308 	sub.w	r3, r0, #8
 800ec88:	4a07      	ldr	r2, [pc, #28]	; (800eca8 <_ZL12delay_cyclest+0x24>)
 800ec8a:	fb82 1203 	smull	r1, r2, r2, r3
 800ec8e:	17db      	asrs	r3, r3, #31
 800ec90:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 800ec94:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800ec98:	d004      	beq.n	800eca4 <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 800ec9a:	bf00      	nop
    while (real_cycles--) {
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800eca2:	d1fa      	bne.n	800ec9a <_ZL12delay_cyclest+0x16>
    }
}
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	66666667 	.word	0x66666667

0800ecac <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include <cyphal/providers/FDCAN_generic.h>

uint32_t G4CAN::len_to_dlc(size_t len) {
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 800ecb6:	4a05      	ldr	r2, [pc, #20]	; (800eccc <_ZN5G4CAN10len_to_dlcEj+0x20>)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	370c      	adds	r7, #12
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	08016b00 	.word	0x08016b00

0800ecd0 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 800ecda:	6838      	ldr	r0, [r7, #0]
 800ecdc:	f7ff ffb5 	bl	800ec4a <_Z16fdcan_dlc_to_lenm>
 800ece0:	4603      	mov	r3, r0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b086      	sub	sp, #24
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800ecf2:	e017      	b.n	800ed24 <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	330c      	adds	r3, #12
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f107 0208 	add.w	r2, r7, #8
 800ed00:	4611      	mov	r1, r2
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	4798      	blx	r3
 800ed06:	4603      	mov	r3, r0
 800ed08:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 800ed0a:	7dfb      	ldrb	r3, [r7, #23]
 800ed0c:	f083 0301 	eor.w	r3, r3, #1
 800ed10:	b2db      	uxtb	r3, r3
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d115      	bne.n	800ed42 <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f107 0208 	add.w	r2, r7, #8
 800ed1c:	4611      	mov	r1, r2
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f000 f904 	bl	800ef2c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed28:	2140      	movs	r1, #64	; 0x40
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fb f814 	bl	8009d58 <HAL_FDCAN_GetRxFifoFillLevel>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	bf14      	ite	ne
 800ed36:	2301      	movne	r3, #1
 800ed38:	2300      	moveq	r3, #0
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1d9      	bne.n	800ecf4 <_ZN5G4CAN8can_loopEv+0xa>
 800ed40:	e000      	b.n	800ed44 <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 800ed42:	bf00      	nop
    }

    process_canard_tx();
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	4618      	mov	r0, r3
 800ed48:	f000 f944 	bl	800efd4 <_ZN19AbstractCANProvider17process_canard_txEv>
}
 800ed4c:	bf00      	nop
 800ed4e:	3718      	adds	r7, #24
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};
bool G4CAN::read_frame(CanardFrame* rxf) {
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b08e      	sub	sp, #56	; 0x38
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
    uint32_t rx_fifo = -1;
 800ed5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed62:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed68:	2140      	movs	r1, #64	; 0x40
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fa fff4 	bl	8009d58 <HAL_FDCAN_GetRxFifoFillLevel>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	bf14      	ite	ne
 800ed76:	2301      	movne	r3, #1
 800ed78:	2300      	moveq	r3, #0
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d002      	beq.n	800ed86 <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 800ed80:	2340      	movs	r3, #64	; 0x40
 800ed82:	637b      	str	r3, [r7, #52]	; 0x34
 800ed84:	e00f      	b.n	800eda6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed8a:	2141      	movs	r1, #65	; 0x41
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fa ffe3 	bl	8009d58 <HAL_FDCAN_GetRxFifoFillLevel>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	bf14      	ite	ne
 800ed98:	2301      	movne	r3, #1
 800ed9a:	2300      	moveq	r3, #0
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 800eda2:	2341      	movs	r3, #65	; 0x41
 800eda4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 800eda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edac:	d101      	bne.n	800edb2 <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 800edae:	2300      	movs	r3, #0
 800edb0:	e02e      	b.n	800ee10 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 800edb2:	f107 030c 	add.w	r3, r7, #12
 800edb6:	2228      	movs	r2, #40	; 0x28
 800edb8:	2100      	movs	r1, #0
 800edba:	4618      	mov	r0, r3
 800edbc:	f003 fd85 	bl	80128ca <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800edc4:	f107 020c 	add.w	r2, r7, #12
 800edc8:	4b13      	ldr	r3, [pc, #76]	; (800ee18 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800edca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800edcc:	f7fa feea 	bl	8009ba4 <HAL_FDCAN_GetRxMessage>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	bf14      	ite	ne
 800edd6:	2301      	movne	r3, #1
 800edd8:	2300      	moveq	r3, #0
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d005      	beq.n	800edec <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ede4:	3310      	adds	r3, #16
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7f8 f88e 	bl	8006f08 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	3304      	adds	r3, #4
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	69ba      	ldr	r2, [r7, #24]
 800edfc:	4611      	mov	r1, r2
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	4798      	blx	r3
 800ee02:	4602      	mov	r2, r0
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	4a03      	ldr	r2, [pc, #12]	; (800ee18 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 800ee0c:	609a      	str	r2, [r3, #8]
    return true;
 800ee0e:	2301      	movs	r3, #1
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3738      	adds	r7, #56	; 0x38
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	200008cc 	.word	0x200008cc

0800ee1c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08c      	sub	sp, #48	; 0x30
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	6a1b      	ldr	r3, [r3, #32]
 800ee2a:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 800ee2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee30:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800ee32:	2300      	movs	r3, #0
 800ee34:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee3a:	4a2a      	ldr	r2, [pc, #168]	; (800eee4 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 800ee3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee40:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800ee42:	2300      	movs	r3, #0
 800ee44:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800ee46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ee4a:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 800ee4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ee50:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 800ee52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ee56:	627b      	str	r3, [r7, #36]	; 0x24
    TxHeader.MessageMarker = 0x0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	62bb      	str	r3, [r7, #40]	; 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee60:	e006      	b.n	800ee70 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 800ee62:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800ee66:	f7ff ff0d 	bl	800ec84 <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 800ee6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fa ff8d 	bl	8009d94 <HAL_FDCAN_GetTxFifoFreeLevel>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b03      	cmp	r3, #3
 800ee7e:	d004      	beq.n	800ee8a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800ee80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee82:	2b02      	cmp	r3, #2
 800ee84:	dc01      	bgt.n	800ee8a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 800ee86:	2301      	movs	r3, #1
 800ee88:	e000      	b.n	800ee8c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1e8      	bne.n	800ee62 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fa ff7d 	bl	8009d94 <HAL_FDCAN_GetTxFifoFreeLevel>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	bf14      	ite	ne
 800eea0:	2301      	movne	r3, #1
 800eea2:	2300      	moveq	r3, #0
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d002      	beq.n	800eeb0 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 800eeaa:	f04f 33ff 	mov.w	r3, #4294967295
 800eeae:	e014      	b.n	800eeda <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eeb8:	f107 0308 	add.w	r3, r7, #8
 800eebc:	4619      	mov	r1, r3
 800eebe:	f7fa fe2d 	bl	8009b1c <HAL_FDCAN_AddMessageToTxFifoQ>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	bf14      	ite	ne
 800eec8:	2301      	movne	r3, #1
 800eeca:	2300      	moveq	r3, #0
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d002      	beq.n	800eed8 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 800eed2:	f04f 33ff 	mov.w	r3, #4294967295
 800eed6:	e000      	b.n	800eeda <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 800eed8:	697b      	ldr	r3, [r7, #20]
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3730      	adds	r7, #48	; 0x30
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	08016b00 	.word	0x08016b00

0800eee8 <_ZN5G4CAND1Ev>:
class G4CAN : public AbstractCANProvider {
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	4a05      	ldr	r2, [pc, #20]	; (800ef08 <_ZN5G4CAND1Ev+0x20>)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	601a      	str	r2, [r3, #0]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 f8b1 	bl	800f060 <_ZN19AbstractCANProviderD1Ev>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4618      	mov	r0, r3
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	08016c0c 	.word	0x08016c0c

0800ef0c <_ZN5G4CAND0Ev>:
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f7ff ffe7 	bl	800eee8 <_ZN5G4CAND1Ev>
 800ef1a:	2144      	movs	r1, #68	; 0x44
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f002 fbe8 	bl	80116f2 <_ZdlPvj>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4618      	mov	r0, r3
 800ef26:	3708      	adds	r7, #8
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 800ef2c:	b590      	push	{r4, r7, lr}
 800ef2e:	b091      	sub	sp, #68	; 0x44
 800ef30:	af04      	add	r7, sp, #16
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 800ef36:	f107 0310 	add.w	r3, r7, #16
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	601a      	str	r2, [r3, #0]
 800ef3e:	605a      	str	r2, [r3, #4]
 800ef40:	609a      	str	r2, [r3, #8]
 800ef42:	60da      	str	r2, [r3, #12]
 800ef44:	611a      	str	r2, [r3, #16]
 800ef46:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	60fb      	str	r3, [r7, #12]

    const int8_t accept_result = canardRxAccept(
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    const int8_t accept_result = canardRxAccept(
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7f7 ffec 	bl	8006f34 <_ZNKSt8functionIFyvEEclEv>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	460b      	mov	r3, r1
 800ef60:	f107 010c 	add.w	r1, r7, #12
 800ef64:	9103      	str	r1, [sp, #12]
 800ef66:	f107 0110 	add.w	r1, r7, #16
 800ef6a:	9102      	str	r1, [sp, #8]
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	9101      	str	r1, [sp, #4]
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	9100      	str	r1, [sp, #0]
 800ef74:	4620      	mov	r0, r4
 800ef76:	f002 f9d5 	bl	8011324 <canardRxAccept>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 1) {
 800ef80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d10e      	bne.n	800efa6 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
        IListener<CanardRxTransfer*>* listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	6a1b      	ldr	r3, [r3, #32]
 800ef8c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (listener != nullptr) {
 800ef8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d010      	beq.n	800efb6 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
            listener->accept(&transfer);
 800ef94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f107 0210 	add.w	r2, r7, #16
 800ef9e:	4611      	mov	r1, r2
 800efa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efa2:	4798      	blx	r3
 800efa4:	e007      	b.n	800efb6 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
        }
    }
    else if (accept_result == 0 || accept_result > 1) {
 800efa6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00e      	beq.n	800efcc <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 800efae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	dc0a      	bgt.n	800efcc <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }

    if (transfer.payload != nullptr) {
 800efb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d008      	beq.n	800efce <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        canard.memory_free(&canard, transfer.payload);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	3220      	adds	r2, #32
 800efc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efc6:	4610      	mov	r0, r2
 800efc8:	4798      	blx	r3
 800efca:	e000      	b.n	800efce <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        return;
 800efcc:	bf00      	nop
    }
}
 800efce:	3734      	adds	r7, #52	; 0x34
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd90      	pop	{r4, r7, pc}

0800efd4 <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 800efd4:	b5b0      	push	{r4, r5, r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 800efdc:	e036      	b.n	800f04c <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	330c      	adds	r3, #12
 800efe2:	4618      	mov	r0, r3
 800efe4:	f002 f968 	bl	80112b8 <canardTxPeek>
 800efe8:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	d00c      	beq.n	800f00e <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800effe:	4618      	mov	r0, r3
 800f000:	f7f7 ff98 	bl	8006f34 <_ZNKSt8functionIFyvEEclEv>
 800f004:	4602      	mov	r2, r0
 800f006:	460b      	mov	r3, r1
 800f008:	42a2      	cmp	r2, r4
 800f00a:	41ab      	sbcs	r3, r5
 800f00c:	d201      	bcs.n	800f012 <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 800f00e:	2301      	movs	r3, #1
 800f010:	e000      	b.n	800f014 <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 800f012:	2300      	movs	r3, #0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00a      	beq.n	800f02e <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	3310      	adds	r3, #16
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	68f9      	ldr	r1, [r7, #12]
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	4798      	blx	r3
 800f026:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	db13      	blt.n	800f056 <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f103 0520 	add.w	r5, r3, #32
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	330c      	adds	r3, #12
 800f03c:	68f9      	ldr	r1, [r7, #12]
 800f03e:	4618      	mov	r0, r3
 800f040:	f002 f94f 	bl	80112e2 <canardTxPop>
 800f044:	4603      	mov	r3, r0
 800f046:	4619      	mov	r1, r3
 800f048:	4628      	mov	r0, r5
 800f04a:	47a0      	blx	r4
    while (queue.size != 0) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d1c4      	bne.n	800efde <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 800f054:	e000      	b.n	800f058 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 800f056:	bf00      	nop
}
 800f058:	bf00      	nop
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bdb0      	pop	{r4, r5, r7, pc}

0800f060 <_ZN19AbstractCANProviderD1Ev>:

AbstractCANProvider::~AbstractCANProvider() {
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	4a04      	ldr	r2, [pc, #16]	; (800f07c <_ZN19AbstractCANProviderD1Ev+0x1c>)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	601a      	str	r2, [r3, #0]

}
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4618      	mov	r0, r3
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr
 800f07c:	08016c30 	.word	0x08016c30

0800f080 <_Z41__static_initialization_and_destruction_0ii>:
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d107      	bne.n	800f0a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f096:	4293      	cmp	r3, r2
 800f098:	d102      	bne.n	800f0a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800f09a:	4803      	ldr	r0, [pc, #12]	; (800f0a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800f09c:	f000 f806 	bl	800f0ac <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	2000090c 	.word	0x2000090c

0800f0ac <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f0ac:	b590      	push	{r4, r7, lr}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7f8 fe50 	bl	8007d5c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800f0bc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00c      	beq.n	800f0e0 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f7f8 fd15 	bl	8007af6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7f8 fda2 	bl	8007c18 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4619      	mov	r1, r3
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f7f8 fe4b 	bl	8007d76 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	601a      	str	r2, [r3, #0]
      }
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3714      	adds	r7, #20
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd90      	pop	{r4, r7, pc}

0800f0f0 <_GLOBAL__sub_I_queue>:
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f0f8:	2001      	movs	r0, #1
 800f0fa:	f7ff ffc1 	bl	800f080 <_Z41__static_initialization_and_destruction_0ii>
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <_GLOBAL__sub_D_queue>:
 800f100:	b580      	push	{r7, lr}
 800f102:	af00      	add	r7, sp, #0
 800f104:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f108:	2000      	movs	r0, #0
 800f10a:	f7ff ffb9 	bl	800f080 <_Z41__static_initialization_and_destruction_0ii>
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	460b      	mov	r3, r1
 800f11a:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800f11c:	2300      	movs	r3, #0
 800f11e:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800f124:	e007      	b.n	800f136 <cavlFindExtremum+0x26>
    {
        result = c;
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800f12a:	78fb      	ldrb	r3, [r7, #3]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	4413      	add	r3, r2
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1f4      	bne.n	800f126 <cavlFindExtremum+0x16>
    }
    return result;
 800f13c:	68fb      	ldr	r3, [r7, #12]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3714      	adds	r7, #20
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
	...

0800f14c <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	460b      	mov	r3, r1
 800f156:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d014      	beq.n	800f188 <cavlPrivateRotate+0x3c>
 800f15e:	78fb      	ldrb	r3, [r7, #3]
 800f160:	f083 0301 	eor.w	r3, r3, #1
 800f164:	b2db      	uxtb	r3, r3
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	4413      	add	r3, r2
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00a      	beq.n	800f188 <cavlPrivateRotate+0x3c>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f17c:	db04      	blt.n	800f188 <cavlPrivateRotate+0x3c>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f184:	2b01      	cmp	r3, #1
 800f186:	dd05      	ble.n	800f194 <cavlPrivateRotate+0x48>
 800f188:	4b2a      	ldr	r3, [pc, #168]	; (800f234 <cavlPrivateRotate+0xe8>)
 800f18a:	4a2b      	ldr	r2, [pc, #172]	; (800f238 <cavlPrivateRotate+0xec>)
 800f18c:	2162      	movs	r1, #98	; 0x62
 800f18e:	482b      	ldr	r0, [pc, #172]	; (800f23c <cavlPrivateRotate+0xf0>)
 800f190:	f002 fad8 	bl	8011744 <__assert_func>
    Cavl* const z = x->lr[!r];
 800f194:	78fb      	ldrb	r3, [r7, #3]
 800f196:	f083 0301 	eor.w	r3, r3, #1
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	009b      	lsls	r3, r3, #2
 800f1a0:	4413      	add	r3, r2
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00e      	beq.n	800f1cc <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	6879      	ldr	r1, [r7, #4]
 800f1ba:	4299      	cmp	r1, r3
 800f1bc:	bf0c      	ite	eq
 800f1be:	2301      	moveq	r3, #1
 800f1c0:	2300      	movne	r3, #0
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	4413      	add	r3, r2
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800f1da:	78fb      	ldrb	r3, [r7, #3]
 800f1dc:	78fa      	ldrb	r2, [r7, #3]
 800f1de:	f082 0201 	eor.w	r2, r2, #1
 800f1e2:	b2d2      	uxtb	r2, r2
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	4413      	add	r3, r2
 800f1ec:	685a      	ldr	r2, [r3, #4]
 800f1ee:	6879      	ldr	r1, [r7, #4]
 800f1f0:	0083      	lsls	r3, r0, #2
 800f1f2:	440b      	add	r3, r1
 800f1f4:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800f1f6:	78fb      	ldrb	r3, [r7, #3]
 800f1f8:	f083 0301 	eor.w	r3, r3, #1
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	4413      	add	r3, r2
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d009      	beq.n	800f21e <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800f20a:	78fb      	ldrb	r3, [r7, #3]
 800f20c:	f083 0301 	eor.w	r3, r3, #1
 800f210:	b2db      	uxtb	r3, r3
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4413      	add	r3, r2
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800f21e:	78fb      	ldrb	r3, [r7, #3]
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	4413      	add	r3, r2
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	605a      	str	r2, [r3, #4]
}
 800f22a:	bf00      	nop
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	08015f78 	.word	0x08015f78
 800f238:	08016fb8 	.word	0x08016fb8
 800f23c:	08015fc0 	.word	0x08015fc0

0800f240 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b086      	sub	sp, #24
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	460b      	mov	r3, r1
 800f24a:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00a      	beq.n	800f268 <cavlPrivateAdjustBalance+0x28>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25c:	db04      	blt.n	800f268 <cavlPrivateAdjustBalance+0x28>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f264:	2b01      	cmp	r3, #1
 800f266:	dd05      	ble.n	800f274 <cavlPrivateAdjustBalance+0x34>
 800f268:	4b61      	ldr	r3, [pc, #388]	; (800f3f0 <cavlPrivateAdjustBalance+0x1b0>)
 800f26a:	4a62      	ldr	r2, [pc, #392]	; (800f3f4 <cavlPrivateAdjustBalance+0x1b4>)
 800f26c:	2177      	movs	r1, #119	; 0x77
 800f26e:	4862      	ldr	r0, [pc, #392]	; (800f3f8 <cavlPrivateAdjustBalance+0x1b8>)
 800f270:	f002 fa68 	bl	8011744 <__assert_func>
    Cavl*        out    = x;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	78fa      	ldrb	r2, [r7, #3]
 800f282:	2a00      	cmp	r2, #0
 800f284:	d001      	beq.n	800f28a <cavlPrivateAdjustBalance+0x4a>
 800f286:	2201      	movs	r2, #1
 800f288:	e000      	b.n	800f28c <cavlPrivateAdjustBalance+0x4c>
 800f28a:	22ff      	movs	r2, #255	; 0xff
 800f28c:	4413      	add	r3, r2
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800f292:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29a:	db04      	blt.n	800f2a6 <cavlPrivateAdjustBalance+0x66>
 800f29c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	f340 809c 	ble.w	800f3de <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800f2a6:	7cfb      	ldrb	r3, [r7, #19]
 800f2a8:	09db      	lsrs	r3, r3, #7
 800f2aa:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800f2ac:	7cbb      	ldrb	r3, [r7, #18]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d001      	beq.n	800f2b6 <cavlPrivateAdjustBalance+0x76>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e001      	b.n	800f2ba <cavlPrivateAdjustBalance+0x7a>
 800f2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ba:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800f2bc:	7cbb      	ldrb	r3, [r7, #18]
 800f2be:	f083 0301 	eor.w	r3, r3, #1
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	4413      	add	r3, r2
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d105      	bne.n	800f2e0 <cavlPrivateAdjustBalance+0xa0>
 800f2d4:	4b49      	ldr	r3, [pc, #292]	; (800f3fc <cavlPrivateAdjustBalance+0x1bc>)
 800f2d6:	4a47      	ldr	r2, [pc, #284]	; (800f3f4 <cavlPrivateAdjustBalance+0x1b4>)
 800f2d8:	217f      	movs	r1, #127	; 0x7f
 800f2da:	4847      	ldr	r0, [pc, #284]	; (800f3f8 <cavlPrivateAdjustBalance+0x1b8>)
 800f2dc:	f002 fa32 	bl	8011744 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800f2ec:	fb02 f303 	mul.w	r3, r2, r3
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	dc1c      	bgt.n	800f32e <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800f2f8:	7cbb      	ldrb	r3, [r7, #18]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff ff25 	bl	800f14c <cavlPrivateRotate>
            if (0 == z->bf)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d109      	bne.n	800f320 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800f30c:	7c7b      	ldrb	r3, [r7, #17]
 800f30e:	425b      	negs	r3, r3
 800f310:	b2db      	uxtb	r3, r3
 800f312:	b25a      	sxtb	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	7c7a      	ldrb	r2, [r7, #17]
 800f31c:	731a      	strb	r2, [r3, #12]
    {
 800f31e:	e061      	b.n	800f3e4 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2200      	movs	r2, #0
 800f32a:	731a      	strb	r2, [r3, #12]
    {
 800f32c:	e05a      	b.n	800f3e4 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800f32e:	7cbb      	ldrb	r3, [r7, #18]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	4413      	add	r3, r2
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d105      	bne.n	800f34c <cavlPrivateAdjustBalance+0x10c>
 800f340:	4b2f      	ldr	r3, [pc, #188]	; (800f400 <cavlPrivateAdjustBalance+0x1c0>)
 800f342:	4a2c      	ldr	r2, [pc, #176]	; (800f3f4 <cavlPrivateAdjustBalance+0x1b4>)
 800f344:	2192      	movs	r1, #146	; 0x92
 800f346:	482c      	ldr	r0, [pc, #176]	; (800f3f8 <cavlPrivateAdjustBalance+0x1b8>)
 800f348:	f002 f9fc 	bl	8011744 <__assert_func>
            out = y;
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800f350:	7cbb      	ldrb	r3, [r7, #18]
 800f352:	2b00      	cmp	r3, #0
 800f354:	bf14      	ite	ne
 800f356:	2301      	movne	r3, #1
 800f358:	2300      	moveq	r3, #0
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	f083 0301 	eor.w	r3, r3, #1
 800f360:	b2db      	uxtb	r3, r3
 800f362:	f003 0301 	and.w	r3, r3, #1
 800f366:	b2db      	uxtb	r3, r3
 800f368:	4619      	mov	r1, r3
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f7ff feee 	bl	800f14c <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800f370:	7cbb      	ldrb	r3, [r7, #18]
 800f372:	4619      	mov	r1, r3
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7ff fee9 	bl	800f14c <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f380:	461a      	mov	r2, r3
 800f382:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800f386:	fb02 f303 	mul.w	r3, r2, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	da09      	bge.n	800f3a2 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	7c7a      	ldrb	r2, [r7, #17]
 800f392:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	2200      	movs	r2, #0
 800f398:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2200      	movs	r2, #0
 800f39e:	731a      	strb	r2, [r3, #12]
    {
 800f3a0:	e020      	b.n	800f3e4 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800f3ae:	fb02 f303 	mul.w	r3, r2, r3
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	dd0c      	ble.n	800f3d0 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800f3c2:	7c7b      	ldrb	r3, [r7, #17]
 800f3c4:	425b      	negs	r3, r3
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	b25a      	sxtb	r2, r3
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	731a      	strb	r2, [r3, #12]
    {
 800f3ce:	e009      	b.n	800f3e4 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	731a      	strb	r2, [r3, #12]
    {
 800f3dc:	e002      	b.n	800f3e4 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	7cfa      	ldrb	r2, [r7, #19]
 800f3e2:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800f3e4:	697b      	ldr	r3, [r7, #20]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3718      	adds	r7, #24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	08015fec 	.word	0x08015fec
 800f3f4:	08016f9c 	.word	0x08016f9c
 800f3f8:	08015fc0 	.word	0x08015fc0
 800f3fc:	0801601c 	.word	0x0801601c
 800f400:	08016028 	.word	0x08016028

0800f404 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b086      	sub	sp, #24
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d004      	beq.n	800f41c <cavlPrivateRetraceOnGrowth+0x18>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d005      	beq.n	800f428 <cavlPrivateRetraceOnGrowth+0x24>
 800f41c:	4b23      	ldr	r3, [pc, #140]	; (800f4ac <cavlPrivateRetraceOnGrowth+0xa8>)
 800f41e:	4a24      	ldr	r2, [pc, #144]	; (800f4b0 <cavlPrivateRetraceOnGrowth+0xac>)
 800f420:	21b5      	movs	r1, #181	; 0xb5
 800f422:	4824      	ldr	r0, [pc, #144]	; (800f4b4 <cavlPrivateRetraceOnGrowth+0xb0>)
 800f424:	f002 f98e 	bl	8011744 <__assert_func>
    Cavl* c = added;      // Child
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800f432:	e023      	b.n	800f47c <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	697a      	ldr	r2, [r7, #20]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	bf0c      	ite	eq
 800f43e:	2301      	moveq	r3, #1
 800f440:	2300      	movne	r3, #0
 800f442:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800f444:	7bfb      	ldrb	r3, [r7, #15]
 800f446:	693a      	ldr	r2, [r7, #16]
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	4413      	add	r3, r2
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	697a      	ldr	r2, [r7, #20]
 800f450:	429a      	cmp	r2, r3
 800f452:	d005      	beq.n	800f460 <cavlPrivateRetraceOnGrowth+0x5c>
 800f454:	4b18      	ldr	r3, [pc, #96]	; (800f4b8 <cavlPrivateRetraceOnGrowth+0xb4>)
 800f456:	4a16      	ldr	r2, [pc, #88]	; (800f4b0 <cavlPrivateRetraceOnGrowth+0xac>)
 800f458:	21bb      	movs	r1, #187	; 0xbb
 800f45a:	4816      	ldr	r0, [pc, #88]	; (800f4b4 <cavlPrivateRetraceOnGrowth+0xb0>)
 800f45c:	f002 f972 	bl	8011744 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800f460:	7bfb      	ldrb	r3, [r7, #15]
 800f462:	4619      	mov	r1, r3
 800f464:	6938      	ldr	r0, [r7, #16]
 800f466:	f7ff feeb 	bl	800f240 <cavlPrivateAdjustBalance>
 800f46a:	6178      	str	r0, [r7, #20]
        p = c->up;
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d003      	beq.n	800f484 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1d8      	bne.n	800f434 <cavlPrivateRetraceOnGrowth+0x30>
 800f482:	e000      	b.n	800f486 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800f484:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d105      	bne.n	800f498 <cavlPrivateRetraceOnGrowth+0x94>
 800f48c:	4b0b      	ldr	r3, [pc, #44]	; (800f4bc <cavlPrivateRetraceOnGrowth+0xb8>)
 800f48e:	4a08      	ldr	r2, [pc, #32]	; (800f4b0 <cavlPrivateRetraceOnGrowth+0xac>)
 800f490:	21c3      	movs	r1, #195	; 0xc3
 800f492:	4808      	ldr	r0, [pc, #32]	; (800f4b4 <cavlPrivateRetraceOnGrowth+0xb0>)
 800f494:	f002 f956 	bl	8011744 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d101      	bne.n	800f4a2 <cavlPrivateRetraceOnGrowth+0x9e>
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	e000      	b.n	800f4a4 <cavlPrivateRetraceOnGrowth+0xa0>
 800f4a2:	2300      	movs	r3, #0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3718      	adds	r7, #24
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	08016034 	.word	0x08016034
 800f4b0:	08016f80 	.word	0x08016f80
 800f4b4:	08015fc0 	.word	0x08015fc0
 800f4b8:	08016058 	.word	0x08016058
 800f4bc:	08016068 	.word	0x08016068

0800f4c0 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b08a      	sub	sp, #40	; 0x28
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
 800f4cc:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((root != NULL) && (predicate != NULL))
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d065      	beq.n	800f5a4 <cavlSearch+0xe4>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d062      	beq.n	800f5a4 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800f4e8:	e02f      	b.n	800f54a <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	68b8      	ldr	r0, [r7, #8]
 800f4f4:	4798      	blx	r3
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800f4fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d103      	bne.n	800f50a <cavlSearch+0x4a>
            {
                out = *n;
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800f508:	e023      	b.n	800f552 <cavlSearch+0x92>
            }
            up = *n;
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	bfcc      	ite	gt
 800f51c:	2301      	movgt	r3, #1
 800f51e:	2300      	movle	r3, #0
 800f520:	b2db      	uxtb	r3, r3
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	4413      	add	r3, r2
 800f526:	3304      	adds	r3, #4
 800f528:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00b      	beq.n	800f54a <cavlSearch+0x8a>
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	6a3a      	ldr	r2, [r7, #32]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d005      	beq.n	800f54a <cavlSearch+0x8a>
 800f53e:	4b1c      	ldr	r3, [pc, #112]	; (800f5b0 <cavlSearch+0xf0>)
 800f540:	4a1c      	ldr	r2, [pc, #112]	; (800f5b4 <cavlSearch+0xf4>)
 800f542:	21db      	movs	r1, #219	; 0xdb
 800f544:	481c      	ldr	r0, [pc, #112]	; (800f5b8 <cavlSearch+0xf8>)
 800f546:	f002 f8fd 	bl	8011744 <__assert_func>
        while (*n != NULL)
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1cb      	bne.n	800f4ea <cavlSearch+0x2a>
        }
        if (NULL == out)
 800f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f554:	2b00      	cmp	r3, #0
 800f556:	d125      	bne.n	800f5a4 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d004      	beq.n	800f568 <cavlSearch+0xa8>
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	68b8      	ldr	r0, [r7, #8]
 800f562:	4798      	blx	r3
 800f564:	4603      	mov	r3, r0
 800f566:	e000      	b.n	800f56a <cavlSearch+0xaa>
 800f568:	2300      	movs	r3, #0
 800f56a:	627b      	str	r3, [r7, #36]	; 0x24
            if (out != NULL)
 800f56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d018      	beq.n	800f5a4 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f576:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57a:	2200      	movs	r2, #0
 800f57c:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800f57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f580:	2200      	movs	r2, #0
 800f582:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	6a3a      	ldr	r2, [r7, #32]
 800f588:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58c:	2200      	movs	r2, #0
 800f58e:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800f590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f592:	f7ff ff37 	bl	800f404 <cavlPrivateRetraceOnGrowth>
 800f596:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d002      	beq.n	800f5a4 <cavlSearch+0xe4>
                {
                    *root = rt;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	697a      	ldr	r2, [r7, #20]
 800f5a2:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3728      	adds	r7, #40	; 0x28
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	08016074 	.word	0x08016074
 800f5b4:	08016f74 	.word	0x08016f74
 800f5b8:	08015fc0 	.word	0x08015fc0

0800f5bc <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b088      	sub	sp, #32
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 8116 	beq.w	800f7fa <cavlRemove+0x23e>
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f000 8112 	beq.w	800f7fa <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d105      	bne.n	800f5ea <cavlRemove+0x2e>
 800f5de:	4b89      	ldr	r3, [pc, #548]	; (800f804 <cavlRemove+0x248>)
 800f5e0:	4a89      	ldr	r2, [pc, #548]	; (800f808 <cavlRemove+0x24c>)
 800f5e2:	21f6      	movs	r1, #246	; 0xf6
 800f5e4:	4889      	ldr	r0, [pc, #548]	; (800f80c <cavlRemove+0x250>)
 800f5e6:	f002 f8ad 	bl	8011744 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d10a      	bne.n	800f608 <cavlRemove+0x4c>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	683a      	ldr	r2, [r7, #0]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d005      	beq.n	800f608 <cavlRemove+0x4c>
 800f5fc:	4b84      	ldr	r3, [pc, #528]	; (800f810 <cavlRemove+0x254>)
 800f5fe:	4a82      	ldr	r2, [pc, #520]	; (800f808 <cavlRemove+0x24c>)
 800f600:	21f7      	movs	r1, #247	; 0xf7
 800f602:	4882      	ldr	r0, [pc, #520]	; (800f80c <cavlRemove+0x250>)
 800f604:	f002 f89e 	bl	8011744 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 800f608:	2300      	movs	r3, #0
 800f60a:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800f60c:	2300      	movs	r3, #0
 800f60e:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d073      	beq.n	800f700 <cavlRemove+0x144>
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d06f      	beq.n	800f700 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	2100      	movs	r1, #0
 800f626:	4618      	mov	r0, r3
 800f628:	f7ff fd72 	bl	800f110 <cavlFindExtremum>
 800f62c:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d007      	beq.n	800f644 <cavlRemove+0x88>
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d103      	bne.n	800f644 <cavlRemove+0x88>
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d105      	bne.n	800f650 <cavlRemove+0x94>
 800f644:	4b73      	ldr	r3, [pc, #460]	; (800f814 <cavlRemove+0x258>)
 800f646:	4a70      	ldr	r2, [pc, #448]	; (800f808 <cavlRemove+0x24c>)
 800f648:	21ff      	movs	r1, #255	; 0xff
 800f64a:	4870      	ldr	r0, [pc, #448]	; (800f80c <cavlRemove+0x250>)
 800f64c:	f002 f87a 	bl	8011744 <__assert_func>
            re->bf        = node->bf;
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	683a      	ldr	r2, [r7, #0]
 800f670:	429a      	cmp	r2, r3
 800f672:	d025      	beq.n	800f6c0 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	697a      	ldr	r2, [r7, #20]
 800f680:	429a      	cmp	r2, r3
 800f682:	d006      	beq.n	800f692 <cavlRemove+0xd6>
 800f684:	4b64      	ldr	r3, [pc, #400]	; (800f818 <cavlRemove+0x25c>)
 800f686:	4a60      	ldr	r2, [pc, #384]	; (800f808 <cavlRemove+0x24c>)
 800f688:	f44f 7183 	mov.w	r1, #262	; 0x106
 800f68c:	485f      	ldr	r0, [pc, #380]	; (800f80c <cavlRemove+0x250>)
 800f68e:	f002 f859 	bl	8011744 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	689a      	ldr	r2, [r3, #8]
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d003      	beq.n	800f6aa <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	69fa      	ldr	r2, [r7, #28]
 800f6a8:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	689a      	ldr	r2, [r3, #8]
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	689b      	ldr	r3, [r3, #8]
 800f6b6:	697a      	ldr	r2, [r7, #20]
 800f6b8:	601a      	str	r2, [r3, #0]
                r             = false;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	76fb      	strb	r3, [r7, #27]
 800f6be:	e003      	b.n	800f6c8 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00f      	beq.n	800f6f8 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	6839      	ldr	r1, [r7, #0]
 800f6e4:	4299      	cmp	r1, r3
 800f6e6:	bf0c      	ite	eq
 800f6e8:	2301      	moveq	r3, #1
 800f6ea:	2300      	movne	r3, #0
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	009b      	lsls	r3, r3, #2
 800f6f0:	4413      	add	r3, r2
 800f6f2:	697a      	ldr	r2, [r7, #20]
 800f6f4:	605a      	str	r2, [r3, #4]
        {
 800f6f6:	e046      	b.n	800f786 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	697a      	ldr	r2, [r7, #20]
 800f6fc:	601a      	str	r2, [r3, #0]
        {
 800f6fe:	e042      	b.n	800f786 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	689b      	ldr	r3, [r3, #8]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	bf14      	ite	ne
 800f70e:	2301      	movne	r3, #1
 800f710:	2300      	moveq	r3, #0
 800f712:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800f714:	7cfb      	ldrb	r3, [r7, #19]
 800f716:	683a      	ldr	r2, [r7, #0]
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	4413      	add	r3, r2
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d006      	beq.n	800f730 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800f722:	7cfb      	ldrb	r3, [r7, #19]
 800f724:	683a      	ldr	r2, [r7, #0]
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	4413      	add	r3, r2
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	69fa      	ldr	r2, [r7, #28]
 800f72e:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d020      	beq.n	800f778 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	bf0c      	ite	eq
 800f740:	2301      	moveq	r3, #1
 800f742:	2300      	movne	r3, #0
 800f744:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800f746:	7cfb      	ldrb	r3, [r7, #19]
 800f748:	7ef8      	ldrb	r0, [r7, #27]
 800f74a:	683a      	ldr	r2, [r7, #0]
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	4413      	add	r3, r2
 800f750:	685a      	ldr	r2, [r3, #4]
 800f752:	69f9      	ldr	r1, [r7, #28]
 800f754:	0083      	lsls	r3, r0, #2
 800f756:	440b      	add	r3, r1
 800f758:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800f75a:	7efb      	ldrb	r3, [r7, #27]
 800f75c:	69fa      	ldr	r2, [r7, #28]
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	4413      	add	r3, r2
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00e      	beq.n	800f786 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 800f768:	7efb      	ldrb	r3, [r7, #27]
 800f76a:	69fa      	ldr	r2, [r7, #28]
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	4413      	add	r3, r2
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	69fa      	ldr	r2, [r7, #28]
 800f774:	601a      	str	r2, [r3, #0]
 800f776:	e006      	b.n	800f786 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 800f778:	7cfb      	ldrb	r3, [r7, #19]
 800f77a:	683a      	ldr	r2, [r7, #0]
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	4413      	add	r3, r2
 800f780:	685a      	ldr	r2, [r3, #4]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d036      	beq.n	800f7fa <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800f78c:	2300      	movs	r3, #0
 800f78e:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 800f790:	7efb      	ldrb	r3, [r7, #27]
 800f792:	2b00      	cmp	r3, #0
 800f794:	bf14      	ite	ne
 800f796:	2301      	movne	r3, #1
 800f798:	2300      	moveq	r3, #0
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	f083 0301 	eor.w	r3, r3, #1
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	f003 0301 	and.w	r3, r3, #1
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	69f8      	ldr	r0, [r7, #28]
 800f7ac:	f7ff fd48 	bl	800f240 <cavlPrivateAdjustBalance>
 800f7b0:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d10b      	bne.n	800f7da <cavlRemove+0x21e>
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d008      	beq.n	800f7da <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	689b      	ldr	r3, [r3, #8]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	bf0c      	ite	eq
 800f7d2:	2301      	moveq	r3, #1
 800f7d4:	2300      	movne	r3, #0
 800f7d6:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 800f7d8:	e7da      	b.n	800f790 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d10c      	bne.n	800f7fa <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d106      	bne.n	800f7f4 <cavlRemove+0x238>
 800f7e6:	4b0d      	ldr	r3, [pc, #52]	; (800f81c <cavlRemove+0x260>)
 800f7e8:	4a07      	ldr	r2, [pc, #28]	; (800f808 <cavlRemove+0x24c>)
 800f7ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800f7ee:	4807      	ldr	r0, [pc, #28]	; (800f80c <cavlRemove+0x250>)
 800f7f0:	f001 ffa8 	bl	8011744 <__assert_func>
                *root = c;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800f7fa:	bf00      	nop
 800f7fc:	3720      	adds	r7, #32
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	08016098 	.word	0x08016098
 800f808:	08016ffc 	.word	0x08016ffc
 800f80c:	08015fc0 	.word	0x08015fc0
 800f810:	080160a8 	.word	0x080160a8
 800f814:	080160d0 	.word	0x080160d0
 800f818:	08016108 	.word	0x08016108
 800f81c:	08016068 	.word	0x08016068

0800f820 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800f828:	687b      	ldr	r3, [r7, #4]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	370c      	adds	r7, #12
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr
	...

0800f838 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	460a      	mov	r2, r1
 800f842:	80fb      	strh	r3, [r7, #6]
 800f844:	4613      	mov	r3, r2
 800f846:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800f848:	88fb      	ldrh	r3, [r7, #6]
 800f84a:	021b      	lsls	r3, r3, #8
 800f84c:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800f84e:	88fb      	ldrh	r3, [r7, #6]
 800f850:	0a1b      	lsrs	r3, r3, #8
 800f852:	b299      	uxth	r1, r3
 800f854:	797b      	ldrb	r3, [r7, #5]
 800f856:	b29b      	uxth	r3, r3
 800f858:	404b      	eors	r3, r1
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	4905      	ldr	r1, [pc, #20]	; (800f874 <crcAddByte+0x3c>)
 800f860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800f864:	4053      	eors	r3, r2
 800f866:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800f868:	4618      	mov	r0, r3
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr
 800f874:	08016c4c 	.word	0x08016c4c

0800f878 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b088      	sub	sp, #32
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	4603      	mov	r3, r0
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	607a      	str	r2, [r7, #4]
 800f884:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d108      	bne.n	800f89e <crcAdd+0x26>
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d005      	beq.n	800f89e <crcAdd+0x26>
 800f892:	4b12      	ldr	r3, [pc, #72]	; (800f8dc <crcAdd+0x64>)
 800f894:	4a12      	ldr	r2, [pc, #72]	; (800f8e0 <crcAdd+0x68>)
 800f896:	2185      	movs	r1, #133	; 0x85
 800f898:	4812      	ldr	r0, [pc, #72]	; (800f8e4 <crcAdd+0x6c>)
 800f89a:	f001 ff53 	bl	8011744 <__assert_func>
    TransferCRC    out = crc;
 800f89e:	89fb      	ldrh	r3, [r7, #14]
 800f8a0:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	617b      	str	r3, [r7, #20]
 800f8aa:	e00e      	b.n	800f8ca <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	781a      	ldrb	r2, [r3, #0]
 800f8b0:	8bfb      	ldrh	r3, [r7, #30]
 800f8b2:	4611      	mov	r1, r2
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7ff ffbf 	bl	800f838 <crcAddByte>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	83fb      	strh	r3, [r7, #30]
        ++p;
 800f8be:	69bb      	ldr	r3, [r7, #24]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	617b      	str	r3, [r7, #20]
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d3ec      	bcc.n	800f8ac <crcAdd+0x34>
    }
    return out;
 800f8d2:	8bfb      	ldrh	r3, [r7, #30]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3720      	adds	r7, #32
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	08016118 	.word	0x08016118
 800f8e0:	08016ec8 	.word	0x08016ec8
 800f8e4:	08016140 	.word	0x08016140

0800f8e8 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	460a      	mov	r2, r1
 800f8f2:	80fb      	strh	r3, [r7, #6]
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800f8f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	da05      	bge.n	800f90c <txMakeMessageSessionSpecifier+0x24>
 800f900:	4b0e      	ldr	r3, [pc, #56]	; (800f93c <txMakeMessageSessionSpecifier+0x54>)
 800f902:	4a0f      	ldr	r2, [pc, #60]	; (800f940 <txMakeMessageSessionSpecifier+0x58>)
 800f904:	21ac      	movs	r1, #172	; 0xac
 800f906:	480f      	ldr	r0, [pc, #60]	; (800f944 <txMakeMessageSessionSpecifier+0x5c>)
 800f908:	f001 ff1c 	bl	8011744 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800f90c:	88fb      	ldrh	r3, [r7, #6]
 800f90e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f912:	d305      	bcc.n	800f920 <txMakeMessageSessionSpecifier+0x38>
 800f914:	4b0c      	ldr	r3, [pc, #48]	; (800f948 <txMakeMessageSessionSpecifier+0x60>)
 800f916:	4a0a      	ldr	r2, [pc, #40]	; (800f940 <txMakeMessageSessionSpecifier+0x58>)
 800f918:	21ad      	movs	r1, #173	; 0xad
 800f91a:	480a      	ldr	r0, [pc, #40]	; (800f944 <txMakeMessageSessionSpecifier+0x5c>)
 800f91c:	f001 ff12 	bl	8011744 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800f920:	88fb      	ldrh	r3, [r7, #6]
 800f922:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800f926:	b29b      	uxth	r3, r3
 800f928:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800f92a:	797a      	ldrb	r2, [r7, #5]
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	021b      	lsls	r3, r3, #8
 800f930:	4313      	orrs	r3, r2
}
 800f932:	4618      	mov	r0, r3
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	08016170 	.word	0x08016170
 800f940:	08016ed0 	.word	0x08016ed0
 800f944:	08016140 	.word	0x08016140
 800f948:	08016184 	.word	0x08016184

0800f94c <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800f94c:	b590      	push	{r4, r7, lr}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	4604      	mov	r4, r0
 800f954:	4608      	mov	r0, r1
 800f956:	4611      	mov	r1, r2
 800f958:	461a      	mov	r2, r3
 800f95a:	4623      	mov	r3, r4
 800f95c:	80fb      	strh	r3, [r7, #6]
 800f95e:	4603      	mov	r3, r0
 800f960:	717b      	strb	r3, [r7, #5]
 800f962:	460b      	mov	r3, r1
 800f964:	713b      	strb	r3, [r7, #4]
 800f966:	4613      	mov	r3, r2
 800f968:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800f96a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	da05      	bge.n	800f97e <txMakeServiceSessionSpecifier+0x32>
 800f972:	4b17      	ldr	r3, [pc, #92]	; (800f9d0 <txMakeServiceSessionSpecifier+0x84>)
 800f974:	4a17      	ldr	r2, [pc, #92]	; (800f9d4 <txMakeServiceSessionSpecifier+0x88>)
 800f976:	21b7      	movs	r1, #183	; 0xb7
 800f978:	4817      	ldr	r0, [pc, #92]	; (800f9d8 <txMakeServiceSessionSpecifier+0x8c>)
 800f97a:	f001 fee3 	bl	8011744 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800f97e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f982:	2b00      	cmp	r3, #0
 800f984:	da05      	bge.n	800f992 <txMakeServiceSessionSpecifier+0x46>
 800f986:	4b15      	ldr	r3, [pc, #84]	; (800f9dc <txMakeServiceSessionSpecifier+0x90>)
 800f988:	4a12      	ldr	r2, [pc, #72]	; (800f9d4 <txMakeServiceSessionSpecifier+0x88>)
 800f98a:	21b8      	movs	r1, #184	; 0xb8
 800f98c:	4812      	ldr	r0, [pc, #72]	; (800f9d8 <txMakeServiceSessionSpecifier+0x8c>)
 800f98e:	f001 fed9 	bl	8011744 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800f992:	88fb      	ldrh	r3, [r7, #6]
 800f994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f998:	d305      	bcc.n	800f9a6 <txMakeServiceSessionSpecifier+0x5a>
 800f99a:	4b11      	ldr	r3, [pc, #68]	; (800f9e0 <txMakeServiceSessionSpecifier+0x94>)
 800f99c:	4a0d      	ldr	r2, [pc, #52]	; (800f9d4 <txMakeServiceSessionSpecifier+0x88>)
 800f99e:	21b9      	movs	r1, #185	; 0xb9
 800f9a0:	480d      	ldr	r0, [pc, #52]	; (800f9d8 <txMakeServiceSessionSpecifier+0x8c>)
 800f9a2:	f001 fecf 	bl	8011744 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800f9a6:	793a      	ldrb	r2, [r7, #4]
 800f9a8:	78fb      	ldrb	r3, [r7, #3]
 800f9aa:	01db      	lsls	r3, r3, #7
 800f9ac:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800f9ae:	88fb      	ldrh	r3, [r7, #6]
 800f9b0:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800f9b2:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800f9b4:	797a      	ldrb	r2, [r7, #5]
 800f9b6:	2a00      	cmp	r2, #0
 800f9b8:	d002      	beq.n	800f9c0 <txMakeServiceSessionSpecifier+0x74>
 800f9ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f9be:	e000      	b.n	800f9c2 <txMakeServiceSessionSpecifier+0x76>
 800f9c0:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800f9c2:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800f9c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd90      	pop	{r4, r7, pc}
 800f9d0:	08016170 	.word	0x08016170
 800f9d4:	08016ef0 	.word	0x08016ef0
 800f9d8:	08016140 	.word	0x08016140
 800f9dc:	08016198 	.word	0x08016198
 800f9e0:	080161ac 	.word	0x080161ac

0800f9e4 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800f9ec:	2340      	movs	r3, #64	; 0x40
 800f9ee:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b07      	cmp	r3, #7
 800f9f8:	d802      	bhi.n	800fa00 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800f9fa:	2308      	movs	r3, #8
 800f9fc:	60fb      	str	r3, [r7, #12]
 800f9fe:	e014      	b.n	800fa2a <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d808      	bhi.n	800fa1a <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800fa08:	4a0c      	ldr	r2, [pc, #48]	; (800fa3c <adjustPresentationLayerMTU+0x58>)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	461a      	mov	r2, r3
 800fa12:	4b0b      	ldr	r3, [pc, #44]	; (800fa40 <adjustPresentationLayerMTU+0x5c>)
 800fa14:	5c9b      	ldrb	r3, [r3, r2]
 800fa16:	60fb      	str	r3, [r7, #12]
 800fa18:	e007      	b.n	800fa2a <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800fa1a:	4a08      	ldr	r2, [pc, #32]	; (800fa3c <adjustPresentationLayerMTU+0x58>)
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	4413      	add	r3, r2
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	461a      	mov	r2, r3
 800fa24:	4b06      	ldr	r3, [pc, #24]	; (800fa40 <adjustPresentationLayerMTU+0x5c>)
 800fa26:	5c9b      	ldrb	r3, [r3, r2]
 800fa28:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	3b01      	subs	r3, #1
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3714      	adds	r7, #20
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	08016e5c 	.word	0x08016e5c
 800fa40:	08016e4c 	.word	0x08016e4c

0800fa44 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b08a      	sub	sp, #40	; 0x28
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	607a      	str	r2, [r7, #4]
 800fa50:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d105      	bne.n	800fa64 <txMakeCANID+0x20>
 800fa58:	4b60      	ldr	r3, [pc, #384]	; (800fbdc <txMakeCANID+0x198>)
 800fa5a:	4a61      	ldr	r2, [pc, #388]	; (800fbe0 <txMakeCANID+0x19c>)
 800fa5c:	21d9      	movs	r1, #217	; 0xd9
 800fa5e:	4861      	ldr	r0, [pc, #388]	; (800fbe4 <txMakeCANID+0x1a0>)
 800fa60:	f001 fe70 	bl	8011744 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800fa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d105      	bne.n	800fa76 <txMakeCANID+0x32>
 800fa6a:	4b5f      	ldr	r3, [pc, #380]	; (800fbe8 <txMakeCANID+0x1a4>)
 800fa6c:	4a5c      	ldr	r2, [pc, #368]	; (800fbe0 <txMakeCANID+0x19c>)
 800fa6e:	21da      	movs	r1, #218	; 0xda
 800fa70:	485c      	ldr	r0, [pc, #368]	; (800fbe4 <txMakeCANID+0x1a0>)
 800fa72:	f001 fe67 	bl	8011744 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800fa76:	f06f 0301 	mvn.w	r3, #1
 800fa7a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	785b      	ldrb	r3, [r3, #1]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d157      	bne.n	800fb34 <txMakeCANID+0xf0>
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	791b      	ldrb	r3, [r3, #4]
 800fa88:	2bff      	cmp	r3, #255	; 0xff
 800fa8a:	d153      	bne.n	800fb34 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800fa90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa94:	d24e      	bcs.n	800fb34 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800fa96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	db11      	blt.n	800fac2 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	885b      	ldrh	r3, [r3, #2]
 800faa2:	78fa      	ldrb	r2, [r7, #3]
 800faa4:	4611      	mov	r1, r2
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7ff ff1e 	bl	800f8e8 <txMakeMessageSessionSpecifier>
 800faac:	4603      	mov	r3, r0
 800faae:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	da75      	bge.n	800fba2 <txMakeCANID+0x15e>
 800fab6:	4b4d      	ldr	r3, [pc, #308]	; (800fbec <txMakeCANID+0x1a8>)
 800fab8:	4a49      	ldr	r2, [pc, #292]	; (800fbe0 <txMakeCANID+0x19c>)
 800faba:	21e2      	movs	r1, #226	; 0xe2
 800fabc:	4849      	ldr	r0, [pc, #292]	; (800fbe4 <txMakeCANID+0x1a0>)
 800fabe:	f001 fe41 	bl	8011744 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d830      	bhi.n	800fb2c <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2b00      	cmp	r3, #0
 800face:	d108      	bne.n	800fae2 <txMakeCANID+0x9e>
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d005      	beq.n	800fae2 <txMakeCANID+0x9e>
 800fad6:	4b46      	ldr	r3, [pc, #280]	; (800fbf0 <txMakeCANID+0x1ac>)
 800fad8:	4a41      	ldr	r2, [pc, #260]	; (800fbe0 <txMakeCANID+0x19c>)
 800fada:	21e6      	movs	r1, #230	; 0xe6
 800fadc:	4841      	ldr	r0, [pc, #260]	; (800fbe4 <txMakeCANID+0x1a0>)
 800fade:	f001 fe31 	bl	8011744 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	68b9      	ldr	r1, [r7, #8]
 800fae6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800faea:	f7ff fec5 	bl	800f878 <crcAdd>
 800faee:	4603      	mov	r3, r0
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800faf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	885b      	ldrh	r3, [r3, #2]
 800fafe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800fb02:	4611      	mov	r1, r2
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7ff feef 	bl	800f8e8 <txMakeMessageSessionSpecifier>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fb10:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb18:	d305      	bcc.n	800fb26 <txMakeCANID+0xe2>
 800fb1a:	4b36      	ldr	r3, [pc, #216]	; (800fbf4 <txMakeCANID+0x1b0>)
 800fb1c:	4a30      	ldr	r2, [pc, #192]	; (800fbe0 <txMakeCANID+0x19c>)
 800fb1e:	21e9      	movs	r1, #233	; 0xe9
 800fb20:	4830      	ldr	r0, [pc, #192]	; (800fbe4 <txMakeCANID+0x1a0>)
 800fb22:	f001 fe0f 	bl	8011744 <__assert_func>
            out = (int32_t) spec;
 800fb26:	69fb      	ldr	r3, [r7, #28]
 800fb28:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800fb2a:	e03a      	b.n	800fba2 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800fb2c:	f06f 0301 	mvn.w	r3, #1
 800fb30:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800fb32:	e036      	b.n	800fba2 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	785b      	ldrb	r3, [r3, #1]
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	d003      	beq.n	800fb44 <txMakeCANID+0x100>
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	785b      	ldrb	r3, [r3, #1]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d12a      	bne.n	800fb9a <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	791b      	ldrb	r3, [r3, #4]
 800fb48:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	db25      	blt.n	800fb9a <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	885b      	ldrh	r3, [r3, #2]
 800fb52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb56:	d220      	bcs.n	800fb9a <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800fb58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	db18      	blt.n	800fb92 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	bf0c      	ite	eq
 800fb6c:	2301      	moveq	r3, #1
 800fb6e:	2300      	movne	r3, #0
 800fb70:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800fb76:	78fa      	ldrb	r2, [r7, #3]
 800fb78:	f7ff fee8 	bl	800f94c <txMakeServiceSessionSpecifier>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	627b      	str	r3, [r7, #36]	; 0x24
            CANARD_ASSERT(out >= 0);
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	da0f      	bge.n	800fba6 <txMakeCANID+0x162>
 800fb86:	4b19      	ldr	r3, [pc, #100]	; (800fbec <txMakeCANID+0x1a8>)
 800fb88:	4a15      	ldr	r2, [pc, #84]	; (800fbe0 <txMakeCANID+0x19c>)
 800fb8a:	21fa      	movs	r1, #250	; 0xfa
 800fb8c:	4815      	ldr	r0, [pc, #84]	; (800fbe4 <txMakeCANID+0x1a0>)
 800fb8e:	f001 fdd9 	bl	8011744 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800fb92:	f06f 0301 	mvn.w	r3, #1
 800fb96:	627b      	str	r3, [r7, #36]	; 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800fb98:	e005      	b.n	800fba6 <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800fb9a:	f06f 0301 	mvn.w	r3, #1
 800fb9e:	627b      	str	r3, [r7, #36]	; 0x24
 800fba0:	e002      	b.n	800fba8 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800fba2:	bf00      	nop
 800fba4:	e000      	b.n	800fba8 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800fba6:	bf00      	nop
    }

    if (out >= 0)
 800fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	db10      	blt.n	800fbd0 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	2b07      	cmp	r3, #7
 800fbb8:	d807      	bhi.n	800fbca <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	069a      	lsls	r2, r3, #26
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	627b      	str	r3, [r7, #36]	; 0x24
 800fbc8:	e002      	b.n	800fbd0 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800fbca:	f06f 0301 	mvn.w	r3, #1
 800fbce:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    return out;
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3728      	adds	r7, #40	; 0x28
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	080161c0 	.word	0x080161c0
 800fbe0:	08016ebc 	.word	0x08016ebc
 800fbe4:	08016140 	.word	0x08016140
 800fbe8:	080161d4 	.word	0x080161d4
 800fbec:	080161f0 	.word	0x080161f0
 800fbf0:	080161fc 	.word	0x080161fc
 800fbf4:	08016230 	.word	0x08016230

0800fbf8 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800fbf8:	b590      	push	{r4, r7, lr}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	4611      	mov	r1, r2
 800fc04:	461a      	mov	r2, r3
 800fc06:	4623      	mov	r3, r4
 800fc08:	71fb      	strb	r3, [r7, #7]
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	71bb      	strb	r3, [r7, #6]
 800fc0e:	460b      	mov	r3, r1
 800fc10:	717b      	strb	r3, [r7, #5]
 800fc12:	4613      	mov	r3, r2
 800fc14:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800fc16:	79fb      	ldrb	r3, [r7, #7]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d009      	beq.n	800fc30 <txMakeTailByte+0x38>
 800fc1c:	797b      	ldrb	r3, [r7, #5]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d006      	beq.n	800fc30 <txMakeTailByte+0x38>
 800fc22:	4b13      	ldr	r3, [pc, #76]	; (800fc70 <txMakeTailByte+0x78>)
 800fc24:	4a13      	ldr	r2, [pc, #76]	; (800fc74 <txMakeTailByte+0x7c>)
 800fc26:	f240 111b 	movw	r1, #283	; 0x11b
 800fc2a:	4813      	ldr	r0, [pc, #76]	; (800fc78 <txMakeTailByte+0x80>)
 800fc2c:	f001 fd8a 	bl	8011744 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800fc30:	79fb      	ldrb	r3, [r7, #7]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d001      	beq.n	800fc3a <txMakeTailByte+0x42>
 800fc36:	2280      	movs	r2, #128	; 0x80
 800fc38:	e000      	b.n	800fc3c <txMakeTailByte+0x44>
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	79bb      	ldrb	r3, [r7, #6]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d001      	beq.n	800fc46 <txMakeTailByte+0x4e>
 800fc42:	2340      	movs	r3, #64	; 0x40
 800fc44:	e000      	b.n	800fc48 <txMakeTailByte+0x50>
 800fc46:	2300      	movs	r3, #0
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800fc4c:	797a      	ldrb	r2, [r7, #5]
 800fc4e:	2a00      	cmp	r2, #0
 800fc50:	d001      	beq.n	800fc56 <txMakeTailByte+0x5e>
 800fc52:	2220      	movs	r2, #32
 800fc54:	e000      	b.n	800fc58 <txMakeTailByte+0x60>
 800fc56:	2200      	movs	r2, #0
 800fc58:	4313      	orrs	r3, r2
 800fc5a:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800fc5c:	793b      	ldrb	r3, [r7, #4]
 800fc5e:	f003 031f 	and.w	r3, r3, #31
 800fc62:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800fc64:	4313      	orrs	r3, r2
 800fc66:	b2db      	uxtb	r3, r3
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	370c      	adds	r7, #12
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd90      	pop	{r4, r7, pc}
 800fc70:	0801624c 	.word	0x0801624c
 800fc74:	08016f64 	.word	0x08016f64
 800fc78:	08016140 	.word	0x08016140

0800fc7c <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b40      	cmp	r3, #64	; 0x40
 800fc88:	d906      	bls.n	800fc98 <txRoundFramePayloadSizeUp+0x1c>
 800fc8a:	4b0f      	ldr	r3, [pc, #60]	; (800fcc8 <txRoundFramePayloadSizeUp+0x4c>)
 800fc8c:	4a0f      	ldr	r2, [pc, #60]	; (800fccc <txRoundFramePayloadSizeUp+0x50>)
 800fc8e:	f44f 7192 	mov.w	r1, #292	; 0x124
 800fc92:	480f      	ldr	r0, [pc, #60]	; (800fcd0 <txRoundFramePayloadSizeUp+0x54>)
 800fc94:	f001 fd56 	bl	8011744 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800fc98:	4a0e      	ldr	r2, [pc, #56]	; (800fcd4 <txRoundFramePayloadSizeUp+0x58>)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2b0f      	cmp	r3, #15
 800fca6:	d906      	bls.n	800fcb6 <txRoundFramePayloadSizeUp+0x3a>
 800fca8:	4b0b      	ldr	r3, [pc, #44]	; (800fcd8 <txRoundFramePayloadSizeUp+0x5c>)
 800fcaa:	4a08      	ldr	r2, [pc, #32]	; (800fccc <txRoundFramePayloadSizeUp+0x50>)
 800fcac:	f240 1127 	movw	r1, #295	; 0x127
 800fcb0:	4807      	ldr	r0, [pc, #28]	; (800fcd0 <txRoundFramePayloadSizeUp+0x54>)
 800fcb2:	f001 fd47 	bl	8011744 <__assert_func>
    return CanardCANDLCToLength[y];
 800fcb6:	4a09      	ldr	r2, [pc, #36]	; (800fcdc <txRoundFramePayloadSizeUp+0x60>)
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	4413      	add	r3, r2
 800fcbc:	781b      	ldrb	r3, [r3, #0]
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3710      	adds	r7, #16
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	08016274 	.word	0x08016274
 800fccc:	08016f34 	.word	0x08016f34
 800fcd0:	08016140 	.word	0x08016140
 800fcd4:	08016e5c 	.word	0x08016e5c
 800fcd8:	080162bc 	.word	0x080162bc
 800fcdc:	08016e4c 	.word	0x08016e4c

0800fce0 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d106      	bne.n	800fd02 <txAllocateQueueItem+0x22>
 800fcf4:	4b1f      	ldr	r3, [pc, #124]	; (800fd74 <txAllocateQueueItem+0x94>)
 800fcf6:	4a20      	ldr	r2, [pc, #128]	; (800fd78 <txAllocateQueueItem+0x98>)
 800fcf8:	f240 1131 	movw	r1, #305	; 0x131
 800fcfc:	481f      	ldr	r0, [pc, #124]	; (800fd7c <txAllocateQueueItem+0x9c>)
 800fcfe:	f001 fd21 	bl	8011744 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800fd02:	6a3b      	ldr	r3, [r7, #32]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d106      	bne.n	800fd16 <txAllocateQueueItem+0x36>
 800fd08:	4b1d      	ldr	r3, [pc, #116]	; (800fd80 <txAllocateQueueItem+0xa0>)
 800fd0a:	4a1b      	ldr	r2, [pc, #108]	; (800fd78 <txAllocateQueueItem+0x98>)
 800fd0c:	f44f 7199 	mov.w	r1, #306	; 0x132
 800fd10:	481a      	ldr	r0, [pc, #104]	; (800fd7c <txAllocateQueueItem+0x9c>)
 800fd12:	f001 fd17 	bl	8011744 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	6a3a      	ldr	r2, [r7, #32]
 800fd1c:	3230      	adds	r2, #48	; 0x30
 800fd1e:	4611      	mov	r1, r2
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	4798      	blx	r3
 800fd24:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d01e      	beq.n	800fd6a <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	2200      	movs	r2, #0
 800fd36:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	2200      	movs	r2, #0
 800fd42:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	2200      	movs	r2, #0
 800fd48:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800fd4a:	6979      	ldr	r1, [r7, #20]
 800fd4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd50:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	6a3a      	ldr	r2, [r7, #32]
 800fd58:	625a      	str	r2, [r3, #36]	; 0x24
        out->base.frame.payload         = out->payload_buffer;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	629a      	str	r2, [r3, #40]	; 0x28
        out->base.frame.extended_can_id = id;
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	68ba      	ldr	r2, [r7, #8]
 800fd68:	621a      	str	r2, [r3, #32]
    }
    return out;
 800fd6a:	697b      	ldr	r3, [r7, #20]
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3718      	adds	r7, #24
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	08016304 	.word	0x08016304
 800fd78:	08016f50 	.word	0x08016f50
 800fd7c:	08016140 	.word	0x08016140
 800fd80:	08016318 	.word	0x08016318

0800fd84 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d002      	beq.n	800fda2 <txAVLPredicate+0x1e>
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d106      	bne.n	800fdb0 <txAVLPredicate+0x2c>
 800fda2:	4b0a      	ldr	r3, [pc, #40]	; (800fdcc <txAVLPredicate+0x48>)
 800fda4:	4a0a      	ldr	r2, [pc, #40]	; (800fdd0 <txAVLPredicate+0x4c>)
 800fda6:	f240 114d 	movw	r1, #333	; 0x14d
 800fdaa:	480a      	ldr	r0, [pc, #40]	; (800fdd4 <txAVLPredicate+0x50>)
 800fdac:	f001 fcca 	bl	8011744 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6a1a      	ldr	r2, [r3, #32]
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	6a1b      	ldr	r3, [r3, #32]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d301      	bcc.n	800fdc0 <txAVLPredicate+0x3c>
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	e001      	b.n	800fdc4 <txAVLPredicate+0x40>
 800fdc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	0801632c 	.word	0x0801632c
 800fdd0:	08016f24 	.word	0x08016f24
 800fdd4:	08016140 	.word	0x08016140

0800fdd8 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800fdd8:	b590      	push	{r4, r7, lr}
 800fdda:	b08d      	sub	sp, #52	; 0x34
 800fddc:	af02      	add	r7, sp, #8
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d106      	bne.n	800fdfa <txPushSingleFrame+0x22>
 800fdec:	4b5c      	ldr	r3, [pc, #368]	; (800ff60 <txPushSingleFrame+0x188>)
 800fdee:	4a5d      	ldr	r2, [pc, #372]	; (800ff64 <txPushSingleFrame+0x18c>)
 800fdf0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800fdf4:	485c      	ldr	r0, [pc, #368]	; (800ff68 <txPushSingleFrame+0x190>)
 800fdf6:	f001 fca5 	bl	8011744 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800fdfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d109      	bne.n	800fe14 <txPushSingleFrame+0x3c>
 800fe00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d006      	beq.n	800fe14 <txPushSingleFrame+0x3c>
 800fe06:	4b59      	ldr	r3, [pc, #356]	; (800ff6c <txPushSingleFrame+0x194>)
 800fe08:	4a56      	ldr	r2, [pc, #344]	; (800ff64 <txPushSingleFrame+0x18c>)
 800fe0a:	f240 115b 	movw	r1, #347	; 0x15b
 800fe0e:	4856      	ldr	r0, [pc, #344]	; (800ff68 <txPushSingleFrame+0x190>)
 800fe10:	f001 fc98 	bl	8011744 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800fe14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe16:	3301      	adds	r3, #1
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7ff ff2f 	bl	800fc7c <txRoundFramePayloadSizeUp>
 800fe1e:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800fe20:	6a3a      	ldr	r2, [r7, #32]
 800fe22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d806      	bhi.n	800fe36 <txPushSingleFrame+0x5e>
 800fe28:	4b51      	ldr	r3, [pc, #324]	; (800ff70 <txPushSingleFrame+0x198>)
 800fe2a:	4a4e      	ldr	r2, [pc, #312]	; (800ff64 <txPushSingleFrame+0x18c>)
 800fe2c:	f240 115d 	movw	r1, #349	; 0x15d
 800fe30:	484d      	ldr	r0, [pc, #308]	; (800ff68 <txPushSingleFrame+0x190>)
 800fe32:	f001 fc87 	bl	8011744 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800fe36:	6a3a      	ldr	r2, [r7, #32]
 800fe38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe3a:	1ad3      	subs	r3, r2, r3
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800fe40:	69fa      	ldr	r2, [r7, #28]
 800fe42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe44:	4413      	add	r3, r2
 800fe46:	3301      	adds	r3, #1
 800fe48:	6a3a      	ldr	r2, [r7, #32]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d006      	beq.n	800fe5c <txPushSingleFrame+0x84>
 800fe4e:	4b49      	ldr	r3, [pc, #292]	; (800ff74 <txPushSingleFrame+0x19c>)
 800fe50:	4a44      	ldr	r2, [pc, #272]	; (800ff64 <txPushSingleFrame+0x18c>)
 800fe52:	f240 115f 	movw	r1, #351	; 0x15f
 800fe56:	4844      	ldr	r0, [pc, #272]	; (800ff68 <txPushSingleFrame+0x190>)
 800fe58:	f001 fc74 	bl	8011744 <__assert_func>
    int32_t       out = 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	627b      	str	r3, [r7, #36]	; 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	689a      	ldr	r2, [r3, #8]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d209      	bcs.n	800fe80 <txPushSingleFrame+0xa8>
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	9300      	str	r3, [sp, #0]
 800fe70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe76:	68b8      	ldr	r0, [r7, #8]
 800fe78:	f7ff ff32 	bl	800fce0 <txAllocateQueueItem>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	e000      	b.n	800fe82 <txPushSingleFrame+0xaa>
 800fe80:	2300      	movs	r3, #0
    TxItem* const tqi =
 800fe82:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d054      	beq.n	800ff34 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800fe8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d010      	beq.n	800feb2 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800fe90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d106      	bne.n	800fea4 <txPushSingleFrame+0xcc>
 800fe96:	4b38      	ldr	r3, [pc, #224]	; (800ff78 <txPushSingleFrame+0x1a0>)
 800fe98:	4a32      	ldr	r2, [pc, #200]	; (800ff64 <txPushSingleFrame+0x18c>)
 800fe9a:	f240 1167 	movw	r1, #359	; 0x167
 800fe9e:	4832      	ldr	r0, [pc, #200]	; (800ff68 <txPushSingleFrame+0x190>)
 800fea0:	f001 fc50 	bl	8011744 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	3330      	adds	r3, #48	; 0x30
 800fea8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800feaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800feac:	4618      	mov	r0, r3
 800feae:	f002 fdf2 	bl	8012a96 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800feb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feb4:	3330      	adds	r3, #48	; 0x30
 800feb6:	69ba      	ldr	r2, [r7, #24]
 800feb8:	4413      	add	r3, r2
 800feba:	69fa      	ldr	r2, [r7, #28]
 800febc:	2100      	movs	r1, #0
 800febe:	4618      	mov	r0, r3
 800fec0:	f002 fd03 	bl	80128ca <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800fec4:	6a3b      	ldr	r3, [r7, #32]
 800fec6:	1e5c      	subs	r4, r3, #1
 800fec8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fecc:	2201      	movs	r2, #1
 800fece:	2101      	movs	r1, #1
 800fed0:	2001      	movs	r0, #1
 800fed2:	f7ff fe91 	bl	800fbf8 <txMakeTailByte>
 800fed6:	4603      	mov	r3, r0
 800fed8:	461a      	mov	r2, r3
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	4423      	add	r3, r4
 800fede:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f103 000c 	add.w	r0, r3, #12
 800fee8:	69b9      	ldr	r1, [r7, #24]
 800feea:	4b24      	ldr	r3, [pc, #144]	; (800ff7c <txPushSingleFrame+0x1a4>)
 800feec:	4a24      	ldr	r2, [pc, #144]	; (800ff80 <txPushSingleFrame+0x1a8>)
 800feee:	f7ff fae7 	bl	800f4c0 <cavlSearch>
 800fef2:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800fef4:	69bb      	ldr	r3, [r7, #24]
 800fef6:	697a      	ldr	r2, [r7, #20]
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d006      	beq.n	800ff0a <txPushSingleFrame+0x132>
 800fefc:	4b21      	ldr	r3, [pc, #132]	; (800ff84 <txPushSingleFrame+0x1ac>)
 800fefe:	4a19      	ldr	r2, [pc, #100]	; (800ff64 <txPushSingleFrame+0x18c>)
 800ff00:	f240 1173 	movw	r1, #371	; 0x173
 800ff04:	4818      	ldr	r0, [pc, #96]	; (800ff68 <txPushSingleFrame+0x190>)
 800ff06:	f001 fc1d 	bl	8011744 <__assert_func>
        que->size++;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	1c5a      	adds	r2, r3, #1
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	689a      	ldr	r2, [r3, #8]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d906      	bls.n	800ff2e <txPushSingleFrame+0x156>
 800ff20:	4b19      	ldr	r3, [pc, #100]	; (800ff88 <txPushSingleFrame+0x1b0>)
 800ff22:	4a10      	ldr	r2, [pc, #64]	; (800ff64 <txPushSingleFrame+0x18c>)
 800ff24:	f240 1175 	movw	r1, #373	; 0x175
 800ff28:	480f      	ldr	r0, [pc, #60]	; (800ff68 <txPushSingleFrame+0x190>)
 800ff2a:	f001 fc0b 	bl	8011744 <__assert_func>
        out = 1;  // One frame enqueued.
 800ff2e:	2301      	movs	r3, #1
 800ff30:	627b      	str	r3, [r7, #36]	; 0x24
 800ff32:	e002      	b.n	800ff3a <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800ff34:	f06f 0302 	mvn.w	r3, #2
 800ff38:	627b      	str	r3, [r7, #36]	; 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	db09      	blt.n	800ff54 <txPushSingleFrame+0x17c>
 800ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff42:	2b01      	cmp	r3, #1
 800ff44:	d006      	beq.n	800ff54 <txPushSingleFrame+0x17c>
 800ff46:	4b11      	ldr	r3, [pc, #68]	; (800ff8c <txPushSingleFrame+0x1b4>)
 800ff48:	4a06      	ldr	r2, [pc, #24]	; (800ff64 <txPushSingleFrame+0x18c>)
 800ff4a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800ff4e:	4806      	ldr	r0, [pc, #24]	; (800ff68 <txPushSingleFrame+0x190>)
 800ff50:	f001 fbf8 	bl	8011744 <__assert_func>
    return out;
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	372c      	adds	r7, #44	; 0x2c
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd90      	pop	{r4, r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	08016304 	.word	0x08016304
 800ff64:	08016f10 	.word	0x08016f10
 800ff68:	08016140 	.word	0x08016140
 800ff6c:	08016360 	.word	0x08016360
 800ff70:	08016390 	.word	0x08016390
 800ff74:	080163b4 	.word	0x080163b4
 800ff78:	080163f0 	.word	0x080163f0
 800ff7c:	0800f821 	.word	0x0800f821
 800ff80:	0800fd85 	.word	0x0800fd85
 800ff84:	08016408 	.word	0x08016408
 800ff88:	08016420 	.word	0x08016420
 800ff8c:	0801643c 	.word	0x0801643c

0800ff90 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800ff90:	b590      	push	{r4, r7, lr}
 800ff92:	b093      	sub	sp, #76	; 0x4c
 800ff94:	af02      	add	r7, sp, #8
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d106      	bne.n	800ffb0 <txGenerateMultiFrameChain+0x20>
 800ffa2:	4b93      	ldr	r3, [pc, #588]	; (80101f0 <txGenerateMultiFrameChain+0x260>)
 800ffa4:	4a93      	ldr	r2, [pc, #588]	; (80101f4 <txGenerateMultiFrameChain+0x264>)
 800ffa6:	f240 1189 	movw	r1, #393	; 0x189
 800ffaa:	4893      	ldr	r0, [pc, #588]	; (80101f8 <txGenerateMultiFrameChain+0x268>)
 800ffac:	f001 fbca 	bl	8011744 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d106      	bne.n	800ffc4 <txGenerateMultiFrameChain+0x34>
 800ffb6:	4b91      	ldr	r3, [pc, #580]	; (80101fc <txGenerateMultiFrameChain+0x26c>)
 800ffb8:	4a8e      	ldr	r2, [pc, #568]	; (80101f4 <txGenerateMultiFrameChain+0x264>)
 800ffba:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800ffbe:	488e      	ldr	r0, [pc, #568]	; (80101f8 <txGenerateMultiFrameChain+0x268>)
 800ffc0:	f001 fbc0 	bl	8011744 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800ffc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d806      	bhi.n	800ffda <txGenerateMultiFrameChain+0x4a>
 800ffcc:	4b8c      	ldr	r3, [pc, #560]	; (8010200 <txGenerateMultiFrameChain+0x270>)
 800ffce:	4a89      	ldr	r2, [pc, #548]	; (80101f4 <txGenerateMultiFrameChain+0x264>)
 800ffd0:	f240 118b 	movw	r1, #395	; 0x18b
 800ffd4:	4888      	ldr	r0, [pc, #544]	; (80101f8 <txGenerateMultiFrameChain+0x268>)
 800ffd6:	f001 fbb5 	bl	8011744 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800ffda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d106      	bne.n	800ffee <txGenerateMultiFrameChain+0x5e>
 800ffe0:	4b88      	ldr	r3, [pc, #544]	; (8010204 <txGenerateMultiFrameChain+0x274>)
 800ffe2:	4a84      	ldr	r2, [pc, #528]	; (80101f4 <txGenerateMultiFrameChain+0x264>)
 800ffe4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800ffe8:	4883      	ldr	r0, [pc, #524]	; (80101f8 <txGenerateMultiFrameChain+0x268>)
 800ffea:	f001 fbab 	bl	8011744 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800ffee:	2300      	movs	r3, #0
 800fff0:	613b      	str	r3, [r7, #16]
 800fff2:	2300      	movs	r3, #0
 800fff4:	617b      	str	r3, [r7, #20]
 800fff6:	2300      	movs	r3, #0
 800fff8:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800fffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fffc:	3302      	adds	r3, #2
 800fffe:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t         offset                = 0U;
 8010000:	2300      	movs	r3, #0
 8010002:	63fb      	str	r3, [r7, #60]	; 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8010004:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010006:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010008:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801000c:	f7ff fc34 	bl	800f878 <crcAdd>
 8010010:	4603      	mov	r3, r0
 8010012:	877b      	strh	r3, [r7, #58]	; 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8010014:	2301      	movs	r3, #1
 8010016:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 801001a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801001c:	637b      	str	r3, [r7, #52]	; 0x34
    while (offset < payload_size_with_crc)
 801001e:	e0d4      	b.n	80101ca <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	3301      	adds	r3, #1
 8010024:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8010026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801002a:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	429a      	cmp	r2, r3
 8010030:	d908      	bls.n	8010044 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 8010032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	3301      	adds	r3, #1
 801003a:	4618      	mov	r0, r3
 801003c:	f7ff fe1e 	bl	800fc7c <txRoundFramePayloadSizeUp>
 8010040:	4603      	mov	r3, r0
 8010042:	e001      	b.n	8010048 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8010048:	627b      	str	r3, [r7, #36]	; 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 801004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010054:	68b8      	ldr	r0, [r7, #8]
 8010056:	f7ff fe43 	bl	800fce0 <txAllocateQueueItem>
 801005a:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d102      	bne.n	8010068 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	613b      	str	r3, [r7, #16]
 8010066:	e002      	b.n	801006e <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	6a3a      	ldr	r2, [r7, #32]
 801006c:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 801006e:	6a3b      	ldr	r3, [r7, #32]
 8010070:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	2b00      	cmp	r3, #0
 8010076:	f000 80ae 	beq.w	80101d6 <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 801007a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007c:	3b01      	subs	r3, #1
 801007e:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 8010080:	2300      	movs	r3, #0
 8010082:	633b      	str	r3, [r7, #48]	; 0x30
        if (offset < payload_size)
 8010084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010088:	429a      	cmp	r2, r3
 801008a:	d21c      	bcs.n	80100c6 <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 801008c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801008e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010090:	1ad3      	subs	r3, r2, r3
 8010092:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (move_size > frame_payload_size)
 8010094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	429a      	cmp	r2, r3
 801009a:	d901      	bls.n	80100a0 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	3330      	adds	r3, #48	; 0x30
 80100a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80100a8:	4618      	mov	r0, r3
 80100aa:	f002 fcf4 	bl	8012a96 <memcpy>
            frame_offset = frame_offset + move_size;
 80100ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b2:	4413      	add	r3, r2
 80100b4:	633b      	str	r3, [r7, #48]	; 0x30
            offset += move_size;
 80100b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ba:	4413      	add	r3, r2
 80100bc:	63fb      	str	r3, [r7, #60]	; 0x3c
            payload_ptr += move_size;
 80100be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c2:	4413      	add	r3, r2
 80100c4:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 80100c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d343      	bcc.n	8010156 <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 80100ce:	e00f      	b.n	80100f0 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 80100d0:	697a      	ldr	r2, [r7, #20]
 80100d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d4:	4413      	add	r3, r2
 80100d6:	3330      	adds	r3, #48	; 0x30
 80100d8:	2200      	movs	r2, #0
 80100da:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 80100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100de:	3301      	adds	r3, #1
 80100e0:	633b      	str	r3, [r7, #48]	; 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 80100e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80100e4:	2100      	movs	r1, #0
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7ff fba6 	bl	800f838 <crcAddByte>
 80100ec:	4603      	mov	r3, r0
 80100ee:	877b      	strh	r3, [r7, #58]	; 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 80100f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f2:	3302      	adds	r3, #2
 80100f4:	69fa      	ldr	r2, [r7, #28]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d8ea      	bhi.n	80100d0 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 80100fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d213      	bcs.n	801012a <txGenerateMultiFrameChain+0x19a>
 8010102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010106:	429a      	cmp	r2, r3
 8010108:	d10f      	bne.n	801012a <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 801010a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801010c:	0a1b      	lsrs	r3, r3, #8
 801010e:	b29b      	uxth	r3, r3
 8010110:	697a      	ldr	r2, [r7, #20]
 8010112:	b2d9      	uxtb	r1, r3
 8010114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010116:	4413      	add	r3, r2
 8010118:	3330      	adds	r3, #48	; 0x30
 801011a:	460a      	mov	r2, r1
 801011c:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 801011e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010120:	3301      	adds	r3, #1
 8010122:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 8010124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010126:	3301      	adds	r3, #1
 8010128:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 801012a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	429a      	cmp	r2, r3
 8010130:	d211      	bcs.n	8010156 <txGenerateMultiFrameChain+0x1c6>
 8010132:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010136:	429a      	cmp	r2, r3
 8010138:	d90d      	bls.n	8010156 <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 801013a:	697a      	ldr	r2, [r7, #20]
 801013c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801013e:	b2d9      	uxtb	r1, r3
 8010140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010142:	4413      	add	r3, r2
 8010144:	3330      	adds	r3, #48	; 0x30
 8010146:	460a      	mov	r2, r1
 8010148:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 801014a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014c:	3301      	adds	r3, #1
 801014e:	633b      	str	r3, [r7, #48]	; 0x30
                ++offset;
 8010150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010152:	3301      	adds	r3, #1
 8010154:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 8010156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010158:	1c5a      	adds	r2, r3, #1
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801015e:	429a      	cmp	r2, r3
 8010160:	d006      	beq.n	8010170 <txGenerateMultiFrameChain+0x1e0>
 8010162:	4b29      	ldr	r3, [pc, #164]	; (8010208 <txGenerateMultiFrameChain+0x278>)
 8010164:	4a23      	ldr	r2, [pc, #140]	; (80101f4 <txGenerateMultiFrameChain+0x264>)
 8010166:	f240 11d9 	movw	r1, #473	; 0x1d9
 801016a:	4823      	ldr	r0, [pc, #140]	; (80101f8 <txGenerateMultiFrameChain+0x268>)
 801016c:	f001 faea 	bl	8011744 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8010170:	693a      	ldr	r2, [r7, #16]
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	429a      	cmp	r2, r3
 8010176:	bf0c      	ite	eq
 8010178:	2301      	moveq	r3, #1
 801017a:	2300      	movne	r3, #0
 801017c:	b2d8      	uxtb	r0, r3
 801017e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010182:	429a      	cmp	r2, r3
 8010184:	bf2c      	ite	cs
 8010186:	2301      	movcs	r3, #1
 8010188:	2300      	movcc	r3, #0
 801018a:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 801018c:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 801018e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8010192:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8010196:	f7ff fd2f 	bl	800fbf8 <txMakeTailByte>
 801019a:	4603      	mov	r3, r0
 801019c:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 801019e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a0:	4423      	add	r3, r4
 80101a2:	3330      	adds	r3, #48	; 0x30
 80101a4:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 80101a6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	bf14      	ite	ne
 80101ae:	2301      	movne	r3, #1
 80101b0:	2300      	moveq	r3, #0
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	f083 0301 	eor.w	r3, r3, #1
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80101be:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80101c2:	f003 0301 	and.w	r3, r3, #1
 80101c6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    while (offset < payload_size_with_crc)
 80101ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80101cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ce:	429a      	cmp	r2, r3
 80101d0:	f4ff af26 	bcc.w	8010020 <txGenerateMultiFrameChain+0x90>
 80101d4:	e000      	b.n	80101d8 <txGenerateMultiFrameChain+0x248>
            break;
 80101d6:	bf00      	nop
    }
    return out;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	461c      	mov	r4, r3
 80101dc:	f107 0310 	add.w	r3, r7, #16
 80101e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80101e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	3744      	adds	r7, #68	; 0x44
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd90      	pop	{r4, r7, pc}
 80101f0:	08016304 	.word	0x08016304
 80101f4:	08016fe0 	.word	0x08016fe0
 80101f8:	08016140 	.word	0x08016140
 80101fc:	08016454 	.word	0x08016454
 8010200:	08016470 	.word	0x08016470
 8010204:	080163f0 	.word	0x080163f0
 8010208:	08016498 	.word	0x08016498

0801020c <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b094      	sub	sp, #80	; 0x50
 8010210:	af06      	add	r7, sp, #24
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d002      	beq.n	8010224 <txPushMultiFrame+0x18>
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d106      	bne.n	8010232 <txPushMultiFrame+0x26>
 8010224:	4b65      	ldr	r3, [pc, #404]	; (80103bc <txPushMultiFrame+0x1b0>)
 8010226:	4a66      	ldr	r2, [pc, #408]	; (80103c0 <txPushMultiFrame+0x1b4>)
 8010228:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 801022c:	4865      	ldr	r0, [pc, #404]	; (80103c4 <txPushMultiFrame+0x1b8>)
 801022e:	f001 fa89 	bl	8011744 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d106      	bne.n	8010246 <txPushMultiFrame+0x3a>
 8010238:	4b63      	ldr	r3, [pc, #396]	; (80103c8 <txPushMultiFrame+0x1bc>)
 801023a:	4a61      	ldr	r2, [pc, #388]	; (80103c0 <txPushMultiFrame+0x1b4>)
 801023c:	f240 11ed 	movw	r1, #493	; 0x1ed
 8010240:	4860      	ldr	r0, [pc, #384]	; (80103c4 <txPushMultiFrame+0x1b8>)
 8010242:	f001 fa7f 	bl	8011744 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8010246:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	429a      	cmp	r2, r3
 801024c:	d806      	bhi.n	801025c <txPushMultiFrame+0x50>
 801024e:	4b5f      	ldr	r3, [pc, #380]	; (80103cc <txPushMultiFrame+0x1c0>)
 8010250:	4a5b      	ldr	r2, [pc, #364]	; (80103c0 <txPushMultiFrame+0x1b4>)
 8010252:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8010256:	485b      	ldr	r0, [pc, #364]	; (80103c4 <txPushMultiFrame+0x1b8>)
 8010258:	f001 fa74 	bl	8011744 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 801025c:	2300      	movs	r3, #0
 801025e:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8010260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010262:	3302      	adds	r3, #2
 8010264:	62bb      	str	r3, [r7, #40]	; 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 8010266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	4413      	add	r3, r2
 801026c:	1e5a      	subs	r2, r3, #1
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	fbb2 f3f3 	udiv	r3, r2, r3
 8010274:	627b      	str	r3, [r7, #36]	; 0x24
    CANARD_ASSERT(num_frames >= 2);
 8010276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010278:	2b01      	cmp	r3, #1
 801027a:	d806      	bhi.n	801028a <txPushMultiFrame+0x7e>
 801027c:	4b54      	ldr	r3, [pc, #336]	; (80103d0 <txPushMultiFrame+0x1c4>)
 801027e:	4a50      	ldr	r2, [pc, #320]	; (80103c0 <txPushMultiFrame+0x1b4>)
 8010280:	f240 11f3 	movw	r1, #499	; 0x1f3
 8010284:	484f      	ldr	r0, [pc, #316]	; (80103c4 <txPushMultiFrame+0x1b8>)
 8010286:	f001 fa5d 	bl	8011744 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	689a      	ldr	r2, [r3, #8]
 801028e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010290:	441a      	add	r2, r3
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	429a      	cmp	r2, r3
 8010298:	d87b      	bhi.n	8010392 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 801029a:	f107 0010 	add.w	r0, r7, #16
 801029e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102a0:	9305      	str	r3, [sp, #20]
 80102a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102a4:	9304      	str	r3, [sp, #16]
 80102a6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80102aa:	9303      	str	r3, [sp, #12]
 80102ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102ae:	9302      	str	r3, [sp, #8]
 80102b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80102b4:	e9cd 2300 	strd	r2, r3, [sp]
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	68b9      	ldr	r1, [r7, #8]
 80102bc:	f7ff fe68 	bl	800ff90 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d051      	beq.n	801036a <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	633b      	str	r3, [r7, #48]	; 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	f103 000c 	add.w	r0, r3, #12
 80102d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102d2:	4b40      	ldr	r3, [pc, #256]	; (80103d4 <txPushMultiFrame+0x1c8>)
 80102d4:	4a40      	ldr	r2, [pc, #256]	; (80103d8 <txPushMultiFrame+0x1cc>)
 80102d6:	f7ff f8f3 	bl	800f4c0 <cavlSearch>
 80102da:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 80102dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102de:	69fa      	ldr	r2, [r7, #28]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d006      	beq.n	80102f2 <txPushMultiFrame+0xe6>
 80102e4:	4b3d      	ldr	r3, [pc, #244]	; (80103dc <txPushMultiFrame+0x1d0>)
 80102e6:	4a36      	ldr	r2, [pc, #216]	; (80103c0 <txPushMultiFrame+0x1b4>)
 80102e8:	f240 2105 	movw	r1, #517	; 0x205
 80102ec:	4835      	ldr	r0, [pc, #212]	; (80103c4 <txPushMultiFrame+0x1b8>)
 80102ee:	f001 fa29 	bl	8011744 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d106      	bne.n	8010308 <txPushMultiFrame+0xfc>
 80102fa:	4b39      	ldr	r3, [pc, #228]	; (80103e0 <txPushMultiFrame+0x1d4>)
 80102fc:	4a30      	ldr	r2, [pc, #192]	; (80103c0 <txPushMultiFrame+0x1b4>)
 80102fe:	f240 2106 	movw	r1, #518	; 0x206
 8010302:	4830      	ldr	r0, [pc, #192]	; (80103c4 <txPushMultiFrame+0x1b8>)
 8010304:	f001 fa1e 	bl	8011744 <__assert_func>
                next = next->next_in_transfer;
 8010308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030a:	691b      	ldr	r3, [r3, #16]
 801030c:	633b      	str	r3, [r7, #48]	; 0x30
            } while (next != NULL);
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	2b00      	cmp	r3, #0
 8010312:	d1da      	bne.n	80102ca <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010318:	429a      	cmp	r2, r3
 801031a:	d006      	beq.n	801032a <txPushMultiFrame+0x11e>
 801031c:	4b31      	ldr	r3, [pc, #196]	; (80103e4 <txPushMultiFrame+0x1d8>)
 801031e:	4a28      	ldr	r2, [pc, #160]	; (80103c0 <txPushMultiFrame+0x1b4>)
 8010320:	f240 2109 	movw	r1, #521	; 0x209
 8010324:	4827      	ldr	r0, [pc, #156]	; (80103c4 <txPushMultiFrame+0x1b8>)
 8010326:	f001 fa0d 	bl	8011744 <__assert_func>
            que->size += sq.size;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	689a      	ldr	r2, [r3, #8]
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	441a      	add	r2, r3
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	689a      	ldr	r2, [r3, #8]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	429a      	cmp	r2, r3
 8010340:	d906      	bls.n	8010350 <txPushMultiFrame+0x144>
 8010342:	4b29      	ldr	r3, [pc, #164]	; (80103e8 <txPushMultiFrame+0x1dc>)
 8010344:	4a1e      	ldr	r2, [pc, #120]	; (80103c0 <txPushMultiFrame+0x1b4>)
 8010346:	f240 210b 	movw	r1, #523	; 0x20b
 801034a:	481e      	ldr	r0, [pc, #120]	; (80103c4 <txPushMultiFrame+0x1b8>)
 801034c:	f001 f9fa 	bl	8011744 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	2b00      	cmp	r3, #0
 8010354:	da06      	bge.n	8010364 <txPushMultiFrame+0x158>
 8010356:	4b25      	ldr	r3, [pc, #148]	; (80103ec <txPushMultiFrame+0x1e0>)
 8010358:	4a19      	ldr	r2, [pc, #100]	; (80103c0 <txPushMultiFrame+0x1b4>)
 801035a:	f44f 7103 	mov.w	r1, #524	; 0x20c
 801035e:	4819      	ldr	r0, [pc, #100]	; (80103c4 <txPushMultiFrame+0x1b8>)
 8010360:	f001 f9f0 	bl	8011744 <__assert_func>
            out = (int32_t) sq.size;
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	637b      	str	r3, [r7, #52]	; 0x34
 8010368:	e016      	b.n	8010398 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 801036a:	f06f 0302 	mvn.w	r3, #2
 801036e:	637b      	str	r3, [r7, #52]	; 0x34
            CanardTxQueueItem* head = &sq.head->base;
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 8010374:	e009      	b.n	801038a <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 8010376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010378:	691b      	ldr	r3, [r3, #16]
 801037a:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010382:	68b8      	ldr	r0, [r7, #8]
 8010384:	4798      	blx	r3
                head = next;
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (head != NULL)
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	2b00      	cmp	r3, #0
 801038e:	d1f2      	bne.n	8010376 <txPushMultiFrame+0x16a>
 8010390:	e002      	b.n	8010398 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8010392:	f06f 0302 	mvn.w	r3, #2
 8010396:	637b      	str	r3, [r7, #52]	; 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8010398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801039a:	2b00      	cmp	r3, #0
 801039c:	db09      	blt.n	80103b2 <txPushMultiFrame+0x1a6>
 801039e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	dc06      	bgt.n	80103b2 <txPushMultiFrame+0x1a6>
 80103a4:	4b12      	ldr	r3, [pc, #72]	; (80103f0 <txPushMultiFrame+0x1e4>)
 80103a6:	4a06      	ldr	r2, [pc, #24]	; (80103c0 <txPushMultiFrame+0x1b4>)
 80103a8:	f240 211f 	movw	r1, #543	; 0x21f
 80103ac:	4805      	ldr	r0, [pc, #20]	; (80103c4 <txPushMultiFrame+0x1b8>)
 80103ae:	f001 f9c9 	bl	8011744 <__assert_func>
    return out;
 80103b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3738      	adds	r7, #56	; 0x38
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	080164d4 	.word	0x080164d4
 80103c0:	08016fcc 	.word	0x08016fcc
 80103c4:	08016140 	.word	0x08016140
 80103c8:	08016454 	.word	0x08016454
 80103cc:	08016470 	.word	0x08016470
 80103d0:	08016504 	.word	0x08016504
 80103d4:	0800f821 	.word	0x0800f821
 80103d8:	0800fd85 	.word	0x0800fd85
 80103dc:	08016514 	.word	0x08016514
 80103e0:	08016528 	.word	0x08016528
 80103e4:	08016544 	.word	0x08016544
 80103e8:	08016420 	.word	0x08016420
 80103ec:	0801655c 	.word	0x0801655c
 80103f0:	08016580 	.word	0x08016580

080103f4 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b088      	sub	sp, #32
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80103fe:	607a      	str	r2, [r7, #4]
 8010400:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d106      	bne.n	8010416 <rxTryParseFrame+0x22>
 8010408:	4b96      	ldr	r3, [pc, #600]	; (8010664 <rxTryParseFrame+0x270>)
 801040a:	4a97      	ldr	r2, [pc, #604]	; (8010668 <rxTryParseFrame+0x274>)
 801040c:	f240 214e 	movw	r1, #590	; 0x24e
 8010410:	4896      	ldr	r0, [pc, #600]	; (801066c <rxTryParseFrame+0x278>)
 8010412:	f001 f997 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801041e:	d306      	bcc.n	801042e <rxTryParseFrame+0x3a>
 8010420:	4b93      	ldr	r3, [pc, #588]	; (8010670 <rxTryParseFrame+0x27c>)
 8010422:	4a91      	ldr	r2, [pc, #580]	; (8010668 <rxTryParseFrame+0x274>)
 8010424:	f240 214f 	movw	r1, #591	; 0x24f
 8010428:	4890      	ldr	r0, [pc, #576]	; (801066c <rxTryParseFrame+0x278>)
 801042a:	f001 f98b 	bl	8011744 <__assert_func>
    CANARD_ASSERT(out != NULL);
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d106      	bne.n	8010442 <rxTryParseFrame+0x4e>
 8010434:	4b8f      	ldr	r3, [pc, #572]	; (8010674 <rxTryParseFrame+0x280>)
 8010436:	4a8c      	ldr	r2, [pc, #560]	; (8010668 <rxTryParseFrame+0x274>)
 8010438:	f44f 7114 	mov.w	r1, #592	; 0x250
 801043c:	488b      	ldr	r0, [pc, #556]	; (801066c <rxTryParseFrame+0x278>)
 801043e:	f001 f981 	bl	8011744 <__assert_func>
    bool valid = false;
 8010442:	2300      	movs	r3, #0
 8010444:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	f000 8105 	beq.w	801065a <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	689b      	ldr	r3, [r3, #8]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d106      	bne.n	8010466 <rxTryParseFrame+0x72>
 8010458:	4b87      	ldr	r3, [pc, #540]	; (8010678 <rxTryParseFrame+0x284>)
 801045a:	4a83      	ldr	r2, [pc, #524]	; (8010668 <rxTryParseFrame+0x274>)
 801045c:	f44f 7115 	mov.w	r1, #596	; 0x254
 8010460:	4882      	ldr	r0, [pc, #520]	; (801066c <rxTryParseFrame+0x278>)
 8010462:	f001 f96f 	bl	8011744 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 8010466:	6839      	ldr	r1, [r7, #0]
 8010468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801046c:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	0e9b      	lsrs	r3, r3, #26
 801047a:	b2db      	uxtb	r3, r3
 801047c:	f003 0307 	and.w	r3, r3, #7
 8010480:	b2da      	uxtb	r2, r3
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	b2db      	uxtb	r3, r3
 801048a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801048e:	b2da      	uxtb	r2, r3
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 8010494:	69bb      	ldr	r3, [r7, #24]
 8010496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801049a:	2b00      	cmp	r3, #0
 801049c:	d128      	bne.n	80104f0 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	2200      	movs	r2, #0
 80104a2:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	0a1b      	lsrs	r3, r3, #8
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d002      	beq.n	80104c4 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	22ff      	movs	r2, #255	; 0xff
 80104c2:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	22ff      	movs	r2, #255	; 0xff
 80104c8:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d106      	bne.n	80104e2 <rxTryParseFrame+0xee>
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d101      	bne.n	80104e2 <rxTryParseFrame+0xee>
 80104de:	2301      	movs	r3, #1
 80104e0:	e000      	b.n	80104e4 <rxTryParseFrame+0xf0>
 80104e2:	2300      	movs	r3, #0
 80104e4:	77fb      	strb	r3, [r7, #31]
 80104e6:	7ffb      	ldrb	r3, [r7, #31]
 80104e8:	f003 0301 	and.w	r3, r3, #1
 80104ec:	77fb      	strb	r3, [r7, #31]
 80104ee:	e02c      	b.n	801054a <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d001      	beq.n	80104fe <rxTryParseFrame+0x10a>
 80104fa:	2202      	movs	r2, #2
 80104fc:	e000      	b.n	8010500 <rxTryParseFrame+0x10c>
 80104fe:	2201      	movs	r2, #1
            out->transfer_kind =
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	0b9b      	lsrs	r3, r3, #14
 8010508:	b29b      	uxth	r3, r3
 801050a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801050e:	b29a      	uxth	r2, r3
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 8010514:	69bb      	ldr	r3, [r7, #24]
 8010516:	09db      	lsrs	r3, r3, #7
 8010518:	b2db      	uxtb	r3, r3
 801051a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801051e:	b2da      	uxtb	r2, r3
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801052a:	2b00      	cmp	r3, #0
 801052c:	d107      	bne.n	801053e <rxTryParseFrame+0x14a>
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	7b1a      	ldrb	r2, [r3, #12]
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	7b5b      	ldrb	r3, [r3, #13]
 8010536:	429a      	cmp	r2, r3
 8010538:	d001      	beq.n	801053e <rxTryParseFrame+0x14a>
 801053a:	2301      	movs	r3, #1
 801053c:	e000      	b.n	8010540 <rxTryParseFrame+0x14c>
 801053e:	2300      	movs	r3, #0
 8010540:	77fb      	strb	r3, [r7, #31]
 8010542:	7ffb      	ldrb	r3, [r7, #31]
 8010544:	f003 0301 	and.w	r3, r3, #1
 8010548:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	1e5a      	subs	r2, r3, #1
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	689a      	ldr	r2, [r3, #8]
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	699a      	ldr	r2, [r3, #24]
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	695b      	ldr	r3, [r3, #20]
 8010564:	4413      	add	r3, r2
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 801056a:	7dfb      	ldrb	r3, [r7, #23]
 801056c:	f003 031f 	and.w	r3, r3, #31
 8010570:	b2da      	uxtb	r2, r3
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 8010576:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801057a:	b2db      	uxtb	r3, r3
 801057c:	09db      	lsrs	r3, r3, #7
 801057e:	b2da      	uxtb	r2, r3
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 8010584:	7dfb      	ldrb	r3, [r7, #23]
 8010586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801058a:	2b00      	cmp	r3, #0
 801058c:	bf14      	ite	ne
 801058e:	2301      	movne	r3, #1
 8010590:	2300      	moveq	r3, #0
 8010592:	b2da      	uxtb	r2, r3
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 8010598:	7dfb      	ldrb	r3, [r7, #23]
 801059a:	f003 0320 	and.w	r3, r3, #32
 801059e:	2b00      	cmp	r3, #0
 80105a0:	bf14      	ite	ne
 80105a2:	2301      	movne	r3, #1
 80105a4:	2300      	moveq	r3, #0
 80105a6:	b2da      	uxtb	r2, r3
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 80105ac:	7ffb      	ldrb	r3, [r7, #31]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d00c      	beq.n	80105cc <rxTryParseFrame+0x1d8>
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	7bdb      	ldrb	r3, [r3, #15]
 80105b6:	f083 0301 	eor.w	r3, r3, #1
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d103      	bne.n	80105c8 <rxTryParseFrame+0x1d4>
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	7c5b      	ldrb	r3, [r3, #17]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d001      	beq.n	80105cc <rxTryParseFrame+0x1d8>
 80105c8:	2301      	movs	r3, #1
 80105ca:	e000      	b.n	80105ce <rxTryParseFrame+0x1da>
 80105cc:	2300      	movs	r3, #0
 80105ce:	77fb      	strb	r3, [r7, #31]
 80105d0:	7ffb      	ldrb	r3, [r7, #31]
 80105d2:	f003 0301 	and.w	r3, r3, #1
 80105d6:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 80105d8:	7ffb      	ldrb	r3, [r7, #31]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00d      	beq.n	80105fa <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d003      	beq.n	80105ee <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	7c1b      	ldrb	r3, [r3, #16]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d103      	bne.n	80105f6 <rxTryParseFrame+0x202>
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	7b1b      	ldrb	r3, [r3, #12]
 80105f2:	2bff      	cmp	r3, #255	; 0xff
 80105f4:	d001      	beq.n	80105fa <rxTryParseFrame+0x206>
        valid = valid &&
 80105f6:	2301      	movs	r3, #1
 80105f8:	e000      	b.n	80105fc <rxTryParseFrame+0x208>
 80105fa:	2300      	movs	r3, #0
 80105fc:	77fb      	strb	r3, [r7, #31]
 80105fe:	7ffb      	ldrb	r3, [r7, #31]
 8010600:	f003 0301 	and.w	r3, r3, #1
 8010604:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 8010606:	7ffb      	ldrb	r3, [r7, #31]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d009      	beq.n	8010620 <rxTryParseFrame+0x22c>
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	695b      	ldr	r3, [r3, #20]
 8010610:	2b06      	cmp	r3, #6
 8010612:	d803      	bhi.n	801061c <rxTryParseFrame+0x228>
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	7c1b      	ldrb	r3, [r3, #16]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d001      	beq.n	8010620 <rxTryParseFrame+0x22c>
 801061c:	2301      	movs	r3, #1
 801061e:	e000      	b.n	8010622 <rxTryParseFrame+0x22e>
 8010620:	2300      	movs	r3, #0
 8010622:	77fb      	strb	r3, [r7, #31]
 8010624:	7ffb      	ldrb	r3, [r7, #31]
 8010626:	f003 0301 	and.w	r3, r3, #1
 801062a:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 801062c:	7ffb      	ldrb	r3, [r7, #31]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d00d      	beq.n	801064e <rxTryParseFrame+0x25a>
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	695b      	ldr	r3, [r3, #20]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d107      	bne.n	801064a <rxTryParseFrame+0x256>
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	7bdb      	ldrb	r3, [r3, #15]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d005      	beq.n	801064e <rxTryParseFrame+0x25a>
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	7c1b      	ldrb	r3, [r3, #16]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <rxTryParseFrame+0x25a>
 801064a:	2301      	movs	r3, #1
 801064c:	e000      	b.n	8010650 <rxTryParseFrame+0x25c>
 801064e:	2300      	movs	r3, #0
 8010650:	77fb      	strb	r3, [r7, #31]
 8010652:	7ffb      	ldrb	r3, [r7, #31]
 8010654:	f003 0301 	and.w	r3, r3, #1
 8010658:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 801065a:	7ffb      	ldrb	r3, [r7, #31]
}
 801065c:	4618      	mov	r0, r3
 801065e:	3720      	adds	r7, #32
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	08016598 	.word	0x08016598
 8010668:	0801701c 	.word	0x0801701c
 801066c:	08016140 	.word	0x08016140
 8010670:	080165b0 	.word	0x080165b0
 8010674:	080165e0 	.word	0x080165e0
 8010678:	080165f4 	.word	0x080165f4

0801067c <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d106      	bne.n	801069a <rxInitTransferMetadataFromFrame+0x1e>
 801068c:	4b19      	ldr	r3, [pc, #100]	; (80106f4 <rxInitTransferMetadataFromFrame+0x78>)
 801068e:	4a1a      	ldr	r2, [pc, #104]	; (80106f8 <rxInitTransferMetadataFromFrame+0x7c>)
 8010690:	f240 218f 	movw	r1, #655	; 0x28f
 8010694:	4819      	ldr	r0, [pc, #100]	; (80106fc <rxInitTransferMetadataFromFrame+0x80>)
 8010696:	f001 f855 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d106      	bne.n	80106b0 <rxInitTransferMetadataFromFrame+0x34>
 80106a2:	4b17      	ldr	r3, [pc, #92]	; (8010700 <rxInitTransferMetadataFromFrame+0x84>)
 80106a4:	4a14      	ldr	r2, [pc, #80]	; (80106f8 <rxInitTransferMetadataFromFrame+0x7c>)
 80106a6:	f44f 7124 	mov.w	r1, #656	; 0x290
 80106aa:	4814      	ldr	r0, [pc, #80]	; (80106fc <rxInitTransferMetadataFromFrame+0x80>)
 80106ac:	f001 f84a 	bl	8011744 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d106      	bne.n	80106c4 <rxInitTransferMetadataFromFrame+0x48>
 80106b6:	4b13      	ldr	r3, [pc, #76]	; (8010704 <rxInitTransferMetadataFromFrame+0x88>)
 80106b8:	4a0f      	ldr	r2, [pc, #60]	; (80106f8 <rxInitTransferMetadataFromFrame+0x7c>)
 80106ba:	f240 2191 	movw	r1, #657	; 0x291
 80106be:	480f      	ldr	r0, [pc, #60]	; (80106fc <rxInitTransferMetadataFromFrame+0x80>)
 80106c0:	f001 f840 	bl	8011744 <__assert_func>
    out_transfer->priority       = frame->priority;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	7a1a      	ldrb	r2, [r3, #8]
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	7a5a      	ldrb	r2, [r3, #9]
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	895a      	ldrh	r2, [r3, #10]
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	7b1a      	ldrb	r2, [r3, #12]
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	7b9a      	ldrb	r2, [r3, #14]
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	715a      	strb	r2, [r3, #5]
}
 80106ec:	bf00      	nop
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}
 80106f4:	08016598 	.word	0x08016598
 80106f8:	080170b0 	.word	0x080170b0
 80106fc:	08016140 	.word	0x08016140
 8010700:	080165f4 	.word	0x080165f4
 8010704:	08016614 	.word	0x08016614

08010708 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	4603      	mov	r3, r0
 8010710:	460a      	mov	r2, r1
 8010712:	71fb      	strb	r3, [r7, #7]
 8010714:	4613      	mov	r3, r2
 8010716:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8010718:	79fb      	ldrb	r3, [r7, #7]
 801071a:	2b1f      	cmp	r3, #31
 801071c:	d906      	bls.n	801072c <rxComputeTransferIDDifference+0x24>
 801071e:	4b15      	ldr	r3, [pc, #84]	; (8010774 <rxComputeTransferIDDifference+0x6c>)
 8010720:	4a15      	ldr	r2, [pc, #84]	; (8010778 <rxComputeTransferIDDifference+0x70>)
 8010722:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8010726:	4815      	ldr	r0, [pc, #84]	; (801077c <rxComputeTransferIDDifference+0x74>)
 8010728:	f001 f80c 	bl	8011744 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 801072c:	79bb      	ldrb	r3, [r7, #6]
 801072e:	2b1f      	cmp	r3, #31
 8010730:	d906      	bls.n	8010740 <rxComputeTransferIDDifference+0x38>
 8010732:	4b13      	ldr	r3, [pc, #76]	; (8010780 <rxComputeTransferIDDifference+0x78>)
 8010734:	4a10      	ldr	r2, [pc, #64]	; (8010778 <rxComputeTransferIDDifference+0x70>)
 8010736:	f240 219d 	movw	r1, #669	; 0x29d
 801073a:	4810      	ldr	r0, [pc, #64]	; (801077c <rxComputeTransferIDDifference+0x74>)
 801073c:	f001 f802 	bl	8011744 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 8010740:	79fb      	ldrb	r3, [r7, #7]
 8010742:	b29a      	uxth	r2, r3
 8010744:	79bb      	ldrb	r3, [r7, #6]
 8010746:	b29b      	uxth	r3, r3
 8010748:	1ad3      	subs	r3, r2, r3
 801074a:	b29b      	uxth	r3, r3
 801074c:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 801074e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010752:	2b00      	cmp	r3, #0
 8010754:	da07      	bge.n	8010766 <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 8010756:	2320      	movs	r3, #32
 8010758:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 801075a:	7b7b      	ldrb	r3, [r7, #13]
 801075c:	b29a      	uxth	r2, r3
 801075e:	89fb      	ldrh	r3, [r7, #14]
 8010760:	4413      	add	r3, r2
 8010762:	b29b      	uxth	r3, r3
 8010764:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 8010766:	89fb      	ldrh	r3, [r7, #14]
 8010768:	b2db      	uxtb	r3, r3
}
 801076a:	4618      	mov	r0, r3
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	08016630 	.word	0x08016630
 8010778:	0801704c 	.word	0x0801704c
 801077c:	08016140 	.word	0x08016140
 8010780:	08016648 	.word	0x08016648

08010784 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b086      	sub	sp, #24
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
 8010790:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d106      	bne.n	80107a6 <rxSessionWritePayload+0x22>
 8010798:	4b67      	ldr	r3, [pc, #412]	; (8010938 <rxSessionWritePayload+0x1b4>)
 801079a:	4a68      	ldr	r2, [pc, #416]	; (801093c <rxSessionWritePayload+0x1b8>)
 801079c:	f240 21ad 	movw	r1, #685	; 0x2ad
 80107a0:	4867      	ldr	r0, [pc, #412]	; (8010940 <rxSessionWritePayload+0x1bc>)
 80107a2:	f000 ffcf 	bl	8011744 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d106      	bne.n	80107ba <rxSessionWritePayload+0x36>
 80107ac:	4b65      	ldr	r3, [pc, #404]	; (8010944 <rxSessionWritePayload+0x1c0>)
 80107ae:	4a63      	ldr	r2, [pc, #396]	; (801093c <rxSessionWritePayload+0x1b8>)
 80107b0:	f240 21ae 	movw	r1, #686	; 0x2ae
 80107b4:	4862      	ldr	r0, [pc, #392]	; (8010940 <rxSessionWritePayload+0x1bc>)
 80107b6:	f000 ffc5 	bl	8011744 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d109      	bne.n	80107d4 <rxSessionWritePayload+0x50>
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d006      	beq.n	80107d4 <rxSessionWritePayload+0x50>
 80107c6:	4b60      	ldr	r3, [pc, #384]	; (8010948 <rxSessionWritePayload+0x1c4>)
 80107c8:	4a5c      	ldr	r2, [pc, #368]	; (801093c <rxSessionWritePayload+0x1b8>)
 80107ca:	f240 21af 	movw	r1, #687	; 0x2af
 80107ce:	485c      	ldr	r0, [pc, #368]	; (8010940 <rxSessionWritePayload+0x1bc>)
 80107d0:	f000 ffb8 	bl	8011744 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d206      	bcs.n	80107ec <rxSessionWritePayload+0x68>
 80107de:	4b5b      	ldr	r3, [pc, #364]	; (801094c <rxSessionWritePayload+0x1c8>)
 80107e0:	4a56      	ldr	r2, [pc, #344]	; (801093c <rxSessionWritePayload+0x1b8>)
 80107e2:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 80107e6:	4856      	ldr	r0, [pc, #344]	; (8010940 <rxSessionWritePayload+0x1bc>)
 80107e8:	f000 ffac 	bl	8011744 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	68da      	ldr	r2, [r3, #12]
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	689b      	ldr	r3, [r3, #8]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d906      	bls.n	8010806 <rxSessionWritePayload+0x82>
 80107f8:	4b55      	ldr	r3, [pc, #340]	; (8010950 <rxSessionWritePayload+0x1cc>)
 80107fa:	4a50      	ldr	r2, [pc, #320]	; (801093c <rxSessionWritePayload+0x1b8>)
 80107fc:	f240 21b1 	movw	r1, #689	; 0x2b1
 8010800:	484f      	ldr	r0, [pc, #316]	; (8010940 <rxSessionWritePayload+0x1bc>)
 8010802:	f000 ff9f 	bl	8011744 <__assert_func>

    rxs->total_payload_size += payload_size;
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	689a      	ldr	r2, [r3, #8]
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	441a      	add	r2, r3
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	691b      	ldr	r3, [r3, #16]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d115      	bne.n	8010846 <rxSessionWritePayload+0xc2>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d012      	beq.n	8010846 <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	68db      	ldr	r3, [r3, #12]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d006      	beq.n	8010836 <rxSessionWritePayload+0xb2>
 8010828:	4b4a      	ldr	r3, [pc, #296]	; (8010954 <rxSessionWritePayload+0x1d0>)
 801082a:	4a44      	ldr	r2, [pc, #272]	; (801093c <rxSessionWritePayload+0x1b8>)
 801082c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8010830:	4843      	ldr	r0, [pc, #268]	; (8010940 <rxSessionWritePayload+0x1bc>)
 8010832:	f000 ff87 	bl	8011744 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	6879      	ldr	r1, [r7, #4]
 801083c:	68f8      	ldr	r0, [r7, #12]
 801083e:	4798      	blx	r3
 8010840:	4602      	mov	r2, r0
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 8010846:	2300      	movs	r3, #0
 8010848:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	691b      	ldr	r3, [r3, #16]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d04e      	beq.n	80108f0 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	68da      	ldr	r2, [r3, #12]
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	4413      	add	r3, r2
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	429a      	cmp	r2, r3
 8010862:	d229      	bcs.n	80108b8 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	429a      	cmp	r2, r3
 801086c:	d206      	bcs.n	801087c <rxSessionWritePayload+0xf8>
 801086e:	4b37      	ldr	r3, [pc, #220]	; (801094c <rxSessionWritePayload+0x1c8>)
 8010870:	4a32      	ldr	r2, [pc, #200]	; (801093c <rxSessionWritePayload+0x1b8>)
 8010872:	f240 21c3 	movw	r1, #707	; 0x2c3
 8010876:	4832      	ldr	r0, [pc, #200]	; (8010940 <rxSessionWritePayload+0x1bc>)
 8010878:	f000 ff64 	bl	8011744 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	1ad3      	subs	r3, r2, r3
 8010884:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	68da      	ldr	r2, [r3, #12]
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	4413      	add	r3, r2
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	429a      	cmp	r2, r3
 8010892:	d006      	beq.n	80108a2 <rxSessionWritePayload+0x11e>
 8010894:	4b30      	ldr	r3, [pc, #192]	; (8010958 <rxSessionWritePayload+0x1d4>)
 8010896:	4a29      	ldr	r2, [pc, #164]	; (801093c <rxSessionWritePayload+0x1b8>)
 8010898:	f240 21c5 	movw	r1, #709	; 0x2c5
 801089c:	4828      	ldr	r0, [pc, #160]	; (8010940 <rxSessionWritePayload+0x1bc>)
 801089e:	f000 ff51 	bl	8011744 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 80108a2:	693a      	ldr	r2, [r7, #16]
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d306      	bcc.n	80108b8 <rxSessionWritePayload+0x134>
 80108aa:	4b2c      	ldr	r3, [pc, #176]	; (801095c <rxSessionWritePayload+0x1d8>)
 80108ac:	4a23      	ldr	r2, [pc, #140]	; (801093c <rxSessionWritePayload+0x1b8>)
 80108ae:	f240 21c6 	movw	r1, #710	; 0x2c6
 80108b2:	4823      	ldr	r0, [pc, #140]	; (8010940 <rxSessionWritePayload+0x1bc>)
 80108b4:	f000 ff46 	bl	8011744 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	691a      	ldr	r2, [r3, #16]
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	68db      	ldr	r3, [r3, #12]
 80108c0:	4413      	add	r3, r2
 80108c2:	693a      	ldr	r2, [r7, #16]
 80108c4:	6a39      	ldr	r1, [r7, #32]
 80108c6:	4618      	mov	r0, r3
 80108c8:	f002 f8e5 	bl	8012a96 <memcpy>
        rxs->payload_size += bytes_to_copy;
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	68da      	ldr	r2, [r3, #12]
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	441a      	add	r2, r3
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	687a      	ldr	r2, [r7, #4]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d219      	bcs.n	8010916 <rxSessionWritePayload+0x192>
 80108e2:	4b1a      	ldr	r3, [pc, #104]	; (801094c <rxSessionWritePayload+0x1c8>)
 80108e4:	4a15      	ldr	r2, [pc, #84]	; (801093c <rxSessionWritePayload+0x1b8>)
 80108e6:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80108ea:	4815      	ldr	r0, [pc, #84]	; (8010940 <rxSessionWritePayload+0x1bc>)
 80108ec:	f000 ff2a 	bl	8011744 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	68db      	ldr	r3, [r3, #12]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d006      	beq.n	8010906 <rxSessionWritePayload+0x182>
 80108f8:	4b16      	ldr	r3, [pc, #88]	; (8010954 <rxSessionWritePayload+0x1d0>)
 80108fa:	4a10      	ldr	r2, [pc, #64]	; (801093c <rxSessionWritePayload+0x1b8>)
 80108fc:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8010900:	480f      	ldr	r0, [pc, #60]	; (8010940 <rxSessionWritePayload+0x1bc>)
 8010902:	f000 ff1f 	bl	8011744 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <rxSessionWritePayload+0x18e>
 801090c:	f06f 0302 	mvn.w	r3, #2
 8010910:	e000      	b.n	8010914 <rxSessionWritePayload+0x190>
 8010912:	2300      	movs	r3, #0
 8010914:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 8010916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801091a:	2b00      	cmp	r3, #0
 801091c:	dd06      	ble.n	801092c <rxSessionWritePayload+0x1a8>
 801091e:	4b10      	ldr	r3, [pc, #64]	; (8010960 <rxSessionWritePayload+0x1dc>)
 8010920:	4a06      	ldr	r2, [pc, #24]	; (801093c <rxSessionWritePayload+0x1b8>)
 8010922:	f240 21d7 	movw	r1, #727	; 0x2d7
 8010926:	4806      	ldr	r0, [pc, #24]	; (8010940 <rxSessionWritePayload+0x1bc>)
 8010928:	f000 ff0c 	bl	8011744 <__assert_func>
    return out;
 801092c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010930:	4618      	mov	r0, r3
 8010932:	3718      	adds	r7, #24
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	08016304 	.word	0x08016304
 801093c:	08017098 	.word	0x08017098
 8010940:	08016140 	.word	0x08016140
 8010944:	08016660 	.word	0x08016660
 8010948:	080161fc 	.word	0x080161fc
 801094c:	08016674 	.word	0x08016674
 8010950:	08016690 	.word	0x08016690
 8010954:	080166c0 	.word	0x080166c0
 8010958:	080166d8 	.word	0x080166d8
 801095c:	08016708 	.word	0x08016708
 8010960:	08016728 	.word	0x08016728

08010964 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d106      	bne.n	8010982 <rxSessionRestart+0x1e>
 8010974:	4b1a      	ldr	r3, [pc, #104]	; (80109e0 <rxSessionRestart+0x7c>)
 8010976:	4a1b      	ldr	r2, [pc, #108]	; (80109e4 <rxSessionRestart+0x80>)
 8010978:	f240 21dd 	movw	r1, #733	; 0x2dd
 801097c:	481a      	ldr	r0, [pc, #104]	; (80109e8 <rxSessionRestart+0x84>)
 801097e:	f000 fee1 	bl	8011744 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d106      	bne.n	8010996 <rxSessionRestart+0x32>
 8010988:	4b18      	ldr	r3, [pc, #96]	; (80109ec <rxSessionRestart+0x88>)
 801098a:	4a16      	ldr	r2, [pc, #88]	; (80109e4 <rxSessionRestart+0x80>)
 801098c:	f240 21de 	movw	r1, #734	; 0x2de
 8010990:	4815      	ldr	r0, [pc, #84]	; (80109e8 <rxSessionRestart+0x84>)
 8010992:	f000 fed7 	bl	8011744 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	68db      	ldr	r3, [r3, #12]
 801099a:	683a      	ldr	r2, [r7, #0]
 801099c:	6912      	ldr	r2, [r2, #16]
 801099e:	4611      	mov	r1, r2
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	2200      	movs	r2, #0
 80109a8:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	2200      	movs	r2, #0
 80109ae:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	2200      	movs	r2, #0
 80109b4:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109bc:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	7d9b      	ldrb	r3, [r3, #22]
 80109c2:	3301      	adds	r3, #1
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	f003 031f 	and.w	r3, r3, #31
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	2201      	movs	r2, #1
 80109d4:	761a      	strb	r2, [r3, #24]
}
 80109d6:	bf00      	nop
 80109d8:	3708      	adds	r7, #8
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
 80109de:	bf00      	nop
 80109e0:	08016304 	.word	0x08016304
 80109e4:	0801706c 	.word	0x0801706c
 80109e8:	08016140 	.word	0x08016140
 80109ec:	08016660 	.word	0x08016660

080109f0 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b088      	sub	sp, #32
 80109f4:	af02      	add	r7, sp, #8
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	60b9      	str	r1, [r7, #8]
 80109fa:	607a      	str	r2, [r7, #4]
 80109fc:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d106      	bne.n	8010a12 <rxSessionAcceptFrame+0x22>
 8010a04:	4b81      	ldr	r3, [pc, #516]	; (8010c0c <rxSessionAcceptFrame+0x21c>)
 8010a06:	4a82      	ldr	r2, [pc, #520]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010a08:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010a0c:	4881      	ldr	r0, [pc, #516]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010a0e:	f000 fe99 	bl	8011744 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d106      	bne.n	8010a26 <rxSessionAcceptFrame+0x36>
 8010a18:	4b7f      	ldr	r3, [pc, #508]	; (8010c18 <rxSessionAcceptFrame+0x228>)
 8010a1a:	4a7d      	ldr	r2, [pc, #500]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010a1c:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8010a20:	487c      	ldr	r0, [pc, #496]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010a22:	f000 fe8f 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d106      	bne.n	8010a3a <rxSessionAcceptFrame+0x4a>
 8010a2c:	4b7b      	ldr	r3, [pc, #492]	; (8010c1c <rxSessionAcceptFrame+0x22c>)
 8010a2e:	4a78      	ldr	r2, [pc, #480]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010a30:	f240 21f1 	movw	r1, #753	; 0x2f1
 8010a34:	4877      	ldr	r0, [pc, #476]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010a36:	f000 fe85 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	699b      	ldr	r3, [r3, #24]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d106      	bne.n	8010a50 <rxSessionAcceptFrame+0x60>
 8010a42:	4b77      	ldr	r3, [pc, #476]	; (8010c20 <rxSessionAcceptFrame+0x230>)
 8010a44:	4a72      	ldr	r2, [pc, #456]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010a46:	f240 21f2 	movw	r1, #754	; 0x2f2
 8010a4a:	4872      	ldr	r0, [pc, #456]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010a4c:	f000 fe7a 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	7b9b      	ldrb	r3, [r3, #14]
 8010a54:	2b1f      	cmp	r3, #31
 8010a56:	d906      	bls.n	8010a66 <rxSessionAcceptFrame+0x76>
 8010a58:	4b72      	ldr	r3, [pc, #456]	; (8010c24 <rxSessionAcceptFrame+0x234>)
 8010a5a:	4a6d      	ldr	r2, [pc, #436]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010a5c:	f240 21f3 	movw	r1, #755	; 0x2f3
 8010a60:	486c      	ldr	r0, [pc, #432]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010a62:	f000 fe6f 	bl	8011744 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8010a66:	6a3b      	ldr	r3, [r7, #32]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d106      	bne.n	8010a7a <rxSessionAcceptFrame+0x8a>
 8010a6c:	4b6e      	ldr	r3, [pc, #440]	; (8010c28 <rxSessionAcceptFrame+0x238>)
 8010a6e:	4a68      	ldr	r2, [pc, #416]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010a70:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8010a74:	4867      	ldr	r0, [pc, #412]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010a76:	f000 fe65 	bl	8011744 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	7bdb      	ldrb	r3, [r3, #15]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d005      	beq.n	8010a8e <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a88:	68b9      	ldr	r1, [r7, #8]
 8010a8a:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	7bdb      	ldrb	r3, [r3, #15]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d005      	beq.n	8010aa2 <rxSessionAcceptFrame+0xb2>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	7c1b      	ldrb	r3, [r3, #16]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d001      	beq.n	8010aa2 <rxSessionAcceptFrame+0xb2>
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	e000      	b.n	8010aa4 <rxSessionAcceptFrame+0xb4>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	75bb      	strb	r3, [r7, #22]
 8010aa6:	7dbb      	ldrb	r3, [r7, #22]
 8010aa8:	f003 0301 	and.w	r3, r3, #1
 8010aac:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 8010aae:	7dbb      	ldrb	r3, [r7, #22]
 8010ab0:	f083 0301 	eor.w	r3, r3, #1
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00c      	beq.n	8010ad4 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	8a98      	ldrh	r0, [r3, #20]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6959      	ldr	r1, [r3, #20]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	699b      	ldr	r3, [r3, #24]
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	f7fe fed6 	bl	800f878 <crcAdd>
 8010acc:	4603      	mov	r3, r0
 8010ace:	461a      	mov	r2, r3
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	695a      	ldr	r2, [r3, #20]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	699b      	ldr	r3, [r3, #24]
 8010adc:	9300      	str	r3, [sp, #0]
 8010ade:	4613      	mov	r3, r2
 8010ae0:	683a      	ldr	r2, [r7, #0]
 8010ae2:	68b9      	ldr	r1, [r7, #8]
 8010ae4:	68f8      	ldr	r0, [r7, #12]
 8010ae6:	f7ff fe4d 	bl	8010784 <rxSessionWritePayload>
 8010aea:	4603      	mov	r3, r0
 8010aec:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 8010aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	da10      	bge.n	8010b18 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 8010af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010afa:	f113 0f03 	cmn.w	r3, #3
 8010afe:	d006      	beq.n	8010b0e <rxSessionAcceptFrame+0x11e>
 8010b00:	4b4a      	ldr	r3, [pc, #296]	; (8010c2c <rxSessionAcceptFrame+0x23c>)
 8010b02:	4a43      	ldr	r2, [pc, #268]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010b04:	f240 3106 	movw	r1, #774	; 0x306
 8010b08:	4842      	ldr	r0, [pc, #264]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010b0a:	f000 fe1b 	bl	8011744 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 8010b0e:	68b9      	ldr	r1, [r7, #8]
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f7ff ff27 	bl	8010964 <rxSessionRestart>
 8010b16:	e072      	b.n	8010bfe <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	7c1b      	ldrb	r3, [r3, #16]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d05f      	beq.n	8010be0 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8010b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d006      	beq.n	8010b36 <rxSessionAcceptFrame+0x146>
 8010b28:	4b41      	ldr	r3, [pc, #260]	; (8010c30 <rxSessionAcceptFrame+0x240>)
 8010b2a:	4a39      	ldr	r2, [pc, #228]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010b2c:	f240 310b 	movw	r1, #779	; 0x30b
 8010b30:	4838      	ldr	r0, [pc, #224]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010b32:	f000 fe07 	bl	8011744 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 8010b36:	7dbb      	ldrb	r3, [r7, #22]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d103      	bne.n	8010b44 <rxSessionAcceptFrame+0x154>
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	8a9b      	ldrh	r3, [r3, #20]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d148      	bne.n	8010bd6 <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 8010b44:	2301      	movs	r3, #1
 8010b46:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8010b48:	6a3b      	ldr	r3, [r7, #32]
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f7ff fd95 	bl	801067c <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b58:	6a39      	ldr	r1, [r7, #32]
 8010b5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	68da      	ldr	r2, [r3, #12]
 8010b62:	6a3b      	ldr	r3, [r7, #32]
 8010b64:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	691a      	ldr	r2, [r3, #16]
 8010b6a:	6a3b      	ldr	r3, [r7, #32]
 8010b6c:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	689a      	ldr	r2, [r3, #8]
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	68db      	ldr	r3, [r3, #12]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d206      	bcs.n	8010b88 <rxSessionAcceptFrame+0x198>
 8010b7a:	4b2e      	ldr	r3, [pc, #184]	; (8010c34 <rxSessionAcceptFrame+0x244>)
 8010b7c:	4a24      	ldr	r2, [pc, #144]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010b7e:	f240 3115 	movw	r1, #789	; 0x315
 8010b82:	4824      	ldr	r0, [pc, #144]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010b84:	f000 fdde 	bl	8011744 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	689a      	ldr	r2, [r3, #8]
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 8010b94:	7dbb      	ldrb	r3, [r7, #22]
 8010b96:	f083 0301 	eor.w	r3, r3, #1
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d017      	beq.n	8010bd0 <rxSessionAcceptFrame+0x1e0>
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d814      	bhi.n	8010bd0 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 8010ba6:	6a3b      	ldr	r3, [r7, #32]
 8010ba8:	691a      	ldr	r2, [r3, #16]
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	f1c3 0302 	rsb	r3, r3, #2
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d206      	bcs.n	8010bc2 <rxSessionAcceptFrame+0x1d2>
 8010bb4:	4b20      	ldr	r3, [pc, #128]	; (8010c38 <rxSessionAcceptFrame+0x248>)
 8010bb6:	4a16      	ldr	r2, [pc, #88]	; (8010c10 <rxSessionAcceptFrame+0x220>)
 8010bb8:	f240 3119 	movw	r1, #793	; 0x319
 8010bbc:	4815      	ldr	r0, [pc, #84]	; (8010c14 <rxSessionAcceptFrame+0x224>)
 8010bbe:	f000 fdc1 	bl	8011744 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 8010bc2:	6a3b      	ldr	r3, [r7, #32]
 8010bc4:	691a      	ldr	r2, [r3, #16]
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	4413      	add	r3, r2
 8010bca:	1e9a      	subs	r2, r3, #2
 8010bcc:	6a3b      	ldr	r3, [r7, #32]
 8010bce:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 8010bd6:	68b9      	ldr	r1, [r7, #8]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f7ff fec3 	bl	8010964 <rxSessionRestart>
 8010bde:	e00e      	b.n	8010bfe <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	7e1b      	ldrb	r3, [r3, #24]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	bf14      	ite	ne
 8010be8:	2301      	movne	r3, #1
 8010bea:	2300      	moveq	r3, #0
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	f083 0301 	eor.w	r3, r3, #1
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	f003 0301 	and.w	r3, r3, #1
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	761a      	strb	r2, [r3, #24]
    }
    return out;
 8010bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3718      	adds	r7, #24
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	08016304 	.word	0x08016304
 8010c10:	08017080 	.word	0x08017080
 8010c14:	08016140 	.word	0x08016140
 8010c18:	08016660 	.word	0x08016660
 8010c1c:	08016598 	.word	0x08016598
 8010c20:	080165f4 	.word	0x080165f4
 8010c24:	08016734 	.word	0x08016734
 8010c28:	08016614 	.word	0x08016614
 8010c2c:	0801675c 	.word	0x0801675c
 8010c30:	08016768 	.word	0x08016768
 8010c34:	08016774 	.word	0x08016774
 8010c38:	080167a4 	.word	0x080167a4

08010c3c <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8010c3c:	b5b0      	push	{r4, r5, r7, lr}
 8010c3e:	b088      	sub	sp, #32
 8010c40:	af02      	add	r7, sp, #8
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	607a      	str	r2, [r7, #4]
 8010c48:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d106      	bne.n	8010c5e <rxSessionUpdate+0x22>
 8010c50:	4b6d      	ldr	r3, [pc, #436]	; (8010e08 <rxSessionUpdate+0x1cc>)
 8010c52:	4a6e      	ldr	r2, [pc, #440]	; (8010e0c <rxSessionUpdate+0x1d0>)
 8010c54:	f240 3137 	movw	r1, #823	; 0x337
 8010c58:	486d      	ldr	r0, [pc, #436]	; (8010e10 <rxSessionUpdate+0x1d4>)
 8010c5a:	f000 fd73 	bl	8011744 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d106      	bne.n	8010c72 <rxSessionUpdate+0x36>
 8010c64:	4b6b      	ldr	r3, [pc, #428]	; (8010e14 <rxSessionUpdate+0x1d8>)
 8010c66:	4a69      	ldr	r2, [pc, #420]	; (8010e0c <rxSessionUpdate+0x1d0>)
 8010c68:	f44f 714e 	mov.w	r1, #824	; 0x338
 8010c6c:	4868      	ldr	r0, [pc, #416]	; (8010e10 <rxSessionUpdate+0x1d4>)
 8010c6e:	f000 fd69 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d106      	bne.n	8010c86 <rxSessionUpdate+0x4a>
 8010c78:	4b67      	ldr	r3, [pc, #412]	; (8010e18 <rxSessionUpdate+0x1dc>)
 8010c7a:	4a64      	ldr	r2, [pc, #400]	; (8010e0c <rxSessionUpdate+0x1d0>)
 8010c7c:	f240 3139 	movw	r1, #825	; 0x339
 8010c80:	4863      	ldr	r0, [pc, #396]	; (8010e10 <rxSessionUpdate+0x1d4>)
 8010c82:	f000 fd5f 	bl	8011744 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8010c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d106      	bne.n	8010c9a <rxSessionUpdate+0x5e>
 8010c8c:	4b63      	ldr	r3, [pc, #396]	; (8010e1c <rxSessionUpdate+0x1e0>)
 8010c8e:	4a5f      	ldr	r2, [pc, #380]	; (8010e0c <rxSessionUpdate+0x1d0>)
 8010c90:	f240 313a 	movw	r1, #826	; 0x33a
 8010c94:	485e      	ldr	r0, [pc, #376]	; (8010e10 <rxSessionUpdate+0x1d4>)
 8010c96:	f000 fd55 	bl	8011744 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	7d9b      	ldrb	r3, [r3, #22]
 8010c9e:	2b1f      	cmp	r3, #31
 8010ca0:	d906      	bls.n	8010cb0 <rxSessionUpdate+0x74>
 8010ca2:	4b5f      	ldr	r3, [pc, #380]	; (8010e20 <rxSessionUpdate+0x1e4>)
 8010ca4:	4a59      	ldr	r2, [pc, #356]	; (8010e0c <rxSessionUpdate+0x1d0>)
 8010ca6:	f240 313b 	movw	r1, #827	; 0x33b
 8010caa:	4859      	ldr	r0, [pc, #356]	; (8010e10 <rxSessionUpdate+0x1d4>)
 8010cac:	f000 fd4a 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	7b9b      	ldrb	r3, [r3, #14]
 8010cb4:	2b1f      	cmp	r3, #31
 8010cb6:	d906      	bls.n	8010cc6 <rxSessionUpdate+0x8a>
 8010cb8:	4b5a      	ldr	r3, [pc, #360]	; (8010e24 <rxSessionUpdate+0x1e8>)
 8010cba:	4a54      	ldr	r2, [pc, #336]	; (8010e0c <rxSessionUpdate+0x1d0>)
 8010cbc:	f44f 714f 	mov.w	r1, #828	; 0x33c
 8010cc0:	4853      	ldr	r0, [pc, #332]	; (8010e10 <rxSessionUpdate+0x1d4>)
 8010cc2:	f000 fd3f 	bl	8011744 <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ccc:	68b9      	ldr	r1, [r7, #8]
 8010cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cd2:	4290      	cmp	r0, r2
 8010cd4:	eb71 0303 	sbcs.w	r3, r1, r3
 8010cd8:	d20f      	bcs.n	8010cfa <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce6:	1a84      	subs	r4, r0, r2
 8010ce8:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8010cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010cf0:	42a2      	cmp	r2, r4
 8010cf2:	41ab      	sbcs	r3, r5
 8010cf4:	d201      	bcs.n	8010cfa <rxSessionUpdate+0xbe>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	e000      	b.n	8010cfc <rxSessionUpdate+0xc0>
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	75bb      	strb	r3, [r7, #22]
 8010cfe:	7dbb      	ldrb	r3, [r7, #22]
 8010d00:	f003 0301 	and.w	r3, r3, #1
 8010d04:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	7d9a      	ldrb	r2, [r3, #22]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	7b9b      	ldrb	r3, [r3, #14]
 8010d0e:	4619      	mov	r1, r3
 8010d10:	4610      	mov	r0, r2
 8010d12:	f7ff fcf9 	bl	8010708 <rxComputeTransferIDDifference>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	bf8c      	ite	hi
 8010d1c:	2301      	movhi	r3, #1
 8010d1e:	2300      	movls	r3, #0
 8010d20:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8010d22:	7dbb      	ldrb	r3, [r7, #22]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d10b      	bne.n	8010d40 <rxSessionUpdate+0x104>
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	7ddb      	ldrb	r3, [r3, #23]
 8010d2c:	78fa      	ldrb	r2, [r7, #3]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d108      	bne.n	8010d44 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d004      	beq.n	8010d44 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8010d3a:	7d7b      	ldrb	r3, [r7, #21]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d001      	beq.n	8010d44 <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8010d40:	2301      	movs	r3, #1
 8010d42:	e000      	b.n	8010d46 <rxSessionUpdate+0x10a>
 8010d44:	2300      	movs	r3, #0
 8010d46:	753b      	strb	r3, [r7, #20]
 8010d48:	7d3b      	ldrb	r3, [r7, #20]
 8010d4a:	f003 0301 	and.w	r3, r3, #1
 8010d4e:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 8010d50:	7d3b      	ldrb	r3, [r7, #20]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d013      	beq.n	8010d7e <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d68:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	7b9a      	ldrb	r2, [r3, #14]
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	2201      	movs	r2, #1
 8010d76:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	78fa      	ldrb	r2, [r7, #3]
 8010d7c:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 8010d82:	7d3b      	ldrb	r3, [r7, #20]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d00b      	beq.n	8010da0 <rxSessionUpdate+0x164>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	7bdb      	ldrb	r3, [r3, #15]
 8010d8c:	f083 0301 	eor.w	r3, r3, #1
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d004      	beq.n	8010da0 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 8010d96:	68b9      	ldr	r1, [r7, #8]
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f7ff fde3 	bl	8010964 <rxSessionRestart>
 8010d9e:	e02c      	b.n	8010dfa <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	7ddb      	ldrb	r3, [r3, #23]
 8010da4:	78fa      	ldrb	r2, [r7, #3]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	bf0c      	ite	eq
 8010daa:	2301      	moveq	r3, #1
 8010dac:	2300      	movne	r3, #0
 8010dae:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	7c5a      	ldrb	r2, [r3, #17]
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	7e1b      	ldrb	r3, [r3, #24]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	bf0c      	ite	eq
 8010dbc:	2301      	moveq	r3, #1
 8010dbe:	2300      	movne	r3, #0
 8010dc0:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	7b9a      	ldrb	r2, [r3, #14]
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	7d9b      	ldrb	r3, [r3, #22]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	bf0c      	ite	eq
 8010dce:	2301      	moveq	r3, #1
 8010dd0:	2300      	movne	r3, #0
 8010dd2:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 8010dd4:	7cfb      	ldrb	r3, [r7, #19]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d00f      	beq.n	8010dfa <rxSessionUpdate+0x1be>
 8010dda:	7cbb      	ldrb	r3, [r7, #18]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00c      	beq.n	8010dfa <rxSessionUpdate+0x1be>
 8010de0:	7c7b      	ldrb	r3, [r7, #17]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d009      	beq.n	8010dfa <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 8010de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de8:	9300      	str	r3, [sp, #0]
 8010dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	68b9      	ldr	r1, [r7, #8]
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f7ff fdfd 	bl	80109f0 <rxSessionAcceptFrame>
 8010df6:	4603      	mov	r3, r0
 8010df8:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 8010dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3718      	adds	r7, #24
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bdb0      	pop	{r4, r5, r7, pc}
 8010e06:	bf00      	nop
 8010e08:	08016304 	.word	0x08016304
 8010e0c:	0801703c 	.word	0x0801703c
 8010e10:	08016140 	.word	0x08016140
 8010e14:	08016660 	.word	0x08016660
 8010e18:	08016598 	.word	0x08016598
 8010e1c:	08016614 	.word	0x08016614
 8010e20:	080167dc 	.word	0x080167dc
 8010e24:	08016734 	.word	0x08016734

08010e28 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8010e28:	b5b0      	push	{r4, r5, r7, lr}
 8010e2a:	b08c      	sub	sp, #48	; 0x30
 8010e2c:	af04      	add	r7, sp, #16
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	607a      	str	r2, [r7, #4]
 8010e34:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d106      	bne.n	8010e4a <rxAcceptFrame+0x22>
 8010e3c:	4b85      	ldr	r3, [pc, #532]	; (8011054 <rxAcceptFrame+0x22c>)
 8010e3e:	4a86      	ldr	r2, [pc, #536]	; (8011058 <rxAcceptFrame+0x230>)
 8010e40:	f44f 715a 	mov.w	r1, #872	; 0x368
 8010e44:	4885      	ldr	r0, [pc, #532]	; (801105c <rxAcceptFrame+0x234>)
 8010e46:	f000 fc7d 	bl	8011744 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d106      	bne.n	8010e5e <rxAcceptFrame+0x36>
 8010e50:	4b83      	ldr	r3, [pc, #524]	; (8011060 <rxAcceptFrame+0x238>)
 8010e52:	4a81      	ldr	r2, [pc, #516]	; (8011058 <rxAcceptFrame+0x230>)
 8010e54:	f240 3169 	movw	r1, #873	; 0x369
 8010e58:	4880      	ldr	r0, [pc, #512]	; (801105c <rxAcceptFrame+0x234>)
 8010e5a:	f000 fc73 	bl	8011744 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	8b9a      	ldrh	r2, [r3, #28]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	895b      	ldrh	r3, [r3, #10]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d006      	beq.n	8010e78 <rxAcceptFrame+0x50>
 8010e6a:	4b7e      	ldr	r3, [pc, #504]	; (8011064 <rxAcceptFrame+0x23c>)
 8010e6c:	4a7a      	ldr	r2, [pc, #488]	; (8011058 <rxAcceptFrame+0x230>)
 8010e6e:	f240 316a 	movw	r1, #874	; 0x36a
 8010e72:	487a      	ldr	r0, [pc, #488]	; (801105c <rxAcceptFrame+0x234>)
 8010e74:	f000 fc66 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d106      	bne.n	8010e8c <rxAcceptFrame+0x64>
 8010e7e:	4b7a      	ldr	r3, [pc, #488]	; (8011068 <rxAcceptFrame+0x240>)
 8010e80:	4a75      	ldr	r2, [pc, #468]	; (8011058 <rxAcceptFrame+0x230>)
 8010e82:	f240 316b 	movw	r1, #875	; 0x36b
 8010e86:	4875      	ldr	r0, [pc, #468]	; (801105c <rxAcceptFrame+0x234>)
 8010e88:	f000 fc5c 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	699b      	ldr	r3, [r3, #24]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d106      	bne.n	8010ea2 <rxAcceptFrame+0x7a>
 8010e94:	4b75      	ldr	r3, [pc, #468]	; (801106c <rxAcceptFrame+0x244>)
 8010e96:	4a70      	ldr	r2, [pc, #448]	; (8011058 <rxAcceptFrame+0x230>)
 8010e98:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8010e9c:	486f      	ldr	r0, [pc, #444]	; (801105c <rxAcceptFrame+0x234>)
 8010e9e:	f000 fc51 	bl	8011744 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	7b9b      	ldrb	r3, [r3, #14]
 8010ea6:	2b1f      	cmp	r3, #31
 8010ea8:	d906      	bls.n	8010eb8 <rxAcceptFrame+0x90>
 8010eaa:	4b71      	ldr	r3, [pc, #452]	; (8011070 <rxAcceptFrame+0x248>)
 8010eac:	4a6a      	ldr	r2, [pc, #424]	; (8011058 <rxAcceptFrame+0x230>)
 8010eae:	f240 316d 	movw	r1, #877	; 0x36d
 8010eb2:	486a      	ldr	r0, [pc, #424]	; (801105c <rxAcceptFrame+0x234>)
 8010eb4:	f000 fc46 	bl	8011744 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	7b5b      	ldrb	r3, [r3, #13]
 8010ebc:	2bff      	cmp	r3, #255	; 0xff
 8010ebe:	d00c      	beq.n	8010eda <rxAcceptFrame+0xb2>
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	791a      	ldrb	r2, [r3, #4]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	7b5b      	ldrb	r3, [r3, #13]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d006      	beq.n	8010eda <rxAcceptFrame+0xb2>
 8010ecc:	4b69      	ldr	r3, [pc, #420]	; (8011074 <rxAcceptFrame+0x24c>)
 8010ece:	4a62      	ldr	r2, [pc, #392]	; (8011058 <rxAcceptFrame+0x230>)
 8010ed0:	f240 316e 	movw	r1, #878	; 0x36e
 8010ed4:	4861      	ldr	r0, [pc, #388]	; (801105c <rxAcceptFrame+0x234>)
 8010ed6:	f000 fc35 	bl	8011744 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8010eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d106      	bne.n	8010eee <rxAcceptFrame+0xc6>
 8010ee0:	4b65      	ldr	r3, [pc, #404]	; (8011078 <rxAcceptFrame+0x250>)
 8010ee2:	4a5d      	ldr	r2, [pc, #372]	; (8011058 <rxAcceptFrame+0x230>)
 8010ee4:	f240 316f 	movw	r1, #879	; 0x36f
 8010ee8:	485c      	ldr	r0, [pc, #368]	; (801105c <rxAcceptFrame+0x234>)
 8010eea:	f000 fc2b 	bl	8011744 <__assert_func>

    int8_t out = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	7b1b      	ldrb	r3, [r3, #12]
 8010ef6:	b25b      	sxtb	r3, r3
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	db6c      	blt.n	8010fd6 <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	7b1b      	ldrb	r3, [r3, #12]
 8010f00:	68ba      	ldr	r2, [r7, #8]
 8010f02:	3308      	adds	r3, #8
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	4413      	add	r3, r2
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d134      	bne.n	8010f78 <rxAcceptFrame+0x150>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	7bdb      	ldrb	r3, [r3, #15]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d030      	beq.n	8010f78 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	689b      	ldr	r3, [r3, #8]
 8010f1a:	2120      	movs	r1, #32
 8010f1c:	68f8      	ldr	r0, [r7, #12]
 8010f1e:	4798      	blx	r3
 8010f20:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	7b1b      	ldrb	r3, [r3, #12]
 8010f26:	68ba      	ldr	r2, [r7, #8]
 8010f28:	3308      	adds	r3, #8
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	4413      	add	r3, r2
 8010f2e:	693a      	ldr	r2, [r7, #16]
 8010f30:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d01d      	beq.n	8010f74 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3e:	6939      	ldr	r1, [r7, #16]
 8010f40:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	2200      	movs	r2, #0
 8010f48:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	2200      	movs	r2, #0
 8010f54:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f5c:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	7b9a      	ldrb	r2, [r3, #14]
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	78fa      	ldrb	r2, [r7, #3]
 8010f6a:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	2201      	movs	r2, #1
 8010f70:	761a      	strb	r2, [r3, #24]
 8010f72:	e001      	b.n	8010f78 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 8010f74:	23fd      	movs	r3, #253	; 0xfd
 8010f76:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	7b1b      	ldrb	r3, [r3, #12]
 8010f7c:	68ba      	ldr	r2, [r7, #8]
 8010f7e:	3308      	adds	r3, #8
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	4413      	add	r3, r2
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d05e      	beq.n	8011048 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 8010f8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d006      	beq.n	8010fa0 <rxAcceptFrame+0x178>
 8010f92:	4b3a      	ldr	r3, [pc, #232]	; (801107c <rxAcceptFrame+0x254>)
 8010f94:	4a30      	ldr	r2, [pc, #192]	; (8011058 <rxAcceptFrame+0x230>)
 8010f96:	f240 318e 	movw	r1, #910	; 0x38e
 8010f9a:	4830      	ldr	r0, [pc, #192]	; (801105c <rxAcceptFrame+0x234>)
 8010f9c:	f000 fbd2 	bl	8011744 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	7b1b      	ldrb	r3, [r3, #12]
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	3308      	adds	r3, #8
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	4413      	add	r3, r2
 8010fac:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010fb4:	68b9      	ldr	r1, [r7, #8]
 8010fb6:	6989      	ldr	r1, [r1, #24]
 8010fb8:	78fd      	ldrb	r5, [r7, #3]
 8010fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fbc:	9003      	str	r0, [sp, #12]
 8010fbe:	9102      	str	r1, [sp, #8]
 8010fc0:	e9cd 2300 	strd	r2, r3, [sp]
 8010fc4:	462b      	mov	r3, r5
 8010fc6:	687a      	ldr	r2, [r7, #4]
 8010fc8:	4621      	mov	r1, r4
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f7ff fe36 	bl	8010c3c <rxSessionUpdate>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	77fb      	strb	r3, [r7, #31]
 8010fd4:	e038      	b.n	8011048 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	7b1b      	ldrb	r3, [r3, #12]
 8010fda:	2bff      	cmp	r3, #255	; 0xff
 8010fdc:	d006      	beq.n	8010fec <rxAcceptFrame+0x1c4>
 8010fde:	4b28      	ldr	r3, [pc, #160]	; (8011080 <rxAcceptFrame+0x258>)
 8010fe0:	4a1d      	ldr	r2, [pc, #116]	; (8011058 <rxAcceptFrame+0x230>)
 8010fe2:	f240 319a 	movw	r1, #922	; 0x39a
 8010fe6:	481d      	ldr	r0, [pc, #116]	; (801105c <rxAcceptFrame+0x234>)
 8010fe8:	f000 fbac 	bl	8011744 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	695a      	ldr	r2, [r3, #20]
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	bf28      	it	cs
 8010ff8:	4613      	movcs	r3, r2
 8010ffa:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	689b      	ldr	r3, [r3, #8]
 8011000:	69b9      	ldr	r1, [r7, #24]
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	4798      	blx	r3
 8011006:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d01a      	beq.n	8011044 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 801100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011010:	4619      	mov	r1, r3
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7ff fb32 	bl	801067c <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011020:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 8011024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011026:	69ba      	ldr	r2, [r7, #24]
 8011028:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 801102a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102c:	697a      	ldr	r2, [r7, #20]
 801102e:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	699b      	ldr	r3, [r3, #24]
 8011034:	69ba      	ldr	r2, [r7, #24]
 8011036:	4619      	mov	r1, r3
 8011038:	6978      	ldr	r0, [r7, #20]
 801103a:	f001 fd2c 	bl	8012a96 <memcpy>
            out = 1;
 801103e:	2301      	movs	r3, #1
 8011040:	77fb      	strb	r3, [r7, #31]
 8011042:	e001      	b.n	8011048 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 8011044:	23fd      	movs	r3, #253	; 0xfd
 8011046:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8011048:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801104c:	4618      	mov	r0, r3
 801104e:	3720      	adds	r7, #32
 8011050:	46bd      	mov	sp, r7
 8011052:	bdb0      	pop	{r4, r5, r7, pc}
 8011054:	08016304 	.word	0x08016304
 8011058:	0801702c 	.word	0x0801702c
 801105c:	08016140 	.word	0x08016140
 8011060:	08016804 	.word	0x08016804
 8011064:	08016820 	.word	0x08016820
 8011068:	08016598 	.word	0x08016598
 801106c:	080165f4 	.word	0x080165f4
 8011070:	08016734 	.word	0x08016734
 8011074:	08016848 	.word	0x08016848
 8011078:	08016614 	.word	0x08016614
 801107c:	080168a0 	.word	0x080168a0
 8011080:	080168ac 	.word	0x080168ac

08011084 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8011084:	b480      	push	{r7}
 8011086:	b085      	sub	sp, #20
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	881b      	ldrh	r3, [r3, #0]
 8011092:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	8b9b      	ldrh	r3, [r3, #28]
 8011098:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 801109a:	89fa      	ldrh	r2, [r7, #14]
 801109c:	89bb      	ldrh	r3, [r7, #12]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d00a      	beq.n	80110b8 <rxSubscriptionPredicateOnPortID+0x34>
 80110a2:	89fa      	ldrh	r2, [r7, #14]
 80110a4:	89bb      	ldrh	r3, [r7, #12]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	bf8c      	ite	hi
 80110aa:	2301      	movhi	r3, #1
 80110ac:	2300      	movls	r3, #0
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	461a      	mov	r2, r3
 80110b2:	4b05      	ldr	r3, [pc, #20]	; (80110c8 <rxSubscriptionPredicateOnPortID+0x44>)
 80110b4:	569b      	ldrsb	r3, [r3, r2]
 80110b6:	e000      	b.n	80110ba <rxSubscriptionPredicateOnPortID+0x36>
 80110b8:	2300      	movs	r3, #0
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3714      	adds	r7, #20
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	08017018 	.word	0x08017018

080110cc <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	331c      	adds	r3, #28
 80110da:	6839      	ldr	r1, [r7, #0]
 80110dc:	4618      	mov	r0, r3
 80110de:	f7ff ffd1 	bl	8011084 <rxSubscriptionPredicateOnPortID>
 80110e2:	4603      	mov	r3, r0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3708      	adds	r7, #8
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 80110ec:	b5b0      	push	{r4, r5, r7, lr}
 80110ee:	b08c      	sub	sp, #48	; 0x30
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	60f8      	str	r0, [r7, #12]
 80110f4:	60b9      	str	r1, [r7, #8]
 80110f6:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d106      	bne.n	801110c <canardInit+0x20>
 80110fe:	4b16      	ldr	r3, [pc, #88]	; (8011158 <canardInit+0x6c>)
 8011100:	4a16      	ldr	r2, [pc, #88]	; (801115c <canardInit+0x70>)
 8011102:	f240 31d6 	movw	r1, #982	; 0x3d6
 8011106:	4816      	ldr	r0, [pc, #88]	; (8011160 <canardInit+0x74>)
 8011108:	f000 fb1c 	bl	8011744 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d106      	bne.n	8011120 <canardInit+0x34>
 8011112:	4b14      	ldr	r3, [pc, #80]	; (8011164 <canardInit+0x78>)
 8011114:	4a11      	ldr	r2, [pc, #68]	; (801115c <canardInit+0x70>)
 8011116:	f240 31d7 	movw	r1, #983	; 0x3d7
 801111a:	4811      	ldr	r0, [pc, #68]	; (8011160 <canardInit+0x74>)
 801111c:	f000 fb12 	bl	8011744 <__assert_func>
    const CanardInstance out = {
 8011120:	2300      	movs	r3, #0
 8011122:	617b      	str	r3, [r7, #20]
 8011124:	23ff      	movs	r3, #255	; 0xff
 8011126:	763b      	strb	r3, [r7, #24]
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	61fb      	str	r3, [r7, #28]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	623b      	str	r3, [r7, #32]
 8011130:	2300      	movs	r3, #0
 8011132:	627b      	str	r3, [r7, #36]	; 0x24
 8011134:	2300      	movs	r3, #0
 8011136:	62bb      	str	r3, [r7, #40]	; 0x28
 8011138:	2300      	movs	r3, #0
 801113a:	62fb      	str	r3, [r7, #44]	; 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	461d      	mov	r5, r3
 8011140:	f107 0414 	add.w	r4, r7, #20
 8011144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011148:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801114c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	3730      	adds	r7, #48	; 0x30
 8011154:	46bd      	mov	sp, r7
 8011156:	bdb0      	pop	{r4, r5, r7, pc}
 8011158:	080168cc 	.word	0x080168cc
 801115c:	08016ea0 	.word	0x08016ea0
 8011160:	08016140 	.word	0x08016140
 8011164:	080168ec 	.word	0x080168ec

08011168 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 8011168:	b4b0      	push	{r4, r5, r7}
 801116a:	b08b      	sub	sp, #44	; 0x2c
 801116c:	af00      	add	r7, sp, #0
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	617b      	str	r3, [r7, #20]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	61bb      	str	r3, [r7, #24]
 801117c:	2300      	movs	r3, #0
 801117e:	61fb      	str	r3, [r7, #28]
 8011180:	2300      	movs	r3, #0
 8011182:	623b      	str	r3, [r7, #32]
 8011184:	2300      	movs	r3, #0
 8011186:	627b      	str	r3, [r7, #36]	; 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	461d      	mov	r5, r3
 801118c:	f107 0414 	add.w	r4, r7, #20
 8011190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011194:	6823      	ldr	r3, [r4, #0]
 8011196:	602b      	str	r3, [r5, #0]
}
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	372c      	adds	r7, #44	; 0x2c
 801119c:	46bd      	mov	sp, r7
 801119e:	bcb0      	pop	{r4, r5, r7}
 80111a0:	4770      	bx	lr
	...

080111a4 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b08e      	sub	sp, #56	; 0x38
 80111a8:	af06      	add	r7, sp, #24
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 80111b2:	f06f 0301 	mvn.w	r3, #1
 80111b6:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d062      	beq.n	8011284 <canardTxPush+0xe0>
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d05f      	beq.n	8011284 <canardTxPush+0xe0>
 80111c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d05c      	beq.n	8011284 <canardTxPush+0xe0>
 80111ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d102      	bne.n	80111d6 <canardTxPush+0x32>
 80111d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d156      	bne.n	8011284 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fe fc02 	bl	800f9e4 <adjustPresentationLayerMTU>
 80111e0:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	791a      	ldrb	r2, [r3, #4]
 80111e6:	69bb      	ldr	r3, [r7, #24]
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	4613      	mov	r3, r2
 80111ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111f2:	f7fe fc27 	bl	800fa44 <txMakeCANID>
 80111f6:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	db40      	blt.n	8011280 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 80111fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011200:	69bb      	ldr	r3, [r7, #24]
 8011202:	429a      	cmp	r2, r3
 8011204:	d81c      	bhi.n	8011240 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 8011206:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 8011208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801120a:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 801120c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801120e:	9103      	str	r1, [sp, #12]
 8011210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011212:	9102      	str	r1, [sp, #8]
 8011214:	9201      	str	r2, [sp, #4]
 8011216:	9300      	str	r3, [sp, #0]
 8011218:	e9d7 2300 	ldrd	r2, r3, [r7]
 801121c:	68b9      	ldr	r1, [r7, #8]
 801121e:	68f8      	ldr	r0, [r7, #12]
 8011220:	f7fe fdda 	bl	800fdd8 <txPushSingleFrame>
 8011224:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	2b00      	cmp	r3, #0
 801122a:	db2b      	blt.n	8011284 <canardTxPush+0xe0>
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	2b01      	cmp	r3, #1
 8011230:	d028      	beq.n	8011284 <canardTxPush+0xe0>
 8011232:	4b1c      	ldr	r3, [pc, #112]	; (80112a4 <canardTxPush+0x100>)
 8011234:	4a1c      	ldr	r2, [pc, #112]	; (80112a8 <canardTxPush+0x104>)
 8011236:	f240 4105 	movw	r1, #1029	; 0x405
 801123a:	481c      	ldr	r0, [pc, #112]	; (80112ac <canardTxPush+0x108>)
 801123c:	f000 fa82 	bl	8011744 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 8011240:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 8011242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011244:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 8011246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011248:	9105      	str	r1, [sp, #20]
 801124a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801124c:	9104      	str	r1, [sp, #16]
 801124e:	9203      	str	r2, [sp, #12]
 8011250:	9302      	str	r3, [sp, #8]
 8011252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011256:	e9cd 2300 	strd	r2, r3, [sp]
 801125a:	69ba      	ldr	r2, [r7, #24]
 801125c:	68b9      	ldr	r1, [r7, #8]
 801125e:	68f8      	ldr	r0, [r7, #12]
 8011260:	f7fe ffd4 	bl	801020c <txPushMultiFrame>
 8011264:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 8011266:	69fb      	ldr	r3, [r7, #28]
 8011268:	2b00      	cmp	r3, #0
 801126a:	db0b      	blt.n	8011284 <canardTxPush+0xe0>
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	2b01      	cmp	r3, #1
 8011270:	dc08      	bgt.n	8011284 <canardTxPush+0xe0>
 8011272:	4b0f      	ldr	r3, [pc, #60]	; (80112b0 <canardTxPush+0x10c>)
 8011274:	4a0c      	ldr	r2, [pc, #48]	; (80112a8 <canardTxPush+0x104>)
 8011276:	f240 4111 	movw	r1, #1041	; 0x411
 801127a:	480c      	ldr	r0, [pc, #48]	; (80112ac <canardTxPush+0x108>)
 801127c:	f000 fa62 	bl	8011744 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 8011284:	69fb      	ldr	r3, [r7, #28]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d106      	bne.n	8011298 <canardTxPush+0xf4>
 801128a:	4b0a      	ldr	r3, [pc, #40]	; (80112b4 <canardTxPush+0x110>)
 801128c:	4a06      	ldr	r2, [pc, #24]	; (80112a8 <canardTxPush+0x104>)
 801128e:	f240 4119 	movw	r1, #1049	; 0x419
 8011292:	4806      	ldr	r0, [pc, #24]	; (80112ac <canardTxPush+0x108>)
 8011294:	f000 fa56 	bl	8011744 <__assert_func>
    return out;
 8011298:	69fb      	ldr	r3, [r7, #28]
}
 801129a:	4618      	mov	r0, r3
 801129c:	3720      	adds	r7, #32
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	0801643c 	.word	0x0801643c
 80112a8:	08016eac 	.word	0x08016eac
 80112ac:	08016140 	.word	0x08016140
 80112b0:	08016580 	.word	0x08016580
 80112b4:	08016908 	.word	0x08016908

080112b8 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 80112c0:	2300      	movs	r3, #0
 80112c2:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d006      	beq.n	80112d8 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	68db      	ldr	r3, [r3, #12]
 80112ce:	2100      	movs	r1, #0
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fd ff1d 	bl	800f110 <cavlFindExtremum>
 80112d6:	60f8      	str	r0, [r7, #12]
    }
    return out;
 80112d8:	68fb      	ldr	r3, [r7, #12]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3710      	adds	r7, #16
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}

080112e2 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b084      	sub	sp, #16
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
 80112ea:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 80112ec:	2300      	movs	r3, #0
 80112ee:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d010      	beq.n	8011318 <canardTxPop+0x36>
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d00d      	beq.n	8011318 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	330c      	adds	r3, #12
 8011304:	683a      	ldr	r2, [r7, #0]
 8011306:	4611      	mov	r1, r2
 8011308:	4618      	mov	r0, r3
 801130a:	f7fe f957 	bl	800f5bc <cavlRemove>
        que->size--;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	689b      	ldr	r3, [r3, #8]
 8011312:	1e5a      	subs	r2, r3, #1
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	609a      	str	r2, [r3, #8]
    }
    return out;
 8011318:	68fb      	ldr	r3, [r7, #12]
}
 801131a:	4618      	mov	r0, r3
 801131c:	3710      	adds	r7, #16
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
	...

08011324 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b090      	sub	sp, #64	; 0x40
 8011328:	af02      	add	r7, sp, #8
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011330:	23fe      	movs	r3, #254	; 0xfe
 8011332:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d068      	beq.n	801140e <canardRxAccept+0xea>
 801133c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801133e:	2b00      	cmp	r3, #0
 8011340:	d065      	beq.n	801140e <canardRxAccept+0xea>
 8011342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011344:	2b00      	cmp	r3, #0
 8011346:	d062      	beq.n	801140e <canardRxAccept+0xea>
 8011348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011350:	d25d      	bcs.n	801140e <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 8011352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011354:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 8011356:	2b00      	cmp	r3, #0
 8011358:	d103      	bne.n	8011362 <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 801135a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d155      	bne.n	801140e <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 8011362:	f107 0310 	add.w	r3, r7, #16
 8011366:	2220      	movs	r2, #32
 8011368:	2100      	movs	r1, #0
 801136a:	4618      	mov	r0, r3
 801136c:	f001 faad 	bl	80128ca <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 8011370:	f107 0310 	add.w	r3, r7, #16
 8011374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011376:	e9d7 0100 	ldrd	r0, r1, [r7]
 801137a:	f7ff f83b 	bl	80103f4 <rxTryParseFrame>
 801137e:	4603      	mov	r3, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	d041      	beq.n	8011408 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 8011384:	7f7b      	ldrb	r3, [r7, #29]
 8011386:	2bff      	cmp	r3, #255	; 0xff
 8011388:	d004      	beq.n	8011394 <canardRxAccept+0x70>
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	791a      	ldrb	r2, [r3, #4]
 801138e:	7f7b      	ldrb	r3, [r7, #29]
 8011390:	429a      	cmp	r2, r3
 8011392:	d135      	bne.n	8011400 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 8011394:	7e7b      	ldrb	r3, [r7, #25]
 8011396:	3304      	adds	r3, #4
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	68fa      	ldr	r2, [r7, #12]
 801139c:	18d0      	adds	r0, r2, r3
 801139e:	f107 0310 	add.w	r3, r7, #16
 80113a2:	f103 010a 	add.w	r1, r3, #10
 80113a6:	2300      	movs	r3, #0
 80113a8:	4a21      	ldr	r2, [pc, #132]	; (8011430 <canardRxAccept+0x10c>)
 80113aa:	f7fe f889 	bl	800f4c0 <cavlSearch>
 80113ae:	6338      	str	r0, [r7, #48]	; 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 80113b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 80113b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113ba:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 80113bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d01a      	beq.n	80113f8 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 80113c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c4:	8b9a      	ldrh	r2, [r3, #28]
 80113c6:	8b7b      	ldrh	r3, [r7, #26]
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d006      	beq.n	80113da <canardRxAccept+0xb6>
 80113cc:	4b19      	ldr	r3, [pc, #100]	; (8011434 <canardRxAccept+0x110>)
 80113ce:	4a1a      	ldr	r2, [pc, #104]	; (8011438 <canardRxAccept+0x114>)
 80113d0:	f240 415a 	movw	r1, #1114	; 0x45a
 80113d4:	4819      	ldr	r0, [pc, #100]	; (801143c <canardRxAccept+0x118>)
 80113d6:	f000 f9b5 	bl	8011744 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 80113da:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80113de:	f107 0210 	add.w	r2, r7, #16
 80113e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113e4:	9300      	str	r3, [sp, #0]
 80113e6:	460b      	mov	r3, r1
 80113e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f7ff fd1c 	bl	8010e28 <rxAcceptFrame>
 80113f0:	4603      	mov	r3, r0
 80113f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 80113f6:	e00a      	b.n	801140e <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 80113f8:	2300      	movs	r3, #0
 80113fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            {
 80113fe:	e006      	b.n	801140e <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 8011400:	2300      	movs	r3, #0
 8011402:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011406:	e002      	b.n	801140e <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 8011408:	2300      	movs	r3, #0
 801140a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 801140e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8011412:	2b01      	cmp	r3, #1
 8011414:	dd06      	ble.n	8011424 <canardRxAccept+0x100>
 8011416:	4b0a      	ldr	r3, [pc, #40]	; (8011440 <canardRxAccept+0x11c>)
 8011418:	4a07      	ldr	r2, [pc, #28]	; (8011438 <canardRxAccept+0x114>)
 801141a:	f240 416c 	movw	r1, #1132	; 0x46c
 801141e:	4807      	ldr	r0, [pc, #28]	; (801143c <canardRxAccept+0x118>)
 8011420:	f000 f990 	bl	8011744 <__assert_func>
    return out;
 8011424:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011428:	4618      	mov	r0, r3
 801142a:	3738      	adds	r7, #56	; 0x38
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}
 8011430:	08011085 	.word	0x08011085
 8011434:	08016914 	.word	0x08016914
 8011438:	08017008 	.word	0x08017008
 801143c:	08016140 	.word	0x08016140
 8011440:	08016934 	.word	0x08016934

08011444 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b088      	sub	sp, #32
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	607b      	str	r3, [r7, #4]
 801144e:	460b      	mov	r3, r1
 8011450:	72fb      	strb	r3, [r7, #11]
 8011452:	4613      	mov	r3, r2
 8011454:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011456:	23fe      	movs	r3, #254	; 0xfe
 8011458:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 801145a:	7afb      	ldrb	r3, [r7, #11]
 801145c:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d04a      	beq.n	80114fa <canardRxSubscribe+0xb6>
 8011464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011466:	2b00      	cmp	r3, #0
 8011468:	d047      	beq.n	80114fa <canardRxSubscribe+0xb6>
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	2b02      	cmp	r3, #2
 801146e:	d844      	bhi.n	80114fa <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 8011470:	893a      	ldrh	r2, [r7, #8]
 8011472:	7afb      	ldrb	r3, [r7, #11]
 8011474:	4619      	mov	r1, r3
 8011476:	68f8      	ldr	r0, [r7, #12]
 8011478:	f000 f850 	bl	801151c <canardRxUnsubscribe>
 801147c:	4603      	mov	r3, r0
 801147e:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 8011480:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011484:	2b00      	cmp	r3, #0
 8011486:	db38      	blt.n	80114fa <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 8011488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801148a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801148e:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 8011492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 8011498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149a:	893a      	ldrh	r2, [r7, #8]
 801149c:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 801149e:	2300      	movs	r3, #0
 80114a0:	61bb      	str	r3, [r7, #24]
 80114a2:	e009      	b.n	80114b8 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 80114a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	3308      	adds	r3, #8
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	4413      	add	r3, r2
 80114ae:	2200      	movs	r2, #0
 80114b0:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	3301      	adds	r3, #1
 80114b6:	61bb      	str	r3, [r7, #24]
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	2b7f      	cmp	r3, #127	; 0x7f
 80114bc:	d9f2      	bls.n	80114a4 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	3304      	adds	r3, #4
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	18d0      	adds	r0, r2, r3
 80114c8:	4b0f      	ldr	r3, [pc, #60]	; (8011508 <canardRxSubscribe+0xc4>)
 80114ca:	4a10      	ldr	r2, [pc, #64]	; (801150c <canardRxSubscribe+0xc8>)
 80114cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80114ce:	f7fd fff7 	bl	800f4c0 <cavlSearch>
 80114d2:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 80114d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d6:	693a      	ldr	r2, [r7, #16]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d006      	beq.n	80114ea <canardRxSubscribe+0xa6>
 80114dc:	4b0c      	ldr	r3, [pc, #48]	; (8011510 <canardRxSubscribe+0xcc>)
 80114de:	4a0d      	ldr	r2, [pc, #52]	; (8011514 <canardRxSubscribe+0xd0>)
 80114e0:	f44f 6192 	mov.w	r1, #1168	; 0x490
 80114e4:	480c      	ldr	r0, [pc, #48]	; (8011518 <canardRxSubscribe+0xd4>)
 80114e6:	f000 f92d 	bl	8011744 <__assert_func>
            out = (out > 0) ? 0 : 1;
 80114ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	bfd4      	ite	le
 80114f2:	2301      	movle	r3, #1
 80114f4:	2300      	movgt	r3, #0
 80114f6:	b2db      	uxtb	r3, r3
 80114f8:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80114fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3720      	adds	r7, #32
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	0800f821 	.word	0x0800f821
 801150c:	080110cd 	.word	0x080110cd
 8011510:	08016940 	.word	0x08016940
 8011514:	080170d0 	.word	0x080170d0
 8011518:	08016140 	.word	0x08016140

0801151c <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b088      	sub	sp, #32
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	460b      	mov	r3, r1
 8011526:	70fb      	strb	r3, [r7, #3]
 8011528:	4613      	mov	r3, r2
 801152a:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 801152c:	23fe      	movs	r3, #254	; 0xfe
 801152e:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8011530:	78fb      	ldrb	r3, [r7, #3]
 8011532:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d05f      	beq.n	80115fa <canardRxUnsubscribe+0xde>
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	2b02      	cmp	r3, #2
 801153e:	d85c      	bhi.n	80115fa <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 8011540:	883b      	ldrh	r3, [r7, #0]
 8011542:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	3304      	adds	r3, #4
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	18d0      	adds	r0, r2, r3
 801154e:	f107 010e 	add.w	r1, r7, #14
 8011552:	2300      	movs	r3, #0
 8011554:	4a2c      	ldr	r2, [pc, #176]	; (8011608 <canardRxUnsubscribe+0xec>)
 8011556:	f7fd ffb3 	bl	800f4c0 <cavlSearch>
 801155a:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d049      	beq.n	80115f6 <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	3304      	adds	r3, #4
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	4413      	add	r3, r2
 801156c:	693a      	ldr	r2, [r7, #16]
 801156e:	4611      	mov	r1, r2
 8011570:	4618      	mov	r0, r3
 8011572:	f7fe f823 	bl	800f5bc <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	8b9b      	ldrh	r3, [r3, #28]
 801157a:	883a      	ldrh	r2, [r7, #0]
 801157c:	429a      	cmp	r2, r3
 801157e:	d006      	beq.n	801158e <canardRxUnsubscribe+0x72>
 8011580:	4b22      	ldr	r3, [pc, #136]	; (801160c <canardRxUnsubscribe+0xf0>)
 8011582:	4a23      	ldr	r2, [pc, #140]	; (8011610 <canardRxUnsubscribe+0xf4>)
 8011584:	f240 41a5 	movw	r1, #1189	; 0x4a5
 8011588:	4822      	ldr	r0, [pc, #136]	; (8011614 <canardRxUnsubscribe+0xf8>)
 801158a:	f000 f8db 	bl	8011744 <__assert_func>
            out = 1;
 801158e:	2301      	movs	r3, #1
 8011590:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8011592:	2300      	movs	r3, #0
 8011594:	61bb      	str	r3, [r7, #24]
 8011596:	e02a      	b.n	80115ee <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	68da      	ldr	r2, [r3, #12]
 801159c:	6939      	ldr	r1, [r7, #16]
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	3308      	adds	r3, #8
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	440b      	add	r3, r1
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d007      	beq.n	80115bc <canardRxUnsubscribe+0xa0>
 80115ac:	6939      	ldr	r1, [r7, #16]
 80115ae:	69bb      	ldr	r3, [r7, #24]
 80115b0:	3308      	adds	r3, #8
 80115b2:	009b      	lsls	r3, r3, #2
 80115b4:	440b      	add	r3, r1
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	691b      	ldr	r3, [r3, #16]
 80115ba:	e000      	b.n	80115be <canardRxUnsubscribe+0xa2>
 80115bc:	2300      	movs	r3, #0
 80115be:	4619      	mov	r1, r3
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	68da      	ldr	r2, [r3, #12]
 80115c8:	6939      	ldr	r1, [r7, #16]
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	3308      	adds	r3, #8
 80115ce:	009b      	lsls	r3, r3, #2
 80115d0:	440b      	add	r3, r1
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	4619      	mov	r1, r3
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	4790      	blx	r2
                sub->sessions[i] = NULL;
 80115da:	693a      	ldr	r2, [r7, #16]
 80115dc:	69bb      	ldr	r3, [r7, #24]
 80115de:	3308      	adds	r3, #8
 80115e0:	009b      	lsls	r3, r3, #2
 80115e2:	4413      	add	r3, r2
 80115e4:	2200      	movs	r2, #0
 80115e6:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80115e8:	69bb      	ldr	r3, [r7, #24]
 80115ea:	3301      	adds	r3, #1
 80115ec:	61bb      	str	r3, [r7, #24]
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	2b7f      	cmp	r3, #127	; 0x7f
 80115f2:	d9d1      	bls.n	8011598 <canardRxUnsubscribe+0x7c>
 80115f4:	e001      	b.n	80115fa <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 80115f6:	2300      	movs	r3, #0
 80115f8:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80115fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3720      	adds	r7, #32
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	08011085 	.word	0x08011085
 801160c:	08016960 	.word	0x08016960
 8011610:	080170e4 	.word	0x080170e4
 8011614:	08016140 	.word	0x08016140

08011618 <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 8011618:	b480      	push	{r7}
 801161a:	b085      	sub	sp, #20
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	460b      	mov	r3, r1
 8011622:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 8011624:	f107 0308 	add.w	r3, r7, #8
 8011628:	2200      	movs	r2, #0
 801162a:	601a      	str	r2, [r3, #0]
 801162c:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 801162e:	887b      	ldrh	r3, [r7, #2]
 8011630:	021b      	lsls	r3, r3, #8
 8011632:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 8011634:	4b07      	ldr	r3, [pc, #28]	; (8011654 <canardMakeFilterForSubject+0x3c>)
 8011636:	60fb      	str	r3, [r7, #12]

    return out;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	461a      	mov	r2, r3
 801163c:	f107 0308 	add.w	r3, r7, #8
 8011640:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011644:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	3714      	adds	r7, #20
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr
 8011654:	021fff80 	.word	0x021fff80

08011658 <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 8011658:	b480      	push	{r7}
 801165a:	b085      	sub	sp, #20
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	460b      	mov	r3, r1
 8011662:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 8011664:	f107 0308 	add.w	r3, r7, #8
 8011668:	2200      	movs	r2, #0
 801166a:	601a      	str	r2, [r3, #0]
 801166c:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 801166e:	78fb      	ldrb	r3, [r7, #3]
 8011670:	01db      	lsls	r3, r3, #7
 8011672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011676:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 8011678:	4b07      	ldr	r3, [pc, #28]	; (8011698 <canardMakeFilterForServices+0x40>)
 801167a:	60fb      	str	r3, [r7, #12]

    return out;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	461a      	mov	r2, r3
 8011680:	f107 0308 	add.w	r3, r7, #8
 8011684:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011688:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	3714      	adds	r7, #20
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr
 8011698:	02803f80 	.word	0x02803f80

0801169c <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 801169c:	b480      	push	{r7}
 801169e:	b087      	sub	sp, #28
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 80116a8:	f107 0310 	add.w	r3, r7, #16
 80116ac:	2200      	movs	r2, #0
 80116ae:	601a      	str	r2, [r3, #0]
 80116b0:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	685a      	ldr	r2, [r3, #4]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	401a      	ands	r2, r3
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	6819      	ldr	r1, [r3, #0]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	404b      	eors	r3, r1
 80116c6:	43db      	mvns	r3, r3
 80116c8:	4013      	ands	r3, r2
 80116ca:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	4013      	ands	r3, r2
 80116d4:	613b      	str	r3, [r7, #16]

    return out;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	461a      	mov	r2, r3
 80116da:	f107 0310 	add.w	r3, r7, #16
 80116de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80116e2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	371c      	adds	r7, #28
 80116ea:	46bd      	mov	sp, r7
 80116ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f0:	4770      	bx	lr

080116f2 <_ZdlPvj>:
 80116f2:	f000 b814 	b.w	801171e <_ZdlPv>

080116f6 <_Znwj>:
 80116f6:	2801      	cmp	r0, #1
 80116f8:	bf38      	it	cc
 80116fa:	2001      	movcc	r0, #1
 80116fc:	b510      	push	{r4, lr}
 80116fe:	4604      	mov	r4, r0
 8011700:	4620      	mov	r0, r4
 8011702:	f000 f84f 	bl	80117a4 <malloc>
 8011706:	b100      	cbz	r0, 801170a <_Znwj+0x14>
 8011708:	bd10      	pop	{r4, pc}
 801170a:	f000 f80b 	bl	8011724 <_ZSt15get_new_handlerv>
 801170e:	b908      	cbnz	r0, 8011714 <_Znwj+0x1e>
 8011710:	f000 f810 	bl	8011734 <abort>
 8011714:	4780      	blx	r0
 8011716:	e7f3      	b.n	8011700 <_Znwj+0xa>

08011718 <_ZSt25__throw_bad_function_callv>:
 8011718:	b508      	push	{r3, lr}
 801171a:	f000 f80b 	bl	8011734 <abort>

0801171e <_ZdlPv>:
 801171e:	f000 b849 	b.w	80117b4 <free>
	...

08011724 <_ZSt15get_new_handlerv>:
 8011724:	4b02      	ldr	r3, [pc, #8]	; (8011730 <_ZSt15get_new_handlerv+0xc>)
 8011726:	6818      	ldr	r0, [r3, #0]
 8011728:	f3bf 8f5b 	dmb	ish
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop
 8011730:	20000910 	.word	0x20000910

08011734 <abort>:
 8011734:	b508      	push	{r3, lr}
 8011736:	2006      	movs	r0, #6
 8011738:	f001 f90a 	bl	8012950 <raise>
 801173c:	2001      	movs	r0, #1
 801173e:	f7f6 ff55 	bl	80085ec <_exit>
	...

08011744 <__assert_func>:
 8011744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011746:	4614      	mov	r4, r2
 8011748:	461a      	mov	r2, r3
 801174a:	4b09      	ldr	r3, [pc, #36]	; (8011770 <__assert_func+0x2c>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	4605      	mov	r5, r0
 8011750:	68d8      	ldr	r0, [r3, #12]
 8011752:	b14c      	cbz	r4, 8011768 <__assert_func+0x24>
 8011754:	4b07      	ldr	r3, [pc, #28]	; (8011774 <__assert_func+0x30>)
 8011756:	9100      	str	r1, [sp, #0]
 8011758:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801175c:	4906      	ldr	r1, [pc, #24]	; (8011778 <__assert_func+0x34>)
 801175e:	462b      	mov	r3, r5
 8011760:	f000 fff6 	bl	8012750 <fiprintf>
 8011764:	f7ff ffe6 	bl	8011734 <abort>
 8011768:	4b04      	ldr	r3, [pc, #16]	; (801177c <__assert_func+0x38>)
 801176a:	461c      	mov	r4, r3
 801176c:	e7f3      	b.n	8011756 <__assert_func+0x12>
 801176e:	bf00      	nop
 8011770:	200000a0 	.word	0x200000a0
 8011774:	080170f8 	.word	0x080170f8
 8011778:	08017105 	.word	0x08017105
 801177c:	08017133 	.word	0x08017133

08011780 <exit>:
 8011780:	b508      	push	{r3, lr}
 8011782:	4b06      	ldr	r3, [pc, #24]	; (801179c <exit+0x1c>)
 8011784:	4604      	mov	r4, r0
 8011786:	b113      	cbz	r3, 801178e <exit+0xe>
 8011788:	2100      	movs	r1, #0
 801178a:	f3af 8000 	nop.w
 801178e:	4b04      	ldr	r3, [pc, #16]	; (80117a0 <exit+0x20>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	b103      	cbz	r3, 8011796 <exit+0x16>
 8011794:	4798      	blx	r3
 8011796:	4620      	mov	r0, r4
 8011798:	f7f6 ff28 	bl	80085ec <_exit>
 801179c:	00000000 	.word	0x00000000
 80117a0:	20000a54 	.word	0x20000a54

080117a4 <malloc>:
 80117a4:	4b02      	ldr	r3, [pc, #8]	; (80117b0 <malloc+0xc>)
 80117a6:	4601      	mov	r1, r0
 80117a8:	6818      	ldr	r0, [r3, #0]
 80117aa:	f000 b82b 	b.w	8011804 <_malloc_r>
 80117ae:	bf00      	nop
 80117b0:	200000a0 	.word	0x200000a0

080117b4 <free>:
 80117b4:	4b02      	ldr	r3, [pc, #8]	; (80117c0 <free+0xc>)
 80117b6:	4601      	mov	r1, r0
 80117b8:	6818      	ldr	r0, [r3, #0]
 80117ba:	f001 bffb 	b.w	80137b4 <_free_r>
 80117be:	bf00      	nop
 80117c0:	200000a0 	.word	0x200000a0

080117c4 <sbrk_aligned>:
 80117c4:	b570      	push	{r4, r5, r6, lr}
 80117c6:	4e0e      	ldr	r6, [pc, #56]	; (8011800 <sbrk_aligned+0x3c>)
 80117c8:	460c      	mov	r4, r1
 80117ca:	6831      	ldr	r1, [r6, #0]
 80117cc:	4605      	mov	r5, r0
 80117ce:	b911      	cbnz	r1, 80117d6 <sbrk_aligned+0x12>
 80117d0:	f001 f912 	bl	80129f8 <_sbrk_r>
 80117d4:	6030      	str	r0, [r6, #0]
 80117d6:	4621      	mov	r1, r4
 80117d8:	4628      	mov	r0, r5
 80117da:	f001 f90d 	bl	80129f8 <_sbrk_r>
 80117de:	1c43      	adds	r3, r0, #1
 80117e0:	d00a      	beq.n	80117f8 <sbrk_aligned+0x34>
 80117e2:	1cc4      	adds	r4, r0, #3
 80117e4:	f024 0403 	bic.w	r4, r4, #3
 80117e8:	42a0      	cmp	r0, r4
 80117ea:	d007      	beq.n	80117fc <sbrk_aligned+0x38>
 80117ec:	1a21      	subs	r1, r4, r0
 80117ee:	4628      	mov	r0, r5
 80117f0:	f001 f902 	bl	80129f8 <_sbrk_r>
 80117f4:	3001      	adds	r0, #1
 80117f6:	d101      	bne.n	80117fc <sbrk_aligned+0x38>
 80117f8:	f04f 34ff 	mov.w	r4, #4294967295
 80117fc:	4620      	mov	r0, r4
 80117fe:	bd70      	pop	{r4, r5, r6, pc}
 8011800:	20000918 	.word	0x20000918

08011804 <_malloc_r>:
 8011804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011808:	1ccd      	adds	r5, r1, #3
 801180a:	f025 0503 	bic.w	r5, r5, #3
 801180e:	3508      	adds	r5, #8
 8011810:	2d0c      	cmp	r5, #12
 8011812:	bf38      	it	cc
 8011814:	250c      	movcc	r5, #12
 8011816:	2d00      	cmp	r5, #0
 8011818:	4607      	mov	r7, r0
 801181a:	db01      	blt.n	8011820 <_malloc_r+0x1c>
 801181c:	42a9      	cmp	r1, r5
 801181e:	d905      	bls.n	801182c <_malloc_r+0x28>
 8011820:	230c      	movs	r3, #12
 8011822:	603b      	str	r3, [r7, #0]
 8011824:	2600      	movs	r6, #0
 8011826:	4630      	mov	r0, r6
 8011828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801182c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011900 <_malloc_r+0xfc>
 8011830:	f000 f868 	bl	8011904 <__malloc_lock>
 8011834:	f8d8 3000 	ldr.w	r3, [r8]
 8011838:	461c      	mov	r4, r3
 801183a:	bb5c      	cbnz	r4, 8011894 <_malloc_r+0x90>
 801183c:	4629      	mov	r1, r5
 801183e:	4638      	mov	r0, r7
 8011840:	f7ff ffc0 	bl	80117c4 <sbrk_aligned>
 8011844:	1c43      	adds	r3, r0, #1
 8011846:	4604      	mov	r4, r0
 8011848:	d155      	bne.n	80118f6 <_malloc_r+0xf2>
 801184a:	f8d8 4000 	ldr.w	r4, [r8]
 801184e:	4626      	mov	r6, r4
 8011850:	2e00      	cmp	r6, #0
 8011852:	d145      	bne.n	80118e0 <_malloc_r+0xdc>
 8011854:	2c00      	cmp	r4, #0
 8011856:	d048      	beq.n	80118ea <_malloc_r+0xe6>
 8011858:	6823      	ldr	r3, [r4, #0]
 801185a:	4631      	mov	r1, r6
 801185c:	4638      	mov	r0, r7
 801185e:	eb04 0903 	add.w	r9, r4, r3
 8011862:	f001 f8c9 	bl	80129f8 <_sbrk_r>
 8011866:	4581      	cmp	r9, r0
 8011868:	d13f      	bne.n	80118ea <_malloc_r+0xe6>
 801186a:	6821      	ldr	r1, [r4, #0]
 801186c:	1a6d      	subs	r5, r5, r1
 801186e:	4629      	mov	r1, r5
 8011870:	4638      	mov	r0, r7
 8011872:	f7ff ffa7 	bl	80117c4 <sbrk_aligned>
 8011876:	3001      	adds	r0, #1
 8011878:	d037      	beq.n	80118ea <_malloc_r+0xe6>
 801187a:	6823      	ldr	r3, [r4, #0]
 801187c:	442b      	add	r3, r5
 801187e:	6023      	str	r3, [r4, #0]
 8011880:	f8d8 3000 	ldr.w	r3, [r8]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d038      	beq.n	80118fa <_malloc_r+0xf6>
 8011888:	685a      	ldr	r2, [r3, #4]
 801188a:	42a2      	cmp	r2, r4
 801188c:	d12b      	bne.n	80118e6 <_malloc_r+0xe2>
 801188e:	2200      	movs	r2, #0
 8011890:	605a      	str	r2, [r3, #4]
 8011892:	e00f      	b.n	80118b4 <_malloc_r+0xb0>
 8011894:	6822      	ldr	r2, [r4, #0]
 8011896:	1b52      	subs	r2, r2, r5
 8011898:	d41f      	bmi.n	80118da <_malloc_r+0xd6>
 801189a:	2a0b      	cmp	r2, #11
 801189c:	d917      	bls.n	80118ce <_malloc_r+0xca>
 801189e:	1961      	adds	r1, r4, r5
 80118a0:	42a3      	cmp	r3, r4
 80118a2:	6025      	str	r5, [r4, #0]
 80118a4:	bf18      	it	ne
 80118a6:	6059      	strne	r1, [r3, #4]
 80118a8:	6863      	ldr	r3, [r4, #4]
 80118aa:	bf08      	it	eq
 80118ac:	f8c8 1000 	streq.w	r1, [r8]
 80118b0:	5162      	str	r2, [r4, r5]
 80118b2:	604b      	str	r3, [r1, #4]
 80118b4:	4638      	mov	r0, r7
 80118b6:	f104 060b 	add.w	r6, r4, #11
 80118ba:	f000 f829 	bl	8011910 <__malloc_unlock>
 80118be:	f026 0607 	bic.w	r6, r6, #7
 80118c2:	1d23      	adds	r3, r4, #4
 80118c4:	1af2      	subs	r2, r6, r3
 80118c6:	d0ae      	beq.n	8011826 <_malloc_r+0x22>
 80118c8:	1b9b      	subs	r3, r3, r6
 80118ca:	50a3      	str	r3, [r4, r2]
 80118cc:	e7ab      	b.n	8011826 <_malloc_r+0x22>
 80118ce:	42a3      	cmp	r3, r4
 80118d0:	6862      	ldr	r2, [r4, #4]
 80118d2:	d1dd      	bne.n	8011890 <_malloc_r+0x8c>
 80118d4:	f8c8 2000 	str.w	r2, [r8]
 80118d8:	e7ec      	b.n	80118b4 <_malloc_r+0xb0>
 80118da:	4623      	mov	r3, r4
 80118dc:	6864      	ldr	r4, [r4, #4]
 80118de:	e7ac      	b.n	801183a <_malloc_r+0x36>
 80118e0:	4634      	mov	r4, r6
 80118e2:	6876      	ldr	r6, [r6, #4]
 80118e4:	e7b4      	b.n	8011850 <_malloc_r+0x4c>
 80118e6:	4613      	mov	r3, r2
 80118e8:	e7cc      	b.n	8011884 <_malloc_r+0x80>
 80118ea:	230c      	movs	r3, #12
 80118ec:	603b      	str	r3, [r7, #0]
 80118ee:	4638      	mov	r0, r7
 80118f0:	f000 f80e 	bl	8011910 <__malloc_unlock>
 80118f4:	e797      	b.n	8011826 <_malloc_r+0x22>
 80118f6:	6025      	str	r5, [r4, #0]
 80118f8:	e7dc      	b.n	80118b4 <_malloc_r+0xb0>
 80118fa:	605b      	str	r3, [r3, #4]
 80118fc:	deff      	udf	#255	; 0xff
 80118fe:	bf00      	nop
 8011900:	20000914 	.word	0x20000914

08011904 <__malloc_lock>:
 8011904:	4801      	ldr	r0, [pc, #4]	; (801190c <__malloc_lock+0x8>)
 8011906:	f001 b8c4 	b.w	8012a92 <__retarget_lock_acquire_recursive>
 801190a:	bf00      	nop
 801190c:	20000a5c 	.word	0x20000a5c

08011910 <__malloc_unlock>:
 8011910:	4801      	ldr	r0, [pc, #4]	; (8011918 <__malloc_unlock+0x8>)
 8011912:	f001 b8bf 	b.w	8012a94 <__retarget_lock_release_recursive>
 8011916:	bf00      	nop
 8011918:	20000a5c 	.word	0x20000a5c

0801191c <__cvt>:
 801191c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011920:	ec55 4b10 	vmov	r4, r5, d0
 8011924:	2d00      	cmp	r5, #0
 8011926:	460e      	mov	r6, r1
 8011928:	4619      	mov	r1, r3
 801192a:	462b      	mov	r3, r5
 801192c:	bfbb      	ittet	lt
 801192e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011932:	461d      	movlt	r5, r3
 8011934:	2300      	movge	r3, #0
 8011936:	232d      	movlt	r3, #45	; 0x2d
 8011938:	700b      	strb	r3, [r1, #0]
 801193a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801193c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011940:	4691      	mov	r9, r2
 8011942:	f023 0820 	bic.w	r8, r3, #32
 8011946:	bfbc      	itt	lt
 8011948:	4622      	movlt	r2, r4
 801194a:	4614      	movlt	r4, r2
 801194c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011950:	d005      	beq.n	801195e <__cvt+0x42>
 8011952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011956:	d100      	bne.n	801195a <__cvt+0x3e>
 8011958:	3601      	adds	r6, #1
 801195a:	2102      	movs	r1, #2
 801195c:	e000      	b.n	8011960 <__cvt+0x44>
 801195e:	2103      	movs	r1, #3
 8011960:	ab03      	add	r3, sp, #12
 8011962:	9301      	str	r3, [sp, #4]
 8011964:	ab02      	add	r3, sp, #8
 8011966:	9300      	str	r3, [sp, #0]
 8011968:	ec45 4b10 	vmov	d0, r4, r5
 801196c:	4653      	mov	r3, sl
 801196e:	4632      	mov	r2, r6
 8011970:	f001 f92e 	bl	8012bd0 <_dtoa_r>
 8011974:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011978:	4607      	mov	r7, r0
 801197a:	d102      	bne.n	8011982 <__cvt+0x66>
 801197c:	f019 0f01 	tst.w	r9, #1
 8011980:	d022      	beq.n	80119c8 <__cvt+0xac>
 8011982:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011986:	eb07 0906 	add.w	r9, r7, r6
 801198a:	d110      	bne.n	80119ae <__cvt+0x92>
 801198c:	783b      	ldrb	r3, [r7, #0]
 801198e:	2b30      	cmp	r3, #48	; 0x30
 8011990:	d10a      	bne.n	80119a8 <__cvt+0x8c>
 8011992:	2200      	movs	r2, #0
 8011994:	2300      	movs	r3, #0
 8011996:	4620      	mov	r0, r4
 8011998:	4629      	mov	r1, r5
 801199a:	f7ef f8bd 	bl	8000b18 <__aeabi_dcmpeq>
 801199e:	b918      	cbnz	r0, 80119a8 <__cvt+0x8c>
 80119a0:	f1c6 0601 	rsb	r6, r6, #1
 80119a4:	f8ca 6000 	str.w	r6, [sl]
 80119a8:	f8da 3000 	ldr.w	r3, [sl]
 80119ac:	4499      	add	r9, r3
 80119ae:	2200      	movs	r2, #0
 80119b0:	2300      	movs	r3, #0
 80119b2:	4620      	mov	r0, r4
 80119b4:	4629      	mov	r1, r5
 80119b6:	f7ef f8af 	bl	8000b18 <__aeabi_dcmpeq>
 80119ba:	b108      	cbz	r0, 80119c0 <__cvt+0xa4>
 80119bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80119c0:	2230      	movs	r2, #48	; 0x30
 80119c2:	9b03      	ldr	r3, [sp, #12]
 80119c4:	454b      	cmp	r3, r9
 80119c6:	d307      	bcc.n	80119d8 <__cvt+0xbc>
 80119c8:	9b03      	ldr	r3, [sp, #12]
 80119ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119cc:	1bdb      	subs	r3, r3, r7
 80119ce:	4638      	mov	r0, r7
 80119d0:	6013      	str	r3, [r2, #0]
 80119d2:	b004      	add	sp, #16
 80119d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119d8:	1c59      	adds	r1, r3, #1
 80119da:	9103      	str	r1, [sp, #12]
 80119dc:	701a      	strb	r2, [r3, #0]
 80119de:	e7f0      	b.n	80119c2 <__cvt+0xa6>

080119e0 <__exponent>:
 80119e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119e2:	4603      	mov	r3, r0
 80119e4:	2900      	cmp	r1, #0
 80119e6:	bfb8      	it	lt
 80119e8:	4249      	neglt	r1, r1
 80119ea:	f803 2b02 	strb.w	r2, [r3], #2
 80119ee:	bfb4      	ite	lt
 80119f0:	222d      	movlt	r2, #45	; 0x2d
 80119f2:	222b      	movge	r2, #43	; 0x2b
 80119f4:	2909      	cmp	r1, #9
 80119f6:	7042      	strb	r2, [r0, #1]
 80119f8:	dd2a      	ble.n	8011a50 <__exponent+0x70>
 80119fa:	f10d 0207 	add.w	r2, sp, #7
 80119fe:	4617      	mov	r7, r2
 8011a00:	260a      	movs	r6, #10
 8011a02:	4694      	mov	ip, r2
 8011a04:	fb91 f5f6 	sdiv	r5, r1, r6
 8011a08:	fb06 1415 	mls	r4, r6, r5, r1
 8011a0c:	3430      	adds	r4, #48	; 0x30
 8011a0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011a12:	460c      	mov	r4, r1
 8011a14:	2c63      	cmp	r4, #99	; 0x63
 8011a16:	f102 32ff 	add.w	r2, r2, #4294967295
 8011a1a:	4629      	mov	r1, r5
 8011a1c:	dcf1      	bgt.n	8011a02 <__exponent+0x22>
 8011a1e:	3130      	adds	r1, #48	; 0x30
 8011a20:	f1ac 0402 	sub.w	r4, ip, #2
 8011a24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011a28:	1c41      	adds	r1, r0, #1
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	42ba      	cmp	r2, r7
 8011a2e:	d30a      	bcc.n	8011a46 <__exponent+0x66>
 8011a30:	f10d 0209 	add.w	r2, sp, #9
 8011a34:	eba2 020c 	sub.w	r2, r2, ip
 8011a38:	42bc      	cmp	r4, r7
 8011a3a:	bf88      	it	hi
 8011a3c:	2200      	movhi	r2, #0
 8011a3e:	4413      	add	r3, r2
 8011a40:	1a18      	subs	r0, r3, r0
 8011a42:	b003      	add	sp, #12
 8011a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011a4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011a4e:	e7ed      	b.n	8011a2c <__exponent+0x4c>
 8011a50:	2330      	movs	r3, #48	; 0x30
 8011a52:	3130      	adds	r1, #48	; 0x30
 8011a54:	7083      	strb	r3, [r0, #2]
 8011a56:	70c1      	strb	r1, [r0, #3]
 8011a58:	1d03      	adds	r3, r0, #4
 8011a5a:	e7f1      	b.n	8011a40 <__exponent+0x60>

08011a5c <_printf_float>:
 8011a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a60:	ed2d 8b02 	vpush	{d8}
 8011a64:	b08d      	sub	sp, #52	; 0x34
 8011a66:	460c      	mov	r4, r1
 8011a68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011a6c:	4616      	mov	r6, r2
 8011a6e:	461f      	mov	r7, r3
 8011a70:	4605      	mov	r5, r0
 8011a72:	f000 ff75 	bl	8012960 <_localeconv_r>
 8011a76:	f8d0 a000 	ldr.w	sl, [r0]
 8011a7a:	4650      	mov	r0, sl
 8011a7c:	f7ee fc20 	bl	80002c0 <strlen>
 8011a80:	2300      	movs	r3, #0
 8011a82:	930a      	str	r3, [sp, #40]	; 0x28
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	9305      	str	r3, [sp, #20]
 8011a88:	f8d8 3000 	ldr.w	r3, [r8]
 8011a8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011a90:	3307      	adds	r3, #7
 8011a92:	f023 0307 	bic.w	r3, r3, #7
 8011a96:	f103 0208 	add.w	r2, r3, #8
 8011a9a:	f8c8 2000 	str.w	r2, [r8]
 8011a9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011aa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011aa6:	9307      	str	r3, [sp, #28]
 8011aa8:	f8cd 8018 	str.w	r8, [sp, #24]
 8011aac:	ee08 0a10 	vmov	s16, r0
 8011ab0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ab8:	4b9e      	ldr	r3, [pc, #632]	; (8011d34 <_printf_float+0x2d8>)
 8011aba:	f04f 32ff 	mov.w	r2, #4294967295
 8011abe:	f7ef f85d 	bl	8000b7c <__aeabi_dcmpun>
 8011ac2:	bb88      	cbnz	r0, 8011b28 <_printf_float+0xcc>
 8011ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ac8:	4b9a      	ldr	r3, [pc, #616]	; (8011d34 <_printf_float+0x2d8>)
 8011aca:	f04f 32ff 	mov.w	r2, #4294967295
 8011ace:	f7ef f837 	bl	8000b40 <__aeabi_dcmple>
 8011ad2:	bb48      	cbnz	r0, 8011b28 <_printf_float+0xcc>
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	4640      	mov	r0, r8
 8011ada:	4649      	mov	r1, r9
 8011adc:	f7ef f826 	bl	8000b2c <__aeabi_dcmplt>
 8011ae0:	b110      	cbz	r0, 8011ae8 <_printf_float+0x8c>
 8011ae2:	232d      	movs	r3, #45	; 0x2d
 8011ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ae8:	4a93      	ldr	r2, [pc, #588]	; (8011d38 <_printf_float+0x2dc>)
 8011aea:	4b94      	ldr	r3, [pc, #592]	; (8011d3c <_printf_float+0x2e0>)
 8011aec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011af0:	bf94      	ite	ls
 8011af2:	4690      	movls	r8, r2
 8011af4:	4698      	movhi	r8, r3
 8011af6:	2303      	movs	r3, #3
 8011af8:	6123      	str	r3, [r4, #16]
 8011afa:	9b05      	ldr	r3, [sp, #20]
 8011afc:	f023 0304 	bic.w	r3, r3, #4
 8011b00:	6023      	str	r3, [r4, #0]
 8011b02:	f04f 0900 	mov.w	r9, #0
 8011b06:	9700      	str	r7, [sp, #0]
 8011b08:	4633      	mov	r3, r6
 8011b0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8011b0c:	4621      	mov	r1, r4
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f000 f9da 	bl	8011ec8 <_printf_common>
 8011b14:	3001      	adds	r0, #1
 8011b16:	f040 8090 	bne.w	8011c3a <_printf_float+0x1de>
 8011b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8011b1e:	b00d      	add	sp, #52	; 0x34
 8011b20:	ecbd 8b02 	vpop	{d8}
 8011b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b28:	4642      	mov	r2, r8
 8011b2a:	464b      	mov	r3, r9
 8011b2c:	4640      	mov	r0, r8
 8011b2e:	4649      	mov	r1, r9
 8011b30:	f7ef f824 	bl	8000b7c <__aeabi_dcmpun>
 8011b34:	b140      	cbz	r0, 8011b48 <_printf_float+0xec>
 8011b36:	464b      	mov	r3, r9
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	bfbc      	itt	lt
 8011b3c:	232d      	movlt	r3, #45	; 0x2d
 8011b3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011b42:	4a7f      	ldr	r2, [pc, #508]	; (8011d40 <_printf_float+0x2e4>)
 8011b44:	4b7f      	ldr	r3, [pc, #508]	; (8011d44 <_printf_float+0x2e8>)
 8011b46:	e7d1      	b.n	8011aec <_printf_float+0x90>
 8011b48:	6863      	ldr	r3, [r4, #4]
 8011b4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011b4e:	9206      	str	r2, [sp, #24]
 8011b50:	1c5a      	adds	r2, r3, #1
 8011b52:	d13f      	bne.n	8011bd4 <_printf_float+0x178>
 8011b54:	2306      	movs	r3, #6
 8011b56:	6063      	str	r3, [r4, #4]
 8011b58:	9b05      	ldr	r3, [sp, #20]
 8011b5a:	6861      	ldr	r1, [r4, #4]
 8011b5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011b60:	2300      	movs	r3, #0
 8011b62:	9303      	str	r3, [sp, #12]
 8011b64:	ab0a      	add	r3, sp, #40	; 0x28
 8011b66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011b6a:	ab09      	add	r3, sp, #36	; 0x24
 8011b6c:	ec49 8b10 	vmov	d0, r8, r9
 8011b70:	9300      	str	r3, [sp, #0]
 8011b72:	6022      	str	r2, [r4, #0]
 8011b74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011b78:	4628      	mov	r0, r5
 8011b7a:	f7ff fecf 	bl	801191c <__cvt>
 8011b7e:	9b06      	ldr	r3, [sp, #24]
 8011b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b82:	2b47      	cmp	r3, #71	; 0x47
 8011b84:	4680      	mov	r8, r0
 8011b86:	d108      	bne.n	8011b9a <_printf_float+0x13e>
 8011b88:	1cc8      	adds	r0, r1, #3
 8011b8a:	db02      	blt.n	8011b92 <_printf_float+0x136>
 8011b8c:	6863      	ldr	r3, [r4, #4]
 8011b8e:	4299      	cmp	r1, r3
 8011b90:	dd41      	ble.n	8011c16 <_printf_float+0x1ba>
 8011b92:	f1ab 0302 	sub.w	r3, fp, #2
 8011b96:	fa5f fb83 	uxtb.w	fp, r3
 8011b9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011b9e:	d820      	bhi.n	8011be2 <_printf_float+0x186>
 8011ba0:	3901      	subs	r1, #1
 8011ba2:	465a      	mov	r2, fp
 8011ba4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011ba8:	9109      	str	r1, [sp, #36]	; 0x24
 8011baa:	f7ff ff19 	bl	80119e0 <__exponent>
 8011bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bb0:	1813      	adds	r3, r2, r0
 8011bb2:	2a01      	cmp	r2, #1
 8011bb4:	4681      	mov	r9, r0
 8011bb6:	6123      	str	r3, [r4, #16]
 8011bb8:	dc02      	bgt.n	8011bc0 <_printf_float+0x164>
 8011bba:	6822      	ldr	r2, [r4, #0]
 8011bbc:	07d2      	lsls	r2, r2, #31
 8011bbe:	d501      	bpl.n	8011bc4 <_printf_float+0x168>
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	6123      	str	r3, [r4, #16]
 8011bc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d09c      	beq.n	8011b06 <_printf_float+0xaa>
 8011bcc:	232d      	movs	r3, #45	; 0x2d
 8011bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bd2:	e798      	b.n	8011b06 <_printf_float+0xaa>
 8011bd4:	9a06      	ldr	r2, [sp, #24]
 8011bd6:	2a47      	cmp	r2, #71	; 0x47
 8011bd8:	d1be      	bne.n	8011b58 <_printf_float+0xfc>
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d1bc      	bne.n	8011b58 <_printf_float+0xfc>
 8011bde:	2301      	movs	r3, #1
 8011be0:	e7b9      	b.n	8011b56 <_printf_float+0xfa>
 8011be2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011be6:	d118      	bne.n	8011c1a <_printf_float+0x1be>
 8011be8:	2900      	cmp	r1, #0
 8011bea:	6863      	ldr	r3, [r4, #4]
 8011bec:	dd0b      	ble.n	8011c06 <_printf_float+0x1aa>
 8011bee:	6121      	str	r1, [r4, #16]
 8011bf0:	b913      	cbnz	r3, 8011bf8 <_printf_float+0x19c>
 8011bf2:	6822      	ldr	r2, [r4, #0]
 8011bf4:	07d0      	lsls	r0, r2, #31
 8011bf6:	d502      	bpl.n	8011bfe <_printf_float+0x1a2>
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	440b      	add	r3, r1
 8011bfc:	6123      	str	r3, [r4, #16]
 8011bfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8011c00:	f04f 0900 	mov.w	r9, #0
 8011c04:	e7de      	b.n	8011bc4 <_printf_float+0x168>
 8011c06:	b913      	cbnz	r3, 8011c0e <_printf_float+0x1b2>
 8011c08:	6822      	ldr	r2, [r4, #0]
 8011c0a:	07d2      	lsls	r2, r2, #31
 8011c0c:	d501      	bpl.n	8011c12 <_printf_float+0x1b6>
 8011c0e:	3302      	adds	r3, #2
 8011c10:	e7f4      	b.n	8011bfc <_printf_float+0x1a0>
 8011c12:	2301      	movs	r3, #1
 8011c14:	e7f2      	b.n	8011bfc <_printf_float+0x1a0>
 8011c16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c1c:	4299      	cmp	r1, r3
 8011c1e:	db05      	blt.n	8011c2c <_printf_float+0x1d0>
 8011c20:	6823      	ldr	r3, [r4, #0]
 8011c22:	6121      	str	r1, [r4, #16]
 8011c24:	07d8      	lsls	r0, r3, #31
 8011c26:	d5ea      	bpl.n	8011bfe <_printf_float+0x1a2>
 8011c28:	1c4b      	adds	r3, r1, #1
 8011c2a:	e7e7      	b.n	8011bfc <_printf_float+0x1a0>
 8011c2c:	2900      	cmp	r1, #0
 8011c2e:	bfd4      	ite	le
 8011c30:	f1c1 0202 	rsble	r2, r1, #2
 8011c34:	2201      	movgt	r2, #1
 8011c36:	4413      	add	r3, r2
 8011c38:	e7e0      	b.n	8011bfc <_printf_float+0x1a0>
 8011c3a:	6823      	ldr	r3, [r4, #0]
 8011c3c:	055a      	lsls	r2, r3, #21
 8011c3e:	d407      	bmi.n	8011c50 <_printf_float+0x1f4>
 8011c40:	6923      	ldr	r3, [r4, #16]
 8011c42:	4642      	mov	r2, r8
 8011c44:	4631      	mov	r1, r6
 8011c46:	4628      	mov	r0, r5
 8011c48:	47b8      	blx	r7
 8011c4a:	3001      	adds	r0, #1
 8011c4c:	d12c      	bne.n	8011ca8 <_printf_float+0x24c>
 8011c4e:	e764      	b.n	8011b1a <_printf_float+0xbe>
 8011c50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c54:	f240 80e0 	bls.w	8011e18 <_printf_float+0x3bc>
 8011c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	2300      	movs	r3, #0
 8011c60:	f7ee ff5a 	bl	8000b18 <__aeabi_dcmpeq>
 8011c64:	2800      	cmp	r0, #0
 8011c66:	d034      	beq.n	8011cd2 <_printf_float+0x276>
 8011c68:	4a37      	ldr	r2, [pc, #220]	; (8011d48 <_printf_float+0x2ec>)
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	4631      	mov	r1, r6
 8011c6e:	4628      	mov	r0, r5
 8011c70:	47b8      	blx	r7
 8011c72:	3001      	adds	r0, #1
 8011c74:	f43f af51 	beq.w	8011b1a <_printf_float+0xbe>
 8011c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	db02      	blt.n	8011c86 <_printf_float+0x22a>
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	07d8      	lsls	r0, r3, #31
 8011c84:	d510      	bpl.n	8011ca8 <_printf_float+0x24c>
 8011c86:	ee18 3a10 	vmov	r3, s16
 8011c8a:	4652      	mov	r2, sl
 8011c8c:	4631      	mov	r1, r6
 8011c8e:	4628      	mov	r0, r5
 8011c90:	47b8      	blx	r7
 8011c92:	3001      	adds	r0, #1
 8011c94:	f43f af41 	beq.w	8011b1a <_printf_float+0xbe>
 8011c98:	f04f 0800 	mov.w	r8, #0
 8011c9c:	f104 091a 	add.w	r9, r4, #26
 8011ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	4543      	cmp	r3, r8
 8011ca6:	dc09      	bgt.n	8011cbc <_printf_float+0x260>
 8011ca8:	6823      	ldr	r3, [r4, #0]
 8011caa:	079b      	lsls	r3, r3, #30
 8011cac:	f100 8107 	bmi.w	8011ebe <_printf_float+0x462>
 8011cb0:	68e0      	ldr	r0, [r4, #12]
 8011cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cb4:	4298      	cmp	r0, r3
 8011cb6:	bfb8      	it	lt
 8011cb8:	4618      	movlt	r0, r3
 8011cba:	e730      	b.n	8011b1e <_printf_float+0xc2>
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	464a      	mov	r2, r9
 8011cc0:	4631      	mov	r1, r6
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	47b8      	blx	r7
 8011cc6:	3001      	adds	r0, #1
 8011cc8:	f43f af27 	beq.w	8011b1a <_printf_float+0xbe>
 8011ccc:	f108 0801 	add.w	r8, r8, #1
 8011cd0:	e7e6      	b.n	8011ca0 <_printf_float+0x244>
 8011cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	dc39      	bgt.n	8011d4c <_printf_float+0x2f0>
 8011cd8:	4a1b      	ldr	r2, [pc, #108]	; (8011d48 <_printf_float+0x2ec>)
 8011cda:	2301      	movs	r3, #1
 8011cdc:	4631      	mov	r1, r6
 8011cde:	4628      	mov	r0, r5
 8011ce0:	47b8      	blx	r7
 8011ce2:	3001      	adds	r0, #1
 8011ce4:	f43f af19 	beq.w	8011b1a <_printf_float+0xbe>
 8011ce8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011cec:	4313      	orrs	r3, r2
 8011cee:	d102      	bne.n	8011cf6 <_printf_float+0x29a>
 8011cf0:	6823      	ldr	r3, [r4, #0]
 8011cf2:	07d9      	lsls	r1, r3, #31
 8011cf4:	d5d8      	bpl.n	8011ca8 <_printf_float+0x24c>
 8011cf6:	ee18 3a10 	vmov	r3, s16
 8011cfa:	4652      	mov	r2, sl
 8011cfc:	4631      	mov	r1, r6
 8011cfe:	4628      	mov	r0, r5
 8011d00:	47b8      	blx	r7
 8011d02:	3001      	adds	r0, #1
 8011d04:	f43f af09 	beq.w	8011b1a <_printf_float+0xbe>
 8011d08:	f04f 0900 	mov.w	r9, #0
 8011d0c:	f104 0a1a 	add.w	sl, r4, #26
 8011d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d12:	425b      	negs	r3, r3
 8011d14:	454b      	cmp	r3, r9
 8011d16:	dc01      	bgt.n	8011d1c <_printf_float+0x2c0>
 8011d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d1a:	e792      	b.n	8011c42 <_printf_float+0x1e6>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	4652      	mov	r2, sl
 8011d20:	4631      	mov	r1, r6
 8011d22:	4628      	mov	r0, r5
 8011d24:	47b8      	blx	r7
 8011d26:	3001      	adds	r0, #1
 8011d28:	f43f aef7 	beq.w	8011b1a <_printf_float+0xbe>
 8011d2c:	f109 0901 	add.w	r9, r9, #1
 8011d30:	e7ee      	b.n	8011d10 <_printf_float+0x2b4>
 8011d32:	bf00      	nop
 8011d34:	7fefffff 	.word	0x7fefffff
 8011d38:	08017134 	.word	0x08017134
 8011d3c:	08017138 	.word	0x08017138
 8011d40:	0801713c 	.word	0x0801713c
 8011d44:	08017140 	.word	0x08017140
 8011d48:	08017144 	.word	0x08017144
 8011d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d50:	429a      	cmp	r2, r3
 8011d52:	bfa8      	it	ge
 8011d54:	461a      	movge	r2, r3
 8011d56:	2a00      	cmp	r2, #0
 8011d58:	4691      	mov	r9, r2
 8011d5a:	dc37      	bgt.n	8011dcc <_printf_float+0x370>
 8011d5c:	f04f 0b00 	mov.w	fp, #0
 8011d60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d64:	f104 021a 	add.w	r2, r4, #26
 8011d68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d6a:	9305      	str	r3, [sp, #20]
 8011d6c:	eba3 0309 	sub.w	r3, r3, r9
 8011d70:	455b      	cmp	r3, fp
 8011d72:	dc33      	bgt.n	8011ddc <_printf_float+0x380>
 8011d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	db3b      	blt.n	8011df4 <_printf_float+0x398>
 8011d7c:	6823      	ldr	r3, [r4, #0]
 8011d7e:	07da      	lsls	r2, r3, #31
 8011d80:	d438      	bmi.n	8011df4 <_printf_float+0x398>
 8011d82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011d86:	eba2 0903 	sub.w	r9, r2, r3
 8011d8a:	9b05      	ldr	r3, [sp, #20]
 8011d8c:	1ad2      	subs	r2, r2, r3
 8011d8e:	4591      	cmp	r9, r2
 8011d90:	bfa8      	it	ge
 8011d92:	4691      	movge	r9, r2
 8011d94:	f1b9 0f00 	cmp.w	r9, #0
 8011d98:	dc35      	bgt.n	8011e06 <_printf_float+0x3aa>
 8011d9a:	f04f 0800 	mov.w	r8, #0
 8011d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011da2:	f104 0a1a 	add.w	sl, r4, #26
 8011da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011daa:	1a9b      	subs	r3, r3, r2
 8011dac:	eba3 0309 	sub.w	r3, r3, r9
 8011db0:	4543      	cmp	r3, r8
 8011db2:	f77f af79 	ble.w	8011ca8 <_printf_float+0x24c>
 8011db6:	2301      	movs	r3, #1
 8011db8:	4652      	mov	r2, sl
 8011dba:	4631      	mov	r1, r6
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	47b8      	blx	r7
 8011dc0:	3001      	adds	r0, #1
 8011dc2:	f43f aeaa 	beq.w	8011b1a <_printf_float+0xbe>
 8011dc6:	f108 0801 	add.w	r8, r8, #1
 8011dca:	e7ec      	b.n	8011da6 <_printf_float+0x34a>
 8011dcc:	4613      	mov	r3, r2
 8011dce:	4631      	mov	r1, r6
 8011dd0:	4642      	mov	r2, r8
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	47b8      	blx	r7
 8011dd6:	3001      	adds	r0, #1
 8011dd8:	d1c0      	bne.n	8011d5c <_printf_float+0x300>
 8011dda:	e69e      	b.n	8011b1a <_printf_float+0xbe>
 8011ddc:	2301      	movs	r3, #1
 8011dde:	4631      	mov	r1, r6
 8011de0:	4628      	mov	r0, r5
 8011de2:	9205      	str	r2, [sp, #20]
 8011de4:	47b8      	blx	r7
 8011de6:	3001      	adds	r0, #1
 8011de8:	f43f ae97 	beq.w	8011b1a <_printf_float+0xbe>
 8011dec:	9a05      	ldr	r2, [sp, #20]
 8011dee:	f10b 0b01 	add.w	fp, fp, #1
 8011df2:	e7b9      	b.n	8011d68 <_printf_float+0x30c>
 8011df4:	ee18 3a10 	vmov	r3, s16
 8011df8:	4652      	mov	r2, sl
 8011dfa:	4631      	mov	r1, r6
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	47b8      	blx	r7
 8011e00:	3001      	adds	r0, #1
 8011e02:	d1be      	bne.n	8011d82 <_printf_float+0x326>
 8011e04:	e689      	b.n	8011b1a <_printf_float+0xbe>
 8011e06:	9a05      	ldr	r2, [sp, #20]
 8011e08:	464b      	mov	r3, r9
 8011e0a:	4442      	add	r2, r8
 8011e0c:	4631      	mov	r1, r6
 8011e0e:	4628      	mov	r0, r5
 8011e10:	47b8      	blx	r7
 8011e12:	3001      	adds	r0, #1
 8011e14:	d1c1      	bne.n	8011d9a <_printf_float+0x33e>
 8011e16:	e680      	b.n	8011b1a <_printf_float+0xbe>
 8011e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e1a:	2a01      	cmp	r2, #1
 8011e1c:	dc01      	bgt.n	8011e22 <_printf_float+0x3c6>
 8011e1e:	07db      	lsls	r3, r3, #31
 8011e20:	d53a      	bpl.n	8011e98 <_printf_float+0x43c>
 8011e22:	2301      	movs	r3, #1
 8011e24:	4642      	mov	r2, r8
 8011e26:	4631      	mov	r1, r6
 8011e28:	4628      	mov	r0, r5
 8011e2a:	47b8      	blx	r7
 8011e2c:	3001      	adds	r0, #1
 8011e2e:	f43f ae74 	beq.w	8011b1a <_printf_float+0xbe>
 8011e32:	ee18 3a10 	vmov	r3, s16
 8011e36:	4652      	mov	r2, sl
 8011e38:	4631      	mov	r1, r6
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	47b8      	blx	r7
 8011e3e:	3001      	adds	r0, #1
 8011e40:	f43f ae6b 	beq.w	8011b1a <_printf_float+0xbe>
 8011e44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e48:	2200      	movs	r2, #0
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011e50:	f7ee fe62 	bl	8000b18 <__aeabi_dcmpeq>
 8011e54:	b9d8      	cbnz	r0, 8011e8e <_printf_float+0x432>
 8011e56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011e5a:	f108 0201 	add.w	r2, r8, #1
 8011e5e:	4631      	mov	r1, r6
 8011e60:	4628      	mov	r0, r5
 8011e62:	47b8      	blx	r7
 8011e64:	3001      	adds	r0, #1
 8011e66:	d10e      	bne.n	8011e86 <_printf_float+0x42a>
 8011e68:	e657      	b.n	8011b1a <_printf_float+0xbe>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	4652      	mov	r2, sl
 8011e6e:	4631      	mov	r1, r6
 8011e70:	4628      	mov	r0, r5
 8011e72:	47b8      	blx	r7
 8011e74:	3001      	adds	r0, #1
 8011e76:	f43f ae50 	beq.w	8011b1a <_printf_float+0xbe>
 8011e7a:	f108 0801 	add.w	r8, r8, #1
 8011e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e80:	3b01      	subs	r3, #1
 8011e82:	4543      	cmp	r3, r8
 8011e84:	dcf1      	bgt.n	8011e6a <_printf_float+0x40e>
 8011e86:	464b      	mov	r3, r9
 8011e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011e8c:	e6da      	b.n	8011c44 <_printf_float+0x1e8>
 8011e8e:	f04f 0800 	mov.w	r8, #0
 8011e92:	f104 0a1a 	add.w	sl, r4, #26
 8011e96:	e7f2      	b.n	8011e7e <_printf_float+0x422>
 8011e98:	2301      	movs	r3, #1
 8011e9a:	4642      	mov	r2, r8
 8011e9c:	e7df      	b.n	8011e5e <_printf_float+0x402>
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	464a      	mov	r2, r9
 8011ea2:	4631      	mov	r1, r6
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	47b8      	blx	r7
 8011ea8:	3001      	adds	r0, #1
 8011eaa:	f43f ae36 	beq.w	8011b1a <_printf_float+0xbe>
 8011eae:	f108 0801 	add.w	r8, r8, #1
 8011eb2:	68e3      	ldr	r3, [r4, #12]
 8011eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011eb6:	1a5b      	subs	r3, r3, r1
 8011eb8:	4543      	cmp	r3, r8
 8011eba:	dcf0      	bgt.n	8011e9e <_printf_float+0x442>
 8011ebc:	e6f8      	b.n	8011cb0 <_printf_float+0x254>
 8011ebe:	f04f 0800 	mov.w	r8, #0
 8011ec2:	f104 0919 	add.w	r9, r4, #25
 8011ec6:	e7f4      	b.n	8011eb2 <_printf_float+0x456>

08011ec8 <_printf_common>:
 8011ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ecc:	4616      	mov	r6, r2
 8011ece:	4699      	mov	r9, r3
 8011ed0:	688a      	ldr	r2, [r1, #8]
 8011ed2:	690b      	ldr	r3, [r1, #16]
 8011ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	bfb8      	it	lt
 8011edc:	4613      	movlt	r3, r2
 8011ede:	6033      	str	r3, [r6, #0]
 8011ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ee4:	4607      	mov	r7, r0
 8011ee6:	460c      	mov	r4, r1
 8011ee8:	b10a      	cbz	r2, 8011eee <_printf_common+0x26>
 8011eea:	3301      	adds	r3, #1
 8011eec:	6033      	str	r3, [r6, #0]
 8011eee:	6823      	ldr	r3, [r4, #0]
 8011ef0:	0699      	lsls	r1, r3, #26
 8011ef2:	bf42      	ittt	mi
 8011ef4:	6833      	ldrmi	r3, [r6, #0]
 8011ef6:	3302      	addmi	r3, #2
 8011ef8:	6033      	strmi	r3, [r6, #0]
 8011efa:	6825      	ldr	r5, [r4, #0]
 8011efc:	f015 0506 	ands.w	r5, r5, #6
 8011f00:	d106      	bne.n	8011f10 <_printf_common+0x48>
 8011f02:	f104 0a19 	add.w	sl, r4, #25
 8011f06:	68e3      	ldr	r3, [r4, #12]
 8011f08:	6832      	ldr	r2, [r6, #0]
 8011f0a:	1a9b      	subs	r3, r3, r2
 8011f0c:	42ab      	cmp	r3, r5
 8011f0e:	dc26      	bgt.n	8011f5e <_printf_common+0x96>
 8011f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f14:	1e13      	subs	r3, r2, #0
 8011f16:	6822      	ldr	r2, [r4, #0]
 8011f18:	bf18      	it	ne
 8011f1a:	2301      	movne	r3, #1
 8011f1c:	0692      	lsls	r2, r2, #26
 8011f1e:	d42b      	bmi.n	8011f78 <_printf_common+0xb0>
 8011f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f24:	4649      	mov	r1, r9
 8011f26:	4638      	mov	r0, r7
 8011f28:	47c0      	blx	r8
 8011f2a:	3001      	adds	r0, #1
 8011f2c:	d01e      	beq.n	8011f6c <_printf_common+0xa4>
 8011f2e:	6823      	ldr	r3, [r4, #0]
 8011f30:	6922      	ldr	r2, [r4, #16]
 8011f32:	f003 0306 	and.w	r3, r3, #6
 8011f36:	2b04      	cmp	r3, #4
 8011f38:	bf02      	ittt	eq
 8011f3a:	68e5      	ldreq	r5, [r4, #12]
 8011f3c:	6833      	ldreq	r3, [r6, #0]
 8011f3e:	1aed      	subeq	r5, r5, r3
 8011f40:	68a3      	ldr	r3, [r4, #8]
 8011f42:	bf0c      	ite	eq
 8011f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f48:	2500      	movne	r5, #0
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	bfc4      	itt	gt
 8011f4e:	1a9b      	subgt	r3, r3, r2
 8011f50:	18ed      	addgt	r5, r5, r3
 8011f52:	2600      	movs	r6, #0
 8011f54:	341a      	adds	r4, #26
 8011f56:	42b5      	cmp	r5, r6
 8011f58:	d11a      	bne.n	8011f90 <_printf_common+0xc8>
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	e008      	b.n	8011f70 <_printf_common+0xa8>
 8011f5e:	2301      	movs	r3, #1
 8011f60:	4652      	mov	r2, sl
 8011f62:	4649      	mov	r1, r9
 8011f64:	4638      	mov	r0, r7
 8011f66:	47c0      	blx	r8
 8011f68:	3001      	adds	r0, #1
 8011f6a:	d103      	bne.n	8011f74 <_printf_common+0xac>
 8011f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f74:	3501      	adds	r5, #1
 8011f76:	e7c6      	b.n	8011f06 <_printf_common+0x3e>
 8011f78:	18e1      	adds	r1, r4, r3
 8011f7a:	1c5a      	adds	r2, r3, #1
 8011f7c:	2030      	movs	r0, #48	; 0x30
 8011f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f82:	4422      	add	r2, r4
 8011f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f8c:	3302      	adds	r3, #2
 8011f8e:	e7c7      	b.n	8011f20 <_printf_common+0x58>
 8011f90:	2301      	movs	r3, #1
 8011f92:	4622      	mov	r2, r4
 8011f94:	4649      	mov	r1, r9
 8011f96:	4638      	mov	r0, r7
 8011f98:	47c0      	blx	r8
 8011f9a:	3001      	adds	r0, #1
 8011f9c:	d0e6      	beq.n	8011f6c <_printf_common+0xa4>
 8011f9e:	3601      	adds	r6, #1
 8011fa0:	e7d9      	b.n	8011f56 <_printf_common+0x8e>
	...

08011fa4 <_printf_i>:
 8011fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fa8:	7e0f      	ldrb	r7, [r1, #24]
 8011faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011fac:	2f78      	cmp	r7, #120	; 0x78
 8011fae:	4691      	mov	r9, r2
 8011fb0:	4680      	mov	r8, r0
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	469a      	mov	sl, r3
 8011fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011fba:	d807      	bhi.n	8011fcc <_printf_i+0x28>
 8011fbc:	2f62      	cmp	r7, #98	; 0x62
 8011fbe:	d80a      	bhi.n	8011fd6 <_printf_i+0x32>
 8011fc0:	2f00      	cmp	r7, #0
 8011fc2:	f000 80d4 	beq.w	801216e <_printf_i+0x1ca>
 8011fc6:	2f58      	cmp	r7, #88	; 0x58
 8011fc8:	f000 80c0 	beq.w	801214c <_printf_i+0x1a8>
 8011fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011fd4:	e03a      	b.n	801204c <_printf_i+0xa8>
 8011fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011fda:	2b15      	cmp	r3, #21
 8011fdc:	d8f6      	bhi.n	8011fcc <_printf_i+0x28>
 8011fde:	a101      	add	r1, pc, #4	; (adr r1, 8011fe4 <_printf_i+0x40>)
 8011fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011fe4:	0801203d 	.word	0x0801203d
 8011fe8:	08012051 	.word	0x08012051
 8011fec:	08011fcd 	.word	0x08011fcd
 8011ff0:	08011fcd 	.word	0x08011fcd
 8011ff4:	08011fcd 	.word	0x08011fcd
 8011ff8:	08011fcd 	.word	0x08011fcd
 8011ffc:	08012051 	.word	0x08012051
 8012000:	08011fcd 	.word	0x08011fcd
 8012004:	08011fcd 	.word	0x08011fcd
 8012008:	08011fcd 	.word	0x08011fcd
 801200c:	08011fcd 	.word	0x08011fcd
 8012010:	08012155 	.word	0x08012155
 8012014:	0801207d 	.word	0x0801207d
 8012018:	0801210f 	.word	0x0801210f
 801201c:	08011fcd 	.word	0x08011fcd
 8012020:	08011fcd 	.word	0x08011fcd
 8012024:	08012177 	.word	0x08012177
 8012028:	08011fcd 	.word	0x08011fcd
 801202c:	0801207d 	.word	0x0801207d
 8012030:	08011fcd 	.word	0x08011fcd
 8012034:	08011fcd 	.word	0x08011fcd
 8012038:	08012117 	.word	0x08012117
 801203c:	682b      	ldr	r3, [r5, #0]
 801203e:	1d1a      	adds	r2, r3, #4
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	602a      	str	r2, [r5, #0]
 8012044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801204c:	2301      	movs	r3, #1
 801204e:	e09f      	b.n	8012190 <_printf_i+0x1ec>
 8012050:	6820      	ldr	r0, [r4, #0]
 8012052:	682b      	ldr	r3, [r5, #0]
 8012054:	0607      	lsls	r7, r0, #24
 8012056:	f103 0104 	add.w	r1, r3, #4
 801205a:	6029      	str	r1, [r5, #0]
 801205c:	d501      	bpl.n	8012062 <_printf_i+0xbe>
 801205e:	681e      	ldr	r6, [r3, #0]
 8012060:	e003      	b.n	801206a <_printf_i+0xc6>
 8012062:	0646      	lsls	r6, r0, #25
 8012064:	d5fb      	bpl.n	801205e <_printf_i+0xba>
 8012066:	f9b3 6000 	ldrsh.w	r6, [r3]
 801206a:	2e00      	cmp	r6, #0
 801206c:	da03      	bge.n	8012076 <_printf_i+0xd2>
 801206e:	232d      	movs	r3, #45	; 0x2d
 8012070:	4276      	negs	r6, r6
 8012072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012076:	485a      	ldr	r0, [pc, #360]	; (80121e0 <_printf_i+0x23c>)
 8012078:	230a      	movs	r3, #10
 801207a:	e012      	b.n	80120a2 <_printf_i+0xfe>
 801207c:	682b      	ldr	r3, [r5, #0]
 801207e:	6820      	ldr	r0, [r4, #0]
 8012080:	1d19      	adds	r1, r3, #4
 8012082:	6029      	str	r1, [r5, #0]
 8012084:	0605      	lsls	r5, r0, #24
 8012086:	d501      	bpl.n	801208c <_printf_i+0xe8>
 8012088:	681e      	ldr	r6, [r3, #0]
 801208a:	e002      	b.n	8012092 <_printf_i+0xee>
 801208c:	0641      	lsls	r1, r0, #25
 801208e:	d5fb      	bpl.n	8012088 <_printf_i+0xe4>
 8012090:	881e      	ldrh	r6, [r3, #0]
 8012092:	4853      	ldr	r0, [pc, #332]	; (80121e0 <_printf_i+0x23c>)
 8012094:	2f6f      	cmp	r7, #111	; 0x6f
 8012096:	bf0c      	ite	eq
 8012098:	2308      	moveq	r3, #8
 801209a:	230a      	movne	r3, #10
 801209c:	2100      	movs	r1, #0
 801209e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80120a2:	6865      	ldr	r5, [r4, #4]
 80120a4:	60a5      	str	r5, [r4, #8]
 80120a6:	2d00      	cmp	r5, #0
 80120a8:	bfa2      	ittt	ge
 80120aa:	6821      	ldrge	r1, [r4, #0]
 80120ac:	f021 0104 	bicge.w	r1, r1, #4
 80120b0:	6021      	strge	r1, [r4, #0]
 80120b2:	b90e      	cbnz	r6, 80120b8 <_printf_i+0x114>
 80120b4:	2d00      	cmp	r5, #0
 80120b6:	d04b      	beq.n	8012150 <_printf_i+0x1ac>
 80120b8:	4615      	mov	r5, r2
 80120ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80120be:	fb03 6711 	mls	r7, r3, r1, r6
 80120c2:	5dc7      	ldrb	r7, [r0, r7]
 80120c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80120c8:	4637      	mov	r7, r6
 80120ca:	42bb      	cmp	r3, r7
 80120cc:	460e      	mov	r6, r1
 80120ce:	d9f4      	bls.n	80120ba <_printf_i+0x116>
 80120d0:	2b08      	cmp	r3, #8
 80120d2:	d10b      	bne.n	80120ec <_printf_i+0x148>
 80120d4:	6823      	ldr	r3, [r4, #0]
 80120d6:	07de      	lsls	r6, r3, #31
 80120d8:	d508      	bpl.n	80120ec <_printf_i+0x148>
 80120da:	6923      	ldr	r3, [r4, #16]
 80120dc:	6861      	ldr	r1, [r4, #4]
 80120de:	4299      	cmp	r1, r3
 80120e0:	bfde      	ittt	le
 80120e2:	2330      	movle	r3, #48	; 0x30
 80120e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80120e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80120ec:	1b52      	subs	r2, r2, r5
 80120ee:	6122      	str	r2, [r4, #16]
 80120f0:	f8cd a000 	str.w	sl, [sp]
 80120f4:	464b      	mov	r3, r9
 80120f6:	aa03      	add	r2, sp, #12
 80120f8:	4621      	mov	r1, r4
 80120fa:	4640      	mov	r0, r8
 80120fc:	f7ff fee4 	bl	8011ec8 <_printf_common>
 8012100:	3001      	adds	r0, #1
 8012102:	d14a      	bne.n	801219a <_printf_i+0x1f6>
 8012104:	f04f 30ff 	mov.w	r0, #4294967295
 8012108:	b004      	add	sp, #16
 801210a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801210e:	6823      	ldr	r3, [r4, #0]
 8012110:	f043 0320 	orr.w	r3, r3, #32
 8012114:	6023      	str	r3, [r4, #0]
 8012116:	4833      	ldr	r0, [pc, #204]	; (80121e4 <_printf_i+0x240>)
 8012118:	2778      	movs	r7, #120	; 0x78
 801211a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801211e:	6823      	ldr	r3, [r4, #0]
 8012120:	6829      	ldr	r1, [r5, #0]
 8012122:	061f      	lsls	r7, r3, #24
 8012124:	f851 6b04 	ldr.w	r6, [r1], #4
 8012128:	d402      	bmi.n	8012130 <_printf_i+0x18c>
 801212a:	065f      	lsls	r7, r3, #25
 801212c:	bf48      	it	mi
 801212e:	b2b6      	uxthmi	r6, r6
 8012130:	07df      	lsls	r7, r3, #31
 8012132:	bf48      	it	mi
 8012134:	f043 0320 	orrmi.w	r3, r3, #32
 8012138:	6029      	str	r1, [r5, #0]
 801213a:	bf48      	it	mi
 801213c:	6023      	strmi	r3, [r4, #0]
 801213e:	b91e      	cbnz	r6, 8012148 <_printf_i+0x1a4>
 8012140:	6823      	ldr	r3, [r4, #0]
 8012142:	f023 0320 	bic.w	r3, r3, #32
 8012146:	6023      	str	r3, [r4, #0]
 8012148:	2310      	movs	r3, #16
 801214a:	e7a7      	b.n	801209c <_printf_i+0xf8>
 801214c:	4824      	ldr	r0, [pc, #144]	; (80121e0 <_printf_i+0x23c>)
 801214e:	e7e4      	b.n	801211a <_printf_i+0x176>
 8012150:	4615      	mov	r5, r2
 8012152:	e7bd      	b.n	80120d0 <_printf_i+0x12c>
 8012154:	682b      	ldr	r3, [r5, #0]
 8012156:	6826      	ldr	r6, [r4, #0]
 8012158:	6961      	ldr	r1, [r4, #20]
 801215a:	1d18      	adds	r0, r3, #4
 801215c:	6028      	str	r0, [r5, #0]
 801215e:	0635      	lsls	r5, r6, #24
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	d501      	bpl.n	8012168 <_printf_i+0x1c4>
 8012164:	6019      	str	r1, [r3, #0]
 8012166:	e002      	b.n	801216e <_printf_i+0x1ca>
 8012168:	0670      	lsls	r0, r6, #25
 801216a:	d5fb      	bpl.n	8012164 <_printf_i+0x1c0>
 801216c:	8019      	strh	r1, [r3, #0]
 801216e:	2300      	movs	r3, #0
 8012170:	6123      	str	r3, [r4, #16]
 8012172:	4615      	mov	r5, r2
 8012174:	e7bc      	b.n	80120f0 <_printf_i+0x14c>
 8012176:	682b      	ldr	r3, [r5, #0]
 8012178:	1d1a      	adds	r2, r3, #4
 801217a:	602a      	str	r2, [r5, #0]
 801217c:	681d      	ldr	r5, [r3, #0]
 801217e:	6862      	ldr	r2, [r4, #4]
 8012180:	2100      	movs	r1, #0
 8012182:	4628      	mov	r0, r5
 8012184:	f7ee f84c 	bl	8000220 <memchr>
 8012188:	b108      	cbz	r0, 801218e <_printf_i+0x1ea>
 801218a:	1b40      	subs	r0, r0, r5
 801218c:	6060      	str	r0, [r4, #4]
 801218e:	6863      	ldr	r3, [r4, #4]
 8012190:	6123      	str	r3, [r4, #16]
 8012192:	2300      	movs	r3, #0
 8012194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012198:	e7aa      	b.n	80120f0 <_printf_i+0x14c>
 801219a:	6923      	ldr	r3, [r4, #16]
 801219c:	462a      	mov	r2, r5
 801219e:	4649      	mov	r1, r9
 80121a0:	4640      	mov	r0, r8
 80121a2:	47d0      	blx	sl
 80121a4:	3001      	adds	r0, #1
 80121a6:	d0ad      	beq.n	8012104 <_printf_i+0x160>
 80121a8:	6823      	ldr	r3, [r4, #0]
 80121aa:	079b      	lsls	r3, r3, #30
 80121ac:	d413      	bmi.n	80121d6 <_printf_i+0x232>
 80121ae:	68e0      	ldr	r0, [r4, #12]
 80121b0:	9b03      	ldr	r3, [sp, #12]
 80121b2:	4298      	cmp	r0, r3
 80121b4:	bfb8      	it	lt
 80121b6:	4618      	movlt	r0, r3
 80121b8:	e7a6      	b.n	8012108 <_printf_i+0x164>
 80121ba:	2301      	movs	r3, #1
 80121bc:	4632      	mov	r2, r6
 80121be:	4649      	mov	r1, r9
 80121c0:	4640      	mov	r0, r8
 80121c2:	47d0      	blx	sl
 80121c4:	3001      	adds	r0, #1
 80121c6:	d09d      	beq.n	8012104 <_printf_i+0x160>
 80121c8:	3501      	adds	r5, #1
 80121ca:	68e3      	ldr	r3, [r4, #12]
 80121cc:	9903      	ldr	r1, [sp, #12]
 80121ce:	1a5b      	subs	r3, r3, r1
 80121d0:	42ab      	cmp	r3, r5
 80121d2:	dcf2      	bgt.n	80121ba <_printf_i+0x216>
 80121d4:	e7eb      	b.n	80121ae <_printf_i+0x20a>
 80121d6:	2500      	movs	r5, #0
 80121d8:	f104 0619 	add.w	r6, r4, #25
 80121dc:	e7f5      	b.n	80121ca <_printf_i+0x226>
 80121de:	bf00      	nop
 80121e0:	08017146 	.word	0x08017146
 80121e4:	08017157 	.word	0x08017157

080121e8 <_scanf_float>:
 80121e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ec:	b087      	sub	sp, #28
 80121ee:	4617      	mov	r7, r2
 80121f0:	9303      	str	r3, [sp, #12]
 80121f2:	688b      	ldr	r3, [r1, #8]
 80121f4:	1e5a      	subs	r2, r3, #1
 80121f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80121fa:	bf83      	ittte	hi
 80121fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012200:	195b      	addhi	r3, r3, r5
 8012202:	9302      	strhi	r3, [sp, #8]
 8012204:	2300      	movls	r3, #0
 8012206:	bf86      	itte	hi
 8012208:	f240 135d 	movwhi	r3, #349	; 0x15d
 801220c:	608b      	strhi	r3, [r1, #8]
 801220e:	9302      	strls	r3, [sp, #8]
 8012210:	680b      	ldr	r3, [r1, #0]
 8012212:	468b      	mov	fp, r1
 8012214:	2500      	movs	r5, #0
 8012216:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801221a:	f84b 3b1c 	str.w	r3, [fp], #28
 801221e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012222:	4680      	mov	r8, r0
 8012224:	460c      	mov	r4, r1
 8012226:	465e      	mov	r6, fp
 8012228:	46aa      	mov	sl, r5
 801222a:	46a9      	mov	r9, r5
 801222c:	9501      	str	r5, [sp, #4]
 801222e:	68a2      	ldr	r2, [r4, #8]
 8012230:	b152      	cbz	r2, 8012248 <_scanf_float+0x60>
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	2b4e      	cmp	r3, #78	; 0x4e
 8012238:	d864      	bhi.n	8012304 <_scanf_float+0x11c>
 801223a:	2b40      	cmp	r3, #64	; 0x40
 801223c:	d83c      	bhi.n	80122b8 <_scanf_float+0xd0>
 801223e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012242:	b2c8      	uxtb	r0, r1
 8012244:	280e      	cmp	r0, #14
 8012246:	d93a      	bls.n	80122be <_scanf_float+0xd6>
 8012248:	f1b9 0f00 	cmp.w	r9, #0
 801224c:	d003      	beq.n	8012256 <_scanf_float+0x6e>
 801224e:	6823      	ldr	r3, [r4, #0]
 8012250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	f10a 3aff 	add.w	sl, sl, #4294967295
 801225a:	f1ba 0f01 	cmp.w	sl, #1
 801225e:	f200 8113 	bhi.w	8012488 <_scanf_float+0x2a0>
 8012262:	455e      	cmp	r6, fp
 8012264:	f200 8105 	bhi.w	8012472 <_scanf_float+0x28a>
 8012268:	2501      	movs	r5, #1
 801226a:	4628      	mov	r0, r5
 801226c:	b007      	add	sp, #28
 801226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012272:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012276:	2a0d      	cmp	r2, #13
 8012278:	d8e6      	bhi.n	8012248 <_scanf_float+0x60>
 801227a:	a101      	add	r1, pc, #4	; (adr r1, 8012280 <_scanf_float+0x98>)
 801227c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012280:	080123bf 	.word	0x080123bf
 8012284:	08012249 	.word	0x08012249
 8012288:	08012249 	.word	0x08012249
 801228c:	08012249 	.word	0x08012249
 8012290:	0801241f 	.word	0x0801241f
 8012294:	080123f7 	.word	0x080123f7
 8012298:	08012249 	.word	0x08012249
 801229c:	08012249 	.word	0x08012249
 80122a0:	080123cd 	.word	0x080123cd
 80122a4:	08012249 	.word	0x08012249
 80122a8:	08012249 	.word	0x08012249
 80122ac:	08012249 	.word	0x08012249
 80122b0:	08012249 	.word	0x08012249
 80122b4:	08012385 	.word	0x08012385
 80122b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80122bc:	e7db      	b.n	8012276 <_scanf_float+0x8e>
 80122be:	290e      	cmp	r1, #14
 80122c0:	d8c2      	bhi.n	8012248 <_scanf_float+0x60>
 80122c2:	a001      	add	r0, pc, #4	; (adr r0, 80122c8 <_scanf_float+0xe0>)
 80122c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80122c8:	08012377 	.word	0x08012377
 80122cc:	08012249 	.word	0x08012249
 80122d0:	08012377 	.word	0x08012377
 80122d4:	0801240b 	.word	0x0801240b
 80122d8:	08012249 	.word	0x08012249
 80122dc:	08012325 	.word	0x08012325
 80122e0:	08012361 	.word	0x08012361
 80122e4:	08012361 	.word	0x08012361
 80122e8:	08012361 	.word	0x08012361
 80122ec:	08012361 	.word	0x08012361
 80122f0:	08012361 	.word	0x08012361
 80122f4:	08012361 	.word	0x08012361
 80122f8:	08012361 	.word	0x08012361
 80122fc:	08012361 	.word	0x08012361
 8012300:	08012361 	.word	0x08012361
 8012304:	2b6e      	cmp	r3, #110	; 0x6e
 8012306:	d809      	bhi.n	801231c <_scanf_float+0x134>
 8012308:	2b60      	cmp	r3, #96	; 0x60
 801230a:	d8b2      	bhi.n	8012272 <_scanf_float+0x8a>
 801230c:	2b54      	cmp	r3, #84	; 0x54
 801230e:	d077      	beq.n	8012400 <_scanf_float+0x218>
 8012310:	2b59      	cmp	r3, #89	; 0x59
 8012312:	d199      	bne.n	8012248 <_scanf_float+0x60>
 8012314:	2d07      	cmp	r5, #7
 8012316:	d197      	bne.n	8012248 <_scanf_float+0x60>
 8012318:	2508      	movs	r5, #8
 801231a:	e029      	b.n	8012370 <_scanf_float+0x188>
 801231c:	2b74      	cmp	r3, #116	; 0x74
 801231e:	d06f      	beq.n	8012400 <_scanf_float+0x218>
 8012320:	2b79      	cmp	r3, #121	; 0x79
 8012322:	e7f6      	b.n	8012312 <_scanf_float+0x12a>
 8012324:	6821      	ldr	r1, [r4, #0]
 8012326:	05c8      	lsls	r0, r1, #23
 8012328:	d51a      	bpl.n	8012360 <_scanf_float+0x178>
 801232a:	9b02      	ldr	r3, [sp, #8]
 801232c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012330:	6021      	str	r1, [r4, #0]
 8012332:	f109 0901 	add.w	r9, r9, #1
 8012336:	b11b      	cbz	r3, 8012340 <_scanf_float+0x158>
 8012338:	3b01      	subs	r3, #1
 801233a:	3201      	adds	r2, #1
 801233c:	9302      	str	r3, [sp, #8]
 801233e:	60a2      	str	r2, [r4, #8]
 8012340:	68a3      	ldr	r3, [r4, #8]
 8012342:	3b01      	subs	r3, #1
 8012344:	60a3      	str	r3, [r4, #8]
 8012346:	6923      	ldr	r3, [r4, #16]
 8012348:	3301      	adds	r3, #1
 801234a:	6123      	str	r3, [r4, #16]
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	3b01      	subs	r3, #1
 8012350:	2b00      	cmp	r3, #0
 8012352:	607b      	str	r3, [r7, #4]
 8012354:	f340 8084 	ble.w	8012460 <_scanf_float+0x278>
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	3301      	adds	r3, #1
 801235c:	603b      	str	r3, [r7, #0]
 801235e:	e766      	b.n	801222e <_scanf_float+0x46>
 8012360:	eb1a 0f05 	cmn.w	sl, r5
 8012364:	f47f af70 	bne.w	8012248 <_scanf_float+0x60>
 8012368:	6822      	ldr	r2, [r4, #0]
 801236a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801236e:	6022      	str	r2, [r4, #0]
 8012370:	f806 3b01 	strb.w	r3, [r6], #1
 8012374:	e7e4      	b.n	8012340 <_scanf_float+0x158>
 8012376:	6822      	ldr	r2, [r4, #0]
 8012378:	0610      	lsls	r0, r2, #24
 801237a:	f57f af65 	bpl.w	8012248 <_scanf_float+0x60>
 801237e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012382:	e7f4      	b.n	801236e <_scanf_float+0x186>
 8012384:	f1ba 0f00 	cmp.w	sl, #0
 8012388:	d10e      	bne.n	80123a8 <_scanf_float+0x1c0>
 801238a:	f1b9 0f00 	cmp.w	r9, #0
 801238e:	d10e      	bne.n	80123ae <_scanf_float+0x1c6>
 8012390:	6822      	ldr	r2, [r4, #0]
 8012392:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012396:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801239a:	d108      	bne.n	80123ae <_scanf_float+0x1c6>
 801239c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80123a0:	6022      	str	r2, [r4, #0]
 80123a2:	f04f 0a01 	mov.w	sl, #1
 80123a6:	e7e3      	b.n	8012370 <_scanf_float+0x188>
 80123a8:	f1ba 0f02 	cmp.w	sl, #2
 80123ac:	d055      	beq.n	801245a <_scanf_float+0x272>
 80123ae:	2d01      	cmp	r5, #1
 80123b0:	d002      	beq.n	80123b8 <_scanf_float+0x1d0>
 80123b2:	2d04      	cmp	r5, #4
 80123b4:	f47f af48 	bne.w	8012248 <_scanf_float+0x60>
 80123b8:	3501      	adds	r5, #1
 80123ba:	b2ed      	uxtb	r5, r5
 80123bc:	e7d8      	b.n	8012370 <_scanf_float+0x188>
 80123be:	f1ba 0f01 	cmp.w	sl, #1
 80123c2:	f47f af41 	bne.w	8012248 <_scanf_float+0x60>
 80123c6:	f04f 0a02 	mov.w	sl, #2
 80123ca:	e7d1      	b.n	8012370 <_scanf_float+0x188>
 80123cc:	b97d      	cbnz	r5, 80123ee <_scanf_float+0x206>
 80123ce:	f1b9 0f00 	cmp.w	r9, #0
 80123d2:	f47f af3c 	bne.w	801224e <_scanf_float+0x66>
 80123d6:	6822      	ldr	r2, [r4, #0]
 80123d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80123dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80123e0:	f47f af39 	bne.w	8012256 <_scanf_float+0x6e>
 80123e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80123e8:	6022      	str	r2, [r4, #0]
 80123ea:	2501      	movs	r5, #1
 80123ec:	e7c0      	b.n	8012370 <_scanf_float+0x188>
 80123ee:	2d03      	cmp	r5, #3
 80123f0:	d0e2      	beq.n	80123b8 <_scanf_float+0x1d0>
 80123f2:	2d05      	cmp	r5, #5
 80123f4:	e7de      	b.n	80123b4 <_scanf_float+0x1cc>
 80123f6:	2d02      	cmp	r5, #2
 80123f8:	f47f af26 	bne.w	8012248 <_scanf_float+0x60>
 80123fc:	2503      	movs	r5, #3
 80123fe:	e7b7      	b.n	8012370 <_scanf_float+0x188>
 8012400:	2d06      	cmp	r5, #6
 8012402:	f47f af21 	bne.w	8012248 <_scanf_float+0x60>
 8012406:	2507      	movs	r5, #7
 8012408:	e7b2      	b.n	8012370 <_scanf_float+0x188>
 801240a:	6822      	ldr	r2, [r4, #0]
 801240c:	0591      	lsls	r1, r2, #22
 801240e:	f57f af1b 	bpl.w	8012248 <_scanf_float+0x60>
 8012412:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012416:	6022      	str	r2, [r4, #0]
 8012418:	f8cd 9004 	str.w	r9, [sp, #4]
 801241c:	e7a8      	b.n	8012370 <_scanf_float+0x188>
 801241e:	6822      	ldr	r2, [r4, #0]
 8012420:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012424:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012428:	d006      	beq.n	8012438 <_scanf_float+0x250>
 801242a:	0550      	lsls	r0, r2, #21
 801242c:	f57f af0c 	bpl.w	8012248 <_scanf_float+0x60>
 8012430:	f1b9 0f00 	cmp.w	r9, #0
 8012434:	f43f af0f 	beq.w	8012256 <_scanf_float+0x6e>
 8012438:	0591      	lsls	r1, r2, #22
 801243a:	bf58      	it	pl
 801243c:	9901      	ldrpl	r1, [sp, #4]
 801243e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012442:	bf58      	it	pl
 8012444:	eba9 0101 	subpl.w	r1, r9, r1
 8012448:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801244c:	bf58      	it	pl
 801244e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012452:	6022      	str	r2, [r4, #0]
 8012454:	f04f 0900 	mov.w	r9, #0
 8012458:	e78a      	b.n	8012370 <_scanf_float+0x188>
 801245a:	f04f 0a03 	mov.w	sl, #3
 801245e:	e787      	b.n	8012370 <_scanf_float+0x188>
 8012460:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012464:	4639      	mov	r1, r7
 8012466:	4640      	mov	r0, r8
 8012468:	4798      	blx	r3
 801246a:	2800      	cmp	r0, #0
 801246c:	f43f aedf 	beq.w	801222e <_scanf_float+0x46>
 8012470:	e6ea      	b.n	8012248 <_scanf_float+0x60>
 8012472:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012476:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801247a:	463a      	mov	r2, r7
 801247c:	4640      	mov	r0, r8
 801247e:	4798      	blx	r3
 8012480:	6923      	ldr	r3, [r4, #16]
 8012482:	3b01      	subs	r3, #1
 8012484:	6123      	str	r3, [r4, #16]
 8012486:	e6ec      	b.n	8012262 <_scanf_float+0x7a>
 8012488:	1e6b      	subs	r3, r5, #1
 801248a:	2b06      	cmp	r3, #6
 801248c:	d825      	bhi.n	80124da <_scanf_float+0x2f2>
 801248e:	2d02      	cmp	r5, #2
 8012490:	d836      	bhi.n	8012500 <_scanf_float+0x318>
 8012492:	455e      	cmp	r6, fp
 8012494:	f67f aee8 	bls.w	8012268 <_scanf_float+0x80>
 8012498:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801249c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80124a0:	463a      	mov	r2, r7
 80124a2:	4640      	mov	r0, r8
 80124a4:	4798      	blx	r3
 80124a6:	6923      	ldr	r3, [r4, #16]
 80124a8:	3b01      	subs	r3, #1
 80124aa:	6123      	str	r3, [r4, #16]
 80124ac:	e7f1      	b.n	8012492 <_scanf_float+0x2aa>
 80124ae:	9802      	ldr	r0, [sp, #8]
 80124b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80124b8:	9002      	str	r0, [sp, #8]
 80124ba:	463a      	mov	r2, r7
 80124bc:	4640      	mov	r0, r8
 80124be:	4798      	blx	r3
 80124c0:	6923      	ldr	r3, [r4, #16]
 80124c2:	3b01      	subs	r3, #1
 80124c4:	6123      	str	r3, [r4, #16]
 80124c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80124ca:	fa5f fa8a 	uxtb.w	sl, sl
 80124ce:	f1ba 0f02 	cmp.w	sl, #2
 80124d2:	d1ec      	bne.n	80124ae <_scanf_float+0x2c6>
 80124d4:	3d03      	subs	r5, #3
 80124d6:	b2ed      	uxtb	r5, r5
 80124d8:	1b76      	subs	r6, r6, r5
 80124da:	6823      	ldr	r3, [r4, #0]
 80124dc:	05da      	lsls	r2, r3, #23
 80124de:	d52f      	bpl.n	8012540 <_scanf_float+0x358>
 80124e0:	055b      	lsls	r3, r3, #21
 80124e2:	d510      	bpl.n	8012506 <_scanf_float+0x31e>
 80124e4:	455e      	cmp	r6, fp
 80124e6:	f67f aebf 	bls.w	8012268 <_scanf_float+0x80>
 80124ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80124f2:	463a      	mov	r2, r7
 80124f4:	4640      	mov	r0, r8
 80124f6:	4798      	blx	r3
 80124f8:	6923      	ldr	r3, [r4, #16]
 80124fa:	3b01      	subs	r3, #1
 80124fc:	6123      	str	r3, [r4, #16]
 80124fe:	e7f1      	b.n	80124e4 <_scanf_float+0x2fc>
 8012500:	46aa      	mov	sl, r5
 8012502:	9602      	str	r6, [sp, #8]
 8012504:	e7df      	b.n	80124c6 <_scanf_float+0x2de>
 8012506:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801250a:	6923      	ldr	r3, [r4, #16]
 801250c:	2965      	cmp	r1, #101	; 0x65
 801250e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012512:	f106 35ff 	add.w	r5, r6, #4294967295
 8012516:	6123      	str	r3, [r4, #16]
 8012518:	d00c      	beq.n	8012534 <_scanf_float+0x34c>
 801251a:	2945      	cmp	r1, #69	; 0x45
 801251c:	d00a      	beq.n	8012534 <_scanf_float+0x34c>
 801251e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012522:	463a      	mov	r2, r7
 8012524:	4640      	mov	r0, r8
 8012526:	4798      	blx	r3
 8012528:	6923      	ldr	r3, [r4, #16]
 801252a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801252e:	3b01      	subs	r3, #1
 8012530:	1eb5      	subs	r5, r6, #2
 8012532:	6123      	str	r3, [r4, #16]
 8012534:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012538:	463a      	mov	r2, r7
 801253a:	4640      	mov	r0, r8
 801253c:	4798      	blx	r3
 801253e:	462e      	mov	r6, r5
 8012540:	6825      	ldr	r5, [r4, #0]
 8012542:	f015 0510 	ands.w	r5, r5, #16
 8012546:	d158      	bne.n	80125fa <_scanf_float+0x412>
 8012548:	7035      	strb	r5, [r6, #0]
 801254a:	6823      	ldr	r3, [r4, #0]
 801254c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012554:	d11c      	bne.n	8012590 <_scanf_float+0x3a8>
 8012556:	9b01      	ldr	r3, [sp, #4]
 8012558:	454b      	cmp	r3, r9
 801255a:	eba3 0209 	sub.w	r2, r3, r9
 801255e:	d124      	bne.n	80125aa <_scanf_float+0x3c2>
 8012560:	2200      	movs	r2, #0
 8012562:	4659      	mov	r1, fp
 8012564:	4640      	mov	r0, r8
 8012566:	f002 fc2b 	bl	8014dc0 <_strtod_r>
 801256a:	9b03      	ldr	r3, [sp, #12]
 801256c:	6821      	ldr	r1, [r4, #0]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f011 0f02 	tst.w	r1, #2
 8012574:	ec57 6b10 	vmov	r6, r7, d0
 8012578:	f103 0204 	add.w	r2, r3, #4
 801257c:	d020      	beq.n	80125c0 <_scanf_float+0x3d8>
 801257e:	9903      	ldr	r1, [sp, #12]
 8012580:	600a      	str	r2, [r1, #0]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	e9c3 6700 	strd	r6, r7, [r3]
 8012588:	68e3      	ldr	r3, [r4, #12]
 801258a:	3301      	adds	r3, #1
 801258c:	60e3      	str	r3, [r4, #12]
 801258e:	e66c      	b.n	801226a <_scanf_float+0x82>
 8012590:	9b04      	ldr	r3, [sp, #16]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d0e4      	beq.n	8012560 <_scanf_float+0x378>
 8012596:	9905      	ldr	r1, [sp, #20]
 8012598:	230a      	movs	r3, #10
 801259a:	462a      	mov	r2, r5
 801259c:	3101      	adds	r1, #1
 801259e:	4640      	mov	r0, r8
 80125a0:	f002 fc96 	bl	8014ed0 <_strtol_r>
 80125a4:	9b04      	ldr	r3, [sp, #16]
 80125a6:	9e05      	ldr	r6, [sp, #20]
 80125a8:	1ac2      	subs	r2, r0, r3
 80125aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80125ae:	429e      	cmp	r6, r3
 80125b0:	bf28      	it	cs
 80125b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80125b6:	4912      	ldr	r1, [pc, #72]	; (8012600 <_scanf_float+0x418>)
 80125b8:	4630      	mov	r0, r6
 80125ba:	f000 f8f9 	bl	80127b0 <siprintf>
 80125be:	e7cf      	b.n	8012560 <_scanf_float+0x378>
 80125c0:	f011 0f04 	tst.w	r1, #4
 80125c4:	9903      	ldr	r1, [sp, #12]
 80125c6:	600a      	str	r2, [r1, #0]
 80125c8:	d1db      	bne.n	8012582 <_scanf_float+0x39a>
 80125ca:	f8d3 8000 	ldr.w	r8, [r3]
 80125ce:	ee10 2a10 	vmov	r2, s0
 80125d2:	ee10 0a10 	vmov	r0, s0
 80125d6:	463b      	mov	r3, r7
 80125d8:	4639      	mov	r1, r7
 80125da:	f7ee facf 	bl	8000b7c <__aeabi_dcmpun>
 80125de:	b128      	cbz	r0, 80125ec <_scanf_float+0x404>
 80125e0:	4808      	ldr	r0, [pc, #32]	; (8012604 <_scanf_float+0x41c>)
 80125e2:	f000 fa67 	bl	8012ab4 <nanf>
 80125e6:	ed88 0a00 	vstr	s0, [r8]
 80125ea:	e7cd      	b.n	8012588 <_scanf_float+0x3a0>
 80125ec:	4630      	mov	r0, r6
 80125ee:	4639      	mov	r1, r7
 80125f0:	f7ee fb22 	bl	8000c38 <__aeabi_d2f>
 80125f4:	f8c8 0000 	str.w	r0, [r8]
 80125f8:	e7c6      	b.n	8012588 <_scanf_float+0x3a0>
 80125fa:	2500      	movs	r5, #0
 80125fc:	e635      	b.n	801226a <_scanf_float+0x82>
 80125fe:	bf00      	nop
 8012600:	08017168 	.word	0x08017168
 8012604:	08017133 	.word	0x08017133

08012608 <std>:
 8012608:	2300      	movs	r3, #0
 801260a:	b510      	push	{r4, lr}
 801260c:	4604      	mov	r4, r0
 801260e:	e9c0 3300 	strd	r3, r3, [r0]
 8012612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012616:	6083      	str	r3, [r0, #8]
 8012618:	8181      	strh	r1, [r0, #12]
 801261a:	6643      	str	r3, [r0, #100]	; 0x64
 801261c:	81c2      	strh	r2, [r0, #14]
 801261e:	6183      	str	r3, [r0, #24]
 8012620:	4619      	mov	r1, r3
 8012622:	2208      	movs	r2, #8
 8012624:	305c      	adds	r0, #92	; 0x5c
 8012626:	f000 f950 	bl	80128ca <memset>
 801262a:	4b0d      	ldr	r3, [pc, #52]	; (8012660 <std+0x58>)
 801262c:	6263      	str	r3, [r4, #36]	; 0x24
 801262e:	4b0d      	ldr	r3, [pc, #52]	; (8012664 <std+0x5c>)
 8012630:	62a3      	str	r3, [r4, #40]	; 0x28
 8012632:	4b0d      	ldr	r3, [pc, #52]	; (8012668 <std+0x60>)
 8012634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012636:	4b0d      	ldr	r3, [pc, #52]	; (801266c <std+0x64>)
 8012638:	6323      	str	r3, [r4, #48]	; 0x30
 801263a:	4b0d      	ldr	r3, [pc, #52]	; (8012670 <std+0x68>)
 801263c:	6224      	str	r4, [r4, #32]
 801263e:	429c      	cmp	r4, r3
 8012640:	d006      	beq.n	8012650 <std+0x48>
 8012642:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012646:	4294      	cmp	r4, r2
 8012648:	d002      	beq.n	8012650 <std+0x48>
 801264a:	33d0      	adds	r3, #208	; 0xd0
 801264c:	429c      	cmp	r4, r3
 801264e:	d105      	bne.n	801265c <std+0x54>
 8012650:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012658:	f000 ba1a 	b.w	8012a90 <__retarget_lock_init_recursive>
 801265c:	bd10      	pop	{r4, pc}
 801265e:	bf00      	nop
 8012660:	080127f1 	.word	0x080127f1
 8012664:	08012813 	.word	0x08012813
 8012668:	0801284b 	.word	0x0801284b
 801266c:	0801286f 	.word	0x0801286f
 8012670:	2000091c 	.word	0x2000091c

08012674 <stdio_exit_handler>:
 8012674:	4a02      	ldr	r2, [pc, #8]	; (8012680 <stdio_exit_handler+0xc>)
 8012676:	4903      	ldr	r1, [pc, #12]	; (8012684 <stdio_exit_handler+0x10>)
 8012678:	4803      	ldr	r0, [pc, #12]	; (8012688 <stdio_exit_handler+0x14>)
 801267a:	f000 b87b 	b.w	8012774 <_fwalk_sglue>
 801267e:	bf00      	nop
 8012680:	20000048 	.word	0x20000048
 8012684:	08015519 	.word	0x08015519
 8012688:	20000054 	.word	0x20000054

0801268c <cleanup_stdio>:
 801268c:	6841      	ldr	r1, [r0, #4]
 801268e:	4b0c      	ldr	r3, [pc, #48]	; (80126c0 <cleanup_stdio+0x34>)
 8012690:	4299      	cmp	r1, r3
 8012692:	b510      	push	{r4, lr}
 8012694:	4604      	mov	r4, r0
 8012696:	d001      	beq.n	801269c <cleanup_stdio+0x10>
 8012698:	f002 ff3e 	bl	8015518 <_fflush_r>
 801269c:	68a1      	ldr	r1, [r4, #8]
 801269e:	4b09      	ldr	r3, [pc, #36]	; (80126c4 <cleanup_stdio+0x38>)
 80126a0:	4299      	cmp	r1, r3
 80126a2:	d002      	beq.n	80126aa <cleanup_stdio+0x1e>
 80126a4:	4620      	mov	r0, r4
 80126a6:	f002 ff37 	bl	8015518 <_fflush_r>
 80126aa:	68e1      	ldr	r1, [r4, #12]
 80126ac:	4b06      	ldr	r3, [pc, #24]	; (80126c8 <cleanup_stdio+0x3c>)
 80126ae:	4299      	cmp	r1, r3
 80126b0:	d004      	beq.n	80126bc <cleanup_stdio+0x30>
 80126b2:	4620      	mov	r0, r4
 80126b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126b8:	f002 bf2e 	b.w	8015518 <_fflush_r>
 80126bc:	bd10      	pop	{r4, pc}
 80126be:	bf00      	nop
 80126c0:	2000091c 	.word	0x2000091c
 80126c4:	20000984 	.word	0x20000984
 80126c8:	200009ec 	.word	0x200009ec

080126cc <global_stdio_init.part.0>:
 80126cc:	b510      	push	{r4, lr}
 80126ce:	4b0b      	ldr	r3, [pc, #44]	; (80126fc <global_stdio_init.part.0+0x30>)
 80126d0:	4c0b      	ldr	r4, [pc, #44]	; (8012700 <global_stdio_init.part.0+0x34>)
 80126d2:	4a0c      	ldr	r2, [pc, #48]	; (8012704 <global_stdio_init.part.0+0x38>)
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	4620      	mov	r0, r4
 80126d8:	2200      	movs	r2, #0
 80126da:	2104      	movs	r1, #4
 80126dc:	f7ff ff94 	bl	8012608 <std>
 80126e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80126e4:	2201      	movs	r2, #1
 80126e6:	2109      	movs	r1, #9
 80126e8:	f7ff ff8e 	bl	8012608 <std>
 80126ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80126f0:	2202      	movs	r2, #2
 80126f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126f6:	2112      	movs	r1, #18
 80126f8:	f7ff bf86 	b.w	8012608 <std>
 80126fc:	20000a54 	.word	0x20000a54
 8012700:	2000091c 	.word	0x2000091c
 8012704:	08012675 	.word	0x08012675

08012708 <__sfp_lock_acquire>:
 8012708:	4801      	ldr	r0, [pc, #4]	; (8012710 <__sfp_lock_acquire+0x8>)
 801270a:	f000 b9c2 	b.w	8012a92 <__retarget_lock_acquire_recursive>
 801270e:	bf00      	nop
 8012710:	20000a5d 	.word	0x20000a5d

08012714 <__sfp_lock_release>:
 8012714:	4801      	ldr	r0, [pc, #4]	; (801271c <__sfp_lock_release+0x8>)
 8012716:	f000 b9bd 	b.w	8012a94 <__retarget_lock_release_recursive>
 801271a:	bf00      	nop
 801271c:	20000a5d 	.word	0x20000a5d

08012720 <__sinit>:
 8012720:	b510      	push	{r4, lr}
 8012722:	4604      	mov	r4, r0
 8012724:	f7ff fff0 	bl	8012708 <__sfp_lock_acquire>
 8012728:	6a23      	ldr	r3, [r4, #32]
 801272a:	b11b      	cbz	r3, 8012734 <__sinit+0x14>
 801272c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012730:	f7ff bff0 	b.w	8012714 <__sfp_lock_release>
 8012734:	4b04      	ldr	r3, [pc, #16]	; (8012748 <__sinit+0x28>)
 8012736:	6223      	str	r3, [r4, #32]
 8012738:	4b04      	ldr	r3, [pc, #16]	; (801274c <__sinit+0x2c>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d1f5      	bne.n	801272c <__sinit+0xc>
 8012740:	f7ff ffc4 	bl	80126cc <global_stdio_init.part.0>
 8012744:	e7f2      	b.n	801272c <__sinit+0xc>
 8012746:	bf00      	nop
 8012748:	0801268d 	.word	0x0801268d
 801274c:	20000a54 	.word	0x20000a54

08012750 <fiprintf>:
 8012750:	b40e      	push	{r1, r2, r3}
 8012752:	b503      	push	{r0, r1, lr}
 8012754:	4601      	mov	r1, r0
 8012756:	ab03      	add	r3, sp, #12
 8012758:	4805      	ldr	r0, [pc, #20]	; (8012770 <fiprintf+0x20>)
 801275a:	f853 2b04 	ldr.w	r2, [r3], #4
 801275e:	6800      	ldr	r0, [r0, #0]
 8012760:	9301      	str	r3, [sp, #4]
 8012762:	f002 fd39 	bl	80151d8 <_vfiprintf_r>
 8012766:	b002      	add	sp, #8
 8012768:	f85d eb04 	ldr.w	lr, [sp], #4
 801276c:	b003      	add	sp, #12
 801276e:	4770      	bx	lr
 8012770:	200000a0 	.word	0x200000a0

08012774 <_fwalk_sglue>:
 8012774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012778:	4607      	mov	r7, r0
 801277a:	4688      	mov	r8, r1
 801277c:	4614      	mov	r4, r2
 801277e:	2600      	movs	r6, #0
 8012780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012784:	f1b9 0901 	subs.w	r9, r9, #1
 8012788:	d505      	bpl.n	8012796 <_fwalk_sglue+0x22>
 801278a:	6824      	ldr	r4, [r4, #0]
 801278c:	2c00      	cmp	r4, #0
 801278e:	d1f7      	bne.n	8012780 <_fwalk_sglue+0xc>
 8012790:	4630      	mov	r0, r6
 8012792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012796:	89ab      	ldrh	r3, [r5, #12]
 8012798:	2b01      	cmp	r3, #1
 801279a:	d907      	bls.n	80127ac <_fwalk_sglue+0x38>
 801279c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80127a0:	3301      	adds	r3, #1
 80127a2:	d003      	beq.n	80127ac <_fwalk_sglue+0x38>
 80127a4:	4629      	mov	r1, r5
 80127a6:	4638      	mov	r0, r7
 80127a8:	47c0      	blx	r8
 80127aa:	4306      	orrs	r6, r0
 80127ac:	3568      	adds	r5, #104	; 0x68
 80127ae:	e7e9      	b.n	8012784 <_fwalk_sglue+0x10>

080127b0 <siprintf>:
 80127b0:	b40e      	push	{r1, r2, r3}
 80127b2:	b500      	push	{lr}
 80127b4:	b09c      	sub	sp, #112	; 0x70
 80127b6:	ab1d      	add	r3, sp, #116	; 0x74
 80127b8:	9002      	str	r0, [sp, #8]
 80127ba:	9006      	str	r0, [sp, #24]
 80127bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80127c0:	4809      	ldr	r0, [pc, #36]	; (80127e8 <siprintf+0x38>)
 80127c2:	9107      	str	r1, [sp, #28]
 80127c4:	9104      	str	r1, [sp, #16]
 80127c6:	4909      	ldr	r1, [pc, #36]	; (80127ec <siprintf+0x3c>)
 80127c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80127cc:	9105      	str	r1, [sp, #20]
 80127ce:	6800      	ldr	r0, [r0, #0]
 80127d0:	9301      	str	r3, [sp, #4]
 80127d2:	a902      	add	r1, sp, #8
 80127d4:	f002 fbd8 	bl	8014f88 <_svfiprintf_r>
 80127d8:	9b02      	ldr	r3, [sp, #8]
 80127da:	2200      	movs	r2, #0
 80127dc:	701a      	strb	r2, [r3, #0]
 80127de:	b01c      	add	sp, #112	; 0x70
 80127e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80127e4:	b003      	add	sp, #12
 80127e6:	4770      	bx	lr
 80127e8:	200000a0 	.word	0x200000a0
 80127ec:	ffff0208 	.word	0xffff0208

080127f0 <__sread>:
 80127f0:	b510      	push	{r4, lr}
 80127f2:	460c      	mov	r4, r1
 80127f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127f8:	f000 f8d8 	bl	80129ac <_read_r>
 80127fc:	2800      	cmp	r0, #0
 80127fe:	bfab      	itete	ge
 8012800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012802:	89a3      	ldrhlt	r3, [r4, #12]
 8012804:	181b      	addge	r3, r3, r0
 8012806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801280a:	bfac      	ite	ge
 801280c:	6563      	strge	r3, [r4, #84]	; 0x54
 801280e:	81a3      	strhlt	r3, [r4, #12]
 8012810:	bd10      	pop	{r4, pc}

08012812 <__swrite>:
 8012812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012816:	461f      	mov	r7, r3
 8012818:	898b      	ldrh	r3, [r1, #12]
 801281a:	05db      	lsls	r3, r3, #23
 801281c:	4605      	mov	r5, r0
 801281e:	460c      	mov	r4, r1
 8012820:	4616      	mov	r6, r2
 8012822:	d505      	bpl.n	8012830 <__swrite+0x1e>
 8012824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012828:	2302      	movs	r3, #2
 801282a:	2200      	movs	r2, #0
 801282c:	f000 f8ac 	bl	8012988 <_lseek_r>
 8012830:	89a3      	ldrh	r3, [r4, #12]
 8012832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801283a:	81a3      	strh	r3, [r4, #12]
 801283c:	4632      	mov	r2, r6
 801283e:	463b      	mov	r3, r7
 8012840:	4628      	mov	r0, r5
 8012842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012846:	f000 b8e7 	b.w	8012a18 <_write_r>

0801284a <__sseek>:
 801284a:	b510      	push	{r4, lr}
 801284c:	460c      	mov	r4, r1
 801284e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012852:	f000 f899 	bl	8012988 <_lseek_r>
 8012856:	1c43      	adds	r3, r0, #1
 8012858:	89a3      	ldrh	r3, [r4, #12]
 801285a:	bf15      	itete	ne
 801285c:	6560      	strne	r0, [r4, #84]	; 0x54
 801285e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012866:	81a3      	strheq	r3, [r4, #12]
 8012868:	bf18      	it	ne
 801286a:	81a3      	strhne	r3, [r4, #12]
 801286c:	bd10      	pop	{r4, pc}

0801286e <__sclose>:
 801286e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012872:	f000 b879 	b.w	8012968 <_close_r>

08012876 <memcmp>:
 8012876:	b510      	push	{r4, lr}
 8012878:	3901      	subs	r1, #1
 801287a:	4402      	add	r2, r0
 801287c:	4290      	cmp	r0, r2
 801287e:	d101      	bne.n	8012884 <memcmp+0xe>
 8012880:	2000      	movs	r0, #0
 8012882:	e005      	b.n	8012890 <memcmp+0x1a>
 8012884:	7803      	ldrb	r3, [r0, #0]
 8012886:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801288a:	42a3      	cmp	r3, r4
 801288c:	d001      	beq.n	8012892 <memcmp+0x1c>
 801288e:	1b18      	subs	r0, r3, r4
 8012890:	bd10      	pop	{r4, pc}
 8012892:	3001      	adds	r0, #1
 8012894:	e7f2      	b.n	801287c <memcmp+0x6>

08012896 <memmove>:
 8012896:	4288      	cmp	r0, r1
 8012898:	b510      	push	{r4, lr}
 801289a:	eb01 0402 	add.w	r4, r1, r2
 801289e:	d902      	bls.n	80128a6 <memmove+0x10>
 80128a0:	4284      	cmp	r4, r0
 80128a2:	4623      	mov	r3, r4
 80128a4:	d807      	bhi.n	80128b6 <memmove+0x20>
 80128a6:	1e43      	subs	r3, r0, #1
 80128a8:	42a1      	cmp	r1, r4
 80128aa:	d008      	beq.n	80128be <memmove+0x28>
 80128ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128b4:	e7f8      	b.n	80128a8 <memmove+0x12>
 80128b6:	4402      	add	r2, r0
 80128b8:	4601      	mov	r1, r0
 80128ba:	428a      	cmp	r2, r1
 80128bc:	d100      	bne.n	80128c0 <memmove+0x2a>
 80128be:	bd10      	pop	{r4, pc}
 80128c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80128c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80128c8:	e7f7      	b.n	80128ba <memmove+0x24>

080128ca <memset>:
 80128ca:	4402      	add	r2, r0
 80128cc:	4603      	mov	r3, r0
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d100      	bne.n	80128d4 <memset+0xa>
 80128d2:	4770      	bx	lr
 80128d4:	f803 1b01 	strb.w	r1, [r3], #1
 80128d8:	e7f9      	b.n	80128ce <memset+0x4>

080128da <strncpy>:
 80128da:	b510      	push	{r4, lr}
 80128dc:	3901      	subs	r1, #1
 80128de:	4603      	mov	r3, r0
 80128e0:	b132      	cbz	r2, 80128f0 <strncpy+0x16>
 80128e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80128e6:	f803 4b01 	strb.w	r4, [r3], #1
 80128ea:	3a01      	subs	r2, #1
 80128ec:	2c00      	cmp	r4, #0
 80128ee:	d1f7      	bne.n	80128e0 <strncpy+0x6>
 80128f0:	441a      	add	r2, r3
 80128f2:	2100      	movs	r1, #0
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d100      	bne.n	80128fa <strncpy+0x20>
 80128f8:	bd10      	pop	{r4, pc}
 80128fa:	f803 1b01 	strb.w	r1, [r3], #1
 80128fe:	e7f9      	b.n	80128f4 <strncpy+0x1a>

08012900 <_raise_r>:
 8012900:	291f      	cmp	r1, #31
 8012902:	b538      	push	{r3, r4, r5, lr}
 8012904:	4604      	mov	r4, r0
 8012906:	460d      	mov	r5, r1
 8012908:	d904      	bls.n	8012914 <_raise_r+0x14>
 801290a:	2316      	movs	r3, #22
 801290c:	6003      	str	r3, [r0, #0]
 801290e:	f04f 30ff 	mov.w	r0, #4294967295
 8012912:	bd38      	pop	{r3, r4, r5, pc}
 8012914:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012916:	b112      	cbz	r2, 801291e <_raise_r+0x1e>
 8012918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801291c:	b94b      	cbnz	r3, 8012932 <_raise_r+0x32>
 801291e:	4620      	mov	r0, r4
 8012920:	f000 f868 	bl	80129f4 <_getpid_r>
 8012924:	462a      	mov	r2, r5
 8012926:	4601      	mov	r1, r0
 8012928:	4620      	mov	r0, r4
 801292a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801292e:	f000 b84f 	b.w	80129d0 <_kill_r>
 8012932:	2b01      	cmp	r3, #1
 8012934:	d00a      	beq.n	801294c <_raise_r+0x4c>
 8012936:	1c59      	adds	r1, r3, #1
 8012938:	d103      	bne.n	8012942 <_raise_r+0x42>
 801293a:	2316      	movs	r3, #22
 801293c:	6003      	str	r3, [r0, #0]
 801293e:	2001      	movs	r0, #1
 8012940:	e7e7      	b.n	8012912 <_raise_r+0x12>
 8012942:	2400      	movs	r4, #0
 8012944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012948:	4628      	mov	r0, r5
 801294a:	4798      	blx	r3
 801294c:	2000      	movs	r0, #0
 801294e:	e7e0      	b.n	8012912 <_raise_r+0x12>

08012950 <raise>:
 8012950:	4b02      	ldr	r3, [pc, #8]	; (801295c <raise+0xc>)
 8012952:	4601      	mov	r1, r0
 8012954:	6818      	ldr	r0, [r3, #0]
 8012956:	f7ff bfd3 	b.w	8012900 <_raise_r>
 801295a:	bf00      	nop
 801295c:	200000a0 	.word	0x200000a0

08012960 <_localeconv_r>:
 8012960:	4800      	ldr	r0, [pc, #0]	; (8012964 <_localeconv_r+0x4>)
 8012962:	4770      	bx	lr
 8012964:	20000194 	.word	0x20000194

08012968 <_close_r>:
 8012968:	b538      	push	{r3, r4, r5, lr}
 801296a:	4d06      	ldr	r5, [pc, #24]	; (8012984 <_close_r+0x1c>)
 801296c:	2300      	movs	r3, #0
 801296e:	4604      	mov	r4, r0
 8012970:	4608      	mov	r0, r1
 8012972:	602b      	str	r3, [r5, #0]
 8012974:	f7f5 fe7d 	bl	8008672 <_close>
 8012978:	1c43      	adds	r3, r0, #1
 801297a:	d102      	bne.n	8012982 <_close_r+0x1a>
 801297c:	682b      	ldr	r3, [r5, #0]
 801297e:	b103      	cbz	r3, 8012982 <_close_r+0x1a>
 8012980:	6023      	str	r3, [r4, #0]
 8012982:	bd38      	pop	{r3, r4, r5, pc}
 8012984:	20000a58 	.word	0x20000a58

08012988 <_lseek_r>:
 8012988:	b538      	push	{r3, r4, r5, lr}
 801298a:	4d07      	ldr	r5, [pc, #28]	; (80129a8 <_lseek_r+0x20>)
 801298c:	4604      	mov	r4, r0
 801298e:	4608      	mov	r0, r1
 8012990:	4611      	mov	r1, r2
 8012992:	2200      	movs	r2, #0
 8012994:	602a      	str	r2, [r5, #0]
 8012996:	461a      	mov	r2, r3
 8012998:	f7f5 fe92 	bl	80086c0 <_lseek>
 801299c:	1c43      	adds	r3, r0, #1
 801299e:	d102      	bne.n	80129a6 <_lseek_r+0x1e>
 80129a0:	682b      	ldr	r3, [r5, #0]
 80129a2:	b103      	cbz	r3, 80129a6 <_lseek_r+0x1e>
 80129a4:	6023      	str	r3, [r4, #0]
 80129a6:	bd38      	pop	{r3, r4, r5, pc}
 80129a8:	20000a58 	.word	0x20000a58

080129ac <_read_r>:
 80129ac:	b538      	push	{r3, r4, r5, lr}
 80129ae:	4d07      	ldr	r5, [pc, #28]	; (80129cc <_read_r+0x20>)
 80129b0:	4604      	mov	r4, r0
 80129b2:	4608      	mov	r0, r1
 80129b4:	4611      	mov	r1, r2
 80129b6:	2200      	movs	r2, #0
 80129b8:	602a      	str	r2, [r5, #0]
 80129ba:	461a      	mov	r2, r3
 80129bc:	f7f5 fe20 	bl	8008600 <_read>
 80129c0:	1c43      	adds	r3, r0, #1
 80129c2:	d102      	bne.n	80129ca <_read_r+0x1e>
 80129c4:	682b      	ldr	r3, [r5, #0]
 80129c6:	b103      	cbz	r3, 80129ca <_read_r+0x1e>
 80129c8:	6023      	str	r3, [r4, #0]
 80129ca:	bd38      	pop	{r3, r4, r5, pc}
 80129cc:	20000a58 	.word	0x20000a58

080129d0 <_kill_r>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	4d07      	ldr	r5, [pc, #28]	; (80129f0 <_kill_r+0x20>)
 80129d4:	2300      	movs	r3, #0
 80129d6:	4604      	mov	r4, r0
 80129d8:	4608      	mov	r0, r1
 80129da:	4611      	mov	r1, r2
 80129dc:	602b      	str	r3, [r5, #0]
 80129de:	f7f5 fdf5 	bl	80085cc <_kill>
 80129e2:	1c43      	adds	r3, r0, #1
 80129e4:	d102      	bne.n	80129ec <_kill_r+0x1c>
 80129e6:	682b      	ldr	r3, [r5, #0]
 80129e8:	b103      	cbz	r3, 80129ec <_kill_r+0x1c>
 80129ea:	6023      	str	r3, [r4, #0]
 80129ec:	bd38      	pop	{r3, r4, r5, pc}
 80129ee:	bf00      	nop
 80129f0:	20000a58 	.word	0x20000a58

080129f4 <_getpid_r>:
 80129f4:	f7f5 bde2 	b.w	80085bc <_getpid>

080129f8 <_sbrk_r>:
 80129f8:	b538      	push	{r3, r4, r5, lr}
 80129fa:	4d06      	ldr	r5, [pc, #24]	; (8012a14 <_sbrk_r+0x1c>)
 80129fc:	2300      	movs	r3, #0
 80129fe:	4604      	mov	r4, r0
 8012a00:	4608      	mov	r0, r1
 8012a02:	602b      	str	r3, [r5, #0]
 8012a04:	f7f5 fe6a 	bl	80086dc <_sbrk>
 8012a08:	1c43      	adds	r3, r0, #1
 8012a0a:	d102      	bne.n	8012a12 <_sbrk_r+0x1a>
 8012a0c:	682b      	ldr	r3, [r5, #0]
 8012a0e:	b103      	cbz	r3, 8012a12 <_sbrk_r+0x1a>
 8012a10:	6023      	str	r3, [r4, #0]
 8012a12:	bd38      	pop	{r3, r4, r5, pc}
 8012a14:	20000a58 	.word	0x20000a58

08012a18 <_write_r>:
 8012a18:	b538      	push	{r3, r4, r5, lr}
 8012a1a:	4d07      	ldr	r5, [pc, #28]	; (8012a38 <_write_r+0x20>)
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	4608      	mov	r0, r1
 8012a20:	4611      	mov	r1, r2
 8012a22:	2200      	movs	r2, #0
 8012a24:	602a      	str	r2, [r5, #0]
 8012a26:	461a      	mov	r2, r3
 8012a28:	f7f5 fe07 	bl	800863a <_write>
 8012a2c:	1c43      	adds	r3, r0, #1
 8012a2e:	d102      	bne.n	8012a36 <_write_r+0x1e>
 8012a30:	682b      	ldr	r3, [r5, #0]
 8012a32:	b103      	cbz	r3, 8012a36 <_write_r+0x1e>
 8012a34:	6023      	str	r3, [r4, #0]
 8012a36:	bd38      	pop	{r3, r4, r5, pc}
 8012a38:	20000a58 	.word	0x20000a58

08012a3c <__errno>:
 8012a3c:	4b01      	ldr	r3, [pc, #4]	; (8012a44 <__errno+0x8>)
 8012a3e:	6818      	ldr	r0, [r3, #0]
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop
 8012a44:	200000a0 	.word	0x200000a0

08012a48 <__libc_init_array>:
 8012a48:	b570      	push	{r4, r5, r6, lr}
 8012a4a:	4d0d      	ldr	r5, [pc, #52]	; (8012a80 <__libc_init_array+0x38>)
 8012a4c:	4c0d      	ldr	r4, [pc, #52]	; (8012a84 <__libc_init_array+0x3c>)
 8012a4e:	1b64      	subs	r4, r4, r5
 8012a50:	10a4      	asrs	r4, r4, #2
 8012a52:	2600      	movs	r6, #0
 8012a54:	42a6      	cmp	r6, r4
 8012a56:	d109      	bne.n	8012a6c <__libc_init_array+0x24>
 8012a58:	4d0b      	ldr	r5, [pc, #44]	; (8012a88 <__libc_init_array+0x40>)
 8012a5a:	4c0c      	ldr	r4, [pc, #48]	; (8012a8c <__libc_init_array+0x44>)
 8012a5c:	f003 fa7c 	bl	8015f58 <_init>
 8012a60:	1b64      	subs	r4, r4, r5
 8012a62:	10a4      	asrs	r4, r4, #2
 8012a64:	2600      	movs	r6, #0
 8012a66:	42a6      	cmp	r6, r4
 8012a68:	d105      	bne.n	8012a76 <__libc_init_array+0x2e>
 8012a6a:	bd70      	pop	{r4, r5, r6, pc}
 8012a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a70:	4798      	blx	r3
 8012a72:	3601      	adds	r6, #1
 8012a74:	e7ee      	b.n	8012a54 <__libc_init_array+0xc>
 8012a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a7a:	4798      	blx	r3
 8012a7c:	3601      	adds	r6, #1
 8012a7e:	e7f2      	b.n	8012a66 <__libc_init_array+0x1e>
 8012a80:	0801752c 	.word	0x0801752c
 8012a84:	0801752c 	.word	0x0801752c
 8012a88:	0801752c 	.word	0x0801752c
 8012a8c:	0801753c 	.word	0x0801753c

08012a90 <__retarget_lock_init_recursive>:
 8012a90:	4770      	bx	lr

08012a92 <__retarget_lock_acquire_recursive>:
 8012a92:	4770      	bx	lr

08012a94 <__retarget_lock_release_recursive>:
 8012a94:	4770      	bx	lr

08012a96 <memcpy>:
 8012a96:	440a      	add	r2, r1
 8012a98:	4291      	cmp	r1, r2
 8012a9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a9e:	d100      	bne.n	8012aa2 <memcpy+0xc>
 8012aa0:	4770      	bx	lr
 8012aa2:	b510      	push	{r4, lr}
 8012aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012aa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012aac:	4291      	cmp	r1, r2
 8012aae:	d1f9      	bne.n	8012aa4 <memcpy+0xe>
 8012ab0:	bd10      	pop	{r4, pc}
	...

08012ab4 <nanf>:
 8012ab4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012abc <nanf+0x8>
 8012ab8:	4770      	bx	lr
 8012aba:	bf00      	nop
 8012abc:	7fc00000 	.word	0x7fc00000

08012ac0 <quorem>:
 8012ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac4:	6903      	ldr	r3, [r0, #16]
 8012ac6:	690c      	ldr	r4, [r1, #16]
 8012ac8:	42a3      	cmp	r3, r4
 8012aca:	4607      	mov	r7, r0
 8012acc:	db7e      	blt.n	8012bcc <quorem+0x10c>
 8012ace:	3c01      	subs	r4, #1
 8012ad0:	f101 0814 	add.w	r8, r1, #20
 8012ad4:	f100 0514 	add.w	r5, r0, #20
 8012ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012adc:	9301      	str	r3, [sp, #4]
 8012ade:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012aee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012af2:	fbb2 f6f3 	udiv	r6, r2, r3
 8012af6:	d331      	bcc.n	8012b5c <quorem+0x9c>
 8012af8:	f04f 0e00 	mov.w	lr, #0
 8012afc:	4640      	mov	r0, r8
 8012afe:	46ac      	mov	ip, r5
 8012b00:	46f2      	mov	sl, lr
 8012b02:	f850 2b04 	ldr.w	r2, [r0], #4
 8012b06:	b293      	uxth	r3, r2
 8012b08:	fb06 e303 	mla	r3, r6, r3, lr
 8012b0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012b10:	0c1a      	lsrs	r2, r3, #16
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	ebaa 0303 	sub.w	r3, sl, r3
 8012b18:	f8dc a000 	ldr.w	sl, [ip]
 8012b1c:	fa13 f38a 	uxtah	r3, r3, sl
 8012b20:	fb06 220e 	mla	r2, r6, lr, r2
 8012b24:	9300      	str	r3, [sp, #0]
 8012b26:	9b00      	ldr	r3, [sp, #0]
 8012b28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012b2c:	b292      	uxth	r2, r2
 8012b2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012b32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012b36:	f8bd 3000 	ldrh.w	r3, [sp]
 8012b3a:	4581      	cmp	r9, r0
 8012b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b40:	f84c 3b04 	str.w	r3, [ip], #4
 8012b44:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012b48:	d2db      	bcs.n	8012b02 <quorem+0x42>
 8012b4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8012b4e:	b92b      	cbnz	r3, 8012b5c <quorem+0x9c>
 8012b50:	9b01      	ldr	r3, [sp, #4]
 8012b52:	3b04      	subs	r3, #4
 8012b54:	429d      	cmp	r5, r3
 8012b56:	461a      	mov	r2, r3
 8012b58:	d32c      	bcc.n	8012bb4 <quorem+0xf4>
 8012b5a:	613c      	str	r4, [r7, #16]
 8012b5c:	4638      	mov	r0, r7
 8012b5e:	f001 f93b 	bl	8013dd8 <__mcmp>
 8012b62:	2800      	cmp	r0, #0
 8012b64:	db22      	blt.n	8012bac <quorem+0xec>
 8012b66:	3601      	adds	r6, #1
 8012b68:	4629      	mov	r1, r5
 8012b6a:	2000      	movs	r0, #0
 8012b6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012b70:	f8d1 c000 	ldr.w	ip, [r1]
 8012b74:	b293      	uxth	r3, r2
 8012b76:	1ac3      	subs	r3, r0, r3
 8012b78:	0c12      	lsrs	r2, r2, #16
 8012b7a:	fa13 f38c 	uxtah	r3, r3, ip
 8012b7e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012b82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b8c:	45c1      	cmp	r9, r8
 8012b8e:	f841 3b04 	str.w	r3, [r1], #4
 8012b92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012b96:	d2e9      	bcs.n	8012b6c <quorem+0xac>
 8012b98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ba0:	b922      	cbnz	r2, 8012bac <quorem+0xec>
 8012ba2:	3b04      	subs	r3, #4
 8012ba4:	429d      	cmp	r5, r3
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	d30a      	bcc.n	8012bc0 <quorem+0x100>
 8012baa:	613c      	str	r4, [r7, #16]
 8012bac:	4630      	mov	r0, r6
 8012bae:	b003      	add	sp, #12
 8012bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bb4:	6812      	ldr	r2, [r2, #0]
 8012bb6:	3b04      	subs	r3, #4
 8012bb8:	2a00      	cmp	r2, #0
 8012bba:	d1ce      	bne.n	8012b5a <quorem+0x9a>
 8012bbc:	3c01      	subs	r4, #1
 8012bbe:	e7c9      	b.n	8012b54 <quorem+0x94>
 8012bc0:	6812      	ldr	r2, [r2, #0]
 8012bc2:	3b04      	subs	r3, #4
 8012bc4:	2a00      	cmp	r2, #0
 8012bc6:	d1f0      	bne.n	8012baa <quorem+0xea>
 8012bc8:	3c01      	subs	r4, #1
 8012bca:	e7eb      	b.n	8012ba4 <quorem+0xe4>
 8012bcc:	2000      	movs	r0, #0
 8012bce:	e7ee      	b.n	8012bae <quorem+0xee>

08012bd0 <_dtoa_r>:
 8012bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bd4:	ed2d 8b04 	vpush	{d8-d9}
 8012bd8:	69c5      	ldr	r5, [r0, #28]
 8012bda:	b093      	sub	sp, #76	; 0x4c
 8012bdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012be0:	ec57 6b10 	vmov	r6, r7, d0
 8012be4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012be8:	9107      	str	r1, [sp, #28]
 8012bea:	4604      	mov	r4, r0
 8012bec:	920a      	str	r2, [sp, #40]	; 0x28
 8012bee:	930d      	str	r3, [sp, #52]	; 0x34
 8012bf0:	b975      	cbnz	r5, 8012c10 <_dtoa_r+0x40>
 8012bf2:	2010      	movs	r0, #16
 8012bf4:	f7fe fdd6 	bl	80117a4 <malloc>
 8012bf8:	4602      	mov	r2, r0
 8012bfa:	61e0      	str	r0, [r4, #28]
 8012bfc:	b920      	cbnz	r0, 8012c08 <_dtoa_r+0x38>
 8012bfe:	4bae      	ldr	r3, [pc, #696]	; (8012eb8 <_dtoa_r+0x2e8>)
 8012c00:	21ef      	movs	r1, #239	; 0xef
 8012c02:	48ae      	ldr	r0, [pc, #696]	; (8012ebc <_dtoa_r+0x2ec>)
 8012c04:	f7fe fd9e 	bl	8011744 <__assert_func>
 8012c08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012c0c:	6005      	str	r5, [r0, #0]
 8012c0e:	60c5      	str	r5, [r0, #12]
 8012c10:	69e3      	ldr	r3, [r4, #28]
 8012c12:	6819      	ldr	r1, [r3, #0]
 8012c14:	b151      	cbz	r1, 8012c2c <_dtoa_r+0x5c>
 8012c16:	685a      	ldr	r2, [r3, #4]
 8012c18:	604a      	str	r2, [r1, #4]
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	4093      	lsls	r3, r2
 8012c1e:	608b      	str	r3, [r1, #8]
 8012c20:	4620      	mov	r0, r4
 8012c22:	f000 fe53 	bl	80138cc <_Bfree>
 8012c26:	69e3      	ldr	r3, [r4, #28]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	601a      	str	r2, [r3, #0]
 8012c2c:	1e3b      	subs	r3, r7, #0
 8012c2e:	bfbb      	ittet	lt
 8012c30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012c34:	9303      	strlt	r3, [sp, #12]
 8012c36:	2300      	movge	r3, #0
 8012c38:	2201      	movlt	r2, #1
 8012c3a:	bfac      	ite	ge
 8012c3c:	f8c8 3000 	strge.w	r3, [r8]
 8012c40:	f8c8 2000 	strlt.w	r2, [r8]
 8012c44:	4b9e      	ldr	r3, [pc, #632]	; (8012ec0 <_dtoa_r+0x2f0>)
 8012c46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012c4a:	ea33 0308 	bics.w	r3, r3, r8
 8012c4e:	d11b      	bne.n	8012c88 <_dtoa_r+0xb8>
 8012c50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c52:	f242 730f 	movw	r3, #9999	; 0x270f
 8012c56:	6013      	str	r3, [r2, #0]
 8012c58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012c5c:	4333      	orrs	r3, r6
 8012c5e:	f000 8593 	beq.w	8013788 <_dtoa_r+0xbb8>
 8012c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c64:	b963      	cbnz	r3, 8012c80 <_dtoa_r+0xb0>
 8012c66:	4b97      	ldr	r3, [pc, #604]	; (8012ec4 <_dtoa_r+0x2f4>)
 8012c68:	e027      	b.n	8012cba <_dtoa_r+0xea>
 8012c6a:	4b97      	ldr	r3, [pc, #604]	; (8012ec8 <_dtoa_r+0x2f8>)
 8012c6c:	9300      	str	r3, [sp, #0]
 8012c6e:	3308      	adds	r3, #8
 8012c70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012c72:	6013      	str	r3, [r2, #0]
 8012c74:	9800      	ldr	r0, [sp, #0]
 8012c76:	b013      	add	sp, #76	; 0x4c
 8012c78:	ecbd 8b04 	vpop	{d8-d9}
 8012c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c80:	4b90      	ldr	r3, [pc, #576]	; (8012ec4 <_dtoa_r+0x2f4>)
 8012c82:	9300      	str	r3, [sp, #0]
 8012c84:	3303      	adds	r3, #3
 8012c86:	e7f3      	b.n	8012c70 <_dtoa_r+0xa0>
 8012c88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	ec51 0b17 	vmov	r0, r1, d7
 8012c92:	eeb0 8a47 	vmov.f32	s16, s14
 8012c96:	eef0 8a67 	vmov.f32	s17, s15
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	f7ed ff3c 	bl	8000b18 <__aeabi_dcmpeq>
 8012ca0:	4681      	mov	r9, r0
 8012ca2:	b160      	cbz	r0, 8012cbe <_dtoa_r+0xee>
 8012ca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	6013      	str	r3, [r2, #0]
 8012caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	f000 8568 	beq.w	8013782 <_dtoa_r+0xbb2>
 8012cb2:	4b86      	ldr	r3, [pc, #536]	; (8012ecc <_dtoa_r+0x2fc>)
 8012cb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012cb6:	6013      	str	r3, [r2, #0]
 8012cb8:	3b01      	subs	r3, #1
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	e7da      	b.n	8012c74 <_dtoa_r+0xa4>
 8012cbe:	aa10      	add	r2, sp, #64	; 0x40
 8012cc0:	a911      	add	r1, sp, #68	; 0x44
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8012cc8:	eef0 0a68 	vmov.f32	s1, s17
 8012ccc:	f001 f99a 	bl	8014004 <__d2b>
 8012cd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012cd4:	4682      	mov	sl, r0
 8012cd6:	2d00      	cmp	r5, #0
 8012cd8:	d07f      	beq.n	8012dda <_dtoa_r+0x20a>
 8012cda:	ee18 3a90 	vmov	r3, s17
 8012cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ce2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012ce6:	ec51 0b18 	vmov	r0, r1, d8
 8012cea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012cee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012cf2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	4b75      	ldr	r3, [pc, #468]	; (8012ed0 <_dtoa_r+0x300>)
 8012cfc:	f7ed faec 	bl	80002d8 <__aeabi_dsub>
 8012d00:	a367      	add	r3, pc, #412	; (adr r3, 8012ea0 <_dtoa_r+0x2d0>)
 8012d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d06:	f7ed fc9f 	bl	8000648 <__aeabi_dmul>
 8012d0a:	a367      	add	r3, pc, #412	; (adr r3, 8012ea8 <_dtoa_r+0x2d8>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	f7ed fae4 	bl	80002dc <__adddf3>
 8012d14:	4606      	mov	r6, r0
 8012d16:	4628      	mov	r0, r5
 8012d18:	460f      	mov	r7, r1
 8012d1a:	f7ed fc2b 	bl	8000574 <__aeabi_i2d>
 8012d1e:	a364      	add	r3, pc, #400	; (adr r3, 8012eb0 <_dtoa_r+0x2e0>)
 8012d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d24:	f7ed fc90 	bl	8000648 <__aeabi_dmul>
 8012d28:	4602      	mov	r2, r0
 8012d2a:	460b      	mov	r3, r1
 8012d2c:	4630      	mov	r0, r6
 8012d2e:	4639      	mov	r1, r7
 8012d30:	f7ed fad4 	bl	80002dc <__adddf3>
 8012d34:	4606      	mov	r6, r0
 8012d36:	460f      	mov	r7, r1
 8012d38:	f7ed ff36 	bl	8000ba8 <__aeabi_d2iz>
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	4683      	mov	fp, r0
 8012d40:	2300      	movs	r3, #0
 8012d42:	4630      	mov	r0, r6
 8012d44:	4639      	mov	r1, r7
 8012d46:	f7ed fef1 	bl	8000b2c <__aeabi_dcmplt>
 8012d4a:	b148      	cbz	r0, 8012d60 <_dtoa_r+0x190>
 8012d4c:	4658      	mov	r0, fp
 8012d4e:	f7ed fc11 	bl	8000574 <__aeabi_i2d>
 8012d52:	4632      	mov	r2, r6
 8012d54:	463b      	mov	r3, r7
 8012d56:	f7ed fedf 	bl	8000b18 <__aeabi_dcmpeq>
 8012d5a:	b908      	cbnz	r0, 8012d60 <_dtoa_r+0x190>
 8012d5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d60:	f1bb 0f16 	cmp.w	fp, #22
 8012d64:	d857      	bhi.n	8012e16 <_dtoa_r+0x246>
 8012d66:	4b5b      	ldr	r3, [pc, #364]	; (8012ed4 <_dtoa_r+0x304>)
 8012d68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d70:	ec51 0b18 	vmov	r0, r1, d8
 8012d74:	f7ed feda 	bl	8000b2c <__aeabi_dcmplt>
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	d04e      	beq.n	8012e1a <_dtoa_r+0x24a>
 8012d7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d80:	2300      	movs	r3, #0
 8012d82:	930c      	str	r3, [sp, #48]	; 0x30
 8012d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d86:	1b5b      	subs	r3, r3, r5
 8012d88:	1e5a      	subs	r2, r3, #1
 8012d8a:	bf45      	ittet	mi
 8012d8c:	f1c3 0301 	rsbmi	r3, r3, #1
 8012d90:	9305      	strmi	r3, [sp, #20]
 8012d92:	2300      	movpl	r3, #0
 8012d94:	2300      	movmi	r3, #0
 8012d96:	9206      	str	r2, [sp, #24]
 8012d98:	bf54      	ite	pl
 8012d9a:	9305      	strpl	r3, [sp, #20]
 8012d9c:	9306      	strmi	r3, [sp, #24]
 8012d9e:	f1bb 0f00 	cmp.w	fp, #0
 8012da2:	db3c      	blt.n	8012e1e <_dtoa_r+0x24e>
 8012da4:	9b06      	ldr	r3, [sp, #24]
 8012da6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012daa:	445b      	add	r3, fp
 8012dac:	9306      	str	r3, [sp, #24]
 8012dae:	2300      	movs	r3, #0
 8012db0:	9308      	str	r3, [sp, #32]
 8012db2:	9b07      	ldr	r3, [sp, #28]
 8012db4:	2b09      	cmp	r3, #9
 8012db6:	d868      	bhi.n	8012e8a <_dtoa_r+0x2ba>
 8012db8:	2b05      	cmp	r3, #5
 8012dba:	bfc4      	itt	gt
 8012dbc:	3b04      	subgt	r3, #4
 8012dbe:	9307      	strgt	r3, [sp, #28]
 8012dc0:	9b07      	ldr	r3, [sp, #28]
 8012dc2:	f1a3 0302 	sub.w	r3, r3, #2
 8012dc6:	bfcc      	ite	gt
 8012dc8:	2500      	movgt	r5, #0
 8012dca:	2501      	movle	r5, #1
 8012dcc:	2b03      	cmp	r3, #3
 8012dce:	f200 8085 	bhi.w	8012edc <_dtoa_r+0x30c>
 8012dd2:	e8df f003 	tbb	[pc, r3]
 8012dd6:	3b2e      	.short	0x3b2e
 8012dd8:	5839      	.short	0x5839
 8012dda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012dde:	441d      	add	r5, r3
 8012de0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012de4:	2b20      	cmp	r3, #32
 8012de6:	bfc1      	itttt	gt
 8012de8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012dec:	fa08 f803 	lslgt.w	r8, r8, r3
 8012df0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012df4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012df8:	bfd6      	itet	le
 8012dfa:	f1c3 0320 	rsble	r3, r3, #32
 8012dfe:	ea48 0003 	orrgt.w	r0, r8, r3
 8012e02:	fa06 f003 	lslle.w	r0, r6, r3
 8012e06:	f7ed fba5 	bl	8000554 <__aeabi_ui2d>
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012e10:	3d01      	subs	r5, #1
 8012e12:	920e      	str	r2, [sp, #56]	; 0x38
 8012e14:	e76f      	b.n	8012cf6 <_dtoa_r+0x126>
 8012e16:	2301      	movs	r3, #1
 8012e18:	e7b3      	b.n	8012d82 <_dtoa_r+0x1b2>
 8012e1a:	900c      	str	r0, [sp, #48]	; 0x30
 8012e1c:	e7b2      	b.n	8012d84 <_dtoa_r+0x1b4>
 8012e1e:	9b05      	ldr	r3, [sp, #20]
 8012e20:	eba3 030b 	sub.w	r3, r3, fp
 8012e24:	9305      	str	r3, [sp, #20]
 8012e26:	f1cb 0300 	rsb	r3, fp, #0
 8012e2a:	9308      	str	r3, [sp, #32]
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e30:	e7bf      	b.n	8012db2 <_dtoa_r+0x1e2>
 8012e32:	2300      	movs	r3, #0
 8012e34:	9309      	str	r3, [sp, #36]	; 0x24
 8012e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	dc52      	bgt.n	8012ee2 <_dtoa_r+0x312>
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	9301      	str	r3, [sp, #4]
 8012e40:	9304      	str	r3, [sp, #16]
 8012e42:	461a      	mov	r2, r3
 8012e44:	920a      	str	r2, [sp, #40]	; 0x28
 8012e46:	e00b      	b.n	8012e60 <_dtoa_r+0x290>
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e7f3      	b.n	8012e34 <_dtoa_r+0x264>
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8012e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e52:	445b      	add	r3, fp
 8012e54:	9301      	str	r3, [sp, #4]
 8012e56:	3301      	adds	r3, #1
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	9304      	str	r3, [sp, #16]
 8012e5c:	bfb8      	it	lt
 8012e5e:	2301      	movlt	r3, #1
 8012e60:	69e0      	ldr	r0, [r4, #28]
 8012e62:	2100      	movs	r1, #0
 8012e64:	2204      	movs	r2, #4
 8012e66:	f102 0614 	add.w	r6, r2, #20
 8012e6a:	429e      	cmp	r6, r3
 8012e6c:	d93d      	bls.n	8012eea <_dtoa_r+0x31a>
 8012e6e:	6041      	str	r1, [r0, #4]
 8012e70:	4620      	mov	r0, r4
 8012e72:	f000 fceb 	bl	801384c <_Balloc>
 8012e76:	9000      	str	r0, [sp, #0]
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	d139      	bne.n	8012ef0 <_dtoa_r+0x320>
 8012e7c:	4b16      	ldr	r3, [pc, #88]	; (8012ed8 <_dtoa_r+0x308>)
 8012e7e:	4602      	mov	r2, r0
 8012e80:	f240 11af 	movw	r1, #431	; 0x1af
 8012e84:	e6bd      	b.n	8012c02 <_dtoa_r+0x32>
 8012e86:	2301      	movs	r3, #1
 8012e88:	e7e1      	b.n	8012e4e <_dtoa_r+0x27e>
 8012e8a:	2501      	movs	r5, #1
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	9307      	str	r3, [sp, #28]
 8012e90:	9509      	str	r5, [sp, #36]	; 0x24
 8012e92:	f04f 33ff 	mov.w	r3, #4294967295
 8012e96:	9301      	str	r3, [sp, #4]
 8012e98:	9304      	str	r3, [sp, #16]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	2312      	movs	r3, #18
 8012e9e:	e7d1      	b.n	8012e44 <_dtoa_r+0x274>
 8012ea0:	636f4361 	.word	0x636f4361
 8012ea4:	3fd287a7 	.word	0x3fd287a7
 8012ea8:	8b60c8b3 	.word	0x8b60c8b3
 8012eac:	3fc68a28 	.word	0x3fc68a28
 8012eb0:	509f79fb 	.word	0x509f79fb
 8012eb4:	3fd34413 	.word	0x3fd34413
 8012eb8:	0801717a 	.word	0x0801717a
 8012ebc:	08017191 	.word	0x08017191
 8012ec0:	7ff00000 	.word	0x7ff00000
 8012ec4:	08017176 	.word	0x08017176
 8012ec8:	0801716d 	.word	0x0801716d
 8012ecc:	08017145 	.word	0x08017145
 8012ed0:	3ff80000 	.word	0x3ff80000
 8012ed4:	08017280 	.word	0x08017280
 8012ed8:	080171e9 	.word	0x080171e9
 8012edc:	2301      	movs	r3, #1
 8012ede:	9309      	str	r3, [sp, #36]	; 0x24
 8012ee0:	e7d7      	b.n	8012e92 <_dtoa_r+0x2c2>
 8012ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ee4:	9301      	str	r3, [sp, #4]
 8012ee6:	9304      	str	r3, [sp, #16]
 8012ee8:	e7ba      	b.n	8012e60 <_dtoa_r+0x290>
 8012eea:	3101      	adds	r1, #1
 8012eec:	0052      	lsls	r2, r2, #1
 8012eee:	e7ba      	b.n	8012e66 <_dtoa_r+0x296>
 8012ef0:	69e3      	ldr	r3, [r4, #28]
 8012ef2:	9a00      	ldr	r2, [sp, #0]
 8012ef4:	601a      	str	r2, [r3, #0]
 8012ef6:	9b04      	ldr	r3, [sp, #16]
 8012ef8:	2b0e      	cmp	r3, #14
 8012efa:	f200 80a8 	bhi.w	801304e <_dtoa_r+0x47e>
 8012efe:	2d00      	cmp	r5, #0
 8012f00:	f000 80a5 	beq.w	801304e <_dtoa_r+0x47e>
 8012f04:	f1bb 0f00 	cmp.w	fp, #0
 8012f08:	dd38      	ble.n	8012f7c <_dtoa_r+0x3ac>
 8012f0a:	4bc0      	ldr	r3, [pc, #768]	; (801320c <_dtoa_r+0x63c>)
 8012f0c:	f00b 020f 	and.w	r2, fp, #15
 8012f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012f18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012f1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012f20:	d019      	beq.n	8012f56 <_dtoa_r+0x386>
 8012f22:	4bbb      	ldr	r3, [pc, #748]	; (8013210 <_dtoa_r+0x640>)
 8012f24:	ec51 0b18 	vmov	r0, r1, d8
 8012f28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012f2c:	f7ed fcb6 	bl	800089c <__aeabi_ddiv>
 8012f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f34:	f008 080f 	and.w	r8, r8, #15
 8012f38:	2503      	movs	r5, #3
 8012f3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013210 <_dtoa_r+0x640>
 8012f3e:	f1b8 0f00 	cmp.w	r8, #0
 8012f42:	d10a      	bne.n	8012f5a <_dtoa_r+0x38a>
 8012f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f48:	4632      	mov	r2, r6
 8012f4a:	463b      	mov	r3, r7
 8012f4c:	f7ed fca6 	bl	800089c <__aeabi_ddiv>
 8012f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f54:	e02b      	b.n	8012fae <_dtoa_r+0x3de>
 8012f56:	2502      	movs	r5, #2
 8012f58:	e7ef      	b.n	8012f3a <_dtoa_r+0x36a>
 8012f5a:	f018 0f01 	tst.w	r8, #1
 8012f5e:	d008      	beq.n	8012f72 <_dtoa_r+0x3a2>
 8012f60:	4630      	mov	r0, r6
 8012f62:	4639      	mov	r1, r7
 8012f64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012f68:	f7ed fb6e 	bl	8000648 <__aeabi_dmul>
 8012f6c:	3501      	adds	r5, #1
 8012f6e:	4606      	mov	r6, r0
 8012f70:	460f      	mov	r7, r1
 8012f72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012f76:	f109 0908 	add.w	r9, r9, #8
 8012f7a:	e7e0      	b.n	8012f3e <_dtoa_r+0x36e>
 8012f7c:	f000 809f 	beq.w	80130be <_dtoa_r+0x4ee>
 8012f80:	f1cb 0600 	rsb	r6, fp, #0
 8012f84:	4ba1      	ldr	r3, [pc, #644]	; (801320c <_dtoa_r+0x63c>)
 8012f86:	4fa2      	ldr	r7, [pc, #648]	; (8013210 <_dtoa_r+0x640>)
 8012f88:	f006 020f 	and.w	r2, r6, #15
 8012f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f94:	ec51 0b18 	vmov	r0, r1, d8
 8012f98:	f7ed fb56 	bl	8000648 <__aeabi_dmul>
 8012f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fa0:	1136      	asrs	r6, r6, #4
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	2502      	movs	r5, #2
 8012fa6:	2e00      	cmp	r6, #0
 8012fa8:	d17e      	bne.n	80130a8 <_dtoa_r+0x4d8>
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d1d0      	bne.n	8012f50 <_dtoa_r+0x380>
 8012fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	f000 8084 	beq.w	80130c2 <_dtoa_r+0x4f2>
 8012fba:	4b96      	ldr	r3, [pc, #600]	; (8013214 <_dtoa_r+0x644>)
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	4640      	mov	r0, r8
 8012fc0:	4649      	mov	r1, r9
 8012fc2:	f7ed fdb3 	bl	8000b2c <__aeabi_dcmplt>
 8012fc6:	2800      	cmp	r0, #0
 8012fc8:	d07b      	beq.n	80130c2 <_dtoa_r+0x4f2>
 8012fca:	9b04      	ldr	r3, [sp, #16]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d078      	beq.n	80130c2 <_dtoa_r+0x4f2>
 8012fd0:	9b01      	ldr	r3, [sp, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	dd39      	ble.n	801304a <_dtoa_r+0x47a>
 8012fd6:	4b90      	ldr	r3, [pc, #576]	; (8013218 <_dtoa_r+0x648>)
 8012fd8:	2200      	movs	r2, #0
 8012fda:	4640      	mov	r0, r8
 8012fdc:	4649      	mov	r1, r9
 8012fde:	f7ed fb33 	bl	8000648 <__aeabi_dmul>
 8012fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fe6:	9e01      	ldr	r6, [sp, #4]
 8012fe8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012fec:	3501      	adds	r5, #1
 8012fee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f7ed fabe 	bl	8000574 <__aeabi_i2d>
 8012ff8:	4642      	mov	r2, r8
 8012ffa:	464b      	mov	r3, r9
 8012ffc:	f7ed fb24 	bl	8000648 <__aeabi_dmul>
 8013000:	4b86      	ldr	r3, [pc, #536]	; (801321c <_dtoa_r+0x64c>)
 8013002:	2200      	movs	r2, #0
 8013004:	f7ed f96a 	bl	80002dc <__adddf3>
 8013008:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801300c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013010:	9303      	str	r3, [sp, #12]
 8013012:	2e00      	cmp	r6, #0
 8013014:	d158      	bne.n	80130c8 <_dtoa_r+0x4f8>
 8013016:	4b82      	ldr	r3, [pc, #520]	; (8013220 <_dtoa_r+0x650>)
 8013018:	2200      	movs	r2, #0
 801301a:	4640      	mov	r0, r8
 801301c:	4649      	mov	r1, r9
 801301e:	f7ed f95b 	bl	80002d8 <__aeabi_dsub>
 8013022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013026:	4680      	mov	r8, r0
 8013028:	4689      	mov	r9, r1
 801302a:	f7ed fd9d 	bl	8000b68 <__aeabi_dcmpgt>
 801302e:	2800      	cmp	r0, #0
 8013030:	f040 8296 	bne.w	8013560 <_dtoa_r+0x990>
 8013034:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013038:	4640      	mov	r0, r8
 801303a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801303e:	4649      	mov	r1, r9
 8013040:	f7ed fd74 	bl	8000b2c <__aeabi_dcmplt>
 8013044:	2800      	cmp	r0, #0
 8013046:	f040 8289 	bne.w	801355c <_dtoa_r+0x98c>
 801304a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801304e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013050:	2b00      	cmp	r3, #0
 8013052:	f2c0 814e 	blt.w	80132f2 <_dtoa_r+0x722>
 8013056:	f1bb 0f0e 	cmp.w	fp, #14
 801305a:	f300 814a 	bgt.w	80132f2 <_dtoa_r+0x722>
 801305e:	4b6b      	ldr	r3, [pc, #428]	; (801320c <_dtoa_r+0x63c>)
 8013060:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801306a:	2b00      	cmp	r3, #0
 801306c:	f280 80dc 	bge.w	8013228 <_dtoa_r+0x658>
 8013070:	9b04      	ldr	r3, [sp, #16]
 8013072:	2b00      	cmp	r3, #0
 8013074:	f300 80d8 	bgt.w	8013228 <_dtoa_r+0x658>
 8013078:	f040 826f 	bne.w	801355a <_dtoa_r+0x98a>
 801307c:	4b68      	ldr	r3, [pc, #416]	; (8013220 <_dtoa_r+0x650>)
 801307e:	2200      	movs	r2, #0
 8013080:	4640      	mov	r0, r8
 8013082:	4649      	mov	r1, r9
 8013084:	f7ed fae0 	bl	8000648 <__aeabi_dmul>
 8013088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801308c:	f7ed fd62 	bl	8000b54 <__aeabi_dcmpge>
 8013090:	9e04      	ldr	r6, [sp, #16]
 8013092:	4637      	mov	r7, r6
 8013094:	2800      	cmp	r0, #0
 8013096:	f040 8245 	bne.w	8013524 <_dtoa_r+0x954>
 801309a:	9d00      	ldr	r5, [sp, #0]
 801309c:	2331      	movs	r3, #49	; 0x31
 801309e:	f805 3b01 	strb.w	r3, [r5], #1
 80130a2:	f10b 0b01 	add.w	fp, fp, #1
 80130a6:	e241      	b.n	801352c <_dtoa_r+0x95c>
 80130a8:	07f2      	lsls	r2, r6, #31
 80130aa:	d505      	bpl.n	80130b8 <_dtoa_r+0x4e8>
 80130ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80130b0:	f7ed faca 	bl	8000648 <__aeabi_dmul>
 80130b4:	3501      	adds	r5, #1
 80130b6:	2301      	movs	r3, #1
 80130b8:	1076      	asrs	r6, r6, #1
 80130ba:	3708      	adds	r7, #8
 80130bc:	e773      	b.n	8012fa6 <_dtoa_r+0x3d6>
 80130be:	2502      	movs	r5, #2
 80130c0:	e775      	b.n	8012fae <_dtoa_r+0x3de>
 80130c2:	9e04      	ldr	r6, [sp, #16]
 80130c4:	465f      	mov	r7, fp
 80130c6:	e792      	b.n	8012fee <_dtoa_r+0x41e>
 80130c8:	9900      	ldr	r1, [sp, #0]
 80130ca:	4b50      	ldr	r3, [pc, #320]	; (801320c <_dtoa_r+0x63c>)
 80130cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80130d0:	4431      	add	r1, r6
 80130d2:	9102      	str	r1, [sp, #8]
 80130d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130d6:	eeb0 9a47 	vmov.f32	s18, s14
 80130da:	eef0 9a67 	vmov.f32	s19, s15
 80130de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80130e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80130e6:	2900      	cmp	r1, #0
 80130e8:	d044      	beq.n	8013174 <_dtoa_r+0x5a4>
 80130ea:	494e      	ldr	r1, [pc, #312]	; (8013224 <_dtoa_r+0x654>)
 80130ec:	2000      	movs	r0, #0
 80130ee:	f7ed fbd5 	bl	800089c <__aeabi_ddiv>
 80130f2:	ec53 2b19 	vmov	r2, r3, d9
 80130f6:	f7ed f8ef 	bl	80002d8 <__aeabi_dsub>
 80130fa:	9d00      	ldr	r5, [sp, #0]
 80130fc:	ec41 0b19 	vmov	d9, r0, r1
 8013100:	4649      	mov	r1, r9
 8013102:	4640      	mov	r0, r8
 8013104:	f7ed fd50 	bl	8000ba8 <__aeabi_d2iz>
 8013108:	4606      	mov	r6, r0
 801310a:	f7ed fa33 	bl	8000574 <__aeabi_i2d>
 801310e:	4602      	mov	r2, r0
 8013110:	460b      	mov	r3, r1
 8013112:	4640      	mov	r0, r8
 8013114:	4649      	mov	r1, r9
 8013116:	f7ed f8df 	bl	80002d8 <__aeabi_dsub>
 801311a:	3630      	adds	r6, #48	; 0x30
 801311c:	f805 6b01 	strb.w	r6, [r5], #1
 8013120:	ec53 2b19 	vmov	r2, r3, d9
 8013124:	4680      	mov	r8, r0
 8013126:	4689      	mov	r9, r1
 8013128:	f7ed fd00 	bl	8000b2c <__aeabi_dcmplt>
 801312c:	2800      	cmp	r0, #0
 801312e:	d164      	bne.n	80131fa <_dtoa_r+0x62a>
 8013130:	4642      	mov	r2, r8
 8013132:	464b      	mov	r3, r9
 8013134:	4937      	ldr	r1, [pc, #220]	; (8013214 <_dtoa_r+0x644>)
 8013136:	2000      	movs	r0, #0
 8013138:	f7ed f8ce 	bl	80002d8 <__aeabi_dsub>
 801313c:	ec53 2b19 	vmov	r2, r3, d9
 8013140:	f7ed fcf4 	bl	8000b2c <__aeabi_dcmplt>
 8013144:	2800      	cmp	r0, #0
 8013146:	f040 80b6 	bne.w	80132b6 <_dtoa_r+0x6e6>
 801314a:	9b02      	ldr	r3, [sp, #8]
 801314c:	429d      	cmp	r5, r3
 801314e:	f43f af7c 	beq.w	801304a <_dtoa_r+0x47a>
 8013152:	4b31      	ldr	r3, [pc, #196]	; (8013218 <_dtoa_r+0x648>)
 8013154:	ec51 0b19 	vmov	r0, r1, d9
 8013158:	2200      	movs	r2, #0
 801315a:	f7ed fa75 	bl	8000648 <__aeabi_dmul>
 801315e:	4b2e      	ldr	r3, [pc, #184]	; (8013218 <_dtoa_r+0x648>)
 8013160:	ec41 0b19 	vmov	d9, r0, r1
 8013164:	2200      	movs	r2, #0
 8013166:	4640      	mov	r0, r8
 8013168:	4649      	mov	r1, r9
 801316a:	f7ed fa6d 	bl	8000648 <__aeabi_dmul>
 801316e:	4680      	mov	r8, r0
 8013170:	4689      	mov	r9, r1
 8013172:	e7c5      	b.n	8013100 <_dtoa_r+0x530>
 8013174:	ec51 0b17 	vmov	r0, r1, d7
 8013178:	f7ed fa66 	bl	8000648 <__aeabi_dmul>
 801317c:	9b02      	ldr	r3, [sp, #8]
 801317e:	9d00      	ldr	r5, [sp, #0]
 8013180:	930f      	str	r3, [sp, #60]	; 0x3c
 8013182:	ec41 0b19 	vmov	d9, r0, r1
 8013186:	4649      	mov	r1, r9
 8013188:	4640      	mov	r0, r8
 801318a:	f7ed fd0d 	bl	8000ba8 <__aeabi_d2iz>
 801318e:	4606      	mov	r6, r0
 8013190:	f7ed f9f0 	bl	8000574 <__aeabi_i2d>
 8013194:	3630      	adds	r6, #48	; 0x30
 8013196:	4602      	mov	r2, r0
 8013198:	460b      	mov	r3, r1
 801319a:	4640      	mov	r0, r8
 801319c:	4649      	mov	r1, r9
 801319e:	f7ed f89b 	bl	80002d8 <__aeabi_dsub>
 80131a2:	f805 6b01 	strb.w	r6, [r5], #1
 80131a6:	9b02      	ldr	r3, [sp, #8]
 80131a8:	429d      	cmp	r5, r3
 80131aa:	4680      	mov	r8, r0
 80131ac:	4689      	mov	r9, r1
 80131ae:	f04f 0200 	mov.w	r2, #0
 80131b2:	d124      	bne.n	80131fe <_dtoa_r+0x62e>
 80131b4:	4b1b      	ldr	r3, [pc, #108]	; (8013224 <_dtoa_r+0x654>)
 80131b6:	ec51 0b19 	vmov	r0, r1, d9
 80131ba:	f7ed f88f 	bl	80002dc <__adddf3>
 80131be:	4602      	mov	r2, r0
 80131c0:	460b      	mov	r3, r1
 80131c2:	4640      	mov	r0, r8
 80131c4:	4649      	mov	r1, r9
 80131c6:	f7ed fccf 	bl	8000b68 <__aeabi_dcmpgt>
 80131ca:	2800      	cmp	r0, #0
 80131cc:	d173      	bne.n	80132b6 <_dtoa_r+0x6e6>
 80131ce:	ec53 2b19 	vmov	r2, r3, d9
 80131d2:	4914      	ldr	r1, [pc, #80]	; (8013224 <_dtoa_r+0x654>)
 80131d4:	2000      	movs	r0, #0
 80131d6:	f7ed f87f 	bl	80002d8 <__aeabi_dsub>
 80131da:	4602      	mov	r2, r0
 80131dc:	460b      	mov	r3, r1
 80131de:	4640      	mov	r0, r8
 80131e0:	4649      	mov	r1, r9
 80131e2:	f7ed fca3 	bl	8000b2c <__aeabi_dcmplt>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	f43f af2f 	beq.w	801304a <_dtoa_r+0x47a>
 80131ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80131ee:	1e6b      	subs	r3, r5, #1
 80131f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80131f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80131f6:	2b30      	cmp	r3, #48	; 0x30
 80131f8:	d0f8      	beq.n	80131ec <_dtoa_r+0x61c>
 80131fa:	46bb      	mov	fp, r7
 80131fc:	e04a      	b.n	8013294 <_dtoa_r+0x6c4>
 80131fe:	4b06      	ldr	r3, [pc, #24]	; (8013218 <_dtoa_r+0x648>)
 8013200:	f7ed fa22 	bl	8000648 <__aeabi_dmul>
 8013204:	4680      	mov	r8, r0
 8013206:	4689      	mov	r9, r1
 8013208:	e7bd      	b.n	8013186 <_dtoa_r+0x5b6>
 801320a:	bf00      	nop
 801320c:	08017280 	.word	0x08017280
 8013210:	08017258 	.word	0x08017258
 8013214:	3ff00000 	.word	0x3ff00000
 8013218:	40240000 	.word	0x40240000
 801321c:	401c0000 	.word	0x401c0000
 8013220:	40140000 	.word	0x40140000
 8013224:	3fe00000 	.word	0x3fe00000
 8013228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801322c:	9d00      	ldr	r5, [sp, #0]
 801322e:	4642      	mov	r2, r8
 8013230:	464b      	mov	r3, r9
 8013232:	4630      	mov	r0, r6
 8013234:	4639      	mov	r1, r7
 8013236:	f7ed fb31 	bl	800089c <__aeabi_ddiv>
 801323a:	f7ed fcb5 	bl	8000ba8 <__aeabi_d2iz>
 801323e:	9001      	str	r0, [sp, #4]
 8013240:	f7ed f998 	bl	8000574 <__aeabi_i2d>
 8013244:	4642      	mov	r2, r8
 8013246:	464b      	mov	r3, r9
 8013248:	f7ed f9fe 	bl	8000648 <__aeabi_dmul>
 801324c:	4602      	mov	r2, r0
 801324e:	460b      	mov	r3, r1
 8013250:	4630      	mov	r0, r6
 8013252:	4639      	mov	r1, r7
 8013254:	f7ed f840 	bl	80002d8 <__aeabi_dsub>
 8013258:	9e01      	ldr	r6, [sp, #4]
 801325a:	9f04      	ldr	r7, [sp, #16]
 801325c:	3630      	adds	r6, #48	; 0x30
 801325e:	f805 6b01 	strb.w	r6, [r5], #1
 8013262:	9e00      	ldr	r6, [sp, #0]
 8013264:	1bae      	subs	r6, r5, r6
 8013266:	42b7      	cmp	r7, r6
 8013268:	4602      	mov	r2, r0
 801326a:	460b      	mov	r3, r1
 801326c:	d134      	bne.n	80132d8 <_dtoa_r+0x708>
 801326e:	f7ed f835 	bl	80002dc <__adddf3>
 8013272:	4642      	mov	r2, r8
 8013274:	464b      	mov	r3, r9
 8013276:	4606      	mov	r6, r0
 8013278:	460f      	mov	r7, r1
 801327a:	f7ed fc75 	bl	8000b68 <__aeabi_dcmpgt>
 801327e:	b9c8      	cbnz	r0, 80132b4 <_dtoa_r+0x6e4>
 8013280:	4642      	mov	r2, r8
 8013282:	464b      	mov	r3, r9
 8013284:	4630      	mov	r0, r6
 8013286:	4639      	mov	r1, r7
 8013288:	f7ed fc46 	bl	8000b18 <__aeabi_dcmpeq>
 801328c:	b110      	cbz	r0, 8013294 <_dtoa_r+0x6c4>
 801328e:	9b01      	ldr	r3, [sp, #4]
 8013290:	07db      	lsls	r3, r3, #31
 8013292:	d40f      	bmi.n	80132b4 <_dtoa_r+0x6e4>
 8013294:	4651      	mov	r1, sl
 8013296:	4620      	mov	r0, r4
 8013298:	f000 fb18 	bl	80138cc <_Bfree>
 801329c:	2300      	movs	r3, #0
 801329e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132a0:	702b      	strb	r3, [r5, #0]
 80132a2:	f10b 0301 	add.w	r3, fp, #1
 80132a6:	6013      	str	r3, [r2, #0]
 80132a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	f43f ace2 	beq.w	8012c74 <_dtoa_r+0xa4>
 80132b0:	601d      	str	r5, [r3, #0]
 80132b2:	e4df      	b.n	8012c74 <_dtoa_r+0xa4>
 80132b4:	465f      	mov	r7, fp
 80132b6:	462b      	mov	r3, r5
 80132b8:	461d      	mov	r5, r3
 80132ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132be:	2a39      	cmp	r2, #57	; 0x39
 80132c0:	d106      	bne.n	80132d0 <_dtoa_r+0x700>
 80132c2:	9a00      	ldr	r2, [sp, #0]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d1f7      	bne.n	80132b8 <_dtoa_r+0x6e8>
 80132c8:	9900      	ldr	r1, [sp, #0]
 80132ca:	2230      	movs	r2, #48	; 0x30
 80132cc:	3701      	adds	r7, #1
 80132ce:	700a      	strb	r2, [r1, #0]
 80132d0:	781a      	ldrb	r2, [r3, #0]
 80132d2:	3201      	adds	r2, #1
 80132d4:	701a      	strb	r2, [r3, #0]
 80132d6:	e790      	b.n	80131fa <_dtoa_r+0x62a>
 80132d8:	4ba3      	ldr	r3, [pc, #652]	; (8013568 <_dtoa_r+0x998>)
 80132da:	2200      	movs	r2, #0
 80132dc:	f7ed f9b4 	bl	8000648 <__aeabi_dmul>
 80132e0:	2200      	movs	r2, #0
 80132e2:	2300      	movs	r3, #0
 80132e4:	4606      	mov	r6, r0
 80132e6:	460f      	mov	r7, r1
 80132e8:	f7ed fc16 	bl	8000b18 <__aeabi_dcmpeq>
 80132ec:	2800      	cmp	r0, #0
 80132ee:	d09e      	beq.n	801322e <_dtoa_r+0x65e>
 80132f0:	e7d0      	b.n	8013294 <_dtoa_r+0x6c4>
 80132f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132f4:	2a00      	cmp	r2, #0
 80132f6:	f000 80ca 	beq.w	801348e <_dtoa_r+0x8be>
 80132fa:	9a07      	ldr	r2, [sp, #28]
 80132fc:	2a01      	cmp	r2, #1
 80132fe:	f300 80ad 	bgt.w	801345c <_dtoa_r+0x88c>
 8013302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013304:	2a00      	cmp	r2, #0
 8013306:	f000 80a5 	beq.w	8013454 <_dtoa_r+0x884>
 801330a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801330e:	9e08      	ldr	r6, [sp, #32]
 8013310:	9d05      	ldr	r5, [sp, #20]
 8013312:	9a05      	ldr	r2, [sp, #20]
 8013314:	441a      	add	r2, r3
 8013316:	9205      	str	r2, [sp, #20]
 8013318:	9a06      	ldr	r2, [sp, #24]
 801331a:	2101      	movs	r1, #1
 801331c:	441a      	add	r2, r3
 801331e:	4620      	mov	r0, r4
 8013320:	9206      	str	r2, [sp, #24]
 8013322:	f000 fbd3 	bl	8013acc <__i2b>
 8013326:	4607      	mov	r7, r0
 8013328:	b165      	cbz	r5, 8013344 <_dtoa_r+0x774>
 801332a:	9b06      	ldr	r3, [sp, #24]
 801332c:	2b00      	cmp	r3, #0
 801332e:	dd09      	ble.n	8013344 <_dtoa_r+0x774>
 8013330:	42ab      	cmp	r3, r5
 8013332:	9a05      	ldr	r2, [sp, #20]
 8013334:	bfa8      	it	ge
 8013336:	462b      	movge	r3, r5
 8013338:	1ad2      	subs	r2, r2, r3
 801333a:	9205      	str	r2, [sp, #20]
 801333c:	9a06      	ldr	r2, [sp, #24]
 801333e:	1aed      	subs	r5, r5, r3
 8013340:	1ad3      	subs	r3, r2, r3
 8013342:	9306      	str	r3, [sp, #24]
 8013344:	9b08      	ldr	r3, [sp, #32]
 8013346:	b1f3      	cbz	r3, 8013386 <_dtoa_r+0x7b6>
 8013348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801334a:	2b00      	cmp	r3, #0
 801334c:	f000 80a3 	beq.w	8013496 <_dtoa_r+0x8c6>
 8013350:	2e00      	cmp	r6, #0
 8013352:	dd10      	ble.n	8013376 <_dtoa_r+0x7a6>
 8013354:	4639      	mov	r1, r7
 8013356:	4632      	mov	r2, r6
 8013358:	4620      	mov	r0, r4
 801335a:	f000 fc77 	bl	8013c4c <__pow5mult>
 801335e:	4652      	mov	r2, sl
 8013360:	4601      	mov	r1, r0
 8013362:	4607      	mov	r7, r0
 8013364:	4620      	mov	r0, r4
 8013366:	f000 fbc7 	bl	8013af8 <__multiply>
 801336a:	4651      	mov	r1, sl
 801336c:	4680      	mov	r8, r0
 801336e:	4620      	mov	r0, r4
 8013370:	f000 faac 	bl	80138cc <_Bfree>
 8013374:	46c2      	mov	sl, r8
 8013376:	9b08      	ldr	r3, [sp, #32]
 8013378:	1b9a      	subs	r2, r3, r6
 801337a:	d004      	beq.n	8013386 <_dtoa_r+0x7b6>
 801337c:	4651      	mov	r1, sl
 801337e:	4620      	mov	r0, r4
 8013380:	f000 fc64 	bl	8013c4c <__pow5mult>
 8013384:	4682      	mov	sl, r0
 8013386:	2101      	movs	r1, #1
 8013388:	4620      	mov	r0, r4
 801338a:	f000 fb9f 	bl	8013acc <__i2b>
 801338e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013390:	2b00      	cmp	r3, #0
 8013392:	4606      	mov	r6, r0
 8013394:	f340 8081 	ble.w	801349a <_dtoa_r+0x8ca>
 8013398:	461a      	mov	r2, r3
 801339a:	4601      	mov	r1, r0
 801339c:	4620      	mov	r0, r4
 801339e:	f000 fc55 	bl	8013c4c <__pow5mult>
 80133a2:	9b07      	ldr	r3, [sp, #28]
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	4606      	mov	r6, r0
 80133a8:	dd7a      	ble.n	80134a0 <_dtoa_r+0x8d0>
 80133aa:	f04f 0800 	mov.w	r8, #0
 80133ae:	6933      	ldr	r3, [r6, #16]
 80133b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80133b4:	6918      	ldr	r0, [r3, #16]
 80133b6:	f000 fb3b 	bl	8013a30 <__hi0bits>
 80133ba:	f1c0 0020 	rsb	r0, r0, #32
 80133be:	9b06      	ldr	r3, [sp, #24]
 80133c0:	4418      	add	r0, r3
 80133c2:	f010 001f 	ands.w	r0, r0, #31
 80133c6:	f000 8094 	beq.w	80134f2 <_dtoa_r+0x922>
 80133ca:	f1c0 0320 	rsb	r3, r0, #32
 80133ce:	2b04      	cmp	r3, #4
 80133d0:	f340 8085 	ble.w	80134de <_dtoa_r+0x90e>
 80133d4:	9b05      	ldr	r3, [sp, #20]
 80133d6:	f1c0 001c 	rsb	r0, r0, #28
 80133da:	4403      	add	r3, r0
 80133dc:	9305      	str	r3, [sp, #20]
 80133de:	9b06      	ldr	r3, [sp, #24]
 80133e0:	4403      	add	r3, r0
 80133e2:	4405      	add	r5, r0
 80133e4:	9306      	str	r3, [sp, #24]
 80133e6:	9b05      	ldr	r3, [sp, #20]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	dd05      	ble.n	80133f8 <_dtoa_r+0x828>
 80133ec:	4651      	mov	r1, sl
 80133ee:	461a      	mov	r2, r3
 80133f0:	4620      	mov	r0, r4
 80133f2:	f000 fc85 	bl	8013d00 <__lshift>
 80133f6:	4682      	mov	sl, r0
 80133f8:	9b06      	ldr	r3, [sp, #24]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	dd05      	ble.n	801340a <_dtoa_r+0x83a>
 80133fe:	4631      	mov	r1, r6
 8013400:	461a      	mov	r2, r3
 8013402:	4620      	mov	r0, r4
 8013404:	f000 fc7c 	bl	8013d00 <__lshift>
 8013408:	4606      	mov	r6, r0
 801340a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801340c:	2b00      	cmp	r3, #0
 801340e:	d072      	beq.n	80134f6 <_dtoa_r+0x926>
 8013410:	4631      	mov	r1, r6
 8013412:	4650      	mov	r0, sl
 8013414:	f000 fce0 	bl	8013dd8 <__mcmp>
 8013418:	2800      	cmp	r0, #0
 801341a:	da6c      	bge.n	80134f6 <_dtoa_r+0x926>
 801341c:	2300      	movs	r3, #0
 801341e:	4651      	mov	r1, sl
 8013420:	220a      	movs	r2, #10
 8013422:	4620      	mov	r0, r4
 8013424:	f000 fa74 	bl	8013910 <__multadd>
 8013428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801342a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801342e:	4682      	mov	sl, r0
 8013430:	2b00      	cmp	r3, #0
 8013432:	f000 81b0 	beq.w	8013796 <_dtoa_r+0xbc6>
 8013436:	2300      	movs	r3, #0
 8013438:	4639      	mov	r1, r7
 801343a:	220a      	movs	r2, #10
 801343c:	4620      	mov	r0, r4
 801343e:	f000 fa67 	bl	8013910 <__multadd>
 8013442:	9b01      	ldr	r3, [sp, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	4607      	mov	r7, r0
 8013448:	f300 8096 	bgt.w	8013578 <_dtoa_r+0x9a8>
 801344c:	9b07      	ldr	r3, [sp, #28]
 801344e:	2b02      	cmp	r3, #2
 8013450:	dc59      	bgt.n	8013506 <_dtoa_r+0x936>
 8013452:	e091      	b.n	8013578 <_dtoa_r+0x9a8>
 8013454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801345a:	e758      	b.n	801330e <_dtoa_r+0x73e>
 801345c:	9b04      	ldr	r3, [sp, #16]
 801345e:	1e5e      	subs	r6, r3, #1
 8013460:	9b08      	ldr	r3, [sp, #32]
 8013462:	42b3      	cmp	r3, r6
 8013464:	bfbf      	itttt	lt
 8013466:	9b08      	ldrlt	r3, [sp, #32]
 8013468:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801346a:	9608      	strlt	r6, [sp, #32]
 801346c:	1af3      	sublt	r3, r6, r3
 801346e:	bfb4      	ite	lt
 8013470:	18d2      	addlt	r2, r2, r3
 8013472:	1b9e      	subge	r6, r3, r6
 8013474:	9b04      	ldr	r3, [sp, #16]
 8013476:	bfbc      	itt	lt
 8013478:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801347a:	2600      	movlt	r6, #0
 801347c:	2b00      	cmp	r3, #0
 801347e:	bfb7      	itett	lt
 8013480:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013484:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013488:	1a9d      	sublt	r5, r3, r2
 801348a:	2300      	movlt	r3, #0
 801348c:	e741      	b.n	8013312 <_dtoa_r+0x742>
 801348e:	9e08      	ldr	r6, [sp, #32]
 8013490:	9d05      	ldr	r5, [sp, #20]
 8013492:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013494:	e748      	b.n	8013328 <_dtoa_r+0x758>
 8013496:	9a08      	ldr	r2, [sp, #32]
 8013498:	e770      	b.n	801337c <_dtoa_r+0x7ac>
 801349a:	9b07      	ldr	r3, [sp, #28]
 801349c:	2b01      	cmp	r3, #1
 801349e:	dc19      	bgt.n	80134d4 <_dtoa_r+0x904>
 80134a0:	9b02      	ldr	r3, [sp, #8]
 80134a2:	b9bb      	cbnz	r3, 80134d4 <_dtoa_r+0x904>
 80134a4:	9b03      	ldr	r3, [sp, #12]
 80134a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80134aa:	b99b      	cbnz	r3, 80134d4 <_dtoa_r+0x904>
 80134ac:	9b03      	ldr	r3, [sp, #12]
 80134ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80134b2:	0d1b      	lsrs	r3, r3, #20
 80134b4:	051b      	lsls	r3, r3, #20
 80134b6:	b183      	cbz	r3, 80134da <_dtoa_r+0x90a>
 80134b8:	9b05      	ldr	r3, [sp, #20]
 80134ba:	3301      	adds	r3, #1
 80134bc:	9305      	str	r3, [sp, #20]
 80134be:	9b06      	ldr	r3, [sp, #24]
 80134c0:	3301      	adds	r3, #1
 80134c2:	9306      	str	r3, [sp, #24]
 80134c4:	f04f 0801 	mov.w	r8, #1
 80134c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	f47f af6f 	bne.w	80133ae <_dtoa_r+0x7de>
 80134d0:	2001      	movs	r0, #1
 80134d2:	e774      	b.n	80133be <_dtoa_r+0x7ee>
 80134d4:	f04f 0800 	mov.w	r8, #0
 80134d8:	e7f6      	b.n	80134c8 <_dtoa_r+0x8f8>
 80134da:	4698      	mov	r8, r3
 80134dc:	e7f4      	b.n	80134c8 <_dtoa_r+0x8f8>
 80134de:	d082      	beq.n	80133e6 <_dtoa_r+0x816>
 80134e0:	9a05      	ldr	r2, [sp, #20]
 80134e2:	331c      	adds	r3, #28
 80134e4:	441a      	add	r2, r3
 80134e6:	9205      	str	r2, [sp, #20]
 80134e8:	9a06      	ldr	r2, [sp, #24]
 80134ea:	441a      	add	r2, r3
 80134ec:	441d      	add	r5, r3
 80134ee:	9206      	str	r2, [sp, #24]
 80134f0:	e779      	b.n	80133e6 <_dtoa_r+0x816>
 80134f2:	4603      	mov	r3, r0
 80134f4:	e7f4      	b.n	80134e0 <_dtoa_r+0x910>
 80134f6:	9b04      	ldr	r3, [sp, #16]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	dc37      	bgt.n	801356c <_dtoa_r+0x99c>
 80134fc:	9b07      	ldr	r3, [sp, #28]
 80134fe:	2b02      	cmp	r3, #2
 8013500:	dd34      	ble.n	801356c <_dtoa_r+0x99c>
 8013502:	9b04      	ldr	r3, [sp, #16]
 8013504:	9301      	str	r3, [sp, #4]
 8013506:	9b01      	ldr	r3, [sp, #4]
 8013508:	b963      	cbnz	r3, 8013524 <_dtoa_r+0x954>
 801350a:	4631      	mov	r1, r6
 801350c:	2205      	movs	r2, #5
 801350e:	4620      	mov	r0, r4
 8013510:	f000 f9fe 	bl	8013910 <__multadd>
 8013514:	4601      	mov	r1, r0
 8013516:	4606      	mov	r6, r0
 8013518:	4650      	mov	r0, sl
 801351a:	f000 fc5d 	bl	8013dd8 <__mcmp>
 801351e:	2800      	cmp	r0, #0
 8013520:	f73f adbb 	bgt.w	801309a <_dtoa_r+0x4ca>
 8013524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013526:	9d00      	ldr	r5, [sp, #0]
 8013528:	ea6f 0b03 	mvn.w	fp, r3
 801352c:	f04f 0800 	mov.w	r8, #0
 8013530:	4631      	mov	r1, r6
 8013532:	4620      	mov	r0, r4
 8013534:	f000 f9ca 	bl	80138cc <_Bfree>
 8013538:	2f00      	cmp	r7, #0
 801353a:	f43f aeab 	beq.w	8013294 <_dtoa_r+0x6c4>
 801353e:	f1b8 0f00 	cmp.w	r8, #0
 8013542:	d005      	beq.n	8013550 <_dtoa_r+0x980>
 8013544:	45b8      	cmp	r8, r7
 8013546:	d003      	beq.n	8013550 <_dtoa_r+0x980>
 8013548:	4641      	mov	r1, r8
 801354a:	4620      	mov	r0, r4
 801354c:	f000 f9be 	bl	80138cc <_Bfree>
 8013550:	4639      	mov	r1, r7
 8013552:	4620      	mov	r0, r4
 8013554:	f000 f9ba 	bl	80138cc <_Bfree>
 8013558:	e69c      	b.n	8013294 <_dtoa_r+0x6c4>
 801355a:	2600      	movs	r6, #0
 801355c:	4637      	mov	r7, r6
 801355e:	e7e1      	b.n	8013524 <_dtoa_r+0x954>
 8013560:	46bb      	mov	fp, r7
 8013562:	4637      	mov	r7, r6
 8013564:	e599      	b.n	801309a <_dtoa_r+0x4ca>
 8013566:	bf00      	nop
 8013568:	40240000 	.word	0x40240000
 801356c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801356e:	2b00      	cmp	r3, #0
 8013570:	f000 80c8 	beq.w	8013704 <_dtoa_r+0xb34>
 8013574:	9b04      	ldr	r3, [sp, #16]
 8013576:	9301      	str	r3, [sp, #4]
 8013578:	2d00      	cmp	r5, #0
 801357a:	dd05      	ble.n	8013588 <_dtoa_r+0x9b8>
 801357c:	4639      	mov	r1, r7
 801357e:	462a      	mov	r2, r5
 8013580:	4620      	mov	r0, r4
 8013582:	f000 fbbd 	bl	8013d00 <__lshift>
 8013586:	4607      	mov	r7, r0
 8013588:	f1b8 0f00 	cmp.w	r8, #0
 801358c:	d05b      	beq.n	8013646 <_dtoa_r+0xa76>
 801358e:	6879      	ldr	r1, [r7, #4]
 8013590:	4620      	mov	r0, r4
 8013592:	f000 f95b 	bl	801384c <_Balloc>
 8013596:	4605      	mov	r5, r0
 8013598:	b928      	cbnz	r0, 80135a6 <_dtoa_r+0x9d6>
 801359a:	4b83      	ldr	r3, [pc, #524]	; (80137a8 <_dtoa_r+0xbd8>)
 801359c:	4602      	mov	r2, r0
 801359e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80135a2:	f7ff bb2e 	b.w	8012c02 <_dtoa_r+0x32>
 80135a6:	693a      	ldr	r2, [r7, #16]
 80135a8:	3202      	adds	r2, #2
 80135aa:	0092      	lsls	r2, r2, #2
 80135ac:	f107 010c 	add.w	r1, r7, #12
 80135b0:	300c      	adds	r0, #12
 80135b2:	f7ff fa70 	bl	8012a96 <memcpy>
 80135b6:	2201      	movs	r2, #1
 80135b8:	4629      	mov	r1, r5
 80135ba:	4620      	mov	r0, r4
 80135bc:	f000 fba0 	bl	8013d00 <__lshift>
 80135c0:	9b00      	ldr	r3, [sp, #0]
 80135c2:	3301      	adds	r3, #1
 80135c4:	9304      	str	r3, [sp, #16]
 80135c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135ca:	4413      	add	r3, r2
 80135cc:	9308      	str	r3, [sp, #32]
 80135ce:	9b02      	ldr	r3, [sp, #8]
 80135d0:	f003 0301 	and.w	r3, r3, #1
 80135d4:	46b8      	mov	r8, r7
 80135d6:	9306      	str	r3, [sp, #24]
 80135d8:	4607      	mov	r7, r0
 80135da:	9b04      	ldr	r3, [sp, #16]
 80135dc:	4631      	mov	r1, r6
 80135de:	3b01      	subs	r3, #1
 80135e0:	4650      	mov	r0, sl
 80135e2:	9301      	str	r3, [sp, #4]
 80135e4:	f7ff fa6c 	bl	8012ac0 <quorem>
 80135e8:	4641      	mov	r1, r8
 80135ea:	9002      	str	r0, [sp, #8]
 80135ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80135f0:	4650      	mov	r0, sl
 80135f2:	f000 fbf1 	bl	8013dd8 <__mcmp>
 80135f6:	463a      	mov	r2, r7
 80135f8:	9005      	str	r0, [sp, #20]
 80135fa:	4631      	mov	r1, r6
 80135fc:	4620      	mov	r0, r4
 80135fe:	f000 fc07 	bl	8013e10 <__mdiff>
 8013602:	68c2      	ldr	r2, [r0, #12]
 8013604:	4605      	mov	r5, r0
 8013606:	bb02      	cbnz	r2, 801364a <_dtoa_r+0xa7a>
 8013608:	4601      	mov	r1, r0
 801360a:	4650      	mov	r0, sl
 801360c:	f000 fbe4 	bl	8013dd8 <__mcmp>
 8013610:	4602      	mov	r2, r0
 8013612:	4629      	mov	r1, r5
 8013614:	4620      	mov	r0, r4
 8013616:	9209      	str	r2, [sp, #36]	; 0x24
 8013618:	f000 f958 	bl	80138cc <_Bfree>
 801361c:	9b07      	ldr	r3, [sp, #28]
 801361e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013620:	9d04      	ldr	r5, [sp, #16]
 8013622:	ea43 0102 	orr.w	r1, r3, r2
 8013626:	9b06      	ldr	r3, [sp, #24]
 8013628:	4319      	orrs	r1, r3
 801362a:	d110      	bne.n	801364e <_dtoa_r+0xa7e>
 801362c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013630:	d029      	beq.n	8013686 <_dtoa_r+0xab6>
 8013632:	9b05      	ldr	r3, [sp, #20]
 8013634:	2b00      	cmp	r3, #0
 8013636:	dd02      	ble.n	801363e <_dtoa_r+0xa6e>
 8013638:	9b02      	ldr	r3, [sp, #8]
 801363a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801363e:	9b01      	ldr	r3, [sp, #4]
 8013640:	f883 9000 	strb.w	r9, [r3]
 8013644:	e774      	b.n	8013530 <_dtoa_r+0x960>
 8013646:	4638      	mov	r0, r7
 8013648:	e7ba      	b.n	80135c0 <_dtoa_r+0x9f0>
 801364a:	2201      	movs	r2, #1
 801364c:	e7e1      	b.n	8013612 <_dtoa_r+0xa42>
 801364e:	9b05      	ldr	r3, [sp, #20]
 8013650:	2b00      	cmp	r3, #0
 8013652:	db04      	blt.n	801365e <_dtoa_r+0xa8e>
 8013654:	9907      	ldr	r1, [sp, #28]
 8013656:	430b      	orrs	r3, r1
 8013658:	9906      	ldr	r1, [sp, #24]
 801365a:	430b      	orrs	r3, r1
 801365c:	d120      	bne.n	80136a0 <_dtoa_r+0xad0>
 801365e:	2a00      	cmp	r2, #0
 8013660:	dded      	ble.n	801363e <_dtoa_r+0xa6e>
 8013662:	4651      	mov	r1, sl
 8013664:	2201      	movs	r2, #1
 8013666:	4620      	mov	r0, r4
 8013668:	f000 fb4a 	bl	8013d00 <__lshift>
 801366c:	4631      	mov	r1, r6
 801366e:	4682      	mov	sl, r0
 8013670:	f000 fbb2 	bl	8013dd8 <__mcmp>
 8013674:	2800      	cmp	r0, #0
 8013676:	dc03      	bgt.n	8013680 <_dtoa_r+0xab0>
 8013678:	d1e1      	bne.n	801363e <_dtoa_r+0xa6e>
 801367a:	f019 0f01 	tst.w	r9, #1
 801367e:	d0de      	beq.n	801363e <_dtoa_r+0xa6e>
 8013680:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013684:	d1d8      	bne.n	8013638 <_dtoa_r+0xa68>
 8013686:	9a01      	ldr	r2, [sp, #4]
 8013688:	2339      	movs	r3, #57	; 0x39
 801368a:	7013      	strb	r3, [r2, #0]
 801368c:	462b      	mov	r3, r5
 801368e:	461d      	mov	r5, r3
 8013690:	3b01      	subs	r3, #1
 8013692:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013696:	2a39      	cmp	r2, #57	; 0x39
 8013698:	d06c      	beq.n	8013774 <_dtoa_r+0xba4>
 801369a:	3201      	adds	r2, #1
 801369c:	701a      	strb	r2, [r3, #0]
 801369e:	e747      	b.n	8013530 <_dtoa_r+0x960>
 80136a0:	2a00      	cmp	r2, #0
 80136a2:	dd07      	ble.n	80136b4 <_dtoa_r+0xae4>
 80136a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80136a8:	d0ed      	beq.n	8013686 <_dtoa_r+0xab6>
 80136aa:	9a01      	ldr	r2, [sp, #4]
 80136ac:	f109 0301 	add.w	r3, r9, #1
 80136b0:	7013      	strb	r3, [r2, #0]
 80136b2:	e73d      	b.n	8013530 <_dtoa_r+0x960>
 80136b4:	9b04      	ldr	r3, [sp, #16]
 80136b6:	9a08      	ldr	r2, [sp, #32]
 80136b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80136bc:	4293      	cmp	r3, r2
 80136be:	d043      	beq.n	8013748 <_dtoa_r+0xb78>
 80136c0:	4651      	mov	r1, sl
 80136c2:	2300      	movs	r3, #0
 80136c4:	220a      	movs	r2, #10
 80136c6:	4620      	mov	r0, r4
 80136c8:	f000 f922 	bl	8013910 <__multadd>
 80136cc:	45b8      	cmp	r8, r7
 80136ce:	4682      	mov	sl, r0
 80136d0:	f04f 0300 	mov.w	r3, #0
 80136d4:	f04f 020a 	mov.w	r2, #10
 80136d8:	4641      	mov	r1, r8
 80136da:	4620      	mov	r0, r4
 80136dc:	d107      	bne.n	80136ee <_dtoa_r+0xb1e>
 80136de:	f000 f917 	bl	8013910 <__multadd>
 80136e2:	4680      	mov	r8, r0
 80136e4:	4607      	mov	r7, r0
 80136e6:	9b04      	ldr	r3, [sp, #16]
 80136e8:	3301      	adds	r3, #1
 80136ea:	9304      	str	r3, [sp, #16]
 80136ec:	e775      	b.n	80135da <_dtoa_r+0xa0a>
 80136ee:	f000 f90f 	bl	8013910 <__multadd>
 80136f2:	4639      	mov	r1, r7
 80136f4:	4680      	mov	r8, r0
 80136f6:	2300      	movs	r3, #0
 80136f8:	220a      	movs	r2, #10
 80136fa:	4620      	mov	r0, r4
 80136fc:	f000 f908 	bl	8013910 <__multadd>
 8013700:	4607      	mov	r7, r0
 8013702:	e7f0      	b.n	80136e6 <_dtoa_r+0xb16>
 8013704:	9b04      	ldr	r3, [sp, #16]
 8013706:	9301      	str	r3, [sp, #4]
 8013708:	9d00      	ldr	r5, [sp, #0]
 801370a:	4631      	mov	r1, r6
 801370c:	4650      	mov	r0, sl
 801370e:	f7ff f9d7 	bl	8012ac0 <quorem>
 8013712:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013716:	9b00      	ldr	r3, [sp, #0]
 8013718:	f805 9b01 	strb.w	r9, [r5], #1
 801371c:	1aea      	subs	r2, r5, r3
 801371e:	9b01      	ldr	r3, [sp, #4]
 8013720:	4293      	cmp	r3, r2
 8013722:	dd07      	ble.n	8013734 <_dtoa_r+0xb64>
 8013724:	4651      	mov	r1, sl
 8013726:	2300      	movs	r3, #0
 8013728:	220a      	movs	r2, #10
 801372a:	4620      	mov	r0, r4
 801372c:	f000 f8f0 	bl	8013910 <__multadd>
 8013730:	4682      	mov	sl, r0
 8013732:	e7ea      	b.n	801370a <_dtoa_r+0xb3a>
 8013734:	9b01      	ldr	r3, [sp, #4]
 8013736:	2b00      	cmp	r3, #0
 8013738:	bfc8      	it	gt
 801373a:	461d      	movgt	r5, r3
 801373c:	9b00      	ldr	r3, [sp, #0]
 801373e:	bfd8      	it	le
 8013740:	2501      	movle	r5, #1
 8013742:	441d      	add	r5, r3
 8013744:	f04f 0800 	mov.w	r8, #0
 8013748:	4651      	mov	r1, sl
 801374a:	2201      	movs	r2, #1
 801374c:	4620      	mov	r0, r4
 801374e:	f000 fad7 	bl	8013d00 <__lshift>
 8013752:	4631      	mov	r1, r6
 8013754:	4682      	mov	sl, r0
 8013756:	f000 fb3f 	bl	8013dd8 <__mcmp>
 801375a:	2800      	cmp	r0, #0
 801375c:	dc96      	bgt.n	801368c <_dtoa_r+0xabc>
 801375e:	d102      	bne.n	8013766 <_dtoa_r+0xb96>
 8013760:	f019 0f01 	tst.w	r9, #1
 8013764:	d192      	bne.n	801368c <_dtoa_r+0xabc>
 8013766:	462b      	mov	r3, r5
 8013768:	461d      	mov	r5, r3
 801376a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801376e:	2a30      	cmp	r2, #48	; 0x30
 8013770:	d0fa      	beq.n	8013768 <_dtoa_r+0xb98>
 8013772:	e6dd      	b.n	8013530 <_dtoa_r+0x960>
 8013774:	9a00      	ldr	r2, [sp, #0]
 8013776:	429a      	cmp	r2, r3
 8013778:	d189      	bne.n	801368e <_dtoa_r+0xabe>
 801377a:	f10b 0b01 	add.w	fp, fp, #1
 801377e:	2331      	movs	r3, #49	; 0x31
 8013780:	e796      	b.n	80136b0 <_dtoa_r+0xae0>
 8013782:	4b0a      	ldr	r3, [pc, #40]	; (80137ac <_dtoa_r+0xbdc>)
 8013784:	f7ff ba99 	b.w	8012cba <_dtoa_r+0xea>
 8013788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801378a:	2b00      	cmp	r3, #0
 801378c:	f47f aa6d 	bne.w	8012c6a <_dtoa_r+0x9a>
 8013790:	4b07      	ldr	r3, [pc, #28]	; (80137b0 <_dtoa_r+0xbe0>)
 8013792:	f7ff ba92 	b.w	8012cba <_dtoa_r+0xea>
 8013796:	9b01      	ldr	r3, [sp, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	dcb5      	bgt.n	8013708 <_dtoa_r+0xb38>
 801379c:	9b07      	ldr	r3, [sp, #28]
 801379e:	2b02      	cmp	r3, #2
 80137a0:	f73f aeb1 	bgt.w	8013506 <_dtoa_r+0x936>
 80137a4:	e7b0      	b.n	8013708 <_dtoa_r+0xb38>
 80137a6:	bf00      	nop
 80137a8:	080171e9 	.word	0x080171e9
 80137ac:	08017144 	.word	0x08017144
 80137b0:	0801716d 	.word	0x0801716d

080137b4 <_free_r>:
 80137b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137b6:	2900      	cmp	r1, #0
 80137b8:	d044      	beq.n	8013844 <_free_r+0x90>
 80137ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137be:	9001      	str	r0, [sp, #4]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f1a1 0404 	sub.w	r4, r1, #4
 80137c6:	bfb8      	it	lt
 80137c8:	18e4      	addlt	r4, r4, r3
 80137ca:	f7fe f89b 	bl	8011904 <__malloc_lock>
 80137ce:	4a1e      	ldr	r2, [pc, #120]	; (8013848 <_free_r+0x94>)
 80137d0:	9801      	ldr	r0, [sp, #4]
 80137d2:	6813      	ldr	r3, [r2, #0]
 80137d4:	b933      	cbnz	r3, 80137e4 <_free_r+0x30>
 80137d6:	6063      	str	r3, [r4, #4]
 80137d8:	6014      	str	r4, [r2, #0]
 80137da:	b003      	add	sp, #12
 80137dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137e0:	f7fe b896 	b.w	8011910 <__malloc_unlock>
 80137e4:	42a3      	cmp	r3, r4
 80137e6:	d908      	bls.n	80137fa <_free_r+0x46>
 80137e8:	6825      	ldr	r5, [r4, #0]
 80137ea:	1961      	adds	r1, r4, r5
 80137ec:	428b      	cmp	r3, r1
 80137ee:	bf01      	itttt	eq
 80137f0:	6819      	ldreq	r1, [r3, #0]
 80137f2:	685b      	ldreq	r3, [r3, #4]
 80137f4:	1949      	addeq	r1, r1, r5
 80137f6:	6021      	streq	r1, [r4, #0]
 80137f8:	e7ed      	b.n	80137d6 <_free_r+0x22>
 80137fa:	461a      	mov	r2, r3
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	b10b      	cbz	r3, 8013804 <_free_r+0x50>
 8013800:	42a3      	cmp	r3, r4
 8013802:	d9fa      	bls.n	80137fa <_free_r+0x46>
 8013804:	6811      	ldr	r1, [r2, #0]
 8013806:	1855      	adds	r5, r2, r1
 8013808:	42a5      	cmp	r5, r4
 801380a:	d10b      	bne.n	8013824 <_free_r+0x70>
 801380c:	6824      	ldr	r4, [r4, #0]
 801380e:	4421      	add	r1, r4
 8013810:	1854      	adds	r4, r2, r1
 8013812:	42a3      	cmp	r3, r4
 8013814:	6011      	str	r1, [r2, #0]
 8013816:	d1e0      	bne.n	80137da <_free_r+0x26>
 8013818:	681c      	ldr	r4, [r3, #0]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	6053      	str	r3, [r2, #4]
 801381e:	440c      	add	r4, r1
 8013820:	6014      	str	r4, [r2, #0]
 8013822:	e7da      	b.n	80137da <_free_r+0x26>
 8013824:	d902      	bls.n	801382c <_free_r+0x78>
 8013826:	230c      	movs	r3, #12
 8013828:	6003      	str	r3, [r0, #0]
 801382a:	e7d6      	b.n	80137da <_free_r+0x26>
 801382c:	6825      	ldr	r5, [r4, #0]
 801382e:	1961      	adds	r1, r4, r5
 8013830:	428b      	cmp	r3, r1
 8013832:	bf04      	itt	eq
 8013834:	6819      	ldreq	r1, [r3, #0]
 8013836:	685b      	ldreq	r3, [r3, #4]
 8013838:	6063      	str	r3, [r4, #4]
 801383a:	bf04      	itt	eq
 801383c:	1949      	addeq	r1, r1, r5
 801383e:	6021      	streq	r1, [r4, #0]
 8013840:	6054      	str	r4, [r2, #4]
 8013842:	e7ca      	b.n	80137da <_free_r+0x26>
 8013844:	b003      	add	sp, #12
 8013846:	bd30      	pop	{r4, r5, pc}
 8013848:	20000914 	.word	0x20000914

0801384c <_Balloc>:
 801384c:	b570      	push	{r4, r5, r6, lr}
 801384e:	69c6      	ldr	r6, [r0, #28]
 8013850:	4604      	mov	r4, r0
 8013852:	460d      	mov	r5, r1
 8013854:	b976      	cbnz	r6, 8013874 <_Balloc+0x28>
 8013856:	2010      	movs	r0, #16
 8013858:	f7fd ffa4 	bl	80117a4 <malloc>
 801385c:	4602      	mov	r2, r0
 801385e:	61e0      	str	r0, [r4, #28]
 8013860:	b920      	cbnz	r0, 801386c <_Balloc+0x20>
 8013862:	4b18      	ldr	r3, [pc, #96]	; (80138c4 <_Balloc+0x78>)
 8013864:	4818      	ldr	r0, [pc, #96]	; (80138c8 <_Balloc+0x7c>)
 8013866:	216b      	movs	r1, #107	; 0x6b
 8013868:	f7fd ff6c 	bl	8011744 <__assert_func>
 801386c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013870:	6006      	str	r6, [r0, #0]
 8013872:	60c6      	str	r6, [r0, #12]
 8013874:	69e6      	ldr	r6, [r4, #28]
 8013876:	68f3      	ldr	r3, [r6, #12]
 8013878:	b183      	cbz	r3, 801389c <_Balloc+0x50>
 801387a:	69e3      	ldr	r3, [r4, #28]
 801387c:	68db      	ldr	r3, [r3, #12]
 801387e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013882:	b9b8      	cbnz	r0, 80138b4 <_Balloc+0x68>
 8013884:	2101      	movs	r1, #1
 8013886:	fa01 f605 	lsl.w	r6, r1, r5
 801388a:	1d72      	adds	r2, r6, #5
 801388c:	0092      	lsls	r2, r2, #2
 801388e:	4620      	mov	r0, r4
 8013890:	f001 ff1a 	bl	80156c8 <_calloc_r>
 8013894:	b160      	cbz	r0, 80138b0 <_Balloc+0x64>
 8013896:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801389a:	e00e      	b.n	80138ba <_Balloc+0x6e>
 801389c:	2221      	movs	r2, #33	; 0x21
 801389e:	2104      	movs	r1, #4
 80138a0:	4620      	mov	r0, r4
 80138a2:	f001 ff11 	bl	80156c8 <_calloc_r>
 80138a6:	69e3      	ldr	r3, [r4, #28]
 80138a8:	60f0      	str	r0, [r6, #12]
 80138aa:	68db      	ldr	r3, [r3, #12]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d1e4      	bne.n	801387a <_Balloc+0x2e>
 80138b0:	2000      	movs	r0, #0
 80138b2:	bd70      	pop	{r4, r5, r6, pc}
 80138b4:	6802      	ldr	r2, [r0, #0]
 80138b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80138ba:	2300      	movs	r3, #0
 80138bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80138c0:	e7f7      	b.n	80138b2 <_Balloc+0x66>
 80138c2:	bf00      	nop
 80138c4:	0801717a 	.word	0x0801717a
 80138c8:	080171fa 	.word	0x080171fa

080138cc <_Bfree>:
 80138cc:	b570      	push	{r4, r5, r6, lr}
 80138ce:	69c6      	ldr	r6, [r0, #28]
 80138d0:	4605      	mov	r5, r0
 80138d2:	460c      	mov	r4, r1
 80138d4:	b976      	cbnz	r6, 80138f4 <_Bfree+0x28>
 80138d6:	2010      	movs	r0, #16
 80138d8:	f7fd ff64 	bl	80117a4 <malloc>
 80138dc:	4602      	mov	r2, r0
 80138de:	61e8      	str	r0, [r5, #28]
 80138e0:	b920      	cbnz	r0, 80138ec <_Bfree+0x20>
 80138e2:	4b09      	ldr	r3, [pc, #36]	; (8013908 <_Bfree+0x3c>)
 80138e4:	4809      	ldr	r0, [pc, #36]	; (801390c <_Bfree+0x40>)
 80138e6:	218f      	movs	r1, #143	; 0x8f
 80138e8:	f7fd ff2c 	bl	8011744 <__assert_func>
 80138ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138f0:	6006      	str	r6, [r0, #0]
 80138f2:	60c6      	str	r6, [r0, #12]
 80138f4:	b13c      	cbz	r4, 8013906 <_Bfree+0x3a>
 80138f6:	69eb      	ldr	r3, [r5, #28]
 80138f8:	6862      	ldr	r2, [r4, #4]
 80138fa:	68db      	ldr	r3, [r3, #12]
 80138fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013900:	6021      	str	r1, [r4, #0]
 8013902:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013906:	bd70      	pop	{r4, r5, r6, pc}
 8013908:	0801717a 	.word	0x0801717a
 801390c:	080171fa 	.word	0x080171fa

08013910 <__multadd>:
 8013910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013914:	690d      	ldr	r5, [r1, #16]
 8013916:	4607      	mov	r7, r0
 8013918:	460c      	mov	r4, r1
 801391a:	461e      	mov	r6, r3
 801391c:	f101 0c14 	add.w	ip, r1, #20
 8013920:	2000      	movs	r0, #0
 8013922:	f8dc 3000 	ldr.w	r3, [ip]
 8013926:	b299      	uxth	r1, r3
 8013928:	fb02 6101 	mla	r1, r2, r1, r6
 801392c:	0c1e      	lsrs	r6, r3, #16
 801392e:	0c0b      	lsrs	r3, r1, #16
 8013930:	fb02 3306 	mla	r3, r2, r6, r3
 8013934:	b289      	uxth	r1, r1
 8013936:	3001      	adds	r0, #1
 8013938:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801393c:	4285      	cmp	r5, r0
 801393e:	f84c 1b04 	str.w	r1, [ip], #4
 8013942:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013946:	dcec      	bgt.n	8013922 <__multadd+0x12>
 8013948:	b30e      	cbz	r6, 801398e <__multadd+0x7e>
 801394a:	68a3      	ldr	r3, [r4, #8]
 801394c:	42ab      	cmp	r3, r5
 801394e:	dc19      	bgt.n	8013984 <__multadd+0x74>
 8013950:	6861      	ldr	r1, [r4, #4]
 8013952:	4638      	mov	r0, r7
 8013954:	3101      	adds	r1, #1
 8013956:	f7ff ff79 	bl	801384c <_Balloc>
 801395a:	4680      	mov	r8, r0
 801395c:	b928      	cbnz	r0, 801396a <__multadd+0x5a>
 801395e:	4602      	mov	r2, r0
 8013960:	4b0c      	ldr	r3, [pc, #48]	; (8013994 <__multadd+0x84>)
 8013962:	480d      	ldr	r0, [pc, #52]	; (8013998 <__multadd+0x88>)
 8013964:	21ba      	movs	r1, #186	; 0xba
 8013966:	f7fd feed 	bl	8011744 <__assert_func>
 801396a:	6922      	ldr	r2, [r4, #16]
 801396c:	3202      	adds	r2, #2
 801396e:	f104 010c 	add.w	r1, r4, #12
 8013972:	0092      	lsls	r2, r2, #2
 8013974:	300c      	adds	r0, #12
 8013976:	f7ff f88e 	bl	8012a96 <memcpy>
 801397a:	4621      	mov	r1, r4
 801397c:	4638      	mov	r0, r7
 801397e:	f7ff ffa5 	bl	80138cc <_Bfree>
 8013982:	4644      	mov	r4, r8
 8013984:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013988:	3501      	adds	r5, #1
 801398a:	615e      	str	r6, [r3, #20]
 801398c:	6125      	str	r5, [r4, #16]
 801398e:	4620      	mov	r0, r4
 8013990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013994:	080171e9 	.word	0x080171e9
 8013998:	080171fa 	.word	0x080171fa

0801399c <__s2b>:
 801399c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139a0:	460c      	mov	r4, r1
 80139a2:	4615      	mov	r5, r2
 80139a4:	461f      	mov	r7, r3
 80139a6:	2209      	movs	r2, #9
 80139a8:	3308      	adds	r3, #8
 80139aa:	4606      	mov	r6, r0
 80139ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80139b0:	2100      	movs	r1, #0
 80139b2:	2201      	movs	r2, #1
 80139b4:	429a      	cmp	r2, r3
 80139b6:	db09      	blt.n	80139cc <__s2b+0x30>
 80139b8:	4630      	mov	r0, r6
 80139ba:	f7ff ff47 	bl	801384c <_Balloc>
 80139be:	b940      	cbnz	r0, 80139d2 <__s2b+0x36>
 80139c0:	4602      	mov	r2, r0
 80139c2:	4b19      	ldr	r3, [pc, #100]	; (8013a28 <__s2b+0x8c>)
 80139c4:	4819      	ldr	r0, [pc, #100]	; (8013a2c <__s2b+0x90>)
 80139c6:	21d3      	movs	r1, #211	; 0xd3
 80139c8:	f7fd febc 	bl	8011744 <__assert_func>
 80139cc:	0052      	lsls	r2, r2, #1
 80139ce:	3101      	adds	r1, #1
 80139d0:	e7f0      	b.n	80139b4 <__s2b+0x18>
 80139d2:	9b08      	ldr	r3, [sp, #32]
 80139d4:	6143      	str	r3, [r0, #20]
 80139d6:	2d09      	cmp	r5, #9
 80139d8:	f04f 0301 	mov.w	r3, #1
 80139dc:	6103      	str	r3, [r0, #16]
 80139de:	dd16      	ble.n	8013a0e <__s2b+0x72>
 80139e0:	f104 0909 	add.w	r9, r4, #9
 80139e4:	46c8      	mov	r8, r9
 80139e6:	442c      	add	r4, r5
 80139e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80139ec:	4601      	mov	r1, r0
 80139ee:	3b30      	subs	r3, #48	; 0x30
 80139f0:	220a      	movs	r2, #10
 80139f2:	4630      	mov	r0, r6
 80139f4:	f7ff ff8c 	bl	8013910 <__multadd>
 80139f8:	45a0      	cmp	r8, r4
 80139fa:	d1f5      	bne.n	80139e8 <__s2b+0x4c>
 80139fc:	f1a5 0408 	sub.w	r4, r5, #8
 8013a00:	444c      	add	r4, r9
 8013a02:	1b2d      	subs	r5, r5, r4
 8013a04:	1963      	adds	r3, r4, r5
 8013a06:	42bb      	cmp	r3, r7
 8013a08:	db04      	blt.n	8013a14 <__s2b+0x78>
 8013a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a0e:	340a      	adds	r4, #10
 8013a10:	2509      	movs	r5, #9
 8013a12:	e7f6      	b.n	8013a02 <__s2b+0x66>
 8013a14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013a18:	4601      	mov	r1, r0
 8013a1a:	3b30      	subs	r3, #48	; 0x30
 8013a1c:	220a      	movs	r2, #10
 8013a1e:	4630      	mov	r0, r6
 8013a20:	f7ff ff76 	bl	8013910 <__multadd>
 8013a24:	e7ee      	b.n	8013a04 <__s2b+0x68>
 8013a26:	bf00      	nop
 8013a28:	080171e9 	.word	0x080171e9
 8013a2c:	080171fa 	.word	0x080171fa

08013a30 <__hi0bits>:
 8013a30:	0c03      	lsrs	r3, r0, #16
 8013a32:	041b      	lsls	r3, r3, #16
 8013a34:	b9d3      	cbnz	r3, 8013a6c <__hi0bits+0x3c>
 8013a36:	0400      	lsls	r0, r0, #16
 8013a38:	2310      	movs	r3, #16
 8013a3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a3e:	bf04      	itt	eq
 8013a40:	0200      	lsleq	r0, r0, #8
 8013a42:	3308      	addeq	r3, #8
 8013a44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a48:	bf04      	itt	eq
 8013a4a:	0100      	lsleq	r0, r0, #4
 8013a4c:	3304      	addeq	r3, #4
 8013a4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a52:	bf04      	itt	eq
 8013a54:	0080      	lsleq	r0, r0, #2
 8013a56:	3302      	addeq	r3, #2
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	db05      	blt.n	8013a68 <__hi0bits+0x38>
 8013a5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a60:	f103 0301 	add.w	r3, r3, #1
 8013a64:	bf08      	it	eq
 8013a66:	2320      	moveq	r3, #32
 8013a68:	4618      	mov	r0, r3
 8013a6a:	4770      	bx	lr
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	e7e4      	b.n	8013a3a <__hi0bits+0xa>

08013a70 <__lo0bits>:
 8013a70:	6803      	ldr	r3, [r0, #0]
 8013a72:	f013 0207 	ands.w	r2, r3, #7
 8013a76:	d00c      	beq.n	8013a92 <__lo0bits+0x22>
 8013a78:	07d9      	lsls	r1, r3, #31
 8013a7a:	d422      	bmi.n	8013ac2 <__lo0bits+0x52>
 8013a7c:	079a      	lsls	r2, r3, #30
 8013a7e:	bf49      	itett	mi
 8013a80:	085b      	lsrmi	r3, r3, #1
 8013a82:	089b      	lsrpl	r3, r3, #2
 8013a84:	6003      	strmi	r3, [r0, #0]
 8013a86:	2201      	movmi	r2, #1
 8013a88:	bf5c      	itt	pl
 8013a8a:	6003      	strpl	r3, [r0, #0]
 8013a8c:	2202      	movpl	r2, #2
 8013a8e:	4610      	mov	r0, r2
 8013a90:	4770      	bx	lr
 8013a92:	b299      	uxth	r1, r3
 8013a94:	b909      	cbnz	r1, 8013a9a <__lo0bits+0x2a>
 8013a96:	0c1b      	lsrs	r3, r3, #16
 8013a98:	2210      	movs	r2, #16
 8013a9a:	b2d9      	uxtb	r1, r3
 8013a9c:	b909      	cbnz	r1, 8013aa2 <__lo0bits+0x32>
 8013a9e:	3208      	adds	r2, #8
 8013aa0:	0a1b      	lsrs	r3, r3, #8
 8013aa2:	0719      	lsls	r1, r3, #28
 8013aa4:	bf04      	itt	eq
 8013aa6:	091b      	lsreq	r3, r3, #4
 8013aa8:	3204      	addeq	r2, #4
 8013aaa:	0799      	lsls	r1, r3, #30
 8013aac:	bf04      	itt	eq
 8013aae:	089b      	lsreq	r3, r3, #2
 8013ab0:	3202      	addeq	r2, #2
 8013ab2:	07d9      	lsls	r1, r3, #31
 8013ab4:	d403      	bmi.n	8013abe <__lo0bits+0x4e>
 8013ab6:	085b      	lsrs	r3, r3, #1
 8013ab8:	f102 0201 	add.w	r2, r2, #1
 8013abc:	d003      	beq.n	8013ac6 <__lo0bits+0x56>
 8013abe:	6003      	str	r3, [r0, #0]
 8013ac0:	e7e5      	b.n	8013a8e <__lo0bits+0x1e>
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	e7e3      	b.n	8013a8e <__lo0bits+0x1e>
 8013ac6:	2220      	movs	r2, #32
 8013ac8:	e7e1      	b.n	8013a8e <__lo0bits+0x1e>
	...

08013acc <__i2b>:
 8013acc:	b510      	push	{r4, lr}
 8013ace:	460c      	mov	r4, r1
 8013ad0:	2101      	movs	r1, #1
 8013ad2:	f7ff febb 	bl	801384c <_Balloc>
 8013ad6:	4602      	mov	r2, r0
 8013ad8:	b928      	cbnz	r0, 8013ae6 <__i2b+0x1a>
 8013ada:	4b05      	ldr	r3, [pc, #20]	; (8013af0 <__i2b+0x24>)
 8013adc:	4805      	ldr	r0, [pc, #20]	; (8013af4 <__i2b+0x28>)
 8013ade:	f240 1145 	movw	r1, #325	; 0x145
 8013ae2:	f7fd fe2f 	bl	8011744 <__assert_func>
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	6144      	str	r4, [r0, #20]
 8013aea:	6103      	str	r3, [r0, #16]
 8013aec:	bd10      	pop	{r4, pc}
 8013aee:	bf00      	nop
 8013af0:	080171e9 	.word	0x080171e9
 8013af4:	080171fa 	.word	0x080171fa

08013af8 <__multiply>:
 8013af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013afc:	4691      	mov	r9, r2
 8013afe:	690a      	ldr	r2, [r1, #16]
 8013b00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	bfb8      	it	lt
 8013b08:	460b      	movlt	r3, r1
 8013b0a:	460c      	mov	r4, r1
 8013b0c:	bfbc      	itt	lt
 8013b0e:	464c      	movlt	r4, r9
 8013b10:	4699      	movlt	r9, r3
 8013b12:	6927      	ldr	r7, [r4, #16]
 8013b14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013b18:	68a3      	ldr	r3, [r4, #8]
 8013b1a:	6861      	ldr	r1, [r4, #4]
 8013b1c:	eb07 060a 	add.w	r6, r7, sl
 8013b20:	42b3      	cmp	r3, r6
 8013b22:	b085      	sub	sp, #20
 8013b24:	bfb8      	it	lt
 8013b26:	3101      	addlt	r1, #1
 8013b28:	f7ff fe90 	bl	801384c <_Balloc>
 8013b2c:	b930      	cbnz	r0, 8013b3c <__multiply+0x44>
 8013b2e:	4602      	mov	r2, r0
 8013b30:	4b44      	ldr	r3, [pc, #272]	; (8013c44 <__multiply+0x14c>)
 8013b32:	4845      	ldr	r0, [pc, #276]	; (8013c48 <__multiply+0x150>)
 8013b34:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013b38:	f7fd fe04 	bl	8011744 <__assert_func>
 8013b3c:	f100 0514 	add.w	r5, r0, #20
 8013b40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b44:	462b      	mov	r3, r5
 8013b46:	2200      	movs	r2, #0
 8013b48:	4543      	cmp	r3, r8
 8013b4a:	d321      	bcc.n	8013b90 <__multiply+0x98>
 8013b4c:	f104 0314 	add.w	r3, r4, #20
 8013b50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013b54:	f109 0314 	add.w	r3, r9, #20
 8013b58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013b5c:	9202      	str	r2, [sp, #8]
 8013b5e:	1b3a      	subs	r2, r7, r4
 8013b60:	3a15      	subs	r2, #21
 8013b62:	f022 0203 	bic.w	r2, r2, #3
 8013b66:	3204      	adds	r2, #4
 8013b68:	f104 0115 	add.w	r1, r4, #21
 8013b6c:	428f      	cmp	r7, r1
 8013b6e:	bf38      	it	cc
 8013b70:	2204      	movcc	r2, #4
 8013b72:	9201      	str	r2, [sp, #4]
 8013b74:	9a02      	ldr	r2, [sp, #8]
 8013b76:	9303      	str	r3, [sp, #12]
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d80c      	bhi.n	8013b96 <__multiply+0x9e>
 8013b7c:	2e00      	cmp	r6, #0
 8013b7e:	dd03      	ble.n	8013b88 <__multiply+0x90>
 8013b80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d05b      	beq.n	8013c40 <__multiply+0x148>
 8013b88:	6106      	str	r6, [r0, #16]
 8013b8a:	b005      	add	sp, #20
 8013b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b90:	f843 2b04 	str.w	r2, [r3], #4
 8013b94:	e7d8      	b.n	8013b48 <__multiply+0x50>
 8013b96:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b9a:	f1ba 0f00 	cmp.w	sl, #0
 8013b9e:	d024      	beq.n	8013bea <__multiply+0xf2>
 8013ba0:	f104 0e14 	add.w	lr, r4, #20
 8013ba4:	46a9      	mov	r9, r5
 8013ba6:	f04f 0c00 	mov.w	ip, #0
 8013baa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013bae:	f8d9 1000 	ldr.w	r1, [r9]
 8013bb2:	fa1f fb82 	uxth.w	fp, r2
 8013bb6:	b289      	uxth	r1, r1
 8013bb8:	fb0a 110b 	mla	r1, sl, fp, r1
 8013bbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013bc0:	f8d9 2000 	ldr.w	r2, [r9]
 8013bc4:	4461      	add	r1, ip
 8013bc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bca:	fb0a c20b 	mla	r2, sl, fp, ip
 8013bce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013bd2:	b289      	uxth	r1, r1
 8013bd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013bd8:	4577      	cmp	r7, lr
 8013bda:	f849 1b04 	str.w	r1, [r9], #4
 8013bde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013be2:	d8e2      	bhi.n	8013baa <__multiply+0xb2>
 8013be4:	9a01      	ldr	r2, [sp, #4]
 8013be6:	f845 c002 	str.w	ip, [r5, r2]
 8013bea:	9a03      	ldr	r2, [sp, #12]
 8013bec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013bf0:	3304      	adds	r3, #4
 8013bf2:	f1b9 0f00 	cmp.w	r9, #0
 8013bf6:	d021      	beq.n	8013c3c <__multiply+0x144>
 8013bf8:	6829      	ldr	r1, [r5, #0]
 8013bfa:	f104 0c14 	add.w	ip, r4, #20
 8013bfe:	46ae      	mov	lr, r5
 8013c00:	f04f 0a00 	mov.w	sl, #0
 8013c04:	f8bc b000 	ldrh.w	fp, [ip]
 8013c08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013c0c:	fb09 220b 	mla	r2, r9, fp, r2
 8013c10:	4452      	add	r2, sl
 8013c12:	b289      	uxth	r1, r1
 8013c14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013c18:	f84e 1b04 	str.w	r1, [lr], #4
 8013c1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013c20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013c24:	f8be 1000 	ldrh.w	r1, [lr]
 8013c28:	fb09 110a 	mla	r1, r9, sl, r1
 8013c2c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013c30:	4567      	cmp	r7, ip
 8013c32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013c36:	d8e5      	bhi.n	8013c04 <__multiply+0x10c>
 8013c38:	9a01      	ldr	r2, [sp, #4]
 8013c3a:	50a9      	str	r1, [r5, r2]
 8013c3c:	3504      	adds	r5, #4
 8013c3e:	e799      	b.n	8013b74 <__multiply+0x7c>
 8013c40:	3e01      	subs	r6, #1
 8013c42:	e79b      	b.n	8013b7c <__multiply+0x84>
 8013c44:	080171e9 	.word	0x080171e9
 8013c48:	080171fa 	.word	0x080171fa

08013c4c <__pow5mult>:
 8013c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c50:	4615      	mov	r5, r2
 8013c52:	f012 0203 	ands.w	r2, r2, #3
 8013c56:	4606      	mov	r6, r0
 8013c58:	460f      	mov	r7, r1
 8013c5a:	d007      	beq.n	8013c6c <__pow5mult+0x20>
 8013c5c:	4c25      	ldr	r4, [pc, #148]	; (8013cf4 <__pow5mult+0xa8>)
 8013c5e:	3a01      	subs	r2, #1
 8013c60:	2300      	movs	r3, #0
 8013c62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c66:	f7ff fe53 	bl	8013910 <__multadd>
 8013c6a:	4607      	mov	r7, r0
 8013c6c:	10ad      	asrs	r5, r5, #2
 8013c6e:	d03d      	beq.n	8013cec <__pow5mult+0xa0>
 8013c70:	69f4      	ldr	r4, [r6, #28]
 8013c72:	b97c      	cbnz	r4, 8013c94 <__pow5mult+0x48>
 8013c74:	2010      	movs	r0, #16
 8013c76:	f7fd fd95 	bl	80117a4 <malloc>
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	61f0      	str	r0, [r6, #28]
 8013c7e:	b928      	cbnz	r0, 8013c8c <__pow5mult+0x40>
 8013c80:	4b1d      	ldr	r3, [pc, #116]	; (8013cf8 <__pow5mult+0xac>)
 8013c82:	481e      	ldr	r0, [pc, #120]	; (8013cfc <__pow5mult+0xb0>)
 8013c84:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013c88:	f7fd fd5c 	bl	8011744 <__assert_func>
 8013c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c90:	6004      	str	r4, [r0, #0]
 8013c92:	60c4      	str	r4, [r0, #12]
 8013c94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c9c:	b94c      	cbnz	r4, 8013cb2 <__pow5mult+0x66>
 8013c9e:	f240 2171 	movw	r1, #625	; 0x271
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f7ff ff12 	bl	8013acc <__i2b>
 8013ca8:	2300      	movs	r3, #0
 8013caa:	f8c8 0008 	str.w	r0, [r8, #8]
 8013cae:	4604      	mov	r4, r0
 8013cb0:	6003      	str	r3, [r0, #0]
 8013cb2:	f04f 0900 	mov.w	r9, #0
 8013cb6:	07eb      	lsls	r3, r5, #31
 8013cb8:	d50a      	bpl.n	8013cd0 <__pow5mult+0x84>
 8013cba:	4639      	mov	r1, r7
 8013cbc:	4622      	mov	r2, r4
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	f7ff ff1a 	bl	8013af8 <__multiply>
 8013cc4:	4639      	mov	r1, r7
 8013cc6:	4680      	mov	r8, r0
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f7ff fdff 	bl	80138cc <_Bfree>
 8013cce:	4647      	mov	r7, r8
 8013cd0:	106d      	asrs	r5, r5, #1
 8013cd2:	d00b      	beq.n	8013cec <__pow5mult+0xa0>
 8013cd4:	6820      	ldr	r0, [r4, #0]
 8013cd6:	b938      	cbnz	r0, 8013ce8 <__pow5mult+0x9c>
 8013cd8:	4622      	mov	r2, r4
 8013cda:	4621      	mov	r1, r4
 8013cdc:	4630      	mov	r0, r6
 8013cde:	f7ff ff0b 	bl	8013af8 <__multiply>
 8013ce2:	6020      	str	r0, [r4, #0]
 8013ce4:	f8c0 9000 	str.w	r9, [r0]
 8013ce8:	4604      	mov	r4, r0
 8013cea:	e7e4      	b.n	8013cb6 <__pow5mult+0x6a>
 8013cec:	4638      	mov	r0, r7
 8013cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cf2:	bf00      	nop
 8013cf4:	08017348 	.word	0x08017348
 8013cf8:	0801717a 	.word	0x0801717a
 8013cfc:	080171fa 	.word	0x080171fa

08013d00 <__lshift>:
 8013d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d04:	460c      	mov	r4, r1
 8013d06:	6849      	ldr	r1, [r1, #4]
 8013d08:	6923      	ldr	r3, [r4, #16]
 8013d0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013d0e:	68a3      	ldr	r3, [r4, #8]
 8013d10:	4607      	mov	r7, r0
 8013d12:	4691      	mov	r9, r2
 8013d14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d18:	f108 0601 	add.w	r6, r8, #1
 8013d1c:	42b3      	cmp	r3, r6
 8013d1e:	db0b      	blt.n	8013d38 <__lshift+0x38>
 8013d20:	4638      	mov	r0, r7
 8013d22:	f7ff fd93 	bl	801384c <_Balloc>
 8013d26:	4605      	mov	r5, r0
 8013d28:	b948      	cbnz	r0, 8013d3e <__lshift+0x3e>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	4b28      	ldr	r3, [pc, #160]	; (8013dd0 <__lshift+0xd0>)
 8013d2e:	4829      	ldr	r0, [pc, #164]	; (8013dd4 <__lshift+0xd4>)
 8013d30:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013d34:	f7fd fd06 	bl	8011744 <__assert_func>
 8013d38:	3101      	adds	r1, #1
 8013d3a:	005b      	lsls	r3, r3, #1
 8013d3c:	e7ee      	b.n	8013d1c <__lshift+0x1c>
 8013d3e:	2300      	movs	r3, #0
 8013d40:	f100 0114 	add.w	r1, r0, #20
 8013d44:	f100 0210 	add.w	r2, r0, #16
 8013d48:	4618      	mov	r0, r3
 8013d4a:	4553      	cmp	r3, sl
 8013d4c:	db33      	blt.n	8013db6 <__lshift+0xb6>
 8013d4e:	6920      	ldr	r0, [r4, #16]
 8013d50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d54:	f104 0314 	add.w	r3, r4, #20
 8013d58:	f019 091f 	ands.w	r9, r9, #31
 8013d5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d64:	d02b      	beq.n	8013dbe <__lshift+0xbe>
 8013d66:	f1c9 0e20 	rsb	lr, r9, #32
 8013d6a:	468a      	mov	sl, r1
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	6818      	ldr	r0, [r3, #0]
 8013d70:	fa00 f009 	lsl.w	r0, r0, r9
 8013d74:	4310      	orrs	r0, r2
 8013d76:	f84a 0b04 	str.w	r0, [sl], #4
 8013d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d7e:	459c      	cmp	ip, r3
 8013d80:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d84:	d8f3      	bhi.n	8013d6e <__lshift+0x6e>
 8013d86:	ebac 0304 	sub.w	r3, ip, r4
 8013d8a:	3b15      	subs	r3, #21
 8013d8c:	f023 0303 	bic.w	r3, r3, #3
 8013d90:	3304      	adds	r3, #4
 8013d92:	f104 0015 	add.w	r0, r4, #21
 8013d96:	4584      	cmp	ip, r0
 8013d98:	bf38      	it	cc
 8013d9a:	2304      	movcc	r3, #4
 8013d9c:	50ca      	str	r2, [r1, r3]
 8013d9e:	b10a      	cbz	r2, 8013da4 <__lshift+0xa4>
 8013da0:	f108 0602 	add.w	r6, r8, #2
 8013da4:	3e01      	subs	r6, #1
 8013da6:	4638      	mov	r0, r7
 8013da8:	612e      	str	r6, [r5, #16]
 8013daa:	4621      	mov	r1, r4
 8013dac:	f7ff fd8e 	bl	80138cc <_Bfree>
 8013db0:	4628      	mov	r0, r5
 8013db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013db6:	f842 0f04 	str.w	r0, [r2, #4]!
 8013dba:	3301      	adds	r3, #1
 8013dbc:	e7c5      	b.n	8013d4a <__lshift+0x4a>
 8013dbe:	3904      	subs	r1, #4
 8013dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dc8:	459c      	cmp	ip, r3
 8013dca:	d8f9      	bhi.n	8013dc0 <__lshift+0xc0>
 8013dcc:	e7ea      	b.n	8013da4 <__lshift+0xa4>
 8013dce:	bf00      	nop
 8013dd0:	080171e9 	.word	0x080171e9
 8013dd4:	080171fa 	.word	0x080171fa

08013dd8 <__mcmp>:
 8013dd8:	b530      	push	{r4, r5, lr}
 8013dda:	6902      	ldr	r2, [r0, #16]
 8013ddc:	690c      	ldr	r4, [r1, #16]
 8013dde:	1b12      	subs	r2, r2, r4
 8013de0:	d10e      	bne.n	8013e00 <__mcmp+0x28>
 8013de2:	f100 0314 	add.w	r3, r0, #20
 8013de6:	3114      	adds	r1, #20
 8013de8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013dec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013df0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013df4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013df8:	42a5      	cmp	r5, r4
 8013dfa:	d003      	beq.n	8013e04 <__mcmp+0x2c>
 8013dfc:	d305      	bcc.n	8013e0a <__mcmp+0x32>
 8013dfe:	2201      	movs	r2, #1
 8013e00:	4610      	mov	r0, r2
 8013e02:	bd30      	pop	{r4, r5, pc}
 8013e04:	4283      	cmp	r3, r0
 8013e06:	d3f3      	bcc.n	8013df0 <__mcmp+0x18>
 8013e08:	e7fa      	b.n	8013e00 <__mcmp+0x28>
 8013e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e0e:	e7f7      	b.n	8013e00 <__mcmp+0x28>

08013e10 <__mdiff>:
 8013e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e14:	460c      	mov	r4, r1
 8013e16:	4606      	mov	r6, r0
 8013e18:	4611      	mov	r1, r2
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	4690      	mov	r8, r2
 8013e1e:	f7ff ffdb 	bl	8013dd8 <__mcmp>
 8013e22:	1e05      	subs	r5, r0, #0
 8013e24:	d110      	bne.n	8013e48 <__mdiff+0x38>
 8013e26:	4629      	mov	r1, r5
 8013e28:	4630      	mov	r0, r6
 8013e2a:	f7ff fd0f 	bl	801384c <_Balloc>
 8013e2e:	b930      	cbnz	r0, 8013e3e <__mdiff+0x2e>
 8013e30:	4b3a      	ldr	r3, [pc, #232]	; (8013f1c <__mdiff+0x10c>)
 8013e32:	4602      	mov	r2, r0
 8013e34:	f240 2137 	movw	r1, #567	; 0x237
 8013e38:	4839      	ldr	r0, [pc, #228]	; (8013f20 <__mdiff+0x110>)
 8013e3a:	f7fd fc83 	bl	8011744 <__assert_func>
 8013e3e:	2301      	movs	r3, #1
 8013e40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e48:	bfa4      	itt	ge
 8013e4a:	4643      	movge	r3, r8
 8013e4c:	46a0      	movge	r8, r4
 8013e4e:	4630      	mov	r0, r6
 8013e50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e54:	bfa6      	itte	ge
 8013e56:	461c      	movge	r4, r3
 8013e58:	2500      	movge	r5, #0
 8013e5a:	2501      	movlt	r5, #1
 8013e5c:	f7ff fcf6 	bl	801384c <_Balloc>
 8013e60:	b920      	cbnz	r0, 8013e6c <__mdiff+0x5c>
 8013e62:	4b2e      	ldr	r3, [pc, #184]	; (8013f1c <__mdiff+0x10c>)
 8013e64:	4602      	mov	r2, r0
 8013e66:	f240 2145 	movw	r1, #581	; 0x245
 8013e6a:	e7e5      	b.n	8013e38 <__mdiff+0x28>
 8013e6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013e70:	6926      	ldr	r6, [r4, #16]
 8013e72:	60c5      	str	r5, [r0, #12]
 8013e74:	f104 0914 	add.w	r9, r4, #20
 8013e78:	f108 0514 	add.w	r5, r8, #20
 8013e7c:	f100 0e14 	add.w	lr, r0, #20
 8013e80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013e84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013e88:	f108 0210 	add.w	r2, r8, #16
 8013e8c:	46f2      	mov	sl, lr
 8013e8e:	2100      	movs	r1, #0
 8013e90:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e98:	fa11 f88b 	uxtah	r8, r1, fp
 8013e9c:	b299      	uxth	r1, r3
 8013e9e:	0c1b      	lsrs	r3, r3, #16
 8013ea0:	eba8 0801 	sub.w	r8, r8, r1
 8013ea4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013ea8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013eac:	fa1f f888 	uxth.w	r8, r8
 8013eb0:	1419      	asrs	r1, r3, #16
 8013eb2:	454e      	cmp	r6, r9
 8013eb4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013eb8:	f84a 3b04 	str.w	r3, [sl], #4
 8013ebc:	d8e8      	bhi.n	8013e90 <__mdiff+0x80>
 8013ebe:	1b33      	subs	r3, r6, r4
 8013ec0:	3b15      	subs	r3, #21
 8013ec2:	f023 0303 	bic.w	r3, r3, #3
 8013ec6:	3304      	adds	r3, #4
 8013ec8:	3415      	adds	r4, #21
 8013eca:	42a6      	cmp	r6, r4
 8013ecc:	bf38      	it	cc
 8013ece:	2304      	movcc	r3, #4
 8013ed0:	441d      	add	r5, r3
 8013ed2:	4473      	add	r3, lr
 8013ed4:	469e      	mov	lr, r3
 8013ed6:	462e      	mov	r6, r5
 8013ed8:	4566      	cmp	r6, ip
 8013eda:	d30e      	bcc.n	8013efa <__mdiff+0xea>
 8013edc:	f10c 0203 	add.w	r2, ip, #3
 8013ee0:	1b52      	subs	r2, r2, r5
 8013ee2:	f022 0203 	bic.w	r2, r2, #3
 8013ee6:	3d03      	subs	r5, #3
 8013ee8:	45ac      	cmp	ip, r5
 8013eea:	bf38      	it	cc
 8013eec:	2200      	movcc	r2, #0
 8013eee:	4413      	add	r3, r2
 8013ef0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013ef4:	b17a      	cbz	r2, 8013f16 <__mdiff+0x106>
 8013ef6:	6107      	str	r7, [r0, #16]
 8013ef8:	e7a4      	b.n	8013e44 <__mdiff+0x34>
 8013efa:	f856 8b04 	ldr.w	r8, [r6], #4
 8013efe:	fa11 f288 	uxtah	r2, r1, r8
 8013f02:	1414      	asrs	r4, r2, #16
 8013f04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013f08:	b292      	uxth	r2, r2
 8013f0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013f0e:	f84e 2b04 	str.w	r2, [lr], #4
 8013f12:	1421      	asrs	r1, r4, #16
 8013f14:	e7e0      	b.n	8013ed8 <__mdiff+0xc8>
 8013f16:	3f01      	subs	r7, #1
 8013f18:	e7ea      	b.n	8013ef0 <__mdiff+0xe0>
 8013f1a:	bf00      	nop
 8013f1c:	080171e9 	.word	0x080171e9
 8013f20:	080171fa 	.word	0x080171fa

08013f24 <__ulp>:
 8013f24:	b082      	sub	sp, #8
 8013f26:	ed8d 0b00 	vstr	d0, [sp]
 8013f2a:	9a01      	ldr	r2, [sp, #4]
 8013f2c:	4b0f      	ldr	r3, [pc, #60]	; (8013f6c <__ulp+0x48>)
 8013f2e:	4013      	ands	r3, r2
 8013f30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	dc08      	bgt.n	8013f4a <__ulp+0x26>
 8013f38:	425b      	negs	r3, r3
 8013f3a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8013f3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013f42:	da04      	bge.n	8013f4e <__ulp+0x2a>
 8013f44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013f48:	4113      	asrs	r3, r2
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	e008      	b.n	8013f60 <__ulp+0x3c>
 8013f4e:	f1a2 0314 	sub.w	r3, r2, #20
 8013f52:	2b1e      	cmp	r3, #30
 8013f54:	bfda      	itte	le
 8013f56:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013f5a:	40da      	lsrle	r2, r3
 8013f5c:	2201      	movgt	r2, #1
 8013f5e:	2300      	movs	r3, #0
 8013f60:	4619      	mov	r1, r3
 8013f62:	4610      	mov	r0, r2
 8013f64:	ec41 0b10 	vmov	d0, r0, r1
 8013f68:	b002      	add	sp, #8
 8013f6a:	4770      	bx	lr
 8013f6c:	7ff00000 	.word	0x7ff00000

08013f70 <__b2d>:
 8013f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f74:	6906      	ldr	r6, [r0, #16]
 8013f76:	f100 0814 	add.w	r8, r0, #20
 8013f7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013f7e:	1f37      	subs	r7, r6, #4
 8013f80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013f84:	4610      	mov	r0, r2
 8013f86:	f7ff fd53 	bl	8013a30 <__hi0bits>
 8013f8a:	f1c0 0320 	rsb	r3, r0, #32
 8013f8e:	280a      	cmp	r0, #10
 8013f90:	600b      	str	r3, [r1, #0]
 8013f92:	491b      	ldr	r1, [pc, #108]	; (8014000 <__b2d+0x90>)
 8013f94:	dc15      	bgt.n	8013fc2 <__b2d+0x52>
 8013f96:	f1c0 0c0b 	rsb	ip, r0, #11
 8013f9a:	fa22 f30c 	lsr.w	r3, r2, ip
 8013f9e:	45b8      	cmp	r8, r7
 8013fa0:	ea43 0501 	orr.w	r5, r3, r1
 8013fa4:	bf34      	ite	cc
 8013fa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013faa:	2300      	movcs	r3, #0
 8013fac:	3015      	adds	r0, #21
 8013fae:	fa02 f000 	lsl.w	r0, r2, r0
 8013fb2:	fa23 f30c 	lsr.w	r3, r3, ip
 8013fb6:	4303      	orrs	r3, r0
 8013fb8:	461c      	mov	r4, r3
 8013fba:	ec45 4b10 	vmov	d0, r4, r5
 8013fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fc2:	45b8      	cmp	r8, r7
 8013fc4:	bf3a      	itte	cc
 8013fc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013fca:	f1a6 0708 	subcc.w	r7, r6, #8
 8013fce:	2300      	movcs	r3, #0
 8013fd0:	380b      	subs	r0, #11
 8013fd2:	d012      	beq.n	8013ffa <__b2d+0x8a>
 8013fd4:	f1c0 0120 	rsb	r1, r0, #32
 8013fd8:	fa23 f401 	lsr.w	r4, r3, r1
 8013fdc:	4082      	lsls	r2, r0
 8013fde:	4322      	orrs	r2, r4
 8013fe0:	4547      	cmp	r7, r8
 8013fe2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013fe6:	bf8c      	ite	hi
 8013fe8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013fec:	2200      	movls	r2, #0
 8013fee:	4083      	lsls	r3, r0
 8013ff0:	40ca      	lsrs	r2, r1
 8013ff2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013ff6:	4313      	orrs	r3, r2
 8013ff8:	e7de      	b.n	8013fb8 <__b2d+0x48>
 8013ffa:	ea42 0501 	orr.w	r5, r2, r1
 8013ffe:	e7db      	b.n	8013fb8 <__b2d+0x48>
 8014000:	3ff00000 	.word	0x3ff00000

08014004 <__d2b>:
 8014004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014008:	460f      	mov	r7, r1
 801400a:	2101      	movs	r1, #1
 801400c:	ec59 8b10 	vmov	r8, r9, d0
 8014010:	4616      	mov	r6, r2
 8014012:	f7ff fc1b 	bl	801384c <_Balloc>
 8014016:	4604      	mov	r4, r0
 8014018:	b930      	cbnz	r0, 8014028 <__d2b+0x24>
 801401a:	4602      	mov	r2, r0
 801401c:	4b24      	ldr	r3, [pc, #144]	; (80140b0 <__d2b+0xac>)
 801401e:	4825      	ldr	r0, [pc, #148]	; (80140b4 <__d2b+0xb0>)
 8014020:	f240 310f 	movw	r1, #783	; 0x30f
 8014024:	f7fd fb8e 	bl	8011744 <__assert_func>
 8014028:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801402c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014030:	bb2d      	cbnz	r5, 801407e <__d2b+0x7a>
 8014032:	9301      	str	r3, [sp, #4]
 8014034:	f1b8 0300 	subs.w	r3, r8, #0
 8014038:	d026      	beq.n	8014088 <__d2b+0x84>
 801403a:	4668      	mov	r0, sp
 801403c:	9300      	str	r3, [sp, #0]
 801403e:	f7ff fd17 	bl	8013a70 <__lo0bits>
 8014042:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014046:	b1e8      	cbz	r0, 8014084 <__d2b+0x80>
 8014048:	f1c0 0320 	rsb	r3, r0, #32
 801404c:	fa02 f303 	lsl.w	r3, r2, r3
 8014050:	430b      	orrs	r3, r1
 8014052:	40c2      	lsrs	r2, r0
 8014054:	6163      	str	r3, [r4, #20]
 8014056:	9201      	str	r2, [sp, #4]
 8014058:	9b01      	ldr	r3, [sp, #4]
 801405a:	61a3      	str	r3, [r4, #24]
 801405c:	2b00      	cmp	r3, #0
 801405e:	bf14      	ite	ne
 8014060:	2202      	movne	r2, #2
 8014062:	2201      	moveq	r2, #1
 8014064:	6122      	str	r2, [r4, #16]
 8014066:	b1bd      	cbz	r5, 8014098 <__d2b+0x94>
 8014068:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801406c:	4405      	add	r5, r0
 801406e:	603d      	str	r5, [r7, #0]
 8014070:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014074:	6030      	str	r0, [r6, #0]
 8014076:	4620      	mov	r0, r4
 8014078:	b003      	add	sp, #12
 801407a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801407e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014082:	e7d6      	b.n	8014032 <__d2b+0x2e>
 8014084:	6161      	str	r1, [r4, #20]
 8014086:	e7e7      	b.n	8014058 <__d2b+0x54>
 8014088:	a801      	add	r0, sp, #4
 801408a:	f7ff fcf1 	bl	8013a70 <__lo0bits>
 801408e:	9b01      	ldr	r3, [sp, #4]
 8014090:	6163      	str	r3, [r4, #20]
 8014092:	3020      	adds	r0, #32
 8014094:	2201      	movs	r2, #1
 8014096:	e7e5      	b.n	8014064 <__d2b+0x60>
 8014098:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801409c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80140a0:	6038      	str	r0, [r7, #0]
 80140a2:	6918      	ldr	r0, [r3, #16]
 80140a4:	f7ff fcc4 	bl	8013a30 <__hi0bits>
 80140a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80140ac:	e7e2      	b.n	8014074 <__d2b+0x70>
 80140ae:	bf00      	nop
 80140b0:	080171e9 	.word	0x080171e9
 80140b4:	080171fa 	.word	0x080171fa

080140b8 <__ratio>:
 80140b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140bc:	4688      	mov	r8, r1
 80140be:	4669      	mov	r1, sp
 80140c0:	4681      	mov	r9, r0
 80140c2:	f7ff ff55 	bl	8013f70 <__b2d>
 80140c6:	a901      	add	r1, sp, #4
 80140c8:	4640      	mov	r0, r8
 80140ca:	ec55 4b10 	vmov	r4, r5, d0
 80140ce:	f7ff ff4f 	bl	8013f70 <__b2d>
 80140d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80140d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80140da:	eba3 0c02 	sub.w	ip, r3, r2
 80140de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140e2:	1a9b      	subs	r3, r3, r2
 80140e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80140e8:	ec51 0b10 	vmov	r0, r1, d0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	bfd6      	itet	le
 80140f0:	460a      	movle	r2, r1
 80140f2:	462a      	movgt	r2, r5
 80140f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80140f8:	468b      	mov	fp, r1
 80140fa:	462f      	mov	r7, r5
 80140fc:	bfd4      	ite	le
 80140fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014102:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014106:	4620      	mov	r0, r4
 8014108:	ee10 2a10 	vmov	r2, s0
 801410c:	465b      	mov	r3, fp
 801410e:	4639      	mov	r1, r7
 8014110:	f7ec fbc4 	bl	800089c <__aeabi_ddiv>
 8014114:	ec41 0b10 	vmov	d0, r0, r1
 8014118:	b003      	add	sp, #12
 801411a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801411e <__copybits>:
 801411e:	3901      	subs	r1, #1
 8014120:	b570      	push	{r4, r5, r6, lr}
 8014122:	1149      	asrs	r1, r1, #5
 8014124:	6914      	ldr	r4, [r2, #16]
 8014126:	3101      	adds	r1, #1
 8014128:	f102 0314 	add.w	r3, r2, #20
 801412c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014130:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014134:	1f05      	subs	r5, r0, #4
 8014136:	42a3      	cmp	r3, r4
 8014138:	d30c      	bcc.n	8014154 <__copybits+0x36>
 801413a:	1aa3      	subs	r3, r4, r2
 801413c:	3b11      	subs	r3, #17
 801413e:	f023 0303 	bic.w	r3, r3, #3
 8014142:	3211      	adds	r2, #17
 8014144:	42a2      	cmp	r2, r4
 8014146:	bf88      	it	hi
 8014148:	2300      	movhi	r3, #0
 801414a:	4418      	add	r0, r3
 801414c:	2300      	movs	r3, #0
 801414e:	4288      	cmp	r0, r1
 8014150:	d305      	bcc.n	801415e <__copybits+0x40>
 8014152:	bd70      	pop	{r4, r5, r6, pc}
 8014154:	f853 6b04 	ldr.w	r6, [r3], #4
 8014158:	f845 6f04 	str.w	r6, [r5, #4]!
 801415c:	e7eb      	b.n	8014136 <__copybits+0x18>
 801415e:	f840 3b04 	str.w	r3, [r0], #4
 8014162:	e7f4      	b.n	801414e <__copybits+0x30>

08014164 <__any_on>:
 8014164:	f100 0214 	add.w	r2, r0, #20
 8014168:	6900      	ldr	r0, [r0, #16]
 801416a:	114b      	asrs	r3, r1, #5
 801416c:	4298      	cmp	r0, r3
 801416e:	b510      	push	{r4, lr}
 8014170:	db11      	blt.n	8014196 <__any_on+0x32>
 8014172:	dd0a      	ble.n	801418a <__any_on+0x26>
 8014174:	f011 011f 	ands.w	r1, r1, #31
 8014178:	d007      	beq.n	801418a <__any_on+0x26>
 801417a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801417e:	fa24 f001 	lsr.w	r0, r4, r1
 8014182:	fa00 f101 	lsl.w	r1, r0, r1
 8014186:	428c      	cmp	r4, r1
 8014188:	d10b      	bne.n	80141a2 <__any_on+0x3e>
 801418a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801418e:	4293      	cmp	r3, r2
 8014190:	d803      	bhi.n	801419a <__any_on+0x36>
 8014192:	2000      	movs	r0, #0
 8014194:	bd10      	pop	{r4, pc}
 8014196:	4603      	mov	r3, r0
 8014198:	e7f7      	b.n	801418a <__any_on+0x26>
 801419a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801419e:	2900      	cmp	r1, #0
 80141a0:	d0f5      	beq.n	801418e <__any_on+0x2a>
 80141a2:	2001      	movs	r0, #1
 80141a4:	e7f6      	b.n	8014194 <__any_on+0x30>

080141a6 <sulp>:
 80141a6:	b570      	push	{r4, r5, r6, lr}
 80141a8:	4604      	mov	r4, r0
 80141aa:	460d      	mov	r5, r1
 80141ac:	ec45 4b10 	vmov	d0, r4, r5
 80141b0:	4616      	mov	r6, r2
 80141b2:	f7ff feb7 	bl	8013f24 <__ulp>
 80141b6:	ec51 0b10 	vmov	r0, r1, d0
 80141ba:	b17e      	cbz	r6, 80141dc <sulp+0x36>
 80141bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80141c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	dd09      	ble.n	80141dc <sulp+0x36>
 80141c8:	051b      	lsls	r3, r3, #20
 80141ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80141ce:	2400      	movs	r4, #0
 80141d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80141d4:	4622      	mov	r2, r4
 80141d6:	462b      	mov	r3, r5
 80141d8:	f7ec fa36 	bl	8000648 <__aeabi_dmul>
 80141dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080141e0 <_strtod_l>:
 80141e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e4:	ed2d 8b02 	vpush	{d8}
 80141e8:	b09b      	sub	sp, #108	; 0x6c
 80141ea:	4604      	mov	r4, r0
 80141ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80141ee:	2200      	movs	r2, #0
 80141f0:	9216      	str	r2, [sp, #88]	; 0x58
 80141f2:	460d      	mov	r5, r1
 80141f4:	f04f 0800 	mov.w	r8, #0
 80141f8:	f04f 0900 	mov.w	r9, #0
 80141fc:	460a      	mov	r2, r1
 80141fe:	9215      	str	r2, [sp, #84]	; 0x54
 8014200:	7811      	ldrb	r1, [r2, #0]
 8014202:	292b      	cmp	r1, #43	; 0x2b
 8014204:	d04c      	beq.n	80142a0 <_strtod_l+0xc0>
 8014206:	d83a      	bhi.n	801427e <_strtod_l+0x9e>
 8014208:	290d      	cmp	r1, #13
 801420a:	d834      	bhi.n	8014276 <_strtod_l+0x96>
 801420c:	2908      	cmp	r1, #8
 801420e:	d834      	bhi.n	801427a <_strtod_l+0x9a>
 8014210:	2900      	cmp	r1, #0
 8014212:	d03d      	beq.n	8014290 <_strtod_l+0xb0>
 8014214:	2200      	movs	r2, #0
 8014216:	920a      	str	r2, [sp, #40]	; 0x28
 8014218:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801421a:	7832      	ldrb	r2, [r6, #0]
 801421c:	2a30      	cmp	r2, #48	; 0x30
 801421e:	f040 80b4 	bne.w	801438a <_strtod_l+0x1aa>
 8014222:	7872      	ldrb	r2, [r6, #1]
 8014224:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014228:	2a58      	cmp	r2, #88	; 0x58
 801422a:	d170      	bne.n	801430e <_strtod_l+0x12e>
 801422c:	9302      	str	r3, [sp, #8]
 801422e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014230:	9301      	str	r3, [sp, #4]
 8014232:	ab16      	add	r3, sp, #88	; 0x58
 8014234:	9300      	str	r3, [sp, #0]
 8014236:	4a8e      	ldr	r2, [pc, #568]	; (8014470 <_strtod_l+0x290>)
 8014238:	ab17      	add	r3, sp, #92	; 0x5c
 801423a:	a915      	add	r1, sp, #84	; 0x54
 801423c:	4620      	mov	r0, r4
 801423e:	f001 fac1 	bl	80157c4 <__gethex>
 8014242:	f010 070f 	ands.w	r7, r0, #15
 8014246:	4605      	mov	r5, r0
 8014248:	d005      	beq.n	8014256 <_strtod_l+0x76>
 801424a:	2f06      	cmp	r7, #6
 801424c:	d12a      	bne.n	80142a4 <_strtod_l+0xc4>
 801424e:	3601      	adds	r6, #1
 8014250:	2300      	movs	r3, #0
 8014252:	9615      	str	r6, [sp, #84]	; 0x54
 8014254:	930a      	str	r3, [sp, #40]	; 0x28
 8014256:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014258:	2b00      	cmp	r3, #0
 801425a:	f040 857f 	bne.w	8014d5c <_strtod_l+0xb7c>
 801425e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014260:	b1db      	cbz	r3, 801429a <_strtod_l+0xba>
 8014262:	4642      	mov	r2, r8
 8014264:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014268:	ec43 2b10 	vmov	d0, r2, r3
 801426c:	b01b      	add	sp, #108	; 0x6c
 801426e:	ecbd 8b02 	vpop	{d8}
 8014272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014276:	2920      	cmp	r1, #32
 8014278:	d1cc      	bne.n	8014214 <_strtod_l+0x34>
 801427a:	3201      	adds	r2, #1
 801427c:	e7bf      	b.n	80141fe <_strtod_l+0x1e>
 801427e:	292d      	cmp	r1, #45	; 0x2d
 8014280:	d1c8      	bne.n	8014214 <_strtod_l+0x34>
 8014282:	2101      	movs	r1, #1
 8014284:	910a      	str	r1, [sp, #40]	; 0x28
 8014286:	1c51      	adds	r1, r2, #1
 8014288:	9115      	str	r1, [sp, #84]	; 0x54
 801428a:	7852      	ldrb	r2, [r2, #1]
 801428c:	2a00      	cmp	r2, #0
 801428e:	d1c3      	bne.n	8014218 <_strtod_l+0x38>
 8014290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014292:	9515      	str	r5, [sp, #84]	; 0x54
 8014294:	2b00      	cmp	r3, #0
 8014296:	f040 855f 	bne.w	8014d58 <_strtod_l+0xb78>
 801429a:	4642      	mov	r2, r8
 801429c:	464b      	mov	r3, r9
 801429e:	e7e3      	b.n	8014268 <_strtod_l+0x88>
 80142a0:	2100      	movs	r1, #0
 80142a2:	e7ef      	b.n	8014284 <_strtod_l+0xa4>
 80142a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80142a6:	b13a      	cbz	r2, 80142b8 <_strtod_l+0xd8>
 80142a8:	2135      	movs	r1, #53	; 0x35
 80142aa:	a818      	add	r0, sp, #96	; 0x60
 80142ac:	f7ff ff37 	bl	801411e <__copybits>
 80142b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80142b2:	4620      	mov	r0, r4
 80142b4:	f7ff fb0a 	bl	80138cc <_Bfree>
 80142b8:	3f01      	subs	r7, #1
 80142ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80142bc:	2f04      	cmp	r7, #4
 80142be:	d806      	bhi.n	80142ce <_strtod_l+0xee>
 80142c0:	e8df f007 	tbb	[pc, r7]
 80142c4:	201d0314 	.word	0x201d0314
 80142c8:	14          	.byte	0x14
 80142c9:	00          	.byte	0x00
 80142ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80142ce:	05e9      	lsls	r1, r5, #23
 80142d0:	bf48      	it	mi
 80142d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80142d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80142da:	0d1b      	lsrs	r3, r3, #20
 80142dc:	051b      	lsls	r3, r3, #20
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d1b9      	bne.n	8014256 <_strtod_l+0x76>
 80142e2:	f7fe fbab 	bl	8012a3c <__errno>
 80142e6:	2322      	movs	r3, #34	; 0x22
 80142e8:	6003      	str	r3, [r0, #0]
 80142ea:	e7b4      	b.n	8014256 <_strtod_l+0x76>
 80142ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80142f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80142f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80142f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80142fc:	e7e7      	b.n	80142ce <_strtod_l+0xee>
 80142fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014478 <_strtod_l+0x298>
 8014302:	e7e4      	b.n	80142ce <_strtod_l+0xee>
 8014304:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014308:	f04f 38ff 	mov.w	r8, #4294967295
 801430c:	e7df      	b.n	80142ce <_strtod_l+0xee>
 801430e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014310:	1c5a      	adds	r2, r3, #1
 8014312:	9215      	str	r2, [sp, #84]	; 0x54
 8014314:	785b      	ldrb	r3, [r3, #1]
 8014316:	2b30      	cmp	r3, #48	; 0x30
 8014318:	d0f9      	beq.n	801430e <_strtod_l+0x12e>
 801431a:	2b00      	cmp	r3, #0
 801431c:	d09b      	beq.n	8014256 <_strtod_l+0x76>
 801431e:	2301      	movs	r3, #1
 8014320:	f04f 0a00 	mov.w	sl, #0
 8014324:	9304      	str	r3, [sp, #16]
 8014326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014328:	930b      	str	r3, [sp, #44]	; 0x2c
 801432a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801432e:	46d3      	mov	fp, sl
 8014330:	220a      	movs	r2, #10
 8014332:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014334:	7806      	ldrb	r6, [r0, #0]
 8014336:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801433a:	b2d9      	uxtb	r1, r3
 801433c:	2909      	cmp	r1, #9
 801433e:	d926      	bls.n	801438e <_strtod_l+0x1ae>
 8014340:	494c      	ldr	r1, [pc, #304]	; (8014474 <_strtod_l+0x294>)
 8014342:	2201      	movs	r2, #1
 8014344:	f001 f9a6 	bl	8015694 <strncmp>
 8014348:	2800      	cmp	r0, #0
 801434a:	d030      	beq.n	80143ae <_strtod_l+0x1ce>
 801434c:	2000      	movs	r0, #0
 801434e:	4632      	mov	r2, r6
 8014350:	9005      	str	r0, [sp, #20]
 8014352:	465e      	mov	r6, fp
 8014354:	4603      	mov	r3, r0
 8014356:	2a65      	cmp	r2, #101	; 0x65
 8014358:	d001      	beq.n	801435e <_strtod_l+0x17e>
 801435a:	2a45      	cmp	r2, #69	; 0x45
 801435c:	d113      	bne.n	8014386 <_strtod_l+0x1a6>
 801435e:	b91e      	cbnz	r6, 8014368 <_strtod_l+0x188>
 8014360:	9a04      	ldr	r2, [sp, #16]
 8014362:	4302      	orrs	r2, r0
 8014364:	d094      	beq.n	8014290 <_strtod_l+0xb0>
 8014366:	2600      	movs	r6, #0
 8014368:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801436a:	1c6a      	adds	r2, r5, #1
 801436c:	9215      	str	r2, [sp, #84]	; 0x54
 801436e:	786a      	ldrb	r2, [r5, #1]
 8014370:	2a2b      	cmp	r2, #43	; 0x2b
 8014372:	d074      	beq.n	801445e <_strtod_l+0x27e>
 8014374:	2a2d      	cmp	r2, #45	; 0x2d
 8014376:	d078      	beq.n	801446a <_strtod_l+0x28a>
 8014378:	f04f 0c00 	mov.w	ip, #0
 801437c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014380:	2909      	cmp	r1, #9
 8014382:	d97f      	bls.n	8014484 <_strtod_l+0x2a4>
 8014384:	9515      	str	r5, [sp, #84]	; 0x54
 8014386:	2700      	movs	r7, #0
 8014388:	e09e      	b.n	80144c8 <_strtod_l+0x2e8>
 801438a:	2300      	movs	r3, #0
 801438c:	e7c8      	b.n	8014320 <_strtod_l+0x140>
 801438e:	f1bb 0f08 	cmp.w	fp, #8
 8014392:	bfd8      	it	le
 8014394:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014396:	f100 0001 	add.w	r0, r0, #1
 801439a:	bfda      	itte	le
 801439c:	fb02 3301 	mlale	r3, r2, r1, r3
 80143a0:	9309      	strle	r3, [sp, #36]	; 0x24
 80143a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80143a6:	f10b 0b01 	add.w	fp, fp, #1
 80143aa:	9015      	str	r0, [sp, #84]	; 0x54
 80143ac:	e7c1      	b.n	8014332 <_strtod_l+0x152>
 80143ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143b0:	1c5a      	adds	r2, r3, #1
 80143b2:	9215      	str	r2, [sp, #84]	; 0x54
 80143b4:	785a      	ldrb	r2, [r3, #1]
 80143b6:	f1bb 0f00 	cmp.w	fp, #0
 80143ba:	d037      	beq.n	801442c <_strtod_l+0x24c>
 80143bc:	9005      	str	r0, [sp, #20]
 80143be:	465e      	mov	r6, fp
 80143c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80143c4:	2b09      	cmp	r3, #9
 80143c6:	d912      	bls.n	80143ee <_strtod_l+0x20e>
 80143c8:	2301      	movs	r3, #1
 80143ca:	e7c4      	b.n	8014356 <_strtod_l+0x176>
 80143cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143ce:	1c5a      	adds	r2, r3, #1
 80143d0:	9215      	str	r2, [sp, #84]	; 0x54
 80143d2:	785a      	ldrb	r2, [r3, #1]
 80143d4:	3001      	adds	r0, #1
 80143d6:	2a30      	cmp	r2, #48	; 0x30
 80143d8:	d0f8      	beq.n	80143cc <_strtod_l+0x1ec>
 80143da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80143de:	2b08      	cmp	r3, #8
 80143e0:	f200 84c1 	bhi.w	8014d66 <_strtod_l+0xb86>
 80143e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143e6:	9005      	str	r0, [sp, #20]
 80143e8:	2000      	movs	r0, #0
 80143ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80143ec:	4606      	mov	r6, r0
 80143ee:	3a30      	subs	r2, #48	; 0x30
 80143f0:	f100 0301 	add.w	r3, r0, #1
 80143f4:	d014      	beq.n	8014420 <_strtod_l+0x240>
 80143f6:	9905      	ldr	r1, [sp, #20]
 80143f8:	4419      	add	r1, r3
 80143fa:	9105      	str	r1, [sp, #20]
 80143fc:	4633      	mov	r3, r6
 80143fe:	eb00 0c06 	add.w	ip, r0, r6
 8014402:	210a      	movs	r1, #10
 8014404:	4563      	cmp	r3, ip
 8014406:	d113      	bne.n	8014430 <_strtod_l+0x250>
 8014408:	1833      	adds	r3, r6, r0
 801440a:	2b08      	cmp	r3, #8
 801440c:	f106 0601 	add.w	r6, r6, #1
 8014410:	4406      	add	r6, r0
 8014412:	dc1a      	bgt.n	801444a <_strtod_l+0x26a>
 8014414:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014416:	230a      	movs	r3, #10
 8014418:	fb03 2301 	mla	r3, r3, r1, r2
 801441c:	9309      	str	r3, [sp, #36]	; 0x24
 801441e:	2300      	movs	r3, #0
 8014420:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014422:	1c51      	adds	r1, r2, #1
 8014424:	9115      	str	r1, [sp, #84]	; 0x54
 8014426:	7852      	ldrb	r2, [r2, #1]
 8014428:	4618      	mov	r0, r3
 801442a:	e7c9      	b.n	80143c0 <_strtod_l+0x1e0>
 801442c:	4658      	mov	r0, fp
 801442e:	e7d2      	b.n	80143d6 <_strtod_l+0x1f6>
 8014430:	2b08      	cmp	r3, #8
 8014432:	f103 0301 	add.w	r3, r3, #1
 8014436:	dc03      	bgt.n	8014440 <_strtod_l+0x260>
 8014438:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801443a:	434f      	muls	r7, r1
 801443c:	9709      	str	r7, [sp, #36]	; 0x24
 801443e:	e7e1      	b.n	8014404 <_strtod_l+0x224>
 8014440:	2b10      	cmp	r3, #16
 8014442:	bfd8      	it	le
 8014444:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014448:	e7dc      	b.n	8014404 <_strtod_l+0x224>
 801444a:	2e10      	cmp	r6, #16
 801444c:	bfdc      	itt	le
 801444e:	230a      	movle	r3, #10
 8014450:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014454:	e7e3      	b.n	801441e <_strtod_l+0x23e>
 8014456:	2300      	movs	r3, #0
 8014458:	9305      	str	r3, [sp, #20]
 801445a:	2301      	movs	r3, #1
 801445c:	e780      	b.n	8014360 <_strtod_l+0x180>
 801445e:	f04f 0c00 	mov.w	ip, #0
 8014462:	1caa      	adds	r2, r5, #2
 8014464:	9215      	str	r2, [sp, #84]	; 0x54
 8014466:	78aa      	ldrb	r2, [r5, #2]
 8014468:	e788      	b.n	801437c <_strtod_l+0x19c>
 801446a:	f04f 0c01 	mov.w	ip, #1
 801446e:	e7f8      	b.n	8014462 <_strtod_l+0x282>
 8014470:	08017358 	.word	0x08017358
 8014474:	08017354 	.word	0x08017354
 8014478:	7ff00000 	.word	0x7ff00000
 801447c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801447e:	1c51      	adds	r1, r2, #1
 8014480:	9115      	str	r1, [sp, #84]	; 0x54
 8014482:	7852      	ldrb	r2, [r2, #1]
 8014484:	2a30      	cmp	r2, #48	; 0x30
 8014486:	d0f9      	beq.n	801447c <_strtod_l+0x29c>
 8014488:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801448c:	2908      	cmp	r1, #8
 801448e:	f63f af7a 	bhi.w	8014386 <_strtod_l+0x1a6>
 8014492:	3a30      	subs	r2, #48	; 0x30
 8014494:	9208      	str	r2, [sp, #32]
 8014496:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014498:	920c      	str	r2, [sp, #48]	; 0x30
 801449a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801449c:	1c57      	adds	r7, r2, #1
 801449e:	9715      	str	r7, [sp, #84]	; 0x54
 80144a0:	7852      	ldrb	r2, [r2, #1]
 80144a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80144a6:	f1be 0f09 	cmp.w	lr, #9
 80144aa:	d938      	bls.n	801451e <_strtod_l+0x33e>
 80144ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80144ae:	1a7f      	subs	r7, r7, r1
 80144b0:	2f08      	cmp	r7, #8
 80144b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80144b6:	dc03      	bgt.n	80144c0 <_strtod_l+0x2e0>
 80144b8:	9908      	ldr	r1, [sp, #32]
 80144ba:	428f      	cmp	r7, r1
 80144bc:	bfa8      	it	ge
 80144be:	460f      	movge	r7, r1
 80144c0:	f1bc 0f00 	cmp.w	ip, #0
 80144c4:	d000      	beq.n	80144c8 <_strtod_l+0x2e8>
 80144c6:	427f      	negs	r7, r7
 80144c8:	2e00      	cmp	r6, #0
 80144ca:	d14f      	bne.n	801456c <_strtod_l+0x38c>
 80144cc:	9904      	ldr	r1, [sp, #16]
 80144ce:	4301      	orrs	r1, r0
 80144d0:	f47f aec1 	bne.w	8014256 <_strtod_l+0x76>
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	f47f aedb 	bne.w	8014290 <_strtod_l+0xb0>
 80144da:	2a69      	cmp	r2, #105	; 0x69
 80144dc:	d029      	beq.n	8014532 <_strtod_l+0x352>
 80144de:	dc26      	bgt.n	801452e <_strtod_l+0x34e>
 80144e0:	2a49      	cmp	r2, #73	; 0x49
 80144e2:	d026      	beq.n	8014532 <_strtod_l+0x352>
 80144e4:	2a4e      	cmp	r2, #78	; 0x4e
 80144e6:	f47f aed3 	bne.w	8014290 <_strtod_l+0xb0>
 80144ea:	499b      	ldr	r1, [pc, #620]	; (8014758 <_strtod_l+0x578>)
 80144ec:	a815      	add	r0, sp, #84	; 0x54
 80144ee:	f001 fba9 	bl	8015c44 <__match>
 80144f2:	2800      	cmp	r0, #0
 80144f4:	f43f aecc 	beq.w	8014290 <_strtod_l+0xb0>
 80144f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	2b28      	cmp	r3, #40	; 0x28
 80144fe:	d12f      	bne.n	8014560 <_strtod_l+0x380>
 8014500:	4996      	ldr	r1, [pc, #600]	; (801475c <_strtod_l+0x57c>)
 8014502:	aa18      	add	r2, sp, #96	; 0x60
 8014504:	a815      	add	r0, sp, #84	; 0x54
 8014506:	f001 fbb1 	bl	8015c6c <__hexnan>
 801450a:	2805      	cmp	r0, #5
 801450c:	d128      	bne.n	8014560 <_strtod_l+0x380>
 801450e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014510:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014514:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014518:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801451c:	e69b      	b.n	8014256 <_strtod_l+0x76>
 801451e:	9f08      	ldr	r7, [sp, #32]
 8014520:	210a      	movs	r1, #10
 8014522:	fb01 2107 	mla	r1, r1, r7, r2
 8014526:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801452a:	9208      	str	r2, [sp, #32]
 801452c:	e7b5      	b.n	801449a <_strtod_l+0x2ba>
 801452e:	2a6e      	cmp	r2, #110	; 0x6e
 8014530:	e7d9      	b.n	80144e6 <_strtod_l+0x306>
 8014532:	498b      	ldr	r1, [pc, #556]	; (8014760 <_strtod_l+0x580>)
 8014534:	a815      	add	r0, sp, #84	; 0x54
 8014536:	f001 fb85 	bl	8015c44 <__match>
 801453a:	2800      	cmp	r0, #0
 801453c:	f43f aea8 	beq.w	8014290 <_strtod_l+0xb0>
 8014540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014542:	4988      	ldr	r1, [pc, #544]	; (8014764 <_strtod_l+0x584>)
 8014544:	3b01      	subs	r3, #1
 8014546:	a815      	add	r0, sp, #84	; 0x54
 8014548:	9315      	str	r3, [sp, #84]	; 0x54
 801454a:	f001 fb7b 	bl	8015c44 <__match>
 801454e:	b910      	cbnz	r0, 8014556 <_strtod_l+0x376>
 8014550:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014552:	3301      	adds	r3, #1
 8014554:	9315      	str	r3, [sp, #84]	; 0x54
 8014556:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014774 <_strtod_l+0x594>
 801455a:	f04f 0800 	mov.w	r8, #0
 801455e:	e67a      	b.n	8014256 <_strtod_l+0x76>
 8014560:	4881      	ldr	r0, [pc, #516]	; (8014768 <_strtod_l+0x588>)
 8014562:	f001 f8a9 	bl	80156b8 <nan>
 8014566:	ec59 8b10 	vmov	r8, r9, d0
 801456a:	e674      	b.n	8014256 <_strtod_l+0x76>
 801456c:	9b05      	ldr	r3, [sp, #20]
 801456e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014570:	1afb      	subs	r3, r7, r3
 8014572:	f1bb 0f00 	cmp.w	fp, #0
 8014576:	bf08      	it	eq
 8014578:	46b3      	moveq	fp, r6
 801457a:	2e10      	cmp	r6, #16
 801457c:	9308      	str	r3, [sp, #32]
 801457e:	4635      	mov	r5, r6
 8014580:	bfa8      	it	ge
 8014582:	2510      	movge	r5, #16
 8014584:	f7eb ffe6 	bl	8000554 <__aeabi_ui2d>
 8014588:	2e09      	cmp	r6, #9
 801458a:	4680      	mov	r8, r0
 801458c:	4689      	mov	r9, r1
 801458e:	dd13      	ble.n	80145b8 <_strtod_l+0x3d8>
 8014590:	4b76      	ldr	r3, [pc, #472]	; (801476c <_strtod_l+0x58c>)
 8014592:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014596:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801459a:	f7ec f855 	bl	8000648 <__aeabi_dmul>
 801459e:	4680      	mov	r8, r0
 80145a0:	4650      	mov	r0, sl
 80145a2:	4689      	mov	r9, r1
 80145a4:	f7eb ffd6 	bl	8000554 <__aeabi_ui2d>
 80145a8:	4602      	mov	r2, r0
 80145aa:	460b      	mov	r3, r1
 80145ac:	4640      	mov	r0, r8
 80145ae:	4649      	mov	r1, r9
 80145b0:	f7eb fe94 	bl	80002dc <__adddf3>
 80145b4:	4680      	mov	r8, r0
 80145b6:	4689      	mov	r9, r1
 80145b8:	2e0f      	cmp	r6, #15
 80145ba:	dc38      	bgt.n	801462e <_strtod_l+0x44e>
 80145bc:	9b08      	ldr	r3, [sp, #32]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	f43f ae49 	beq.w	8014256 <_strtod_l+0x76>
 80145c4:	dd24      	ble.n	8014610 <_strtod_l+0x430>
 80145c6:	2b16      	cmp	r3, #22
 80145c8:	dc0b      	bgt.n	80145e2 <_strtod_l+0x402>
 80145ca:	4968      	ldr	r1, [pc, #416]	; (801476c <_strtod_l+0x58c>)
 80145cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80145d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145d4:	4642      	mov	r2, r8
 80145d6:	464b      	mov	r3, r9
 80145d8:	f7ec f836 	bl	8000648 <__aeabi_dmul>
 80145dc:	4680      	mov	r8, r0
 80145de:	4689      	mov	r9, r1
 80145e0:	e639      	b.n	8014256 <_strtod_l+0x76>
 80145e2:	9a08      	ldr	r2, [sp, #32]
 80145e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80145e8:	4293      	cmp	r3, r2
 80145ea:	db20      	blt.n	801462e <_strtod_l+0x44e>
 80145ec:	4c5f      	ldr	r4, [pc, #380]	; (801476c <_strtod_l+0x58c>)
 80145ee:	f1c6 060f 	rsb	r6, r6, #15
 80145f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80145f6:	4642      	mov	r2, r8
 80145f8:	464b      	mov	r3, r9
 80145fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145fe:	f7ec f823 	bl	8000648 <__aeabi_dmul>
 8014602:	9b08      	ldr	r3, [sp, #32]
 8014604:	1b9e      	subs	r6, r3, r6
 8014606:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801460a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801460e:	e7e3      	b.n	80145d8 <_strtod_l+0x3f8>
 8014610:	9b08      	ldr	r3, [sp, #32]
 8014612:	3316      	adds	r3, #22
 8014614:	db0b      	blt.n	801462e <_strtod_l+0x44e>
 8014616:	9b05      	ldr	r3, [sp, #20]
 8014618:	1bdf      	subs	r7, r3, r7
 801461a:	4b54      	ldr	r3, [pc, #336]	; (801476c <_strtod_l+0x58c>)
 801461c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014624:	4640      	mov	r0, r8
 8014626:	4649      	mov	r1, r9
 8014628:	f7ec f938 	bl	800089c <__aeabi_ddiv>
 801462c:	e7d6      	b.n	80145dc <_strtod_l+0x3fc>
 801462e:	9b08      	ldr	r3, [sp, #32]
 8014630:	1b75      	subs	r5, r6, r5
 8014632:	441d      	add	r5, r3
 8014634:	2d00      	cmp	r5, #0
 8014636:	dd70      	ble.n	801471a <_strtod_l+0x53a>
 8014638:	f015 030f 	ands.w	r3, r5, #15
 801463c:	d00a      	beq.n	8014654 <_strtod_l+0x474>
 801463e:	494b      	ldr	r1, [pc, #300]	; (801476c <_strtod_l+0x58c>)
 8014640:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014644:	4642      	mov	r2, r8
 8014646:	464b      	mov	r3, r9
 8014648:	e9d1 0100 	ldrd	r0, r1, [r1]
 801464c:	f7eb fffc 	bl	8000648 <__aeabi_dmul>
 8014650:	4680      	mov	r8, r0
 8014652:	4689      	mov	r9, r1
 8014654:	f035 050f 	bics.w	r5, r5, #15
 8014658:	d04d      	beq.n	80146f6 <_strtod_l+0x516>
 801465a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801465e:	dd22      	ble.n	80146a6 <_strtod_l+0x4c6>
 8014660:	2500      	movs	r5, #0
 8014662:	46ab      	mov	fp, r5
 8014664:	9509      	str	r5, [sp, #36]	; 0x24
 8014666:	9505      	str	r5, [sp, #20]
 8014668:	2322      	movs	r3, #34	; 0x22
 801466a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014774 <_strtod_l+0x594>
 801466e:	6023      	str	r3, [r4, #0]
 8014670:	f04f 0800 	mov.w	r8, #0
 8014674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014676:	2b00      	cmp	r3, #0
 8014678:	f43f aded 	beq.w	8014256 <_strtod_l+0x76>
 801467c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801467e:	4620      	mov	r0, r4
 8014680:	f7ff f924 	bl	80138cc <_Bfree>
 8014684:	9905      	ldr	r1, [sp, #20]
 8014686:	4620      	mov	r0, r4
 8014688:	f7ff f920 	bl	80138cc <_Bfree>
 801468c:	4659      	mov	r1, fp
 801468e:	4620      	mov	r0, r4
 8014690:	f7ff f91c 	bl	80138cc <_Bfree>
 8014694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014696:	4620      	mov	r0, r4
 8014698:	f7ff f918 	bl	80138cc <_Bfree>
 801469c:	4629      	mov	r1, r5
 801469e:	4620      	mov	r0, r4
 80146a0:	f7ff f914 	bl	80138cc <_Bfree>
 80146a4:	e5d7      	b.n	8014256 <_strtod_l+0x76>
 80146a6:	4b32      	ldr	r3, [pc, #200]	; (8014770 <_strtod_l+0x590>)
 80146a8:	9304      	str	r3, [sp, #16]
 80146aa:	2300      	movs	r3, #0
 80146ac:	112d      	asrs	r5, r5, #4
 80146ae:	4640      	mov	r0, r8
 80146b0:	4649      	mov	r1, r9
 80146b2:	469a      	mov	sl, r3
 80146b4:	2d01      	cmp	r5, #1
 80146b6:	dc21      	bgt.n	80146fc <_strtod_l+0x51c>
 80146b8:	b10b      	cbz	r3, 80146be <_strtod_l+0x4de>
 80146ba:	4680      	mov	r8, r0
 80146bc:	4689      	mov	r9, r1
 80146be:	492c      	ldr	r1, [pc, #176]	; (8014770 <_strtod_l+0x590>)
 80146c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80146c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80146c8:	4642      	mov	r2, r8
 80146ca:	464b      	mov	r3, r9
 80146cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146d0:	f7eb ffba 	bl	8000648 <__aeabi_dmul>
 80146d4:	4b27      	ldr	r3, [pc, #156]	; (8014774 <_strtod_l+0x594>)
 80146d6:	460a      	mov	r2, r1
 80146d8:	400b      	ands	r3, r1
 80146da:	4927      	ldr	r1, [pc, #156]	; (8014778 <_strtod_l+0x598>)
 80146dc:	428b      	cmp	r3, r1
 80146de:	4680      	mov	r8, r0
 80146e0:	d8be      	bhi.n	8014660 <_strtod_l+0x480>
 80146e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80146e6:	428b      	cmp	r3, r1
 80146e8:	bf86      	itte	hi
 80146ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801477c <_strtod_l+0x59c>
 80146ee:	f04f 38ff 	movhi.w	r8, #4294967295
 80146f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80146f6:	2300      	movs	r3, #0
 80146f8:	9304      	str	r3, [sp, #16]
 80146fa:	e07b      	b.n	80147f4 <_strtod_l+0x614>
 80146fc:	07ea      	lsls	r2, r5, #31
 80146fe:	d505      	bpl.n	801470c <_strtod_l+0x52c>
 8014700:	9b04      	ldr	r3, [sp, #16]
 8014702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014706:	f7eb ff9f 	bl	8000648 <__aeabi_dmul>
 801470a:	2301      	movs	r3, #1
 801470c:	9a04      	ldr	r2, [sp, #16]
 801470e:	3208      	adds	r2, #8
 8014710:	f10a 0a01 	add.w	sl, sl, #1
 8014714:	106d      	asrs	r5, r5, #1
 8014716:	9204      	str	r2, [sp, #16]
 8014718:	e7cc      	b.n	80146b4 <_strtod_l+0x4d4>
 801471a:	d0ec      	beq.n	80146f6 <_strtod_l+0x516>
 801471c:	426d      	negs	r5, r5
 801471e:	f015 020f 	ands.w	r2, r5, #15
 8014722:	d00a      	beq.n	801473a <_strtod_l+0x55a>
 8014724:	4b11      	ldr	r3, [pc, #68]	; (801476c <_strtod_l+0x58c>)
 8014726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801472a:	4640      	mov	r0, r8
 801472c:	4649      	mov	r1, r9
 801472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014732:	f7ec f8b3 	bl	800089c <__aeabi_ddiv>
 8014736:	4680      	mov	r8, r0
 8014738:	4689      	mov	r9, r1
 801473a:	112d      	asrs	r5, r5, #4
 801473c:	d0db      	beq.n	80146f6 <_strtod_l+0x516>
 801473e:	2d1f      	cmp	r5, #31
 8014740:	dd1e      	ble.n	8014780 <_strtod_l+0x5a0>
 8014742:	2500      	movs	r5, #0
 8014744:	46ab      	mov	fp, r5
 8014746:	9509      	str	r5, [sp, #36]	; 0x24
 8014748:	9505      	str	r5, [sp, #20]
 801474a:	2322      	movs	r3, #34	; 0x22
 801474c:	f04f 0800 	mov.w	r8, #0
 8014750:	f04f 0900 	mov.w	r9, #0
 8014754:	6023      	str	r3, [r4, #0]
 8014756:	e78d      	b.n	8014674 <_strtod_l+0x494>
 8014758:	08017141 	.word	0x08017141
 801475c:	0801736c 	.word	0x0801736c
 8014760:	08017139 	.word	0x08017139
 8014764:	08017170 	.word	0x08017170
 8014768:	08017133 	.word	0x08017133
 801476c:	08017280 	.word	0x08017280
 8014770:	08017258 	.word	0x08017258
 8014774:	7ff00000 	.word	0x7ff00000
 8014778:	7ca00000 	.word	0x7ca00000
 801477c:	7fefffff 	.word	0x7fefffff
 8014780:	f015 0310 	ands.w	r3, r5, #16
 8014784:	bf18      	it	ne
 8014786:	236a      	movne	r3, #106	; 0x6a
 8014788:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8014b2c <_strtod_l+0x94c>
 801478c:	9304      	str	r3, [sp, #16]
 801478e:	4640      	mov	r0, r8
 8014790:	4649      	mov	r1, r9
 8014792:	2300      	movs	r3, #0
 8014794:	07ea      	lsls	r2, r5, #31
 8014796:	d504      	bpl.n	80147a2 <_strtod_l+0x5c2>
 8014798:	e9da 2300 	ldrd	r2, r3, [sl]
 801479c:	f7eb ff54 	bl	8000648 <__aeabi_dmul>
 80147a0:	2301      	movs	r3, #1
 80147a2:	106d      	asrs	r5, r5, #1
 80147a4:	f10a 0a08 	add.w	sl, sl, #8
 80147a8:	d1f4      	bne.n	8014794 <_strtod_l+0x5b4>
 80147aa:	b10b      	cbz	r3, 80147b0 <_strtod_l+0x5d0>
 80147ac:	4680      	mov	r8, r0
 80147ae:	4689      	mov	r9, r1
 80147b0:	9b04      	ldr	r3, [sp, #16]
 80147b2:	b1bb      	cbz	r3, 80147e4 <_strtod_l+0x604>
 80147b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80147b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80147bc:	2b00      	cmp	r3, #0
 80147be:	4649      	mov	r1, r9
 80147c0:	dd10      	ble.n	80147e4 <_strtod_l+0x604>
 80147c2:	2b1f      	cmp	r3, #31
 80147c4:	f340 811e 	ble.w	8014a04 <_strtod_l+0x824>
 80147c8:	2b34      	cmp	r3, #52	; 0x34
 80147ca:	bfde      	ittt	le
 80147cc:	f04f 33ff 	movle.w	r3, #4294967295
 80147d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80147d4:	4093      	lslle	r3, r2
 80147d6:	f04f 0800 	mov.w	r8, #0
 80147da:	bfcc      	ite	gt
 80147dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80147e0:	ea03 0901 	andle.w	r9, r3, r1
 80147e4:	2200      	movs	r2, #0
 80147e6:	2300      	movs	r3, #0
 80147e8:	4640      	mov	r0, r8
 80147ea:	4649      	mov	r1, r9
 80147ec:	f7ec f994 	bl	8000b18 <__aeabi_dcmpeq>
 80147f0:	2800      	cmp	r0, #0
 80147f2:	d1a6      	bne.n	8014742 <_strtod_l+0x562>
 80147f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147f6:	9300      	str	r3, [sp, #0]
 80147f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147fa:	4633      	mov	r3, r6
 80147fc:	465a      	mov	r2, fp
 80147fe:	4620      	mov	r0, r4
 8014800:	f7ff f8cc 	bl	801399c <__s2b>
 8014804:	9009      	str	r0, [sp, #36]	; 0x24
 8014806:	2800      	cmp	r0, #0
 8014808:	f43f af2a 	beq.w	8014660 <_strtod_l+0x480>
 801480c:	9a08      	ldr	r2, [sp, #32]
 801480e:	9b05      	ldr	r3, [sp, #20]
 8014810:	2a00      	cmp	r2, #0
 8014812:	eba3 0307 	sub.w	r3, r3, r7
 8014816:	bfa8      	it	ge
 8014818:	2300      	movge	r3, #0
 801481a:	930c      	str	r3, [sp, #48]	; 0x30
 801481c:	2500      	movs	r5, #0
 801481e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014822:	9312      	str	r3, [sp, #72]	; 0x48
 8014824:	46ab      	mov	fp, r5
 8014826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014828:	4620      	mov	r0, r4
 801482a:	6859      	ldr	r1, [r3, #4]
 801482c:	f7ff f80e 	bl	801384c <_Balloc>
 8014830:	9005      	str	r0, [sp, #20]
 8014832:	2800      	cmp	r0, #0
 8014834:	f43f af18 	beq.w	8014668 <_strtod_l+0x488>
 8014838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801483a:	691a      	ldr	r2, [r3, #16]
 801483c:	3202      	adds	r2, #2
 801483e:	f103 010c 	add.w	r1, r3, #12
 8014842:	0092      	lsls	r2, r2, #2
 8014844:	300c      	adds	r0, #12
 8014846:	f7fe f926 	bl	8012a96 <memcpy>
 801484a:	ec49 8b10 	vmov	d0, r8, r9
 801484e:	aa18      	add	r2, sp, #96	; 0x60
 8014850:	a917      	add	r1, sp, #92	; 0x5c
 8014852:	4620      	mov	r0, r4
 8014854:	f7ff fbd6 	bl	8014004 <__d2b>
 8014858:	ec49 8b18 	vmov	d8, r8, r9
 801485c:	9016      	str	r0, [sp, #88]	; 0x58
 801485e:	2800      	cmp	r0, #0
 8014860:	f43f af02 	beq.w	8014668 <_strtod_l+0x488>
 8014864:	2101      	movs	r1, #1
 8014866:	4620      	mov	r0, r4
 8014868:	f7ff f930 	bl	8013acc <__i2b>
 801486c:	4683      	mov	fp, r0
 801486e:	2800      	cmp	r0, #0
 8014870:	f43f aefa 	beq.w	8014668 <_strtod_l+0x488>
 8014874:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014876:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014878:	2e00      	cmp	r6, #0
 801487a:	bfab      	itete	ge
 801487c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801487e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014880:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014882:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014886:	bfac      	ite	ge
 8014888:	eb06 0a03 	addge.w	sl, r6, r3
 801488c:	1b9f      	sublt	r7, r3, r6
 801488e:	9b04      	ldr	r3, [sp, #16]
 8014890:	1af6      	subs	r6, r6, r3
 8014892:	4416      	add	r6, r2
 8014894:	4ba0      	ldr	r3, [pc, #640]	; (8014b18 <_strtod_l+0x938>)
 8014896:	3e01      	subs	r6, #1
 8014898:	429e      	cmp	r6, r3
 801489a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801489e:	f280 80c4 	bge.w	8014a2a <_strtod_l+0x84a>
 80148a2:	1b9b      	subs	r3, r3, r6
 80148a4:	2b1f      	cmp	r3, #31
 80148a6:	eba2 0203 	sub.w	r2, r2, r3
 80148aa:	f04f 0101 	mov.w	r1, #1
 80148ae:	f300 80b0 	bgt.w	8014a12 <_strtod_l+0x832>
 80148b2:	fa01 f303 	lsl.w	r3, r1, r3
 80148b6:	930e      	str	r3, [sp, #56]	; 0x38
 80148b8:	2300      	movs	r3, #0
 80148ba:	930d      	str	r3, [sp, #52]	; 0x34
 80148bc:	eb0a 0602 	add.w	r6, sl, r2
 80148c0:	9b04      	ldr	r3, [sp, #16]
 80148c2:	45b2      	cmp	sl, r6
 80148c4:	4417      	add	r7, r2
 80148c6:	441f      	add	r7, r3
 80148c8:	4653      	mov	r3, sl
 80148ca:	bfa8      	it	ge
 80148cc:	4633      	movge	r3, r6
 80148ce:	42bb      	cmp	r3, r7
 80148d0:	bfa8      	it	ge
 80148d2:	463b      	movge	r3, r7
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	bfc2      	ittt	gt
 80148d8:	1af6      	subgt	r6, r6, r3
 80148da:	1aff      	subgt	r7, r7, r3
 80148dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80148e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	dd17      	ble.n	8014916 <_strtod_l+0x736>
 80148e6:	4659      	mov	r1, fp
 80148e8:	461a      	mov	r2, r3
 80148ea:	4620      	mov	r0, r4
 80148ec:	f7ff f9ae 	bl	8013c4c <__pow5mult>
 80148f0:	4683      	mov	fp, r0
 80148f2:	2800      	cmp	r0, #0
 80148f4:	f43f aeb8 	beq.w	8014668 <_strtod_l+0x488>
 80148f8:	4601      	mov	r1, r0
 80148fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80148fc:	4620      	mov	r0, r4
 80148fe:	f7ff f8fb 	bl	8013af8 <__multiply>
 8014902:	900b      	str	r0, [sp, #44]	; 0x2c
 8014904:	2800      	cmp	r0, #0
 8014906:	f43f aeaf 	beq.w	8014668 <_strtod_l+0x488>
 801490a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801490c:	4620      	mov	r0, r4
 801490e:	f7fe ffdd 	bl	80138cc <_Bfree>
 8014912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014914:	9316      	str	r3, [sp, #88]	; 0x58
 8014916:	2e00      	cmp	r6, #0
 8014918:	f300 808c 	bgt.w	8014a34 <_strtod_l+0x854>
 801491c:	9b08      	ldr	r3, [sp, #32]
 801491e:	2b00      	cmp	r3, #0
 8014920:	dd08      	ble.n	8014934 <_strtod_l+0x754>
 8014922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014924:	9905      	ldr	r1, [sp, #20]
 8014926:	4620      	mov	r0, r4
 8014928:	f7ff f990 	bl	8013c4c <__pow5mult>
 801492c:	9005      	str	r0, [sp, #20]
 801492e:	2800      	cmp	r0, #0
 8014930:	f43f ae9a 	beq.w	8014668 <_strtod_l+0x488>
 8014934:	2f00      	cmp	r7, #0
 8014936:	dd08      	ble.n	801494a <_strtod_l+0x76a>
 8014938:	9905      	ldr	r1, [sp, #20]
 801493a:	463a      	mov	r2, r7
 801493c:	4620      	mov	r0, r4
 801493e:	f7ff f9df 	bl	8013d00 <__lshift>
 8014942:	9005      	str	r0, [sp, #20]
 8014944:	2800      	cmp	r0, #0
 8014946:	f43f ae8f 	beq.w	8014668 <_strtod_l+0x488>
 801494a:	f1ba 0f00 	cmp.w	sl, #0
 801494e:	dd08      	ble.n	8014962 <_strtod_l+0x782>
 8014950:	4659      	mov	r1, fp
 8014952:	4652      	mov	r2, sl
 8014954:	4620      	mov	r0, r4
 8014956:	f7ff f9d3 	bl	8013d00 <__lshift>
 801495a:	4683      	mov	fp, r0
 801495c:	2800      	cmp	r0, #0
 801495e:	f43f ae83 	beq.w	8014668 <_strtod_l+0x488>
 8014962:	9a05      	ldr	r2, [sp, #20]
 8014964:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014966:	4620      	mov	r0, r4
 8014968:	f7ff fa52 	bl	8013e10 <__mdiff>
 801496c:	4605      	mov	r5, r0
 801496e:	2800      	cmp	r0, #0
 8014970:	f43f ae7a 	beq.w	8014668 <_strtod_l+0x488>
 8014974:	68c3      	ldr	r3, [r0, #12]
 8014976:	930b      	str	r3, [sp, #44]	; 0x2c
 8014978:	2300      	movs	r3, #0
 801497a:	60c3      	str	r3, [r0, #12]
 801497c:	4659      	mov	r1, fp
 801497e:	f7ff fa2b 	bl	8013dd8 <__mcmp>
 8014982:	2800      	cmp	r0, #0
 8014984:	da60      	bge.n	8014a48 <_strtod_l+0x868>
 8014986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014988:	ea53 0308 	orrs.w	r3, r3, r8
 801498c:	f040 8084 	bne.w	8014a98 <_strtod_l+0x8b8>
 8014990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014994:	2b00      	cmp	r3, #0
 8014996:	d17f      	bne.n	8014a98 <_strtod_l+0x8b8>
 8014998:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801499c:	0d1b      	lsrs	r3, r3, #20
 801499e:	051b      	lsls	r3, r3, #20
 80149a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80149a4:	d978      	bls.n	8014a98 <_strtod_l+0x8b8>
 80149a6:	696b      	ldr	r3, [r5, #20]
 80149a8:	b913      	cbnz	r3, 80149b0 <_strtod_l+0x7d0>
 80149aa:	692b      	ldr	r3, [r5, #16]
 80149ac:	2b01      	cmp	r3, #1
 80149ae:	dd73      	ble.n	8014a98 <_strtod_l+0x8b8>
 80149b0:	4629      	mov	r1, r5
 80149b2:	2201      	movs	r2, #1
 80149b4:	4620      	mov	r0, r4
 80149b6:	f7ff f9a3 	bl	8013d00 <__lshift>
 80149ba:	4659      	mov	r1, fp
 80149bc:	4605      	mov	r5, r0
 80149be:	f7ff fa0b 	bl	8013dd8 <__mcmp>
 80149c2:	2800      	cmp	r0, #0
 80149c4:	dd68      	ble.n	8014a98 <_strtod_l+0x8b8>
 80149c6:	9904      	ldr	r1, [sp, #16]
 80149c8:	4a54      	ldr	r2, [pc, #336]	; (8014b1c <_strtod_l+0x93c>)
 80149ca:	464b      	mov	r3, r9
 80149cc:	2900      	cmp	r1, #0
 80149ce:	f000 8084 	beq.w	8014ada <_strtod_l+0x8fa>
 80149d2:	ea02 0109 	and.w	r1, r2, r9
 80149d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80149da:	dc7e      	bgt.n	8014ada <_strtod_l+0x8fa>
 80149dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80149e0:	f77f aeb3 	ble.w	801474a <_strtod_l+0x56a>
 80149e4:	4b4e      	ldr	r3, [pc, #312]	; (8014b20 <_strtod_l+0x940>)
 80149e6:	4640      	mov	r0, r8
 80149e8:	4649      	mov	r1, r9
 80149ea:	2200      	movs	r2, #0
 80149ec:	f7eb fe2c 	bl	8000648 <__aeabi_dmul>
 80149f0:	4b4a      	ldr	r3, [pc, #296]	; (8014b1c <_strtod_l+0x93c>)
 80149f2:	400b      	ands	r3, r1
 80149f4:	4680      	mov	r8, r0
 80149f6:	4689      	mov	r9, r1
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	f47f ae3f 	bne.w	801467c <_strtod_l+0x49c>
 80149fe:	2322      	movs	r3, #34	; 0x22
 8014a00:	6023      	str	r3, [r4, #0]
 8014a02:	e63b      	b.n	801467c <_strtod_l+0x49c>
 8014a04:	f04f 32ff 	mov.w	r2, #4294967295
 8014a08:	fa02 f303 	lsl.w	r3, r2, r3
 8014a0c:	ea03 0808 	and.w	r8, r3, r8
 8014a10:	e6e8      	b.n	80147e4 <_strtod_l+0x604>
 8014a12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014a16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014a1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014a1e:	36e2      	adds	r6, #226	; 0xe2
 8014a20:	fa01 f306 	lsl.w	r3, r1, r6
 8014a24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8014a28:	e748      	b.n	80148bc <_strtod_l+0x6dc>
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8014a32:	e743      	b.n	80148bc <_strtod_l+0x6dc>
 8014a34:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014a36:	4632      	mov	r2, r6
 8014a38:	4620      	mov	r0, r4
 8014a3a:	f7ff f961 	bl	8013d00 <__lshift>
 8014a3e:	9016      	str	r0, [sp, #88]	; 0x58
 8014a40:	2800      	cmp	r0, #0
 8014a42:	f47f af6b 	bne.w	801491c <_strtod_l+0x73c>
 8014a46:	e60f      	b.n	8014668 <_strtod_l+0x488>
 8014a48:	46ca      	mov	sl, r9
 8014a4a:	d171      	bne.n	8014b30 <_strtod_l+0x950>
 8014a4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a52:	b352      	cbz	r2, 8014aaa <_strtod_l+0x8ca>
 8014a54:	4a33      	ldr	r2, [pc, #204]	; (8014b24 <_strtod_l+0x944>)
 8014a56:	4293      	cmp	r3, r2
 8014a58:	d12a      	bne.n	8014ab0 <_strtod_l+0x8d0>
 8014a5a:	9b04      	ldr	r3, [sp, #16]
 8014a5c:	4641      	mov	r1, r8
 8014a5e:	b1fb      	cbz	r3, 8014aa0 <_strtod_l+0x8c0>
 8014a60:	4b2e      	ldr	r3, [pc, #184]	; (8014b1c <_strtod_l+0x93c>)
 8014a62:	ea09 0303 	and.w	r3, r9, r3
 8014a66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8014a6e:	d81a      	bhi.n	8014aa6 <_strtod_l+0x8c6>
 8014a70:	0d1b      	lsrs	r3, r3, #20
 8014a72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014a76:	fa02 f303 	lsl.w	r3, r2, r3
 8014a7a:	4299      	cmp	r1, r3
 8014a7c:	d118      	bne.n	8014ab0 <_strtod_l+0x8d0>
 8014a7e:	4b2a      	ldr	r3, [pc, #168]	; (8014b28 <_strtod_l+0x948>)
 8014a80:	459a      	cmp	sl, r3
 8014a82:	d102      	bne.n	8014a8a <_strtod_l+0x8aa>
 8014a84:	3101      	adds	r1, #1
 8014a86:	f43f adef 	beq.w	8014668 <_strtod_l+0x488>
 8014a8a:	4b24      	ldr	r3, [pc, #144]	; (8014b1c <_strtod_l+0x93c>)
 8014a8c:	ea0a 0303 	and.w	r3, sl, r3
 8014a90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014a94:	f04f 0800 	mov.w	r8, #0
 8014a98:	9b04      	ldr	r3, [sp, #16]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d1a2      	bne.n	80149e4 <_strtod_l+0x804>
 8014a9e:	e5ed      	b.n	801467c <_strtod_l+0x49c>
 8014aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa4:	e7e9      	b.n	8014a7a <_strtod_l+0x89a>
 8014aa6:	4613      	mov	r3, r2
 8014aa8:	e7e7      	b.n	8014a7a <_strtod_l+0x89a>
 8014aaa:	ea53 0308 	orrs.w	r3, r3, r8
 8014aae:	d08a      	beq.n	80149c6 <_strtod_l+0x7e6>
 8014ab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ab2:	b1e3      	cbz	r3, 8014aee <_strtod_l+0x90e>
 8014ab4:	ea13 0f0a 	tst.w	r3, sl
 8014ab8:	d0ee      	beq.n	8014a98 <_strtod_l+0x8b8>
 8014aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014abc:	9a04      	ldr	r2, [sp, #16]
 8014abe:	4640      	mov	r0, r8
 8014ac0:	4649      	mov	r1, r9
 8014ac2:	b1c3      	cbz	r3, 8014af6 <_strtod_l+0x916>
 8014ac4:	f7ff fb6f 	bl	80141a6 <sulp>
 8014ac8:	4602      	mov	r2, r0
 8014aca:	460b      	mov	r3, r1
 8014acc:	ec51 0b18 	vmov	r0, r1, d8
 8014ad0:	f7eb fc04 	bl	80002dc <__adddf3>
 8014ad4:	4680      	mov	r8, r0
 8014ad6:	4689      	mov	r9, r1
 8014ad8:	e7de      	b.n	8014a98 <_strtod_l+0x8b8>
 8014ada:	4013      	ands	r3, r2
 8014adc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014ae0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014ae4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014ae8:	f04f 38ff 	mov.w	r8, #4294967295
 8014aec:	e7d4      	b.n	8014a98 <_strtod_l+0x8b8>
 8014aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014af0:	ea13 0f08 	tst.w	r3, r8
 8014af4:	e7e0      	b.n	8014ab8 <_strtod_l+0x8d8>
 8014af6:	f7ff fb56 	bl	80141a6 <sulp>
 8014afa:	4602      	mov	r2, r0
 8014afc:	460b      	mov	r3, r1
 8014afe:	ec51 0b18 	vmov	r0, r1, d8
 8014b02:	f7eb fbe9 	bl	80002d8 <__aeabi_dsub>
 8014b06:	2200      	movs	r2, #0
 8014b08:	2300      	movs	r3, #0
 8014b0a:	4680      	mov	r8, r0
 8014b0c:	4689      	mov	r9, r1
 8014b0e:	f7ec f803 	bl	8000b18 <__aeabi_dcmpeq>
 8014b12:	2800      	cmp	r0, #0
 8014b14:	d0c0      	beq.n	8014a98 <_strtod_l+0x8b8>
 8014b16:	e618      	b.n	801474a <_strtod_l+0x56a>
 8014b18:	fffffc02 	.word	0xfffffc02
 8014b1c:	7ff00000 	.word	0x7ff00000
 8014b20:	39500000 	.word	0x39500000
 8014b24:	000fffff 	.word	0x000fffff
 8014b28:	7fefffff 	.word	0x7fefffff
 8014b2c:	08017380 	.word	0x08017380
 8014b30:	4659      	mov	r1, fp
 8014b32:	4628      	mov	r0, r5
 8014b34:	f7ff fac0 	bl	80140b8 <__ratio>
 8014b38:	ec57 6b10 	vmov	r6, r7, d0
 8014b3c:	ee10 0a10 	vmov	r0, s0
 8014b40:	2200      	movs	r2, #0
 8014b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b46:	4639      	mov	r1, r7
 8014b48:	f7eb fffa 	bl	8000b40 <__aeabi_dcmple>
 8014b4c:	2800      	cmp	r0, #0
 8014b4e:	d071      	beq.n	8014c34 <_strtod_l+0xa54>
 8014b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d17c      	bne.n	8014c50 <_strtod_l+0xa70>
 8014b56:	f1b8 0f00 	cmp.w	r8, #0
 8014b5a:	d15a      	bne.n	8014c12 <_strtod_l+0xa32>
 8014b5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d15d      	bne.n	8014c20 <_strtod_l+0xa40>
 8014b64:	4b90      	ldr	r3, [pc, #576]	; (8014da8 <_strtod_l+0xbc8>)
 8014b66:	2200      	movs	r2, #0
 8014b68:	4630      	mov	r0, r6
 8014b6a:	4639      	mov	r1, r7
 8014b6c:	f7eb ffde 	bl	8000b2c <__aeabi_dcmplt>
 8014b70:	2800      	cmp	r0, #0
 8014b72:	d15c      	bne.n	8014c2e <_strtod_l+0xa4e>
 8014b74:	4630      	mov	r0, r6
 8014b76:	4639      	mov	r1, r7
 8014b78:	4b8c      	ldr	r3, [pc, #560]	; (8014dac <_strtod_l+0xbcc>)
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	f7eb fd64 	bl	8000648 <__aeabi_dmul>
 8014b80:	4606      	mov	r6, r0
 8014b82:	460f      	mov	r7, r1
 8014b84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014b88:	9606      	str	r6, [sp, #24]
 8014b8a:	9307      	str	r3, [sp, #28]
 8014b8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014b94:	4b86      	ldr	r3, [pc, #536]	; (8014db0 <_strtod_l+0xbd0>)
 8014b96:	ea0a 0303 	and.w	r3, sl, r3
 8014b9a:	930d      	str	r3, [sp, #52]	; 0x34
 8014b9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b9e:	4b85      	ldr	r3, [pc, #532]	; (8014db4 <_strtod_l+0xbd4>)
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	f040 8090 	bne.w	8014cc6 <_strtod_l+0xae6>
 8014ba6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8014baa:	ec49 8b10 	vmov	d0, r8, r9
 8014bae:	f7ff f9b9 	bl	8013f24 <__ulp>
 8014bb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014bb6:	ec51 0b10 	vmov	r0, r1, d0
 8014bba:	f7eb fd45 	bl	8000648 <__aeabi_dmul>
 8014bbe:	4642      	mov	r2, r8
 8014bc0:	464b      	mov	r3, r9
 8014bc2:	f7eb fb8b 	bl	80002dc <__adddf3>
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	4979      	ldr	r1, [pc, #484]	; (8014db0 <_strtod_l+0xbd0>)
 8014bca:	4a7b      	ldr	r2, [pc, #492]	; (8014db8 <_strtod_l+0xbd8>)
 8014bcc:	4019      	ands	r1, r3
 8014bce:	4291      	cmp	r1, r2
 8014bd0:	4680      	mov	r8, r0
 8014bd2:	d944      	bls.n	8014c5e <_strtod_l+0xa7e>
 8014bd4:	ee18 2a90 	vmov	r2, s17
 8014bd8:	4b78      	ldr	r3, [pc, #480]	; (8014dbc <_strtod_l+0xbdc>)
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d104      	bne.n	8014be8 <_strtod_l+0xa08>
 8014bde:	ee18 3a10 	vmov	r3, s16
 8014be2:	3301      	adds	r3, #1
 8014be4:	f43f ad40 	beq.w	8014668 <_strtod_l+0x488>
 8014be8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8014dbc <_strtod_l+0xbdc>
 8014bec:	f04f 38ff 	mov.w	r8, #4294967295
 8014bf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	f7fe fe6a 	bl	80138cc <_Bfree>
 8014bf8:	9905      	ldr	r1, [sp, #20]
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f7fe fe66 	bl	80138cc <_Bfree>
 8014c00:	4659      	mov	r1, fp
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7fe fe62 	bl	80138cc <_Bfree>
 8014c08:	4629      	mov	r1, r5
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f7fe fe5e 	bl	80138cc <_Bfree>
 8014c10:	e609      	b.n	8014826 <_strtod_l+0x646>
 8014c12:	f1b8 0f01 	cmp.w	r8, #1
 8014c16:	d103      	bne.n	8014c20 <_strtod_l+0xa40>
 8014c18:	f1b9 0f00 	cmp.w	r9, #0
 8014c1c:	f43f ad95 	beq.w	801474a <_strtod_l+0x56a>
 8014c20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014d78 <_strtod_l+0xb98>
 8014c24:	4f60      	ldr	r7, [pc, #384]	; (8014da8 <_strtod_l+0xbc8>)
 8014c26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014c2a:	2600      	movs	r6, #0
 8014c2c:	e7ae      	b.n	8014b8c <_strtod_l+0x9ac>
 8014c2e:	4f5f      	ldr	r7, [pc, #380]	; (8014dac <_strtod_l+0xbcc>)
 8014c30:	2600      	movs	r6, #0
 8014c32:	e7a7      	b.n	8014b84 <_strtod_l+0x9a4>
 8014c34:	4b5d      	ldr	r3, [pc, #372]	; (8014dac <_strtod_l+0xbcc>)
 8014c36:	4630      	mov	r0, r6
 8014c38:	4639      	mov	r1, r7
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	f7eb fd04 	bl	8000648 <__aeabi_dmul>
 8014c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c42:	4606      	mov	r6, r0
 8014c44:	460f      	mov	r7, r1
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d09c      	beq.n	8014b84 <_strtod_l+0x9a4>
 8014c4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014c4e:	e79d      	b.n	8014b8c <_strtod_l+0x9ac>
 8014c50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014d80 <_strtod_l+0xba0>
 8014c54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014c58:	ec57 6b17 	vmov	r6, r7, d7
 8014c5c:	e796      	b.n	8014b8c <_strtod_l+0x9ac>
 8014c5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014c62:	9b04      	ldr	r3, [sp, #16]
 8014c64:	46ca      	mov	sl, r9
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d1c2      	bne.n	8014bf0 <_strtod_l+0xa10>
 8014c6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014c6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c70:	0d1b      	lsrs	r3, r3, #20
 8014c72:	051b      	lsls	r3, r3, #20
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d1bb      	bne.n	8014bf0 <_strtod_l+0xa10>
 8014c78:	4630      	mov	r0, r6
 8014c7a:	4639      	mov	r1, r7
 8014c7c:	f7ec f844 	bl	8000d08 <__aeabi_d2lz>
 8014c80:	f7eb fcb4 	bl	80005ec <__aeabi_l2d>
 8014c84:	4602      	mov	r2, r0
 8014c86:	460b      	mov	r3, r1
 8014c88:	4630      	mov	r0, r6
 8014c8a:	4639      	mov	r1, r7
 8014c8c:	f7eb fb24 	bl	80002d8 <__aeabi_dsub>
 8014c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014c96:	ea43 0308 	orr.w	r3, r3, r8
 8014c9a:	4313      	orrs	r3, r2
 8014c9c:	4606      	mov	r6, r0
 8014c9e:	460f      	mov	r7, r1
 8014ca0:	d054      	beq.n	8014d4c <_strtod_l+0xb6c>
 8014ca2:	a339      	add	r3, pc, #228	; (adr r3, 8014d88 <_strtod_l+0xba8>)
 8014ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca8:	f7eb ff40 	bl	8000b2c <__aeabi_dcmplt>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	f47f ace5 	bne.w	801467c <_strtod_l+0x49c>
 8014cb2:	a337      	add	r3, pc, #220	; (adr r3, 8014d90 <_strtod_l+0xbb0>)
 8014cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb8:	4630      	mov	r0, r6
 8014cba:	4639      	mov	r1, r7
 8014cbc:	f7eb ff54 	bl	8000b68 <__aeabi_dcmpgt>
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	d095      	beq.n	8014bf0 <_strtod_l+0xa10>
 8014cc4:	e4da      	b.n	801467c <_strtod_l+0x49c>
 8014cc6:	9b04      	ldr	r3, [sp, #16]
 8014cc8:	b333      	cbz	r3, 8014d18 <_strtod_l+0xb38>
 8014cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ccc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014cd0:	d822      	bhi.n	8014d18 <_strtod_l+0xb38>
 8014cd2:	a331      	add	r3, pc, #196	; (adr r3, 8014d98 <_strtod_l+0xbb8>)
 8014cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd8:	4630      	mov	r0, r6
 8014cda:	4639      	mov	r1, r7
 8014cdc:	f7eb ff30 	bl	8000b40 <__aeabi_dcmple>
 8014ce0:	b1a0      	cbz	r0, 8014d0c <_strtod_l+0xb2c>
 8014ce2:	4639      	mov	r1, r7
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	f7eb ff87 	bl	8000bf8 <__aeabi_d2uiz>
 8014cea:	2801      	cmp	r0, #1
 8014cec:	bf38      	it	cc
 8014cee:	2001      	movcc	r0, #1
 8014cf0:	f7eb fc30 	bl	8000554 <__aeabi_ui2d>
 8014cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cf6:	4606      	mov	r6, r0
 8014cf8:	460f      	mov	r7, r1
 8014cfa:	bb23      	cbnz	r3, 8014d46 <_strtod_l+0xb66>
 8014cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d00:	9010      	str	r0, [sp, #64]	; 0x40
 8014d02:	9311      	str	r3, [sp, #68]	; 0x44
 8014d04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014d08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014d14:	1a9b      	subs	r3, r3, r2
 8014d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014d1c:	eeb0 0a48 	vmov.f32	s0, s16
 8014d20:	eef0 0a68 	vmov.f32	s1, s17
 8014d24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014d28:	f7ff f8fc 	bl	8013f24 <__ulp>
 8014d2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014d30:	ec53 2b10 	vmov	r2, r3, d0
 8014d34:	f7eb fc88 	bl	8000648 <__aeabi_dmul>
 8014d38:	ec53 2b18 	vmov	r2, r3, d8
 8014d3c:	f7eb face 	bl	80002dc <__adddf3>
 8014d40:	4680      	mov	r8, r0
 8014d42:	4689      	mov	r9, r1
 8014d44:	e78d      	b.n	8014c62 <_strtod_l+0xa82>
 8014d46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014d4a:	e7db      	b.n	8014d04 <_strtod_l+0xb24>
 8014d4c:	a314      	add	r3, pc, #80	; (adr r3, 8014da0 <_strtod_l+0xbc0>)
 8014d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d52:	f7eb feeb 	bl	8000b2c <__aeabi_dcmplt>
 8014d56:	e7b3      	b.n	8014cc0 <_strtod_l+0xae0>
 8014d58:	2300      	movs	r3, #0
 8014d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8014d5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d60:	6013      	str	r3, [r2, #0]
 8014d62:	f7ff ba7c 	b.w	801425e <_strtod_l+0x7e>
 8014d66:	2a65      	cmp	r2, #101	; 0x65
 8014d68:	f43f ab75 	beq.w	8014456 <_strtod_l+0x276>
 8014d6c:	2a45      	cmp	r2, #69	; 0x45
 8014d6e:	f43f ab72 	beq.w	8014456 <_strtod_l+0x276>
 8014d72:	2301      	movs	r3, #1
 8014d74:	f7ff bbaa 	b.w	80144cc <_strtod_l+0x2ec>
 8014d78:	00000000 	.word	0x00000000
 8014d7c:	bff00000 	.word	0xbff00000
 8014d80:	00000000 	.word	0x00000000
 8014d84:	3ff00000 	.word	0x3ff00000
 8014d88:	94a03595 	.word	0x94a03595
 8014d8c:	3fdfffff 	.word	0x3fdfffff
 8014d90:	35afe535 	.word	0x35afe535
 8014d94:	3fe00000 	.word	0x3fe00000
 8014d98:	ffc00000 	.word	0xffc00000
 8014d9c:	41dfffff 	.word	0x41dfffff
 8014da0:	94a03595 	.word	0x94a03595
 8014da4:	3fcfffff 	.word	0x3fcfffff
 8014da8:	3ff00000 	.word	0x3ff00000
 8014dac:	3fe00000 	.word	0x3fe00000
 8014db0:	7ff00000 	.word	0x7ff00000
 8014db4:	7fe00000 	.word	0x7fe00000
 8014db8:	7c9fffff 	.word	0x7c9fffff
 8014dbc:	7fefffff 	.word	0x7fefffff

08014dc0 <_strtod_r>:
 8014dc0:	4b01      	ldr	r3, [pc, #4]	; (8014dc8 <_strtod_r+0x8>)
 8014dc2:	f7ff ba0d 	b.w	80141e0 <_strtod_l>
 8014dc6:	bf00      	nop
 8014dc8:	200000a4 	.word	0x200000a4

08014dcc <_strtol_l.constprop.0>:
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dd2:	d001      	beq.n	8014dd8 <_strtol_l.constprop.0+0xc>
 8014dd4:	2b24      	cmp	r3, #36	; 0x24
 8014dd6:	d906      	bls.n	8014de6 <_strtol_l.constprop.0+0x1a>
 8014dd8:	f7fd fe30 	bl	8012a3c <__errno>
 8014ddc:	2316      	movs	r3, #22
 8014dde:	6003      	str	r3, [r0, #0]
 8014de0:	2000      	movs	r0, #0
 8014de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014de6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014ecc <_strtol_l.constprop.0+0x100>
 8014dea:	460d      	mov	r5, r1
 8014dec:	462e      	mov	r6, r5
 8014dee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014df2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014df6:	f017 0708 	ands.w	r7, r7, #8
 8014dfa:	d1f7      	bne.n	8014dec <_strtol_l.constprop.0+0x20>
 8014dfc:	2c2d      	cmp	r4, #45	; 0x2d
 8014dfe:	d132      	bne.n	8014e66 <_strtol_l.constprop.0+0x9a>
 8014e00:	782c      	ldrb	r4, [r5, #0]
 8014e02:	2701      	movs	r7, #1
 8014e04:	1cb5      	adds	r5, r6, #2
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d05b      	beq.n	8014ec2 <_strtol_l.constprop.0+0xf6>
 8014e0a:	2b10      	cmp	r3, #16
 8014e0c:	d109      	bne.n	8014e22 <_strtol_l.constprop.0+0x56>
 8014e0e:	2c30      	cmp	r4, #48	; 0x30
 8014e10:	d107      	bne.n	8014e22 <_strtol_l.constprop.0+0x56>
 8014e12:	782c      	ldrb	r4, [r5, #0]
 8014e14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014e18:	2c58      	cmp	r4, #88	; 0x58
 8014e1a:	d14d      	bne.n	8014eb8 <_strtol_l.constprop.0+0xec>
 8014e1c:	786c      	ldrb	r4, [r5, #1]
 8014e1e:	2310      	movs	r3, #16
 8014e20:	3502      	adds	r5, #2
 8014e22:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014e26:	f108 38ff 	add.w	r8, r8, #4294967295
 8014e2a:	f04f 0e00 	mov.w	lr, #0
 8014e2e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014e32:	4676      	mov	r6, lr
 8014e34:	fb03 8a19 	mls	sl, r3, r9, r8
 8014e38:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014e3c:	f1bc 0f09 	cmp.w	ip, #9
 8014e40:	d816      	bhi.n	8014e70 <_strtol_l.constprop.0+0xa4>
 8014e42:	4664      	mov	r4, ip
 8014e44:	42a3      	cmp	r3, r4
 8014e46:	dd24      	ble.n	8014e92 <_strtol_l.constprop.0+0xc6>
 8014e48:	f1be 3fff 	cmp.w	lr, #4294967295
 8014e4c:	d008      	beq.n	8014e60 <_strtol_l.constprop.0+0x94>
 8014e4e:	45b1      	cmp	r9, r6
 8014e50:	d31c      	bcc.n	8014e8c <_strtol_l.constprop.0+0xc0>
 8014e52:	d101      	bne.n	8014e58 <_strtol_l.constprop.0+0x8c>
 8014e54:	45a2      	cmp	sl, r4
 8014e56:	db19      	blt.n	8014e8c <_strtol_l.constprop.0+0xc0>
 8014e58:	fb06 4603 	mla	r6, r6, r3, r4
 8014e5c:	f04f 0e01 	mov.w	lr, #1
 8014e60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e64:	e7e8      	b.n	8014e38 <_strtol_l.constprop.0+0x6c>
 8014e66:	2c2b      	cmp	r4, #43	; 0x2b
 8014e68:	bf04      	itt	eq
 8014e6a:	782c      	ldrbeq	r4, [r5, #0]
 8014e6c:	1cb5      	addeq	r5, r6, #2
 8014e6e:	e7ca      	b.n	8014e06 <_strtol_l.constprop.0+0x3a>
 8014e70:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014e74:	f1bc 0f19 	cmp.w	ip, #25
 8014e78:	d801      	bhi.n	8014e7e <_strtol_l.constprop.0+0xb2>
 8014e7a:	3c37      	subs	r4, #55	; 0x37
 8014e7c:	e7e2      	b.n	8014e44 <_strtol_l.constprop.0+0x78>
 8014e7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014e82:	f1bc 0f19 	cmp.w	ip, #25
 8014e86:	d804      	bhi.n	8014e92 <_strtol_l.constprop.0+0xc6>
 8014e88:	3c57      	subs	r4, #87	; 0x57
 8014e8a:	e7db      	b.n	8014e44 <_strtol_l.constprop.0+0x78>
 8014e8c:	f04f 3eff 	mov.w	lr, #4294967295
 8014e90:	e7e6      	b.n	8014e60 <_strtol_l.constprop.0+0x94>
 8014e92:	f1be 3fff 	cmp.w	lr, #4294967295
 8014e96:	d105      	bne.n	8014ea4 <_strtol_l.constprop.0+0xd8>
 8014e98:	2322      	movs	r3, #34	; 0x22
 8014e9a:	6003      	str	r3, [r0, #0]
 8014e9c:	4646      	mov	r6, r8
 8014e9e:	b942      	cbnz	r2, 8014eb2 <_strtol_l.constprop.0+0xe6>
 8014ea0:	4630      	mov	r0, r6
 8014ea2:	e79e      	b.n	8014de2 <_strtol_l.constprop.0+0x16>
 8014ea4:	b107      	cbz	r7, 8014ea8 <_strtol_l.constprop.0+0xdc>
 8014ea6:	4276      	negs	r6, r6
 8014ea8:	2a00      	cmp	r2, #0
 8014eaa:	d0f9      	beq.n	8014ea0 <_strtol_l.constprop.0+0xd4>
 8014eac:	f1be 0f00 	cmp.w	lr, #0
 8014eb0:	d000      	beq.n	8014eb4 <_strtol_l.constprop.0+0xe8>
 8014eb2:	1e69      	subs	r1, r5, #1
 8014eb4:	6011      	str	r1, [r2, #0]
 8014eb6:	e7f3      	b.n	8014ea0 <_strtol_l.constprop.0+0xd4>
 8014eb8:	2430      	movs	r4, #48	; 0x30
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d1b1      	bne.n	8014e22 <_strtol_l.constprop.0+0x56>
 8014ebe:	2308      	movs	r3, #8
 8014ec0:	e7af      	b.n	8014e22 <_strtol_l.constprop.0+0x56>
 8014ec2:	2c30      	cmp	r4, #48	; 0x30
 8014ec4:	d0a5      	beq.n	8014e12 <_strtol_l.constprop.0+0x46>
 8014ec6:	230a      	movs	r3, #10
 8014ec8:	e7ab      	b.n	8014e22 <_strtol_l.constprop.0+0x56>
 8014eca:	bf00      	nop
 8014ecc:	080173a9 	.word	0x080173a9

08014ed0 <_strtol_r>:
 8014ed0:	f7ff bf7c 	b.w	8014dcc <_strtol_l.constprop.0>

08014ed4 <__ssputs_r>:
 8014ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ed8:	688e      	ldr	r6, [r1, #8]
 8014eda:	461f      	mov	r7, r3
 8014edc:	42be      	cmp	r6, r7
 8014ede:	680b      	ldr	r3, [r1, #0]
 8014ee0:	4682      	mov	sl, r0
 8014ee2:	460c      	mov	r4, r1
 8014ee4:	4690      	mov	r8, r2
 8014ee6:	d82c      	bhi.n	8014f42 <__ssputs_r+0x6e>
 8014ee8:	898a      	ldrh	r2, [r1, #12]
 8014eea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014eee:	d026      	beq.n	8014f3e <__ssputs_r+0x6a>
 8014ef0:	6965      	ldr	r5, [r4, #20]
 8014ef2:	6909      	ldr	r1, [r1, #16]
 8014ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ef8:	eba3 0901 	sub.w	r9, r3, r1
 8014efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014f00:	1c7b      	adds	r3, r7, #1
 8014f02:	444b      	add	r3, r9
 8014f04:	106d      	asrs	r5, r5, #1
 8014f06:	429d      	cmp	r5, r3
 8014f08:	bf38      	it	cc
 8014f0a:	461d      	movcc	r5, r3
 8014f0c:	0553      	lsls	r3, r2, #21
 8014f0e:	d527      	bpl.n	8014f60 <__ssputs_r+0x8c>
 8014f10:	4629      	mov	r1, r5
 8014f12:	f7fc fc77 	bl	8011804 <_malloc_r>
 8014f16:	4606      	mov	r6, r0
 8014f18:	b360      	cbz	r0, 8014f74 <__ssputs_r+0xa0>
 8014f1a:	6921      	ldr	r1, [r4, #16]
 8014f1c:	464a      	mov	r2, r9
 8014f1e:	f7fd fdba 	bl	8012a96 <memcpy>
 8014f22:	89a3      	ldrh	r3, [r4, #12]
 8014f24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f2c:	81a3      	strh	r3, [r4, #12]
 8014f2e:	6126      	str	r6, [r4, #16]
 8014f30:	6165      	str	r5, [r4, #20]
 8014f32:	444e      	add	r6, r9
 8014f34:	eba5 0509 	sub.w	r5, r5, r9
 8014f38:	6026      	str	r6, [r4, #0]
 8014f3a:	60a5      	str	r5, [r4, #8]
 8014f3c:	463e      	mov	r6, r7
 8014f3e:	42be      	cmp	r6, r7
 8014f40:	d900      	bls.n	8014f44 <__ssputs_r+0x70>
 8014f42:	463e      	mov	r6, r7
 8014f44:	6820      	ldr	r0, [r4, #0]
 8014f46:	4632      	mov	r2, r6
 8014f48:	4641      	mov	r1, r8
 8014f4a:	f7fd fca4 	bl	8012896 <memmove>
 8014f4e:	68a3      	ldr	r3, [r4, #8]
 8014f50:	1b9b      	subs	r3, r3, r6
 8014f52:	60a3      	str	r3, [r4, #8]
 8014f54:	6823      	ldr	r3, [r4, #0]
 8014f56:	4433      	add	r3, r6
 8014f58:	6023      	str	r3, [r4, #0]
 8014f5a:	2000      	movs	r0, #0
 8014f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f60:	462a      	mov	r2, r5
 8014f62:	f000 ff30 	bl	8015dc6 <_realloc_r>
 8014f66:	4606      	mov	r6, r0
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	d1e0      	bne.n	8014f2e <__ssputs_r+0x5a>
 8014f6c:	6921      	ldr	r1, [r4, #16]
 8014f6e:	4650      	mov	r0, sl
 8014f70:	f7fe fc20 	bl	80137b4 <_free_r>
 8014f74:	230c      	movs	r3, #12
 8014f76:	f8ca 3000 	str.w	r3, [sl]
 8014f7a:	89a3      	ldrh	r3, [r4, #12]
 8014f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f80:	81a3      	strh	r3, [r4, #12]
 8014f82:	f04f 30ff 	mov.w	r0, #4294967295
 8014f86:	e7e9      	b.n	8014f5c <__ssputs_r+0x88>

08014f88 <_svfiprintf_r>:
 8014f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f8c:	4698      	mov	r8, r3
 8014f8e:	898b      	ldrh	r3, [r1, #12]
 8014f90:	061b      	lsls	r3, r3, #24
 8014f92:	b09d      	sub	sp, #116	; 0x74
 8014f94:	4607      	mov	r7, r0
 8014f96:	460d      	mov	r5, r1
 8014f98:	4614      	mov	r4, r2
 8014f9a:	d50e      	bpl.n	8014fba <_svfiprintf_r+0x32>
 8014f9c:	690b      	ldr	r3, [r1, #16]
 8014f9e:	b963      	cbnz	r3, 8014fba <_svfiprintf_r+0x32>
 8014fa0:	2140      	movs	r1, #64	; 0x40
 8014fa2:	f7fc fc2f 	bl	8011804 <_malloc_r>
 8014fa6:	6028      	str	r0, [r5, #0]
 8014fa8:	6128      	str	r0, [r5, #16]
 8014faa:	b920      	cbnz	r0, 8014fb6 <_svfiprintf_r+0x2e>
 8014fac:	230c      	movs	r3, #12
 8014fae:	603b      	str	r3, [r7, #0]
 8014fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8014fb4:	e0d0      	b.n	8015158 <_svfiprintf_r+0x1d0>
 8014fb6:	2340      	movs	r3, #64	; 0x40
 8014fb8:	616b      	str	r3, [r5, #20]
 8014fba:	2300      	movs	r3, #0
 8014fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8014fbe:	2320      	movs	r3, #32
 8014fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8014fc8:	2330      	movs	r3, #48	; 0x30
 8014fca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015170 <_svfiprintf_r+0x1e8>
 8014fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014fd2:	f04f 0901 	mov.w	r9, #1
 8014fd6:	4623      	mov	r3, r4
 8014fd8:	469a      	mov	sl, r3
 8014fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fde:	b10a      	cbz	r2, 8014fe4 <_svfiprintf_r+0x5c>
 8014fe0:	2a25      	cmp	r2, #37	; 0x25
 8014fe2:	d1f9      	bne.n	8014fd8 <_svfiprintf_r+0x50>
 8014fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8014fe8:	d00b      	beq.n	8015002 <_svfiprintf_r+0x7a>
 8014fea:	465b      	mov	r3, fp
 8014fec:	4622      	mov	r2, r4
 8014fee:	4629      	mov	r1, r5
 8014ff0:	4638      	mov	r0, r7
 8014ff2:	f7ff ff6f 	bl	8014ed4 <__ssputs_r>
 8014ff6:	3001      	adds	r0, #1
 8014ff8:	f000 80a9 	beq.w	801514e <_svfiprintf_r+0x1c6>
 8014ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ffe:	445a      	add	r2, fp
 8015000:	9209      	str	r2, [sp, #36]	; 0x24
 8015002:	f89a 3000 	ldrb.w	r3, [sl]
 8015006:	2b00      	cmp	r3, #0
 8015008:	f000 80a1 	beq.w	801514e <_svfiprintf_r+0x1c6>
 801500c:	2300      	movs	r3, #0
 801500e:	f04f 32ff 	mov.w	r2, #4294967295
 8015012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015016:	f10a 0a01 	add.w	sl, sl, #1
 801501a:	9304      	str	r3, [sp, #16]
 801501c:	9307      	str	r3, [sp, #28]
 801501e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015022:	931a      	str	r3, [sp, #104]	; 0x68
 8015024:	4654      	mov	r4, sl
 8015026:	2205      	movs	r2, #5
 8015028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801502c:	4850      	ldr	r0, [pc, #320]	; (8015170 <_svfiprintf_r+0x1e8>)
 801502e:	f7eb f8f7 	bl	8000220 <memchr>
 8015032:	9a04      	ldr	r2, [sp, #16]
 8015034:	b9d8      	cbnz	r0, 801506e <_svfiprintf_r+0xe6>
 8015036:	06d0      	lsls	r0, r2, #27
 8015038:	bf44      	itt	mi
 801503a:	2320      	movmi	r3, #32
 801503c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015040:	0711      	lsls	r1, r2, #28
 8015042:	bf44      	itt	mi
 8015044:	232b      	movmi	r3, #43	; 0x2b
 8015046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801504a:	f89a 3000 	ldrb.w	r3, [sl]
 801504e:	2b2a      	cmp	r3, #42	; 0x2a
 8015050:	d015      	beq.n	801507e <_svfiprintf_r+0xf6>
 8015052:	9a07      	ldr	r2, [sp, #28]
 8015054:	4654      	mov	r4, sl
 8015056:	2000      	movs	r0, #0
 8015058:	f04f 0c0a 	mov.w	ip, #10
 801505c:	4621      	mov	r1, r4
 801505e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015062:	3b30      	subs	r3, #48	; 0x30
 8015064:	2b09      	cmp	r3, #9
 8015066:	d94d      	bls.n	8015104 <_svfiprintf_r+0x17c>
 8015068:	b1b0      	cbz	r0, 8015098 <_svfiprintf_r+0x110>
 801506a:	9207      	str	r2, [sp, #28]
 801506c:	e014      	b.n	8015098 <_svfiprintf_r+0x110>
 801506e:	eba0 0308 	sub.w	r3, r0, r8
 8015072:	fa09 f303 	lsl.w	r3, r9, r3
 8015076:	4313      	orrs	r3, r2
 8015078:	9304      	str	r3, [sp, #16]
 801507a:	46a2      	mov	sl, r4
 801507c:	e7d2      	b.n	8015024 <_svfiprintf_r+0x9c>
 801507e:	9b03      	ldr	r3, [sp, #12]
 8015080:	1d19      	adds	r1, r3, #4
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	9103      	str	r1, [sp, #12]
 8015086:	2b00      	cmp	r3, #0
 8015088:	bfbb      	ittet	lt
 801508a:	425b      	neglt	r3, r3
 801508c:	f042 0202 	orrlt.w	r2, r2, #2
 8015090:	9307      	strge	r3, [sp, #28]
 8015092:	9307      	strlt	r3, [sp, #28]
 8015094:	bfb8      	it	lt
 8015096:	9204      	strlt	r2, [sp, #16]
 8015098:	7823      	ldrb	r3, [r4, #0]
 801509a:	2b2e      	cmp	r3, #46	; 0x2e
 801509c:	d10c      	bne.n	80150b8 <_svfiprintf_r+0x130>
 801509e:	7863      	ldrb	r3, [r4, #1]
 80150a0:	2b2a      	cmp	r3, #42	; 0x2a
 80150a2:	d134      	bne.n	801510e <_svfiprintf_r+0x186>
 80150a4:	9b03      	ldr	r3, [sp, #12]
 80150a6:	1d1a      	adds	r2, r3, #4
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	9203      	str	r2, [sp, #12]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	bfb8      	it	lt
 80150b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80150b4:	3402      	adds	r4, #2
 80150b6:	9305      	str	r3, [sp, #20]
 80150b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015180 <_svfiprintf_r+0x1f8>
 80150bc:	7821      	ldrb	r1, [r4, #0]
 80150be:	2203      	movs	r2, #3
 80150c0:	4650      	mov	r0, sl
 80150c2:	f7eb f8ad 	bl	8000220 <memchr>
 80150c6:	b138      	cbz	r0, 80150d8 <_svfiprintf_r+0x150>
 80150c8:	9b04      	ldr	r3, [sp, #16]
 80150ca:	eba0 000a 	sub.w	r0, r0, sl
 80150ce:	2240      	movs	r2, #64	; 0x40
 80150d0:	4082      	lsls	r2, r0
 80150d2:	4313      	orrs	r3, r2
 80150d4:	3401      	adds	r4, #1
 80150d6:	9304      	str	r3, [sp, #16]
 80150d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150dc:	4825      	ldr	r0, [pc, #148]	; (8015174 <_svfiprintf_r+0x1ec>)
 80150de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150e2:	2206      	movs	r2, #6
 80150e4:	f7eb f89c 	bl	8000220 <memchr>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	d038      	beq.n	801515e <_svfiprintf_r+0x1d6>
 80150ec:	4b22      	ldr	r3, [pc, #136]	; (8015178 <_svfiprintf_r+0x1f0>)
 80150ee:	bb1b      	cbnz	r3, 8015138 <_svfiprintf_r+0x1b0>
 80150f0:	9b03      	ldr	r3, [sp, #12]
 80150f2:	3307      	adds	r3, #7
 80150f4:	f023 0307 	bic.w	r3, r3, #7
 80150f8:	3308      	adds	r3, #8
 80150fa:	9303      	str	r3, [sp, #12]
 80150fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150fe:	4433      	add	r3, r6
 8015100:	9309      	str	r3, [sp, #36]	; 0x24
 8015102:	e768      	b.n	8014fd6 <_svfiprintf_r+0x4e>
 8015104:	fb0c 3202 	mla	r2, ip, r2, r3
 8015108:	460c      	mov	r4, r1
 801510a:	2001      	movs	r0, #1
 801510c:	e7a6      	b.n	801505c <_svfiprintf_r+0xd4>
 801510e:	2300      	movs	r3, #0
 8015110:	3401      	adds	r4, #1
 8015112:	9305      	str	r3, [sp, #20]
 8015114:	4619      	mov	r1, r3
 8015116:	f04f 0c0a 	mov.w	ip, #10
 801511a:	4620      	mov	r0, r4
 801511c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015120:	3a30      	subs	r2, #48	; 0x30
 8015122:	2a09      	cmp	r2, #9
 8015124:	d903      	bls.n	801512e <_svfiprintf_r+0x1a6>
 8015126:	2b00      	cmp	r3, #0
 8015128:	d0c6      	beq.n	80150b8 <_svfiprintf_r+0x130>
 801512a:	9105      	str	r1, [sp, #20]
 801512c:	e7c4      	b.n	80150b8 <_svfiprintf_r+0x130>
 801512e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015132:	4604      	mov	r4, r0
 8015134:	2301      	movs	r3, #1
 8015136:	e7f0      	b.n	801511a <_svfiprintf_r+0x192>
 8015138:	ab03      	add	r3, sp, #12
 801513a:	9300      	str	r3, [sp, #0]
 801513c:	462a      	mov	r2, r5
 801513e:	4b0f      	ldr	r3, [pc, #60]	; (801517c <_svfiprintf_r+0x1f4>)
 8015140:	a904      	add	r1, sp, #16
 8015142:	4638      	mov	r0, r7
 8015144:	f7fc fc8a 	bl	8011a5c <_printf_float>
 8015148:	1c42      	adds	r2, r0, #1
 801514a:	4606      	mov	r6, r0
 801514c:	d1d6      	bne.n	80150fc <_svfiprintf_r+0x174>
 801514e:	89ab      	ldrh	r3, [r5, #12]
 8015150:	065b      	lsls	r3, r3, #25
 8015152:	f53f af2d 	bmi.w	8014fb0 <_svfiprintf_r+0x28>
 8015156:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015158:	b01d      	add	sp, #116	; 0x74
 801515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801515e:	ab03      	add	r3, sp, #12
 8015160:	9300      	str	r3, [sp, #0]
 8015162:	462a      	mov	r2, r5
 8015164:	4b05      	ldr	r3, [pc, #20]	; (801517c <_svfiprintf_r+0x1f4>)
 8015166:	a904      	add	r1, sp, #16
 8015168:	4638      	mov	r0, r7
 801516a:	f7fc ff1b 	bl	8011fa4 <_printf_i>
 801516e:	e7eb      	b.n	8015148 <_svfiprintf_r+0x1c0>
 8015170:	080174a9 	.word	0x080174a9
 8015174:	080174b3 	.word	0x080174b3
 8015178:	08011a5d 	.word	0x08011a5d
 801517c:	08014ed5 	.word	0x08014ed5
 8015180:	080174af 	.word	0x080174af

08015184 <__sfputc_r>:
 8015184:	6893      	ldr	r3, [r2, #8]
 8015186:	3b01      	subs	r3, #1
 8015188:	2b00      	cmp	r3, #0
 801518a:	b410      	push	{r4}
 801518c:	6093      	str	r3, [r2, #8]
 801518e:	da08      	bge.n	80151a2 <__sfputc_r+0x1e>
 8015190:	6994      	ldr	r4, [r2, #24]
 8015192:	42a3      	cmp	r3, r4
 8015194:	db01      	blt.n	801519a <__sfputc_r+0x16>
 8015196:	290a      	cmp	r1, #10
 8015198:	d103      	bne.n	80151a2 <__sfputc_r+0x1e>
 801519a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801519e:	f000 b9e3 	b.w	8015568 <__swbuf_r>
 80151a2:	6813      	ldr	r3, [r2, #0]
 80151a4:	1c58      	adds	r0, r3, #1
 80151a6:	6010      	str	r0, [r2, #0]
 80151a8:	7019      	strb	r1, [r3, #0]
 80151aa:	4608      	mov	r0, r1
 80151ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151b0:	4770      	bx	lr

080151b2 <__sfputs_r>:
 80151b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151b4:	4606      	mov	r6, r0
 80151b6:	460f      	mov	r7, r1
 80151b8:	4614      	mov	r4, r2
 80151ba:	18d5      	adds	r5, r2, r3
 80151bc:	42ac      	cmp	r4, r5
 80151be:	d101      	bne.n	80151c4 <__sfputs_r+0x12>
 80151c0:	2000      	movs	r0, #0
 80151c2:	e007      	b.n	80151d4 <__sfputs_r+0x22>
 80151c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151c8:	463a      	mov	r2, r7
 80151ca:	4630      	mov	r0, r6
 80151cc:	f7ff ffda 	bl	8015184 <__sfputc_r>
 80151d0:	1c43      	adds	r3, r0, #1
 80151d2:	d1f3      	bne.n	80151bc <__sfputs_r+0xa>
 80151d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080151d8 <_vfiprintf_r>:
 80151d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151dc:	460d      	mov	r5, r1
 80151de:	b09d      	sub	sp, #116	; 0x74
 80151e0:	4614      	mov	r4, r2
 80151e2:	4698      	mov	r8, r3
 80151e4:	4606      	mov	r6, r0
 80151e6:	b118      	cbz	r0, 80151f0 <_vfiprintf_r+0x18>
 80151e8:	6a03      	ldr	r3, [r0, #32]
 80151ea:	b90b      	cbnz	r3, 80151f0 <_vfiprintf_r+0x18>
 80151ec:	f7fd fa98 	bl	8012720 <__sinit>
 80151f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151f2:	07d9      	lsls	r1, r3, #31
 80151f4:	d405      	bmi.n	8015202 <_vfiprintf_r+0x2a>
 80151f6:	89ab      	ldrh	r3, [r5, #12]
 80151f8:	059a      	lsls	r2, r3, #22
 80151fa:	d402      	bmi.n	8015202 <_vfiprintf_r+0x2a>
 80151fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151fe:	f7fd fc48 	bl	8012a92 <__retarget_lock_acquire_recursive>
 8015202:	89ab      	ldrh	r3, [r5, #12]
 8015204:	071b      	lsls	r3, r3, #28
 8015206:	d501      	bpl.n	801520c <_vfiprintf_r+0x34>
 8015208:	692b      	ldr	r3, [r5, #16]
 801520a:	b99b      	cbnz	r3, 8015234 <_vfiprintf_r+0x5c>
 801520c:	4629      	mov	r1, r5
 801520e:	4630      	mov	r0, r6
 8015210:	f000 f9e8 	bl	80155e4 <__swsetup_r>
 8015214:	b170      	cbz	r0, 8015234 <_vfiprintf_r+0x5c>
 8015216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015218:	07dc      	lsls	r4, r3, #31
 801521a:	d504      	bpl.n	8015226 <_vfiprintf_r+0x4e>
 801521c:	f04f 30ff 	mov.w	r0, #4294967295
 8015220:	b01d      	add	sp, #116	; 0x74
 8015222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015226:	89ab      	ldrh	r3, [r5, #12]
 8015228:	0598      	lsls	r0, r3, #22
 801522a:	d4f7      	bmi.n	801521c <_vfiprintf_r+0x44>
 801522c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801522e:	f7fd fc31 	bl	8012a94 <__retarget_lock_release_recursive>
 8015232:	e7f3      	b.n	801521c <_vfiprintf_r+0x44>
 8015234:	2300      	movs	r3, #0
 8015236:	9309      	str	r3, [sp, #36]	; 0x24
 8015238:	2320      	movs	r3, #32
 801523a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801523e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015242:	2330      	movs	r3, #48	; 0x30
 8015244:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80153f8 <_vfiprintf_r+0x220>
 8015248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801524c:	f04f 0901 	mov.w	r9, #1
 8015250:	4623      	mov	r3, r4
 8015252:	469a      	mov	sl, r3
 8015254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015258:	b10a      	cbz	r2, 801525e <_vfiprintf_r+0x86>
 801525a:	2a25      	cmp	r2, #37	; 0x25
 801525c:	d1f9      	bne.n	8015252 <_vfiprintf_r+0x7a>
 801525e:	ebba 0b04 	subs.w	fp, sl, r4
 8015262:	d00b      	beq.n	801527c <_vfiprintf_r+0xa4>
 8015264:	465b      	mov	r3, fp
 8015266:	4622      	mov	r2, r4
 8015268:	4629      	mov	r1, r5
 801526a:	4630      	mov	r0, r6
 801526c:	f7ff ffa1 	bl	80151b2 <__sfputs_r>
 8015270:	3001      	adds	r0, #1
 8015272:	f000 80a9 	beq.w	80153c8 <_vfiprintf_r+0x1f0>
 8015276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015278:	445a      	add	r2, fp
 801527a:	9209      	str	r2, [sp, #36]	; 0x24
 801527c:	f89a 3000 	ldrb.w	r3, [sl]
 8015280:	2b00      	cmp	r3, #0
 8015282:	f000 80a1 	beq.w	80153c8 <_vfiprintf_r+0x1f0>
 8015286:	2300      	movs	r3, #0
 8015288:	f04f 32ff 	mov.w	r2, #4294967295
 801528c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015290:	f10a 0a01 	add.w	sl, sl, #1
 8015294:	9304      	str	r3, [sp, #16]
 8015296:	9307      	str	r3, [sp, #28]
 8015298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801529c:	931a      	str	r3, [sp, #104]	; 0x68
 801529e:	4654      	mov	r4, sl
 80152a0:	2205      	movs	r2, #5
 80152a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152a6:	4854      	ldr	r0, [pc, #336]	; (80153f8 <_vfiprintf_r+0x220>)
 80152a8:	f7ea ffba 	bl	8000220 <memchr>
 80152ac:	9a04      	ldr	r2, [sp, #16]
 80152ae:	b9d8      	cbnz	r0, 80152e8 <_vfiprintf_r+0x110>
 80152b0:	06d1      	lsls	r1, r2, #27
 80152b2:	bf44      	itt	mi
 80152b4:	2320      	movmi	r3, #32
 80152b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152ba:	0713      	lsls	r3, r2, #28
 80152bc:	bf44      	itt	mi
 80152be:	232b      	movmi	r3, #43	; 0x2b
 80152c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152c4:	f89a 3000 	ldrb.w	r3, [sl]
 80152c8:	2b2a      	cmp	r3, #42	; 0x2a
 80152ca:	d015      	beq.n	80152f8 <_vfiprintf_r+0x120>
 80152cc:	9a07      	ldr	r2, [sp, #28]
 80152ce:	4654      	mov	r4, sl
 80152d0:	2000      	movs	r0, #0
 80152d2:	f04f 0c0a 	mov.w	ip, #10
 80152d6:	4621      	mov	r1, r4
 80152d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80152dc:	3b30      	subs	r3, #48	; 0x30
 80152de:	2b09      	cmp	r3, #9
 80152e0:	d94d      	bls.n	801537e <_vfiprintf_r+0x1a6>
 80152e2:	b1b0      	cbz	r0, 8015312 <_vfiprintf_r+0x13a>
 80152e4:	9207      	str	r2, [sp, #28]
 80152e6:	e014      	b.n	8015312 <_vfiprintf_r+0x13a>
 80152e8:	eba0 0308 	sub.w	r3, r0, r8
 80152ec:	fa09 f303 	lsl.w	r3, r9, r3
 80152f0:	4313      	orrs	r3, r2
 80152f2:	9304      	str	r3, [sp, #16]
 80152f4:	46a2      	mov	sl, r4
 80152f6:	e7d2      	b.n	801529e <_vfiprintf_r+0xc6>
 80152f8:	9b03      	ldr	r3, [sp, #12]
 80152fa:	1d19      	adds	r1, r3, #4
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	9103      	str	r1, [sp, #12]
 8015300:	2b00      	cmp	r3, #0
 8015302:	bfbb      	ittet	lt
 8015304:	425b      	neglt	r3, r3
 8015306:	f042 0202 	orrlt.w	r2, r2, #2
 801530a:	9307      	strge	r3, [sp, #28]
 801530c:	9307      	strlt	r3, [sp, #28]
 801530e:	bfb8      	it	lt
 8015310:	9204      	strlt	r2, [sp, #16]
 8015312:	7823      	ldrb	r3, [r4, #0]
 8015314:	2b2e      	cmp	r3, #46	; 0x2e
 8015316:	d10c      	bne.n	8015332 <_vfiprintf_r+0x15a>
 8015318:	7863      	ldrb	r3, [r4, #1]
 801531a:	2b2a      	cmp	r3, #42	; 0x2a
 801531c:	d134      	bne.n	8015388 <_vfiprintf_r+0x1b0>
 801531e:	9b03      	ldr	r3, [sp, #12]
 8015320:	1d1a      	adds	r2, r3, #4
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	9203      	str	r2, [sp, #12]
 8015326:	2b00      	cmp	r3, #0
 8015328:	bfb8      	it	lt
 801532a:	f04f 33ff 	movlt.w	r3, #4294967295
 801532e:	3402      	adds	r4, #2
 8015330:	9305      	str	r3, [sp, #20]
 8015332:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015408 <_vfiprintf_r+0x230>
 8015336:	7821      	ldrb	r1, [r4, #0]
 8015338:	2203      	movs	r2, #3
 801533a:	4650      	mov	r0, sl
 801533c:	f7ea ff70 	bl	8000220 <memchr>
 8015340:	b138      	cbz	r0, 8015352 <_vfiprintf_r+0x17a>
 8015342:	9b04      	ldr	r3, [sp, #16]
 8015344:	eba0 000a 	sub.w	r0, r0, sl
 8015348:	2240      	movs	r2, #64	; 0x40
 801534a:	4082      	lsls	r2, r0
 801534c:	4313      	orrs	r3, r2
 801534e:	3401      	adds	r4, #1
 8015350:	9304      	str	r3, [sp, #16]
 8015352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015356:	4829      	ldr	r0, [pc, #164]	; (80153fc <_vfiprintf_r+0x224>)
 8015358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801535c:	2206      	movs	r2, #6
 801535e:	f7ea ff5f 	bl	8000220 <memchr>
 8015362:	2800      	cmp	r0, #0
 8015364:	d03f      	beq.n	80153e6 <_vfiprintf_r+0x20e>
 8015366:	4b26      	ldr	r3, [pc, #152]	; (8015400 <_vfiprintf_r+0x228>)
 8015368:	bb1b      	cbnz	r3, 80153b2 <_vfiprintf_r+0x1da>
 801536a:	9b03      	ldr	r3, [sp, #12]
 801536c:	3307      	adds	r3, #7
 801536e:	f023 0307 	bic.w	r3, r3, #7
 8015372:	3308      	adds	r3, #8
 8015374:	9303      	str	r3, [sp, #12]
 8015376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015378:	443b      	add	r3, r7
 801537a:	9309      	str	r3, [sp, #36]	; 0x24
 801537c:	e768      	b.n	8015250 <_vfiprintf_r+0x78>
 801537e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015382:	460c      	mov	r4, r1
 8015384:	2001      	movs	r0, #1
 8015386:	e7a6      	b.n	80152d6 <_vfiprintf_r+0xfe>
 8015388:	2300      	movs	r3, #0
 801538a:	3401      	adds	r4, #1
 801538c:	9305      	str	r3, [sp, #20]
 801538e:	4619      	mov	r1, r3
 8015390:	f04f 0c0a 	mov.w	ip, #10
 8015394:	4620      	mov	r0, r4
 8015396:	f810 2b01 	ldrb.w	r2, [r0], #1
 801539a:	3a30      	subs	r2, #48	; 0x30
 801539c:	2a09      	cmp	r2, #9
 801539e:	d903      	bls.n	80153a8 <_vfiprintf_r+0x1d0>
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d0c6      	beq.n	8015332 <_vfiprintf_r+0x15a>
 80153a4:	9105      	str	r1, [sp, #20]
 80153a6:	e7c4      	b.n	8015332 <_vfiprintf_r+0x15a>
 80153a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80153ac:	4604      	mov	r4, r0
 80153ae:	2301      	movs	r3, #1
 80153b0:	e7f0      	b.n	8015394 <_vfiprintf_r+0x1bc>
 80153b2:	ab03      	add	r3, sp, #12
 80153b4:	9300      	str	r3, [sp, #0]
 80153b6:	462a      	mov	r2, r5
 80153b8:	4b12      	ldr	r3, [pc, #72]	; (8015404 <_vfiprintf_r+0x22c>)
 80153ba:	a904      	add	r1, sp, #16
 80153bc:	4630      	mov	r0, r6
 80153be:	f7fc fb4d 	bl	8011a5c <_printf_float>
 80153c2:	4607      	mov	r7, r0
 80153c4:	1c78      	adds	r0, r7, #1
 80153c6:	d1d6      	bne.n	8015376 <_vfiprintf_r+0x19e>
 80153c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153ca:	07d9      	lsls	r1, r3, #31
 80153cc:	d405      	bmi.n	80153da <_vfiprintf_r+0x202>
 80153ce:	89ab      	ldrh	r3, [r5, #12]
 80153d0:	059a      	lsls	r2, r3, #22
 80153d2:	d402      	bmi.n	80153da <_vfiprintf_r+0x202>
 80153d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153d6:	f7fd fb5d 	bl	8012a94 <__retarget_lock_release_recursive>
 80153da:	89ab      	ldrh	r3, [r5, #12]
 80153dc:	065b      	lsls	r3, r3, #25
 80153de:	f53f af1d 	bmi.w	801521c <_vfiprintf_r+0x44>
 80153e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153e4:	e71c      	b.n	8015220 <_vfiprintf_r+0x48>
 80153e6:	ab03      	add	r3, sp, #12
 80153e8:	9300      	str	r3, [sp, #0]
 80153ea:	462a      	mov	r2, r5
 80153ec:	4b05      	ldr	r3, [pc, #20]	; (8015404 <_vfiprintf_r+0x22c>)
 80153ee:	a904      	add	r1, sp, #16
 80153f0:	4630      	mov	r0, r6
 80153f2:	f7fc fdd7 	bl	8011fa4 <_printf_i>
 80153f6:	e7e4      	b.n	80153c2 <_vfiprintf_r+0x1ea>
 80153f8:	080174a9 	.word	0x080174a9
 80153fc:	080174b3 	.word	0x080174b3
 8015400:	08011a5d 	.word	0x08011a5d
 8015404:	080151b3 	.word	0x080151b3
 8015408:	080174af 	.word	0x080174af

0801540c <__sflush_r>:
 801540c:	898a      	ldrh	r2, [r1, #12]
 801540e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015412:	4605      	mov	r5, r0
 8015414:	0710      	lsls	r0, r2, #28
 8015416:	460c      	mov	r4, r1
 8015418:	d458      	bmi.n	80154cc <__sflush_r+0xc0>
 801541a:	684b      	ldr	r3, [r1, #4]
 801541c:	2b00      	cmp	r3, #0
 801541e:	dc05      	bgt.n	801542c <__sflush_r+0x20>
 8015420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015422:	2b00      	cmp	r3, #0
 8015424:	dc02      	bgt.n	801542c <__sflush_r+0x20>
 8015426:	2000      	movs	r0, #0
 8015428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801542c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801542e:	2e00      	cmp	r6, #0
 8015430:	d0f9      	beq.n	8015426 <__sflush_r+0x1a>
 8015432:	2300      	movs	r3, #0
 8015434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015438:	682f      	ldr	r7, [r5, #0]
 801543a:	6a21      	ldr	r1, [r4, #32]
 801543c:	602b      	str	r3, [r5, #0]
 801543e:	d032      	beq.n	80154a6 <__sflush_r+0x9a>
 8015440:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015442:	89a3      	ldrh	r3, [r4, #12]
 8015444:	075a      	lsls	r2, r3, #29
 8015446:	d505      	bpl.n	8015454 <__sflush_r+0x48>
 8015448:	6863      	ldr	r3, [r4, #4]
 801544a:	1ac0      	subs	r0, r0, r3
 801544c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801544e:	b10b      	cbz	r3, 8015454 <__sflush_r+0x48>
 8015450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015452:	1ac0      	subs	r0, r0, r3
 8015454:	2300      	movs	r3, #0
 8015456:	4602      	mov	r2, r0
 8015458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801545a:	6a21      	ldr	r1, [r4, #32]
 801545c:	4628      	mov	r0, r5
 801545e:	47b0      	blx	r6
 8015460:	1c43      	adds	r3, r0, #1
 8015462:	89a3      	ldrh	r3, [r4, #12]
 8015464:	d106      	bne.n	8015474 <__sflush_r+0x68>
 8015466:	6829      	ldr	r1, [r5, #0]
 8015468:	291d      	cmp	r1, #29
 801546a:	d82b      	bhi.n	80154c4 <__sflush_r+0xb8>
 801546c:	4a29      	ldr	r2, [pc, #164]	; (8015514 <__sflush_r+0x108>)
 801546e:	410a      	asrs	r2, r1
 8015470:	07d6      	lsls	r6, r2, #31
 8015472:	d427      	bmi.n	80154c4 <__sflush_r+0xb8>
 8015474:	2200      	movs	r2, #0
 8015476:	6062      	str	r2, [r4, #4]
 8015478:	04d9      	lsls	r1, r3, #19
 801547a:	6922      	ldr	r2, [r4, #16]
 801547c:	6022      	str	r2, [r4, #0]
 801547e:	d504      	bpl.n	801548a <__sflush_r+0x7e>
 8015480:	1c42      	adds	r2, r0, #1
 8015482:	d101      	bne.n	8015488 <__sflush_r+0x7c>
 8015484:	682b      	ldr	r3, [r5, #0]
 8015486:	b903      	cbnz	r3, 801548a <__sflush_r+0x7e>
 8015488:	6560      	str	r0, [r4, #84]	; 0x54
 801548a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801548c:	602f      	str	r7, [r5, #0]
 801548e:	2900      	cmp	r1, #0
 8015490:	d0c9      	beq.n	8015426 <__sflush_r+0x1a>
 8015492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015496:	4299      	cmp	r1, r3
 8015498:	d002      	beq.n	80154a0 <__sflush_r+0x94>
 801549a:	4628      	mov	r0, r5
 801549c:	f7fe f98a 	bl	80137b4 <_free_r>
 80154a0:	2000      	movs	r0, #0
 80154a2:	6360      	str	r0, [r4, #52]	; 0x34
 80154a4:	e7c0      	b.n	8015428 <__sflush_r+0x1c>
 80154a6:	2301      	movs	r3, #1
 80154a8:	4628      	mov	r0, r5
 80154aa:	47b0      	blx	r6
 80154ac:	1c41      	adds	r1, r0, #1
 80154ae:	d1c8      	bne.n	8015442 <__sflush_r+0x36>
 80154b0:	682b      	ldr	r3, [r5, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d0c5      	beq.n	8015442 <__sflush_r+0x36>
 80154b6:	2b1d      	cmp	r3, #29
 80154b8:	d001      	beq.n	80154be <__sflush_r+0xb2>
 80154ba:	2b16      	cmp	r3, #22
 80154bc:	d101      	bne.n	80154c2 <__sflush_r+0xb6>
 80154be:	602f      	str	r7, [r5, #0]
 80154c0:	e7b1      	b.n	8015426 <__sflush_r+0x1a>
 80154c2:	89a3      	ldrh	r3, [r4, #12]
 80154c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154c8:	81a3      	strh	r3, [r4, #12]
 80154ca:	e7ad      	b.n	8015428 <__sflush_r+0x1c>
 80154cc:	690f      	ldr	r7, [r1, #16]
 80154ce:	2f00      	cmp	r7, #0
 80154d0:	d0a9      	beq.n	8015426 <__sflush_r+0x1a>
 80154d2:	0793      	lsls	r3, r2, #30
 80154d4:	680e      	ldr	r6, [r1, #0]
 80154d6:	bf08      	it	eq
 80154d8:	694b      	ldreq	r3, [r1, #20]
 80154da:	600f      	str	r7, [r1, #0]
 80154dc:	bf18      	it	ne
 80154de:	2300      	movne	r3, #0
 80154e0:	eba6 0807 	sub.w	r8, r6, r7
 80154e4:	608b      	str	r3, [r1, #8]
 80154e6:	f1b8 0f00 	cmp.w	r8, #0
 80154ea:	dd9c      	ble.n	8015426 <__sflush_r+0x1a>
 80154ec:	6a21      	ldr	r1, [r4, #32]
 80154ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80154f0:	4643      	mov	r3, r8
 80154f2:	463a      	mov	r2, r7
 80154f4:	4628      	mov	r0, r5
 80154f6:	47b0      	blx	r6
 80154f8:	2800      	cmp	r0, #0
 80154fa:	dc06      	bgt.n	801550a <__sflush_r+0xfe>
 80154fc:	89a3      	ldrh	r3, [r4, #12]
 80154fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015502:	81a3      	strh	r3, [r4, #12]
 8015504:	f04f 30ff 	mov.w	r0, #4294967295
 8015508:	e78e      	b.n	8015428 <__sflush_r+0x1c>
 801550a:	4407      	add	r7, r0
 801550c:	eba8 0800 	sub.w	r8, r8, r0
 8015510:	e7e9      	b.n	80154e6 <__sflush_r+0xda>
 8015512:	bf00      	nop
 8015514:	dfbffffe 	.word	0xdfbffffe

08015518 <_fflush_r>:
 8015518:	b538      	push	{r3, r4, r5, lr}
 801551a:	690b      	ldr	r3, [r1, #16]
 801551c:	4605      	mov	r5, r0
 801551e:	460c      	mov	r4, r1
 8015520:	b913      	cbnz	r3, 8015528 <_fflush_r+0x10>
 8015522:	2500      	movs	r5, #0
 8015524:	4628      	mov	r0, r5
 8015526:	bd38      	pop	{r3, r4, r5, pc}
 8015528:	b118      	cbz	r0, 8015532 <_fflush_r+0x1a>
 801552a:	6a03      	ldr	r3, [r0, #32]
 801552c:	b90b      	cbnz	r3, 8015532 <_fflush_r+0x1a>
 801552e:	f7fd f8f7 	bl	8012720 <__sinit>
 8015532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d0f3      	beq.n	8015522 <_fflush_r+0xa>
 801553a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801553c:	07d0      	lsls	r0, r2, #31
 801553e:	d404      	bmi.n	801554a <_fflush_r+0x32>
 8015540:	0599      	lsls	r1, r3, #22
 8015542:	d402      	bmi.n	801554a <_fflush_r+0x32>
 8015544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015546:	f7fd faa4 	bl	8012a92 <__retarget_lock_acquire_recursive>
 801554a:	4628      	mov	r0, r5
 801554c:	4621      	mov	r1, r4
 801554e:	f7ff ff5d 	bl	801540c <__sflush_r>
 8015552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015554:	07da      	lsls	r2, r3, #31
 8015556:	4605      	mov	r5, r0
 8015558:	d4e4      	bmi.n	8015524 <_fflush_r+0xc>
 801555a:	89a3      	ldrh	r3, [r4, #12]
 801555c:	059b      	lsls	r3, r3, #22
 801555e:	d4e1      	bmi.n	8015524 <_fflush_r+0xc>
 8015560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015562:	f7fd fa97 	bl	8012a94 <__retarget_lock_release_recursive>
 8015566:	e7dd      	b.n	8015524 <_fflush_r+0xc>

08015568 <__swbuf_r>:
 8015568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801556a:	460e      	mov	r6, r1
 801556c:	4614      	mov	r4, r2
 801556e:	4605      	mov	r5, r0
 8015570:	b118      	cbz	r0, 801557a <__swbuf_r+0x12>
 8015572:	6a03      	ldr	r3, [r0, #32]
 8015574:	b90b      	cbnz	r3, 801557a <__swbuf_r+0x12>
 8015576:	f7fd f8d3 	bl	8012720 <__sinit>
 801557a:	69a3      	ldr	r3, [r4, #24]
 801557c:	60a3      	str	r3, [r4, #8]
 801557e:	89a3      	ldrh	r3, [r4, #12]
 8015580:	071a      	lsls	r2, r3, #28
 8015582:	d525      	bpl.n	80155d0 <__swbuf_r+0x68>
 8015584:	6923      	ldr	r3, [r4, #16]
 8015586:	b31b      	cbz	r3, 80155d0 <__swbuf_r+0x68>
 8015588:	6823      	ldr	r3, [r4, #0]
 801558a:	6922      	ldr	r2, [r4, #16]
 801558c:	1a98      	subs	r0, r3, r2
 801558e:	6963      	ldr	r3, [r4, #20]
 8015590:	b2f6      	uxtb	r6, r6
 8015592:	4283      	cmp	r3, r0
 8015594:	4637      	mov	r7, r6
 8015596:	dc04      	bgt.n	80155a2 <__swbuf_r+0x3a>
 8015598:	4621      	mov	r1, r4
 801559a:	4628      	mov	r0, r5
 801559c:	f7ff ffbc 	bl	8015518 <_fflush_r>
 80155a0:	b9e0      	cbnz	r0, 80155dc <__swbuf_r+0x74>
 80155a2:	68a3      	ldr	r3, [r4, #8]
 80155a4:	3b01      	subs	r3, #1
 80155a6:	60a3      	str	r3, [r4, #8]
 80155a8:	6823      	ldr	r3, [r4, #0]
 80155aa:	1c5a      	adds	r2, r3, #1
 80155ac:	6022      	str	r2, [r4, #0]
 80155ae:	701e      	strb	r6, [r3, #0]
 80155b0:	6962      	ldr	r2, [r4, #20]
 80155b2:	1c43      	adds	r3, r0, #1
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d004      	beq.n	80155c2 <__swbuf_r+0x5a>
 80155b8:	89a3      	ldrh	r3, [r4, #12]
 80155ba:	07db      	lsls	r3, r3, #31
 80155bc:	d506      	bpl.n	80155cc <__swbuf_r+0x64>
 80155be:	2e0a      	cmp	r6, #10
 80155c0:	d104      	bne.n	80155cc <__swbuf_r+0x64>
 80155c2:	4621      	mov	r1, r4
 80155c4:	4628      	mov	r0, r5
 80155c6:	f7ff ffa7 	bl	8015518 <_fflush_r>
 80155ca:	b938      	cbnz	r0, 80155dc <__swbuf_r+0x74>
 80155cc:	4638      	mov	r0, r7
 80155ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155d0:	4621      	mov	r1, r4
 80155d2:	4628      	mov	r0, r5
 80155d4:	f000 f806 	bl	80155e4 <__swsetup_r>
 80155d8:	2800      	cmp	r0, #0
 80155da:	d0d5      	beq.n	8015588 <__swbuf_r+0x20>
 80155dc:	f04f 37ff 	mov.w	r7, #4294967295
 80155e0:	e7f4      	b.n	80155cc <__swbuf_r+0x64>
	...

080155e4 <__swsetup_r>:
 80155e4:	b538      	push	{r3, r4, r5, lr}
 80155e6:	4b2a      	ldr	r3, [pc, #168]	; (8015690 <__swsetup_r+0xac>)
 80155e8:	4605      	mov	r5, r0
 80155ea:	6818      	ldr	r0, [r3, #0]
 80155ec:	460c      	mov	r4, r1
 80155ee:	b118      	cbz	r0, 80155f8 <__swsetup_r+0x14>
 80155f0:	6a03      	ldr	r3, [r0, #32]
 80155f2:	b90b      	cbnz	r3, 80155f8 <__swsetup_r+0x14>
 80155f4:	f7fd f894 	bl	8012720 <__sinit>
 80155f8:	89a3      	ldrh	r3, [r4, #12]
 80155fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80155fe:	0718      	lsls	r0, r3, #28
 8015600:	d422      	bmi.n	8015648 <__swsetup_r+0x64>
 8015602:	06d9      	lsls	r1, r3, #27
 8015604:	d407      	bmi.n	8015616 <__swsetup_r+0x32>
 8015606:	2309      	movs	r3, #9
 8015608:	602b      	str	r3, [r5, #0]
 801560a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801560e:	81a3      	strh	r3, [r4, #12]
 8015610:	f04f 30ff 	mov.w	r0, #4294967295
 8015614:	e034      	b.n	8015680 <__swsetup_r+0x9c>
 8015616:	0758      	lsls	r0, r3, #29
 8015618:	d512      	bpl.n	8015640 <__swsetup_r+0x5c>
 801561a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801561c:	b141      	cbz	r1, 8015630 <__swsetup_r+0x4c>
 801561e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015622:	4299      	cmp	r1, r3
 8015624:	d002      	beq.n	801562c <__swsetup_r+0x48>
 8015626:	4628      	mov	r0, r5
 8015628:	f7fe f8c4 	bl	80137b4 <_free_r>
 801562c:	2300      	movs	r3, #0
 801562e:	6363      	str	r3, [r4, #52]	; 0x34
 8015630:	89a3      	ldrh	r3, [r4, #12]
 8015632:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015636:	81a3      	strh	r3, [r4, #12]
 8015638:	2300      	movs	r3, #0
 801563a:	6063      	str	r3, [r4, #4]
 801563c:	6923      	ldr	r3, [r4, #16]
 801563e:	6023      	str	r3, [r4, #0]
 8015640:	89a3      	ldrh	r3, [r4, #12]
 8015642:	f043 0308 	orr.w	r3, r3, #8
 8015646:	81a3      	strh	r3, [r4, #12]
 8015648:	6923      	ldr	r3, [r4, #16]
 801564a:	b94b      	cbnz	r3, 8015660 <__swsetup_r+0x7c>
 801564c:	89a3      	ldrh	r3, [r4, #12]
 801564e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015656:	d003      	beq.n	8015660 <__swsetup_r+0x7c>
 8015658:	4621      	mov	r1, r4
 801565a:	4628      	mov	r0, r5
 801565c:	f000 fc15 	bl	8015e8a <__smakebuf_r>
 8015660:	89a0      	ldrh	r0, [r4, #12]
 8015662:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015666:	f010 0301 	ands.w	r3, r0, #1
 801566a:	d00a      	beq.n	8015682 <__swsetup_r+0x9e>
 801566c:	2300      	movs	r3, #0
 801566e:	60a3      	str	r3, [r4, #8]
 8015670:	6963      	ldr	r3, [r4, #20]
 8015672:	425b      	negs	r3, r3
 8015674:	61a3      	str	r3, [r4, #24]
 8015676:	6923      	ldr	r3, [r4, #16]
 8015678:	b943      	cbnz	r3, 801568c <__swsetup_r+0xa8>
 801567a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801567e:	d1c4      	bne.n	801560a <__swsetup_r+0x26>
 8015680:	bd38      	pop	{r3, r4, r5, pc}
 8015682:	0781      	lsls	r1, r0, #30
 8015684:	bf58      	it	pl
 8015686:	6963      	ldrpl	r3, [r4, #20]
 8015688:	60a3      	str	r3, [r4, #8]
 801568a:	e7f4      	b.n	8015676 <__swsetup_r+0x92>
 801568c:	2000      	movs	r0, #0
 801568e:	e7f7      	b.n	8015680 <__swsetup_r+0x9c>
 8015690:	200000a0 	.word	0x200000a0

08015694 <strncmp>:
 8015694:	b510      	push	{r4, lr}
 8015696:	b16a      	cbz	r2, 80156b4 <strncmp+0x20>
 8015698:	3901      	subs	r1, #1
 801569a:	1884      	adds	r4, r0, r2
 801569c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80156a4:	429a      	cmp	r2, r3
 80156a6:	d103      	bne.n	80156b0 <strncmp+0x1c>
 80156a8:	42a0      	cmp	r0, r4
 80156aa:	d001      	beq.n	80156b0 <strncmp+0x1c>
 80156ac:	2a00      	cmp	r2, #0
 80156ae:	d1f5      	bne.n	801569c <strncmp+0x8>
 80156b0:	1ad0      	subs	r0, r2, r3
 80156b2:	bd10      	pop	{r4, pc}
 80156b4:	4610      	mov	r0, r2
 80156b6:	e7fc      	b.n	80156b2 <strncmp+0x1e>

080156b8 <nan>:
 80156b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80156c0 <nan+0x8>
 80156bc:	4770      	bx	lr
 80156be:	bf00      	nop
 80156c0:	00000000 	.word	0x00000000
 80156c4:	7ff80000 	.word	0x7ff80000

080156c8 <_calloc_r>:
 80156c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80156ca:	fba1 2402 	umull	r2, r4, r1, r2
 80156ce:	b94c      	cbnz	r4, 80156e4 <_calloc_r+0x1c>
 80156d0:	4611      	mov	r1, r2
 80156d2:	9201      	str	r2, [sp, #4]
 80156d4:	f7fc f896 	bl	8011804 <_malloc_r>
 80156d8:	9a01      	ldr	r2, [sp, #4]
 80156da:	4605      	mov	r5, r0
 80156dc:	b930      	cbnz	r0, 80156ec <_calloc_r+0x24>
 80156de:	4628      	mov	r0, r5
 80156e0:	b003      	add	sp, #12
 80156e2:	bd30      	pop	{r4, r5, pc}
 80156e4:	220c      	movs	r2, #12
 80156e6:	6002      	str	r2, [r0, #0]
 80156e8:	2500      	movs	r5, #0
 80156ea:	e7f8      	b.n	80156de <_calloc_r+0x16>
 80156ec:	4621      	mov	r1, r4
 80156ee:	f7fd f8ec 	bl	80128ca <memset>
 80156f2:	e7f4      	b.n	80156de <_calloc_r+0x16>

080156f4 <rshift>:
 80156f4:	6903      	ldr	r3, [r0, #16]
 80156f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80156fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015702:	f100 0414 	add.w	r4, r0, #20
 8015706:	dd45      	ble.n	8015794 <rshift+0xa0>
 8015708:	f011 011f 	ands.w	r1, r1, #31
 801570c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015710:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015714:	d10c      	bne.n	8015730 <rshift+0x3c>
 8015716:	f100 0710 	add.w	r7, r0, #16
 801571a:	4629      	mov	r1, r5
 801571c:	42b1      	cmp	r1, r6
 801571e:	d334      	bcc.n	801578a <rshift+0x96>
 8015720:	1a9b      	subs	r3, r3, r2
 8015722:	009b      	lsls	r3, r3, #2
 8015724:	1eea      	subs	r2, r5, #3
 8015726:	4296      	cmp	r6, r2
 8015728:	bf38      	it	cc
 801572a:	2300      	movcc	r3, #0
 801572c:	4423      	add	r3, r4
 801572e:	e015      	b.n	801575c <rshift+0x68>
 8015730:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015734:	f1c1 0820 	rsb	r8, r1, #32
 8015738:	40cf      	lsrs	r7, r1
 801573a:	f105 0e04 	add.w	lr, r5, #4
 801573e:	46a1      	mov	r9, r4
 8015740:	4576      	cmp	r6, lr
 8015742:	46f4      	mov	ip, lr
 8015744:	d815      	bhi.n	8015772 <rshift+0x7e>
 8015746:	1a9a      	subs	r2, r3, r2
 8015748:	0092      	lsls	r2, r2, #2
 801574a:	3a04      	subs	r2, #4
 801574c:	3501      	adds	r5, #1
 801574e:	42ae      	cmp	r6, r5
 8015750:	bf38      	it	cc
 8015752:	2200      	movcc	r2, #0
 8015754:	18a3      	adds	r3, r4, r2
 8015756:	50a7      	str	r7, [r4, r2]
 8015758:	b107      	cbz	r7, 801575c <rshift+0x68>
 801575a:	3304      	adds	r3, #4
 801575c:	1b1a      	subs	r2, r3, r4
 801575e:	42a3      	cmp	r3, r4
 8015760:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015764:	bf08      	it	eq
 8015766:	2300      	moveq	r3, #0
 8015768:	6102      	str	r2, [r0, #16]
 801576a:	bf08      	it	eq
 801576c:	6143      	streq	r3, [r0, #20]
 801576e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015772:	f8dc c000 	ldr.w	ip, [ip]
 8015776:	fa0c fc08 	lsl.w	ip, ip, r8
 801577a:	ea4c 0707 	orr.w	r7, ip, r7
 801577e:	f849 7b04 	str.w	r7, [r9], #4
 8015782:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015786:	40cf      	lsrs	r7, r1
 8015788:	e7da      	b.n	8015740 <rshift+0x4c>
 801578a:	f851 cb04 	ldr.w	ip, [r1], #4
 801578e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015792:	e7c3      	b.n	801571c <rshift+0x28>
 8015794:	4623      	mov	r3, r4
 8015796:	e7e1      	b.n	801575c <rshift+0x68>

08015798 <__hexdig_fun>:
 8015798:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801579c:	2b09      	cmp	r3, #9
 801579e:	d802      	bhi.n	80157a6 <__hexdig_fun+0xe>
 80157a0:	3820      	subs	r0, #32
 80157a2:	b2c0      	uxtb	r0, r0
 80157a4:	4770      	bx	lr
 80157a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80157aa:	2b05      	cmp	r3, #5
 80157ac:	d801      	bhi.n	80157b2 <__hexdig_fun+0x1a>
 80157ae:	3847      	subs	r0, #71	; 0x47
 80157b0:	e7f7      	b.n	80157a2 <__hexdig_fun+0xa>
 80157b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80157b6:	2b05      	cmp	r3, #5
 80157b8:	d801      	bhi.n	80157be <__hexdig_fun+0x26>
 80157ba:	3827      	subs	r0, #39	; 0x27
 80157bc:	e7f1      	b.n	80157a2 <__hexdig_fun+0xa>
 80157be:	2000      	movs	r0, #0
 80157c0:	4770      	bx	lr
	...

080157c4 <__gethex>:
 80157c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c8:	4617      	mov	r7, r2
 80157ca:	680a      	ldr	r2, [r1, #0]
 80157cc:	b085      	sub	sp, #20
 80157ce:	f102 0b02 	add.w	fp, r2, #2
 80157d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80157d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80157da:	4681      	mov	r9, r0
 80157dc:	468a      	mov	sl, r1
 80157de:	9302      	str	r3, [sp, #8]
 80157e0:	32fe      	adds	r2, #254	; 0xfe
 80157e2:	eb02 030b 	add.w	r3, r2, fp
 80157e6:	46d8      	mov	r8, fp
 80157e8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80157ec:	9301      	str	r3, [sp, #4]
 80157ee:	2830      	cmp	r0, #48	; 0x30
 80157f0:	d0f7      	beq.n	80157e2 <__gethex+0x1e>
 80157f2:	f7ff ffd1 	bl	8015798 <__hexdig_fun>
 80157f6:	4604      	mov	r4, r0
 80157f8:	2800      	cmp	r0, #0
 80157fa:	d138      	bne.n	801586e <__gethex+0xaa>
 80157fc:	49a7      	ldr	r1, [pc, #668]	; (8015a9c <__gethex+0x2d8>)
 80157fe:	2201      	movs	r2, #1
 8015800:	4640      	mov	r0, r8
 8015802:	f7ff ff47 	bl	8015694 <strncmp>
 8015806:	4606      	mov	r6, r0
 8015808:	2800      	cmp	r0, #0
 801580a:	d169      	bne.n	80158e0 <__gethex+0x11c>
 801580c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015810:	465d      	mov	r5, fp
 8015812:	f7ff ffc1 	bl	8015798 <__hexdig_fun>
 8015816:	2800      	cmp	r0, #0
 8015818:	d064      	beq.n	80158e4 <__gethex+0x120>
 801581a:	465a      	mov	r2, fp
 801581c:	7810      	ldrb	r0, [r2, #0]
 801581e:	2830      	cmp	r0, #48	; 0x30
 8015820:	4690      	mov	r8, r2
 8015822:	f102 0201 	add.w	r2, r2, #1
 8015826:	d0f9      	beq.n	801581c <__gethex+0x58>
 8015828:	f7ff ffb6 	bl	8015798 <__hexdig_fun>
 801582c:	2301      	movs	r3, #1
 801582e:	fab0 f480 	clz	r4, r0
 8015832:	0964      	lsrs	r4, r4, #5
 8015834:	465e      	mov	r6, fp
 8015836:	9301      	str	r3, [sp, #4]
 8015838:	4642      	mov	r2, r8
 801583a:	4615      	mov	r5, r2
 801583c:	3201      	adds	r2, #1
 801583e:	7828      	ldrb	r0, [r5, #0]
 8015840:	f7ff ffaa 	bl	8015798 <__hexdig_fun>
 8015844:	2800      	cmp	r0, #0
 8015846:	d1f8      	bne.n	801583a <__gethex+0x76>
 8015848:	4994      	ldr	r1, [pc, #592]	; (8015a9c <__gethex+0x2d8>)
 801584a:	2201      	movs	r2, #1
 801584c:	4628      	mov	r0, r5
 801584e:	f7ff ff21 	bl	8015694 <strncmp>
 8015852:	b978      	cbnz	r0, 8015874 <__gethex+0xb0>
 8015854:	b946      	cbnz	r6, 8015868 <__gethex+0xa4>
 8015856:	1c6e      	adds	r6, r5, #1
 8015858:	4632      	mov	r2, r6
 801585a:	4615      	mov	r5, r2
 801585c:	3201      	adds	r2, #1
 801585e:	7828      	ldrb	r0, [r5, #0]
 8015860:	f7ff ff9a 	bl	8015798 <__hexdig_fun>
 8015864:	2800      	cmp	r0, #0
 8015866:	d1f8      	bne.n	801585a <__gethex+0x96>
 8015868:	1b73      	subs	r3, r6, r5
 801586a:	009e      	lsls	r6, r3, #2
 801586c:	e004      	b.n	8015878 <__gethex+0xb4>
 801586e:	2400      	movs	r4, #0
 8015870:	4626      	mov	r6, r4
 8015872:	e7e1      	b.n	8015838 <__gethex+0x74>
 8015874:	2e00      	cmp	r6, #0
 8015876:	d1f7      	bne.n	8015868 <__gethex+0xa4>
 8015878:	782b      	ldrb	r3, [r5, #0]
 801587a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801587e:	2b50      	cmp	r3, #80	; 0x50
 8015880:	d13d      	bne.n	80158fe <__gethex+0x13a>
 8015882:	786b      	ldrb	r3, [r5, #1]
 8015884:	2b2b      	cmp	r3, #43	; 0x2b
 8015886:	d02f      	beq.n	80158e8 <__gethex+0x124>
 8015888:	2b2d      	cmp	r3, #45	; 0x2d
 801588a:	d031      	beq.n	80158f0 <__gethex+0x12c>
 801588c:	1c69      	adds	r1, r5, #1
 801588e:	f04f 0b00 	mov.w	fp, #0
 8015892:	7808      	ldrb	r0, [r1, #0]
 8015894:	f7ff ff80 	bl	8015798 <__hexdig_fun>
 8015898:	1e42      	subs	r2, r0, #1
 801589a:	b2d2      	uxtb	r2, r2
 801589c:	2a18      	cmp	r2, #24
 801589e:	d82e      	bhi.n	80158fe <__gethex+0x13a>
 80158a0:	f1a0 0210 	sub.w	r2, r0, #16
 80158a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80158a8:	f7ff ff76 	bl	8015798 <__hexdig_fun>
 80158ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80158b0:	fa5f fc8c 	uxtb.w	ip, ip
 80158b4:	f1bc 0f18 	cmp.w	ip, #24
 80158b8:	d91d      	bls.n	80158f6 <__gethex+0x132>
 80158ba:	f1bb 0f00 	cmp.w	fp, #0
 80158be:	d000      	beq.n	80158c2 <__gethex+0xfe>
 80158c0:	4252      	negs	r2, r2
 80158c2:	4416      	add	r6, r2
 80158c4:	f8ca 1000 	str.w	r1, [sl]
 80158c8:	b1dc      	cbz	r4, 8015902 <__gethex+0x13e>
 80158ca:	9b01      	ldr	r3, [sp, #4]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	bf14      	ite	ne
 80158d0:	f04f 0800 	movne.w	r8, #0
 80158d4:	f04f 0806 	moveq.w	r8, #6
 80158d8:	4640      	mov	r0, r8
 80158da:	b005      	add	sp, #20
 80158dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158e0:	4645      	mov	r5, r8
 80158e2:	4626      	mov	r6, r4
 80158e4:	2401      	movs	r4, #1
 80158e6:	e7c7      	b.n	8015878 <__gethex+0xb4>
 80158e8:	f04f 0b00 	mov.w	fp, #0
 80158ec:	1ca9      	adds	r1, r5, #2
 80158ee:	e7d0      	b.n	8015892 <__gethex+0xce>
 80158f0:	f04f 0b01 	mov.w	fp, #1
 80158f4:	e7fa      	b.n	80158ec <__gethex+0x128>
 80158f6:	230a      	movs	r3, #10
 80158f8:	fb03 0002 	mla	r0, r3, r2, r0
 80158fc:	e7d0      	b.n	80158a0 <__gethex+0xdc>
 80158fe:	4629      	mov	r1, r5
 8015900:	e7e0      	b.n	80158c4 <__gethex+0x100>
 8015902:	eba5 0308 	sub.w	r3, r5, r8
 8015906:	3b01      	subs	r3, #1
 8015908:	4621      	mov	r1, r4
 801590a:	2b07      	cmp	r3, #7
 801590c:	dc0a      	bgt.n	8015924 <__gethex+0x160>
 801590e:	4648      	mov	r0, r9
 8015910:	f7fd ff9c 	bl	801384c <_Balloc>
 8015914:	4604      	mov	r4, r0
 8015916:	b940      	cbnz	r0, 801592a <__gethex+0x166>
 8015918:	4b61      	ldr	r3, [pc, #388]	; (8015aa0 <__gethex+0x2dc>)
 801591a:	4602      	mov	r2, r0
 801591c:	21e4      	movs	r1, #228	; 0xe4
 801591e:	4861      	ldr	r0, [pc, #388]	; (8015aa4 <__gethex+0x2e0>)
 8015920:	f7fb ff10 	bl	8011744 <__assert_func>
 8015924:	3101      	adds	r1, #1
 8015926:	105b      	asrs	r3, r3, #1
 8015928:	e7ef      	b.n	801590a <__gethex+0x146>
 801592a:	f100 0a14 	add.w	sl, r0, #20
 801592e:	2300      	movs	r3, #0
 8015930:	495a      	ldr	r1, [pc, #360]	; (8015a9c <__gethex+0x2d8>)
 8015932:	f8cd a004 	str.w	sl, [sp, #4]
 8015936:	469b      	mov	fp, r3
 8015938:	45a8      	cmp	r8, r5
 801593a:	d342      	bcc.n	80159c2 <__gethex+0x1fe>
 801593c:	9801      	ldr	r0, [sp, #4]
 801593e:	f840 bb04 	str.w	fp, [r0], #4
 8015942:	eba0 000a 	sub.w	r0, r0, sl
 8015946:	1080      	asrs	r0, r0, #2
 8015948:	6120      	str	r0, [r4, #16]
 801594a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801594e:	4658      	mov	r0, fp
 8015950:	f7fe f86e 	bl	8013a30 <__hi0bits>
 8015954:	683d      	ldr	r5, [r7, #0]
 8015956:	eba8 0000 	sub.w	r0, r8, r0
 801595a:	42a8      	cmp	r0, r5
 801595c:	dd59      	ble.n	8015a12 <__gethex+0x24e>
 801595e:	eba0 0805 	sub.w	r8, r0, r5
 8015962:	4641      	mov	r1, r8
 8015964:	4620      	mov	r0, r4
 8015966:	f7fe fbfd 	bl	8014164 <__any_on>
 801596a:	4683      	mov	fp, r0
 801596c:	b1b8      	cbz	r0, 801599e <__gethex+0x1da>
 801596e:	f108 33ff 	add.w	r3, r8, #4294967295
 8015972:	1159      	asrs	r1, r3, #5
 8015974:	f003 021f 	and.w	r2, r3, #31
 8015978:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801597c:	f04f 0b01 	mov.w	fp, #1
 8015980:	fa0b f202 	lsl.w	r2, fp, r2
 8015984:	420a      	tst	r2, r1
 8015986:	d00a      	beq.n	801599e <__gethex+0x1da>
 8015988:	455b      	cmp	r3, fp
 801598a:	dd06      	ble.n	801599a <__gethex+0x1d6>
 801598c:	f1a8 0102 	sub.w	r1, r8, #2
 8015990:	4620      	mov	r0, r4
 8015992:	f7fe fbe7 	bl	8014164 <__any_on>
 8015996:	2800      	cmp	r0, #0
 8015998:	d138      	bne.n	8015a0c <__gethex+0x248>
 801599a:	f04f 0b02 	mov.w	fp, #2
 801599e:	4641      	mov	r1, r8
 80159a0:	4620      	mov	r0, r4
 80159a2:	f7ff fea7 	bl	80156f4 <rshift>
 80159a6:	4446      	add	r6, r8
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	42b3      	cmp	r3, r6
 80159ac:	da41      	bge.n	8015a32 <__gethex+0x26e>
 80159ae:	4621      	mov	r1, r4
 80159b0:	4648      	mov	r0, r9
 80159b2:	f7fd ff8b 	bl	80138cc <_Bfree>
 80159b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159b8:	2300      	movs	r3, #0
 80159ba:	6013      	str	r3, [r2, #0]
 80159bc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80159c0:	e78a      	b.n	80158d8 <__gethex+0x114>
 80159c2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80159c6:	2a2e      	cmp	r2, #46	; 0x2e
 80159c8:	d014      	beq.n	80159f4 <__gethex+0x230>
 80159ca:	2b20      	cmp	r3, #32
 80159cc:	d106      	bne.n	80159dc <__gethex+0x218>
 80159ce:	9b01      	ldr	r3, [sp, #4]
 80159d0:	f843 bb04 	str.w	fp, [r3], #4
 80159d4:	f04f 0b00 	mov.w	fp, #0
 80159d8:	9301      	str	r3, [sp, #4]
 80159da:	465b      	mov	r3, fp
 80159dc:	7828      	ldrb	r0, [r5, #0]
 80159de:	9303      	str	r3, [sp, #12]
 80159e0:	f7ff feda 	bl	8015798 <__hexdig_fun>
 80159e4:	9b03      	ldr	r3, [sp, #12]
 80159e6:	f000 000f 	and.w	r0, r0, #15
 80159ea:	4098      	lsls	r0, r3
 80159ec:	ea4b 0b00 	orr.w	fp, fp, r0
 80159f0:	3304      	adds	r3, #4
 80159f2:	e7a1      	b.n	8015938 <__gethex+0x174>
 80159f4:	45a8      	cmp	r8, r5
 80159f6:	d8e8      	bhi.n	80159ca <__gethex+0x206>
 80159f8:	2201      	movs	r2, #1
 80159fa:	4628      	mov	r0, r5
 80159fc:	9303      	str	r3, [sp, #12]
 80159fe:	f7ff fe49 	bl	8015694 <strncmp>
 8015a02:	4926      	ldr	r1, [pc, #152]	; (8015a9c <__gethex+0x2d8>)
 8015a04:	9b03      	ldr	r3, [sp, #12]
 8015a06:	2800      	cmp	r0, #0
 8015a08:	d1df      	bne.n	80159ca <__gethex+0x206>
 8015a0a:	e795      	b.n	8015938 <__gethex+0x174>
 8015a0c:	f04f 0b03 	mov.w	fp, #3
 8015a10:	e7c5      	b.n	801599e <__gethex+0x1da>
 8015a12:	da0b      	bge.n	8015a2c <__gethex+0x268>
 8015a14:	eba5 0800 	sub.w	r8, r5, r0
 8015a18:	4621      	mov	r1, r4
 8015a1a:	4642      	mov	r2, r8
 8015a1c:	4648      	mov	r0, r9
 8015a1e:	f7fe f96f 	bl	8013d00 <__lshift>
 8015a22:	eba6 0608 	sub.w	r6, r6, r8
 8015a26:	4604      	mov	r4, r0
 8015a28:	f100 0a14 	add.w	sl, r0, #20
 8015a2c:	f04f 0b00 	mov.w	fp, #0
 8015a30:	e7ba      	b.n	80159a8 <__gethex+0x1e4>
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	42b3      	cmp	r3, r6
 8015a36:	dd73      	ble.n	8015b20 <__gethex+0x35c>
 8015a38:	1b9e      	subs	r6, r3, r6
 8015a3a:	42b5      	cmp	r5, r6
 8015a3c:	dc34      	bgt.n	8015aa8 <__gethex+0x2e4>
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	2b02      	cmp	r3, #2
 8015a42:	d023      	beq.n	8015a8c <__gethex+0x2c8>
 8015a44:	2b03      	cmp	r3, #3
 8015a46:	d025      	beq.n	8015a94 <__gethex+0x2d0>
 8015a48:	2b01      	cmp	r3, #1
 8015a4a:	d115      	bne.n	8015a78 <__gethex+0x2b4>
 8015a4c:	42b5      	cmp	r5, r6
 8015a4e:	d113      	bne.n	8015a78 <__gethex+0x2b4>
 8015a50:	2d01      	cmp	r5, #1
 8015a52:	d10b      	bne.n	8015a6c <__gethex+0x2a8>
 8015a54:	9a02      	ldr	r2, [sp, #8]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	6013      	str	r3, [r2, #0]
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	6123      	str	r3, [r4, #16]
 8015a5e:	f8ca 3000 	str.w	r3, [sl]
 8015a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a64:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015a68:	601c      	str	r4, [r3, #0]
 8015a6a:	e735      	b.n	80158d8 <__gethex+0x114>
 8015a6c:	1e69      	subs	r1, r5, #1
 8015a6e:	4620      	mov	r0, r4
 8015a70:	f7fe fb78 	bl	8014164 <__any_on>
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d1ed      	bne.n	8015a54 <__gethex+0x290>
 8015a78:	4621      	mov	r1, r4
 8015a7a:	4648      	mov	r0, r9
 8015a7c:	f7fd ff26 	bl	80138cc <_Bfree>
 8015a80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a82:	2300      	movs	r3, #0
 8015a84:	6013      	str	r3, [r2, #0]
 8015a86:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015a8a:	e725      	b.n	80158d8 <__gethex+0x114>
 8015a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d1f2      	bne.n	8015a78 <__gethex+0x2b4>
 8015a92:	e7df      	b.n	8015a54 <__gethex+0x290>
 8015a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d1dc      	bne.n	8015a54 <__gethex+0x290>
 8015a9a:	e7ed      	b.n	8015a78 <__gethex+0x2b4>
 8015a9c:	08017354 	.word	0x08017354
 8015aa0:	080171e9 	.word	0x080171e9
 8015aa4:	080174c2 	.word	0x080174c2
 8015aa8:	f106 38ff 	add.w	r8, r6, #4294967295
 8015aac:	f1bb 0f00 	cmp.w	fp, #0
 8015ab0:	d133      	bne.n	8015b1a <__gethex+0x356>
 8015ab2:	f1b8 0f00 	cmp.w	r8, #0
 8015ab6:	d004      	beq.n	8015ac2 <__gethex+0x2fe>
 8015ab8:	4641      	mov	r1, r8
 8015aba:	4620      	mov	r0, r4
 8015abc:	f7fe fb52 	bl	8014164 <__any_on>
 8015ac0:	4683      	mov	fp, r0
 8015ac2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015acc:	f008 081f 	and.w	r8, r8, #31
 8015ad0:	fa03 f308 	lsl.w	r3, r3, r8
 8015ad4:	4213      	tst	r3, r2
 8015ad6:	4631      	mov	r1, r6
 8015ad8:	4620      	mov	r0, r4
 8015ada:	bf18      	it	ne
 8015adc:	f04b 0b02 	orrne.w	fp, fp, #2
 8015ae0:	1bad      	subs	r5, r5, r6
 8015ae2:	f7ff fe07 	bl	80156f4 <rshift>
 8015ae6:	687e      	ldr	r6, [r7, #4]
 8015ae8:	f04f 0802 	mov.w	r8, #2
 8015aec:	f1bb 0f00 	cmp.w	fp, #0
 8015af0:	d04a      	beq.n	8015b88 <__gethex+0x3c4>
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	2b02      	cmp	r3, #2
 8015af6:	d016      	beq.n	8015b26 <__gethex+0x362>
 8015af8:	2b03      	cmp	r3, #3
 8015afa:	d018      	beq.n	8015b2e <__gethex+0x36a>
 8015afc:	2b01      	cmp	r3, #1
 8015afe:	d109      	bne.n	8015b14 <__gethex+0x350>
 8015b00:	f01b 0f02 	tst.w	fp, #2
 8015b04:	d006      	beq.n	8015b14 <__gethex+0x350>
 8015b06:	f8da 3000 	ldr.w	r3, [sl]
 8015b0a:	ea4b 0b03 	orr.w	fp, fp, r3
 8015b0e:	f01b 0f01 	tst.w	fp, #1
 8015b12:	d10f      	bne.n	8015b34 <__gethex+0x370>
 8015b14:	f048 0810 	orr.w	r8, r8, #16
 8015b18:	e036      	b.n	8015b88 <__gethex+0x3c4>
 8015b1a:	f04f 0b01 	mov.w	fp, #1
 8015b1e:	e7d0      	b.n	8015ac2 <__gethex+0x2fe>
 8015b20:	f04f 0801 	mov.w	r8, #1
 8015b24:	e7e2      	b.n	8015aec <__gethex+0x328>
 8015b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b28:	f1c3 0301 	rsb	r3, r3, #1
 8015b2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d0ef      	beq.n	8015b14 <__gethex+0x350>
 8015b34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015b38:	f104 0214 	add.w	r2, r4, #20
 8015b3c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015b40:	9301      	str	r3, [sp, #4]
 8015b42:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8015b46:	2300      	movs	r3, #0
 8015b48:	4694      	mov	ip, r2
 8015b4a:	f852 1b04 	ldr.w	r1, [r2], #4
 8015b4e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8015b52:	d01e      	beq.n	8015b92 <__gethex+0x3ce>
 8015b54:	3101      	adds	r1, #1
 8015b56:	f8cc 1000 	str.w	r1, [ip]
 8015b5a:	f1b8 0f02 	cmp.w	r8, #2
 8015b5e:	f104 0214 	add.w	r2, r4, #20
 8015b62:	d13d      	bne.n	8015be0 <__gethex+0x41c>
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	3b01      	subs	r3, #1
 8015b68:	42ab      	cmp	r3, r5
 8015b6a:	d10b      	bne.n	8015b84 <__gethex+0x3c0>
 8015b6c:	1169      	asrs	r1, r5, #5
 8015b6e:	2301      	movs	r3, #1
 8015b70:	f005 051f 	and.w	r5, r5, #31
 8015b74:	fa03 f505 	lsl.w	r5, r3, r5
 8015b78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b7c:	421d      	tst	r5, r3
 8015b7e:	bf18      	it	ne
 8015b80:	f04f 0801 	movne.w	r8, #1
 8015b84:	f048 0820 	orr.w	r8, r8, #32
 8015b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b8a:	601c      	str	r4, [r3, #0]
 8015b8c:	9b02      	ldr	r3, [sp, #8]
 8015b8e:	601e      	str	r6, [r3, #0]
 8015b90:	e6a2      	b.n	80158d8 <__gethex+0x114>
 8015b92:	4290      	cmp	r0, r2
 8015b94:	f842 3c04 	str.w	r3, [r2, #-4]
 8015b98:	d8d6      	bhi.n	8015b48 <__gethex+0x384>
 8015b9a:	68a2      	ldr	r2, [r4, #8]
 8015b9c:	4593      	cmp	fp, r2
 8015b9e:	db17      	blt.n	8015bd0 <__gethex+0x40c>
 8015ba0:	6861      	ldr	r1, [r4, #4]
 8015ba2:	4648      	mov	r0, r9
 8015ba4:	3101      	adds	r1, #1
 8015ba6:	f7fd fe51 	bl	801384c <_Balloc>
 8015baa:	4682      	mov	sl, r0
 8015bac:	b918      	cbnz	r0, 8015bb6 <__gethex+0x3f2>
 8015bae:	4b1b      	ldr	r3, [pc, #108]	; (8015c1c <__gethex+0x458>)
 8015bb0:	4602      	mov	r2, r0
 8015bb2:	2184      	movs	r1, #132	; 0x84
 8015bb4:	e6b3      	b.n	801591e <__gethex+0x15a>
 8015bb6:	6922      	ldr	r2, [r4, #16]
 8015bb8:	3202      	adds	r2, #2
 8015bba:	f104 010c 	add.w	r1, r4, #12
 8015bbe:	0092      	lsls	r2, r2, #2
 8015bc0:	300c      	adds	r0, #12
 8015bc2:	f7fc ff68 	bl	8012a96 <memcpy>
 8015bc6:	4621      	mov	r1, r4
 8015bc8:	4648      	mov	r0, r9
 8015bca:	f7fd fe7f 	bl	80138cc <_Bfree>
 8015bce:	4654      	mov	r4, sl
 8015bd0:	6922      	ldr	r2, [r4, #16]
 8015bd2:	1c51      	adds	r1, r2, #1
 8015bd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015bd8:	6121      	str	r1, [r4, #16]
 8015bda:	2101      	movs	r1, #1
 8015bdc:	6151      	str	r1, [r2, #20]
 8015bde:	e7bc      	b.n	8015b5a <__gethex+0x396>
 8015be0:	6921      	ldr	r1, [r4, #16]
 8015be2:	4559      	cmp	r1, fp
 8015be4:	dd0b      	ble.n	8015bfe <__gethex+0x43a>
 8015be6:	2101      	movs	r1, #1
 8015be8:	4620      	mov	r0, r4
 8015bea:	f7ff fd83 	bl	80156f4 <rshift>
 8015bee:	68bb      	ldr	r3, [r7, #8]
 8015bf0:	3601      	adds	r6, #1
 8015bf2:	42b3      	cmp	r3, r6
 8015bf4:	f6ff aedb 	blt.w	80159ae <__gethex+0x1ea>
 8015bf8:	f04f 0801 	mov.w	r8, #1
 8015bfc:	e7c2      	b.n	8015b84 <__gethex+0x3c0>
 8015bfe:	f015 051f 	ands.w	r5, r5, #31
 8015c02:	d0f9      	beq.n	8015bf8 <__gethex+0x434>
 8015c04:	9b01      	ldr	r3, [sp, #4]
 8015c06:	441a      	add	r2, r3
 8015c08:	f1c5 0520 	rsb	r5, r5, #32
 8015c0c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8015c10:	f7fd ff0e 	bl	8013a30 <__hi0bits>
 8015c14:	42a8      	cmp	r0, r5
 8015c16:	dbe6      	blt.n	8015be6 <__gethex+0x422>
 8015c18:	e7ee      	b.n	8015bf8 <__gethex+0x434>
 8015c1a:	bf00      	nop
 8015c1c:	080171e9 	.word	0x080171e9

08015c20 <L_shift>:
 8015c20:	f1c2 0208 	rsb	r2, r2, #8
 8015c24:	0092      	lsls	r2, r2, #2
 8015c26:	b570      	push	{r4, r5, r6, lr}
 8015c28:	f1c2 0620 	rsb	r6, r2, #32
 8015c2c:	6843      	ldr	r3, [r0, #4]
 8015c2e:	6804      	ldr	r4, [r0, #0]
 8015c30:	fa03 f506 	lsl.w	r5, r3, r6
 8015c34:	432c      	orrs	r4, r5
 8015c36:	40d3      	lsrs	r3, r2
 8015c38:	6004      	str	r4, [r0, #0]
 8015c3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8015c3e:	4288      	cmp	r0, r1
 8015c40:	d3f4      	bcc.n	8015c2c <L_shift+0xc>
 8015c42:	bd70      	pop	{r4, r5, r6, pc}

08015c44 <__match>:
 8015c44:	b530      	push	{r4, r5, lr}
 8015c46:	6803      	ldr	r3, [r0, #0]
 8015c48:	3301      	adds	r3, #1
 8015c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c4e:	b914      	cbnz	r4, 8015c56 <__match+0x12>
 8015c50:	6003      	str	r3, [r0, #0]
 8015c52:	2001      	movs	r0, #1
 8015c54:	bd30      	pop	{r4, r5, pc}
 8015c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015c5e:	2d19      	cmp	r5, #25
 8015c60:	bf98      	it	ls
 8015c62:	3220      	addls	r2, #32
 8015c64:	42a2      	cmp	r2, r4
 8015c66:	d0f0      	beq.n	8015c4a <__match+0x6>
 8015c68:	2000      	movs	r0, #0
 8015c6a:	e7f3      	b.n	8015c54 <__match+0x10>

08015c6c <__hexnan>:
 8015c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c70:	680b      	ldr	r3, [r1, #0]
 8015c72:	6801      	ldr	r1, [r0, #0]
 8015c74:	115e      	asrs	r6, r3, #5
 8015c76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015c7a:	f013 031f 	ands.w	r3, r3, #31
 8015c7e:	b087      	sub	sp, #28
 8015c80:	bf18      	it	ne
 8015c82:	3604      	addne	r6, #4
 8015c84:	2500      	movs	r5, #0
 8015c86:	1f37      	subs	r7, r6, #4
 8015c88:	4682      	mov	sl, r0
 8015c8a:	4690      	mov	r8, r2
 8015c8c:	9301      	str	r3, [sp, #4]
 8015c8e:	f846 5c04 	str.w	r5, [r6, #-4]
 8015c92:	46b9      	mov	r9, r7
 8015c94:	463c      	mov	r4, r7
 8015c96:	9502      	str	r5, [sp, #8]
 8015c98:	46ab      	mov	fp, r5
 8015c9a:	784a      	ldrb	r2, [r1, #1]
 8015c9c:	1c4b      	adds	r3, r1, #1
 8015c9e:	9303      	str	r3, [sp, #12]
 8015ca0:	b342      	cbz	r2, 8015cf4 <__hexnan+0x88>
 8015ca2:	4610      	mov	r0, r2
 8015ca4:	9105      	str	r1, [sp, #20]
 8015ca6:	9204      	str	r2, [sp, #16]
 8015ca8:	f7ff fd76 	bl	8015798 <__hexdig_fun>
 8015cac:	2800      	cmp	r0, #0
 8015cae:	d14f      	bne.n	8015d50 <__hexnan+0xe4>
 8015cb0:	9a04      	ldr	r2, [sp, #16]
 8015cb2:	9905      	ldr	r1, [sp, #20]
 8015cb4:	2a20      	cmp	r2, #32
 8015cb6:	d818      	bhi.n	8015cea <__hexnan+0x7e>
 8015cb8:	9b02      	ldr	r3, [sp, #8]
 8015cba:	459b      	cmp	fp, r3
 8015cbc:	dd13      	ble.n	8015ce6 <__hexnan+0x7a>
 8015cbe:	454c      	cmp	r4, r9
 8015cc0:	d206      	bcs.n	8015cd0 <__hexnan+0x64>
 8015cc2:	2d07      	cmp	r5, #7
 8015cc4:	dc04      	bgt.n	8015cd0 <__hexnan+0x64>
 8015cc6:	462a      	mov	r2, r5
 8015cc8:	4649      	mov	r1, r9
 8015cca:	4620      	mov	r0, r4
 8015ccc:	f7ff ffa8 	bl	8015c20 <L_shift>
 8015cd0:	4544      	cmp	r4, r8
 8015cd2:	d950      	bls.n	8015d76 <__hexnan+0x10a>
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	f1a4 0904 	sub.w	r9, r4, #4
 8015cda:	f844 3c04 	str.w	r3, [r4, #-4]
 8015cde:	f8cd b008 	str.w	fp, [sp, #8]
 8015ce2:	464c      	mov	r4, r9
 8015ce4:	461d      	mov	r5, r3
 8015ce6:	9903      	ldr	r1, [sp, #12]
 8015ce8:	e7d7      	b.n	8015c9a <__hexnan+0x2e>
 8015cea:	2a29      	cmp	r2, #41	; 0x29
 8015cec:	d155      	bne.n	8015d9a <__hexnan+0x12e>
 8015cee:	3102      	adds	r1, #2
 8015cf0:	f8ca 1000 	str.w	r1, [sl]
 8015cf4:	f1bb 0f00 	cmp.w	fp, #0
 8015cf8:	d04f      	beq.n	8015d9a <__hexnan+0x12e>
 8015cfa:	454c      	cmp	r4, r9
 8015cfc:	d206      	bcs.n	8015d0c <__hexnan+0xa0>
 8015cfe:	2d07      	cmp	r5, #7
 8015d00:	dc04      	bgt.n	8015d0c <__hexnan+0xa0>
 8015d02:	462a      	mov	r2, r5
 8015d04:	4649      	mov	r1, r9
 8015d06:	4620      	mov	r0, r4
 8015d08:	f7ff ff8a 	bl	8015c20 <L_shift>
 8015d0c:	4544      	cmp	r4, r8
 8015d0e:	d934      	bls.n	8015d7a <__hexnan+0x10e>
 8015d10:	f1a8 0204 	sub.w	r2, r8, #4
 8015d14:	4623      	mov	r3, r4
 8015d16:	f853 1b04 	ldr.w	r1, [r3], #4
 8015d1a:	f842 1f04 	str.w	r1, [r2, #4]!
 8015d1e:	429f      	cmp	r7, r3
 8015d20:	d2f9      	bcs.n	8015d16 <__hexnan+0xaa>
 8015d22:	1b3b      	subs	r3, r7, r4
 8015d24:	f023 0303 	bic.w	r3, r3, #3
 8015d28:	3304      	adds	r3, #4
 8015d2a:	3e03      	subs	r6, #3
 8015d2c:	3401      	adds	r4, #1
 8015d2e:	42a6      	cmp	r6, r4
 8015d30:	bf38      	it	cc
 8015d32:	2304      	movcc	r3, #4
 8015d34:	4443      	add	r3, r8
 8015d36:	2200      	movs	r2, #0
 8015d38:	f843 2b04 	str.w	r2, [r3], #4
 8015d3c:	429f      	cmp	r7, r3
 8015d3e:	d2fb      	bcs.n	8015d38 <__hexnan+0xcc>
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	b91b      	cbnz	r3, 8015d4c <__hexnan+0xe0>
 8015d44:	4547      	cmp	r7, r8
 8015d46:	d126      	bne.n	8015d96 <__hexnan+0x12a>
 8015d48:	2301      	movs	r3, #1
 8015d4a:	603b      	str	r3, [r7, #0]
 8015d4c:	2005      	movs	r0, #5
 8015d4e:	e025      	b.n	8015d9c <__hexnan+0x130>
 8015d50:	3501      	adds	r5, #1
 8015d52:	2d08      	cmp	r5, #8
 8015d54:	f10b 0b01 	add.w	fp, fp, #1
 8015d58:	dd06      	ble.n	8015d68 <__hexnan+0xfc>
 8015d5a:	4544      	cmp	r4, r8
 8015d5c:	d9c3      	bls.n	8015ce6 <__hexnan+0x7a>
 8015d5e:	2300      	movs	r3, #0
 8015d60:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d64:	2501      	movs	r5, #1
 8015d66:	3c04      	subs	r4, #4
 8015d68:	6822      	ldr	r2, [r4, #0]
 8015d6a:	f000 000f 	and.w	r0, r0, #15
 8015d6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015d72:	6020      	str	r0, [r4, #0]
 8015d74:	e7b7      	b.n	8015ce6 <__hexnan+0x7a>
 8015d76:	2508      	movs	r5, #8
 8015d78:	e7b5      	b.n	8015ce6 <__hexnan+0x7a>
 8015d7a:	9b01      	ldr	r3, [sp, #4]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d0df      	beq.n	8015d40 <__hexnan+0xd4>
 8015d80:	f1c3 0320 	rsb	r3, r3, #32
 8015d84:	f04f 32ff 	mov.w	r2, #4294967295
 8015d88:	40da      	lsrs	r2, r3
 8015d8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015d8e:	4013      	ands	r3, r2
 8015d90:	f846 3c04 	str.w	r3, [r6, #-4]
 8015d94:	e7d4      	b.n	8015d40 <__hexnan+0xd4>
 8015d96:	3f04      	subs	r7, #4
 8015d98:	e7d2      	b.n	8015d40 <__hexnan+0xd4>
 8015d9a:	2004      	movs	r0, #4
 8015d9c:	b007      	add	sp, #28
 8015d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015da2 <__ascii_mbtowc>:
 8015da2:	b082      	sub	sp, #8
 8015da4:	b901      	cbnz	r1, 8015da8 <__ascii_mbtowc+0x6>
 8015da6:	a901      	add	r1, sp, #4
 8015da8:	b142      	cbz	r2, 8015dbc <__ascii_mbtowc+0x1a>
 8015daa:	b14b      	cbz	r3, 8015dc0 <__ascii_mbtowc+0x1e>
 8015dac:	7813      	ldrb	r3, [r2, #0]
 8015dae:	600b      	str	r3, [r1, #0]
 8015db0:	7812      	ldrb	r2, [r2, #0]
 8015db2:	1e10      	subs	r0, r2, #0
 8015db4:	bf18      	it	ne
 8015db6:	2001      	movne	r0, #1
 8015db8:	b002      	add	sp, #8
 8015dba:	4770      	bx	lr
 8015dbc:	4610      	mov	r0, r2
 8015dbe:	e7fb      	b.n	8015db8 <__ascii_mbtowc+0x16>
 8015dc0:	f06f 0001 	mvn.w	r0, #1
 8015dc4:	e7f8      	b.n	8015db8 <__ascii_mbtowc+0x16>

08015dc6 <_realloc_r>:
 8015dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dca:	4680      	mov	r8, r0
 8015dcc:	4614      	mov	r4, r2
 8015dce:	460e      	mov	r6, r1
 8015dd0:	b921      	cbnz	r1, 8015ddc <_realloc_r+0x16>
 8015dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd6:	4611      	mov	r1, r2
 8015dd8:	f7fb bd14 	b.w	8011804 <_malloc_r>
 8015ddc:	b92a      	cbnz	r2, 8015dea <_realloc_r+0x24>
 8015dde:	f7fd fce9 	bl	80137b4 <_free_r>
 8015de2:	4625      	mov	r5, r4
 8015de4:	4628      	mov	r0, r5
 8015de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dea:	f000 f8ad 	bl	8015f48 <_malloc_usable_size_r>
 8015dee:	4284      	cmp	r4, r0
 8015df0:	4607      	mov	r7, r0
 8015df2:	d802      	bhi.n	8015dfa <_realloc_r+0x34>
 8015df4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015df8:	d812      	bhi.n	8015e20 <_realloc_r+0x5a>
 8015dfa:	4621      	mov	r1, r4
 8015dfc:	4640      	mov	r0, r8
 8015dfe:	f7fb fd01 	bl	8011804 <_malloc_r>
 8015e02:	4605      	mov	r5, r0
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d0ed      	beq.n	8015de4 <_realloc_r+0x1e>
 8015e08:	42bc      	cmp	r4, r7
 8015e0a:	4622      	mov	r2, r4
 8015e0c:	4631      	mov	r1, r6
 8015e0e:	bf28      	it	cs
 8015e10:	463a      	movcs	r2, r7
 8015e12:	f7fc fe40 	bl	8012a96 <memcpy>
 8015e16:	4631      	mov	r1, r6
 8015e18:	4640      	mov	r0, r8
 8015e1a:	f7fd fccb 	bl	80137b4 <_free_r>
 8015e1e:	e7e1      	b.n	8015de4 <_realloc_r+0x1e>
 8015e20:	4635      	mov	r5, r6
 8015e22:	e7df      	b.n	8015de4 <_realloc_r+0x1e>

08015e24 <__ascii_wctomb>:
 8015e24:	b149      	cbz	r1, 8015e3a <__ascii_wctomb+0x16>
 8015e26:	2aff      	cmp	r2, #255	; 0xff
 8015e28:	bf85      	ittet	hi
 8015e2a:	238a      	movhi	r3, #138	; 0x8a
 8015e2c:	6003      	strhi	r3, [r0, #0]
 8015e2e:	700a      	strbls	r2, [r1, #0]
 8015e30:	f04f 30ff 	movhi.w	r0, #4294967295
 8015e34:	bf98      	it	ls
 8015e36:	2001      	movls	r0, #1
 8015e38:	4770      	bx	lr
 8015e3a:	4608      	mov	r0, r1
 8015e3c:	4770      	bx	lr

08015e3e <__swhatbuf_r>:
 8015e3e:	b570      	push	{r4, r5, r6, lr}
 8015e40:	460c      	mov	r4, r1
 8015e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e46:	2900      	cmp	r1, #0
 8015e48:	b096      	sub	sp, #88	; 0x58
 8015e4a:	4615      	mov	r5, r2
 8015e4c:	461e      	mov	r6, r3
 8015e4e:	da0d      	bge.n	8015e6c <__swhatbuf_r+0x2e>
 8015e50:	89a3      	ldrh	r3, [r4, #12]
 8015e52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015e56:	f04f 0100 	mov.w	r1, #0
 8015e5a:	bf0c      	ite	eq
 8015e5c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015e60:	2340      	movne	r3, #64	; 0x40
 8015e62:	2000      	movs	r0, #0
 8015e64:	6031      	str	r1, [r6, #0]
 8015e66:	602b      	str	r3, [r5, #0]
 8015e68:	b016      	add	sp, #88	; 0x58
 8015e6a:	bd70      	pop	{r4, r5, r6, pc}
 8015e6c:	466a      	mov	r2, sp
 8015e6e:	f000 f849 	bl	8015f04 <_fstat_r>
 8015e72:	2800      	cmp	r0, #0
 8015e74:	dbec      	blt.n	8015e50 <__swhatbuf_r+0x12>
 8015e76:	9901      	ldr	r1, [sp, #4]
 8015e78:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015e7c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015e80:	4259      	negs	r1, r3
 8015e82:	4159      	adcs	r1, r3
 8015e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e88:	e7eb      	b.n	8015e62 <__swhatbuf_r+0x24>

08015e8a <__smakebuf_r>:
 8015e8a:	898b      	ldrh	r3, [r1, #12]
 8015e8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e8e:	079d      	lsls	r5, r3, #30
 8015e90:	4606      	mov	r6, r0
 8015e92:	460c      	mov	r4, r1
 8015e94:	d507      	bpl.n	8015ea6 <__smakebuf_r+0x1c>
 8015e96:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015e9a:	6023      	str	r3, [r4, #0]
 8015e9c:	6123      	str	r3, [r4, #16]
 8015e9e:	2301      	movs	r3, #1
 8015ea0:	6163      	str	r3, [r4, #20]
 8015ea2:	b002      	add	sp, #8
 8015ea4:	bd70      	pop	{r4, r5, r6, pc}
 8015ea6:	ab01      	add	r3, sp, #4
 8015ea8:	466a      	mov	r2, sp
 8015eaa:	f7ff ffc8 	bl	8015e3e <__swhatbuf_r>
 8015eae:	9900      	ldr	r1, [sp, #0]
 8015eb0:	4605      	mov	r5, r0
 8015eb2:	4630      	mov	r0, r6
 8015eb4:	f7fb fca6 	bl	8011804 <_malloc_r>
 8015eb8:	b948      	cbnz	r0, 8015ece <__smakebuf_r+0x44>
 8015eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ebe:	059a      	lsls	r2, r3, #22
 8015ec0:	d4ef      	bmi.n	8015ea2 <__smakebuf_r+0x18>
 8015ec2:	f023 0303 	bic.w	r3, r3, #3
 8015ec6:	f043 0302 	orr.w	r3, r3, #2
 8015eca:	81a3      	strh	r3, [r4, #12]
 8015ecc:	e7e3      	b.n	8015e96 <__smakebuf_r+0xc>
 8015ece:	89a3      	ldrh	r3, [r4, #12]
 8015ed0:	6020      	str	r0, [r4, #0]
 8015ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ed6:	81a3      	strh	r3, [r4, #12]
 8015ed8:	9b00      	ldr	r3, [sp, #0]
 8015eda:	6163      	str	r3, [r4, #20]
 8015edc:	9b01      	ldr	r3, [sp, #4]
 8015ede:	6120      	str	r0, [r4, #16]
 8015ee0:	b15b      	cbz	r3, 8015efa <__smakebuf_r+0x70>
 8015ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ee6:	4630      	mov	r0, r6
 8015ee8:	f000 f81e 	bl	8015f28 <_isatty_r>
 8015eec:	b128      	cbz	r0, 8015efa <__smakebuf_r+0x70>
 8015eee:	89a3      	ldrh	r3, [r4, #12]
 8015ef0:	f023 0303 	bic.w	r3, r3, #3
 8015ef4:	f043 0301 	orr.w	r3, r3, #1
 8015ef8:	81a3      	strh	r3, [r4, #12]
 8015efa:	89a3      	ldrh	r3, [r4, #12]
 8015efc:	431d      	orrs	r5, r3
 8015efe:	81a5      	strh	r5, [r4, #12]
 8015f00:	e7cf      	b.n	8015ea2 <__smakebuf_r+0x18>
	...

08015f04 <_fstat_r>:
 8015f04:	b538      	push	{r3, r4, r5, lr}
 8015f06:	4d07      	ldr	r5, [pc, #28]	; (8015f24 <_fstat_r+0x20>)
 8015f08:	2300      	movs	r3, #0
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	4608      	mov	r0, r1
 8015f0e:	4611      	mov	r1, r2
 8015f10:	602b      	str	r3, [r5, #0]
 8015f12:	f7f2 fbba 	bl	800868a <_fstat>
 8015f16:	1c43      	adds	r3, r0, #1
 8015f18:	d102      	bne.n	8015f20 <_fstat_r+0x1c>
 8015f1a:	682b      	ldr	r3, [r5, #0]
 8015f1c:	b103      	cbz	r3, 8015f20 <_fstat_r+0x1c>
 8015f1e:	6023      	str	r3, [r4, #0]
 8015f20:	bd38      	pop	{r3, r4, r5, pc}
 8015f22:	bf00      	nop
 8015f24:	20000a58 	.word	0x20000a58

08015f28 <_isatty_r>:
 8015f28:	b538      	push	{r3, r4, r5, lr}
 8015f2a:	4d06      	ldr	r5, [pc, #24]	; (8015f44 <_isatty_r+0x1c>)
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	4604      	mov	r4, r0
 8015f30:	4608      	mov	r0, r1
 8015f32:	602b      	str	r3, [r5, #0]
 8015f34:	f7f2 fbb9 	bl	80086aa <_isatty>
 8015f38:	1c43      	adds	r3, r0, #1
 8015f3a:	d102      	bne.n	8015f42 <_isatty_r+0x1a>
 8015f3c:	682b      	ldr	r3, [r5, #0]
 8015f3e:	b103      	cbz	r3, 8015f42 <_isatty_r+0x1a>
 8015f40:	6023      	str	r3, [r4, #0]
 8015f42:	bd38      	pop	{r3, r4, r5, pc}
 8015f44:	20000a58 	.word	0x20000a58

08015f48 <_malloc_usable_size_r>:
 8015f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f4c:	1f18      	subs	r0, r3, #4
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	bfbc      	itt	lt
 8015f52:	580b      	ldrlt	r3, [r1, r0]
 8015f54:	18c0      	addlt	r0, r0, r3
 8015f56:	4770      	bx	lr

08015f58 <_init>:
 8015f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f5a:	bf00      	nop
 8015f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f5e:	bc08      	pop	{r3}
 8015f60:	469e      	mov	lr, r3
 8015f62:	4770      	bx	lr

08015f64 <_fini>:
 8015f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f66:	bf00      	nop
 8015f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f6a:	bc08      	pop	{r3}
 8015f6c:	469e      	mov	lr, r3
 8015f6e:	4770      	bx	lr
