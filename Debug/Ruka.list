
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c74  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  08017e58  08017e58  00018e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801940c  0801940c  0001b24c  2**0
                  CONTENTS
  4 .ARM          00000008  0801940c  0801940c  0001a40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019414  08019414  0001b24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08019414  08019414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08019428  08019428  0001a428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08019438  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000944  20000250  08019684  0001b250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b94  08019684  0001bb94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b24c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cf0a  00000000  00000000  0001b27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009262  00000000  00000000  00068186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002af0  00000000  00000000  000713e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002189  00000000  00000000  00073ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034883  00000000  00000000  00076061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b116  00000000  00000000  000aa8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129d3a  00000000  00000000  000e59fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020f734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ceb0  00000000  00000000  0020f778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0021c628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000037  00000000  00000000  0021c684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017e3c 	.word	0x08017e3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	08017e3c 	.word	0x08017e3c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	08018884 	.word	0x08018884

08001054 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	08018884 	.word	0x08018884

08001074 <_ZN15Adafruit_SensorD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe9 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001082:	2108      	movs	r1, #8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f012 fb10 	bl	80136aa <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ffb9 	bl	8001034 <_ZN15Adafruit_SensorC1Ev>
 80010c2:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	609a      	str	r2, [r3, #8]
  _address = address;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	715a      	strb	r2, [r3, #5]
}
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	08018868 	.word	0x08018868

080010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	4613      	mov	r3, r2
 80010f0:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 fa5c 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2206      	movs	r2, #6
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f013 fbb6 	bl	8014872 <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	83fb      	strh	r3, [r7, #30]
 800110a:	8bfb      	ldrh	r3, [r7, #30]
 800110c:	83bb      	strh	r3, [r7, #28]
 800110e:	8bbb      	ldrh	r3, [r7, #28]
 8001110:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 8001112:	f107 0214 	add.w	r2, r7, #20
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	2306      	movs	r3, #6
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f000 fa05 	bl	800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8001120:	7d3b      	ldrb	r3, [r7, #20]
 8001122:	b21a      	sxth	r2, r3
 8001124:	7d7b      	ldrb	r3, [r7, #21]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800112e:	7dbb      	ldrb	r3, [r7, #22]
 8001130:	b21a      	sxth	r2, r3
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 800113c:	7e3b      	ldrb	r3, [r7, #24]
 800113e:	b21a      	sxth	r2, r3
 8001140:	7e7b      	ldrb	r3, [r7, #25]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3b08      	subs	r3, #8
 800114e:	2b26      	cmp	r3, #38	@ 0x26
 8001150:	f200 8152 	bhi.w	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001154:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001379 	.word	0x08001379
 8001160:	080013f9 	.word	0x080013f9
 8001164:	080013f9 	.word	0x080013f9
 8001168:	080013f9 	.word	0x080013f9
 800116c:	080013f9 	.word	0x080013f9
 8001170:	080013f9 	.word	0x080013f9
 8001174:	080011f9 	.word	0x080011f9
 8001178:	080013f9 	.word	0x080013f9
 800117c:	080013f9 	.word	0x080013f9
 8001180:	080013f9 	.word	0x080013f9
 8001184:	080013f9 	.word	0x080013f9
 8001188:	080013f9 	.word	0x080013f9
 800118c:	08001279 	.word	0x08001279
 8001190:	080013f9 	.word	0x080013f9
 8001194:	080013f9 	.word	0x080013f9
 8001198:	080013f9 	.word	0x080013f9
 800119c:	080013f9 	.word	0x080013f9
 80011a0:	080013f9 	.word	0x080013f9
 80011a4:	080012f9 	.word	0x080012f9
 80011a8:	080013f9 	.word	0x080013f9
 80011ac:	080013f9 	.word	0x080013f9
 80011b0:	080013f9 	.word	0x080013f9
 80011b4:	080013f9 	.word	0x080013f9
 80011b8:	080013f9 	.word	0x080013f9
 80011bc:	080013f9 	.word	0x080013f9
 80011c0:	080013f9 	.word	0x080013f9
 80011c4:	080013f9 	.word	0x080013f9
 80011c8:	080013f9 	.word	0x080013f9
 80011cc:	080013f9 	.word	0x080013f9
 80011d0:	080013f9 	.word	0x080013f9
 80011d4:	080013f9 	.word	0x080013f9
 80011d8:	080013f9 	.word	0x080013f9
 80011dc:	08001379 	.word	0x08001379
 80011e0:	080013f9 	.word	0x080013f9
 80011e4:	080013f9 	.word	0x080013f9
 80011e8:	080013f9 	.word	0x080013f9
 80011ec:	080013f9 	.word	0x080013f9
 80011f0:	080013f9 	.word	0x080013f9
 80011f4:	08001379 	.word	0x08001379
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 80011f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9b9 	bl	8000574 <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b7f      	ldr	r3, [pc, #508]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001208:	f7ff fb48 	bl	800089c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4614      	mov	r4, r2
 8001212:	461d      	mov	r5, r3
 8001214:	2100      	movs	r1, #0
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f9d9 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800121c:	4603      	mov	r3, r0
 800121e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 8001222:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9a4 	bl	8000574 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b74      	ldr	r3, [pc, #464]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001232:	f7ff fb33 	bl	800089c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4614      	mov	r4, r2
 800123c:	461d      	mov	r5, r3
 800123e:	2101      	movs	r1, #1
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f9c4 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001246:	4603      	mov	r3, r0
 8001248:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 800124c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f98f 	bl	8000574 <__aeabi_i2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b6a      	ldr	r3, [pc, #424]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800125c:	f7ff fb1e 	bl	800089c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	2102      	movs	r1, #2
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f9af 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001270:	4603      	mov	r3, r0
 8001272:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001276:	e0bf      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001278:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f979 	bl	8000574 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b60      	ldr	r3, [pc, #384]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001288:	f7ff fb08 	bl	800089c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	2100      	movs	r1, #0
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f999 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800129c:	4603      	mov	r3, r0
 800129e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f964 	bl	8000574 <__aeabi_i2d>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b55      	ldr	r3, [pc, #340]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012b2:	f7ff faf3 	bl	800089c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f984 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012c6:	4603      	mov	r3, r0
 80012c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f94f 	bl	8000574 <__aeabi_i2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012dc:	f7ff fade 	bl	800089c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	2102      	movs	r1, #2
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f96f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012f0:	4603      	mov	r3, r0
 80012f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80012f6:	e07f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 80012f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f939 	bl	8000574 <__aeabi_i2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	461d      	mov	r5, r3
 8001314:	2100      	movs	r1, #0
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f959 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800131c:	4603      	mov	r3, r0
 800131e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 8001322:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f924 	bl	8000574 <__aeabi_i2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b35      	ldr	r3, [pc, #212]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001332:	f7ff fab3 	bl	800089c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	2101      	movs	r1, #1
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f944 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001346:	4603      	mov	r3, r0
 8001348:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 800134c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f90f 	bl	8000574 <__aeabi_i2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800135c:	f7ff fa9e 	bl	800089c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	2102      	movs	r1, #2
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f92f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001370:	4603      	mov	r3, r0
 8001372:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001376:	e03f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001378:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8f9 	bl	8000574 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001388:	f7ff fa88 	bl	800089c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	2100      	movs	r1, #0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 f919 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800139c:	4603      	mov	r3, r0
 800139e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8e4 	bl	8000574 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013b2:	f7ff fa73 	bl	800089c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	2101      	movs	r1, #1
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f904 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013c6:	4603      	mov	r3, r0
 80013c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8cf 	bl	8000574 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013dc:	f7ff fa5e 	bl	800089c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	2102      	movs	r1, #2
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f8ef 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013f0:	4603      	mov	r3, r0
 80013f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80013f6:	bf00      	nop
  }

  return xyz;
 80013f8:	bf00      	nop
}
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bdb0      	pop	{r4, r5, r7, pc}
 8001402:	bf00      	nop
 8001404:	40300000 	.word	0x40300000
 8001408:	408c2000 	.word	0x408c2000
 800140c:	40590000 	.word	0x40590000

08001410 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 800141a:	2228      	movs	r2, #40	@ 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f013 fa27 	bl	8014872 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	220b      	movs	r2, #11
 8001428:	4911      	ldr	r1, [pc, #68]	@ (8001470 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 800142a:	4618      	mov	r0, r3
 800142c:	f013 fa29 	bl	8014882 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2203      	movs	r2, #3
 8001448:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
  sensor->max_value   = 0.0F;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001464:	621a      	str	r2, [r3, #32]
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08017e58 	.word	0x08017e58
 8001474:	3c23d70a 	.word	0x3c23d70a

08001478 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f013 f9f3 	bl	8014872 <memset>

  event->version   = sizeof(sensors_event_t);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2224      	movs	r2, #36	@ 0x24
 8001490:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2203      	movs	r2, #3
 800149e:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014a0:	f008 fde4 	bl	800a06c <HAL_GetTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	221a      	movs	r2, #26
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe15 	bl	80010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f853 	bl	800156a <_ZN3imu6VectorILh3EE1xEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbb3 	bl	8000c38 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f84f 	bl	8001580 <_ZN3imu6VectorILh3EE1yEv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fba4 	bl	8000c38 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f84c 	bl	8001598 <_ZN3imu6VectorILh3EE1zEv>
 8001500:	4603      	mov	r3, r0
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	61da      	str	r2, [r3, #28]

  return true;
 8001514:	2401      	movs	r4, #1
}
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f81a 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 8001520:	4623      	mov	r3, r4
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	@ 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	461a      	mov	r2, r3
 8001536:	460b      	mov	r3, r1
 8001538:	72fb      	strb	r3, [r7, #11]
 800153a:	4613      	mov	r3, r2
 800153c:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800153e:	7aba      	ldrb	r2, [r7, #10]
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f89b 	bl	8001680 <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    {
    }
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3308      	adds	r3, #8
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3310      	adds	r3, #16
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2218      	movs	r2, #24
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f013 f957 	bl	8014872 <memset>
    }
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
    }
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_ZN15Adafruit_BNO055D1Ev+0x20>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd29 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08018868 	.word	0x08018868

08001610 <_ZN15Adafruit_BNO055D0Ev>:
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
 800161e:	2110      	movs	r1, #16
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f012 f842 	bl	80136aa <_ZdlPvj>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <_ZN3imu10QuaternionC1Ev+0x4c>)
 8001640:	e9c1 2300 	strd	r2, r3, [r1]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	3ff00000 	.word	0x3ff00000

08001680 <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	b29a      	uxth	r2, r3
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	b29b      	uxth	r3, r3
 8001698:	2164      	movs	r1, #100	@ 0x64
 800169a:	9102      	str	r1, [sp, #8]
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2152      	movs	r1, #82	@ 0x52
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016a8:	f00a f8be 	bl	800b828 <HAL_I2C_Mem_Read>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016b0:	bf00      	nop
 80016b2:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016b4:	f00a fb73 	bl	800bd9e <HAL_I2C_GetState>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f4      	bne.n	80016b2 <I2C_n_byte_receive+0x32>

  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000658 	.word	0x20000658

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10f      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016f2:	2229      	movs	r2, #41	@ 0x29
 80016f4:	2137      	movs	r1, #55	@ 0x37
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80016f8:	f7ff fcd8 	bl	80010ac <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016fe:	f7ff ff97 	bl	8001630 <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001704:	f7ff ff54 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d105      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001718:	4806      	ldr	r0, [pc, #24]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800171a:	f7ff ff1b 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001720:	f7ff ff64 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000026c 	.word	0x2000026c
 8001730:	20000280 	.word	0x20000280
 8001734:	200002a0 	.word	0x200002a0

08001738 <_GLOBAL__sub_I_bno>:
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffc9 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001746:	bd80      	pop	{r7, pc}

08001748 <_GLOBAL__sub_D_bno>:
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
 800174c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ffc1 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001756:	bd80      	pop	{r7, pc}

08001758 <as50_readAngle>:

	return (parity & 0x1);
}

void as50_readAngle(uint16_t * data, uint32_t timeout)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af02      	add	r7, sp, #8
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176c:	f009 fe7a 	bl	800b464 <HAL_GPIO_WritePin>
	  if (HAL_SPI_TransmitReceive(&_ENCODER_SPI, (uint8_t*)&read_angle_register, (uint8_t*)data, 1, timeout) == HAL_OK)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4910      	ldr	r1, [pc, #64]	@ (80017bc <as50_readAngle+0x64>)
 800177a:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <as50_readAngle+0x68>)
 800177c:	f00c fdea 	bl	800e354 <HAL_SPI_TransmitReceive>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10e      	bne.n	80017a4 <as50_readAngle+0x4c>
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800178c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001790:	f009 fe68 	bl	800b464 <HAL_GPIO_WritePin>
		  *data &= _ENCODER_READMASK;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800179c:	b29a      	uxth	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	801a      	strh	r2, [r3, #0]
	  }
	  else
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
	  }
}
 80017a2:	e006      	b.n	80017b2 <as50_readAngle+0x5a>
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ae:	f009 fe59 	bl	800b464 <HAL_GPIO_WritePin>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000
 80017c0:	2000081c 	.word	0x2000081c

080017c4 <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
int at24_isConnected(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 80017c8:	2364      	movs	r3, #100	@ 0x64
 80017ca:	2202      	movs	r2, #2
 80017cc:	21a0      	movs	r1, #160	@ 0xa0
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <at24_isConnected+0x20>)
 80017d0:	f00a f944 	bl	800ba5c <HAL_I2C_IsDeviceReady>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <at24_isConnected+0x1a>
    return true;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <at24_isConnected+0x1c>
  else
    return false;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000658 	.word	0x20000658

080017e8 <at24_write>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
int at24_write(uint16_t address, uint8_t *data, uint8_t len, uint32_t timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af04      	add	r7, sp, #16
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4603      	mov	r3, r0
 80017f4:	81fb      	strh	r3, [r7, #14]
 80017f6:	4613      	mov	r3, r2
 80017f8:	737b      	strb	r3, [r7, #13]
  if (at24_lock == 1)
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <at24_write+0xc0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <at24_write+0x1e>
    return false;
 8001802:	2300      	movs	r3, #0
 8001804:	e04b      	b.n	800189e <at24_write+0xb6>

  at24_lock = 1;
 8001806:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <at24_write+0xc0>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 800180c:	f008 fc2e 	bl	800a06c <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]
  while (1)
  {
	#if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
	#endif
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	b29b      	uxth	r3, r3
 800181a:	f1c3 0320 	rsb	r3, r3, #32
 800181e:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	b29b      	uxth	r3, r3
 8001824:	8afa      	ldrh	r2, [r7, #22]
 8001826:	429a      	cmp	r2, r3
 8001828:	d901      	bls.n	800182e <at24_write+0x46>
      w = len;
 800182a:	7b7b      	ldrb	r3, [r7, #13]
 800182c:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 800182e:	89fa      	ldrh	r2, [r7, #14]
 8001830:	2364      	movs	r3, #100	@ 0x64
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	8afb      	ldrh	r3, [r7, #22]
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2302      	movs	r3, #2
 800183e:	21a0      	movs	r1, #160	@ 0xa0
 8001840:	481a      	ldr	r0, [pc, #104]	@ (80018ac <at24_write+0xc4>)
 8001842:	f009 fedd 	bl	800b600 <HAL_I2C_Mem_Write>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d124      	bne.n	8001896 <at24_write+0xae>
    #endif
    {
      at24_delay(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f008 fc19 	bl	800a084 <HAL_Delay>
      len -= w;
 8001852:	8afb      	ldrh	r3, [r7, #22]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	7b7a      	ldrb	r2, [r7, #13]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	737b      	strb	r3, [r7, #13]
      data += w;
 800185c:	8afb      	ldrh	r3, [r7, #22]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	4413      	add	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
      address += w;
 8001864:	89fa      	ldrh	r2, [r7, #14]
 8001866:	8afb      	ldrh	r3, [r7, #22]
 8001868:	4413      	add	r3, r2
 800186a:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d104      	bne.n	800187c <at24_write+0x94>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
        #endif
        at24_lock = 0;
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <at24_write+0xc0>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
        return true;
 8001878:	2301      	movs	r3, #1
 800187a:	e010      	b.n	800189e <at24_write+0xb6>
      }
      if (HAL_GetTick() - startTime >= timeout)
 800187c:	f008 fbf6 	bl	800a06c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8c2      	bhi.n	8001812 <at24_write+0x2a>
      {
        at24_lock = 0;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <at24_write+0xc0>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
        return false;
 8001892:	2300      	movs	r3, #0
 8001894:	e003      	b.n	800189e <at24_write+0xb6>
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
      #endif
      at24_lock = 0;
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <at24_write+0xc0>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
      return false;
 800189c:	2300      	movs	r3, #0
    }
  }
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002b8 	.word	0x200002b8
 80018ac:	20000658 	.word	0x20000658

080018b0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	1e5a      	subs	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d019      	beq.n	800193e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3308      	adds	r3, #8
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	330c      	adds	r3, #12
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
        }
    }
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	4798      	blx	r3
    }
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffd4 	bl	8001972 <_ZNSt14_Function_baseD1Ev>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZNSt8functionIFvvEED1Ev>:
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ffc7 	bl	8001972 <_ZNSt14_Function_baseD1Ev>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 fe28 	bl	8006654 <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3310      	adds	r3, #16
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f004 fe4d 	bl	80066aa <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	4a06      	ldr	r2, [pc, #24]	@ (8001a44 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	08018954 	.word	0x08018954

08001a48 <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001a52:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001a54:	f004 fe54 	bl	8006700 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f083 0301 	eor.w	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f011 fe67 	bl	8013738 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 8001a6a:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <_Z7alloc_fP14CanardInstancej+0x40>)
 8001a6c:	f004 fe59 	bl	8006722 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001a70:	4603      	mov	r3, r0
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	6814      	ldr	r4, [r2, #0]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	47a0      	blx	r4
 8001a7e:	4603      	mov	r3, r0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	20000a40 	.word	0x20000a40

08001a8c <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 8001a96:	480d      	ldr	r0, [pc, #52]	@ (8001acc <_Z6free_fP14CanardInstancePv+0x40>)
 8001a98:	f004 fe32 	bl	8006700 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f083 0301 	eor.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f011 fe45 	bl	8013738 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8001aae:	4807      	ldr	r0, [pc, #28]	@ (8001acc <_Z6free_fP14CanardInstancePv+0x40>)
 8001ab0:	f004 fe37 	bl	8006722 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	3204      	adds	r2, #4
 8001aba:	6814      	ldr	r4, [r2, #0]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	47a0      	blx	r4
 8001ac4:	bf00      	nop
}
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	20000a40 	.word	0x20000a40

08001ad0 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 8001ade:	4a0c      	ldr	r2, [pc, #48]	@ (8001b10 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	330c      	adds	r3, #12
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f011 fb10 	bl	8013120 <canardTxInit>
        utilities(utilities)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	63da      	str	r2, [r3, #60]	@ 0x3c
    {};
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08018b18 	.word	0x08018b18

08001b14 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	460b      	mov	r3, r1
 8001b22:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	7afa      	ldrb	r2, [r7, #11]
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3308      	adds	r3, #8
 8001b34:	6839      	ldr	r1, [r7, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fe0f 	bl	800675a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2248      	movs	r2, #72	@ 0x48
 8001b60:	2140      	movs	r1, #64	@ 0x40
 8001b62:	f7ff ffb5 	bl	8001ad0 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 8001b66:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08018af4 	.word	0x08018af4

08001b80 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff42 	bl	8001a1c <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 8001b98:	4a03      	ldr	r2, [pc, #12]	@ (8001ba8 <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	080189d8 	.word	0x080189d8

08001bac <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bba:	eef0 7ae7 	vabs.f32	s15, s15
 8001bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bda:	eef0 7ae7 	vabs.f32	s15, s15
 8001bde:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001c10 <_ZSt8isfinitef+0x44>
 8001be2:	eef4 7a47 	vcmp.f32	s15, s14
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	bf8c      	ite	hi
 8001bec:	2301      	movhi	r3, #1
 8001bee:	2300      	movls	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	7f7fffff 	.word	0x7f7fffff

08001c14 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d201      	bcs.n	8001c2a <nunavutChooseMin+0x16>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	e000      	b.n	8001c2c <nunavutChooseMin+0x18>
 8001c2a:	683b      	ldr	r3, [r7, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	6978      	ldr	r0, [r7, #20]
 8001c4e:	f7ff ffe1 	bl	8001c14 <nunavutChooseMin>
 8001c52:	4602      	mov	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 8001c5a:	6939      	ldr	r1, [r7, #16]
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ffd9 	bl	8001c14 <nunavutChooseMin>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b092      	sub	sp, #72	@ 0x48
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8001c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d145      	bne.n	8001d10 <nunavutCopyBits+0xa4>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d140      	bne.n	8001d10 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8001c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c96:	08db      	lsrs	r3, r3, #3
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8001ca8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001caa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001cae:	f012 fdc6 	bl	801483e <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8001cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 808a 	beq.w	8001ddc <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8001cc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ccc:	4413      	add	r3, r2
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8001cd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cd4:	4413      	add	r3, r2
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8001cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cdc:	2201      	movs	r2, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8001cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfc:	7819      	ldrb	r1, [r3, #0]
 8001cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d02:	400b      	ands	r3, r1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d0e:	e065      	b.n	8001ddc <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8001d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d1a:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 8001d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 8001d28:	e053      	b.n	8001dd2 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8001d2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8001d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8001d3e:	7dfa      	ldrb	r2, [r7, #23]
 8001d40:	7dbb      	ldrb	r3, [r7, #22]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d901      	bls.n	8001d4a <nunavutCopyBits+0xde>
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	e000      	b.n	8001d4c <nunavutCopyBits+0xe0>
 8001d4a:	7dbb      	ldrb	r3, [r7, #22]
 8001d4c:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8001d4e:	7d7b      	ldrb	r3, [r7, #21]
 8001d50:	f1c3 0008 	rsb	r0, r3, #8
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7ff ff5a 	bl	8001c14 <nunavutChooseMin>
 8001d60:	4603      	mov	r3, r0
 8001d62:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8001d64:	7d3b      	ldrb	r3, [r7, #20]
 8001d66:	2201      	movs	r2, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	7dbb      	ldrb	r3, [r7, #22]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8001d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	6a3a      	ldr	r2, [r7, #32]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	fa42 f303 	asr.w	r3, r2, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	7dbb      	ldrb	r3, [r7, #22]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8001d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d96:	08db      	lsrs	r3, r3, #3
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4013      	ands	r3, r2
 8001da6:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8001da8:	7cba      	ldrb	r2, [r7, #18]
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
 8001dac:	4013      	ands	r3, r2
 8001dae:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8001db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	4413      	add	r3, r2
 8001db8:	7c79      	ldrb	r1, [r7, #17]
 8001dba:	7c3a      	ldrb	r2, [r7, #16]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]
            src_off += size;
 8001dc2:	7d3b      	ldrb	r3, [r7, #20]
 8001dc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dc6:	4413      	add	r3, r2
 8001dc8:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 8001dca:	7d3b      	ldrb	r3, [r7, #20]
 8001dcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001dce:	4413      	add	r3, r2
 8001dd0:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d8a7      	bhi.n	8001d2a <nunavutCopyBits+0xbe>
        }

    }
}
 8001dda:	e000      	b.n	8001dde <nunavutCopyBits+0x172>
    }
 8001ddc:	bf00      	nop
}
 8001dde:	bf00      	nop
 8001de0:	3748      	adds	r7, #72	@ 0x48
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af02      	add	r7, sp, #8
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8001df4:	6a3a      	ldr	r2, [r7, #32]
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff1d 	bl	8001c38 <nunavutSaturateBufferFragmentBitLength>
 8001dfe:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08db      	lsrs	r3, r3, #3
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	18d0      	adds	r0, r2, r3
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	3307      	adds	r3, #7
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	2100      	movs	r1, #0
 8001e18:	f012 fd2b 	bl	8014872 <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	2100      	movs	r1, #0
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff ff20 	bl	8001c6c <nunavutCopyBits>
}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	00da      	lsls	r2, r3, #3
 8001e44:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	440b      	add	r3, r1
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d202      	bcs.n	8001e56 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001e50:	f06f 0302 	mvn.w	r3, #2
 8001e54:	e010      	b.n	8001e78 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8001e56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e5a:	2140      	movs	r1, #64	@ 0x40
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fed9 	bl	8001c14 <nunavutChooseMin>
 8001e62:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8001e64:	2300      	movs	r3, #0
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fefb 	bl	8001c6c <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	2110      	movs	r1, #16
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff febe 	bl	8001c14 <nunavutChooseMin>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f7ff feca 	bl	8001c38 <nunavutSaturateBufferFragmentBitLength>
 8001ea4:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8001eaa:	f107 0012 	add.w	r0, r7, #18
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	f7ff fed8 	bl	8001c6c <nunavutCopyBits>
    return val;
 8001ebc:	8a7b      	ldrh	r3, [r7, #18]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b088      	sub	sp, #32
 8001eca:	af02      	add	r7, sp, #8
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fe9b 	bl	8001c14 <nunavutChooseMin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	68b8      	ldr	r0, [r7, #8]
 8001ee6:	f7ff fea7 	bl	8001c38 <nunavutSaturateBufferFragmentBitLength>
 8001eea:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8001ef0:	f107 0010 	add.w	r0, r7, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	2100      	movs	r1, #0
 8001efe:	f7ff feb5 	bl	8001c6c <nunavutCopyBits>
    return val;
 8001f02:	693b      	ldr	r3, [r7, #16]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b08b      	sub	sp, #44	@ 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 8001f16:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc4 <nunavutFloat16Pack+0xb8>)
 8001f18:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 8001f1a:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8001f1e:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 8001f20:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 8001f24:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 8001f26:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 8001f2a:	613b      	str	r3, [r7, #16]
    in.real = value;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f36:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4053      	eors	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (in.bits >= f32inf.bits)
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d313      	bcc.n	8001f74 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 8001f56:	f44f 43fc 	mov.w	r3, #32256	@ 0x7e00
 8001f5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001f5c:	e025      	b.n	8001faa <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d902      	bls.n	8001f6c <nunavutFloat16Pack+0x60>
 8001f66:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001f6a:	e001      	b.n	8001f70 <nunavutFloat16Pack+0x64>
 8001f6c:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8001f70:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001f72:	e01a      	b.n	8001faa <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001f7a:	f023 030f 	bic.w	r3, r3, #15
 8001f7e:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 8001f80:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f84:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f96:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d901      	bls.n	8001fa4 <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	0b5b      	lsrs	r3, r3, #13
 8001fa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    return out;
 8001fb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	372c      	adds	r7, #44	@ 0x2c
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	fffff000 	.word	0xfffff000

08001fc8 <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 8001fd2:	f04f 43ef 	mov.w	r3, #2004877312	@ 0x77800000
 8001fd6:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 8001fd8:	f04f 438f 	mov.w	r3, #1199570944	@ 0x47800000
 8001fdc:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	035a      	lsls	r2, r3, #13
 8001fe2:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <nunavutFloat16Unpack+0x6c>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 8001fe8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 8001ff8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ffc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002008:	db03      	blt.n	8002012 <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
 8002010:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800201c:	4313      	orrs	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
    return out.real;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	ee07 3a90 	vmov	s15, r3
}
 8002026:	eeb0 0a67 	vmov.f32	s0, s15
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	0fffe000 	.word	0x0fffe000

08002038 <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 8002044:	2310      	movs	r3, #16
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff ff18 	bl	8001e80 <nunavutGetU16>
 8002050:	4603      	mov	r3, r0
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ffb8 	bl	8001fc8 <nunavutFloat16Unpack>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
}
 800205c:	eeb0 0a67 	vmov.f32	s0, s15
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 8002072:	2320      	movs	r3, #32
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff ff24 	bl	8001ec6 <nunavutGetU32>
 800207e:	4603      	mov	r3, r0
 8002080:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	ee07 3a90 	vmov	s15, r3
}
 8002088:	eeb0 0a67 	vmov.f32	s0, s15
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <uavcan_node_Health_1_0_deserialize_+0x26>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <uavcan_node_Health_1_0_deserialize_+0x26>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <uavcan_node_Health_1_0_deserialize_+0x2c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80020ba:	f06f 0301 	mvn.w	r3, #1
 80020be:	e030      	b.n	8002122 <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80020c6:	4b19      	ldr	r3, [pc, #100]	@ (800212c <uavcan_node_Health_1_0_deserialize_+0x98>)
 80020c8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3302      	adds	r3, #2
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d30a      	bcc.n	80020fa <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	08db      	lsrs	r3, r3, #3
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e002      	b.n	8002100 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3302      	adds	r3, #2
 8002104:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3307      	adds	r3, #7
 800210a:	f023 0307 	bic.w	r3, r3, #7
 800210e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff fd7e 	bl	8001c14 <nunavutChooseMin>
 8002118:	4603      	mov	r3, r0
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	080188a0 	.word	0x080188a0

08002130 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <uavcan_node_Mode_1_0_deserialize_+0x2c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002156:	f06f 0301 	mvn.w	r3, #1
 800215a:	e030      	b.n	80021be <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002162:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8002164:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3303      	adds	r3, #3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	429a      	cmp	r2, r3
 800217e:	d30a      	bcc.n	8002196 <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	08db      	lsrs	r3, r3, #3
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	4413      	add	r3, r2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e002      	b.n	800219c <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3303      	adds	r3, #3
 80021a0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3307      	adds	r3, #7
 80021a6:	f023 0307 	bic.w	r3, r3, #7
 80021aa:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80021ac:	69b9      	ldr	r1, [r7, #24]
 80021ae:	6978      	ldr	r0, [r7, #20]
 80021b0:	f7ff fd30 	bl	8001c14 <nunavutChooseMin>
 80021b4:	4603      	mov	r3, r0
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	080188a0 	.word	0x080188a0

080021cc <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80021f2:	f06f 0301 	mvn.w	r3, #1
 80021f6:	e089      	b.n	800230c <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80021fe:	4b45      	ldr	r3, [pc, #276]	@ (8002314 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002200:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002212:	2320      	movs	r3, #32
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002218:	68b8      	ldr	r0, [r7, #8]
 800221a:	f7ff fe54 	bl	8001ec6 <nunavutGetU32>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3320      	adds	r3, #32
 8002228:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3307      	adds	r3, #7
 800222e:	f023 0307 	bic.w	r3, r3, #7
 8002232:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08db      	lsrs	r3, r3, #3
 8002238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fcea 	bl	8001c14 <nunavutChooseMin>
 8002240:	4602      	mov	r2, r0
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	4413      	add	r3, r2
 8002254:	f107 0214 	add.w	r2, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	f7ff ff1b 	bl	8002094 <uavcan_node_Health_1_0_deserialize_>
 800225e:	4603      	mov	r3, r0
 8002260:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002262:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002266:	2b00      	cmp	r3, #0
 8002268:	da02      	bge.n	8002270 <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 800226a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800226e:	e04d      	b.n	800230c <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	4413      	add	r3, r2
 8002278:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3307      	adds	r3, #7
 800227e:	f023 0307 	bic.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	08db      	lsrs	r3, r3, #3
 8002288:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fcc2 	bl	8001c14 <nunavutChooseMin>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	4413      	add	r3, r2
 80022a4:	f107 0210 	add.w	r2, r7, #16
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7ff ff41 	bl	8002130 <uavcan_node_Mode_1_0_deserialize_>
 80022ae:	4603      	mov	r3, r0
 80022b0:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 80022b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da02      	bge.n	80022c0 <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 80022ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80022be:	e025      	b.n	800230c <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3308      	adds	r3, #8
 80022ce:	6a3a      	ldr	r2, [r7, #32]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d307      	bcc.n	80022e4 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	4413      	add	r3, r2
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	719a      	strb	r2, [r3, #6]
 80022e2:	e002      	b.n	80022ea <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3308      	adds	r3, #8
 80022ee:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3307      	adds	r3, #7
 80022f4:	f023 0307 	bic.w	r3, r3, #7
 80022f8:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80022fa:	6a39      	ldr	r1, [r7, #32]
 80022fc:	69f8      	ldr	r0, [r7, #28]
 80022fe:	f7ff fc89 	bl	8001c14 <nunavutChooseMin>
 8002302:	4603      	mov	r3, r0
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3728      	adds	r7, #40	@ 0x28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	080188a0 	.word	0x080188a0

08002318 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d106      	bne.n	8002344 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800233e:	f06f 0301 	mvn.w	r3, #1
 8002342:	e027      	b.n	8002394 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800234a:	4b14      	ldr	r3, [pc, #80]	@ (800239c <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 800234c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	69f9      	ldr	r1, [r7, #28]
 8002362:	68b8      	ldr	r0, [r7, #8]
 8002364:	f7ff fe7f 	bl	8002066 <nunavutGetF32>
 8002368:	eef0 7a40 	vmov.f32	s15, s0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3320      	adds	r3, #32
 8002376:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3307      	adds	r3, #7
 800237c:	f023 0307 	bic.w	r3, r3, #7
 8002380:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002382:	69b9      	ldr	r1, [r7, #24]
 8002384:	6978      	ldr	r0, [r7, #20]
 8002386:	f7ff fc45 	bl	8001c14 <nunavutChooseMin>
 800238a:	4603      	mov	r3, r0
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	080188a0 	.word	0x080188a0

080023a0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80023c6:	f06f 0301 	mvn.w	r3, #1
 80023ca:	e027      	b.n	800241c <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80023d2:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 80023d4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	69f9      	ldr	r1, [r7, #28]
 80023ea:	68b8      	ldr	r0, [r7, #8]
 80023ec:	f7ff fe3b 	bl	8002066 <nunavutGetF32>
 80023f0:	eef0 7a40 	vmov.f32	s15, s0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3320      	adds	r3, #32
 80023fe:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3307      	adds	r3, #7
 8002404:	f023 0307 	bic.w	r3, r3, #7
 8002408:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800240a:	69b9      	ldr	r1, [r7, #24]
 800240c:	6978      	ldr	r0, [r7, #20]
 800240e:	f7ff fc01 	bl	8001c14 <nunavutChooseMin>
 8002412:	4603      	mov	r3, r0
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3720      	adds	r7, #32
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	080188a0 	.word	0x080188a0

08002428 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800244e:	f06f 0301 	mvn.w	r3, #1
 8002452:	e027      	b.n	80024a4 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800245a:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 800245c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	69f9      	ldr	r1, [r7, #28]
 8002472:	68b8      	ldr	r0, [r7, #8]
 8002474:	f7ff fdf7 	bl	8002066 <nunavutGetF32>
 8002478:	eef0 7a40 	vmov.f32	s15, s0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3320      	adds	r3, #32
 8002486:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3307      	adds	r3, #7
 800248c:	f023 0307 	bic.w	r3, r3, #7
 8002490:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002492:	69b9      	ldr	r1, [r7, #24]
 8002494:	6978      	ldr	r0, [r7, #20]
 8002496:	f7ff fbbd 	bl	8001c14 <nunavutChooseMin>
 800249a:	4603      	mov	r3, r0
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	080188a0 	.word	0x080188a0

080024b0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	@ 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80024d6:	f06f 0301 	mvn.w	r3, #1
 80024da:	e090      	b.n	80025fe <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80024e2:	4b49      	ldr	r3, [pc, #292]	@ (8002608 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 80024e4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80024ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t offset_bits = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fb89 	bl	8001c14 <nunavutChooseMin>
 8002502:	4602      	mov	r2, r0
 8002504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 800250a:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	4413      	add	r3, r2
 8002514:	f107 021c 	add.w	r2, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	f7ff fefd 	bl	8002318 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 800251e:	4603      	mov	r3, r0
 8002520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (_err6_ < 0)
 8002524:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002528:	2b00      	cmp	r3, #0
 800252a:	da02      	bge.n	8002532 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 800252c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002530:	e065      	b.n	80025fe <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002538:	4413      	add	r3, r2
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	3307      	adds	r3, #7
 8002540:	f023 0307 	bic.w	r3, r3, #7
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	08db      	lsrs	r3, r3, #3
 800254a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fb61 	bl	8001c14 <nunavutChooseMin>
 8002552:	4602      	mov	r2, r0
 8002554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	4413      	add	r3, r2
 8002566:	f107 0218 	add.w	r2, r7, #24
 800256a:	4619      	mov	r1, r3
 800256c:	f7ff ff5c 	bl	8002428 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8002570:	4603      	mov	r3, r0
 8002572:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err7_ < 0)
 8002576:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800257a:	2b00      	cmp	r3, #0
 800257c:	da02      	bge.n	8002584 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 800257e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002582:	e03c      	b.n	80025fe <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258a:	4413      	add	r3, r2
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	3307      	adds	r3, #7
 8002592:	f023 0307 	bic.w	r3, r3, #7
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	08db      	lsrs	r3, r3, #3
 800259c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fb38 	bl	8001c14 <nunavutChooseMin>
 80025a4:	4602      	mov	r2, r0
 80025a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	4413      	add	r3, r2
 80025ba:	f107 0214 	add.w	r2, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	f7ff feee 	bl	80023a0 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err8_ < 0)
 80025ca:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	da02      	bge.n	80025d8 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 80025d2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80025d6:	e012      	b.n	80025fe <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025de:	4413      	add	r3, r2
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	3307      	adds	r3, #7
 80025e6:	f023 0307 	bic.w	r3, r3, #7
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80025ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025f0:	f7ff fb10 	bl	8001c14 <nunavutChooseMin>
 80025f4:	4603      	mov	r3, r0
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3730      	adds	r7, #48	@ 0x30
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	080188a0 	.word	0x080188a0

0800260c <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	@ 0x28
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <uavcan_register_Name_1_0_deserialize_+0x26>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <uavcan_register_Name_1_0_deserialize_+0x26>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <uavcan_register_Name_1_0_deserialize_+0x2c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002632:	f06f 0301 	mvn.w	r3, #1
 8002636:	e04a      	b.n	80026ce <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800263e:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <uavcan_register_Name_1_0_deserialize_+0xcc>)
 8002640:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3308      	adds	r3, #8
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	429a      	cmp	r2, r3
 800265a:	d309      	bcc.n	8002670 <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	08db      	lsrs	r3, r3, #3
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800266e:	e003      	b.n	8002678 <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3308      	adds	r3, #8
 800267c:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002684:	2bff      	cmp	r3, #255	@ 0xff
 8002686:	d902      	bls.n	800268e <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002688:	f06f 0309 	mvn.w	r3, #9
 800268c:	e01f      	b.n	80026ce <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	f7ff fba1 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4413      	add	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3307      	adds	r3, #7
 80026b6:	f023 0307 	bic.w	r3, r3, #7
 80026ba:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80026bc:	69b9      	ldr	r1, [r7, #24]
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff faa8 	bl	8001c14 <nunavutChooseMin>
 80026c4:	4603      	mov	r3, r0
 80026c6:	08da      	lsrs	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	080188a0 	.word	0x080188a0

080026dc <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	@ 0x30
 80026e0:	af04      	add	r7, sp, #16
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80026fa:	f06f 0301 	mvn.w	r3, #1
 80026fe:	e05e      	b.n	80027be <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 800270e:	d202      	bcs.n	8002716 <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002710:	f06f 0302 	mvn.w	r3, #2
 8002714:	e053      	b.n	80027be <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002724:	d902      	bls.n	800272c <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002726:	f06f 0309 	mvn.w	r3, #9
 800272a:	e048      	b.n	80027be <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	08db      	lsrs	r3, r3, #3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	4413      	add	r3, r2
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800273a:	8812      	ldrh	r2, [r2, #0]
 800273c:	b292      	uxth	r2, r2
 800273e:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	3310      	adds	r3, #16
 8002744:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2100      	movs	r1, #0
 8002750:	9100      	str	r1, [sp, #0]
 8002752:	69f9      	ldr	r1, [r7, #28]
 8002754:	68b8      	ldr	r0, [r7, #8]
 8002756:	f7ff fa89 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	2b00      	cmp	r3, #0
 800276e:	d021      	beq.n	80027b4 <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f1c3 0308 	rsb	r3, r3, #8
 800277e:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	9302      	str	r3, [sp, #8]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9cd 2300 	strd	r2, r3, [sp]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f7ff fb4d 	bl	8001e34 <nunavutSetUxx>
 800279a:	4603      	mov	r3, r0
 800279c:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800279e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da02      	bge.n	80027ac <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 80027a6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80027aa:	e008      	b.n	80027be <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	08da      	lsrs	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80027ee:	f06f 0301 	mvn.w	r3, #1
 80027f2:	e041      	b.n	8002878 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80027fa:	4b21      	ldr	r3, [pc, #132]	@ (8002880 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 80027fc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800280e:	2310      	movs	r3, #16
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	69f9      	ldr	r1, [r7, #28]
 8002814:	68b8      	ldr	r0, [r7, #8]
 8002816:	f7ff fb33 	bl	8001e80 <nunavutGetU16>
 800281a:	4603      	mov	r3, r0
 800281c:	461a      	mov	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3310      	adds	r3, #16
 8002828:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002834:	d902      	bls.n	800283c <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002836:	f06f 0309 	mvn.w	r3, #9
 800283a:	e01d      	b.n	8002878 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	f7ff facb 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4413      	add	r3, r2
 800285a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3307      	adds	r3, #7
 8002860:	f023 0307 	bic.w	r3, r3, #7
 8002864:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002866:	69b9      	ldr	r1, [r7, #24]
 8002868:	6978      	ldr	r0, [r7, #20]
 800286a:	f7ff f9d3 	bl	8001c14 <nunavutChooseMin>
 800286e:	4603      	mov	r3, r0
 8002870:	08da      	lsrs	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	080188a0 	.word	0x080188a0

08002884 <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	@ 0x30
 8002888:	af04      	add	r7, sp, #16
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80028a2:	f06f 0301 	mvn.w	r3, #1
 80028a6:	e05f      	b.n	8002968 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	f640 0207 	movw	r2, #2055	@ 0x807
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d802      	bhi.n	80028c0 <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80028ba:	f06f 0302 	mvn.w	r3, #2
 80028be:	e053      	b.n	8002968 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80028ca:	2b80      	cmp	r3, #128	@ 0x80
 80028cc:	d902      	bls.n	80028d4 <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80028ce:	f06f 0309 	mvn.w	r3, #9
 80028d2:	e049      	b.n	8002968 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	08db      	lsrs	r3, r3, #3
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	4413      	add	r3, r2
 80028e2:	b2ca      	uxtb	r2, r1
 80028e4:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3308      	adds	r3, #8
 80028ea:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80028f2:	011a      	lsls	r2, r3, #4
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2100      	movs	r1, #0
 80028f8:	9100      	str	r1, [sp, #0]
 80028fa:	69f9      	ldr	r1, [r7, #28]
 80028fc:	68b8      	ldr	r0, [r7, #8]
 80028fe:	f7ff f9b5 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	2b00      	cmp	r3, #0
 8002918:	d021      	beq.n	800295e <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f1c3 0308 	rsb	r3, r3, #8
 8002928:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800292a:	7dfb      	ldrb	r3, [r7, #23]
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9cd 2300 	strd	r2, r3, [sp]
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	69b9      	ldr	r1, [r7, #24]
 800293e:	68b8      	ldr	r0, [r7, #8]
 8002940:	f7ff fa78 	bl	8001e34 <nunavutSetUxx>
 8002944:	4603      	mov	r3, r0
 8002946:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002948:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800294c:	2b00      	cmp	r3, #0
 800294e:	da02      	bge.n	8002956 <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8002950:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002954:	e008      	b.n	8002968 <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	@ 0x28
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d006      	beq.n	8002996 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002996:	f06f 0301 	mvn.w	r3, #1
 800299a:	e04a      	b.n	8002a32 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80029a2:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 80029a4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3308      	adds	r3, #8
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d309      	bcc.n	80029d4 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80029d2:	e003      	b.n	80029dc <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3308      	adds	r3, #8
 80029e0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80029e8:	2b80      	cmp	r3, #128	@ 0x80
 80029ea:	d902      	bls.n	80029f2 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80029ec:	f06f 0309 	mvn.w	r3, #9
 80029f0:	e01f      	b.n	8002a32 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	f7ff f9ef 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4413      	add	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3307      	adds	r3, #7
 8002a1a:	f023 0307 	bic.w	r3, r3, #7
 8002a1e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002a20:	69b9      	ldr	r1, [r7, #24]
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff f8f6 	bl	8001c14 <nunavutChooseMin>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	08da      	lsrs	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	080188a0 	.word	0x080188a0

08002a40 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	@ 0x30
 8002a44:	af04      	add	r7, sp, #16
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a5e:	f06f 0301 	mvn.w	r3, #1
 8002a62:	e05f      	b.n	8002b24 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	f640 0207 	movw	r2, #2055	@ 0x807
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d802      	bhi.n	8002a7c <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002a76:	f06f 0302 	mvn.w	r3, #2
 8002a7a:	e053      	b.n	8002b24 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002a86:	2b40      	cmp	r3, #64	@ 0x40
 8002a88:	d902      	bls.n	8002a90 <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002a8a:	f06f 0309 	mvn.w	r3, #9
 8002a8e:	e049      	b.n	8002b24 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	08db      	lsrs	r3, r3, #3
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	b2ca      	uxtb	r2, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	9100      	str	r1, [sp, #0]
 8002ab6:	69f9      	ldr	r1, [r7, #28]
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	f7ff f8d7 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002ac4:	015b      	lsls	r3, r3, #5
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d021      	beq.n	8002b1a <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f1c3 0308 	rsb	r3, r3, #8
 8002ae4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	9302      	str	r3, [sp, #8]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	e9cd 2300 	strd	r2, r3, [sp]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	69b9      	ldr	r1, [r7, #24]
 8002afa:	68b8      	ldr	r0, [r7, #8]
 8002afc:	f7ff f99a 	bl	8001e34 <nunavutSetUxx>
 8002b00:	4603      	mov	r3, r0
 8002b02:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002b04:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	da02      	bge.n	8002b12 <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8002b0c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b10:	e008      	b.n	8002b24 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	@ 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b52:	f06f 0301 	mvn.w	r3, #1
 8002b56:	e04a      	b.n	8002bee <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002b5e:	4b26      	ldr	r3, [pc, #152]	@ (8002bf8 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 8002b60:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3308      	adds	r3, #8
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d309      	bcc.n	8002b90 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8002b8e:	e003      	b.n	8002b98 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002ba4:	2b40      	cmp	r3, #64	@ 0x40
 8002ba6:	d902      	bls.n	8002bae <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002ba8:	f06f 0309 	mvn.w	r3, #9
 8002bac:	e01f      	b.n	8002bee <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002bb6:	015b      	lsls	r3, r3, #5
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	f7ff f911 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002bca:	015b      	lsls	r3, r3, #5
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4413      	add	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3307      	adds	r3, #7
 8002bd6:	f023 0307 	bic.w	r3, r3, #7
 8002bda:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002bdc:	69b9      	ldr	r1, [r7, #24]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff f818 	bl	8001c14 <nunavutChooseMin>
 8002be4:	4603      	mov	r3, r0
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	080188a0 	.word	0x080188a0

08002bfc <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	@ 0x30
 8002c00:	af04      	add	r7, sp, #16
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c1a:	f06f 0301 	mvn.w	r3, #1
 8002c1e:	e05f      	b.n	8002ce0 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	f640 0207 	movw	r2, #2055	@ 0x807
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d802      	bhi.n	8002c38 <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002c32:	f06f 0302 	mvn.w	r3, #2
 8002c36:	e053      	b.n	8002ce0 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d902      	bls.n	8002c4c <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002c46:	f06f 0309 	mvn.w	r3, #9
 8002c4a:	e049      	b.n	8002ce0 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b2ca      	uxtb	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3308      	adds	r3, #8
 8002c62:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c6a:	019a      	lsls	r2, r3, #6
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	9100      	str	r1, [sp, #0]
 8002c72:	69f9      	ldr	r1, [r7, #28]
 8002c74:	68b8      	ldr	r0, [r7, #8]
 8002c76:	f7fe fff9 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d021      	beq.n	8002cd6 <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f1c3 0308 	rsb	r3, r3, #8
 8002ca0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	9302      	str	r3, [sp, #8]
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9cd 2300 	strd	r2, r3, [sp]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	69b9      	ldr	r1, [r7, #24]
 8002cb6:	68b8      	ldr	r0, [r7, #8]
 8002cb8:	f7ff f8bc 	bl	8001e34 <nunavutSetUxx>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002cc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	da02      	bge.n	8002cce <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8002cc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002ccc:	e008      	b.n	8002ce0 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	@ 0x28
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002d0e:	f06f 0301 	mvn.w	r3, #1
 8002d12:	e04a      	b.n	8002daa <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002d1a:	4b26      	ldr	r3, [pc, #152]	@ (8002db4 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 8002d1c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3308      	adds	r3, #8
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d309      	bcc.n	8002d4c <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	08db      	lsrs	r3, r3, #3
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8002d4a:	e003      	b.n	8002d54 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3308      	adds	r3, #8
 8002d58:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d902      	bls.n	8002d6a <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002d64:	f06f 0309 	mvn.w	r3, #9
 8002d68:	e01f      	b.n	8002daa <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d72:	019b      	lsls	r3, r3, #6
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	f7ff f833 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d86:	019b      	lsls	r3, r3, #6
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3307      	adds	r3, #7
 8002d92:	f023 0307 	bic.w	r3, r3, #7
 8002d96:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002d98:	69b9      	ldr	r1, [r7, #24]
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f7fe ff3a 	bl	8001c14 <nunavutChooseMin>
 8002da0:	4603      	mov	r3, r0
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	080188a0 	.word	0x080188a0

08002db8 <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	@ 0x30
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002dd6:	f06f 0301 	mvn.w	r3, #1
 8002dda:	e060      	b.n	8002e9e <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8002dea:	d202      	bcs.n	8002df2 <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002dec:	f06f 0302 	mvn.w	r3, #2
 8002df0:	e055      	b.n	8002e9e <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e00:	d902      	bls.n	8002e08 <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002e02:	f06f 0309 	mvn.w	r3, #9
 8002e06:	e04a      	b.n	8002e9e <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	08db      	lsrs	r3, r3, #3
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4413      	add	r3, r2
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002e16:	8812      	ldrh	r2, [r2, #0]
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	3310      	adds	r3, #16
 8002e20:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002e28:	00da      	lsls	r2, r3, #3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	9100      	str	r1, [sp, #0]
 8002e30:	69f9      	ldr	r1, [r7, #28]
 8002e32:	68b8      	ldr	r0, [r7, #8]
 8002e34:	f7fe ff1a 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	4413      	add	r3, r2
 8002e44:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d021      	beq.n	8002e94 <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f1c3 0308 	rsb	r3, r3, #8
 8002e5e:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	9302      	str	r3, [sp, #8]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9cd 2300 	strd	r2, r3, [sp]
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	69b9      	ldr	r1, [r7, #24]
 8002e74:	68b8      	ldr	r0, [r7, #8]
 8002e76:	f7fe ffdd 	bl	8001e34 <nunavutSetUxx>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8002e7e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	da02      	bge.n	8002e8c <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8002e86:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e8a:	e008      	b.n	8002e9e <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	08da      	lsrs	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	@ 0x28
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ece:	f06f 0301 	mvn.w	r3, #1
 8002ed2:	e043      	b.n	8002f5c <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002eda:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 8002edc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8002eee:	2310      	movs	r3, #16
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	69f9      	ldr	r1, [r7, #28]
 8002ef4:	68b8      	ldr	r0, [r7, #8]
 8002ef6:	f7fe ffc3 	bl	8001e80 <nunavutGetU16>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3310      	adds	r3, #16
 8002f08:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f14:	d902      	bls.n	8002f1c <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002f16:	f06f 0309 	mvn.w	r3, #9
 8002f1a:	e01f      	b.n	8002f5c <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	f7fe ff5a 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3307      	adds	r3, #7
 8002f44:	f023 0307 	bic.w	r3, r3, #7
 8002f48:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002f4a:	69b9      	ldr	r1, [r7, #24]
 8002f4c:	6978      	ldr	r0, [r7, #20]
 8002f4e:	f7fe fe61 	bl	8001c14 <nunavutChooseMin>
 8002f52:	4603      	mov	r3, r0
 8002f54:	08da      	lsrs	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	080188a0 	.word	0x080188a0

08002f68 <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	@ 0x30
 8002f6c:	af04      	add	r7, sp, #16
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002f86:	f06f 0301 	mvn.w	r3, #1
 8002f8a:	e05f      	b.n	800304c <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	f640 0207 	movw	r2, #2055	@ 0x807
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d802      	bhi.n	8002fa4 <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002f9e:	f06f 0302 	mvn.w	r3, #2
 8002fa2:	e053      	b.n	800304c <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002fae:	2b80      	cmp	r3, #128	@ 0x80
 8002fb0:	d902      	bls.n	8002fb8 <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8002fb2:	f06f 0309 	mvn.w	r3, #9
 8002fb6:	e049      	b.n	800304c <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	b2ca      	uxtb	r2, r1
 8002fc8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3308      	adds	r3, #8
 8002fce:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002fd6:	011a      	lsls	r2, r3, #4
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2100      	movs	r1, #0
 8002fdc:	9100      	str	r1, [sp, #0]
 8002fde:	69f9      	ldr	r1, [r7, #28]
 8002fe0:	68b8      	ldr	r0, [r7, #8]
 8002fe2:	f7fe fe43 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d021      	beq.n	8003042 <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f1c3 0308 	rsb	r3, r3, #8
 800300c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	9302      	str	r3, [sp, #8]
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9cd 2300 	strd	r2, r3, [sp]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	69b9      	ldr	r1, [r7, #24]
 8003022:	68b8      	ldr	r0, [r7, #8]
 8003024:	f7fe ff06 	bl	8001e34 <nunavutSetUxx>
 8003028:	4603      	mov	r3, r0
 800302a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800302c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003030:	2b00      	cmp	r3, #0
 8003032:	da02      	bge.n	800303a <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003034:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003038:	e008      	b.n	800304c <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	08da      	lsrs	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	@ 0x28
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800307a:	f06f 0301 	mvn.w	r3, #1
 800307e:	e04a      	b.n	8003116 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003086:	4b26      	ldr	r3, [pc, #152]	@ (8003120 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 8003088:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3308      	adds	r3, #8
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d309      	bcc.n	80030b8 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	08db      	lsrs	r3, r3, #3
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80030b6:	e003      	b.n	80030c0 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3308      	adds	r3, #8
 80030c4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80030cc:	2b80      	cmp	r3, #128	@ 0x80
 80030ce:	d902      	bls.n	80030d6 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80030d0:	f06f 0309 	mvn.w	r3, #9
 80030d4:	e01f      	b.n	8003116 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	f7fe fe7d 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4413      	add	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3307      	adds	r3, #7
 80030fe:	f023 0307 	bic.w	r3, r3, #7
 8003102:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003104:	69b9      	ldr	r1, [r7, #24]
 8003106:	6978      	ldr	r0, [r7, #20]
 8003108:	f7fe fd84 	bl	8001c14 <nunavutChooseMin>
 800310c:	4603      	mov	r3, r0
 800310e:	08da      	lsrs	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	080188a0 	.word	0x080188a0

08003124 <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	@ 0x30
 8003128:	af04      	add	r7, sp, #16
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003142:	f06f 0301 	mvn.w	r3, #1
 8003146:	e05f      	b.n	8003208 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	f640 0207 	movw	r2, #2055	@ 0x807
 8003156:	4293      	cmp	r3, r2
 8003158:	d802      	bhi.n	8003160 <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800315a:	f06f 0302 	mvn.w	r3, #2
 800315e:	e053      	b.n	8003208 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800316a:	2b40      	cmp	r3, #64	@ 0x40
 800316c:	d902      	bls.n	8003174 <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800316e:	f06f 0309 	mvn.w	r3, #9
 8003172:	e049      	b.n	8003208 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	4413      	add	r3, r2
 8003182:	b2ca      	uxtb	r2, r1
 8003184:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3308      	adds	r3, #8
 800318a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2100      	movs	r1, #0
 8003198:	9100      	str	r1, [sp, #0]
 800319a:	69f9      	ldr	r1, [r7, #28]
 800319c:	68b8      	ldr	r0, [r7, #8]
 800319e:	f7fe fd65 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80031a8:	015b      	lsls	r3, r3, #5
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d021      	beq.n	80031fe <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f1c3 0308 	rsb	r3, r3, #8
 80031c8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	9302      	str	r3, [sp, #8]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9cd 2300 	strd	r2, r3, [sp]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	69b9      	ldr	r1, [r7, #24]
 80031de:	68b8      	ldr	r0, [r7, #8]
 80031e0:	f7fe fe28 	bl	8001e34 <nunavutSetUxx>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80031e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	da02      	bge.n	80031f6 <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80031f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031f4:	e008      	b.n	8003208 <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	08da      	lsrs	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	@ 0x28
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003236:	f06f 0301 	mvn.w	r3, #1
 800323a:	e04a      	b.n	80032d2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003242:	4b26      	ldr	r3, [pc, #152]	@ (80032dc <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 8003244:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3308      	adds	r3, #8
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	429a      	cmp	r2, r3
 800325e:	d309      	bcc.n	8003274 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	08db      	lsrs	r3, r3, #3
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	4413      	add	r3, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003272:	e003      	b.n	800327c <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3308      	adds	r3, #8
 8003280:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003288:	2b40      	cmp	r3, #64	@ 0x40
 800328a:	d902      	bls.n	8003292 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800328c:	f06f 0309 	mvn.w	r3, #9
 8003290:	e01f      	b.n	80032d2 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800329a:	015b      	lsls	r3, r3, #5
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	f7fe fd9f 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80032ae:	015b      	lsls	r3, r3, #5
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4413      	add	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3307      	adds	r3, #7
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80032c0:	69b9      	ldr	r1, [r7, #24]
 80032c2:	6978      	ldr	r0, [r7, #20]
 80032c4:	f7fe fca6 	bl	8001c14 <nunavutChooseMin>
 80032c8:	4603      	mov	r3, r0
 80032ca:	08da      	lsrs	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	080188a0 	.word	0x080188a0

080032e0 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	@ 0x30
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80032fe:	f06f 0301 	mvn.w	r3, #1
 8003302:	e05f      	b.n	80033c4 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	f640 0207 	movw	r2, #2055	@ 0x807
 8003312:	4293      	cmp	r3, r2
 8003314:	d802      	bhi.n	800331c <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003316:	f06f 0302 	mvn.w	r3, #2
 800331a:	e053      	b.n	80033c4 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003326:	2b20      	cmp	r3, #32
 8003328:	d902      	bls.n	8003330 <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800332a:	f06f 0309 	mvn.w	r3, #9
 800332e:	e049      	b.n	80033c4 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	08db      	lsrs	r3, r3, #3
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	b2ca      	uxtb	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3308      	adds	r3, #8
 8003346:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800334e:	019a      	lsls	r2, r3, #6
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2100      	movs	r1, #0
 8003354:	9100      	str	r1, [sp, #0]
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	68b8      	ldr	r0, [r7, #8]
 800335a:	f7fe fc87 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	2b00      	cmp	r3, #0
 8003374:	d021      	beq.n	80033ba <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f1c3 0308 	rsb	r3, r3, #8
 8003384:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	9302      	str	r3, [sp, #8]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9cd 2300 	strd	r2, r3, [sp]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	69b9      	ldr	r1, [r7, #24]
 800339a:	68b8      	ldr	r0, [r7, #8]
 800339c:	f7fe fd4a 	bl	8001e34 <nunavutSetUxx>
 80033a0:	4603      	mov	r3, r0
 80033a2:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80033a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da02      	bge.n	80033b2 <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 80033ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80033b0:	e008      	b.n	80033c4 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	08da      	lsrs	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	@ 0x28
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d006      	beq.n	80033f2 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80033f2:	f06f 0301 	mvn.w	r3, #1
 80033f6:	e04a      	b.n	800348e <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80033fe:	4b26      	ldr	r3, [pc, #152]	@ (8003498 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 8003400:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3308      	adds	r3, #8
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	429a      	cmp	r2, r3
 800341a:	d309      	bcc.n	8003430 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	08db      	lsrs	r3, r3, #3
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800342e:	e003      	b.n	8003438 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3308      	adds	r3, #8
 800343c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003444:	2b20      	cmp	r3, #32
 8003446:	d902      	bls.n	800344e <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003448:	f06f 0309 	mvn.w	r3, #9
 800344c:	e01f      	b.n	800348e <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003456:	019b      	lsls	r3, r3, #6
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	f7fe fcc1 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800346a:	019b      	lsls	r3, r3, #6
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4413      	add	r3, r2
 8003470:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3307      	adds	r3, #7
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800347c:	69b9      	ldr	r1, [r7, #24]
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f7fe fbc8 	bl	8001c14 <nunavutChooseMin>
 8003484:	4603      	mov	r3, r0
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	080188a0 	.word	0x080188a0

0800349c <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	@ 0x30
 80034a0:	af04      	add	r7, sp, #16
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80034ba:	f06f 0301 	mvn.w	r3, #1
 80034be:	e060      	b.n	8003582 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80034ce:	d202      	bcs.n	80034d6 <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80034d0:	f06f 0302 	mvn.w	r3, #2
 80034d4:	e055      	b.n	8003582 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80034e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034e4:	d902      	bls.n	80034ec <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80034e6:	f06f 0309 	mvn.w	r3, #9
 80034ea:	e04a      	b.n	8003582 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	08db      	lsrs	r3, r3, #3
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	4413      	add	r3, r2
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	b292      	uxth	r2, r2
 80034fe:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	3310      	adds	r3, #16
 8003504:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800350c:	00da      	lsls	r2, r3, #3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2100      	movs	r1, #0
 8003512:	9100      	str	r1, [sp, #0]
 8003514:	69f9      	ldr	r1, [r7, #28]
 8003516:	68b8      	ldr	r0, [r7, #8]
 8003518:	f7fe fba8 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	2b00      	cmp	r3, #0
 8003532:	d021      	beq.n	8003578 <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f1c3 0308 	rsb	r3, r3, #8
 8003542:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	9302      	str	r3, [sp, #8]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9cd 2300 	strd	r2, r3, [sp]
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	69b9      	ldr	r1, [r7, #24]
 8003558:	68b8      	ldr	r0, [r7, #8]
 800355a:	f7fe fc6b 	bl	8001e34 <nunavutSetUxx>
 800355e:	4603      	mov	r3, r0
 8003560:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003562:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003566:	2b00      	cmp	r3, #0
 8003568:	da02      	bge.n	8003570 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 800356a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800356e:	e008      	b.n	8003582 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	08da      	lsrs	r2, r3, #3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	@ 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d006      	beq.n	80035b2 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80035b2:	f06f 0301 	mvn.w	r3, #1
 80035b6:	e043      	b.n	8003640 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80035be:	4b22      	ldr	r3, [pc, #136]	@ (8003648 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 80035c0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80035d2:	2310      	movs	r3, #16
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	69f9      	ldr	r1, [r7, #28]
 80035d8:	68b8      	ldr	r0, [r7, #8]
 80035da:	f7fe fc51 	bl	8001e80 <nunavutGetU16>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3310      	adds	r3, #16
 80035ec:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80035f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f8:	d902      	bls.n	8003600 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80035fa:	f06f 0309 	mvn.w	r3, #9
 80035fe:	e01f      	b.n	8003640 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	f7fe fbe8 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4413      	add	r3, r2
 8003622:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3307      	adds	r3, #7
 8003628:	f023 0307 	bic.w	r3, r3, #7
 800362c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800362e:	69b9      	ldr	r1, [r7, #24]
 8003630:	6978      	ldr	r0, [r7, #20]
 8003632:	f7fe faef 	bl	8001c14 <nunavutChooseMin>
 8003636:	4603      	mov	r3, r0
 8003638:	08da      	lsrs	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	080188a0 	.word	0x080188a0

0800364c <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08e      	sub	sp, #56	@ 0x38
 8003650:	af04      	add	r7, sp, #16
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800366a:	f06f 0301 	mvn.w	r3, #1
 800366e:	e08b      	b.n	8003788 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	f640 0207 	movw	r2, #2055	@ 0x807
 800367e:	4293      	cmp	r3, r2
 8003680:	d802      	bhi.n	8003688 <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003682:	f06f 0302 	mvn.w	r3, #2
 8003686:	e07f      	b.n	8003788 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003692:	2b80      	cmp	r3, #128	@ 0x80
 8003694:	d902      	bls.n	800369c <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003696:	f06f 0309 	mvn.w	r3, #9
 800369a:	e075      	b.n	8003788 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	08db      	lsrs	r3, r3, #3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4413      	add	r3, r2
 80036aa:	b2ca      	uxtb	r2, r1
 80036ac:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	3308      	adds	r3, #8
 80036b2:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80036b4:	2300      	movs	r3, #0
 80036b6:	623b      	str	r3, [r7, #32]
 80036b8:	e034      	b.n	8003724 <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 80036c6:	ed97 0a07 	vldr	s0, [r7, #28]
 80036ca:	f7fe fa7f 	bl	8001bcc <_ZSt8isfinitef>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 80036d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80036d8:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003790 <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 80036dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	d501      	bpl.n	80036ea <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 80036e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003794 <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 80036e8:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 80036ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80036ee:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003798 <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 80036f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fa:	dd01      	ble.n	8003700 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 80036fc:	4b27      	ldr	r3, [pc, #156]	@ (800379c <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 80036fe:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 8003700:	ed97 0a07 	vldr	s0, [r7, #28]
 8003704:	f7fe fc02 	bl	8001f0c <nunavutFloat16Pack>
 8003708:	4603      	mov	r3, r0
 800370a:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	4413      	add	r3, r2
 8003714:	8aba      	ldrh	r2, [r7, #20]
 8003716:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	3310      	adds	r3, #16
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	3301      	adds	r3, #1
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800372a:	6a3a      	ldr	r2, [r7, #32]
 800372c:	429a      	cmp	r2, r3
 800372e:	d3c4      	bcc.n	80036ba <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	2b00      	cmp	r3, #0
 8003738:	d021      	beq.n	800377e <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f1c3 0308 	rsb	r3, r3, #8
 8003748:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	9302      	str	r3, [sp, #8]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9cd 2300 	strd	r2, r3, [sp]
 800375a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375c:	69b9      	ldr	r1, [r7, #24]
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f7fe fb68 	bl	8001e34 <nunavutSetUxx>
 8003764:	4603      	mov	r3, r0
 8003766:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003768:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800376c:	2b00      	cmp	r3, #0
 800376e:	da02      	bge.n	8003776 <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 8003770:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003774:	e008      	b.n	8003788 <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377a:	4413      	add	r3, r2
 800377c:	627b      	str	r3, [r7, #36]	@ 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3728      	adds	r7, #40	@ 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	c77fe000 	.word	0xc77fe000
 8003794:	c77fe000 	.word	0xc77fe000
 8003798:	477fe000 	.word	0x477fe000
 800379c:	477fe000 	.word	0x477fe000

080037a0 <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037c6:	f06f 0301 	mvn.w	r3, #1
 80037ca:	e054      	b.n	8003876 <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80037d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 80037d4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3308      	adds	r3, #8
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d309      	bcc.n	8003804 <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	08db      	lsrs	r3, r3, #3
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	4413      	add	r3, r2
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8003802:	e003      	b.n	800380c <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    }
    offset_bits += 8U;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	3308      	adds	r3, #8
 8003810:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003818:	2b80      	cmp	r3, #128	@ 0x80
 800381a:	d902      	bls.n	8003822 <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800381c:	f06f 0309 	mvn.w	r3, #9
 8003820:	e029      	b.n	8003876 <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e012      	b.n	800384e <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	6979      	ldr	r1, [r7, #20]
 800382c:	68b8      	ldr	r0, [r7, #8]
 800382e:	f7fe fc03 	bl	8002038 <nunavutGetF16>
 8003832:	eef0 7a40 	vmov.f32	s15, s0
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3310      	adds	r3, #16
 8003846:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	3301      	adds	r3, #1
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3e6      	bcc.n	8003828 <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3307      	adds	r3, #7
 800385e:	f023 0307 	bic.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003864:	6939      	ldr	r1, [r7, #16]
 8003866:	69f8      	ldr	r0, [r7, #28]
 8003868:	f7fe f9d4 	bl	8001c14 <nunavutChooseMin>
 800386c:	4603      	mov	r3, r0
 800386e:	08da      	lsrs	r2, r3, #3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	080188a0 	.word	0x080188a0

08003884 <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08c      	sub	sp, #48	@ 0x30
 8003888:	af04      	add	r7, sp, #16
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80038a2:	f06f 0301 	mvn.w	r3, #1
 80038a6:	e05f      	b.n	8003968 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	f640 0207 	movw	r2, #2055	@ 0x807
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d802      	bhi.n	80038c0 <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80038ba:	f06f 0302 	mvn.w	r3, #2
 80038be:	e053      	b.n	8003968 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	d902      	bls.n	80038d4 <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80038ce:	f06f 0309 	mvn.w	r3, #9
 80038d2:	e049      	b.n	8003968 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	b2ca      	uxtb	r2, r1
 80038e4:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3308      	adds	r3, #8
 80038ea:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2100      	movs	r1, #0
 80038f8:	9100      	str	r1, [sp, #0]
 80038fa:	69f9      	ldr	r1, [r7, #28]
 80038fc:	68b8      	ldr	r0, [r7, #8]
 80038fe:	f7fe f9b5 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003908:	015b      	lsls	r3, r3, #5
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	2b00      	cmp	r3, #0
 8003918:	d021      	beq.n	800395e <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f1c3 0308 	rsb	r3, r3, #8
 8003928:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	9302      	str	r3, [sp, #8]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9cd 2300 	strd	r2, r3, [sp]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	69b9      	ldr	r1, [r7, #24]
 800393e:	68b8      	ldr	r0, [r7, #8]
 8003940:	f7fe fa78 	bl	8001e34 <nunavutSetUxx>
 8003944:	4603      	mov	r3, r0
 8003946:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003948:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800394c:	2b00      	cmp	r3, #0
 800394e:	da02      	bge.n	8003956 <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003950:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003954:	e008      	b.n	8003968 <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	08da      	lsrs	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	@ 0x28
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003996:	f06f 0301 	mvn.w	r3, #1
 800399a:	e04a      	b.n	8003a32 <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80039a2:	4b26      	ldr	r3, [pc, #152]	@ (8003a3c <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 80039a4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	3308      	adds	r3, #8
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d309      	bcc.n	80039d4 <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	08db      	lsrs	r3, r3, #3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	4413      	add	r3, r2
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80039d2:	e003      	b.n	80039dc <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3308      	adds	r3, #8
 80039e0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039e8:	2b40      	cmp	r3, #64	@ 0x40
 80039ea:	d902      	bls.n	80039f2 <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80039ec:	f06f 0309 	mvn.w	r3, #9
 80039f0:	e01f      	b.n	8003a32 <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	f7fe f9ef 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a0e:	015b      	lsls	r3, r3, #5
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4413      	add	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3307      	adds	r3, #7
 8003a1a:	f023 0307 	bic.w	r3, r3, #7
 8003a1e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003a20:	69b9      	ldr	r1, [r7, #24]
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7fe f8f6 	bl	8001c14 <nunavutChooseMin>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	08da      	lsrs	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	080188a0 	.word	0x080188a0

08003a40 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	@ 0x30
 8003a44:	af04      	add	r7, sp, #16
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003a5e:	f06f 0301 	mvn.w	r3, #1
 8003a62:	e05f      	b.n	8003b24 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	f640 0207 	movw	r2, #2055	@ 0x807
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d802      	bhi.n	8003a7c <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003a76:	f06f 0302 	mvn.w	r3, #2
 8003a7a:	e053      	b.n	8003b24 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d902      	bls.n	8003a90 <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003a8a:	f06f 0309 	mvn.w	r3, #9
 8003a8e:	e049      	b.n	8003b24 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	08db      	lsrs	r3, r3, #3
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	b2ca      	uxtb	r2, r1
 8003aa0:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003aae:	019a      	lsls	r2, r3, #6
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	9100      	str	r1, [sp, #0]
 8003ab6:	69f9      	ldr	r1, [r7, #28]
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f7fe f8d7 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d021      	beq.n	8003b1a <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f1c3 0308 	rsb	r3, r3, #8
 8003ae4:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	9302      	str	r3, [sp, #8]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9cd 2300 	strd	r2, r3, [sp]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	69b9      	ldr	r1, [r7, #24]
 8003afa:	68b8      	ldr	r0, [r7, #8]
 8003afc:	f7fe f99a 	bl	8001e34 <nunavutSetUxx>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003b04:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da02      	bge.n	8003b12 <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003b0c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003b10:	e008      	b.n	8003b24 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	08da      	lsrs	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	@ 0x28
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d006      	beq.n	8003b52 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b52:	f06f 0301 	mvn.w	r3, #1
 8003b56:	e04a      	b.n	8003bee <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003b5e:	4b26      	ldr	r3, [pc, #152]	@ (8003bf8 <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 8003b60:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	3308      	adds	r3, #8
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d309      	bcc.n	8003b90 <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	08db      	lsrs	r3, r3, #3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	4413      	add	r3, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003b8e:	e003      	b.n	8003b98 <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d902      	bls.n	8003bae <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ba8:	f06f 0309 	mvn.w	r3, #9
 8003bac:	e01f      	b.n	8003bee <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003bb6:	019b      	lsls	r3, r3, #6
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	f7fe f911 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003bca:	019b      	lsls	r3, r3, #6
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4413      	add	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	3307      	adds	r3, #7
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
 8003bda:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	6978      	ldr	r0, [r7, #20]
 8003be0:	f7fe f818 	bl	8001c14 <nunavutChooseMin>
 8003be4:	4603      	mov	r3, r0
 8003be6:	08da      	lsrs	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	080188a0 	.word	0x080188a0

08003bfc <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c1a:	f06f 0301 	mvn.w	r3, #1
 8003c1e:	e003      	b.n	8003c28 <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d006      	beq.n	8003c5a <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c5a:	f06f 0301 	mvn.w	r3, #1
 8003c5e:	e008      	b.n	8003c72 <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003c66:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 8003c68:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	080188a0 	.word	0x080188a0

08003c84 <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08c      	sub	sp, #48	@ 0x30
 8003c88:	af04      	add	r7, sp, #16
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <uavcan_primitive_String_1_0_serialize_+0x1e>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <uavcan_primitive_String_1_0_serialize_+0x1e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003ca2:	f06f 0301 	mvn.w	r3, #1
 8003ca6:	e060      	b.n	8003d6a <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003cb6:	d202      	bcs.n	8003cbe <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003cb8:	f06f 0302 	mvn.w	r3, #2
 8003cbc:	e055      	b.n	8003d6a <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ccc:	d902      	bls.n	8003cd4 <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003cce:	f06f 0309 	mvn.w	r3, #9
 8003cd2:	e04a      	b.n	8003d6a <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	08db      	lsrs	r3, r3, #3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	4413      	add	r3, r2
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003ce2:	8812      	ldrh	r2, [r2, #0]
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3310      	adds	r3, #16
 8003cec:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003cf4:	00da      	lsls	r2, r3, #3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	9100      	str	r1, [sp, #0]
 8003cfc:	69f9      	ldr	r1, [r7, #28]
 8003cfe:	68b8      	ldr	r0, [r7, #8]
 8003d00:	f7fd ffb4 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d021      	beq.n	8003d60 <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f1c3 0308 	rsb	r3, r3, #8
 8003d2a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	9302      	str	r3, [sp, #8]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9cd 2300 	strd	r2, r3, [sp]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	69b9      	ldr	r1, [r7, #24]
 8003d40:	68b8      	ldr	r0, [r7, #8]
 8003d42:	f7fe f877 	bl	8001e34 <nunavutSetUxx>
 8003d46:	4603      	mov	r3, r0
 8003d48:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003d4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da02      	bge.n	8003d58 <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003d52:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d56:	e008      	b.n	8003d6a <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	08da      	lsrs	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	@ 0x28
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <uavcan_primitive_String_1_0_deserialize_+0x26>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <uavcan_primitive_String_1_0_deserialize_+0x26>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <uavcan_primitive_String_1_0_deserialize_+0x2c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003d9a:	f06f 0301 	mvn.w	r3, #1
 8003d9e:	e043      	b.n	8003e28 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003da6:	4b22      	ldr	r3, [pc, #136]	@ (8003e30 <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 8003da8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003dba:	2310      	movs	r3, #16
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	69f9      	ldr	r1, [r7, #28]
 8003dc0:	68b8      	ldr	r0, [r7, #8]
 8003dc2:	f7fe f85d 	bl	8001e80 <nunavutGetU16>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3310      	adds	r3, #16
 8003dd4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de0:	d902      	bls.n	8003de8 <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003de2:	f06f 0309 	mvn.w	r3, #9
 8003de6:	e01f      	b.n	8003e28 <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	f7fd fff4 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4413      	add	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3307      	adds	r3, #7
 8003e10:	f023 0307 	bic.w	r3, r3, #7
 8003e14:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003e16:	69b9      	ldr	r1, [r7, #24]
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	f7fd fefb 	bl	8001c14 <nunavutChooseMin>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	08da      	lsrs	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	080188a0 	.word	0x080188a0

08003e34 <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08c      	sub	sp, #48	@ 0x30
 8003e38:	af04      	add	r7, sp, #16
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e52:	f06f 0301 	mvn.w	r3, #1
 8003e56:	e060      	b.n	8003f1a <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003e66:	d202      	bcs.n	8003e6e <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003e68:	f06f 0302 	mvn.w	r3, #2
 8003e6c:	e055      	b.n	8003f1a <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e7c:	d902      	bls.n	8003e84 <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003e7e:	f06f 0309 	mvn.w	r3, #9
 8003e82:	e04a      	b.n	8003f1a <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	08db      	lsrs	r3, r3, #3
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003e92:	8812      	ldrh	r2, [r2, #0]
 8003e94:	b292      	uxth	r2, r2
 8003e96:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	3310      	adds	r3, #16
 8003e9c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ea4:	00da      	lsls	r2, r3, #3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	9100      	str	r1, [sp, #0]
 8003eac:	69f9      	ldr	r1, [r7, #28]
 8003eae:	68b8      	ldr	r0, [r7, #8]
 8003eb0:	f7fd fedc 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d021      	beq.n	8003f10 <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f1c3 0308 	rsb	r3, r3, #8
 8003eda:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	9302      	str	r3, [sp, #8]
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9cd 2300 	strd	r2, r3, [sp]
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	69b9      	ldr	r1, [r7, #24]
 8003ef0:	68b8      	ldr	r0, [r7, #8]
 8003ef2:	f7fd ff9f 	bl	8001e34 <nunavutSetUxx>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003efa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da02      	bge.n	8003f08 <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003f02:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f06:	e008      	b.n	8003f1a <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	@ 0x28
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d006      	beq.n	8003f4a <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003f4a:	f06f 0301 	mvn.w	r3, #1
 8003f4e:	e043      	b.n	8003fd8 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003f56:	4b22      	ldr	r3, [pc, #136]	@ (8003fe0 <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 8003f58:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003f6a:	2310      	movs	r3, #16
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	69f9      	ldr	r1, [r7, #28]
 8003f70:	68b8      	ldr	r0, [r7, #8]
 8003f72:	f7fd ff85 	bl	8001e80 <nunavutGetU16>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3310      	adds	r3, #16
 8003f84:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f90:	d902      	bls.n	8003f98 <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003f92:	f06f 0309 	mvn.w	r3, #9
 8003f96:	e01f      	b.n	8003fd8 <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	f7fd ff1c 	bl	8001de6 <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4413      	add	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	3307      	adds	r3, #7
 8003fc0:	f023 0307 	bic.w	r3, r3, #7
 8003fc4:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	6978      	ldr	r0, [r7, #20]
 8003fca:	f7fd fe23 	bl	8001c14 <nunavutChooseMin>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	08da      	lsrs	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	080188a0 	.word	0x080188a0

08003fe4 <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b09e      	sub	sp, #120	@ 0x78
 8003fe8:	af04      	add	r7, sp, #16
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <uavcan_register_Value_1_0_serialize_+0x1e>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <uavcan_register_Value_1_0_serialize_+0x1e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004002:	f06f 0301 	mvn.w	r3, #1
 8004006:	e248      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	663b      	str	r3, [r7, #96]	@ 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 800400e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	f640 0217 	movw	r2, #2071	@ 0x817
 8004016:	4293      	cmp	r3, r2
 8004018:	d802      	bhi.n	8004020 <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800401a:	f06f 0302 	mvn.w	r3, #2
 800401e:	e23c      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	667b      	str	r3, [r7, #100]	@ 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 8004024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004026:	08db      	lsrs	r3, r3, #3
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4413      	add	r3, r2
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	f892 2208 	ldrb.w	r2, [r2, #520]	@ 0x208
 8004032:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004036:	3308      	adds	r3, #8
 8004038:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004040:	2b00      	cmp	r3, #0
 8004042:	d11b      	bne.n	800407c <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 8004044:	2300      	movs	r3, #0
 8004046:	64bb      	str	r3, [r7, #72]	@ 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8004048:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 800404a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800404c:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4413      	add	r3, r2
 8004052:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004056:	4619      	mov	r1, r3
 8004058:	f7ff fdd0 	bl	8003bfc <uavcan_primitive_Empty_1_0_serialize_>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
        if (_err0_ < 0)
 8004062:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8004066:	2b00      	cmp	r3, #0
 8004068:	da02      	bge.n	8004070 <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 800406a:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 800406e:	e214      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8004070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004076:	4413      	add	r3, r2
 8004078:	667b      	str	r3, [r7, #100]	@ 0x64
 800407a:	e1de      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004082:	2b01      	cmp	r3, #1
 8004084:	d11c      	bne.n	80040c0 <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 8004086:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800408a:	647b      	str	r3, [r7, #68]	@ 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 800408c:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 800408e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004090:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	4413      	add	r3, r2
 8004096:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800409a:	4619      	mov	r1, r3
 800409c:	f7ff fdf2 	bl	8003c84 <uavcan_primitive_String_1_0_serialize_>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        if (_err1_ < 0)
 80040a6:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da02      	bge.n	80040b4 <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 80040ae:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80040b2:	e1f2      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80040b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80040ba:	4413      	add	r3, r2
 80040bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80040be:	e1bc      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d11c      	bne.n	8004104 <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 80040ca:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80040ce:	643b      	str	r3, [r7, #64]	@ 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 80040d0:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 80040d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040d4:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4413      	add	r3, r2
 80040da:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80040de:	4619      	mov	r1, r3
 80040e0:	f7ff fea8 	bl	8003e34 <uavcan_primitive_Unstructured_1_0_serialize_>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if (_err2_ < 0)
 80040ea:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da02      	bge.n	80040f8 <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 80040f2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80040f6:	e1d0      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80040f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80040fe:	4413      	add	r3, r2
 8004100:	667b      	str	r3, [r7, #100]	@ 0x64
 8004102:	e19a      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800410a:	2b03      	cmp	r3, #3
 800410c:	d11c      	bne.n	8004148 <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 800410e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 8004114:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 8004116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004118:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4413      	add	r3, r2
 800411e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004122:	4619      	mov	r1, r3
 8004124:	f7fe fada 	bl	80026dc <uavcan_primitive_array_Bit_1_0_serialize_>
 8004128:	4603      	mov	r3, r0
 800412a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        if (_err3_ < 0)
 800412e:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 8004132:	2b00      	cmp	r3, #0
 8004134:	da02      	bge.n	800413c <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 8004136:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 800413a:	e1ae      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 800413c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004142:	4413      	add	r3, r2
 8004144:	667b      	str	r3, [r7, #100]	@ 0x64
 8004146:	e178      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800414e:	2b04      	cmp	r3, #4
 8004150:	d11c      	bne.n	800418c <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 8004152:	f240 1301 	movw	r3, #257	@ 0x101
 8004156:	63bb      	str	r3, [r7, #56]	@ 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 8004158:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 800415a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800415c:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	4413      	add	r3, r2
 8004162:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004166:	4619      	mov	r1, r3
 8004168:	f7fe fd48 	bl	8002bfc <uavcan_primitive_array_Integer64_1_0_serialize_>
 800416c:	4603      	mov	r3, r0
 800416e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
        if (_err4_ < 0)
 8004172:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8004176:	2b00      	cmp	r3, #0
 8004178:	da02      	bge.n	8004180 <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 800417a:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 800417e:	e18c      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8004180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004186:	4413      	add	r3, r2
 8004188:	667b      	str	r3, [r7, #100]	@ 0x64
 800418a:	e156      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004192:	2b05      	cmp	r3, #5
 8004194:	d11c      	bne.n	80041d0 <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 8004196:	f240 1301 	movw	r3, #257	@ 0x101
 800419a:	637b      	str	r3, [r7, #52]	@ 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 800419c:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 800419e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041a0:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4413      	add	r3, r2
 80041a6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80041aa:	4619      	mov	r1, r3
 80041ac:	f7fe fc48 	bl	8002a40 <uavcan_primitive_array_Integer32_1_0_serialize_>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (_err5_ < 0)
 80041b6:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	da02      	bge.n	80041c4 <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 80041be:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 80041c2:	e16a      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 80041c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041ca:	4413      	add	r3, r2
 80041cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ce:	e134      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d11c      	bne.n	8004214 <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 80041da:	f240 1301 	movw	r3, #257	@ 0x101
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 80041e0:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 80041e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041e4:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80041ee:	4619      	mov	r1, r3
 80041f0:	f7fe fb48 	bl	8002884 <uavcan_primitive_array_Integer16_1_0_serialize_>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if (_err6_ < 0)
 80041fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80041fe:	2b00      	cmp	r3, #0
 8004200:	da02      	bge.n	8004208 <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 8004202:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004206:	e148      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800420e:	4413      	add	r3, r2
 8004210:	667b      	str	r3, [r7, #100]	@ 0x64
 8004212:	e112      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800421a:	2b07      	cmp	r3, #7
 800421c:	d11c      	bne.n	8004258 <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 800421e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004222:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 8004224:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 8004226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004228:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4413      	add	r3, r2
 800422e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004232:	4619      	mov	r1, r3
 8004234:	f7fe fdc0 	bl	8002db8 <uavcan_primitive_array_Integer8_1_0_serialize_>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        if (_err7_ < 0)
 800423e:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8004242:	2b00      	cmp	r3, #0
 8004244:	da02      	bge.n	800424c <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 8004246:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 800424a:	e126      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 800424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004252:	4413      	add	r3, r2
 8004254:	667b      	str	r3, [r7, #100]	@ 0x64
 8004256:	e0f0      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800425e:	2b08      	cmp	r3, #8
 8004260:	d11c      	bne.n	800429c <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 8004262:	f240 1301 	movw	r3, #257	@ 0x101
 8004266:	62bb      	str	r3, [r7, #40]	@ 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8004268:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 800426a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800426c:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4413      	add	r3, r2
 8004272:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004276:	4619      	mov	r1, r3
 8004278:	f7ff f832 	bl	80032e0 <uavcan_primitive_array_Natural64_1_0_serialize_>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
        if (_err8_ < 0)
 8004282:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 8004286:	2b00      	cmp	r3, #0
 8004288:	da02      	bge.n	8004290 <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 800428a:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 800428e:	e104      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 8004290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004296:	4413      	add	r3, r2
 8004298:	667b      	str	r3, [r7, #100]	@ 0x64
 800429a:	e0ce      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80042a2:	2b09      	cmp	r3, #9
 80042a4:	d11c      	bne.n	80042e0 <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 80042a6:	f240 1301 	movw	r3, #257	@ 0x101
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 80042ac:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 80042ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042b0:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4413      	add	r3, r2
 80042b6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80042ba:	4619      	mov	r1, r3
 80042bc:	f7fe ff32 	bl	8003124 <uavcan_primitive_array_Natural32_1_0_serialize_>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
        if (_err9_ < 0)
 80042c6:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	da02      	bge.n	80042d4 <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 80042ce:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 80042d2:	e0e2      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80042da:	4413      	add	r3, r2
 80042dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80042de:	e0ac      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80042e6:	2b0a      	cmp	r3, #10
 80042e8:	d11c      	bne.n	8004324 <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 80042ea:	f240 1301 	movw	r3, #257	@ 0x101
 80042ee:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 80042f0:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 80042f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042f4:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4413      	add	r3, r2
 80042fa:	f107 0220 	add.w	r2, r7, #32
 80042fe:	4619      	mov	r1, r3
 8004300:	f7fe fe32 	bl	8002f68 <uavcan_primitive_array_Natural16_1_0_serialize_>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        if (_err10_ < 0)
 800430a:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 800430e:	2b00      	cmp	r3, #0
 8004310:	da02      	bge.n	8004318 <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 8004312:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 8004316:	e0c0      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800431e:	4413      	add	r3, r2
 8004320:	667b      	str	r3, [r7, #100]	@ 0x64
 8004322:	e08a      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800432a:	2b0b      	cmp	r3, #11
 800432c:	d11c      	bne.n	8004368 <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 800432e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004332:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 8004334:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 8004336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004338:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	4413      	add	r3, r2
 800433e:	f107 021c 	add.w	r2, r7, #28
 8004342:	4619      	mov	r1, r3
 8004344:	f7ff f8aa 	bl	800349c <uavcan_primitive_array_Natural8_1_0_serialize_>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (_err11_ < 0)
 800434e:	f997 305c 	ldrsb.w	r3, [r7, #92]	@ 0x5c
 8004352:	2b00      	cmp	r3, #0
 8004354:	da02      	bge.n	800435c <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 8004356:	f997 305c 	ldrsb.w	r3, [r7, #92]	@ 0x5c
 800435a:	e09e      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004362:	4413      	add	r3, r2
 8004364:	667b      	str	r3, [r7, #100]	@ 0x64
 8004366:	e068      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d11c      	bne.n	80043ac <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 8004372:	f240 1301 	movw	r3, #257	@ 0x101
 8004376:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8004378:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 800437a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800437c:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4413      	add	r3, r2
 8004382:	f107 0218 	add.w	r2, r7, #24
 8004386:	4619      	mov	r1, r3
 8004388:	f7ff fb5a 	bl	8003a40 <uavcan_primitive_array_Real64_1_0_serialize_>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        if (_err12_ < 0)
 8004392:	f997 305d 	ldrsb.w	r3, [r7, #93]	@ 0x5d
 8004396:	2b00      	cmp	r3, #0
 8004398:	da02      	bge.n	80043a0 <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 800439a:	f997 305d 	ldrsb.w	r3, [r7, #93]	@ 0x5d
 800439e:	e07c      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043a6:	4413      	add	r3, r2
 80043a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80043aa:	e046      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80043b2:	2b0d      	cmp	r3, #13
 80043b4:	d11c      	bne.n	80043f0 <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 80043b6:	f240 1301 	movw	r3, #257	@ 0x101
 80043ba:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 80043bc:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 80043be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043c0:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4413      	add	r3, r2
 80043c6:	f107 0214 	add.w	r2, r7, #20
 80043ca:	4619      	mov	r1, r3
 80043cc:	f7ff fa5a 	bl	8003884 <uavcan_primitive_array_Real32_1_0_serialize_>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        if (_err13_ < 0)
 80043d6:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
 80043da:	2b00      	cmp	r3, #0
 80043dc:	da02      	bge.n	80043e4 <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 80043de:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
 80043e2:	e05a      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043ea:	4413      	add	r3, r2
 80043ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80043ee:	e024      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80043f6:	2b0e      	cmp	r3, #14
 80043f8:	d11c      	bne.n	8004434 <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 80043fa:	f240 1301 	movw	r3, #257	@ 0x101
 80043fe:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004400:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 8004402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004404:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	4413      	add	r3, r2
 800440a:	f107 0210 	add.w	r2, r7, #16
 800440e:	4619      	mov	r1, r3
 8004410:	f7ff f91c 	bl	800364c <uavcan_primitive_array_Real16_1_0_serialize_>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        if (_err14_ < 0)
 800441a:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800441e:	2b00      	cmp	r3, #0
 8004420:	da02      	bge.n	8004428 <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 8004422:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8004426:	e038      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800442e:	4413      	add	r3, r2
 8004430:	667b      	str	r3, [r7, #100]	@ 0x64
 8004432:	e002      	b.n	800443a <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8004434:	f06f 030a 	mvn.w	r3, #10
 8004438:	e02f      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800443a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	2b00      	cmp	r3, #0
 8004442:	d025      	beq.n	8004490 <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f1c3 0308 	rsb	r3, r3, #8
 8004452:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004456:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9cd 2300 	strd	r2, r3, [sp]
 8004468:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800446a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800446c:	68b8      	ldr	r0, [r7, #8]
 800446e:	f7fd fce1 	bl	8001e34 <nunavutSetUxx>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        if (_err15_ < 0)
 8004478:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800447c:	2b00      	cmp	r3, #0
 800447e:	da02      	bge.n	8004486 <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 8004480:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004484:	e009      	b.n	800449a <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 8004486:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800448a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800448c:	4413      	add	r3, r2
 800448e:	667b      	str	r3, [r7, #100]	@ 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004492:	08da      	lsrs	r2, r3, #3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3768      	adds	r7, #104	@ 0x68
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b09a      	sub	sp, #104	@ 0x68
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <uavcan_register_Value_1_0_deserialize_+0x26>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d006      	beq.n	80044ca <uavcan_register_Value_1_0_deserialize_+0x26>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <uavcan_register_Value_1_0_deserialize_+0x2c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80044ca:	f06f 0301 	mvn.w	r3, #1
 80044ce:	e29b      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80044d6:	4bb0      	ldr	r3, [pc, #704]	@ (8004798 <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 80044d8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	663b      	str	r3, [r7, #96]	@ 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80044e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    size_t offset_bits = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	667b      	str	r3, [r7, #100]	@ 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80044ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ec:	3308      	adds	r3, #8
 80044ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d308      	bcc.n	8004506 <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 80044f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044f6:	08db      	lsrs	r3, r3, #3
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	4413      	add	r3, r2
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 8004504:	e003      	b.n	800450e <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
    }
    offset_bits += 8U;
 800450e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004510:	3308      	adds	r3, #8
 8004512:	667b      	str	r3, [r7, #100]	@ 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800451a:	2b00      	cmp	r3, #0
 800451c:	d123      	bne.n	8004566 <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800451e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004524:	4618      	mov	r0, r3
 8004526:	f7fd fb75 	bl	8001c14 <nunavutChooseMin>
 800452a:	4602      	mov	r2, r0
 800452c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	64bb      	str	r3, [r7, #72]	@ 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004532:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 8004534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004536:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	4413      	add	r3, r2
 800453c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004540:	4619      	mov	r1, r3
 8004542:	f7ff fb77 	bl	8003c34 <uavcan_primitive_Empty_1_0_deserialize_>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            if (_err16_ < 0)
 800454c:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8004550:	2b00      	cmp	r3, #0
 8004552:	da02      	bge.n	800455a <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 8004554:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8004558:	e256      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 800455a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004560:	4413      	add	r3, r2
 8004562:	667b      	str	r3, [r7, #100]	@ 0x64
 8004564:	e242      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800456c:	2b01      	cmp	r3, #1
 800456e:	d123      	bne.n	80045b8 <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd fb4c 	bl	8001c14 <nunavutChooseMin>
 800457c:	4602      	mov	r2, r0
 800457e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	647b      	str	r3, [r7, #68]	@ 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8004584:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 8004586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004588:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	4413      	add	r3, r2
 800458e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8004592:	4619      	mov	r1, r3
 8004594:	f7ff fbee 	bl	8003d74 <uavcan_primitive_String_1_0_deserialize_>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
            if (_err17_ < 0)
 800459e:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	da02      	bge.n	80045ac <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 80045a6:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 80045aa:	e22d      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 80045ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045b2:	4413      	add	r3, r2
 80045b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80045b6:	e219      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d123      	bne.n	800460a <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80045c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045c4:	08db      	lsrs	r3, r3, #3
 80045c6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fd fb23 	bl	8001c14 <nunavutChooseMin>
 80045ce:	4602      	mov	r2, r0
 80045d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	643b      	str	r3, [r7, #64]	@ 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 80045d6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 80045d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045da:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	4413      	add	r3, r2
 80045e0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80045e4:	4619      	mov	r1, r3
 80045e6:	f7ff fc9d 	bl	8003f24 <uavcan_primitive_Unstructured_1_0_deserialize_>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if (_err18_ < 0)
 80045f0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da02      	bge.n	80045fe <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 80045f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80045fc:	e204      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 80045fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004604:	4413      	add	r3, r2
 8004606:	667b      	str	r3, [r7, #100]	@ 0x64
 8004608:	e1f0      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004610:	2b03      	cmp	r3, #3
 8004612:	d123      	bne.n	800465c <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004616:	08db      	lsrs	r3, r3, #3
 8004618:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fafa 	bl	8001c14 <nunavutChooseMin>
 8004620:	4602      	mov	r2, r0
 8004622:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	63fb      	str	r3, [r7, #60]	@ 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 8004628:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 800462a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800462c:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	4413      	add	r3, r2
 8004632:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004636:	4619      	mov	r1, r3
 8004638:	f7fe f8c6 	bl	80027c8 <uavcan_primitive_array_Bit_1_0_deserialize_>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
            if (_err19_ < 0)
 8004642:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8004646:	2b00      	cmp	r3, #0
 8004648:	da02      	bge.n	8004650 <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 800464a:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 800464e:	e1db      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 8004650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004656:	4413      	add	r3, r2
 8004658:	667b      	str	r3, [r7, #100]	@ 0x64
 800465a:	e1c7      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004662:	2b04      	cmp	r3, #4
 8004664:	d123      	bne.n	80046ae <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004668:	08db      	lsrs	r3, r3, #3
 800466a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800466c:	4618      	mov	r0, r3
 800466e:	f7fd fad1 	bl	8001c14 <nunavutChooseMin>
 8004672:	4602      	mov	r2, r0
 8004674:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	63bb      	str	r3, [r7, #56]	@ 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 800467a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 800467c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800467e:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	4413      	add	r3, r2
 8004684:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004688:	4619      	mov	r1, r3
 800468a:	f7fe fb2d 	bl	8002ce8 <uavcan_primitive_array_Integer64_1_0_deserialize_>
 800468e:	4603      	mov	r3, r0
 8004690:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
            if (_err20_ < 0)
 8004694:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8004698:	2b00      	cmp	r3, #0
 800469a:	da02      	bge.n	80046a2 <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 800469c:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 80046a0:	e1b2      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 80046a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046a8:	4413      	add	r3, r2
 80046aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80046ac:	e19e      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80046b4:	2b05      	cmp	r3, #5
 80046b6:	d123      	bne.n	8004700 <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80046b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ba:	08db      	lsrs	r3, r3, #3
 80046bc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fd faa8 	bl	8001c14 <nunavutChooseMin>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 80046cc:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 80046ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046d0:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	4413      	add	r3, r2
 80046d6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80046da:	4619      	mov	r1, r3
 80046dc:	f7fe fa26 	bl	8002b2c <uavcan_primitive_array_Integer32_1_0_deserialize_>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (_err21_ < 0)
 80046e6:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	da02      	bge.n	80046f4 <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 80046ee:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80046f2:	e189      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 80046f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046fa:	4413      	add	r3, r2
 80046fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80046fe:	e175      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004706:	2b06      	cmp	r3, #6
 8004708:	d123      	bne.n	8004752 <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800470a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004710:	4618      	mov	r0, r3
 8004712:	f7fd fa7f 	bl	8001c14 <nunavutChooseMin>
 8004716:	4602      	mov	r2, r0
 8004718:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	633b      	str	r3, [r7, #48]	@ 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 800471e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 8004720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004722:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	4413      	add	r3, r2
 8004728:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800472c:	4619      	mov	r1, r3
 800472e:	f7fe f91f 	bl	8002970 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 8004732:	4603      	mov	r3, r0
 8004734:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            if (_err22_ < 0)
 8004738:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800473c:	2b00      	cmp	r3, #0
 800473e:	da02      	bge.n	8004746 <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 8004740:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004744:	e160      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800474c:	4413      	add	r3, r2
 800474e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004750:	e14c      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004758:	2b07      	cmp	r3, #7
 800475a:	d125      	bne.n	80047a8 <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800475c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800475e:	08db      	lsrs	r3, r3, #3
 8004760:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004762:	4618      	mov	r0, r3
 8004764:	f7fd fa56 	bl	8001c14 <nunavutChooseMin>
 8004768:	4602      	mov	r2, r0
 800476a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004770:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 8004772:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004774:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4413      	add	r3, r2
 800477a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800477e:	4619      	mov	r1, r3
 8004780:	f7fe fb92 	bl	8002ea8 <uavcan_primitive_array_Integer8_1_0_deserialize_>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            if (_err23_ < 0)
 800478a:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 800478e:	2b00      	cmp	r3, #0
 8004790:	da04      	bge.n	800479c <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 8004792:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 8004796:	e137      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
 8004798:	080188a0 	.word	0x080188a0
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 800479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047a2:	4413      	add	r3, r2
 80047a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80047a6:	e121      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d123      	bne.n	80047fa <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80047b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047b4:	08db      	lsrs	r3, r3, #3
 80047b6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fd fa2b 	bl	8001c14 <nunavutChooseMin>
 80047be:	4602      	mov	r2, r0
 80047c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	62bb      	str	r3, [r7, #40]	@ 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 80047c6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 80047c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ca:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	4413      	add	r3, r2
 80047d0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80047d4:	4619      	mov	r1, r3
 80047d6:	f7fe fdf9 	bl	80033cc <uavcan_primitive_array_Natural64_1_0_deserialize_>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            if (_err24_ < 0)
 80047e0:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da02      	bge.n	80047ee <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 80047e8:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 80047ec:	e10c      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 80047ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047f4:	4413      	add	r3, r2
 80047f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80047f8:	e0f8      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004800:	2b09      	cmp	r3, #9
 8004802:	d123      	bne.n	800484c <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004806:	08db      	lsrs	r3, r3, #3
 8004808:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800480a:	4618      	mov	r0, r3
 800480c:	f7fd fa02 	bl	8001c14 <nunavutChooseMin>
 8004810:	4602      	mov	r2, r0
 8004812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	627b      	str	r3, [r7, #36]	@ 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 8004818:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 800481a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800481c:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4413      	add	r3, r2
 8004822:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004826:	4619      	mov	r1, r3
 8004828:	f7fe fcf2 	bl	8003210 <uavcan_primitive_array_Natural32_1_0_deserialize_>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
            if (_err25_ < 0)
 8004832:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8004836:	2b00      	cmp	r3, #0
 8004838:	da02      	bge.n	8004840 <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 800483a:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 800483e:	e0e3      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004846:	4413      	add	r3, r2
 8004848:	667b      	str	r3, [r7, #100]	@ 0x64
 800484a:	e0cf      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004852:	2b0a      	cmp	r3, #10
 8004854:	d123      	bne.n	800489e <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004858:	08db      	lsrs	r3, r3, #3
 800485a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800485c:	4618      	mov	r0, r3
 800485e:	f7fd f9d9 	bl	8001c14 <nunavutChooseMin>
 8004862:	4602      	mov	r2, r0
 8004864:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 800486a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 800486c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800486e:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	4413      	add	r3, r2
 8004874:	f107 0220 	add.w	r2, r7, #32
 8004878:	4619      	mov	r1, r3
 800487a:	f7fe fbeb 	bl	8003054 <uavcan_primitive_array_Natural16_1_0_deserialize_>
 800487e:	4603      	mov	r3, r0
 8004880:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            if (_err26_ < 0)
 8004884:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004888:	2b00      	cmp	r3, #0
 800488a:	da02      	bge.n	8004892 <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 800488c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004890:	e0ba      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004898:	4413      	add	r3, r2
 800489a:	667b      	str	r3, [r7, #100]	@ 0x64
 800489c:	e0a6      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80048a4:	2b0b      	cmp	r3, #11
 80048a6:	d123      	bne.n	80048f0 <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80048a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048aa:	08db      	lsrs	r3, r3, #3
 80048ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd f9b0 	bl	8001c14 <nunavutChooseMin>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 80048bc:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 80048be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048c0:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	4413      	add	r3, r2
 80048c6:	f107 021c 	add.w	r2, r7, #28
 80048ca:	4619      	mov	r1, r3
 80048cc:	f7fe fe5e 	bl	800358c <uavcan_primitive_array_Natural8_1_0_deserialize_>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            if (_err27_ < 0)
 80048d6:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da02      	bge.n	80048e4 <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 80048de:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80048e2:	e091      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80048ea:	4413      	add	r3, r2
 80048ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ee:	e07d      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d123      	bne.n	8004942 <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80048fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004900:	4618      	mov	r0, r3
 8004902:	f7fd f987 	bl	8001c14 <nunavutChooseMin>
 8004906:	4602      	mov	r2, r0
 8004908:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 800490e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 8004910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004912:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	4413      	add	r3, r2
 8004918:	f107 0218 	add.w	r2, r7, #24
 800491c:	4619      	mov	r1, r3
 800491e:	f7ff f905 	bl	8003b2c <uavcan_primitive_array_Real64_1_0_deserialize_>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
            if (_err28_ < 0)
 8004928:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 800492c:	2b00      	cmp	r3, #0
 800492e:	da02      	bge.n	8004936 <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 8004930:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 8004934:	e068      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800493c:	4413      	add	r3, r2
 800493e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004940:	e054      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8004948:	2b0d      	cmp	r3, #13
 800494a:	d123      	bne.n	8004994 <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800494c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800494e:	08db      	lsrs	r3, r3, #3
 8004950:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd f95e 	bl	8001c14 <nunavutChooseMin>
 8004958:	4602      	mov	r2, r0
 800495a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8004960:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 8004962:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004964:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	4413      	add	r3, r2
 800496a:	f107 0214 	add.w	r2, r7, #20
 800496e:	4619      	mov	r1, r3
 8004970:	f7fe fffe 	bl	8003970 <uavcan_primitive_array_Real32_1_0_deserialize_>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
            if (_err29_ < 0)
 800497a:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 800497e:	2b00      	cmp	r3, #0
 8004980:	da02      	bge.n	8004988 <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 8004982:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 8004986:	e03f      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800498e:	4413      	add	r3, r2
 8004990:	667b      	str	r3, [r7, #100]	@ 0x64
 8004992:	e02b      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800499a:	2b0e      	cmp	r3, #14
 800499c:	d123      	bne.n	80049e6 <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800499e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a0:	08db      	lsrs	r3, r3, #3
 80049a2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fd f935 	bl	8001c14 <nunavutChooseMin>
 80049aa:	4602      	mov	r2, r0
 80049ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 80049b2:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 80049b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049b6:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	4413      	add	r3, r2
 80049bc:	f107 0210 	add.w	r2, r7, #16
 80049c0:	4619      	mov	r1, r3
 80049c2:	f7fe feed 	bl	80037a0 <uavcan_primitive_array_Real16_1_0_deserialize_>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
            if (_err30_ < 0)
 80049cc:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da02      	bge.n	80049da <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 80049d4:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 80049d8:	e016      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80049e0:	4413      	add	r3, r2
 80049e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80049e4:	e002      	b.n	80049ec <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 80049e6:	f06f 030a 	mvn.w	r3, #10
 80049ea:	e00d      	b.n	8004a08 <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80049ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ee:	3307      	adds	r3, #7
 80049f0:	f023 0307 	bic.w	r3, r3, #7
 80049f4:	667b      	str	r3, [r7, #100]	@ 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80049f6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80049f8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80049fa:	f7fd f90b 	bl	8001c14 <nunavutChooseMin>
 80049fe:	4603      	mov	r3, r0
 8004a00:	08da      	lsrs	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3768      	adds	r7, #104	@ 0x68
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08c      	sub	sp, #48	@ 0x30
 8004a14:	af04      	add	r7, sp, #16
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004a2e:	f06f 0301 	mvn.w	r3, #1
 8004a32:	e043      	b.n	8004abc <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	2b37      	cmp	r3, #55	@ 0x37
 8004a40:	d802      	bhi.n	8004a48 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004a42:	f06f 0302 	mvn.w	r3, #2
 8004a46:	e039      	b.n	8004abc <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	08db      	lsrs	r3, r3, #3
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	4413      	add	r3, r2
 8004a54:	68f9      	ldr	r1, [r7, #12]
 8004a56:	2207      	movs	r2, #7
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f00f fef0 	bl	801483e <memmove>
        offset_bits += 56U;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3338      	adds	r3, #56	@ 0x38
 8004a62:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d021      	beq.n	8004ab2 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f1c3 0308 	rsb	r3, r3, #8
 8004a7c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	9302      	str	r3, [sp, #8]
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9cd 2300 	strd	r2, r3, [sp]
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	69b9      	ldr	r1, [r7, #24]
 8004a92:	68b8      	ldr	r0, [r7, #8]
 8004a94:	f7fd f9ce 	bl	8001e34 <nunavutSetUxx>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004a9c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	da02      	bge.n	8004aaa <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 8004aa4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004aa8:	e008      	b.n	8004abc <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	08da      	lsrs	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08a      	sub	sp, #40	@ 0x28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d006      	beq.n	8004aea <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004aea:	f06f 0301 	mvn.w	r3, #1
 8004aee:	e065      	b.n	8004bbc <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004af6:	4b33      	ldr	r3, [pc, #204]	@ (8004bc4 <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 8004af8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	08db      	lsrs	r3, r3, #3
 8004b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fd f87f 	bl	8001c14 <nunavutChooseMin>
 8004b16:	4602      	mov	r2, r0
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8004b1e:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	4413      	add	r3, r2
 8004b28:	f107 0214 	add.w	r2, r7, #20
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f7fd fd6d 	bl	800260c <uavcan_register_Name_1_0_deserialize_>
 8004b32:	4603      	mov	r3, r0
 8004b34:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8004b36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	da02      	bge.n	8004b44 <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 8004b3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004b42:	e03b      	b.n	8004bbc <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3307      	adds	r3, #7
 8004b52:	f023 0307 	bic.w	r3, r3, #7
 8004b56:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	08db      	lsrs	r3, r3, #3
 8004b5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fd f858 	bl	8001c14 <nunavutChooseMin>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 7084 	add.w	r0, r3, #264	@ 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f107 0210 	add.w	r2, r7, #16
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f7ff fc90 	bl	80044a4 <uavcan_register_Value_1_0_deserialize_>
 8004b84:	4603      	mov	r3, r0
 8004b86:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 8004b88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	da02      	bge.n	8004b96 <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 8004b90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004b94:	e012      	b.n	8004bbc <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	3307      	adds	r3, #7
 8004ba4:	f023 0307 	bic.w	r3, r3, #7
 8004ba8:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004baa:	6a39      	ldr	r1, [r7, #32]
 8004bac:	69f8      	ldr	r0, [r7, #28]
 8004bae:	f7fd f831 	bl	8001c14 <nunavutChooseMin>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	08da      	lsrs	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3728      	adds	r7, #40	@ 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	080188a0 	.word	0x080188a0

08004bc8 <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08e      	sub	sp, #56	@ 0x38
 8004bcc:	af04      	add	r7, sp, #16
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004be6:	f06f 0301 	mvn.w	r3, #1
 8004bea:	e0f0      	b.n	8004dce <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	f640 0257 	movw	r2, #2135	@ 0x857
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d802      	bhi.n	8004c04 <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004bfe:	f06f 0302 	mvn.w	r3, #2
 8004c02:	e0e4      	b.n	8004dce <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 8004c08:	2307      	movs	r3, #7
 8004c0a:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8004c0c:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4413      	add	r3, r2
 8004c16:	f107 0214 	add.w	r2, r7, #20
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f7ff fef8 	bl	8004a10 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 8004c20:	4603      	mov	r3, r0
 8004c22:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 8004c24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	da02      	bge.n	8004c32 <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 8004c2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c30:	e0cd      	b.n	8004dce <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c38:	4413      	add	r3, r2
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	7a1b      	ldrb	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <uavcan_register_Access_Response_1_0_serialize_+0x80>
 8004c44:	2101      	movs	r1, #1
 8004c46:	e000      	b.n	8004c4a <uavcan_register_Access_Response_1_0_serialize_+0x82>
 8004c48:	2100      	movs	r1, #0
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	08db      	lsrs	r3, r3, #3
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4413      	add	r3, r2
 8004c52:	460a      	mov	r2, r1
 8004c54:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	3301      	adds	r3, #1
 8004c5a:	627b      	str	r3, [r7, #36]	@ 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	7a5b      	ldrb	r3, [r3, #9]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 8004c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c66:	08db      	lsrs	r3, r3, #3
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	7819      	ldrb	r1, [r3, #0]
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	2201      	movs	r2, #1
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	08db      	lsrs	r3, r3, #3
 8004c80:	68b8      	ldr	r0, [r7, #8]
 8004c82:	4403      	add	r3, r0
 8004c84:	430a      	orrs	r2, r1
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e014      	b.n	8004cb6 <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	08db      	lsrs	r3, r3, #3
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	4413      	add	r3, r2
 8004c94:	7819      	ldrb	r1, [r3, #0]
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	08db      	lsrs	r3, r3, #3
 8004cac:	68b8      	ldr	r0, [r7, #8]
 8004cae:	4403      	add	r3, r0
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	3301      	adds	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8004cbc:	2306      	movs	r3, #6
 8004cbe:	9302      	str	r3, [sp, #8]
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9cd 2300 	strd	r2, r3, [sp]
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cce:	6a39      	ldr	r1, [r7, #32]
 8004cd0:	68b8      	ldr	r0, [r7, #8]
 8004cd2:	f7fd f8af 	bl	8001e34 <nunavutSetUxx>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 8004cda:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	da02      	bge.n	8004ce8 <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 8004ce2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004ce6:	e072      	b.n	8004dce <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	3306      	adds	r3, #6
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d021      	beq.n	8004d3c <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f1c3 0308 	rsb	r3, r3, #8
 8004d06:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8004d08:	7f7b      	ldrb	r3, [r7, #29]
 8004d0a:	9302      	str	r3, [sp, #8]
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	e9cd 2300 	strd	r2, r3, [sp]
 8004d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d1a:	6a39      	ldr	r1, [r7, #32]
 8004d1c:	68b8      	ldr	r0, [r7, #8]
 8004d1e:	f7fd f889 	bl	8001e34 <nunavutSetUxx>
 8004d22:	4603      	mov	r3, r0
 8004d24:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 8004d26:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	da02      	bge.n	8004d34 <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 8004d2e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004d32:	e04c      	b.n	8004dce <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 8004d34:	7f7b      	ldrb	r3, [r7, #29]
 8004d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d38:	4413      	add	r3, r2
 8004d3a:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8004d3c:	f240 1303 	movw	r3, #259	@ 0x103
 8004d40:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f107 0210 	add.w	r2, r7, #16
 8004d54:	4619      	mov	r1, r3
 8004d56:	f7ff f945 	bl	8003fe4 <uavcan_register_Value_1_0_serialize_>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 8004d5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da02      	bge.n	8004d6c <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 8004d66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004d6a:	e030      	b.n	8004dce <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d72:	4413      	add	r3, r2
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d021      	beq.n	8004dc4 <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f1c3 0308 	rsb	r3, r3, #8
 8004d8e:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 8004d90:	7ebb      	ldrb	r3, [r7, #26]
 8004d92:	9302      	str	r3, [sp, #8]
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9cd 2300 	strd	r2, r3, [sp]
 8004da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da2:	6a39      	ldr	r1, [r7, #32]
 8004da4:	68b8      	ldr	r0, [r7, #8]
 8004da6:	f7fd f845 	bl	8001e34 <nunavutSetUxx>
 8004daa:	4603      	mov	r3, r0
 8004dac:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 8004dae:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	da02      	bge.n	8004dbc <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 8004db6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8004dba:	e008      	b.n	8004dce <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 8004dbc:	7ebb      	ldrb	r3, [r7, #26]
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc0:	4413      	add	r3, r2
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	08da      	lsrs	r2, r3, #3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3728      	adds	r7, #40	@ 0x28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b08c      	sub	sp, #48	@ 0x30
 8004dda:	af04      	add	r7, sp, #16
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <uavcan_node_Version_1_0_serialize_+0x1e>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <uavcan_node_Version_1_0_serialize_+0x1e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <uavcan_node_Version_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004df4:	f06f 0301 	mvn.w	r3, #1
 8004df8:	e04b      	b.n	8004e92 <uavcan_node_Version_1_0_serialize_+0xbc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	2b0f      	cmp	r3, #15
 8004e06:	d802      	bhi.n	8004e0e <uavcan_node_Version_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004e08:	f06f 0302 	mvn.w	r3, #2
 8004e0c:	e041      	b.n	8004e92 <uavcan_node_Version_1_0_serialize_+0xbc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	08db      	lsrs	r3, r3, #3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4413      	add	r3, r2
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	7812      	ldrb	r2, [r2, #0]
 8004e1e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	3308      	adds	r3, #8
 8004e24:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	08db      	lsrs	r3, r3, #3
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	7852      	ldrb	r2, [r2, #1]
 8004e32:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	3308      	adds	r3, #8
 8004e38:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d021      	beq.n	8004e88 <uavcan_node_Version_1_0_serialize_+0xb2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f1c3 0308 	rsb	r3, r3, #8
 8004e52:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	9302      	str	r3, [sp, #8]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9cd 2300 	strd	r2, r3, [sp]
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	69b9      	ldr	r1, [r7, #24]
 8004e68:	68b8      	ldr	r0, [r7, #8]
 8004e6a:	f7fc ffe3 	bl	8001e34 <nunavutSetUxx>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004e72:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	da02      	bge.n	8004e80 <uavcan_node_Version_1_0_serialize_+0xaa>
        {
            return _err0_;
 8004e7a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004e7e:	e008      	b.n	8004e92 <uavcan_node_Version_1_0_serialize_+0xbc>
        }
        offset_bits += _pad0_;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 16ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	08da      	lsrs	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d006      	beq.n	8004ec2 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004ec2:	f06f 0301 	mvn.w	r3, #1
 8004ec6:	e008      	b.n	8004eda <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004ece:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8004ed0:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	080188a0 	.word	0x080188a0

08004eec <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b090      	sub	sp, #64	@ 0x40
 8004ef0:	af04      	add	r7, sp, #16
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <uavcan_node_GetInfo_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004f0a:	f06f 0301 	mvn.w	r3, #1
 8004f0e:	e16b      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	62bb      	str	r3, [r7, #40]	@ 0x28
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 8004f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	f640 12c7 	movw	r2, #2503	@ 0x9c7
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d802      	bhi.n	8004f28 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004f22:	f06f 0302 	mvn.w	r3, #2
 8004f26:	e15f      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8004f30:	68f8      	ldr	r0, [r7, #12]
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 8004f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f34:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f107 0218 	add.w	r2, r7, #24
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f7ff ff49 	bl	8004dd6 <uavcan_node_Version_1_0_serialize_>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (_err0_ < 0)
 8004f4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	da02      	bge.n	8004f58 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6c>
        {
            return _err0_;
 8004f52:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004f56:	e147      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f5e:	4413      	add	r3, r2
 8004f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d025      	beq.n	8004fb8 <uavcan_node_GetInfo_Response_1_0_serialize_+0xcc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f1c3 0308 	rsb	r3, r3, #8
 8004f7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004f7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f82:	9302      	str	r3, [sp, #8]
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9cd 2300 	strd	r2, r3, [sp]
 8004f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f94:	68b8      	ldr	r0, [r7, #8]
 8004f96:	f7fc ff4d 	bl	8001e34 <nunavutSetUxx>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (_err1_ < 0)
 8004fa0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da02      	bge.n	8004fae <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
        {
            return _err1_;
 8004fa8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8004fac:	e11c      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad0_;
 8004fae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb4:	4413      	add	r3, r2
 8004fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 8004fb8:	2302      	movs	r3, #2
 8004fba:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 8004fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc2:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f107 0214 	add.w	r2, r7, #20
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f7ff ff02 	bl	8004dd6 <uavcan_node_Version_1_0_serialize_>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (_err2_ < 0)
 8004fd8:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da02      	bge.n	8004fe6 <uavcan_node_GetInfo_Response_1_0_serialize_+0xfa>
        {
            return _err2_;
 8004fe0:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8004fe4:	e100      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fec:	4413      	add	r3, r2
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d025      	beq.n	8005046 <uavcan_node_GetInfo_Response_1_0_serialize_+0x15a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8004ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f1c3 0308 	rsb	r3, r3, #8
 8005008:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800500c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9cd 2300 	strd	r2, r3, [sp]
 800501e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005022:	68b8      	ldr	r0, [r7, #8]
 8005024:	f7fc ff06 	bl	8001e34 <nunavutSetUxx>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err3_ < 0)
 800502e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8005032:	2b00      	cmp	r3, #0
 8005034:	da02      	bge.n	800503c <uavcan_node_GetInfo_Response_1_0_serialize_+0x150>
        {
            return _err3_;
 8005036:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800503a:	e0d5      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad1_;
 800503c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005042:	4413      	add	r3, r2
 8005044:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 8005046:	2302      	movs	r3, #2
 8005048:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005050:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4413      	add	r3, r2
 8005056:	f107 0210 	add.w	r2, r7, #16
 800505a:	4619      	mov	r1, r3
 800505c:	f7ff febb 	bl	8004dd6 <uavcan_node_Version_1_0_serialize_>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err4_ < 0)
 8005066:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800506a:	2b00      	cmp	r3, #0
 800506c:	da02      	bge.n	8005074 <uavcan_node_GetInfo_Response_1_0_serialize_+0x188>
        {
            return _err4_;
 800506e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8005072:	e0b9      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800507a:	4413      	add	r3, r2
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 800507e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	18d0      	adds	r0, r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3308      	adds	r3, #8
 800508a:	2208      	movs	r2, #8
 800508c:	4619      	mov	r1, r3
 800508e:	f00f fbd6 	bl	801483e <memmove>
        offset_bits += 64U;
 8005092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005094:	3340      	adds	r3, #64	@ 0x40
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3310      	adds	r3, #16
 800509c:	2200      	movs	r2, #0
 800509e:	9200      	str	r2, [sp, #0]
 80050a0:	2280      	movs	r2, #128	@ 0x80
 80050a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050a4:	68b8      	ldr	r0, [r7, #8]
 80050a6:	f7fc fde1 	bl	8001c6c <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 80050aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ac:	3380      	adds	r3, #128	@ 0x80
 80050ae:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
        if (obj->name.count > 50)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b4:	2b32      	cmp	r3, #50	@ 0x32
 80050b6:	d902      	bls.n	80050be <uavcan_node_GetInfo_Response_1_0_serialize_+0x1d2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80050b8:	f06f 0309 	mvn.w	r3, #9
 80050bc:	e094      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80050c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c4:	08db      	lsrs	r3, r3, #3
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	4413      	add	r3, r2
 80050ca:	b2ca      	uxtb	r2, r1
 80050cc:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80050ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d0:	3308      	adds	r3, #8
 80050d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d8:	00da      	lsls	r2, r3, #3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3320      	adds	r3, #32
 80050de:	2100      	movs	r1, #0
 80050e0:	9100      	str	r1, [sp, #0]
 80050e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e4:	68b8      	ldr	r0, [r7, #8]
 80050e6:	f7fc fdc1 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050f2:	4413      	add	r3, r2
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
        if (obj->software_image_crc.count > 1)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d902      	bls.n	8005104 <uavcan_node_GetInfo_Response_1_0_serialize_+0x218>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80050fe:	f06f 0309 	mvn.w	r3, #9
 8005102:	e071      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	08db      	lsrs	r3, r3, #3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	4413      	add	r3, r2
 8005110:	b2ca      	uxtb	r2, r1
 8005112:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005116:	3308      	adds	r3, #8
 8005118:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511e:	019a      	lsls	r2, r3, #6
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3358      	adds	r3, #88	@ 0x58
 8005124:	2100      	movs	r1, #0
 8005126:	9100      	str	r1, [sp, #0]
 8005128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800512a:	68b8      	ldr	r0, [r7, #8]
 800512c:	f7fc fd9e 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005134:	019b      	lsls	r3, r3, #6
 8005136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005138:	4413      	add	r3, r2
 800513a:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
        if (obj->certificate_of_authenticity.count > 222)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005142:	2bde      	cmp	r3, #222	@ 0xde
 8005144:	d902      	bls.n	800514c <uavcan_node_GetInfo_Response_1_0_serialize_+0x260>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005146:	f06f 0309 	mvn.w	r3, #9
 800514a:	e04d      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8d3 1148 	ldr.w	r1, [r3, #328]	@ 0x148
 8005152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005154:	08db      	lsrs	r3, r3, #3
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	4413      	add	r3, r2
 800515a:	b2ca      	uxtb	r2, r1
 800515c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800515e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005160:	3308      	adds	r3, #8
 8005162:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800516a:	00da      	lsls	r2, r3, #3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3368      	adds	r3, #104	@ 0x68
 8005170:	2100      	movs	r1, #0
 8005172:	9100      	str	r1, [sp, #0]
 8005174:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f7fc fd78 	bl	8001c6c <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005186:	4413      	add	r3, r2
 8005188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800518a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	2b00      	cmp	r3, #0
 8005192:	d024      	beq.n	80051de <uavcan_node_GetInfo_Response_1_0_serialize_+0x2f2>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f1c3 0308 	rsb	r3, r3, #8
 80051a2:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80051a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051aa:	9302      	str	r3, [sp, #8]
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9cd 2300 	strd	r2, r3, [sp]
 80051b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051bc:	68b8      	ldr	r0, [r7, #8]
 80051be:	f7fc fe39 	bl	8001e34 <nunavutSetUxx>
 80051c2:	4603      	mov	r3, r0
 80051c4:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 80051c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da02      	bge.n	80051d4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2e8>
        {
            return _err5_;
 80051ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80051d2:	e009      	b.n	80051e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad2_;
 80051d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051da:	4413      	add	r3, r2
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    NUNAVUT_ASSERT(offset_bits >= 264ULL);
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80051de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e0:	08da      	lsrs	r2, r3, #3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3730      	adds	r7, #48	@ 0x30
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fadd 	bl	80067bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
      { }
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
 800522c:	f003 fc27 	bl	8008a7e <Error_Handler>
 8005230:	bf00      	nop
 8005232:	bd80      	pop	{r7, pc}

08005234 <micros_64>:
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8005234:	b5b0      	push	{r4, r5, r7, lr}
 8005236:	af00      	add	r7, sp, #0
 8005238:	f004 ff18 	bl	800a06c <HAL_GetTick>
 800523c:	4603      	mov	r3, r0
 800523e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	2200      	movs	r2, #0
 8005248:	461c      	mov	r4, r3
 800524a:	4615      	mov	r5, r2
 800524c:	4622      	mov	r2, r4
 800524e:	462b      	mov	r3, r5
 8005250:	4610      	mov	r0, r2
 8005252:	4619      	mov	r1, r3
 8005254:	bdb0      	pop	{r4, r5, r7, pc}

08005256 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f001 fb14 	bl	80068a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ffdf 	bl	8005256 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff ff9f 	bl	80051f0 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 80052c6:	687c      	ldr	r4, [r7, #4]
 80052c8:	f107 0308 	add.w	r3, r7, #8
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff ffd7 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80052d4:	f107 0308 	add.w	r3, r7, #8
 80052d8:	f641 5255 	movw	r2, #7509	@ 0x1d55
 80052dc:	4619      	mov	r1, r3
 80052de:	4620      	mov	r0, r4
 80052e0:	f001 faf5 	bl	80068ce <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 80052e4:	f107 0308 	add.w	r3, r7, #8
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff ffda 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80052ee:	4a04      	ldr	r2, [pc, #16]	@ (8005300 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd90      	pop	{r4, r7, pc}
 80052fe:	bf00      	nop
 8005300:	08018928 	.word	0x08018928

08005304 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {}
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

static float Kd = 0;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 800531c:	b590      	push	{r4, r7, lr}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 8005326:	687c      	ldr	r4, [r7, #4]
 8005328:	f107 0308 	add.w	r3, r7, #8
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ffa7 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005334:	f107 0308 	add.w	r3, r7, #8
 8005338:	f240 4266 	movw	r2, #1126	@ 0x466
 800533c:	4619      	mov	r1, r3
 800533e:	4620      	mov	r0, r4
 8005340:	f001 fae3 	bl	800690a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8005344:	f107 0308 	add.w	r3, r7, #8
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff ffaa 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800534e:	4a04      	ldr	r2, [pc, #16]	@ (8005360 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}
 800535e:	bf00      	nop
 8005360:	08018908 	.word	0x08018908
 8005364:	00000000 	.word	0x00000000

08005368 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
    {

    	vel_moveit = js_in.angular_velocity.radian_per_second;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a51      	ldr	r2, [pc, #324]	@ (80054c0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x158>)
 800537a:	6013      	str	r3, [r2, #0]
    	pos_moveit = js_in.angular_position.radian;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a50      	ldr	r2, [pc, #320]	@ (80054c4 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x15c>)
 8005382:	6013      	str	r3, [r2, #0]
    	pos_actual = steps_to_rads(tmc5160_position_read(), jc.full_steps);
 8005384:	f004 fa3e 	bl	8009804 <tmc5160_position_read>
 8005388:	4603      	mov	r3, r0
 800538a:	4a4f      	ldr	r2, [pc, #316]	@ (80054c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 800538c:	6852      	ldr	r2, [r2, #4]
 800538e:	4611      	mov	r1, r2
 8005390:	4618      	mov	r0, r3
 8005392:	f004 fd7d 	bl	8009e90 <steps_to_rads>
 8005396:	eef0 7a40 	vmov.f32	s15, s0
 800539a:	4b4c      	ldr	r3, [pc, #304]	@ (80054cc <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x164>)
 800539c:	edc3 7a00 	vstr	s15, [r3]
    	vel_actual = steps_to_rads(tmc5160_velocity_read(), jc.full_steps);
 80053a0:	f004 fa6a 	bl	8009878 <tmc5160_velocity_read>
 80053a4:	4603      	mov	r3, r0
 80053a6:	4a48      	ldr	r2, [pc, #288]	@ (80054c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 80053a8:	6852      	ldr	r2, [r2, #4]
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f004 fd6f 	bl	8009e90 <steps_to_rads>
 80053b2:	eef0 7a40 	vmov.f32	s15, s0
 80053b6:	4b46      	ldr	r3, [pc, #280]	@ (80054d0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x168>)
 80053b8:	edc3 7a00 	vstr	s15, [r3]

    	pos_set = steps_to_rads(rad_to_steps(js_in.angular_position.radian, jc.full_steps), jc.full_steps);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	edd3 7a00 	vldr	s15, [r3]
 80053c2:	4b41      	ldr	r3, [pc, #260]	@ (80054c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4618      	mov	r0, r3
 80053c8:	eeb0 0a67 	vmov.f32	s0, s15
 80053cc:	f004 fd94 	bl	8009ef8 <rad_to_steps>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4a3d      	ldr	r2, [pc, #244]	@ (80054c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 80053d4:	6852      	ldr	r2, [r2, #4]
 80053d6:	4611      	mov	r1, r2
 80053d8:	4618      	mov	r0, r3
 80053da:	f004 fd59 	bl	8009e90 <steps_to_rads>
 80053de:	eef0 7a40 	vmov.f32	s15, s0
 80053e2:	4b3c      	ldr	r3, [pc, #240]	@ (80054d4 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x16c>)
 80053e4:	edc3 7a00 	vstr	s15, [r3]
    	vel_set = steps_to_rads(rad_to_steps(js_in.angular_velocity.radian_per_second, jc.full_steps), jc.full_steps);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ee:	4b36      	ldr	r3, [pc, #216]	@ (80054c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4618      	mov	r0, r3
 80053f4:	eeb0 0a67 	vmov.f32	s0, s15
 80053f8:	f004 fd7e 	bl	8009ef8 <rad_to_steps>
 80053fc:	4603      	mov	r3, r0
 80053fe:	4a32      	ldr	r2, [pc, #200]	@ (80054c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005400:	6852      	ldr	r2, [r2, #4]
 8005402:	4611      	mov	r1, r2
 8005404:	4618      	mov	r0, r3
 8005406:	f004 fd43 	bl	8009e90 <steps_to_rads>
 800540a:	eef0 7a40 	vmov.f32	s15, s0
 800540e:	4b32      	ldr	r3, [pc, #200]	@ (80054d8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x170>)
 8005410:	edc3 7a00 	vstr	s15, [r3]
//    		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
//    	}

    	//New version POS-VEL control
    	//tmc5160_acceleration(10000000);
    	motor.set_position_to_go(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	edd3 7a00 	vldr	s15, [r3]
 800541a:	4b2b      	ldr	r3, [pc, #172]	@ (80054c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4618      	mov	r0, r3
 8005420:	eeb0 0a67 	vmov.f32	s0, s15
 8005424:	f004 fd68 	bl	8009ef8 <rad_to_steps>
 8005428:	ee07 0a90 	vmov	s15, r0
 800542c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005430:	eeb0 0a67 	vmov.f32	s0, s15
 8005434:	4829      	ldr	r0, [pc, #164]	@ (80054dc <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x174>)
 8005436:	f003 fbb8 	bl	8008baa <_ZN5motor18set_position_to_goEf>
    	if(fabs(js_in.angular_velocity.radian_per_second) < 0.0001)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005440:	eeb0 0a67 	vmov.f32	s0, s15
 8005444:	f7fc fbb2 	bl	8001bac <_ZSt4fabsf>
 8005448:	ee10 3a10 	vmov	r3, s0
 800544c:	4618      	mov	r0, r3
 800544e:	f7fb f8a3 	bl	8000598 <__aeabi_f2d>
 8005452:	2301      	movs	r3, #1
 8005454:	461c      	mov	r4, r3
 8005456:	a318      	add	r3, pc, #96	@ (adr r3, 80054b8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x150>)
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fb fb66 	bl	8000b2c <__aeabi_dcmplt>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x102>
 8005466:	2300      	movs	r3, #0
 8005468:	461c      	mov	r4, r3
 800546a:	b2e3      	uxtb	r3, r4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01c      	beq.n	80054aa <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x142>
    	{
    		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005470:	2104      	movs	r1, #4
 8005472:	481b      	ldr	r0, [pc, #108]	@ (80054e0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x178>)
 8005474:	f006 f80e 	bl	800b494 <HAL_GPIO_TogglePin>
        	tmc5160_velocity(rad_to_steps(20000, jc.full_steps));
 8005478:	4b13      	ldr	r3, [pc, #76]	@ (80054c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80054e4 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x17c>
 8005482:	f004 fd39 	bl	8009ef8 <rad_to_steps>
 8005486:	4603      	mov	r3, r0
 8005488:	4618      	mov	r0, r3
 800548a:	f004 f8fd 	bl	8009688 <tmc5160_velocity>
        	tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	edd3 7a00 	vldr	s15, [r3]
 8005494:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x160>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	eeb0 0a67 	vmov.f32	s0, s15
 800549e:	f004 fd2b 	bl	8009ef8 <rad_to_steps>
 80054a2:	4603      	mov	r3, r0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 ffd1 	bl	800944c <tmc5160_position>
    	}
    }
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd90      	pop	{r4, r7, pc}
 80054b2:	bf00      	nop
 80054b4:	f3af 8000 	nop.w
 80054b8:	eb1c432d 	.word	0xeb1c432d
 80054bc:	3f1a36e2 	.word	0x3f1a36e2
 80054c0:	20000340 	.word	0x20000340
 80054c4:	20000344 	.word	0x20000344
 80054c8:	20000778 	.word	0x20000778
 80054cc:	2000034c 	.word	0x2000034c
 80054d0:	20000348 	.word	0x20000348
 80054d4:	20000354 	.word	0x20000354
 80054d8:	20000350 	.word	0x20000350
 80054dc:	200007a4 	.word	0x200007a4
 80054e0:	48000c00 	.word	0x48000c00
 80054e4:	469c4000 	.word	0x469c4000

080054e8 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
RegisterListReader* reg_list_service;


class NodeInfoReader : public AbstractSubscription<NodeInfoRequest> {
public:
    NodeInfoReader(InterfacePtr interface): AbstractSubscription<NodeInfoRequest>(
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 80054f2:	687c      	ldr	r4, [r7, #4]
 80054f4:	f107 0308 	add.w	r3, r7, #8
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff fec1 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005500:	f107 0108 	add.w	r1, r7, #8
 8005504:	2302      	movs	r3, #2
 8005506:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 800550a:	4620      	mov	r0, r4
 800550c:	f001 fa2c 	bl	8006968 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8005510:	f107 0308 	add.w	r3, r7, #8
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fec4 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800551a:	4a04      	ldr	r2, [pc, #16]	@ (800552c <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bd90      	pop	{r4, r7, pc}
 800552a:	bf00      	nop
 800552c:	080188e8 	.word	0x080188e8

08005530 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer>:
NodeInfoReader* nireader;

void NodeInfoReader::handler(
    const uavcan_node_GetInfo_Request_1_0& object,
    CanardRxTransfer* transfer
) {
 8005530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005534:	b0e7      	sub	sp, #412	@ 0x19c
 8005536:	af06      	add	r7, sp, #24
 8005538:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800553c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005540:	6018      	str	r0, [r3, #0]
 8005542:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005546:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800554a:	6019      	str	r1, [r3, #0]
 800554c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005550:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005554:	601a      	str	r2, [r3, #0]
        &node_info_response,
        node_info_buf,
        transfer,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_
    );
}
 8005556:	466b      	mov	r3, sp
 8005558:	461e      	mov	r6, r3
    NodeInfoResponse::Type node_info_response = {
 800555a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800555e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005562:	4618      	mov	r0, r3
 8005564:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005568:	461a      	mov	r2, r3
 800556a:	2100      	movs	r1, #0
 800556c:	f00f f981 	bl	8014872 <memset>
 8005570:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005574:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005578:	2201      	movs	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005580:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005584:	2201      	movs	r2, #1
 8005586:	709a      	strb	r2, [r3, #2]
 8005588:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800558c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005590:	2201      	movs	r2, #1
 8005592:	715a      	strb	r2, [r3, #5]
    node_info_response.certificate_of_authenticity.count = 0;
 8005594:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005598:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800559c:	2200      	movs	r2, #0
 800559e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    node_info_response.software_image_crc.count = 0;
 80055a2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80055a6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80055aa:	2200      	movs	r2, #0
 80055ac:	661a      	str	r2, [r3, #96]	@ 0x60
    size_t name_len = 8;
 80055ae:	2308      	movs	r3, #8
 80055b0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    char joint_name[name_len];
 80055b4:	f8d7 117c 	ldr.w	r1, [r7, #380]	@ 0x17c
 80055b8:	460b      	mov	r3, r1
 80055ba:	3b01      	subs	r3, #1
 80055bc:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80055c0:	2300      	movs	r3, #0
 80055c2:	4688      	mov	r8, r1
 80055c4:	4699      	mov	r9, r3
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055da:	2300      	movs	r3, #0
 80055dc:	460c      	mov	r4, r1
 80055de:	461d      	mov	r5, r3
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	00eb      	lsls	r3, r5, #3
 80055ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ee:	00e2      	lsls	r2, r4, #3
 80055f0:	1dcb      	adds	r3, r1, #7
 80055f2:	08db      	lsrs	r3, r3, #3
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	ebad 0d03 	sub.w	sp, sp, r3
 80055fa:	ab06      	add	r3, sp, #24
 80055fc:	3300      	adds	r3, #0
 80055fe:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    std::sprintf(joint_name,"joint_%d", JOINT_N);
 8005602:	2206      	movs	r2, #6
 8005604:	4939      	ldr	r1, [pc, #228]	@ (80056ec <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1bc>)
 8005606:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 800560a:	f00f f8a5 	bl	8014758 <siprintf>
    memcpy(node_info_response.name.elements, joint_name, name_len);
 800560e:	f107 0320 	add.w	r3, r7, #32
 8005612:	3320      	adds	r3, #32
 8005614:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8005618:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800561c:	4618      	mov	r0, r3
 800561e:	f00f fa0e 	bl	8014a3e <memcpy>
    node_info_response.name.count = name_len;
 8005622:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005626:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800562a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800562e:	655a      	str	r2, [r3, #84]	@ 0x54
    uint32_t word0 = 1;
 8005630:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005634:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]
    uint32_t word1 = 2;
 800563c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005640:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005644:	2202      	movs	r2, #2
 8005646:	601a      	str	r2, [r3, #0]
    uint32_t word2 = 3;
 8005648:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800564c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005650:	2203      	movs	r2, #3
 8005652:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id, &word0, 4);
 8005654:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005658:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005662:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005666:	611a      	str	r2, [r3, #16]
    memcpy(node_info_response.unique_id + 4, &word1, 4);
 8005668:	f107 0320 	add.w	r3, r7, #32
 800566c:	3310      	adds	r3, #16
 800566e:	3304      	adds	r3, #4
 8005670:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8005674:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id + 8, &word2, 4);
 800567c:	f107 0320 	add.w	r3, r7, #32
 8005680:	3310      	adds	r3, #16
 8005682:	3308      	adds	r3, #8
 8005684:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8005688:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	601a      	str	r2, [r3, #0]
    node_info_response.unique_id[0] = JOINT_N;
 8005690:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8005694:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005698:	2206      	movs	r2, #6
 800569a:	741a      	strb	r2, [r3, #16]
    interface->send_response<NodeInfoResponse>(
 800569c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80056a0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 f98e 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80056b0:	4604      	mov	r4, r0
 80056b2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80056b6:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80056ba:	f107 0020 	add.w	r0, r7, #32
 80056be:	2304      	movs	r3, #4
 80056c0:	9304      	str	r3, [sp, #16]
 80056c2:	4a0b      	ldr	r2, [pc, #44]	@ (80056f0 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c0>)
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056cc:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	680b      	ldr	r3, [r1, #0]
 80056d4:	4a07      	ldr	r2, [pc, #28]	@ (80056f4 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c4>)
 80056d6:	4601      	mov	r1, r0
 80056d8:	4620      	mov	r0, r4
 80056da:	f001 f983 	bl	80069e4 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
 80056de:	46b5      	mov	sp, r6
}
 80056e0:	bf00      	nop
 80056e2:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 80056e6:	46bd      	mov	sp, r7
 80056e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056ec:	08018898 	.word	0x08018898
 80056f0:	000f4240 	.word	0x000f4240
 80056f4:	20000360 	.word	0x20000360

080056f8 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:



class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 80056f8:	b590      	push	{r4, r7, lr}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 8005702:	687c      	ldr	r4, [r7, #4]
 8005704:	f107 0308 	add.w	r3, r7, #8
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fdb9 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8005710:	f107 0108 	add.w	r1, r7, #8
 8005714:	2302      	movs	r3, #2
 8005716:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800571a:	4620      	mov	r0, r4
 800571c:	f001 f9ac 	bl	8006a78 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8005720:	f107 0308 	add.w	r3, r7, #8
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fdbc 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800572a:	4a04      	ldr	r2, [pc, #16]	@ (800573c <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	bd90      	pop	{r4, r7, pc}
 800573a:	bf00      	nop
 800573c:	080188c8 	.word	0x080188c8

08005740 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:
uint8_t type_reg_name[TYPE_REG_NAME_LEN + 1] = "type"; //UINT8 _tag_ == 11

void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	f2ad 5d84 	subw	sp, sp, #1412	@ 0x584
 8005746:	af06      	add	r7, sp, #24
 8005748:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800574c:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 8005750:	6018      	str	r0, [r3, #0]
 8005752:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005756:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800575a:	6019      	str	r1, [r3, #0]
 800575c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005760:	f2a3 5364 	subw	r3, r3, #1380	@ 0x564
 8005764:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 8005766:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800576a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800576e:	4618      	mov	r0, r3
 8005770:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8005774:	461a      	mov	r2, r3
 8005776:	2100      	movs	r1, #0
 8005778:	f00f f87b 	bl	8014872 <memset>

    register_access_response.timestamp.microsecond = micros_64();
 800577c:	f7ff fd5a 	bl	8005234 <micros_64>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005788:	f5a1 710e 	sub.w	r1, r1, #568	@ 0x238
 800578c:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 8005790:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005794:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005798:	4618      	mov	r0, r3
 800579a:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800579e:	461a      	mov	r2, r3
 80057a0:	2100      	movs	r1, #0
 80057a2:	f00f f866 	bl	8014872 <memset>
    uint64_t tv = 0; //PZDC!!!! temp value...
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80057b2:	e9c1 2300 	strd	r2, r3, [r1]
    int32_t js_pos_v = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 80057bc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80057c0:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2204      	movs	r2, #4
 80057c8:	49c0      	ldr	r1, [pc, #768]	@ (8005acc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x38c>)
 80057ca:	4618      	mov	r0, r3
 80057cc:	f00f f827 	bl	801481e <memcmp>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d15c      	bne.n	8005890 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x150>
    {
        if (register_access_request.value._tag_ == 4) {
 80057d6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80057da:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d113      	bne.n	8005810 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xd0>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80057e8:	2104      	movs	r1, #4
 80057ea:	48b9      	ldr	r0, [pc, #740]	@ (8005ad0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 80057ec:	f005 fe52 	bl	800b494 <HAL_GPIO_TogglePin>
//            if (register_access_request.value.integer64.value.elements[0] != 0)
//            {
            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
 80057f0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80057f4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 80057fe:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005802:	e9c1 2300 	strd	r2, r3, [r1]
            	tmc5160_move(tv);
 8005806:	f8d7 3560 	ldr.w	r3, [r7, #1376]	@ 0x560
 800580a:	4618      	mov	r0, r3
 800580c:	f003 fe50 	bl	80094b0 <tmc5160_move>
//            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
//            	tmc5160_move(0);
//            }
        }

        register_access_response.persistent = true;
 8005810:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005814:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005818:	2201      	movs	r2, #1
 800581a:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800581c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005820:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005824:	2201      	movs	r2, #1
 8005826:	721a      	strb	r2, [r3, #8]
        value._tag_ = 4;
 8005828:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800582c:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005830:	2204      	movs	r2, #4
 8005832:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer64_1_0 result = {};
 8005836:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800583a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800583e:	4618      	mov	r0, r3
 8005840:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8005844:	461a      	mov	r2, r3
 8005846:	2100      	movs	r1, #0
 8005848:	f00f f813 	bl	8014872 <memset>
        result.value.elements[0] = tv; //PZDC!!!
 800584c:	f507 63ac 	add.w	r3, r7, #1376	@ 0x560
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005858:	f5a1 61ab 	sub.w	r1, r1, #1368	@ 0x558
 800585c:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 8005860:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005864:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005868:	2201      	movs	r2, #1
 800586a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer64 = result;
 800586e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005872:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005876:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800587a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800587e:	4610      	mov	r0, r2
 8005880:	4619      	mov	r1, r3
 8005882:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8005886:	461a      	mov	r2, r3
 8005888:	f00f f8d9 	bl	8014a3e <memcpy>
 800588c:	f000 bcf1 	b.w	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else if (memcmp(register_access_request.name.name.elements, move_reg_name, MOVE_REG_NAME_LEN) == 0) {
 8005890:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005894:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2204      	movs	r2, #4
 800589c:	498d      	ldr	r1, [pc, #564]	@ (8005ad4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x394>)
 800589e:	4618      	mov	r0, r3
 80058a0:	f00e ffbd 	bl	801481e <memcmp>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d165      	bne.n	8005976 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x236>

    	int32_t pos = register_access_request.value.integer32.value.elements[0];
 80058aa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80058ae:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80058b8:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
    	int32_t rv;
    	if (pos > jc.upper_limit_ticks && pos < jc.lower_limit_ticks)
 80058bc:	4b86      	ldr	r3, [pc, #536]	@ (8005ad8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 80058c4:	429a      	cmp	r2, r3
 80058c6:	dd0e      	ble.n	80058e6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1a6>
 80058c8:	4b83      	ldr	r3, [pc, #524]	@ (8005ad8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 80058d0:	429a      	cmp	r2, r3
 80058d2:	da08      	bge.n	80058e6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1a6>
    	{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80058d4:	2201      	movs	r2, #1
 80058d6:	2104      	movs	r1, #4
 80058d8:	487d      	ldr	r0, [pc, #500]	@ (8005ad0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 80058da:	f005 fdc3 	bl	800b464 <HAL_GPIO_WritePin>
    		rv = 1;
 80058de:	2301      	movs	r3, #1
 80058e0:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 80058e4:	e006      	b.n	80058f4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1b4>
    	}
    	else
    	{
    		tmc5160_move(pos);
 80058e6:	f8d7 0558 	ldr.w	r0, [r7, #1368]	@ 0x558
 80058ea:	f003 fde1 	bl	80094b0 <tmc5160_move>
    		rv = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
    	}

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80058f4:	2104      	movs	r1, #4
 80058f6:	4876      	ldr	r0, [pc, #472]	@ (8005ad0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 80058f8:	f005 fdcc 	bl	800b494 <HAL_GPIO_TogglePin>

		//response
        register_access_response.persistent = true;
 80058fc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005900:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005904:	2201      	movs	r2, #1
 8005906:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005908:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800590c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005910:	2201      	movs	r2, #1
 8005912:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 8005914:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005918:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800591c:	2209      	movs	r2, #9
 800591e:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 8005922:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005926:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800592a:	4618      	mov	r0, r3
 800592c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005930:	461a      	mov	r2, r3
 8005932:	2100      	movs	r1, #0
 8005934:	f00e ff9d 	bl	8014872 <memset>
        result.value.elements[0] = tv;
 8005938:	f8d7 2560 	ldr.w	r2, [r7, #1376]	@ 0x560
 800593c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005940:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005944:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8005946:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800594a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800594e:	2201      	movs	r2, #1
 8005950:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer32 = result;
 8005954:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005958:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800595c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005960:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800596c:	461a      	mov	r2, r3
 800596e:	f00f f866 	bl	8014a3e <memcpy>
 8005972:	f000 bc7e 	b.w	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else if (memcmp(register_access_request.name.name.elements, pos_reg_name, POS_REG_NAME_LEN) == 0) {
 8005976:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800597a:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2203      	movs	r2, #3
 8005982:	4956      	ldr	r1, [pc, #344]	@ (8005adc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x39c>)
 8005984:	4618      	mov	r0, r3
 8005986:	f00e ff4a 	bl	801481e <memcmp>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d150      	bne.n	8005a32 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2f2>

		tmc5160_set_default_vel();
 8005990:	f003 fe16 	bl	80095c0 <tmc5160_set_default_vel>
		tmc5160_position(register_access_request.value.integer32.value.elements[0]);
 8005994:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005998:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80059a2:	4618      	mov	r0, r3
 80059a4:	f003 fd52 	bl	800944c <tmc5160_position>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80059a8:	2104      	movs	r1, #4
 80059aa:	4849      	ldr	r0, [pc, #292]	@ (8005ad0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 80059ac:	f005 fd72 	bl	800b494 <HAL_GPIO_TogglePin>
		js_pos_v = tmc5160_position_read();
 80059b0:	f003 ff28 	bl	8009804 <tmc5160_position_read>
 80059b4:	f8c7 055c 	str.w	r0, [r7, #1372]	@ 0x55c
		//response
        register_access_response.persistent = true;
 80059b8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80059bc:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80059c0:	2201      	movs	r2, #1
 80059c2:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80059c4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80059c8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80059cc:	2201      	movs	r2, #1
 80059ce:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 80059d0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80059d4:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80059d8:	2209      	movs	r2, #9
 80059da:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 80059de:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80059e2:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80059e6:	4618      	mov	r0, r3
 80059e8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80059ec:	461a      	mov	r2, r3
 80059ee:	2100      	movs	r1, #0
 80059f0:	f00e ff3f 	bl	8014872 <memset>
        result.value.elements[0] = js_pos_v;
 80059f4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80059f8:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80059fc:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
 8005a00:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8005a02:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005a06:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer32 = result;
 8005a10:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005a14:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005a18:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005a1c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005a20:	4610      	mov	r0, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f00f f808 	bl	8014a3e <memcpy>
 8005a2e:	f000 bc20 	b.w	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else if (memcmp(register_access_request.name.name.elements, get_pos_reg_name, GET_POS_REG_NAME_LEN) == 0) {
 8005a32:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005a36:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2207      	movs	r2, #7
 8005a3e:	4928      	ldr	r1, [pc, #160]	@ (8005ae0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a0>)
 8005a40:	4618      	mov	r0, r3
 8005a42:	f00e feec 	bl	801481e <memcmp>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d14d      	bne.n	8005ae8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a8>
		//js_pos_v = enc_angle;
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005a4c:	2104      	movs	r1, #4
 8005a4e:	4820      	ldr	r0, [pc, #128]	@ (8005ad0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x390>)
 8005a50:	f005 fd20 	bl	800b494 <HAL_GPIO_TogglePin>
		//tv = 0;
		//response
        register_access_response.persistent = true;
 8005a54:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005a58:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005a60:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005a64:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005a68:	2201      	movs	r2, #1
 8005a6a:	721a      	strb	r2, [r3, #8]
        value._tag_ = 10;
 8005a6c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005a70:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005a74:	220a      	movs	r2, #10
 8005a76:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural16_1_0 result = {};
 8005a7a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005a7e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005a82:	4618      	mov	r0, r3
 8005a84:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f00e fef1 	bl	8014872 <memset>
        result.value.elements[0] = enc_angle;
 8005a90:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a4>)
 8005a92:	881a      	ldrh	r2, [r3, #0]
 8005a94:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005a98:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005a9c:	801a      	strh	r2, [r3, #0]
        result.value.count = 1;
 8005a9e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005aa2:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural16 = result;
 8005aac:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ab0:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005ab4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ab8:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005abc:	4610      	mov	r0, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f00e ffba 	bl	8014a3e <memcpy>
 8005aca:	e3d2      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
 8005acc:	20000004 	.word	0x20000004
 8005ad0:	48000c00 	.word	0x48000c00
 8005ad4:	20000010 	.word	0x20000010
 8005ad8:	20000778 	.word	0x20000778
 8005adc:	20000018 	.word	0x20000018
 8005ae0:	20000020 	.word	0x20000020
 8005ae4:	200007a2 	.word	0x200007a2
    }
    else if (memcmp(register_access_request.name.name.elements, dir_reg_name, DIR_REG_NAME_LEN) == 0) {
 8005ae8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005aec:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2203      	movs	r2, #3
 8005af4:	49c7      	ldr	r1, [pc, #796]	@ (8005e14 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d4>)
 8005af6:	4618      	mov	r0, r3
 8005af8:	f00e fe91 	bl	801481e <memcmp>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d156      	bne.n	8005bb0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x470>
		tmc5160_set_motor_direction(register_access_request.value.integer8.value.elements[0]);
 8005b02:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b06:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f993 3108 	ldrsb.w	r3, [r3, #264]	@ 0x108
 8005b10:	4618      	mov	r0, r3
 8005b12:	f004 f83b 	bl	8009b8c <tmc5160_set_motor_direction>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005b16:	2104      	movs	r1, #4
 8005b18:	48bf      	ldr	r0, [pc, #764]	@ (8005e18 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d8>)
 8005b1a:	f005 fcbb 	bl	800b494 <HAL_GPIO_TogglePin>
		tv = 0;
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005b2a:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8005b2e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b32:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005b36:	2201      	movs	r2, #1
 8005b38:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005b3a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b3e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005b42:	2201      	movs	r2, #1
 8005b44:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8005b46:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b4a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005b4e:	220b      	movs	r2, #11
 8005b50:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8005b54:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b58:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005b62:	461a      	mov	r2, r3
 8005b64:	2100      	movs	r1, #0
 8005b66:	f00e fe84 	bl	8014872 <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 8005b6a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b6e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f993 2108 	ldrsb.w	r2, [r3, #264]	@ 0x108
 8005b78:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b7c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005b80:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8005b82:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b86:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer8 = result;
 8005b90:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b94:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005b98:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005b9c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f00e ff48 	bl	8014a3e <memcpy>
 8005bae:	e360      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    	}
    else if (memcmp(register_access_request.name.name.elements, arm_reg_name, ARM_REG_NAME_LEN) == 0) {
 8005bb0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005bb4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	4997      	ldr	r1, [pc, #604]	@ (8005e1c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6dc>)
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f00e fe2d 	bl	801481e <memcmp>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d15a      	bne.n	8005c80 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x540>
		if(register_access_request.value.integer8.value.elements[0])
 8005bca:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005bce:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f993 3108 	ldrsb.w	r3, [r3, #264]	@ 0x108
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4a2>
		{
			tmc5160_arm();
 8005bdc:	f004 f83e 	bl	8009c5c <tmc5160_arm>
 8005be0:	e001      	b.n	8005be6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4a6>
		}
		else
		{
			tmc5160_disarm();
 8005be2:	f004 f82f 	bl	8009c44 <tmc5160_disarm>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005be6:	2104      	movs	r1, #4
 8005be8:	488b      	ldr	r0, [pc, #556]	@ (8005e18 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d8>)
 8005bea:	f005 fc53 	bl	800b494 <HAL_GPIO_TogglePin>
		tv = 0;
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005bfa:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8005bfe:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c02:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005c06:	2201      	movs	r2, #1
 8005c08:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005c0a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c0e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005c12:	2201      	movs	r2, #1
 8005c14:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8005c16:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c1a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005c1e:	220b      	movs	r2, #11
 8005c20:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8005c24:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c28:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005c32:	461a      	mov	r2, r3
 8005c34:	2100      	movs	r1, #0
 8005c36:	f00e fe1c 	bl	8014872 <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 8005c3a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c3e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f993 2108 	ldrsb.w	r2, [r3, #264]	@ 0x108
 8005c48:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c4c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005c50:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8005c52:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c56:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer8 = result;
 8005c60:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c64:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005c68:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c6c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005c70:	4610      	mov	r0, r2
 8005c72:	4619      	mov	r1, r3
 8005c74:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f00e fee0 	bl	8014a3e <memcpy>
 8005c7e:	e2f8      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    	}
    else if (memcmp(register_access_request.name.name.elements, calib_reg_name, CALIB_REG_NAME_LEN) == 0) {
 8005c80:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005c84:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2205      	movs	r2, #5
 8005c8c:	4964      	ldr	r1, [pc, #400]	@ (8005e20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e0>)
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f00e fdc5 	bl	801481e <memcmp>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d14f      	bne.n	8005d3a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x5fa>
		//ENABLE CALIB
    	calib_move(&jc);
 8005c9a:	4862      	ldr	r0, [pc, #392]	@ (8005e24 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8005c9c:	f000 fc7c 	bl	8006598 <calib_move>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	485d      	ldr	r0, [pc, #372]	@ (8005e18 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d8>)
 8005ca4:	f005 fbf6 	bl	800b494 <HAL_GPIO_TogglePin>
		tv = 0;
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005cb4:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8005cb8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005cbc:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8005cc4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005cc8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005ccc:	2201      	movs	r2, #1
 8005cce:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8005cd0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005cd4:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005cd8:	220b      	movs	r2, #11
 8005cda:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8005cde:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ce2:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005cec:	461a      	mov	r2, r3
 8005cee:	2100      	movs	r1, #0
 8005cf0:	f00e fdbf 	bl	8014872 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8005cf4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005cf8:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f893 2310 	ldrb.w	r2, [r3, #784]	@ 0x310
 8005d02:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005d06:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005d0a:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8005d0c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005d10:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005d14:	2201      	movs	r2, #1
 8005d16:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural8 = result;
 8005d1a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005d1e:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005d22:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005d26:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005d32:	461a      	mov	r2, r3
 8005d34:	f00e fe83 	bl	8014a3e <memcpy>
 8005d38:	e29b      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    	}
	else if (memcmp(register_access_request.name.name.elements, upper_lim_reg_name, UPPER_LIM_REG_NAME_LEN) == 0) {
 8005d3a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005d3e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2209      	movs	r2, #9
 8005d46:	4938      	ldr	r1, [pc, #224]	@ (8005e28 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e8>)
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f00e fd68 	bl	801481e <memcmp>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d16d      	bne.n	8005e30 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005d54:	2104      	movs	r1, #4
 8005d56:	4830      	ldr	r0, [pc, #192]	@ (8005e18 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6d8>)
 8005d58:	f005 fb9c 	bl	800b494 <HAL_GPIO_TogglePin>
		jc.upper_limit_enc = register_access_request.value.integer32.value.elements[0];
 8005d5c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005d60:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d72:	4b2c      	ldr	r3, [pc, #176]	@ (8005e24 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8005d74:	edc3 7a06 	vstr	s15, [r3, #24]
		joint_config_write(&jc, &jc_a);
 8005d78:	492c      	ldr	r1, [pc, #176]	@ (8005e2c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6ec>)
 8005d7a:	482a      	ldr	r0, [pc, #168]	@ (8005e24 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8005d7c:	f002 fdd6 	bl	800892c <joint_config_write>
		tv = 0;
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005d8c:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 8005d90:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005d94:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005d98:	2201      	movs	r2, #1
 8005d9a:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8005d9c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005da0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005da4:	2201      	movs	r2, #1
 8005da6:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8005da8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005dac:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005db0:	2209      	movs	r2, #9
 8005db2:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8005db6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005dba:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	f00e fd53 	bl	8014872 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8005dcc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005dd0:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005de0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005de4:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8005de6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005dea:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005dee:	2201      	movs	r2, #1
 8005df0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 8005df4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005df8:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005dfc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005e00:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005e04:	4610      	mov	r0, r2
 8005e06:	4619      	mov	r1, r3
 8005e08:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f00e fe16 	bl	8014a3e <memcpy>
 8005e12:	e22e      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
 8005e14:	2000001c 	.word	0x2000001c
 8005e18:	48000c00 	.word	0x48000c00
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	20000028 	.word	0x20000028
 8005e24:	20000778 	.word	0x20000778
 8005e28:	20000030 	.word	0x20000030
 8005e2c:	2000079c 	.word	0x2000079c
	}
	else if (memcmp(register_access_request.name.name.elements, lower_lim_reg_name, LOWER_LIM_REG_NAME_LEN) == 0) {
 8005e30:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005e34:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2209      	movs	r2, #9
 8005e3c:	49d0      	ldr	r1, [pc, #832]	@ (8006180 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa40>)
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f00e fced 	bl	801481e <memcmp>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d15f      	bne.n	8005f0a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x7ca>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005e4a:	2104      	movs	r1, #4
 8005e4c:	48cd      	ldr	r0, [pc, #820]	@ (8006184 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 8005e4e:	f005 fb21 	bl	800b494 <HAL_GPIO_TogglePin>
		jc.lower_limit_enc = register_access_request.value.integer32.value.elements[0];
 8005e52:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005e56:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e68:	4bc7      	ldr	r3, [pc, #796]	@ (8006188 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 8005e6a:	edc3 7a07 	vstr	s15, [r3, #28]
		joint_config_write(&jc, &jc_a);
 8005e6e:	49c7      	ldr	r1, [pc, #796]	@ (800618c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa4c>)
 8005e70:	48c5      	ldr	r0, [pc, #788]	@ (8006188 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 8005e72:	f002 fd5b 	bl	800892c <joint_config_write>
		tv = 0;
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005e82:	e9c1 2300 	strd	r2, r3, [r1]
		register_access_response.persistent = true;
 8005e86:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005e8a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005e8e:	2201      	movs	r2, #1
 8005e90:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8005e92:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005e96:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8005e9e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ea2:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005ea6:	2209      	movs	r2, #9
 8005ea8:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8005eac:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005eb0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005eba:	461a      	mov	r2, r3
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	f00e fcd8 	bl	8014872 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8005ec2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ec6:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ed6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005eda:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8005edc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ee0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 8005eea:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005eee:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005ef2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ef6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005efa:	4610      	mov	r0, r2
 8005efc:	4619      	mov	r1, r3
 8005efe:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005f02:	461a      	mov	r2, r3
 8005f04:	f00e fd9b 	bl	8014a3e <memcpy>
 8005f08:	e1b3      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
	}
	else if (memcmp(register_access_request.name.name.elements, set_zero_reg_name, SET_ZERO_REG_NAME_LEN) == 0) {
 8005f0a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f0e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2208      	movs	r2, #8
 8005f16:	499e      	ldr	r1, [pc, #632]	@ (8006190 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f00e fc80 	bl	801481e <memcmp>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d15d      	bne.n	8005fe0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x8a0>
		tmc5160_set_zero();
 8005f24:	f003 fe66 	bl	8009bf4 <tmc5160_set_zero>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8005f28:	2104      	movs	r1, #4
 8005f2a:	4896      	ldr	r0, [pc, #600]	@ (8006184 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 8005f2c:	f005 fab2 	bl	800b494 <HAL_GPIO_TogglePin>
		jc.zero_enc = enc_angle;
 8005f30:	4b98      	ldr	r3, [pc, #608]	@ (8006194 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	4b94      	ldr	r3, [pc, #592]	@ (8006188 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 8005f38:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 8005f3a:	4994      	ldr	r1, [pc, #592]	@ (800618c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa4c>)
 8005f3c:	4892      	ldr	r0, [pc, #584]	@ (8006188 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 8005f3e:	f002 fcf5 	bl	800892c <joint_config_write>
		tv = 0;
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005f4e:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 8005f52:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f56:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8005f5e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f62:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8005f66:	2201      	movs	r2, #1
 8005f68:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8005f6a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f6e:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8005f72:	2209      	movs	r2, #9
 8005f74:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Real64_1_0 result = {};
 8005f78:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f7c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005f80:	4618      	mov	r0, r3
 8005f82:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8005f86:	461a      	mov	r2, r3
 8005f88:	2100      	movs	r1, #0
 8005f8a:	f00e fc72 	bl	8014872 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8005f8e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005f92:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fa fad9 	bl	8000554 <__aeabi_ui2d>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005faa:	f5a1 61ab 	sub.w	r1, r1, #1368	@ 0x558
 8005fae:	e9c1 2300 	strd	r2, r3, [r1]
		result.value.count = 1;
 8005fb2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005fb6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.real64 = result;
 8005fc0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005fc4:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8005fc8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005fcc:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f00e fd30 	bl	8014a3e <memcpy>
 8005fde:	e148      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
	}
    else if (memcmp(register_access_request.name.name.elements, set_enc_value_zero_reg_name, SET_ENC_VALUE_ZERO_REG_NAME_LEN) == 0) {
 8005fe0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005fe4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2212      	movs	r2, #18
 8005fec:	496a      	ldr	r1, [pc, #424]	@ (8006198 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa58>)
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f00e fc15 	bl	801481e <memcmp>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d163      	bne.n	80060c2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x982>
		//SET ENCODER ZERO TODO
		jc.zero_enc = register_access_request.value.integer32.value.elements[0];
 8005ffa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005ffe:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006008:	461a      	mov	r2, r3
 800600a:	4b5f      	ldr	r3, [pc, #380]	@ (8006188 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 800600c:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 800600e:	495f      	ldr	r1, [pc, #380]	@ (800618c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa4c>)
 8006010:	485d      	ldr	r0, [pc, #372]	@ (8006188 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa48>)
 8006012:	f002 fc8b 	bl	800892c <joint_config_write>
		tv = 0;
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006022:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006026:	2104      	movs	r1, #4
 8006028:	4856      	ldr	r0, [pc, #344]	@ (8006184 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 800602a:	f005 fa33 	bl	800b494 <HAL_GPIO_TogglePin>
		tv = 0;
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800603a:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 800603e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006042:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006046:	2201      	movs	r2, #1
 8006048:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800604a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800604e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006052:	2201      	movs	r2, #1
 8006054:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006056:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800605a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800605e:	2209      	movs	r2, #9
 8006060:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006064:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006068:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800606c:	4618      	mov	r0, r3
 800606e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006072:	461a      	mov	r2, r3
 8006074:	2100      	movs	r1, #0
 8006076:	f00e fbfc 	bl	8014872 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 800607a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800607e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8006088:	461a      	mov	r2, r3
 800608a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800608e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006092:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006094:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006098:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800609c:	2201      	movs	r2, #1
 800609e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 80060a2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80060a6:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80060aa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80060ae:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80060b2:	4610      	mov	r0, r2
 80060b4:	4619      	mov	r1, r3
 80060b6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80060ba:	461a      	mov	r2, r3
 80060bc:	f00e fcbf 	bl	8014a3e <memcpy>
 80060c0:	e0d7      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else if (memcmp(register_access_request.name.name.elements, name_reg_name, NAME_REG_NAME_LEN) == 0) {
 80060c2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80060c6:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2204      	movs	r2, #4
 80060ce:	4933      	ldr	r1, [pc, #204]	@ (800619c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5c>)
 80060d0:	4618      	mov	r0, r3
 80060d2:	f00e fba4 	bl	801481e <memcmp>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d163      	bne.n	80061a4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa64>
		//SET NAME FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80060dc:	2104      	movs	r1, #4
 80060de:	4829      	ldr	r0, [pc, #164]	@ (8006184 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa44>)
 80060e0:	f005 f9d8 	bl	800b494 <HAL_GPIO_TogglePin>
		tv = 0;
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80060f0:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 80060f4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80060f8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80060fc:	2201      	movs	r2, #1
 80060fe:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006100:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006104:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006108:	2201      	movs	r2, #1
 800610a:	721a      	strb	r2, [r3, #8]
        value._tag_ = 1;
 800610c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006110:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_String_1_0 result = {};
 800611a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800611e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006122:	4618      	mov	r0, r3
 8006124:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006128:	461a      	mov	r2, r3
 800612a:	2100      	movs	r1, #0
 800612c:	f00e fba1 	bl	8014872 <memset>

        char mystring[4] = "xyz";
 8006130:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006134:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006138:	4a19      	ldr	r2, [pc, #100]	@ (80061a0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa60>)
 800613a:	601a      	str	r2, [r3, #0]
        memcpy(result.value.elements, mystring, 4);
 800613c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006140:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800614a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800614e:	601a      	str	r2, [r3, #0]
        result.value.count = 3;
 8006150:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006154:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006158:	2203      	movs	r2, #3
 800615a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value._string = result;
 800615e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006162:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006166:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800616a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800616e:	4610      	mov	r0, r2
 8006170:	4619      	mov	r1, r3
 8006172:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006176:	461a      	mov	r2, r3
 8006178:	f00e fc61 	bl	8014a3e <memcpy>
 800617c:	e079      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
 800617e:	bf00      	nop
 8006180:	2000003c 	.word	0x2000003c
 8006184:	48000c00 	.word	0x48000c00
 8006188:	20000778 	.word	0x20000778
 800618c:	2000079c 	.word	0x2000079c
 8006190:	2000005c 	.word	0x2000005c
 8006194:	200007a2 	.word	0x200007a2
 8006198:	20000048 	.word	0x20000048
 800619c:	20000068 	.word	0x20000068
 80061a0:	007a7978 	.word	0x007a7978
    }
    else if (memcmp(register_access_request.name.name.elements, type_reg_name, TYPE_REG_NAME_LEN) == 0) {
 80061a4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061a8:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2204      	movs	r2, #4
 80061b0:	494a      	ldr	r1, [pc, #296]	@ (80062dc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb9c>)
 80061b2:	4618      	mov	r0, r3
 80061b4:	f00e fb33 	bl	801481e <memcmp>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d14c      	bne.n	8006258 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb18>
		//SET TYPE OF MOTOR FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80061be:	2104      	movs	r1, #4
 80061c0:	4847      	ldr	r0, [pc, #284]	@ (80062e0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xba0>)
 80061c2:	f005 f967 	bl	800b494 <HAL_GPIO_TogglePin>
		tv = 0;
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80061d2:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 80061d6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061da:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80061de:	2201      	movs	r2, #1
 80061e0:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80061e2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061e6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80061ea:	2201      	movs	r2, #1
 80061ec:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 80061ee:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061f2:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80061f6:	220b      	movs	r2, #11
 80061f8:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 80061fc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006200:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006204:	4618      	mov	r0, r3
 8006206:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800620a:	461a      	mov	r2, r3
 800620c:	2100      	movs	r1, #0
 800620e:	f00e fb30 	bl	8014872 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006212:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006216:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f893 2310 	ldrb.w	r2, [r3, #784]	@ 0x310
 8006220:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006224:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006228:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 800622a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800622e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006232:	2201      	movs	r2, #1
 8006234:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural8 = result;
 8006238:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800623c:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006240:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006244:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006248:	4610      	mov	r0, r2
 800624a:	4619      	mov	r1, r3
 800624c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006250:	461a      	mov	r2, r3
 8006252:	f00e fbf4 	bl	8014a3e <memcpy>
 8006256:	e00c      	b.n	8006272 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb32>
    }
    else {
        value._tag_ = 0;
 8006258:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800625c:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 8006266:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800626a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 8006272:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006276:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800627a:	f507 62ad 	add.w	r2, r7, #1384	@ 0x568
 800627e:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 8006282:	3310      	adds	r3, #16
 8006284:	4611      	mov	r1, r2
 8006286:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800628a:	4618      	mov	r0, r3
 800628c:	f00e fbd7 	bl	8014a3e <memcpy>

    interface->send_response<RegisterAccessResponse>(
 8006290:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006294:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fb94 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80062a4:	4604      	mov	r4, r0
 80062a6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80062aa:	f2a3 5164 	subw	r1, r3, #1380	@ 0x564
 80062ae:	f507 704c 	add.w	r0, r7, #816	@ 0x330
 80062b2:	2304      	movs	r3, #4
 80062b4:	9304      	str	r3, [sp, #16]
 80062b6:	4a0b      	ldr	r2, [pc, #44]	@ (80062e4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xba4>)
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062c0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	680b      	ldr	r3, [r1, #0]
 80062c8:	4a07      	ldr	r2, [pc, #28]	@ (80062e8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xba8>)
 80062ca:	4601      	mov	r1, r0
 80062cc:	4620      	mov	r0, r4
 80062ce:	f000 fc05 	bl	8006adc <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 80062d2:	bf00      	nop
 80062d4:	f207 576c 	addw	r7, r7, #1388	@ 0x56c
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd90      	pop	{r4, r7, pc}
 80062dc:	20000070 	.word	0x20000070
 80062e0:	48000c00 	.word	0x48000c00
 80062e4:	000f4240 	.word	0x000f4240
 80062e8:	200004a0 	.word	0x200004a0

080062ec <setup_cyphal>:
		&hbeat_transfer_id
	);
    uptime += 1;
}

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b08f      	sub	sp, #60	@ 0x3c
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 80062f4:	4b41      	ldr	r3, [pc, #260]	@ (80063fc <setup_cyphal+0x110>)
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	2106      	movs	r1, #6
 8006300:	483f      	ldr	r0, [pc, #252]	@ (8006400 <setup_cyphal+0x114>)
 8006302:	f000 fc34 	bl	8006b6e <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 8006306:	4602      	mov	r2, r0
 8006308:	f107 0308 	add.w	r3, r7, #8
 800630c:	4611      	mov	r1, r2
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fc56 	bl	8006bc0 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8006314:	f107 0308 	add.w	r3, r7, #8
 8006318:	4619      	mov	r1, r3
 800631a:	483a      	ldr	r0, [pc, #232]	@ (8006404 <setup_cyphal+0x118>)
 800631c:	f000 fc5f 	bl	8006bde <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 8006320:	f107 0308 	add.w	r3, r7, #8
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe ffbc 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 800632a:	f44f 700e 	mov.w	r0, #568	@ 0x238
 800632e:	f00d f9be 	bl	80136ae <_Znwj>
 8006332:	4603      	mov	r3, r0
 8006334:	461c      	mov	r4, r3
 8006336:	f107 0310 	add.w	r3, r7, #16
 800633a:	4932      	ldr	r1, [pc, #200]	@ (8006404 <setup_cyphal+0x118>)
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe ffa0 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006342:	f107 0310 	add.w	r3, r7, #16
 8006346:	4619      	mov	r1, r3
 8006348:	4620      	mov	r0, r4
 800634a:	f7fe ffb7 	bl	80052bc <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800634e:	4b2e      	ldr	r3, [pc, #184]	@ (8006408 <setup_cyphal+0x11c>)
 8006350:	601c      	str	r4, [r3, #0]
 8006352:	f107 0310 	add.w	r3, r7, #16
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe ffa3 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 800635c:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8006360:	f00d f9a5 	bl	80136ae <_Znwj>
 8006364:	4603      	mov	r3, r0
 8006366:	461c      	mov	r4, r3
 8006368:	f107 0318 	add.w	r3, r7, #24
 800636c:	4925      	ldr	r1, [pc, #148]	@ (8006404 <setup_cyphal+0x118>)
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe ff87 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006374:	f107 0318 	add.w	r3, r7, #24
 8006378:	4619      	mov	r1, r3
 800637a:	4620      	mov	r0, r4
 800637c:	f7fe ffce 	bl	800531c <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 8006380:	4b22      	ldr	r3, [pc, #136]	@ (800640c <setup_cyphal+0x120>)
 8006382:	601c      	str	r4, [r3, #0]
 8006384:	f107 0318 	add.w	r3, r7, #24
 8006388:	4618      	mov	r0, r3
 800638a:	f7fe ff8a 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 800638e:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8006392:	f00d f98c 	bl	80136ae <_Znwj>
 8006396:	4603      	mov	r3, r0
 8006398:	461c      	mov	r4, r3
 800639a:	f107 0320 	add.w	r3, r7, #32
 800639e:	4919      	ldr	r1, [pc, #100]	@ (8006404 <setup_cyphal+0x118>)
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe ff6e 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80063a6:	f107 0320 	add.w	r3, r7, #32
 80063aa:	4619      	mov	r1, r3
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7ff f9a3 	bl	80056f8 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80063b2:	4b17      	ldr	r3, [pc, #92]	@ (8006410 <setup_cyphal+0x124>)
 80063b4:	601c      	str	r4, [r3, #0]
 80063b6:	f107 0320 	add.w	r3, r7, #32
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe ff71 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	nireader = new NodeInfoReader(interface);
 80063c0:	f44f 700e 	mov.w	r0, #568	@ 0x238
 80063c4:	f00d f973 	bl	80136ae <_Znwj>
 80063c8:	4603      	mov	r3, r0
 80063ca:	461c      	mov	r4, r3
 80063cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80063d0:	490c      	ldr	r1, [pc, #48]	@ (8006404 <setup_cyphal+0x118>)
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe ff55 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80063d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80063dc:	4619      	mov	r1, r3
 80063de:	4620      	mov	r0, r4
 80063e0:	f7ff f882 	bl	80054e8 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80063e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <setup_cyphal+0x128>)
 80063e6:	601c      	str	r4, [r3, #0]
 80063e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe ff58 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80063f2:	bf00      	nop
 80063f4:	3734      	adds	r7, #52	@ 0x34
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd90      	pop	{r4, r7, pc}
 80063fa:	bf00      	nop
 80063fc:	2000031c 	.word	0x2000031c
 8006400:	200002bc 	.word	0x200002bc
 8006404:	20000314 	.word	0x20000314
 8006408:	2000033c 	.word	0x2000033c
 800640c:	20000358 	.word	0x20000358
 8006410:	2000049c 	.word	0x2000049c
 8006414:	2000035c 	.word	0x2000035c

08006418 <cyphal_can_starter>:
void cyphal_loop() {
    interface->loop();
}

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	@ 0x30
 800641c:	af02      	add	r7, sp, #8
 800641e:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8006420:	f107 0320 	add.w	r3, r7, #32
 8006424:	2106      	movs	r1, #6
 8006426:	4618      	mov	r0, r3
 8006428:	f00d f8f2 	bl	8013610 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(JS_SUB_PORT_ID);//JS_SUB_PORT_ID //1121
 800642c:	f107 0318 	add.w	r3, r7, #24
 8006430:	f240 4166 	movw	r1, #1126	@ 0x466
 8006434:	4618      	mov	r0, r3
 8006436:	f00d f8cb 	bl	80135d0 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 800643a:	f107 0310 	add.w	r3, r7, #16
 800643e:	f641 5155 	movw	r1, #7509	@ 0x1d55
 8006442:	4618      	mov	r0, r3
 8006444:	f00d f8c4 	bl	80135d0 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8006448:	f107 0308 	add.w	r3, r7, #8
 800644c:	f107 0218 	add.w	r2, r7, #24
 8006450:	f107 0120 	add.w	r1, r7, #32
 8006454:	4618      	mov	r0, r3
 8006456:	f00d f8fd 	bl	8013654 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800645a:	4b4c      	ldr	r3, [pc, #304]	@ (800658c <cyphal_can_starter+0x174>)
 800645c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006460:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 8006462:	4b4a      	ldr	r3, [pc, #296]	@ (800658c <cyphal_can_starter+0x174>)
 8006464:	2200      	movs	r2, #0
 8006466:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8006468:	4b48      	ldr	r3, [pc, #288]	@ (800658c <cyphal_can_starter+0x174>)
 800646a:	2202      	movs	r2, #2
 800646c:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800646e:	4b47      	ldr	r3, [pc, #284]	@ (800658c <cyphal_can_starter+0x174>)
 8006470:	2201      	movs	r2, #1
 8006472:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	4a45      	ldr	r2, [pc, #276]	@ (800658c <cyphal_can_starter+0x174>)
 8006478:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	4a43      	ldr	r2, [pc, #268]	@ (800658c <cyphal_can_starter+0x174>)
 800647e:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006480:	4b43      	ldr	r3, [pc, #268]	@ (8006590 <cyphal_can_starter+0x178>)
 8006482:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006486:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 8006488:	4b41      	ldr	r3, [pc, #260]	@ (8006590 <cyphal_can_starter+0x178>)
 800648a:	2201      	movs	r2, #1
 800648c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800648e:	4b40      	ldr	r3, [pc, #256]	@ (8006590 <cyphal_can_starter+0x178>)
 8006490:	2202      	movs	r2, #2
 8006492:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006494:	4b3e      	ldr	r3, [pc, #248]	@ (8006590 <cyphal_can_starter+0x178>)
 8006496:	2201      	movs	r2, #1
 8006498:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	4a3c      	ldr	r2, [pc, #240]	@ (8006590 <cyphal_can_starter+0x178>)
 800649e:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4a3b      	ldr	r2, [pc, #236]	@ (8006590 <cyphal_can_starter+0x178>)
 80064a4:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80064a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006594 <cyphal_can_starter+0x17c>)
 80064a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80064ac:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 80064ae:	4b39      	ldr	r3, [pc, #228]	@ (8006594 <cyphal_can_starter+0x17c>)
 80064b0:	2202      	movs	r2, #2
 80064b2:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80064b4:	4b37      	ldr	r3, [pc, #220]	@ (8006594 <cyphal_can_starter+0x17c>)
 80064b6:	2202      	movs	r2, #2
 80064b8:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80064ba:	4b36      	ldr	r3, [pc, #216]	@ (8006594 <cyphal_can_starter+0x17c>)
 80064bc:	2201      	movs	r2, #1
 80064be:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4a34      	ldr	r2, [pc, #208]	@ (8006594 <cyphal_can_starter+0x17c>)
 80064c4:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4a32      	ldr	r2, [pc, #200]	@ (8006594 <cyphal_can_starter+0x17c>)
 80064ca:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 80064cc:	2302      	movs	r3, #2
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	2302      	movs	r3, #2
 80064d2:	2202      	movs	r2, #2
 80064d4:	2102      	movs	r1, #2
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f004 fb42 	bl	800ab60 <HAL_FDCAN_ConfigGlobalFilter>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 80064ec:	f002 fac7 	bl	8008a7e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 80064f0:	4926      	ldr	r1, [pc, #152]	@ (800658c <cyphal_can_starter+0x174>)
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f004 fada 	bl	800aaac <HAL_FDCAN_ConfigFilter>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bf14      	ite	ne
 80064fe:	2301      	movne	r3, #1
 8006500:	2300      	moveq	r3, #0
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <cyphal_can_starter+0xf4>
	  Error_Handler();
 8006508:	f002 fab9 	bl	8008a7e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
 800650c:	4920      	ldr	r1, [pc, #128]	@ (8006590 <cyphal_can_starter+0x178>)
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f004 facc 	bl	800aaac <HAL_FDCAN_ConfigFilter>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <cyphal_can_starter+0x110>
	  Error_Handler();
 8006524:	f002 faab 	bl	8008a7e <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8006528:	491a      	ldr	r1, [pc, #104]	@ (8006594 <cyphal_can_starter+0x17c>)
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f004 fabe 	bl	800aaac <HAL_FDCAN_ConfigFilter>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	bf14      	ite	ne
 8006536:	2301      	movne	r3, #1
 8006538:	2300      	moveq	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <cyphal_can_starter+0x12c>
	  Error_Handler();
 8006540:	f002 fa9d 	bl	8008a7e <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 8006544:	2200      	movs	r2, #0
 8006546:	2105      	movs	r1, #5
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f004 fb3a 	bl	800abc2 <HAL_FDCAN_ConfigTxDelayCompensation>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <cyphal_can_starter+0x14a>
	  Error_Handler();
 800655e:	f002 fa8e 	bl	8008a7e <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f004 fb4f 	bl	800ac06 <HAL_FDCAN_EnableTxDelayCompensation>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	bf14      	ite	ne
 800656e:	2301      	movne	r3, #1
 8006570:	2300      	moveq	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <cyphal_can_starter+0x164>
	  Error_Handler();
 8006578:	f002 fa81 	bl	8008a7e <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f004 fb63 	bl	800ac48 <HAL_FDCAN_Start>
}
 8006582:	bf00      	nop
 8006584:	3728      	adds	r7, #40	@ 0x28
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200005dc 	.word	0x200005dc
 8006590:	200005ac 	.word	0x200005ac
 8006594:	200005c4 	.word	0x200005c4

08006598 <calib_move>:


void calib_move(joint_config * jc)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	int8_t Kp = 100;
 80065a0:	2364      	movs	r3, #100	@ 0x64
 80065a2:	74fb      	strb	r3, [r7, #19]
	uint32_t epsilon = 10;
 80065a4:	230a      	movs	r3, #10
 80065a6:	60fb      	str	r3, [r7, #12]
	uint32_t deviation = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]
	deviation = jc->zero_enc - enc_angle;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	4a15      	ldr	r2, [pc, #84]	@ (8006608 <calib_move+0x70>)
 80065b2:	8812      	ldrh	r2, [r2, #0]
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
	while(deviation > epsilon)
 80065b8:	e01a      	b.n	80065f0 <calib_move+0x58>
	{
		as50_readAngle(&enc_angle, 100);
 80065ba:	2164      	movs	r1, #100	@ 0x64
 80065bc:	4812      	ldr	r0, [pc, #72]	@ (8006608 <calib_move+0x70>)
 80065be:	f7fb f8cb 	bl	8001758 <as50_readAngle>
		deviation = jc->direction * (jc->zero_enc - enc_angle);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80065c8:	4619      	mov	r1, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006608 <calib_move+0x70>)
 80065d0:	8812      	ldrh	r2, [r2, #0]
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	fb01 f303 	mul.w	r3, r1, r3
 80065d8:	617b      	str	r3, [r7, #20]
		tmc5160_move(deviation * Kp);
 80065da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
 80065e4:	4618      	mov	r0, r3
 80065e6:	f002 ff63 	bl	80094b0 <tmc5160_move>
		HAL_Delay(1);
 80065ea:	2001      	movs	r0, #1
 80065ec:	f003 fd4a 	bl	800a084 <HAL_Delay>
	while(deviation > epsilon)
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d8e0      	bhi.n	80065ba <calib_move+0x22>
	}
	tmc5160_stop();
 80065f8:	f003 fb3c 	bl	8009c74 <tmc5160_stop>
	tmc5160_set_zero();
 80065fc:	f003 fafa 	bl	8009bf4 <tmc5160_set_zero>
}
 8006600:	bf00      	nop
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	200007a2 	.word	0x200007a2

0800660c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
      { delete this; }
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3304      	adds	r3, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	461a      	mov	r2, r3
 800663a:	2300      	movs	r3, #0
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	6053      	str	r3, [r2, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	609a      	str	r2, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	461a      	mov	r2, r3
 8006662:	2300      	movs	r3, #0
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	6053      	str	r3, [r2, #4]
 8006668:	6093      	str	r3, [r2, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff ffde 	bl	800662e <_ZNSt14_Function_baseC1Ev>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8006678:	6838      	ldr	r0, [r7, #0]
 800667a:	f000 fae3 	bl	8006c44 <_ZNKSt8functionIFyvEEcvbEv>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	2202      	movs	r2, #2
 800668e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	609a      	str	r2, [r3, #8]
	  }
      }
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	461a      	mov	r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	6053      	str	r3, [r2, #4]
 80066be:	6093      	str	r3, [r2, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff ffb3 	bl	800662e <_ZNSt14_Function_baseC1Ev>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 80066ce:	6838      	ldr	r0, [r7, #0]
 80066d0:	f000 fac8 	bl	8006c64 <_ZNKSt8functionIFvvEEcvbEv>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00d      	beq.n	80066f6 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	2202      	movs	r2, #2
 80066e4:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	609a      	str	r2, [r3, #8]
      }
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fabb 	bl	8006c84 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
	return get();
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 faaa 	bl	8006c84 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8006730:	4603      	mov	r3, r0
      }
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f000 faa7 	bl	8006c9e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff ffe6 	bl	800673a <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8006778:	b590      	push	{r4, r7, lr}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa9f 	bl	8006cc6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8006788:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00c      	beq.n	80067ac <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 faa4 	bl	8006ce0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 8006798:	4604      	mov	r4, r0
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 faad 	bl	8006cfa <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 80067a0:	4603      	mov	r3, r0
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4619      	mov	r1, r3
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 fab2 	bl	8006d10 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
      }
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd90      	pop	{r4, r7, pc}

080067bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fb f888 	bl	80018e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	461a      	mov	r2, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	6053      	str	r3, [r2, #4]
 80067f4:	6093      	str	r3, [r2, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff ff18 	bl	800662e <_ZNSt14_Function_baseC1Ev>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8006804:	6838      	ldr	r0, [r7, #0]
 8006806:	f000 fa94 	bl	8006d32 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00e      	beq.n	800682e <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8006810:	687c      	ldr	r4, [r7, #4]
 8006812:	6838      	ldr	r0, [r7, #0]
 8006814:	f000 fa9d 	bl	8006d52 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006818:	4603      	mov	r3, r0
 800681a:	4619      	mov	r1, r3
 800681c:	4620      	mov	r0, r4
 800681e:	f000 faa3 	bl	8006d68 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a04      	ldr	r2, [pc, #16]	@ (8006838 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8006826:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a04      	ldr	r2, [pc, #16]	@ (800683c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 800682c:	609a      	str	r2, [r3, #8]
	    }
	}
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	bd90      	pop	{r4, r7, pc}
 8006838:	08006d8d 	.word	0x08006d8d
 800683c:	08006db1 	.word	0x08006db1

08006840 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8006840:	b590      	push	{r4, r7, lr}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	461a      	mov	r2, r3
 800684e:	2300      	movs	r3, #0
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	6053      	str	r3, [r2, #4]
 8006854:	6093      	str	r3, [r2, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff fee8 	bl	800662e <_ZNSt14_Function_baseC1Ev>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8006864:	6838      	ldr	r0, [r7, #0]
 8006866:	f000 fac2 	bl	8006dee <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00e      	beq.n	800688e <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8006870:	687c      	ldr	r4, [r7, #4]
 8006872:	6838      	ldr	r0, [r7, #0]
 8006874:	f000 facb 	bl	8006e0e <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006878:	4603      	mov	r3, r0
 800687a:	4619      	mov	r1, r3
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fad1 	bl	8006e24 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a04      	ldr	r2, [pc, #16]	@ (8006898 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8006886:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a04      	ldr	r2, [pc, #16]	@ (800689c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 800688c:	609a      	str	r2, [r3, #8]
	}
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	bd90      	pop	{r4, r7, pc}
 8006898:	08006e49 	.word	0x08006e49
 800689c:	08006e67 	.word	0x08006e67

080068a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fb f802 	bl	80018c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	4613      	mov	r3, r2
 80068da:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 80068dc:	f107 0310 	add.w	r3, r7, #16
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fccd 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80068e8:	88fa      	ldrh	r2, [r7, #6]
 80068ea:	f107 0110 	add.w	r1, r7, #16
 80068ee:	2300      	movs	r3, #0
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fad7 	bl	8006ea4 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80068f6:	f107 0310 	add.w	r3, r7, #16
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fcd1 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	4613      	mov	r3, r2
 8006916:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8006918:	f107 0310 	add.w	r3, r7, #16
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fcaf 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006924:	88fa      	ldrh	r2, [r7, #6]
 8006926:	f107 0110 	add.w	r1, r7, #16
 800692a:	2300      	movs	r3, #0
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 faeb 	bl	8006f08 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8006932:	f107 0310 	add.w	r3, r7, #16
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fcb3 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	4a04      	ldr	r2, [pc, #16]	@ (8006964 <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	08018948 	.word	0x08018948

08006968 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4611      	mov	r1, r2
 8006974:	461a      	mov	r2, r3
 8006976:	460b      	mov	r3, r1
 8006978:	80fb      	strh	r3, [r7, #6]
 800697a:	4613      	mov	r3, r2
 800697c:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff ffe1 	bl	8006948 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8006986:	4a10      	ldr	r2, [pc, #64]	@ (80069c8 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	797a      	ldrb	r2, [r7, #5]
 8006990:	711a      	strb	r2, [r3, #4]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3308      	adds	r3, #8
 8006996:	f44f 720a 	mov.w	r2, #552	@ 0x228
 800699a:	2100      	movs	r1, #0
 800699c:	4618      	mov	r0, r3
 800699e:	f00d ff68 	bl	8014872 <memset>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe fc69 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80069b0:	797a      	ldrb	r2, [r7, #5]
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	4619      	mov	r1, r3
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 fad8 	bl	8006f6c <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>
    };
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	080188f8 	.word	0x080188f8

080069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	return _M_get();
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fae7 	bl	8006fa8 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80069da:	4603      	mov	r3, r0
      }
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_response(
 80069e4:	b5b0      	push	{r4, r5, r7, lr}
 80069e6:	b08c      	sub	sp, #48	@ 0x30
 80069e8:	af04      	add	r7, sp, #16
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
    CanardRxTransfer *transfer,
    CanardPortID port,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80069f2:	f240 1339 	movw	r3, #313	@ 0x139
 80069f6:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80069f8:	f107 031c 	add.w	r3, r7, #28
 80069fc:	461a      	mov	r2, r3
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	68b8      	ldr	r0, [r7, #8]
 8006a02:	f7fe fa73 	bl	8004eec <uavcan_node_GetInfo_Response_1_0_serialize_>
 8006a06:	4603      	mov	r3, r0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	09db      	lsrs	r3, r3, #7
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	3310      	adds	r3, #16
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fad1 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006a1e:	f107 0314 	add.w	r3, r7, #20
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	809a      	strh	r2, [r3, #4]
 8006a28:	2301      	movs	r3, #1
 8006a2a:	757b      	strb	r3, [r7, #21]
 8006a2c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006a30:	753b      	strb	r3, [r7, #20]
 8006a32:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006a34:	82fb      	strh	r3, [r7, #22]
            .priority = priority,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006a3a:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006a40:	767b      	strb	r3, [r7, #25]
    };
    push(
        utilities.micros_64() + timeout_delta,
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fad0 	bl	8006fec <_ZNKSt8functionIFyvEEclEv>
    push(
 8006a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a50:	1884      	adds	r4, r0, r2
 8006a52:	eb41 0503 	adc.w	r5, r1, r3
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	9202      	str	r2, [sp, #8]
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	f107 0314 	add.w	r3, r7, #20
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	4622      	mov	r2, r4
 8006a66:	462b      	mov	r3, r5
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f00a f805 	bl	8010a78 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 8006a6e:	bf00      	nop
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a78 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4611      	mov	r1, r2
 8006a84:	461a      	mov	r2, r3
 8006a86:	460b      	mov	r3, r1
 8006a88:	80fb      	strh	r3, [r7, #6]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff ff59 	bl	8006948 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8006a96:	4a10      	ldr	r2, [pc, #64]	@ (8006ad8 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	797a      	ldrb	r2, [r7, #5]
 8006aa0:	711a      	strb	r2, [r3, #4]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8006aaa:	2100      	movs	r1, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	f00d fee0 	bl	8014872 <memset>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fbe1 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8006ac0:	797a      	ldrb	r2, [r7, #5]
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 faa9 	bl	800701e <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	080188d8 	.word	0x080188d8

08006adc <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
inline void CyphalInterface::send_response(
 8006adc:	b5b0      	push	{r4, r5, r7, lr}
 8006ade:	b08c      	sub	sp, #48	@ 0x30
 8006ae0:	af04      	add	r7, sp, #16
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8006aea:	f240 130b 	movw	r3, #267	@ 0x10b
 8006aee:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8006af0:	f107 031c 	add.w	r3, r7, #28
 8006af4:	461a      	mov	r2, r3
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	68b8      	ldr	r0, [r7, #8]
 8006afa:	f7fe f865 	bl	8004bc8 <uavcan_register_Access_Response_1_0_serialize_>
 8006afe:	4603      	mov	r3, r0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	09db      	lsrs	r3, r3, #7
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	3310      	adds	r3, #16
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fa55 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006b16:	f107 0314 	add.w	r3, r7, #20
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	809a      	strh	r2, [r3, #4]
 8006b20:	2301      	movs	r3, #1
 8006b22:	757b      	strb	r3, [r7, #21]
 8006b24:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006b28:	753b      	strb	r3, [r7, #20]
 8006b2a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006b2c:	82fb      	strh	r3, [r7, #22]
            .remote_node_id = transfer->metadata.remote_node_id,
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006b32:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8006b38:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fa54 	bl	8006fec <_ZNKSt8functionIFyvEEclEv>
    push(
 8006b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b48:	1884      	adds	r4, r0, r2
 8006b4a:	eb41 0503 	adc.w	r5, r1, r3
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	9202      	str	r2, [sp, #8]
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	f107 0314 	add.w	r3, r7, #20
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	462b      	mov	r3, r5
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f009 ff89 	bl	8010a78 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
}
 8006b66:	bf00      	nop
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bdb0      	pop	{r4, r5, r7, pc}

08006b6e <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 8006b6e:	b590      	push	{r4, r7, lr}
 8006b70:	b08b      	sub	sp, #44	@ 0x2c
 8006b72:	af02      	add	r7, sp, #8
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8006b7e:	f107 030c 	add.w	r3, r7, #12
 8006b82:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 8006b84:	7afa      	ldrb	r2, [r7, #11]
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	69f8      	ldr	r0, [r7, #28]
 8006b90:	f000 fa64 	bl	800705c <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8006b94:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	200c      	movs	r0, #12
 8006ba2:	f7fa fe85 	bl	80018b0 <_ZnwjPv>
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	7af9      	ldrb	r1, [r7, #11]
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f7fa ffb0 	bl	8001b14 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 8006bb4:	613c      	str	r4, [r7, #16]

        return interface;
 8006bb6:	693b      	ldr	r3, [r7, #16]
    }
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3724      	adds	r7, #36	@ 0x24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd90      	pop	{r4, r7, pc}

08006bc0 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fa92 	bl	80070f8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8006bde:	b590      	push	{r4, r7, lr}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8006be8:	687c      	ldr	r4, [r7, #4]
 8006bea:	6838      	ldr	r0, [r7, #0]
 8006bec:	f000 fa9c 	bl	8007128 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 faa2 	bl	800713e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8006bfa:	687b      	ldr	r3, [r7, #4]
      }
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd90      	pop	{r4, r7, pc}

08006c04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
      { }
 8006c0c:	4a04      	ldr	r2, [pc, #16]	@ (8006c20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	0801896c 	.word	0x0801896c

08006c24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
      { }
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff ffe9 	bl	8006c04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006c32:	210c      	movs	r1, #12
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f00c fd38 	bl	80136aa <_ZdlPvj>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fa fea2 	bl	8001998 <_ZNKSt14_Function_base8_M_emptyEv>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f083 0301 	eor.w	r3, r3, #1
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fa fe92 	bl	8001998 <_ZNKSt14_Function_base8_M_emptyEv>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f083 0301 	eor.w	r3, r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fa74 	bl	800717c <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8006c94:	4603      	mov	r3, r0
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8006c9e:	b590      	push	{r4, r7, lr}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fa74 	bl	8007198 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8006cb0:	683c      	ldr	r4, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f807 	bl	8006cc6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	601c      	str	r4, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd90      	pop	{r4, r7, pc}

08006cc6 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fa6e 	bl	80071b2 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fa6e 	bl	80071cc <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d004      	beq.n	8006d2a <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	3218      	adds	r2, #24
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	4790      	blx	r2
      }
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	bf14      	ite	ne
 8006d40:	2301      	movne	r3, #1
 8006d42:	2300      	moveq	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8006d68:	b590      	push	{r4, r7, lr}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8006d72:	6838      	ldr	r0, [r7, #0]
 8006d74:	f7ff ffed 	bl	8006d52 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa31 	bl	80071e6 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd90      	pop	{r4, r7, pc}

08006d8c <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fa3e 	bl	8007216 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fa4a 	bl	8007236 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
      }
 8006da6:	4610      	mov	r0, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d109      	bne.n	8006dd8 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006dc4:	68b8      	ldr	r0, [r7, #8]
 8006dc6:	f000 fa26 	bl	8007216 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8006dca:	4604      	mov	r4, r0
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fa45 	bl	800725c <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	601c      	str	r4, [r3, #0]
	    break;
 8006dd6:	e005      	b.n	8006de4 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 fa48 	bl	8007274 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8006de4:	2300      	movs	r3, #0
      }
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd90      	pop	{r4, r7, pc}

08006dee <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bf14      	ite	ne
 8006dfc:	2301      	movne	r3, #1
 8006dfe:	2300      	moveq	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8006e24:	b590      	push	{r4, r7, lr}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8006e2e:	6838      	ldr	r0, [r7, #0]
 8006e30:	f7ff ffed 	bl	8006e0e <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e34:	4603      	mov	r3, r0
 8006e36:	4622      	mov	r2, r4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fa54 	bl	80072e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd90      	pop	{r4, r7, pc}

08006e48 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fa61 	bl	8007318 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8006e56:	4603      	mov	r3, r0
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fa6d 	bl	8007338 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8006e5e:	bf00      	nop
      }
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8006e66:	b590      	push	{r4, r7, lr}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	4613      	mov	r3, r2
 8006e72:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d109      	bne.n	8006e8e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006e7a:	68b8      	ldr	r0, [r7, #8]
 8006e7c:	f000 fa4c 	bl	8007318 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8006e80:	4604      	mov	r4, r0
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fa68 	bl	8007358 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	601c      	str	r4, [r3, #0]
	    break;
 8006e8c:	e005      	b.n	8006e9a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006e8e:	79fb      	ldrb	r3, [r7, #7]
 8006e90:	461a      	mov	r2, r3
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fa6b 	bl	8007370 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8006e9a:	2300      	movs	r3, #0
      }
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd90      	pop	{r4, r7, pc}

08006ea4 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	80fb      	strh	r3, [r7, #6]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff fd43 	bl	8006948 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8006ec2:	4a10      	ldr	r2, [pc, #64]	@ (8006f04 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	797a      	ldrb	r2, [r7, #5]
 8006ecc:	711a      	strb	r2, [r3, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f00d fcca 	bl	8014872 <memset>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe f9cb 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8006eec:	797a      	ldrb	r2, [r7, #5]
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fa76 	bl	80073e4 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	08018938 	.word	0x08018938

08006f08 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4611      	mov	r1, r2
 8006f14:	461a      	mov	r2, r3
 8006f16:	460b      	mov	r3, r1
 8006f18:	80fb      	strh	r3, [r7, #6]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff fd11 	bl	8006948 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8006f26:	4a10      	ldr	r2, [pc, #64]	@ (8006f68 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	797a      	ldrb	r2, [r7, #5]
 8006f30:	711a      	strb	r2, [r3, #4]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3308      	adds	r3, #8
 8006f36:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f00d fc98 	bl	8014872 <memset>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe f999 	bl	8005282 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8006f50:	797a      	ldrb	r2, [r7, #5]
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	4619      	mov	r1, r3
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 fa62 	bl	8007420 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	08018918 	.word	0x08018918

08006f6c <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	807b      	strh	r3, [r7, #2]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff fd1f 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3308      	adds	r3, #8
 8006f92:	787a      	ldrb	r2, [r7, #1]
 8006f94:	8879      	ldrh	r1, [r7, #2]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f009 fda6 	bl	8010aec <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fa53 	bl	800745c <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fa fce4 	bl	8001998 <_ZNKSt14_Function_base8_M_emptyEv>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 8006fd6:	f00c fb7b 	bl	80136d0 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	4798      	blx	r3
 8006fe4:	bf00      	nop
      }
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fa fcce 	bl	8001998 <_ZNKSt14_Function_base8_M_emptyEv>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8007002:	f00c fb65 	bl	80136d0 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4610      	mov	r0, r2
 800700e:	4798      	blx	r3
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
      }
 8007014:	4610      	mov	r0, r2
 8007016:	4619      	mov	r1, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af02      	add	r7, sp, #8
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	807b      	strh	r3, [r7, #2]
 800702a:	4613      	mov	r3, r2
 800702c:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fcc6 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3308      	adds	r3, #8
 8007044:	787a      	ldrb	r2, [r7, #1]
 8007046:	8879      	ldrh	r1, [r7, #2]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	4613      	mov	r3, r2
 800704c:	f240 2203 	movw	r2, #515	@ 0x203
 8007050:	f009 fd4c 	bl	8010aec <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 800705c:	b590      	push	{r4, r7, lr}
 800705e:	b089      	sub	sp, #36	@ 0x24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	4613      	mov	r3, r2
 800706a:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4619      	mov	r1, r3
 8007076:	2008      	movs	r0, #8
 8007078:	f7fa fc1a 	bl	80018b0 <_ZnwjPv>
 800707c:	4604      	mov	r4, r0
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4613      	mov	r3, r2
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	4413      	add	r3, r2
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	4618      	mov	r0, r3
 800708a:	f7f9 fa63 	bl	8000554 <__aeabi_ui2d>
 800708e:	f04f 0200 	mov.w	r2, #0
 8007092:	4b18      	ldr	r3, [pc, #96]	@ (80070f4 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 8007094:	f7f9 fad8 	bl	8000648 <__aeabi_dmul>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4610      	mov	r0, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	f7f9 fdaa 	bl	8000bf8 <__aeabi_d2uiz>
 80070a4:	4603      	mov	r3, r0
 80070a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070a8:	4619      	mov	r1, r3
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7fa fd68 	bl	8001b80 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 80070b0:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	3308      	adds	r3, #8
 80070b6:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4619      	mov	r1, r3
 80070bc:	2044      	movs	r0, #68	@ 0x44
 80070be:	f7fa fbf7 	bl	80018b0 <_ZnwjPv>
 80070c2:	4604      	mov	r4, r0
 80070c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7fa fd3c 	bl	8001b48 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 80070d0:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	79fa      	ldrb	r2, [r7, #7]
 80070d6:	69b9      	ldr	r1, [r7, #24]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f9cb 	bl	8007474 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	601a      	str	r2, [r3, #0]
        return ptr;
 80070e8:	693b      	ldr	r3, [r7, #16]
    }
 80070ea:	4618      	mov	r0, r3
 80070ec:	3724      	adds	r7, #36	@ 0x24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd90      	pop	{r4, r7, pc}
 80070f2:	bf00      	nop
 80070f4:	40040000 	.word	0x40040000

080070f8 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	4622      	mov	r2, r4
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	4618      	mov	r0, r3
 8007112:	f000 f9f3 	bl	80074fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f9fe 	bl	800751a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bd90      	pop	{r4, r7, pc}

08007128 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8007148:	6838      	ldr	r0, [r7, #0]
 800714a:	f000 f9f1 	bl	8007530 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800714e:	4602      	mov	r2, r0
 8007150:	f107 0308 	add.w	r3, r7, #8
 8007154:	4611      	mov	r1, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f9f5 	bl	8007546 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800715c:	f107 0308 	add.w	r3, r7, #8
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fa0d 	bl	8007582 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8007168:	f107 0308 	add.w	r3, r7, #8
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe f83f 	bl	80051f0 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8007172:	687b      	ldr	r3, [r7, #4]
      }
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fa12 	bl	80075b0 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800718c:	4603      	mov	r3, r0
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fa11 	bl	80075ca <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fa14 	bl	80075ea <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80071c2:	4603      	mov	r3, r0
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fa13 	bl	8007602 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80071dc:	4603      	mov	r3, r0
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80071e6:	b590      	push	{r4, r7, lr}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7fa fba7 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 80071f8:	4603      	mov	r3, r0
 80071fa:	4619      	mov	r1, r3
 80071fc:	2004      	movs	r0, #4
 80071fe:	f7fa fb57 	bl	80018b0 <_ZnwjPv>
 8007202:	4604      	mov	r4, r0
 8007204:	68b8      	ldr	r0, [r7, #8]
 8007206:	f7ff fda4 	bl	8006d52 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800720a:	4603      	mov	r3, r0
 800720c:	6023      	str	r3, [r4, #0]
	  }
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	bd90      	pop	{r4, r7, pc}

08007216 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f9fb 	bl	800761a <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8007224:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 fa03 	bl	8007632 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 800722c:	4603      	mov	r3, r0
	}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007236:	b590      	push	{r4, r7, lr}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fa02 	bl	8007648 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007244:	4603      	mov	r3, r0
 8007246:	4619      	mov	r1, r3
 8007248:	4620      	mov	r0, r4
 800724a:	f000 fa08 	bl	800765e <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8007252:	4610      	mov	r0, r2
 8007254:	4619      	mov	r1, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bd90      	pop	{r4, r7, pc}

0800725c <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access() noexcept
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7fa fb6e 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 800726a:	4603      	mov	r3, r0
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	2b03      	cmp	r3, #3
 8007286:	d82a      	bhi.n	80072de <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8007288:	a201      	add	r2, pc, #4	@ (adr r2, 8007290 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072a1 	.word	0x080072a1
 8007294:	080072af 	.word	0x080072af
 8007298:	080072c3 	.word	0x080072c3
 800729c:	080072d5 	.word	0x080072d5
	      __dest._M_access<const type_info*>() = nullptr;
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f9ee 	bl	8007682 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]
	      break;
 80072ac:	e017      	b.n	80072de <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80072ae:	68b8      	ldr	r0, [r7, #8]
 80072b0:	f7ff ffb1 	bl	8007216 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80072b4:	4604      	mov	r4, r0
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff ffd0 	bl	800725c <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 80072bc:	4603      	mov	r3, r0
 80072be:	601c      	str	r4, [r3, #0]
	      break;
 80072c0:	e00d      	b.n	80072de <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80072c2:	68b8      	ldr	r0, [r7, #8]
 80072c4:	f7ff ffa7 	bl	8007216 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80072c8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80072ca:	4619      	mov	r1, r3
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f9e4 	bl	800769a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80072d2:	e004      	b.n	80072de <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80072d4:	4621      	mov	r1, r4
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f9f1 	bl	80076be <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80072dc:	bf00      	nop
	  return false;
 80072de:	2300      	movs	r3, #0
	}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd90      	pop	{r4, r7, pc}

080072e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80072e8:	b590      	push	{r4, r7, lr}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7fa fb26 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 80072fa:	4603      	mov	r3, r0
 80072fc:	4619      	mov	r1, r3
 80072fe:	2004      	movs	r0, #4
 8007300:	f7fa fad6 	bl	80018b0 <_ZnwjPv>
 8007304:	4604      	mov	r4, r0
 8007306:	68b8      	ldr	r0, [r7, #8]
 8007308:	f7ff fd81 	bl	8006e0e <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800730c:	4603      	mov	r3, r0
 800730e:	6023      	str	r3, [r4, #0]
	  }
 8007310:	bf00      	nop
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	bd90      	pop	{r4, r7, pc}

08007318 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f9d8 	bl	80076d6 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8007326:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f9e0 	bl	80076ee <_ZSt11__addressofIKPFvvEEPT_RS3_>
 800732e:	4603      	mov	r3, r0
	}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007338:	b590      	push	{r4, r7, lr}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f9df 	bl	8007704 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007346:	4603      	mov	r3, r0
 8007348:	4619      	mov	r1, r3
 800734a:	4620      	mov	r0, r4
 800734c:	f000 f9e5 	bl	800771a <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	bd90      	pop	{r4, r7, pc}

08007358 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access() noexcept
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7fa faf0 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8007366:	4603      	mov	r3, r0
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800737e:	79fb      	ldrb	r3, [r7, #7]
 8007380:	2b03      	cmp	r3, #3
 8007382:	d82a      	bhi.n	80073da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8007384:	a201      	add	r2, pc, #4	@ (adr r2, 800738c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	0800739d 	.word	0x0800739d
 8007390:	080073ab 	.word	0x080073ab
 8007394:	080073bf 	.word	0x080073bf
 8007398:	080073d1 	.word	0x080073d1
	      __dest._M_access<const type_info*>() = nullptr;
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f970 	bl	8007682 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
	      break;
 80073a8:	e017      	b.n	80073da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80073aa:	68b8      	ldr	r0, [r7, #8]
 80073ac:	f7ff ffb4 	bl	8007318 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80073b0:	4604      	mov	r4, r0
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff ffd0 	bl	8007358 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 80073b8:	4603      	mov	r3, r0
 80073ba:	601c      	str	r4, [r3, #0]
	      break;
 80073bc:	e00d      	b.n	80073da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 80073be:	68b8      	ldr	r0, [r7, #8]
 80073c0:	f7ff ffaa 	bl	8007318 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80073c4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 80073c6:	4619      	mov	r1, r3
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f9b5 	bl	8007738 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 80073ce:	e004      	b.n	80073da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 80073d0:	4621      	mov	r1, r4
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f9c2 	bl	800775c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80073d8:	bf00      	nop
	  return false;
 80073da:	2300      	movs	r3, #0
	}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd90      	pop	{r4, r7, pc}

080073e4 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af02      	add	r7, sp, #8
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	807b      	strh	r3, [r7, #2]
 80073f0:	4613      	mov	r3, r2
 80073f2:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff fae3 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3308      	adds	r3, #8
 800740a:	787a      	ldrb	r2, [r7, #1]
 800740c:	8879      	ldrh	r1, [r7, #2]
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	4613      	mov	r3, r2
 8007412:	220c      	movs	r2, #12
 8007414:	f009 fb6a 	bl	8010aec <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af02      	add	r7, sp, #8
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	807b      	strh	r3, [r7, #2]
 800742c:	4613      	mov	r3, r2
 800742e:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff fac5 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3308      	adds	r3, #8
 8007446:	787a      	ldrb	r2, [r7, #1]
 8007448:	8879      	ldrh	r1, [r7, #2]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	220c      	movs	r2, #12
 8007450:	f009 fb4c 	bl	8010aec <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8007474:	b5b0      	push	{r4, r5, r7, lr}
 8007476:	b08e      	sub	sp, #56	@ 0x38
 8007478:	af00      	add	r7, sp, #0
 800747a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800747c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800747e:	4613      	mov	r3, r2
 8007480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8007484:	481a      	ldr	r0, [pc, #104]	@ (80074f0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8007486:	f7ff f93b 	bl	8006700 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 8007490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007494:	3310      	adds	r3, #16
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fd92 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 800749c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80074a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f976 	bl	8007794 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80074a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80074ac:	4619      	mov	r1, r3
 80074ae:	4810      	ldr	r0, [pc, #64]	@ (80074f0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 80074b0:	f000 f9a1 	bl	80077f6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 80074b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 f97a 	bl	80077b2 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 80074be:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80074c0:	463b      	mov	r3, r7
 80074c2:	4a0c      	ldr	r2, [pc, #48]	@ (80074f4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 80074c4:	490c      	ldr	r1, [pc, #48]	@ (80074f8 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 80074c6:	4618      	mov	r0, r3
 80074c8:	f00b fdec 	bl	80130a4 <canardInit>
 80074cc:	3420      	adds	r4, #32
 80074ce:	463d      	mov	r5, r7
 80074d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 80074dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074de:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80074e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 80074e6:	bf00      	nop
 80074e8:	3738      	adds	r7, #56	@ 0x38
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bdb0      	pop	{r4, r5, r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000a40 	.word	0x20000a40
 80074f4:	08001a8d 	.word	0x08001a8d
 80074f8:	08001a49 	.word	0x08001a49

080074fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f9a4 	bl	8007858 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
	{ }
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3304      	adds	r3, #4
 800755c:	4618      	mov	r0, r3
 800755e:	f7fd fe55 	bl	800520c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	1d1a      	adds	r2, r3, #4
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f000 f98b 	bl	8007888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]
      }
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	4611      	mov	r1, r2
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f98d 	bl	80078b2 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	1d1a      	adds	r2, r3, #4
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	3304      	adds	r3, #4
 80075a0:	4619      	mov	r1, r3
 80075a2:	4610      	mov	r0, r2
 80075a4:	f000 f970 	bl	8007888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 f998 	bl	80078f0 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80075c0:	4603      	mov	r3, r0
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f998 	bl	8007908 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f9a0 	bl	8007920 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9a2 	bl	800793c <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 80075f8:	4603      	mov	r3, r0
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f9a3 	bl	8007956 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007610:	4603      	mov	r3, r0
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const noexcept
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fa f99a 	bl	800195c <_ZNKSt9_Any_data9_M_accessEv>
 8007628:	4603      	mov	r3, r0
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	7138      	strb	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007668:	6838      	ldr	r0, [r7, #0]
 800766a:	f7ff ffed 	bl	8007648 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800766e:	4603      	mov	r3, r0
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4798      	blx	r3
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4610      	mov	r0, r2
 800767a:	4619      	mov	r1, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7fa f95b 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8007690:	4603      	mov	r3, r0
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800769a:	b590      	push	{r4, r7, lr}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80076a4:	6838      	ldr	r0, [r7, #0]
 80076a6:	f000 f962 	bl	800796e <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80076aa:	4603      	mov	r3, r0
 80076ac:	4622      	mov	r2, r4
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f967 	bl	8007984 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd90      	pop	{r4, r7, pc}

080076be <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f974 	bl	80079b6 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const noexcept
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fa f93c 	bl	800195c <_ZNKSt9_Any_data9_M_accessEv>
 80076e4:	4603      	mov	r3, r0
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	7138      	strb	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007724:	6838      	ldr	r0, [r7, #0]
 8007726:	f7ff ffed 	bl	8007704 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800772a:	4603      	mov	r3, r0
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4798      	blx	r3
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007742:	6838      	ldr	r0, [r7, #0]
 8007744:	f000 f943 	bl	80079ce <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007748:	4603      	mov	r3, r0
 800774a:	4622      	mov	r2, r4
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f948 	bl	80079e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	bd90      	pop	{r4, r7, pc}

0800775c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f955 	bl	8007a16 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	4611      	mov	r1, r2
 8007784:	4618      	mov	r0, r3
 8007786:	f000 f952 	bl	8007a2e <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff ffe6 	bl	8007774 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80077b2:	b590      	push	{r4, r7, lr}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 f94a 	bl	8007a56 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80077c2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00c      	beq.n	80077e6 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f94f 	bl	8007a70 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 80077d2:	4604      	mov	r4, r0
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f958 	bl	8007a8a <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 80077da:	4603      	mov	r3, r0
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4619      	mov	r1, r3
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 f95d 	bl	8007aa0 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
      }
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd90      	pop	{r4, r7, pc}

080077f6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8007800:	6838      	ldr	r0, [r7, #0]
 8007802:	f000 f972 	bl	8007aea <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8007806:	4603      	mov	r3, r0
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f959 	bl	8007ac2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8007810:	6838      	ldr	r0, [r7, #0]
 8007812:	f000 f92d 	bl	8007a70 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8007816:	4603      	mov	r3, r0
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f980 	bl	8007b1e <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 800781e:	4602      	mov	r2, r0
 8007820:	f107 030c 	add.w	r3, r7, #12
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f000 f984 	bl	8007b34 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f969 	bl	8007b04 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8007832:	687b      	ldr	r3, [r7, #4]
	}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3308      	adds	r3, #8
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe ff95 	bl	8006778 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8007858:	b590      	push	{r4, r7, lr}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8007868:	2010      	movs	r0, #16
 800786a:	f00b ff20 	bl	80136ae <_Znwj>
 800786e:	4603      	mov	r3, r0
 8007870:	461c      	mov	r4, r3
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	4620      	mov	r0, r4
 8007876:	f000 f969 	bl	8007b4c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	601c      	str	r4, [r3, #0]
	}
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	bd90      	pop	{r4, r7, pc}

08007888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	601a      	str	r2, [r3, #0]
      }
 80078a6:	bf00      	nop
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f95b 	bl	8007b78 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80078c2:	4603      	mov	r3, r0
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80078c8:	6838      	ldr	r0, [r7, #0]
 80078ca:	f000 f955 	bl	8007b78 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80078ce:	4603      	mov	r3, r0
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80078d6:	f107 030c 	add.w	r3, r7, #12
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f94c 	bl	8007b78 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80078e0:	4603      	mov	r3, r0
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	601a      	str	r2, [r3, #0]
    }
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f948 	bl	8007b8e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 80078fe:	4603      	mov	r3, r0
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f949 	bl	8007ba8 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f939 	bl	8007bbe <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 800794c:	4603      	mov	r3, r0
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f938 	bl	8007bd4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8007964:	4603      	mov	r3, r0
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8007984:	b590      	push	{r4, r7, lr}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7f9 ffd8 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8007996:	4603      	mov	r3, r0
 8007998:	4619      	mov	r1, r3
 800799a:	2004      	movs	r0, #4
 800799c:	f7f9 ff88 	bl	80018b0 <_ZnwjPv>
 80079a0:	4604      	mov	r4, r0
 80079a2:	68b8      	ldr	r0, [r7, #8]
 80079a4:	f7ff ffe3 	bl	800796e <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80079a8:	4603      	mov	r3, r0
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6023      	str	r3, [r4, #0]
	  }
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd90      	pop	{r4, r7, pc}

080079b6 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access() noexcept
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7f9 ffc1 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 80079c4:	4603      	mov	r3, r0
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80079e4:	b590      	push	{r4, r7, lr}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7f9 ffa8 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 80079f6:	4603      	mov	r3, r0
 80079f8:	4619      	mov	r1, r3
 80079fa:	2004      	movs	r0, #4
 80079fc:	f7f9 ff58 	bl	80018b0 <_ZnwjPv>
 8007a00:	4604      	mov	r4, r0
 8007a02:	68b8      	ldr	r0, [r7, #8]
 8007a04:	f7ff ffe3 	bl	80079ce <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6023      	str	r3, [r4, #0]
	  }
 8007a0e:	bf00      	nop
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd90      	pop	{r4, r7, pc}

08007a16 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access() noexcept
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7f9 ff91 	bl	8001946 <_ZNSt9_Any_data9_M_accessEv>
 8007a24:	4603      	mov	r3, r0
 8007a26:	4618      	mov	r0, r3
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8007a2e:	b590      	push	{r4, r7, lr}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f8d6 	bl	8007bec <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8007a40:	683c      	ldr	r4, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f807 	bl	8007a56 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	601c      	str	r4, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd90      	pop	{r4, r7, pc}

08007a56 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 f8d0 	bl	8007c06 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007a66:	4603      	mov	r3, r0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f8d0 	bl	8007c20 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8007a80:	4603      	mov	r3, r0
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d004      	beq.n	8007aba <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	320c      	adds	r2, #12
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	4790      	blx	r2
      }
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 8007ac2:	b590      	push	{r4, r7, lr}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8007acc:	687c      	ldr	r4, [r7, #4]
 8007ace:	463b      	mov	r3, r7
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 f8b2 	bl	8007c3a <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4619      	mov	r1, r3
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 f8b7 	bl	8007c50 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd90      	pop	{r4, r7, pc}

08007aea <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 f8cb 	bl	8007c90 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8007afa:	4603      	mov	r3, r0
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 f8d3 	bl	8007cba <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8007b14:	4603      	mov	r3, r0
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 f8bb 	bl	8007cd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8007b5e:	4a05      	ldr	r2, [pc, #20]	@ (8007b74 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	60da      	str	r2, [r3, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	080188ac 	.word	0x080188ac

08007b78 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 f8b1 	bl	8007d00 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f89a 	bl	8007d16 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8007be2:	4603      	mov	r3, r0
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f898 	bl	8007d2c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 f89b 	bl	8007d4c <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007c16:	4603      	mov	r3, r0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 f89a 	bl	8007d64 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007c30:	4603      	mov	r3, r0
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8007c50:	b590      	push	{r4, r7, lr}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f88e 	bl	8007d7c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007c60:	4603      	mov	r3, r0
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8007c66:	683c      	ldr	r4, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f887 	bl	8007d7c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d007      	beq.n	8007c88 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f81e 	bl	8007cba <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	68f9      	ldr	r1, [r7, #12]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 f887 	bl	8007d96 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8007c88:	bf00      	nop
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd90      	pop	{r4, r7, pc}

08007c90 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff fedc 	bl	8007a56 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff fed6 	bl	8007a56 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]
	return __p;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
      }
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 f877 	bl	8007db8 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8007cdc:	4a07      	ldr	r2, [pc, #28]	@ (8007cfc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	605a      	str	r2, [r3, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	609a      	str	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	0801896c 	.word	0x0801896c

08007d00 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f84b 	bl	8007dd0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 f853 	bl	8007de8 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f855 	bl	8007e04 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f856 	bl	8007e1e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007d72:	4603      	mov	r3, r0
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f855 	bl	8007e36 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	320c      	adds	r2, #12
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	4790      	blx	r2
      }
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f845 	bl	8007e50 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f845 	bl	8007e68 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 f835 	bl	8007e7e <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 8007e14:	4603      	mov	r3, r0
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f834 	bl	8007e94 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 f833 	bl	8007eac <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8007e46:	4603      	mov	r3, r0
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f833 	bl	8007ec4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f81d 	bl	8007edc <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f81c 	bl	8007ef2 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f81d 	bl	8007f0c <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 f810 	bl	8007f22 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8007f02:	4603      	mov	r3, r0
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	4a05      	ldr	r2, [pc, #20]	@ (8007f58 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe fe5b 	bl	8006c04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	080188ac 	.word	0x080188ac

08007f5c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff ffe7 	bl	8007f38 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007f6a:	2110      	movs	r1, #16
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f00b fb9c 	bl	80136aa <_ZdlPvj>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3310      	adds	r3, #16
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7f9 fd23 	bl	80019d4 <_ZNSt8functionIFvvEED1Ev>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7f9 fd12 	bl	80019ba <_ZNSt8functionIFyvEED1Ev>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <_Z41__static_initialization_and_destruction_0ii>:

}
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	@ 0x28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d122      	bne.n	8007ff6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d11d      	bne.n	8007ff6 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8007fba:	f107 0308 	add.w	r3, r7, #8
 8007fbe:	4917      	ldr	r1, [pc, #92]	@ (800801c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fe fc0d 	bl	80067e0 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8007fc6:	f107 0318 	add.w	r3, r7, #24
 8007fca:	4915      	ldr	r1, [pc, #84]	@ (8008020 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe fc37 	bl	8006840 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8007fd2:	f107 0218 	add.w	r2, r7, #24
 8007fd6:	f107 0308 	add.w	r3, r7, #8
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4811      	ldr	r0, [pc, #68]	@ (8008024 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007fde:	f7f9 fd06 	bl	80019ee <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8007fe2:	f107 0318 	add.w	r3, r7, #24
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7f9 fcf4 	bl	80019d4 <_ZNSt8functionIFvvEED1Ev>
 8007fec:	f107 0308 	add.w	r3, r7, #8
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7f9 fce2 	bl	80019ba <_ZNSt8functionIFyvEED1Ev>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008002:	4293      	cmp	r3, r2
 8008004:	d105      	bne.n	8008012 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008006:	4807      	ldr	r0, [pc, #28]	@ (8008024 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008008:	f7ff ffb8 	bl	8007f7c <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 800800c:	4806      	ldr	r0, [pc, #24]	@ (8008028 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800800e:	f7fd f948 	bl	80052a2 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8008012:	bf00      	nop
 8008014:	3728      	adds	r7, #40	@ 0x28
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	08005235 	.word	0x08005235
 8008020:	08005229 	.word	0x08005229
 8008024:	2000031c 	.word	0x2000031c
 8008028:	20000314 	.word	0x20000314

0800802c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68dc      	ldr	r4, [r3, #12]
 8008038:	2c00      	cmp	r4, #0
 800803a:	d006      	beq.n	800804a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 800803c:	4620      	mov	r0, r4
 800803e:	f7ff fbfd 	bl	800783c <_ZN15CyphalInterfaceD1Ev>
 8008042:	210c      	movs	r1, #12
 8008044:	4620      	mov	r0, r4
 8008046:	f00b fb30 	bl	80136aa <_ZdlPvj>
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	bd90      	pop	{r4, r7, pc}

08008052 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
      { delete this; }
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff ff7b 	bl	8007f5c <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8008078:	2300      	movs	r3, #0
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 8008086:	b580      	push	{r7, lr}
 8008088:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 800808c:	af00      	add	r7, sp, #0
 800808e:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8008092:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8008096:	6018      	str	r0, [r3, #0]
 8008098:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800809c:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80080a0:	6019      	str	r1, [r3, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 80080a2:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80080a6:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe fc8b 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80080b6:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80080ba:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80080be:	f107 0108 	add.w	r1, r7, #8
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	f000 f874 	bl	80081b0 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 80080c8:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80080cc:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3304      	adds	r3, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 80080dc:	f5a2 7248 	sub.w	r2, r2, #800	@ 0x320
 80080e0:	f107 0108 	add.w	r1, r7, #8
 80080e4:	f507 7048 	add.w	r0, r7, #800	@ 0x320
 80080e8:	f5a0 7047 	sub.w	r0, r0, #796	@ 0x31c
 80080ec:	6812      	ldr	r2, [r2, #0]
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	4798      	blx	r3
    }
 80080f2:	bf00      	nop
 80080f4:	f507 7748 	add.w	r7, r7, #800	@ 0x320
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <_ZN20AbstractSubscriptionI15NodeInfoRequestE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe fc5d 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008112:	f107 030c 	add.w	r3, r7, #12
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4619      	mov	r1, r3
 800811a:	f000 f86a 	bl	80081f2 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3304      	adds	r3, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f107 010c 	add.w	r1, r7, #12
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
    }
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fc3f 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800814e:	f107 030c 	add.w	r3, r7, #12
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4619      	mov	r1, r3
 8008156:	f000 f86c 	bl	8008232 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3304      	adds	r3, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f107 010c 	add.w	r1, r7, #12
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
    }
 800816c:	bf00      	nop
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe fc21 	bl	80069cc <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800818a:	f107 0308 	add.w	r3, r7, #8
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	4619      	mov	r1, r3
 8008192:	f000 f86e 	bl	8008272 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3304      	adds	r3, #4
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f107 0108 	add.w	r1, r7, #8
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
    }
 80081a8:	bf00      	nop
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 80081bc:	f240 2303 	movw	r3, #515	@ 0x203
 80081c0:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	f107 0214 	add.w	r2, r7, #20
 80081ca:	4619      	mov	r1, r3
 80081cc:	68b8      	ldr	r0, [r7, #8]
 80081ce:	f7fc fc79 	bl	8004ac4 <uavcan_register_Access_Request_1_0_deserialize_>
 80081d2:	4603      	mov	r3, r0
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	09db      	lsrs	r3, r3, #7
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	3310      	adds	r3, #16
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe feeb 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 80081ea:	bf00      	nop
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b086      	sub	sp, #24
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	f107 0214 	add.w	r2, r7, #20
 800820a:	4619      	mov	r1, r3
 800820c:	68b8      	ldr	r0, [r7, #8]
 800820e:	f7fc fe45 	bl	8004e9c <uavcan_node_GetInfo_Request_1_0_deserialize_>
 8008212:	4603      	mov	r3, r0
 8008214:	b2db      	uxtb	r3, r3
 8008216:	09db      	lsrs	r3, r3, #7
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	3310      	adds	r3, #16
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fecb 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
}
 800822a:	bf00      	nop
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 800823e:	230c      	movs	r3, #12
 8008240:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f107 0214 	add.w	r2, r7, #20
 800824a:	4619      	mov	r1, r3
 800824c:	68b8      	ldr	r0, [r7, #8]
 800824e:	f7fa f92f 	bl	80024b0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 8008252:	4603      	mov	r3, r0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	09db      	lsrs	r3, r3, #7
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	3310      	adds	r3, #16
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe feab 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
}
 800826a:	bf00      	nop
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 8008272:	b580      	push	{r7, lr}
 8008274:	b086      	sub	sp, #24
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 800827e:	230c      	movs	r3, #12
 8008280:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	f107 0214 	add.w	r2, r7, #20
 800828a:	4619      	mov	r1, r3
 800828c:	68b8      	ldr	r0, [r7, #8]
 800828e:	f7f9 ff9d 	bl	80021cc <uavcan_node_Heartbeat_1_0_deserialize_>
 8008292:	4603      	mov	r3, r0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	09db      	lsrs	r3, r3, #7
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d005      	beq.n	80082aa <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	3310      	adds	r3, #16
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe fe8b 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
}
 80082aa:	bf00      	nop
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <_GLOBAL__sub_I_buffer>:
 80082b2:	b580      	push	{r7, lr}
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80082ba:	2001      	movs	r0, #1
 80082bc:	f7ff fe70 	bl	8007fa0 <_Z41__static_initialization_and_destruction_0ii>
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <_GLOBAL__sub_D_buffer>:
 80082c2:	b580      	push	{r7, lr}
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80082ca:	2000      	movs	r0, #0
 80082cc:	f7ff fe68 	bl	8007fa0 <_Z41__static_initialization_and_destruction_0ii>
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80082da:	4b16      	ldr	r3, [pc, #88]	@ (8008334 <MX_DMA_Init+0x60>)
 80082dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082de:	4a15      	ldr	r2, [pc, #84]	@ (8008334 <MX_DMA_Init+0x60>)
 80082e0:	f043 0304 	orr.w	r3, r3, #4
 80082e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80082e6:	4b13      	ldr	r3, [pc, #76]	@ (8008334 <MX_DMA_Init+0x60>)
 80082e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	607b      	str	r3, [r7, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80082f2:	4b10      	ldr	r3, [pc, #64]	@ (8008334 <MX_DMA_Init+0x60>)
 80082f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008334 <MX_DMA_Init+0x60>)
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80082fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008334 <MX_DMA_Init+0x60>)
 8008300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800830a:	2200      	movs	r2, #0
 800830c:	2100      	movs	r1, #0
 800830e:	200b      	movs	r0, #11
 8008310:	f001 ffb5 	bl	800a27e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008314:	200b      	movs	r0, #11
 8008316:	f001 ffcc 	bl	800a2b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800831a:	2200      	movs	r2, #0
 800831c:	2100      	movs	r1, #0
 800831e:	200c      	movs	r0, #12
 8008320:	f001 ffad 	bl	800a27e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008324:	200c      	movs	r0, #12
 8008326:	f001 ffc4 	bl	800a2b2 <HAL_NVIC_EnableIRQ>

}
 800832a:	bf00      	nop
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	40021000 	.word	0x40021000

08008338 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800833c:	4b20      	ldr	r3, [pc, #128]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 800833e:	4a21      	ldr	r2, [pc, #132]	@ (80083c4 <MX_FDCAN1_Init+0x8c>)
 8008340:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8008342:	4b1f      	ldr	r3, [pc, #124]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 8008344:	2200      	movs	r2, #0
 8008346:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8008348:	4b1d      	ldr	r3, [pc, #116]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 800834a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800834e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8008350:	4b1b      	ldr	r3, [pc, #108]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 8008352:	2200      	movs	r2, #0
 8008354:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8008356:	4b1a      	ldr	r3, [pc, #104]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 8008358:	2201      	movs	r2, #1
 800835a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 800835c:	4b18      	ldr	r3, [pc, #96]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 800835e:	2201      	movs	r2, #1
 8008360:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8008362:	4b17      	ldr	r3, [pc, #92]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 8008364:	2200      	movs	r2, #0
 8008366:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8008368:	4b15      	ldr	r3, [pc, #84]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 800836a:	2204      	movs	r2, #4
 800836c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800836e:	4b14      	ldr	r3, [pc, #80]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 8008370:	2201      	movs	r2, #1
 8008372:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 8008374:	4b12      	ldr	r3, [pc, #72]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 8008376:	221d      	movs	r2, #29
 8008378:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 800837a:	4b11      	ldr	r3, [pc, #68]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 800837c:	220a      	movs	r2, #10
 800837e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8008380:	4b0f      	ldr	r3, [pc, #60]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 8008382:	2204      	movs	r2, #4
 8008384:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8008386:	4b0e      	ldr	r3, [pc, #56]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 8008388:	2201      	movs	r2, #1
 800838a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800838c:	4b0c      	ldr	r3, [pc, #48]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 800838e:	2202      	movs	r2, #2
 8008390:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8008392:	4b0b      	ldr	r3, [pc, #44]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 8008394:	2202      	movs	r2, #2
 8008396:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8008398:	4b09      	ldr	r3, [pc, #36]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 800839a:	2200      	movs	r2, #0
 800839c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 800839e:	4b08      	ldr	r3, [pc, #32]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 80083a0:	2203      	movs	r2, #3
 80083a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80083a4:	4b06      	ldr	r3, [pc, #24]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80083aa:	4805      	ldr	r0, [pc, #20]	@ (80083c0 <MX_FDCAN1_Init+0x88>)
 80083ac:	f002 fa24 	bl	800a7f8 <HAL_FDCAN_Init>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80083b6:	f000 fb62 	bl	8008a7e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80083ba:	bf00      	nop
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	200005f4 	.word	0x200005f4
 80083c4:	40006400 	.word	0x40006400

080083c8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b09e      	sub	sp, #120	@ 0x78
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	605a      	str	r2, [r3, #4]
 80083da:	609a      	str	r2, [r3, #8]
 80083dc:	60da      	str	r2, [r3, #12]
 80083de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80083e0:	f107 0310 	add.w	r3, r7, #16
 80083e4:	2254      	movs	r2, #84	@ 0x54
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f00c fa42 	bl	8014872 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a20      	ldr	r2, [pc, #128]	@ (8008474 <HAL_FDCAN_MspInit+0xac>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d138      	bne.n	800846a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80083f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80083fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80083fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008402:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008404:	f107 0310 	add.w	r3, r7, #16
 8008408:	4618      	mov	r0, r3
 800840a:	f005 fb35 	bl	800da78 <HAL_RCCEx_PeriphCLKConfig>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8008414:	f000 fb33 	bl	8008a7e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8008418:	4b17      	ldr	r3, [pc, #92]	@ (8008478 <HAL_FDCAN_MspInit+0xb0>)
 800841a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800841c:	4a16      	ldr	r2, [pc, #88]	@ (8008478 <HAL_FDCAN_MspInit+0xb0>)
 800841e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008422:	6593      	str	r3, [r2, #88]	@ 0x58
 8008424:	4b14      	ldr	r3, [pc, #80]	@ (8008478 <HAL_FDCAN_MspInit+0xb0>)
 8008426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008430:	4b11      	ldr	r3, [pc, #68]	@ (8008478 <HAL_FDCAN_MspInit+0xb0>)
 8008432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008434:	4a10      	ldr	r2, [pc, #64]	@ (8008478 <HAL_FDCAN_MspInit+0xb0>)
 8008436:	f043 0302 	orr.w	r3, r3, #2
 800843a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800843c:	4b0e      	ldr	r3, [pc, #56]	@ (8008478 <HAL_FDCAN_MspInit+0xb0>)
 800843e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008448:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800844c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800844e:	2302      	movs	r3, #2
 8008450:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008452:	2300      	movs	r3, #0
 8008454:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008456:	2300      	movs	r3, #0
 8008458:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800845a:	2309      	movs	r3, #9
 800845c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800845e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008462:	4619      	mov	r1, r3
 8008464:	4805      	ldr	r0, [pc, #20]	@ (800847c <HAL_FDCAN_MspInit+0xb4>)
 8008466:	f002 fe7b 	bl	800b160 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800846a:	bf00      	nop
 800846c:	3778      	adds	r7, #120	@ 0x78
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	40006400 	.word	0x40006400
 8008478:	40021000 	.word	0x40021000
 800847c:	48000400 	.word	0x48000400

08008480 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	@ 0x28
 8008484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008486:	f107 0314 	add.w	r3, r7, #20
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	605a      	str	r2, [r3, #4]
 8008490:	609a      	str	r2, [r3, #8]
 8008492:	60da      	str	r2, [r3, #12]
 8008494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008496:	4b4a      	ldr	r3, [pc, #296]	@ (80085c0 <MX_GPIO_Init+0x140>)
 8008498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800849a:	4a49      	ldr	r2, [pc, #292]	@ (80085c0 <MX_GPIO_Init+0x140>)
 800849c:	f043 0320 	orr.w	r3, r3, #32
 80084a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084a2:	4b47      	ldr	r3, [pc, #284]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	613b      	str	r3, [r7, #16]
 80084ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80084ae:	4b44      	ldr	r3, [pc, #272]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084b2:	4a43      	ldr	r2, [pc, #268]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084b4:	f043 0304 	orr.w	r3, r3, #4
 80084b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084ba:	4b41      	ldr	r3, [pc, #260]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084be:	f003 0304 	and.w	r3, r3, #4
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084c6:	4b3e      	ldr	r3, [pc, #248]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ca:	4a3d      	ldr	r2, [pc, #244]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084cc:	f043 0301 	orr.w	r3, r3, #1
 80084d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084d2:	4b3b      	ldr	r3, [pc, #236]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	60bb      	str	r3, [r7, #8]
 80084dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80084de:	4b38      	ldr	r3, [pc, #224]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084e2:	4a37      	ldr	r2, [pc, #220]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084e4:	f043 0308 	orr.w	r3, r3, #8
 80084e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084ea:	4b35      	ldr	r3, [pc, #212]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	607b      	str	r3, [r7, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084f6:	4b32      	ldr	r3, [pc, #200]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084fa:	4a31      	ldr	r2, [pc, #196]	@ (80085c0 <MX_GPIO_Init+0x140>)
 80084fc:	f043 0302 	orr.w	r3, r3, #2
 8008500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008502:	4b2f      	ldr	r3, [pc, #188]	@ (80085c0 <MX_GPIO_Init+0x140>)
 8008504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 800850e:	2200      	movs	r2, #0
 8008510:	f649 3110 	movw	r1, #39696	@ 0x9b10
 8008514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008518:	f002 ffa4 	bl	800b464 <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 800851c:	2200      	movs	r2, #0
 800851e:	2120      	movs	r1, #32
 8008520:	4828      	ldr	r0, [pc, #160]	@ (80085c4 <MX_GPIO_Init+0x144>)
 8008522:	f002 ff9f 	bl	800b464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8008526:	2200      	movs	r2, #0
 8008528:	2104      	movs	r1, #4
 800852a:	4827      	ldr	r0, [pc, #156]	@ (80085c8 <MX_GPIO_Init+0x148>)
 800852c:	f002 ff9a 	bl	800b464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 8008530:	2301      	movs	r3, #1
 8008532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008534:	2303      	movs	r3, #3
 8008536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008538:	2300      	movs	r3, #0
 800853a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 800853c:	f107 0314 	add.w	r3, r7, #20
 8008540:	4619      	mov	r1, r3
 8008542:	4820      	ldr	r0, [pc, #128]	@ (80085c4 <MX_GPIO_Init+0x144>)
 8008544:	f002 fe0c 	bl	800b160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 8008548:	230c      	movs	r3, #12
 800854a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008554:	f107 0314 	add.w	r3, r7, #20
 8008558:	4619      	mov	r1, r3
 800855a:	481a      	ldr	r0, [pc, #104]	@ (80085c4 <MX_GPIO_Init+0x144>)
 800855c:	f002 fe00 	bl	800b160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8008560:	f649 3310 	movw	r3, #39696	@ 0x9b10
 8008564:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008566:	2301      	movs	r3, #1
 8008568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800856a:	2300      	movs	r3, #0
 800856c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800856e:	2300      	movs	r3, #0
 8008570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008572:	f107 0314 	add.w	r3, r7, #20
 8008576:	4619      	mov	r1, r3
 8008578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800857c:	f002 fdf0 	bl	800b160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8008580:	2320      	movs	r3, #32
 8008582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008584:	2301      	movs	r3, #1
 8008586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008588:	2300      	movs	r3, #0
 800858a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800858c:	2300      	movs	r3, #0
 800858e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8008590:	f107 0314 	add.w	r3, r7, #20
 8008594:	4619      	mov	r1, r3
 8008596:	480b      	ldr	r0, [pc, #44]	@ (80085c4 <MX_GPIO_Init+0x144>)
 8008598:	f002 fde2 	bl	800b160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800859c:	2304      	movs	r3, #4
 800859e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085a0:	2301      	movs	r3, #1
 80085a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085a8:	2300      	movs	r3, #0
 80085aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80085ac:	f107 0314 	add.w	r3, r7, #20
 80085b0:	4619      	mov	r1, r3
 80085b2:	4805      	ldr	r0, [pc, #20]	@ (80085c8 <MX_GPIO_Init+0x148>)
 80085b4:	f002 fdd4 	bl	800b160 <HAL_GPIO_Init>

}
 80085b8:	bf00      	nop
 80085ba:	3728      	adds	r7, #40	@ 0x28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40021000 	.word	0x40021000
 80085c4:	48000800 	.word	0x48000800
 80085c8:	48000c00 	.word	0x48000c00

080085cc <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80085d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008640 <MX_I2C4_Init+0x74>)
 80085d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008644 <MX_I2C4_Init+0x78>)
 80085d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 80085d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008640 <MX_I2C4_Init+0x74>)
 80085d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008648 <MX_I2C4_Init+0x7c>)
 80085da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80085dc:	4b18      	ldr	r3, [pc, #96]	@ (8008640 <MX_I2C4_Init+0x74>)
 80085de:	2200      	movs	r2, #0
 80085e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80085e2:	4b17      	ldr	r3, [pc, #92]	@ (8008640 <MX_I2C4_Init+0x74>)
 80085e4:	2201      	movs	r2, #1
 80085e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80085e8:	4b15      	ldr	r3, [pc, #84]	@ (8008640 <MX_I2C4_Init+0x74>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80085ee:	4b14      	ldr	r3, [pc, #80]	@ (8008640 <MX_I2C4_Init+0x74>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80085f4:	4b12      	ldr	r3, [pc, #72]	@ (8008640 <MX_I2C4_Init+0x74>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80085fa:	4b11      	ldr	r3, [pc, #68]	@ (8008640 <MX_I2C4_Init+0x74>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008600:	4b0f      	ldr	r3, [pc, #60]	@ (8008640 <MX_I2C4_Init+0x74>)
 8008602:	2200      	movs	r2, #0
 8008604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8008606:	480e      	ldr	r0, [pc, #56]	@ (8008640 <MX_I2C4_Init+0x74>)
 8008608:	f002 ff5e 	bl	800b4c8 <HAL_I2C_Init>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8008612:	f000 fa34 	bl	8008a7e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008616:	2100      	movs	r1, #0
 8008618:	4809      	ldr	r0, [pc, #36]	@ (8008640 <MX_I2C4_Init+0x74>)
 800861a:	f004 fbb3 	bl	800cd84 <HAL_I2CEx_ConfigAnalogFilter>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8008624:	f000 fa2b 	bl	8008a7e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8008628:	2100      	movs	r1, #0
 800862a:	4805      	ldr	r0, [pc, #20]	@ (8008640 <MX_I2C4_Init+0x74>)
 800862c:	f004 fbf5 	bl	800ce1a <HAL_I2CEx_ConfigDigitalFilter>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8008636:	f000 fa22 	bl	8008a7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800863a:	bf00      	nop
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20000658 	.word	0x20000658
 8008644:	40008400 	.word	0x40008400
 8008648:	00702991 	.word	0x00702991

0800864c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b0a0      	sub	sp, #128	@ 0x80
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008654:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	605a      	str	r2, [r3, #4]
 800865e:	609a      	str	r2, [r3, #8]
 8008660:	60da      	str	r2, [r3, #12]
 8008662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008664:	f107 0318 	add.w	r3, r7, #24
 8008668:	2254      	movs	r2, #84	@ 0x54
 800866a:	2100      	movs	r1, #0
 800866c:	4618      	mov	r0, r3
 800866e:	f00c f900 	bl	8014872 <memset>
  if(i2cHandle->Instance==I2C4)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a5e      	ldr	r2, [pc, #376]	@ (80087f0 <HAL_I2C_MspInit+0x1a4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	f040 80b5 	bne.w	80087e8 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800867e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008682:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8008684:	2300      	movs	r3, #0
 8008686:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008688:	f107 0318 	add.w	r3, r7, #24
 800868c:	4618      	mov	r0, r3
 800868e:	f005 f9f3 	bl	800da78 <HAL_RCCEx_PeriphCLKConfig>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8008698:	f000 f9f1 	bl	8008a7e <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800869c:	4b55      	ldr	r3, [pc, #340]	@ (80087f4 <HAL_I2C_MspInit+0x1a8>)
 800869e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086a0:	4a54      	ldr	r2, [pc, #336]	@ (80087f4 <HAL_I2C_MspInit+0x1a8>)
 80086a2:	f043 0304 	orr.w	r3, r3, #4
 80086a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086a8:	4b52      	ldr	r3, [pc, #328]	@ (80087f4 <HAL_I2C_MspInit+0x1a8>)
 80086aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086b4:	4b4f      	ldr	r3, [pc, #316]	@ (80087f4 <HAL_I2C_MspInit+0x1a8>)
 80086b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086b8:	4a4e      	ldr	r2, [pc, #312]	@ (80087f4 <HAL_I2C_MspInit+0x1a8>)
 80086ba:	f043 0302 	orr.w	r3, r3, #2
 80086be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086c0:	4b4c      	ldr	r3, [pc, #304]	@ (80087f4 <HAL_I2C_MspInit+0x1a8>)
 80086c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80086cc:	2340      	movs	r3, #64	@ 0x40
 80086ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80086d0:	2312      	movs	r3, #18
 80086d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d8:	2300      	movs	r3, #0
 80086da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80086dc:	2308      	movs	r3, #8
 80086de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80086e4:	4619      	mov	r1, r3
 80086e6:	4844      	ldr	r0, [pc, #272]	@ (80087f8 <HAL_I2C_MspInit+0x1ac>)
 80086e8:	f002 fd3a 	bl	800b160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80086ec:	2380      	movs	r3, #128	@ 0x80
 80086ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80086f0:	2312      	movs	r3, #18
 80086f2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f4:	2300      	movs	r3, #0
 80086f6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086f8:	2300      	movs	r3, #0
 80086fa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80086fc:	2303      	movs	r3, #3
 80086fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008700:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008704:	4619      	mov	r1, r3
 8008706:	483d      	ldr	r0, [pc, #244]	@ (80087fc <HAL_I2C_MspInit+0x1b0>)
 8008708:	f002 fd2a 	bl	800b160 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800870c:	4b39      	ldr	r3, [pc, #228]	@ (80087f4 <HAL_I2C_MspInit+0x1a8>)
 800870e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008710:	4a38      	ldr	r2, [pc, #224]	@ (80087f4 <HAL_I2C_MspInit+0x1a8>)
 8008712:	f043 0302 	orr.w	r3, r3, #2
 8008716:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8008718:	4b36      	ldr	r3, [pc, #216]	@ (80087f4 <HAL_I2C_MspInit+0x1a8>)
 800871a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8008724:	4b36      	ldr	r3, [pc, #216]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 8008726:	4a37      	ldr	r2, [pc, #220]	@ (8008804 <HAL_I2C_MspInit+0x1b8>)
 8008728:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 800872a:	4b35      	ldr	r3, [pc, #212]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 800872c:	2216      	movs	r2, #22
 800872e:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008730:	4b33      	ldr	r3, [pc, #204]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 8008732:	2200      	movs	r2, #0
 8008734:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008736:	4b32      	ldr	r3, [pc, #200]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 8008738:	2200      	movs	r2, #0
 800873a:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800873c:	4b30      	ldr	r3, [pc, #192]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 800873e:	2280      	movs	r2, #128	@ 0x80
 8008740:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008742:	4b2f      	ldr	r3, [pc, #188]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 8008744:	2200      	movs	r2, #0
 8008746:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008748:	4b2d      	ldr	r3, [pc, #180]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 800874a:	2200      	movs	r2, #0
 800874c:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 800874e:	4b2c      	ldr	r3, [pc, #176]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 8008750:	2200      	movs	r2, #0
 8008752:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008754:	4b2a      	ldr	r3, [pc, #168]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 8008756:	2200      	movs	r2, #0
 8008758:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800875a:	4829      	ldr	r0, [pc, #164]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 800875c:	f001 fdc4 	bl	800a2e8 <HAL_DMA_Init>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8008766:	f000 f98a 	bl	8008a7e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a24      	ldr	r2, [pc, #144]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 800876e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008770:	4a23      	ldr	r2, [pc, #140]	@ (8008800 <HAL_I2C_MspInit+0x1b4>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8008776:	4b24      	ldr	r3, [pc, #144]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 8008778:	4a24      	ldr	r2, [pc, #144]	@ (800880c <HAL_I2C_MspInit+0x1c0>)
 800877a:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 800877c:	4b22      	ldr	r3, [pc, #136]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 800877e:	2217      	movs	r2, #23
 8008780:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008782:	4b21      	ldr	r3, [pc, #132]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 8008784:	2210      	movs	r2, #16
 8008786:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008788:	4b1f      	ldr	r3, [pc, #124]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 800878a:	2200      	movs	r2, #0
 800878c:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800878e:	4b1e      	ldr	r3, [pc, #120]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 8008790:	2280      	movs	r2, #128	@ 0x80
 8008792:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008794:	4b1c      	ldr	r3, [pc, #112]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 8008796:	2200      	movs	r2, #0
 8008798:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800879a:	4b1b      	ldr	r3, [pc, #108]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 800879c:	2200      	movs	r2, #0
 800879e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80087a0:	4b19      	ldr	r3, [pc, #100]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80087a6:	4b18      	ldr	r3, [pc, #96]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80087ac:	4816      	ldr	r0, [pc, #88]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 80087ae:	f001 fd9b 	bl	800a2e8 <HAL_DMA_Init>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 80087b8:	f000 f961 	bl	8008a7e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a12      	ldr	r2, [pc, #72]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 80087c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80087c2:	4a11      	ldr	r2, [pc, #68]	@ (8008808 <HAL_I2C_MspInit+0x1bc>)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80087c8:	2200      	movs	r2, #0
 80087ca:	2100      	movs	r1, #0
 80087cc:	2052      	movs	r0, #82	@ 0x52
 80087ce:	f001 fd56 	bl	800a27e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80087d2:	2052      	movs	r0, #82	@ 0x52
 80087d4:	f001 fd6d 	bl	800a2b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80087d8:	2200      	movs	r2, #0
 80087da:	2100      	movs	r1, #0
 80087dc:	2053      	movs	r0, #83	@ 0x53
 80087de:	f001 fd4e 	bl	800a27e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80087e2:	2053      	movs	r0, #83	@ 0x53
 80087e4:	f001 fd65 	bl	800a2b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80087e8:	bf00      	nop
 80087ea:	3780      	adds	r7, #128	@ 0x80
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	40008400 	.word	0x40008400
 80087f4:	40021000 	.word	0x40021000
 80087f8:	48000800 	.word	0x48000800
 80087fc:	48000400 	.word	0x48000400
 8008800:	200006ac 	.word	0x200006ac
 8008804:	40020008 	.word	0x40020008
 8008808:	2000070c 	.word	0x2000070c
 800880c:	4002001c 	.word	0x4002001c

08008810 <motor_config_assembler>:
	  domain_id_selector(jconf);
#endif
}

void motor_config_assembler(motor_config * mc, joint_config * jc)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
	{
		mc->motor_type = 14;
	}
	else if (JOINT_N == 6)
	{
		mc->motor_type = 14;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	220e      	movs	r2, #14
 800881e:	701a      	strb	r2, [r3, #0]
	}

	switch(mc->motor_type)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f993 3000 	ldrsb.w	r3, [r3]
 8008826:	2b17      	cmp	r3, #23
 8008828:	d01b      	beq.n	8008862 <motor_config_assembler+0x52>
 800882a:	2b17      	cmp	r3, #23
 800882c:	dc23      	bgt.n	8008876 <motor_config_assembler+0x66>
 800882e:	2b0e      	cmp	r3, #14
 8008830:	d002      	beq.n	8008838 <motor_config_assembler+0x28>
 8008832:	2b11      	cmp	r3, #17
 8008834:	d00b      	beq.n	800884e <motor_config_assembler+0x3e>
 8008836:	e01e      	b.n	8008876 <motor_config_assembler+0x66>
	{
	case 14:
		mc->max_irun_scaler = 34;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2222      	movs	r2, #34	@ 0x22
 800883c:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 0.5;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8008844:	605a      	str	r2, [r3, #4]
		mc->init_irun = 2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2202      	movs	r2, #2
 800884a:	725a      	strb	r2, [r3, #9]
		break;
 800884c:	e013      	b.n	8008876 <motor_config_assembler+0x66>
	case 17:
		mc->max_irun_scaler = 0;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 3.9;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a0d      	ldr	r2, [pc, #52]	@ (800888c <motor_config_assembler+0x7c>)
 8008858:	605a      	str	r2, [r3, #4]
		mc->init_irun = 6;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2206      	movs	r2, #6
 800885e:	725a      	strb	r2, [r3, #9]
		break;
 8008860:	e009      	b.n	8008876 <motor_config_assembler+0x66>
	case 23:
		mc->max_irun_scaler = 0;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 10.2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a09      	ldr	r2, [pc, #36]	@ (8008890 <motor_config_assembler+0x80>)
 800886c:	605a      	str	r2, [r3, #4]
		mc->init_irun = 15;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	220f      	movs	r2, #15
 8008872:	725a      	strb	r2, [r3, #9]
		break;
 8008874:	bf00      	nop
	}
	mc->direction = jc->direction;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	729a      	strb	r2, [r3, #10]
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	4079999a 	.word	0x4079999a
 8008890:	41233333 	.word	0x41233333

08008894 <joint_config_assembler>:


void joint_config_assembler(joint_config * jconf, joint_config_address * jc_a)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
		jconf->lower_limit_ticks = 0;
		jconf->upper_limit_ticks = 0;
	}
	else if (JOINT_N == 6)
	{
		jconf->motor_gear_ratio = 19.203208;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a20      	ldr	r2, [pc, #128]	@ (8008924 <joint_config_assembler+0x90>)
 80088a2:	60da      	str	r2, [r3, #12]
		jconf->joint_gear_ratio = 1;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80088aa:	609a      	str	r2, [r3, #8]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80088b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008928 <joint_config_assembler+0x94>
 80088b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80088c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c8:	ee17 2a90 	vmov	r2, s15
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	605a      	str	r2, [r3, #4]
		jconf->direction = -1;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	22ff      	movs	r2, #255	@ 0xff
 80088d4:	705a      	strb	r2, [r3, #1]
		jconf->lower_limit_ticks = 0;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	615a      	str	r2, [r3, #20]
		jconf->upper_limit_ticks = 0;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	611a      	str	r2, [r3, #16]
	}

	//TODO!!!!!!!!!!!!!!!!!!!!!!!!! from config read
	jconf->lower_limit_enc = 0.0;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	61da      	str	r2, [r3, #28]
	jconf->upper_limit_enc = 0.0;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	619a      	str	r2, [r3, #24]
	jconf->zero_enc = 0;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	621a      	str	r2, [r3, #32]
	//TODO!!!!!!!!!!!!!!!!!!!!!!!!!

	jc_a->address_of_upper_limit_enc = 0x00;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2200      	movs	r2, #0
 80088fc:	801a      	strh	r2, [r3, #0]
	jc_a->address_of_lower_limit_enc = jc_a->address_of_upper_limit_enc + sizeof(jconf->upper_limit_enc);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	3304      	adds	r3, #4
 8008904:	b29a      	uxth	r2, r3
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	805a      	strh	r2, [r3, #2]
	jc_a->address_of_zero_enc = jc_a->address_of_lower_limit_enc + sizeof(jconf->lower_limit_enc);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	885b      	ldrh	r3, [r3, #2]
 800890e:	3304      	adds	r3, #4
 8008910:	b29a      	uxth	r2, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	809a      	strh	r2, [r3, #4]

}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	4199a02c 	.word	0x4199a02c
 8008928:	47480000 	.word	0x47480000

0800892c <joint_config_write>:




void joint_config_write(joint_config * jc, joint_config_address * jc_a)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
	int timeout = 100;
 8008936:	2364      	movs	r3, #100	@ 0x64
 8008938:	60fb      	str	r3, [r7, #12]
	if (at24_isConnected())
 800893a:	f7f8 ff43 	bl	80017c4 <at24_isConnected>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d025      	beq.n	8008990 <joint_config_write+0x64>
	{
		at24_write(&jc_a->address_of_upper_limit_enc, &jc->upper_limit_enc, sizeof(&jc->upper_limit_enc), timeout);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	b298      	uxth	r0, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f103 0118 	add.w	r1, r3, #24
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2204      	movs	r2, #4
 8008952:	f7f8 ff49 	bl	80017e8 <at24_write>
		os_delay(1);
 8008956:	2001      	movs	r0, #1
 8008958:	f001 fb94 	bl	800a084 <HAL_Delay>
		at24_write(&jc_a->address_of_lower_limit_enc, &jc->lower_limit_enc, sizeof(&jc->lower_limit_enc), timeout);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	3302      	adds	r3, #2
 8008960:	b298      	uxth	r0, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f103 011c 	add.w	r1, r3, #28
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2204      	movs	r2, #4
 800896c:	f7f8 ff3c 	bl	80017e8 <at24_write>
		os_delay(1);
 8008970:	2001      	movs	r0, #1
 8008972:	f001 fb87 	bl	800a084 <HAL_Delay>
		at24_write(&jc_a->address_of_zero_enc, &jc->zero_enc, sizeof(&jc->zero_enc), timeout);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	3304      	adds	r3, #4
 800897a:	b298      	uxth	r0, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f103 0120 	add.w	r1, r3, #32
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2204      	movs	r2, #4
 8008986:	f7f8 ff2f 	bl	80017e8 <at24_write>
		os_delay(1);
 800898a:	2001      	movs	r0, #1
 800898c:	f001 fb7a 	bl	800a084 <HAL_Delay>
	}
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800899c:	f001 fb01 	bl	8009fa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80089a0:	f000 f822 	bl	80089e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80089a4:	f7ff fd6c 	bl	8008480 <MX_GPIO_Init>
  MX_DMA_Init();
 80089a8:	f7ff fc94 	bl	80082d4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80089ac:	f7ff fcc4 	bl	8008338 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 80089b0:	f7ff fe0c 	bl	80085cc <MX_I2C4_Init>
  MX_USART2_UART_Init();
 80089b4:	f001 f990 	bl	8009cd8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80089b8:	f000 f966 	bl	8008c88 <MX_SPI1_Init>
  MX_SPI3_Init();
 80089bc:	f000 f9a2 	bl	8008d04 <MX_SPI3_Init>
  MX_TIM8_Init();
 80089c0:	f000 fc46 	bl	8009250 <MX_TIM8_Init>
  MX_TIM7_Init();
 80089c4:	f000 fc0c 	bl	80091e0 <MX_TIM7_Init>
  MX_TIM6_Init();
 80089c8:	f000 fbd4 	bl	8009174 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80089cc:	4804      	ldr	r0, [pc, #16]	@ (80089e0 <main+0x48>)
 80089ce:	f006 f9b3 	bl	800ed38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80089d2:	4804      	ldr	r0, [pc, #16]	@ (80089e4 <main+0x4c>)
 80089d4:	f006 f9b0 	bl	800ed38 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  main_cpp();
 80089d8:	f000 f858 	bl	8008a8c <main_cpp>

  while (1)
 80089dc:	bf00      	nop
 80089de:	e7fd      	b.n	80089dc <main+0x44>
 80089e0:	200008d0 	.word	0x200008d0
 80089e4:	20000884 	.word	0x20000884

080089e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b094      	sub	sp, #80	@ 0x50
 80089ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80089ee:	f107 0318 	add.w	r3, r7, #24
 80089f2:	2238      	movs	r2, #56	@ 0x38
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f00b ff3b 	bl	8014872 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80089fc:	1d3b      	adds	r3, r7, #4
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	605a      	str	r2, [r3, #4]
 8008a04:	609a      	str	r2, [r3, #8]
 8008a06:	60da      	str	r2, [r3, #12]
 8008a08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f004 fa52 	bl	800ceb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a10:	2301      	movs	r3, #1
 8008a12:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008a18:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8008a22:	2301      	movs	r3, #1
 8008a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8008a26:	2328      	movs	r3, #40	@ 0x28
 8008a28:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008a2e:	2302      	movs	r3, #2
 8008a30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008a32:	2302      	movs	r3, #2
 8008a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a36:	f107 0318 	add.w	r3, r7, #24
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f004 faee 	bl	800d01c <HAL_RCC_OscConfig>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8008a46:	f000 f81a 	bl	8008a7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a4a:	230f      	movs	r3, #15
 8008a4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008a62:	1d3b      	adds	r3, r7, #4
 8008a64:	2104      	movs	r1, #4
 8008a66:	4618      	mov	r0, r3
 8008a68:	f004 fdea 	bl	800d640 <HAL_RCC_ClockConfig>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8008a72:	f000 f804 	bl	8008a7e <Error_Handler>
  }
}
 8008a76:	bf00      	nop
 8008a78:	3750      	adds	r7, #80	@ 0x50
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008a82:	b672      	cpsid	i
}
 8008a84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008a86:	bf00      	nop
 8008a88:	e7fd      	b.n	8008a86 <Error_Handler+0x8>
	...

08008a8c <main_cpp>:
joint_config jc;
joint_config_address jc_a;
uint16_t enc_angle = 0;

void main_cpp()
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b090      	sub	sp, #64	@ 0x40
 8008a90:	af00      	add	r7, sp, #0
	cyphal_can_starter(&hfdcan1);
 8008a92:	481f      	ldr	r0, [pc, #124]	@ (8008b10 <main_cpp+0x84>)
 8008a94:	f7fd fcc0 	bl	8006418 <cyphal_can_starter>
	setup_cyphal(&hfdcan1);
 8008a98:	481d      	ldr	r0, [pc, #116]	@ (8008b10 <main_cpp+0x84>)
 8008a9a:	f7fd fc27 	bl	80062ec <setup_cyphal>
	HAL_Delay(10);
 8008a9e:	200a      	movs	r0, #10
 8008aa0:	f001 faf0 	bl	800a084 <HAL_Delay>
	joint_config_assembler(&jc, &jc_a);
 8008aa4:	491b      	ldr	r1, [pc, #108]	@ (8008b14 <main_cpp+0x88>)
 8008aa6:	481c      	ldr	r0, [pc, #112]	@ (8008b18 <main_cpp+0x8c>)
 8008aa8:	f7ff fef4 	bl	8008894 <joint_config_assembler>
	motor_config_assembler(&mc, &jc);
 8008aac:	491a      	ldr	r1, [pc, #104]	@ (8008b18 <main_cpp+0x8c>)
 8008aae:	481b      	ldr	r0, [pc, #108]	@ (8008b1c <main_cpp+0x90>)
 8008ab0:	f7ff feae 	bl	8008810 <motor_config_assembler>
	//joint_config_read(&jc, &jc_a);
	HAL_Delay(10);
 8008ab4:	200a      	movs	r0, #10
 8008ab6:	f001 fae5 	bl	800a084 <HAL_Delay>
	tmc5160_init(&mc);
 8008aba:	4818      	ldr	r0, [pc, #96]	@ (8008b1c <main_cpp+0x90>)
 8008abc:	f000 ff30 	bl	8009920 <tmc5160_init>
	//js_init();
	HAL_Delay(10);
 8008ac0:	200a      	movs	r0, #10
 8008ac2:	f001 fadf 	bl	800a084 <HAL_Delay>
	//uint8_t msg[10];
	//int i = 0;

	HAL_StatusTypeDef rv;

	uint32_t last_hbeat = HAL_GetTick();
 8008ac6:	f001 fad1 	bl	800a06c <HAL_GetTick>
 8008aca:	63f8      	str	r0, [r7, #60]	@ 0x3c
	uint32_t last_js = HAL_GetTick();
 8008acc:	f001 face 	bl	800a06c <HAL_GetTick>
 8008ad0:	63b8      	str	r0, [r7, #56]	@ 0x38
	uint32_t last_AR = HAL_GetTick();
 8008ad2:	f001 facb 	bl	800a06c <HAL_GetTick>
 8008ad6:	6378      	str	r0, [r7, #52]	@ 0x34

	vec_4ax linear = {0};
 8008ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	609a      	str	r2, [r3, #8]
 8008ae4:	60da      	str	r2, [r3, #12]
	vec_4ax quat = {0};
 8008ae6:	f107 0314 	add.w	r3, r7, #20
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	605a      	str	r2, [r3, #4]
 8008af0:	609a      	str	r2, [r3, #8]
 8008af2:	60da      	str	r2, [r3, #12]
	vec_4ax gyro = {0};
 8008af4:	1d3b      	adds	r3, r7, #4
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	605a      	str	r2, [r3, #4]
 8008afc:	609a      	str	r2, [r3, #8]
 8008afe:	60da      	str	r2, [r3, #12]

	tmc5160_move(50000);
 8008b00:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008b04:	f000 fcd4 	bl	80094b0 <tmc5160_move>
//	    	  //as50_readAngle(&enc_angle, 100);
//	    	  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
//	      }
//	      cyphal_loop();
//	}
};
 8008b08:	bf00      	nop
 8008b0a:	3740      	adds	r7, #64	@ 0x40
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	200005f4 	.word	0x200005f4
 8008b14:	2000079c 	.word	0x2000079c
 8008b18:	20000778 	.word	0x20000778
 8008b1c:	2000076c 	.word	0x2000076c

08008b20 <HAL_TIM_PeriodElapsedCallback>:

static float angle_enc_read_for_debug = 0.0;
static uint16_t enc_ticks_read_for_debug = 0;

//Основной цикл управления 1кГц здесь читается энкодер, к нему применяется фильтр и выдется управление на мотор в зависимости от уставки пришедшей сверху через cyphal
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b64 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d102      	bne.n	8008b38 <HAL_TIM_PeriodElapsedCallback+0x18>
        motor.update();
 8008b32:	480d      	ldr	r0, [pc, #52]	@ (8008b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8008b34:	f000 f82f 	bl	8008b96 <_ZN5motor6updateEv>
    }
    if (htim->Instance == TIM6) {
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8008b6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d10b      	bne.n	8008b5a <HAL_TIM_PeriodElapsedCallback+0x3a>
    	angle_enc_read_for_debug = motor.read_encoder();
 8008b42:	4809      	ldr	r0, [pc, #36]	@ (8008b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8008b44:	f000 f840 	bl	8008bc8 <_ZN5motor12read_encoderEv>
 8008b48:	eef0 7a40 	vmov.f32	s15, s0
 8008b4c:	4b08      	ldr	r3, [pc, #32]	@ (8008b70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8008b4e:	edc3 7a00 	vstr	s15, [r3]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8008b52:	2104      	movs	r1, #4
 8008b54:	4807      	ldr	r0, [pc, #28]	@ (8008b74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008b56:	f002 fc9d 	bl	800b494 <HAL_GPIO_TogglePin>
    }
}
 8008b5a:	bf00      	nop
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40001400 	.word	0x40001400
 8008b68:	200007a4 	.word	0x200007a4
 8008b6c:	40001000 	.word	0x40001000
 8008b70:	200007b0 	.word	0x200007b0
 8008b74:	48000c00 	.word	0x48000c00

08008b78 <_ZN5motorC1Ev>:


motor::motor()
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8008b86:	811a      	strh	r2, [r3, #8]
	{

	};
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <_ZN5motor6updateEv>:

void motor::update()
	{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]

	};
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <_ZN5motor18set_position_to_goEf>:


void motor::set_position_to_go(float rad)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	ed87 0a00 	vstr	s0, [r7]

};
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	0000      	movs	r0, r0
 8008bc4:	0000      	movs	r0, r0
	...

08008bc8 <_ZN5motor12read_encoderEv>:
{
	return steps_to_rads(tmc5160_velocity_read(), jc.full_steps);
};

float motor::read_encoder()
{
 8008bc8:	b5b0      	push	{r4, r5, r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	uint16_t raw_ticks_from_encoder;
	as50_readAngle(&raw_ticks_from_encoder, 100);
 8008bd0:	f107 030e 	add.w	r3, r7, #14
 8008bd4:	2164      	movs	r1, #100	@ 0x64
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7f8 fdbe 	bl	8001758 <as50_readAngle>
	enc_ticks_read_for_debug = raw_ticks_from_encoder;
 8008bdc:	89fa      	ldrh	r2, [r7, #14]
 8008bde:	4b1a      	ldr	r3, [pc, #104]	@ (8008c48 <_ZN5motor12read_encoderEv+0x80>)
 8008be0:	801a      	strh	r2, [r3, #0]
	raw_gear_angle_from_encoder = static_cast<float>(raw_ticks_from_encoder) * ((M_PI * 2) / gear_encoder_CPR);
 8008be2:	89fb      	ldrh	r3, [r7, #14]
 8008be4:	ee07 3a90 	vmov	s15, r3
 8008be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bec:	ee17 0a90 	vmov	r0, s15
 8008bf0:	f7f7 fcd2 	bl	8000598 <__aeabi_f2d>
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	891b      	ldrh	r3, [r3, #8]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7f7 fcb9 	bl	8000574 <__aeabi_i2d>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	a10e      	add	r1, pc, #56	@ (adr r1, 8008c40 <_ZN5motor12read_encoderEv+0x78>)
 8008c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c0c:	f7f7 fe46 	bl	800089c <__aeabi_ddiv>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4620      	mov	r0, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f7 fd16 	bl	8000648 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4610      	mov	r0, r2
 8008c22:	4619      	mov	r1, r3
 8008c24:	f7f8 f808 	bl	8000c38 <__aeabi_d2f>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	605a      	str	r2, [r3, #4]
	return raw_gear_angle_from_encoder;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	ee07 3a90 	vmov	s15, r3
};
 8008c36:	eeb0 0a67 	vmov.f32	s0, s15
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8008c40:	54442d18 	.word	0x54442d18
 8008c44:	401921fb 	.word	0x401921fb
 8008c48:	200007b4 	.word	0x200007b4

08008c4c <_Z41__static_initialization_and_destruction_0ii>:

}
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d107      	bne.n	8008c6c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d102      	bne.n	8008c6c <_Z41__static_initialization_and_destruction_0ii+0x20>
motor motor;
 8008c66:	4803      	ldr	r0, [pc, #12]	@ (8008c74 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8008c68:	f7ff ff86 	bl	8008b78 <_ZN5motorC1Ev>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	200007a4 	.word	0x200007a4

08008c78 <_GLOBAL__sub_I_motor>:
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008c80:	2001      	movs	r0, #1
 8008c82:	f7ff ffe3 	bl	8008c4c <_Z41__static_initialization_and_destruction_0ii>
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8008d00 <MX_SPI1_Init+0x78>)
 8008c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008c92:	4b1a      	ldr	r3, [pc, #104]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008c94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008c9a:	4b18      	ldr	r3, [pc, #96]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008ca0:	4b16      	ldr	r3, [pc, #88]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008ca2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8008ca6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008ca8:	4b14      	ldr	r3, [pc, #80]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008caa:	2202      	movs	r2, #2
 8008cac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008cae:	4b13      	ldr	r3, [pc, #76]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008cb4:	4b11      	ldr	r3, [pc, #68]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cce:	4b0b      	ldr	r3, [pc, #44]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008cd4:	4b09      	ldr	r3, [pc, #36]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008cd6:	2207      	movs	r2, #7
 8008cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008cda:	4b08      	ldr	r3, [pc, #32]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008ce0:	4b06      	ldr	r3, [pc, #24]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008ce6:	4805      	ldr	r0, [pc, #20]	@ (8008cfc <MX_SPI1_Init+0x74>)
 8008ce8:	f005 f914 	bl	800df14 <HAL_SPI_Init>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008cf2:	f7ff fec4 	bl	8008a7e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008cf6:	bf00      	nop
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	200007b8 	.word	0x200007b8
 8008d00:	40013000 	.word	0x40013000

08008d04 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008d08:	4b1b      	ldr	r3, [pc, #108]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008d7c <MX_SPI3_Init+0x78>)
 8008d0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008d14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008d16:	4b18      	ldr	r3, [pc, #96]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8008d1c:	4b16      	ldr	r3, [pc, #88]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d1e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8008d22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d24:	4b14      	ldr	r3, [pc, #80]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008d2a:	4b13      	ldr	r3, [pc, #76]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008d30:	4b11      	ldr	r3, [pc, #68]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008d38:	4b0f      	ldr	r3, [pc, #60]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d3a:	2218      	movs	r2, #24
 8008d3c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d44:	4b0c      	ldr	r3, [pc, #48]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008d50:	4b09      	ldr	r3, [pc, #36]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d52:	2207      	movs	r2, #7
 8008d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008d56:	4b08      	ldr	r3, [pc, #32]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008d5c:	4b06      	ldr	r3, [pc, #24]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008d62:	4805      	ldr	r0, [pc, #20]	@ (8008d78 <MX_SPI3_Init+0x74>)
 8008d64:	f005 f8d6 	bl	800df14 <HAL_SPI_Init>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008d6e:	f7ff fe86 	bl	8008a7e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008d72:	bf00      	nop
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	2000081c 	.word	0x2000081c
 8008d7c:	40003c00 	.word	0x40003c00

08008d80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08c      	sub	sp, #48	@ 0x30
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d88:	f107 031c 	add.w	r3, r7, #28
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	605a      	str	r2, [r3, #4]
 8008d92:	609a      	str	r2, [r3, #8]
 8008d94:	60da      	str	r2, [r3, #12]
 8008d96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a33      	ldr	r2, [pc, #204]	@ (8008e6c <HAL_SPI_MspInit+0xec>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d131      	bne.n	8008e06 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008da2:	4b33      	ldr	r3, [pc, #204]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008da6:	4a32      	ldr	r2, [pc, #200]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008da8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008dac:	6613      	str	r3, [r2, #96]	@ 0x60
 8008dae:	4b30      	ldr	r3, [pc, #192]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008db2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dba:	4b2d      	ldr	r3, [pc, #180]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008dc0:	f043 0301 	orr.w	r3, r3, #1
 8008dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008dd2:	23e0      	movs	r3, #224	@ 0xe0
 8008dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dde:	2300      	movs	r3, #0
 8008de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008de2:	2305      	movs	r3, #5
 8008de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008de6:	f107 031c 	add.w	r3, r7, #28
 8008dea:	4619      	mov	r1, r3
 8008dec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008df0:	f002 f9b6 	bl	800b160 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8008df4:	2200      	movs	r2, #0
 8008df6:	2100      	movs	r1, #0
 8008df8:	2023      	movs	r0, #35	@ 0x23
 8008dfa:	f001 fa40 	bl	800a27e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008dfe:	2023      	movs	r0, #35	@ 0x23
 8008e00:	f001 fa57 	bl	800a2b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008e04:	e02d      	b.n	8008e62 <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008e74 <HAL_SPI_MspInit+0xf4>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d128      	bne.n	8008e62 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008e10:	4b17      	ldr	r3, [pc, #92]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e14:	4a16      	ldr	r2, [pc, #88]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e1c:	4b14      	ldr	r3, [pc, #80]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e28:	4b11      	ldr	r3, [pc, #68]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e2c:	4a10      	ldr	r2, [pc, #64]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008e2e:	f043 0304 	orr.w	r3, r3, #4
 8008e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e34:	4b0e      	ldr	r3, [pc, #56]	@ (8008e70 <HAL_SPI_MspInit+0xf0>)
 8008e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	60fb      	str	r3, [r7, #12]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008e40:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e46:	2302      	movs	r3, #2
 8008e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008e52:	2306      	movs	r3, #6
 8008e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e56:	f107 031c 	add.w	r3, r7, #28
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	4806      	ldr	r0, [pc, #24]	@ (8008e78 <HAL_SPI_MspInit+0xf8>)
 8008e5e:	f002 f97f 	bl	800b160 <HAL_GPIO_Init>
}
 8008e62:	bf00      	nop
 8008e64:	3730      	adds	r7, #48	@ 0x30
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	40013000 	.word	0x40013000
 8008e70:	40021000 	.word	0x40021000
 8008e74:	40003c00 	.word	0x40003c00
 8008e78:	48000800 	.word	0x48000800

08008e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e82:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec0 <HAL_MspInit+0x44>)
 8008e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e86:	4a0e      	ldr	r2, [pc, #56]	@ (8008ec0 <HAL_MspInit+0x44>)
 8008e88:	f043 0301 	orr.w	r3, r3, #1
 8008e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec0 <HAL_MspInit+0x44>)
 8008e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	607b      	str	r3, [r7, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e9a:	4b09      	ldr	r3, [pc, #36]	@ (8008ec0 <HAL_MspInit+0x44>)
 8008e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9e:	4a08      	ldr	r2, [pc, #32]	@ (8008ec0 <HAL_MspInit+0x44>)
 8008ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ea6:	4b06      	ldr	r3, [pc, #24]	@ (8008ec0 <HAL_MspInit+0x44>)
 8008ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008eb2:	f004 f8a3 	bl	800cffc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	40021000 	.word	0x40021000

08008ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008ec8:	bf00      	nop
 8008eca:	e7fd      	b.n	8008ec8 <NMI_Handler+0x4>

08008ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ed0:	bf00      	nop
 8008ed2:	e7fd      	b.n	8008ed0 <HardFault_Handler+0x4>

08008ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ed8:	bf00      	nop
 8008eda:	e7fd      	b.n	8008ed8 <MemManage_Handler+0x4>

08008edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ee0:	bf00      	nop
 8008ee2:	e7fd      	b.n	8008ee0 <BusFault_Handler+0x4>

08008ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ee8:	bf00      	nop
 8008eea:	e7fd      	b.n	8008ee8 <UsageFault_Handler+0x4>

08008eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ef0:	bf00      	nop
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008efa:	b480      	push	{r7}
 8008efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008efe:	bf00      	nop
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f0c:	bf00      	nop
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f1a:	f001 f895 	bl	800a048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f1e:	bf00      	nop
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8008f28:	4802      	ldr	r0, [pc, #8]	@ (8008f34 <DMA1_Channel1_IRQHandler+0x10>)
 8008f2a:	f001 fb45 	bl	800a5b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008f2e:	bf00      	nop
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200006ac 	.word	0x200006ac

08008f38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8008f3c:	4802      	ldr	r0, [pc, #8]	@ (8008f48 <DMA1_Channel2_IRQHandler+0x10>)
 8008f3e:	f001 fb3b 	bl	800a5b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008f42:	bf00      	nop
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	2000070c 	.word	0x2000070c

08008f4c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008f50:	4802      	ldr	r0, [pc, #8]	@ (8008f5c <SPI1_IRQHandler+0x10>)
 8008f52:	f005 fc21 	bl	800e798 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008f56:	bf00      	nop
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	200007b8 	.word	0x200007b8

08008f60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008f64:	4802      	ldr	r0, [pc, #8]	@ (8008f70 <USART2_IRQHandler+0x10>)
 8008f66:	f006 fb5d 	bl	800f624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008f6a:	bf00      	nop
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000968 	.word	0x20000968

08008f74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008f78:	4802      	ldr	r0, [pc, #8]	@ (8008f84 <TIM6_DAC_IRQHandler+0x10>)
 8008f7a:	f005 fffb 	bl	800ef74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008f7e:	bf00      	nop
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20000884 	.word	0x20000884

08008f88 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008f8c:	4802      	ldr	r0, [pc, #8]	@ (8008f98 <TIM7_DAC_IRQHandler+0x10>)
 8008f8e:	f005 fff1 	bl	800ef74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8008f92:	bf00      	nop
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	200008d0 	.word	0x200008d0

08008f9c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8008fa0:	4802      	ldr	r0, [pc, #8]	@ (8008fac <I2C4_EV_IRQHandler+0x10>)
 8008fa2:	f002 fe47 	bl	800bc34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8008fa6:	bf00      	nop
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000658 	.word	0x20000658

08008fb0 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8008fb4:	4802      	ldr	r0, [pc, #8]	@ (8008fc0 <I2C4_ER_IRQHandler+0x10>)
 8008fb6:	f002 fe57 	bl	800bc68 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8008fba:	bf00      	nop
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000658 	.word	0x20000658

08008fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  return 1;
 8008fc8:	2301      	movs	r3, #1
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <_kill>:

int _kill(int pid, int sig)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008fde:	f00b fd01 	bl	80149e4 <__errno>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2216      	movs	r2, #22
 8008fe6:	601a      	str	r2, [r3, #0]
  return -1;
 8008fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <_exit>:

void _exit (int status)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff ffe7 	bl	8008fd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009006:	bf00      	nop
 8009008:	e7fd      	b.n	8009006 <_exit+0x12>

0800900a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b086      	sub	sp, #24
 800900e:	af00      	add	r7, sp, #0
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009016:	2300      	movs	r3, #0
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	e00a      	b.n	8009032 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800901c:	f3af 8000 	nop.w
 8009020:	4601      	mov	r1, r0
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	60ba      	str	r2, [r7, #8]
 8009028:	b2ca      	uxtb	r2, r1
 800902a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	3301      	adds	r3, #1
 8009030:	617b      	str	r3, [r7, #20]
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	429a      	cmp	r2, r3
 8009038:	dbf0      	blt.n	800901c <_read+0x12>
  }

  return len;
 800903a:	687b      	ldr	r3, [r7, #4]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e009      	b.n	800906a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	60ba      	str	r2, [r7, #8]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3301      	adds	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	429a      	cmp	r2, r3
 8009070:	dbf1      	blt.n	8009056 <_write+0x12>
  }
  return len;
 8009072:	687b      	ldr	r3, [r7, #4]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <_close>:

int _close(int file)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80090a4:	605a      	str	r2, [r3, #4]
  return 0;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <_isatty>:

int _isatty(int file)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80090bc:	2301      	movs	r3, #1
}
 80090be:	4618      	mov	r0, r3
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b085      	sub	sp, #20
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80090ec:	4a14      	ldr	r2, [pc, #80]	@ (8009140 <_sbrk+0x5c>)
 80090ee:	4b15      	ldr	r3, [pc, #84]	@ (8009144 <_sbrk+0x60>)
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80090f8:	4b13      	ldr	r3, [pc, #76]	@ (8009148 <_sbrk+0x64>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d102      	bne.n	8009106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009100:	4b11      	ldr	r3, [pc, #68]	@ (8009148 <_sbrk+0x64>)
 8009102:	4a12      	ldr	r2, [pc, #72]	@ (800914c <_sbrk+0x68>)
 8009104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009106:	4b10      	ldr	r3, [pc, #64]	@ (8009148 <_sbrk+0x64>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4413      	add	r3, r2
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	429a      	cmp	r2, r3
 8009112:	d207      	bcs.n	8009124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009114:	f00b fc66 	bl	80149e4 <__errno>
 8009118:	4603      	mov	r3, r0
 800911a:	220c      	movs	r2, #12
 800911c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800911e:	f04f 33ff 	mov.w	r3, #4294967295
 8009122:	e009      	b.n	8009138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009124:	4b08      	ldr	r3, [pc, #32]	@ (8009148 <_sbrk+0x64>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800912a:	4b07      	ldr	r3, [pc, #28]	@ (8009148 <_sbrk+0x64>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4413      	add	r3, r2
 8009132:	4a05      	ldr	r2, [pc, #20]	@ (8009148 <_sbrk+0x64>)
 8009134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009136:	68fb      	ldr	r3, [r7, #12]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20020000 	.word	0x20020000
 8009144:	00000400 	.word	0x00000400
 8009148:	20000880 	.word	0x20000880
 800914c:	20000b98 	.word	0x20000b98

08009150 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009154:	4b06      	ldr	r3, [pc, #24]	@ (8009170 <SystemInit+0x20>)
 8009156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800915a:	4a05      	ldr	r2, [pc, #20]	@ (8009170 <SystemInit+0x20>)
 800915c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009164:	bf00      	nop
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	e000ed00 	.word	0xe000ed00

08009174 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800917a:	1d3b      	adds	r3, r7, #4
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	605a      	str	r2, [r3, #4]
 8009182:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009184:	4b14      	ldr	r3, [pc, #80]	@ (80091d8 <MX_TIM6_Init+0x64>)
 8009186:	4a15      	ldr	r2, [pc, #84]	@ (80091dc <MX_TIM6_Init+0x68>)
 8009188:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 800918a:	4b13      	ldr	r3, [pc, #76]	@ (80091d8 <MX_TIM6_Init+0x64>)
 800918c:	229f      	movs	r2, #159	@ 0x9f
 800918e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009190:	4b11      	ldr	r3, [pc, #68]	@ (80091d8 <MX_TIM6_Init+0x64>)
 8009192:	2200      	movs	r2, #0
 8009194:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8009196:	4b10      	ldr	r3, [pc, #64]	@ (80091d8 <MX_TIM6_Init+0x64>)
 8009198:	f242 720f 	movw	r2, #9999	@ 0x270f
 800919c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800919e:	4b0e      	ldr	r3, [pc, #56]	@ (80091d8 <MX_TIM6_Init+0x64>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80091a4:	480c      	ldr	r0, [pc, #48]	@ (80091d8 <MX_TIM6_Init+0x64>)
 80091a6:	f005 fd6f 	bl	800ec88 <HAL_TIM_Base_Init>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80091b0:	f7ff fc65 	bl	8008a7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091b4:	2300      	movs	r3, #0
 80091b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80091bc:	1d3b      	adds	r3, r7, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	4805      	ldr	r0, [pc, #20]	@ (80091d8 <MX_TIM6_Init+0x64>)
 80091c2:	f006 f903 	bl	800f3cc <HAL_TIMEx_MasterConfigSynchronization>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80091cc:	f7ff fc57 	bl	8008a7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80091d0:	bf00      	nop
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	20000884 	.word	0x20000884
 80091dc:	40001000 	.word	0x40001000

080091e0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091e6:	1d3b      	adds	r3, r7, #4
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	605a      	str	r2, [r3, #4]
 80091ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80091f0:	4b15      	ldr	r3, [pc, #84]	@ (8009248 <MX_TIM7_Init+0x68>)
 80091f2:	4a16      	ldr	r2, [pc, #88]	@ (800924c <MX_TIM7_Init+0x6c>)
 80091f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1599;
 80091f6:	4b14      	ldr	r3, [pc, #80]	@ (8009248 <MX_TIM7_Init+0x68>)
 80091f8:	f240 623f 	movw	r2, #1599	@ 0x63f
 80091fc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091fe:	4b12      	ldr	r3, [pc, #72]	@ (8009248 <MX_TIM7_Init+0x68>)
 8009200:	2200      	movs	r2, #0
 8009202:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8009204:	4b10      	ldr	r3, [pc, #64]	@ (8009248 <MX_TIM7_Init+0x68>)
 8009206:	f242 720f 	movw	r2, #9999	@ 0x270f
 800920a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800920c:	4b0e      	ldr	r3, [pc, #56]	@ (8009248 <MX_TIM7_Init+0x68>)
 800920e:	2200      	movs	r2, #0
 8009210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009212:	480d      	ldr	r0, [pc, #52]	@ (8009248 <MX_TIM7_Init+0x68>)
 8009214:	f005 fd38 	bl	800ec88 <HAL_TIM_Base_Init>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800921e:	f7ff fc2e 	bl	8008a7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009222:	2300      	movs	r3, #0
 8009224:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800922a:	1d3b      	adds	r3, r7, #4
 800922c:	4619      	mov	r1, r3
 800922e:	4806      	ldr	r0, [pc, #24]	@ (8009248 <MX_TIM7_Init+0x68>)
 8009230:	f006 f8cc 	bl	800f3cc <HAL_TIMEx_MasterConfigSynchronization>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800923a:	f7ff fc20 	bl	8008a7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	200008d0 	.word	0x200008d0
 800924c:	40001400 	.word	0x40001400

08009250 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08c      	sub	sp, #48	@ 0x30
 8009254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009256:	f107 030c 	add.w	r3, r7, #12
 800925a:	2224      	movs	r2, #36	@ 0x24
 800925c:	2100      	movs	r1, #0
 800925e:	4618      	mov	r0, r3
 8009260:	f00b fb07 	bl	8014872 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009264:	463b      	mov	r3, r7
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	605a      	str	r2, [r3, #4]
 800926c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800926e:	4b23      	ldr	r3, [pc, #140]	@ (80092fc <MX_TIM8_Init+0xac>)
 8009270:	4a23      	ldr	r2, [pc, #140]	@ (8009300 <MX_TIM8_Init+0xb0>)
 8009272:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009274:	4b21      	ldr	r3, [pc, #132]	@ (80092fc <MX_TIM8_Init+0xac>)
 8009276:	2200      	movs	r2, #0
 8009278:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800927a:	4b20      	ldr	r3, [pc, #128]	@ (80092fc <MX_TIM8_Init+0xac>)
 800927c:	2200      	movs	r2, #0
 800927e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009280:	4b1e      	ldr	r3, [pc, #120]	@ (80092fc <MX_TIM8_Init+0xac>)
 8009282:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009286:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009288:	4b1c      	ldr	r3, [pc, #112]	@ (80092fc <MX_TIM8_Init+0xac>)
 800928a:	2200      	movs	r2, #0
 800928c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800928e:	4b1b      	ldr	r3, [pc, #108]	@ (80092fc <MX_TIM8_Init+0xac>)
 8009290:	2200      	movs	r2, #0
 8009292:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009294:	4b19      	ldr	r3, [pc, #100]	@ (80092fc <MX_TIM8_Init+0xac>)
 8009296:	2200      	movs	r2, #0
 8009298:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800929a:	2301      	movs	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800929e:	2300      	movs	r3, #0
 80092a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80092a2:	2301      	movs	r3, #1
 80092a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80092a6:	2300      	movs	r3, #0
 80092a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80092ae:	2300      	movs	r3, #0
 80092b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80092b2:	2301      	movs	r3, #1
 80092b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80092b6:	2300      	movs	r3, #0
 80092b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80092be:	f107 030c 	add.w	r3, r7, #12
 80092c2:	4619      	mov	r1, r3
 80092c4:	480d      	ldr	r0, [pc, #52]	@ (80092fc <MX_TIM8_Init+0xac>)
 80092c6:	f005 fdaf 	bl	800ee28 <HAL_TIM_Encoder_Init>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80092d0:	f7ff fbd5 	bl	8008a7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80092d4:	2300      	movs	r3, #0
 80092d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80092d8:	2300      	movs	r3, #0
 80092da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80092dc:	2300      	movs	r3, #0
 80092de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80092e0:	463b      	mov	r3, r7
 80092e2:	4619      	mov	r1, r3
 80092e4:	4805      	ldr	r0, [pc, #20]	@ (80092fc <MX_TIM8_Init+0xac>)
 80092e6:	f006 f871 	bl	800f3cc <HAL_TIMEx_MasterConfigSynchronization>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80092f0:	f7ff fbc5 	bl	8008a7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80092f4:	bf00      	nop
 80092f6:	3730      	adds	r7, #48	@ 0x30
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	2000091c 	.word	0x2000091c
 8009300:	40013400 	.word	0x40013400

08009304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a1a      	ldr	r2, [pc, #104]	@ (800937c <HAL_TIM_Base_MspInit+0x78>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d114      	bne.n	8009340 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009316:	4b1a      	ldr	r3, [pc, #104]	@ (8009380 <HAL_TIM_Base_MspInit+0x7c>)
 8009318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800931a:	4a19      	ldr	r2, [pc, #100]	@ (8009380 <HAL_TIM_Base_MspInit+0x7c>)
 800931c:	f043 0310 	orr.w	r3, r3, #16
 8009320:	6593      	str	r3, [r2, #88]	@ 0x58
 8009322:	4b17      	ldr	r3, [pc, #92]	@ (8009380 <HAL_TIM_Base_MspInit+0x7c>)
 8009324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009326:	f003 0310 	and.w	r3, r3, #16
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800932e:	2200      	movs	r2, #0
 8009330:	2100      	movs	r1, #0
 8009332:	2036      	movs	r0, #54	@ 0x36
 8009334:	f000 ffa3 	bl	800a27e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009338:	2036      	movs	r0, #54	@ 0x36
 800933a:	f000 ffba 	bl	800a2b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800933e:	e018      	b.n	8009372 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a0f      	ldr	r2, [pc, #60]	@ (8009384 <HAL_TIM_Base_MspInit+0x80>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d113      	bne.n	8009372 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800934a:	4b0d      	ldr	r3, [pc, #52]	@ (8009380 <HAL_TIM_Base_MspInit+0x7c>)
 800934c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800934e:	4a0c      	ldr	r2, [pc, #48]	@ (8009380 <HAL_TIM_Base_MspInit+0x7c>)
 8009350:	f043 0320 	orr.w	r3, r3, #32
 8009354:	6593      	str	r3, [r2, #88]	@ 0x58
 8009356:	4b0a      	ldr	r3, [pc, #40]	@ (8009380 <HAL_TIM_Base_MspInit+0x7c>)
 8009358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	60bb      	str	r3, [r7, #8]
 8009360:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	2037      	movs	r0, #55	@ 0x37
 8009368:	f000 ff89 	bl	800a27e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800936c:	2037      	movs	r0, #55	@ 0x37
 800936e:	f000 ffa0 	bl	800a2b2 <HAL_NVIC_EnableIRQ>
}
 8009372:	bf00      	nop
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	40001000 	.word	0x40001000
 8009380:	40021000 	.word	0x40021000
 8009384:	40001400 	.word	0x40001400

08009388 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08a      	sub	sp, #40	@ 0x28
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009390:	f107 0314 	add.w	r3, r7, #20
 8009394:	2200      	movs	r2, #0
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	609a      	str	r2, [r3, #8]
 800939c:	60da      	str	r2, [r3, #12]
 800939e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a25      	ldr	r2, [pc, #148]	@ (800943c <HAL_TIM_Encoder_MspInit+0xb4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d143      	bne.n	8009432 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80093aa:	4b25      	ldr	r3, [pc, #148]	@ (8009440 <HAL_TIM_Encoder_MspInit+0xb8>)
 80093ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ae:	4a24      	ldr	r2, [pc, #144]	@ (8009440 <HAL_TIM_Encoder_MspInit+0xb8>)
 80093b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80093b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80093b6:	4b22      	ldr	r3, [pc, #136]	@ (8009440 <HAL_TIM_Encoder_MspInit+0xb8>)
 80093b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093be:	613b      	str	r3, [r7, #16]
 80093c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009440 <HAL_TIM_Encoder_MspInit+0xb8>)
 80093c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009440 <HAL_TIM_Encoder_MspInit+0xb8>)
 80093c8:	f043 0304 	orr.w	r3, r3, #4
 80093cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009440 <HAL_TIM_Encoder_MspInit+0xb8>)
 80093d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093da:	4b19      	ldr	r3, [pc, #100]	@ (8009440 <HAL_TIM_Encoder_MspInit+0xb8>)
 80093dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093de:	4a18      	ldr	r2, [pc, #96]	@ (8009440 <HAL_TIM_Encoder_MspInit+0xb8>)
 80093e0:	f043 0302 	orr.w	r3, r3, #2
 80093e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093e6:	4b16      	ldr	r3, [pc, #88]	@ (8009440 <HAL_TIM_Encoder_MspInit+0xb8>)
 80093e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	60bb      	str	r3, [r7, #8]
 80093f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80093f2:	2380      	movs	r3, #128	@ 0x80
 80093f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093f6:	2302      	movs	r3, #2
 80093f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093fe:	2300      	movs	r3, #0
 8009400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009402:	2304      	movs	r3, #4
 8009404:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009406:	f107 0314 	add.w	r3, r7, #20
 800940a:	4619      	mov	r1, r3
 800940c:	480d      	ldr	r0, [pc, #52]	@ (8009444 <HAL_TIM_Encoder_MspInit+0xbc>)
 800940e:	f001 fea7 	bl	800b160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009412:	2340      	movs	r3, #64	@ 0x40
 8009414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009416:	2302      	movs	r3, #2
 8009418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800941a:	2300      	movs	r3, #0
 800941c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800941e:	2300      	movs	r3, #0
 8009420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8009422:	2305      	movs	r3, #5
 8009424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009426:	f107 0314 	add.w	r3, r7, #20
 800942a:	4619      	mov	r1, r3
 800942c:	4806      	ldr	r0, [pc, #24]	@ (8009448 <HAL_TIM_Encoder_MspInit+0xc0>)
 800942e:	f001 fe97 	bl	800b160 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009432:	bf00      	nop
 8009434:	3728      	adds	r7, #40	@ 0x28
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	40013400 	.word	0x40013400
 8009440:	40021000 	.word	0x40021000
 8009444:	48000800 	.word	0x48000800
 8009448:	48000400 	.word	0x48000400

0800944c <tmc5160_position>:
#endif

extern motor_config mc;

void tmc5160_position(int32_t position)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 8009454:	2300      	movs	r3, #0
 8009456:	60bb      	str	r3, [r7, #8]
 8009458:	2300      	movs	r3, #0
 800945a:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 1 (position move)
 800945c:	23a0      	movs	r3, #160	@ 0xa0
 800945e:	723b      	strb	r3, [r7, #8]
 8009460:	2300      	movs	r3, #0
 8009462:	727b      	strb	r3, [r7, #9]
 8009464:	2300      	movs	r3, #0
 8009466:	72bb      	strb	r3, [r7, #10]
 8009468:	2300      	movs	r3, #0
 800946a:	72fb      	strb	r3, [r7, #11]
 800946c:	2300      	movs	r3, #0
 800946e:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009470:	f107 0308 	add.w	r3, r7, #8
 8009474:	4618      	mov	r0, r3
 8009476:	f000 f96f 	bl	8009758 <tmc5160_write>

	WData[0] = 0xAD; //moving register
 800947a:	23ad      	movs	r3, #173	@ 0xad
 800947c:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	0e1b      	lsrs	r3, r3, #24
 8009482:	b2db      	uxtb	r3, r3
 8009484:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	141b      	asrs	r3, r3, #16
 800948a:	b2db      	uxtb	r3, r3
 800948c:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	121b      	asrs	r3, r3, #8
 8009492:	b2db      	uxtb	r3, r3
 8009494:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	b2db      	uxtb	r3, r3
 800949a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800949c:	f107 0308 	add.w	r3, r7, #8
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 f959 	bl	8009758 <tmc5160_write>
}
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <tmc5160_move>:

void tmc5160_move(int32_t vel)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]

	int32_t vel_to_go;
	vel_to_go = (int32_t)(vel*1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7f7 f85b 	bl	8000574 <__aeabi_i2d>
 80094be:	a33c      	add	r3, pc, #240	@ (adr r3, 80095b0 <tmc5160_move+0x100>)
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f7f7 f8c0 	bl	8000648 <__aeabi_dmul>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4610      	mov	r0, r2
 80094ce:	4619      	mov	r1, r3
 80094d0:	f7f7 fb6a 	bl	8000ba8 <__aeabi_d2iz>
 80094d4:	4603      	mov	r3, r0
 80094d6:	617b      	str	r3, [r7, #20]

	uint8_t WData[5] = {0};
 80094d8:	2300      	movs	r3, #0
 80094da:	60bb      	str	r3, [r7, #8]
 80094dc:	2300      	movs	r3, #0
 80094de:	733b      	strb	r3, [r7, #12]
	if (vel_to_go < 0) //select positive or negative mode depending on vel sign
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	da0f      	bge.n	8009506 <tmc5160_move+0x56>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 80094e6:	23a0      	movs	r3, #160	@ 0xa0
 80094e8:	723b      	strb	r3, [r7, #8]
 80094ea:	2300      	movs	r3, #0
 80094ec:	727b      	strb	r3, [r7, #9]
 80094ee:	2300      	movs	r3, #0
 80094f0:	72bb      	strb	r3, [r7, #10]
 80094f2:	2300      	movs	r3, #0
 80094f4:	72fb      	strb	r3, [r7, #11]
 80094f6:	2302      	movs	r3, #2
 80094f8:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 80094fa:	f107 0308 	add.w	r3, r7, #8
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f92a 	bl	8009758 <tmc5160_write>
 8009504:	e00e      	b.n	8009524 <tmc5160_move+0x74>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 8009506:	23a0      	movs	r3, #160	@ 0xa0
 8009508:	723b      	strb	r3, [r7, #8]
 800950a:	2300      	movs	r3, #0
 800950c:	727b      	strb	r3, [r7, #9]
 800950e:	2300      	movs	r3, #0
 8009510:	72bb      	strb	r3, [r7, #10]
 8009512:	2300      	movs	r3, #0
 8009514:	72fb      	strb	r3, [r7, #11]
 8009516:	2301      	movs	r3, #1
 8009518:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 800951a:	f107 0308 	add.w	r3, r7, #8
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f91a 	bl	8009758 <tmc5160_write>
	}
	vel_to_go = abs(vel_to_go);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2b00      	cmp	r3, #0
 8009528:	bfb8      	it	lt
 800952a:	425b      	neglt	r3, r3
 800952c:	617b      	str	r3, [r7, #20]

	int32_t v1;
	v1 = (int32_t)(vel_to_go*0.1);
 800952e:	6978      	ldr	r0, [r7, #20]
 8009530:	f7f7 f820 	bl	8000574 <__aeabi_i2d>
 8009534:	a320      	add	r3, pc, #128	@ (adr r3, 80095b8 <tmc5160_move+0x108>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f7f7 f885 	bl	8000648 <__aeabi_dmul>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	4610      	mov	r0, r2
 8009544:	4619      	mov	r1, r3
 8009546:	f7f7 fb2f 	bl	8000ba8 <__aeabi_d2iz>
 800954a:	4603      	mov	r3, r0
 800954c:	613b      	str	r3, [r7, #16]


	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 800954e:	23a5      	movs	r3, #165	@ 0xa5
 8009550:	723b      	strb	r3, [r7, #8]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	0e1b      	lsrs	r3, r3, #24
 8009556:	b2db      	uxtb	r3, r3
 8009558:	727b      	strb	r3, [r7, #9]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	141b      	asrs	r3, r3, #16
 800955e:	b2db      	uxtb	r3, r3
 8009560:	72bb      	strb	r3, [r7, #10]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	121b      	asrs	r3, r3, #8
 8009566:	b2db      	uxtb	r3, r3
 8009568:	72fb      	strb	r3, [r7, #11]
	WData[4] = (v1 & 0x000000FF);
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009570:	f107 0308 	add.w	r3, r7, #8
 8009574:	4618      	mov	r0, r3
 8009576:	f000 f8ef 	bl	8009758 <tmc5160_write>

	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 800957a:	23a7      	movs	r3, #167	@ 0xa7
 800957c:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel_to_go & 0xFF000000) >> 24;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	0e1b      	lsrs	r3, r3, #24
 8009582:	b2db      	uxtb	r3, r3
 8009584:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel_to_go & 0x00FF0000) >> 16;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	141b      	asrs	r3, r3, #16
 800958a:	b2db      	uxtb	r3, r3
 800958c:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel_to_go & 0x0000FF00) >> 8;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	121b      	asrs	r3, r3, #8
 8009592:	b2db      	uxtb	r3, r3
 8009594:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel_to_go & 0x000000FF);
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800959c:	f107 0308 	add.w	r3, r7, #8
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 f8d9 	bl	8009758 <tmc5160_write>
}
 80095a6:	bf00      	nop
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	77ffebde 	.word	0x77ffebde
 80095b4:	3ff65e9f 	.word	0x3ff65e9f
 80095b8:	9999999a 	.word	0x9999999a
 80095bc:	3fb99999 	.word	0x3fb99999

080095c0 <tmc5160_set_default_vel>:

void tmc5160_set_default_vel()
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 80095c6:	2300      	movs	r3, #0
 80095c8:	603b      	str	r3, [r7, #0]
 80095ca:	2300      	movs	r3, #0
 80095cc:	713b      	strb	r3, [r7, #4]

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 80095ce:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80095d2:	f000 f859 	bl	8009688 <tmc5160_velocity>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 80095d6:	23a3      	movs	r3, #163	@ 0xa3
 80095d8:	703b      	strb	r3, [r7, #0]
 80095da:	2300      	movs	r3, #0
 80095dc:	707b      	strb	r3, [r7, #1]
 80095de:	2300      	movs	r3, #0
 80095e0:	70bb      	strb	r3, [r7, #2]
 80095e2:	2300      	movs	r3, #0
 80095e4:	70fb      	strb	r3, [r7, #3]
 80095e6:	230a      	movs	r3, #10
 80095e8:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 80095ea:	463b      	mov	r3, r7
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 f8b3 	bl	8009758 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0f; WData[4] = 0xff; // A1 = 10 000 First acceleration
 80095f2:	23a4      	movs	r3, #164	@ 0xa4
 80095f4:	703b      	strb	r3, [r7, #0]
 80095f6:	2300      	movs	r3, #0
 80095f8:	707b      	strb	r3, [r7, #1]
 80095fa:	2303      	movs	r3, #3
 80095fc:	70bb      	strb	r3, [r7, #2]
 80095fe:	230f      	movs	r3, #15
 8009600:	70fb      	strb	r3, [r7, #3]
 8009602:	23ff      	movs	r3, #255	@ 0xff
 8009604:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009606:	463b      	mov	r3, r7
 8009608:	4618      	mov	r0, r3
 800960a:	f000 f8a5 	bl	8009758 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0f; WData[4] = 0xff; // AMAX = 5 000 Acceleration above V1
 800960e:	23a6      	movs	r3, #166	@ 0xa6
 8009610:	703b      	strb	r3, [r7, #0]
 8009612:	2300      	movs	r3, #0
 8009614:	707b      	strb	r3, [r7, #1]
 8009616:	2300      	movs	r3, #0
 8009618:	70bb      	strb	r3, [r7, #2]
 800961a:	230f      	movs	r3, #15
 800961c:	70fb      	strb	r3, [r7, #3]
 800961e:	23ff      	movs	r3, #255	@ 0xff
 8009620:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009622:	463b      	mov	r3, r7
 8009624:	4618      	mov	r0, r3
 8009626:	f000 f897 	bl	8009758 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0f; WData[4] = 0xff; // DMAX = 5 000 Deceleration above V1
 800962a:	23a8      	movs	r3, #168	@ 0xa8
 800962c:	703b      	strb	r3, [r7, #0]
 800962e:	2300      	movs	r3, #0
 8009630:	707b      	strb	r3, [r7, #1]
 8009632:	2300      	movs	r3, #0
 8009634:	70bb      	strb	r3, [r7, #2]
 8009636:	230f      	movs	r3, #15
 8009638:	70fb      	strb	r3, [r7, #3]
 800963a:	23ff      	movs	r3, #255	@ 0xff
 800963c:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800963e:	463b      	mov	r3, r7
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f889 	bl	8009758 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0f; WData[4] = 0xff; // D1 = 10 000 Deceleration below V1
 8009646:	23aa      	movs	r3, #170	@ 0xaa
 8009648:	703b      	strb	r3, [r7, #0]
 800964a:	2300      	movs	r3, #0
 800964c:	707b      	strb	r3, [r7, #1]
 800964e:	2303      	movs	r3, #3
 8009650:	70bb      	strb	r3, [r7, #2]
 8009652:	230f      	movs	r3, #15
 8009654:	70fb      	strb	r3, [r7, #3]
 8009656:	23ff      	movs	r3, #255	@ 0xff
 8009658:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800965a:	463b      	mov	r3, r7
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f87b 	bl	8009758 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
 8009662:	23ab      	movs	r3, #171	@ 0xab
 8009664:	703b      	strb	r3, [r7, #0]
 8009666:	2300      	movs	r3, #0
 8009668:	707b      	strb	r3, [r7, #1]
 800966a:	2300      	movs	r3, #0
 800966c:	70bb      	strb	r3, [r7, #2]
 800966e:	2300      	movs	r3, #0
 8009670:	70fb      	strb	r3, [r7, #3]
 8009672:	230f      	movs	r3, #15
 8009674:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009676:	463b      	mov	r3, r7
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f86d 	bl	8009758 <tmc5160_write>
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <tmc5160_velocity>:

void tmc5160_velocity(int32_t vel)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]

	int32_t vel_to_go;
	vel_to_go = (int32_t)(vel*1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7f6 ff6f 	bl	8000574 <__aeabi_i2d>
 8009696:	a32c      	add	r3, pc, #176	@ (adr r3, 8009748 <tmc5160_velocity+0xc0>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	f7f6 ffd4 	bl	8000648 <__aeabi_dmul>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4610      	mov	r0, r2
 80096a6:	4619      	mov	r1, r3
 80096a8:	f7f7 fa7e 	bl	8000ba8 <__aeabi_d2iz>
 80096ac:	4603      	mov	r3, r0
 80096ae:	617b      	str	r3, [r7, #20]
	vel_to_go = abs(vel_to_go);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	bfb8      	it	lt
 80096b6:	425b      	neglt	r3, r3
 80096b8:	617b      	str	r3, [r7, #20]

	int32_t V1;
	V1 = (int32_t)(vel_to_go*0.1);
 80096ba:	6978      	ldr	r0, [r7, #20]
 80096bc:	f7f6 ff5a 	bl	8000574 <__aeabi_i2d>
 80096c0:	a323      	add	r3, pc, #140	@ (adr r3, 8009750 <tmc5160_velocity+0xc8>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	f7f6 ffbf 	bl	8000648 <__aeabi_dmul>
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	4610      	mov	r0, r2
 80096d0:	4619      	mov	r1, r3
 80096d2:	f7f7 fa69 	bl	8000ba8 <__aeabi_d2iz>
 80096d6:	4603      	mov	r3, r0
 80096d8:	613b      	str	r3, [r7, #16]

	//Acceleration threshold velocity V1
	uint8_t WData[5] = {0};
 80096da:	2300      	movs	r3, #0
 80096dc:	60bb      	str	r3, [r7, #8]
 80096de:	2300      	movs	r3, #0
 80096e0:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA5; //V1 speed register
 80096e2:	23a5      	movs	r3, #165	@ 0xa5
 80096e4:	723b      	strb	r3, [r7, #8]
	WData[1] = (V1 & 0xFF000000) >> 24;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	0e1b      	lsrs	r3, r3, #24
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	727b      	strb	r3, [r7, #9]
	WData[2] = (V1 & 0x00FF0000) >> 16;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	141b      	asrs	r3, r3, #16
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	72bb      	strb	r3, [r7, #10]
	WData[3] = (V1 & 0x0000FF00) >> 8;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	121b      	asrs	r3, r3, #8
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	72fb      	strb	r3, [r7, #11]
	WData[4] = (V1 & 0x000000FF);
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009704:	f107 0308 	add.w	r3, r7, #8
 8009708:	4618      	mov	r0, r3
 800970a:	f000 f825 	bl	8009758 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 800970e:	23a7      	movs	r3, #167	@ 0xa7
 8009710:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel_to_go & 0xFF000000) >> 24;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	0e1b      	lsrs	r3, r3, #24
 8009716:	b2db      	uxtb	r3, r3
 8009718:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel_to_go & 0x00FF0000) >> 16;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	141b      	asrs	r3, r3, #16
 800971e:	b2db      	uxtb	r3, r3
 8009720:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel_to_go & 0x0000FF00) >> 8;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	121b      	asrs	r3, r3, #8
 8009726:	b2db      	uxtb	r3, r3
 8009728:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel_to_go & 0x000000FF);
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	b2db      	uxtb	r3, r3
 800972e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009730:	f107 0308 	add.w	r3, r7, #8
 8009734:	4618      	mov	r0, r3
 8009736:	f000 f80f 	bl	8009758 <tmc5160_write>

}
 800973a:	bf00      	nop
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	f3af 8000 	nop.w
 8009748:	77ffebde 	.word	0x77ffebde
 800974c:	3ff65e9f 	.word	0x3ff65e9f
 8009750:	9999999a 	.word	0x9999999a
 8009754:	3fb99999 	.word	0x3fb99999

08009758 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8009760:	2200      	movs	r2, #0
 8009762:	2110      	movs	r1, #16
 8009764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009768:	f001 fe7c 	bl	800b464 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 800976c:	f04f 33ff 	mov.w	r3, #4294967295
 8009770:	2205      	movs	r2, #5
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	4806      	ldr	r0, [pc, #24]	@ (8009790 <tmc5160_write+0x38>)
 8009776:	f004 fc78 	bl	800e06a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 800977a:	2201      	movs	r2, #1
 800977c:	2110      	movs	r1, #16
 800977e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009782:	f001 fe6f 	bl	800b464 <HAL_GPIO_WritePin>
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	200007b8 	.word	0x200007b8

08009794 <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af02      	add	r7, sp, #8
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 800979e:	2200      	movs	r2, #0
 80097a0:	2110      	movs	r1, #16
 80097a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80097a6:	f001 fe5d 	bl	800b464 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 80097aa:	f04f 33ff 	mov.w	r3, #4294967295
 80097ae:	9300      	str	r3, [sp, #0]
 80097b0:	2305      	movs	r3, #5
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	4812      	ldr	r0, [pc, #72]	@ (8009800 <tmc5160_read+0x6c>)
 80097b8:	f004 fdcc 	bl	800e354 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 80097bc:	2201      	movs	r2, #1
 80097be:	2110      	movs	r1, #16
 80097c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80097c4:	f001 fe4e 	bl	800b464 <HAL_GPIO_WritePin>
	nop();
 80097c8:	bf00      	nop
	nop();
 80097ca:	bf00      	nop
	nop();
 80097cc:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 80097ce:	2200      	movs	r2, #0
 80097d0:	2110      	movs	r1, #16
 80097d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80097d6:	f001 fe45 	bl	800b464 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 80097da:	f04f 33ff 	mov.w	r3, #4294967295
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	2305      	movs	r3, #5
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	4806      	ldr	r0, [pc, #24]	@ (8009800 <tmc5160_read+0x6c>)
 80097e8:	f004 fdb4 	bl	800e354 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 80097ec:	2201      	movs	r2, #1
 80097ee:	2110      	movs	r1, #16
 80097f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80097f4:	f001 fe36 	bl	800b464 <HAL_GPIO_WritePin>
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	200007b8 	.word	0x200007b8

08009804 <tmc5160_position_read>:


int32_t tmc5160_position_read()
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	2300      	movs	r3, #0
 8009810:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 8009812:	2300      	movs	r3, #0
 8009814:	607b      	str	r3, [r7, #4]
 8009816:	2300      	movs	r3, #0
 8009818:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 800981a:	2321      	movs	r3, #33	@ 0x21
 800981c:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 800981e:	1d3a      	adds	r2, r7, #4
 8009820:	f107 030c 	add.w	r3, r7, #12
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff ffb4 	bl	8009794 <tmc5160_read>

	int32_t response = 0;
 800982c:	2300      	movs	r3, #0
 800982e:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 8009830:	797b      	ldrb	r3, [r7, #5]
 8009832:	461a      	mov	r2, r3
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	4313      	orrs	r3, r2
 8009838:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 8009840:	79bb      	ldrb	r3, [r7, #6]
 8009842:	461a      	mov	r2, r3
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	4313      	orrs	r3, r2
 8009848:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	021b      	lsls	r3, r3, #8
 800984e:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 8009850:	79fb      	ldrb	r3, [r7, #7]
 8009852:	461a      	mov	r2, r3
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	4313      	orrs	r3, r2
 8009858:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	021b      	lsls	r3, r3, #8
 800985e:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 8009860:	7a3b      	ldrb	r3, [r7, #8]
 8009862:	461a      	mov	r2, r3
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	4313      	orrs	r3, r2
 8009868:	617b      	str	r3, [r7, #20]

	return response;
 800986a:	697b      	ldr	r3, [r7, #20]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	0000      	movs	r0, r0
	...

08009878 <tmc5160_velocity_read>:

int32_t tmc5160_velocity_read()
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800987e:	2300      	movs	r3, #0
 8009880:	60bb      	str	r3, [r7, #8]
 8009882:	2300      	movs	r3, #0
 8009884:	733b      	strb	r3, [r7, #12]
	uint8_t RData[5] = {0};
 8009886:	2300      	movs	r3, #0
 8009888:	603b      	str	r3, [r7, #0]
 800988a:	2300      	movs	r3, #0
 800988c:	713b      	strb	r3, [r7, #4]
	WData[0] = 0x22; //VACTUAL register address
 800988e:	2322      	movs	r3, #34	@ 0x22
 8009890:	723b      	strb	r3, [r7, #8]
	tmc5160_read(WData, RData);
 8009892:	463a      	mov	r2, r7
 8009894:	f107 0308 	add.w	r3, r7, #8
 8009898:	4611      	mov	r1, r2
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff ff7a 	bl	8009794 <tmc5160_read>

	int32_t response = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	617b      	str	r3, [r7, #20]

    response |= (RData[1] & 0xFF);
 80098a4:	787b      	ldrb	r3, [r7, #1]
 80098a6:	461a      	mov	r2, r3
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	021b      	lsls	r3, r3, #8
 80098b2:	617b      	str	r3, [r7, #20]
    response |= (RData[2] & 0xFF);
 80098b4:	78bb      	ldrb	r3, [r7, #2]
 80098b6:	461a      	mov	r2, r3
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	021b      	lsls	r3, r3, #8
 80098c2:	617b      	str	r3, [r7, #20]
    response |= (RData[3] & 0xFF);
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	461a      	mov	r2, r3
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	617b      	str	r3, [r7, #20]
    response |= (RData[4] & 0xFF);
 80098d4:	793b      	ldrb	r3, [r7, #4]
 80098d6:	461a      	mov	r2, r3
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]

    int32_t rv = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	613b      	str	r3, [r7, #16]
    rv = sign_extend_bits_to_32(response, 24);
 80098e2:	2118      	movs	r1, #24
 80098e4:	6978      	ldr	r0, [r7, #20]
 80098e6:	f000 faa3 	bl	8009e30 <sign_extend_bits_to_32>
 80098ea:	6138      	str	r0, [r7, #16]

	return (int32_t)(rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 80098ec:	6938      	ldr	r0, [r7, #16]
 80098ee:	f7f6 fe41 	bl	8000574 <__aeabi_i2d>
 80098f2:	a309      	add	r3, pc, #36	@ (adr r3, 8009918 <tmc5160_velocity_read+0xa0>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 ffd0 	bl	800089c <__aeabi_ddiv>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4610      	mov	r0, r2
 8009902:	4619      	mov	r1, r3
 8009904:	f7f7 f950 	bl	8000ba8 <__aeabi_d2iz>
 8009908:	4603      	mov	r3, r0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3718      	adds	r7, #24
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	f3af 8000 	nop.w
 8009918:	77ffebde 	.word	0x77ffebde
 800991c:	3ff65e9f 	.word	0x3ff65e9f

08009920 <tmc5160_init>:

void tmc5160_init(motor_config * mc)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 8009928:	2200      	movs	r2, #0
 800992a:	2120      	movs	r1, #32
 800992c:	4896      	ldr	r0, [pc, #600]	@ (8009b88 <tmc5160_init+0x268>)
 800992e:	f001 fd99 	bl	800b464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 8009932:	2201      	movs	r2, #1
 8009934:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800993c:	f001 fd92 	bl	800b464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 8009940:	2200      	movs	r2, #0
 8009942:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800994a:	f001 fd8b 	bl	800b464 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800994e:	2201      	movs	r2, #1
 8009950:	2110      	movs	r1, #16
 8009952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009956:	f001 fd85 	bl	800b464 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 800995a:	2200      	movs	r2, #0
 800995c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009964:	f001 fd7e 	bl	800b464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 8009968:	2200      	movs	r2, #0
 800996a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800996e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009972:	f001 fd77 	bl	800b464 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009976:	2064      	movs	r0, #100	@ 0x64
 8009978:	f000 fb84 	bl	800a084 <HAL_Delay>

	uint8_t WData[5] = {0};
 800997c:	2300      	movs	r3, #0
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	2300      	movs	r3, #0
 8009982:	743b      	strb	r3, [r7, #16]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 8009984:	23ec      	movs	r3, #236	@ 0xec
 8009986:	733b      	strb	r3, [r7, #12]
 8009988:	2300      	movs	r3, #0
 800998a:	737b      	strb	r3, [r7, #13]
 800998c:	2300      	movs	r3, #0
 800998e:	73bb      	strb	r3, [r7, #14]
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
 8009994:	23c3      	movs	r3, #195	@ 0xc3
 8009996:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009998:	f107 030c 	add.w	r3, r7, #12
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff fedb 	bl	8009758 <tmc5160_write>

	WData[0] = 0x8B; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = mc->max_irun_scaler; //GLOBAL CURRENT SCALER
 80099a2:	238b      	movs	r3, #139	@ 0x8b
 80099a4:	733b      	strb	r3, [r7, #12]
 80099a6:	2300      	movs	r3, #0
 80099a8:	737b      	strb	r3, [r7, #13]
 80099aa:	2300      	movs	r3, #0
 80099ac:	73bb      	strb	r3, [r7, #14]
 80099ae:	2300      	movs	r3, #0
 80099b0:	73fb      	strb	r3, [r7, #15]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80099bc:	f107 030c 	add.w	r3, r7, #12
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff fec9 	bl	8009758 <tmc5160_write>

	int init_ihold = mc->init_irun * 0.7;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7f6 fdd1 	bl	8000574 <__aeabi_i2d>
 80099d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009b80 <tmc5160_init+0x260>)
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f7f6 fe36 	bl	8000648 <__aeabi_dmul>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4610      	mov	r0, r2
 80099e2:	4619      	mov	r1, r3
 80099e4:	f7f7 f8e0 	bl	8000ba8 <__aeabi_d2iz>
 80099e8:	4603      	mov	r3, r0
 80099ea:	617b      	str	r3, [r7, #20]
	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = init_ihold; WData[4] = mc->init_irun; //  IHOLDDELAY=0,  IRUN=10/31,  IHOLD=02/31
 80099ec:	2390      	movs	r3, #144	@ 0x90
 80099ee:	733b      	strb	r3, [r7, #12]
 80099f0:	2300      	movs	r3, #0
 80099f2:	737b      	strb	r3, [r7, #13]
 80099f4:	2300      	movs	r3, #0
 80099f6:	73bb      	strb	r3, [r7, #14]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	73fb      	strb	r3, [r7, #15]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009a08:	f107 030c 	add.w	r3, r7, #12
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7ff fea3 	bl	8009758 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 8009a12:	2391      	movs	r3, #145	@ 0x91
 8009a14:	733b      	strb	r3, [r7, #12]
 8009a16:	2300      	movs	r3, #0
 8009a18:	737b      	strb	r3, [r7, #13]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73bb      	strb	r3, [r7, #14]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
 8009a22:	230a      	movs	r3, #10
 8009a24:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009a26:	f107 030c 	add.w	r3, r7, #12
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fe94 	bl	8009758 <tmc5160_write>

	//0xC40C001E default for 0x70 reg
	WData[0] = 0xF0; WData[1] = 0xC4; WData[2] = 0x0D; WData[3] = 0x00; WData[4] = 0x1E; // PWM_CONF PWM_FREQ 35kHz TODO
 8009a30:	23f0      	movs	r3, #240	@ 0xf0
 8009a32:	733b      	strb	r3, [r7, #12]
 8009a34:	23c4      	movs	r3, #196	@ 0xc4
 8009a36:	737b      	strb	r3, [r7, #13]
 8009a38:	230d      	movs	r3, #13
 8009a3a:	73bb      	strb	r3, [r7, #14]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
 8009a40:	231e      	movs	r3, #30
 8009a42:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009a44:	f107 030c 	add.w	r3, r7, #12
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff fe85 	bl	8009758 <tmc5160_write>

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8009a4e:	2380      	movs	r3, #128	@ 0x80
 8009a50:	733b      	strb	r3, [r7, #12]
 8009a52:	2300      	movs	r3, #0
 8009a54:	737b      	strb	r3, [r7, #13]
 8009a56:	2300      	movs	r3, #0
 8009a58:	73bb      	strb	r3, [r7, #14]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73fb      	strb	r3, [r7, #15]
 8009a5e:	2304      	movs	r3, #4
 8009a60:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009a62:	f107 030c 	add.w	r3, r7, #12
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7ff fe76 	bl	8009758 <tmc5160_write>

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 8009a6c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8009a70:	f7ff fe0a 	bl	8009688 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 8009a74:	2393      	movs	r3, #147	@ 0x93
 8009a76:	733b      	strb	r3, [r7, #12]
 8009a78:	2300      	movs	r3, #0
 8009a7a:	737b      	strb	r3, [r7, #13]
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73bb      	strb	r3, [r7, #14]
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
 8009a84:	23c8      	movs	r3, #200	@ 0xc8
 8009a86:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009a88:	f107 030c 	add.w	r3, r7, #12
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff fe63 	bl	8009758 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 8009a92:	23a0      	movs	r3, #160	@ 0xa0
 8009a94:	733b      	strb	r3, [r7, #12]
 8009a96:	2300      	movs	r3, #0
 8009a98:	737b      	strb	r3, [r7, #13]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73bb      	strb	r3, [r7, #14]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009aa6:	f107 030c 	add.w	r3, r7, #12
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff fe54 	bl	8009758 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 8009ab0:	23a3      	movs	r3, #163	@ 0xa3
 8009ab2:	733b      	strb	r3, [r7, #12]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	737b      	strb	r3, [r7, #13]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73bb      	strb	r3, [r7, #14]
 8009abc:	2300      	movs	r3, #0
 8009abe:	73fb      	strb	r3, [r7, #15]
 8009ac0:	230a      	movs	r3, #10
 8009ac2:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009ac4:	f107 030c 	add.w	r3, r7, #12
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff fe45 	bl	8009758 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0F; WData[4] = 0xFF; // A1 = 10 000 First acceleration
 8009ace:	23a4      	movs	r3, #164	@ 0xa4
 8009ad0:	733b      	strb	r3, [r7, #12]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	737b      	strb	r3, [r7, #13]
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	73bb      	strb	r3, [r7, #14]
 8009ada:	230f      	movs	r3, #15
 8009adc:	73fb      	strb	r3, [r7, #15]
 8009ade:	23ff      	movs	r3, #255	@ 0xff
 8009ae0:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009ae2:	f107 030c 	add.w	r3, r7, #12
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fe36 	bl	8009758 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0F; WData[4] = 0xFF; // AMAX = 5 000 Acceleration above V1
 8009aec:	23a6      	movs	r3, #166	@ 0xa6
 8009aee:	733b      	strb	r3, [r7, #12]
 8009af0:	2300      	movs	r3, #0
 8009af2:	737b      	strb	r3, [r7, #13]
 8009af4:	2300      	movs	r3, #0
 8009af6:	73bb      	strb	r3, [r7, #14]
 8009af8:	230f      	movs	r3, #15
 8009afa:	73fb      	strb	r3, [r7, #15]
 8009afc:	23ff      	movs	r3, #255	@ 0xff
 8009afe:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009b00:	f107 030c 	add.w	r3, r7, #12
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7ff fe27 	bl	8009758 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0F; WData[4] = 0xFF; // DMAX = 5 000 Deceleration above V1
 8009b0a:	23a8      	movs	r3, #168	@ 0xa8
 8009b0c:	733b      	strb	r3, [r7, #12]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	737b      	strb	r3, [r7, #13]
 8009b12:	2300      	movs	r3, #0
 8009b14:	73bb      	strb	r3, [r7, #14]
 8009b16:	230f      	movs	r3, #15
 8009b18:	73fb      	strb	r3, [r7, #15]
 8009b1a:	23ff      	movs	r3, #255	@ 0xff
 8009b1c:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009b1e:	f107 030c 	add.w	r3, r7, #12
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff fe18 	bl	8009758 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0F; WData[4] = 0xFF; // D1 = 10 000 Deceleration below V1
 8009b28:	23aa      	movs	r3, #170	@ 0xaa
 8009b2a:	733b      	strb	r3, [r7, #12]
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	737b      	strb	r3, [r7, #13]
 8009b30:	2303      	movs	r3, #3
 8009b32:	73bb      	strb	r3, [r7, #14]
 8009b34:	230f      	movs	r3, #15
 8009b36:	73fb      	strb	r3, [r7, #15]
 8009b38:	23ff      	movs	r3, #255	@ 0xff
 8009b3a:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009b3c:	f107 030c 	add.w	r3, r7, #12
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff fe09 	bl	8009758 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
 8009b46:	23ab      	movs	r3, #171	@ 0xab
 8009b48:	733b      	strb	r3, [r7, #12]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	737b      	strb	r3, [r7, #13]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73bb      	strb	r3, [r7, #14]
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]
 8009b56:	230f      	movs	r3, #15
 8009b58:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009b5a:	f107 030c 	add.w	r3, r7, #12
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7ff fdfa 	bl	8009758 <tmc5160_write>

	tmc5160_set_motor_direction(mc->direction);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 f80e 	bl	8009b8c <tmc5160_set_motor_direction>

	HAL_Delay(100);
 8009b70:	2064      	movs	r0, #100	@ 0x64
 8009b72:	f000 fa87 	bl	800a084 <HAL_Delay>
}
 8009b76:	bf00      	nop
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	66666666 	.word	0x66666666
 8009b84:	3fe66666 	.word	0x3fe66666
 8009b88:	48000800 	.word	0x48000800

08009b8c <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	71fb      	strb	r3, [r7, #7]
	if(dir <= 0)
 8009b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	dc13      	bgt.n	8009bc6 <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	613b      	str	r3, [r7, #16]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8009ba6:	2380      	movs	r3, #128	@ 0x80
 8009ba8:	743b      	strb	r3, [r7, #16]
 8009baa:	2300      	movs	r3, #0
 8009bac:	747b      	strb	r3, [r7, #17]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	74bb      	strb	r3, [r7, #18]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	74fb      	strb	r3, [r7, #19]
 8009bb6:	2314      	movs	r3, #20
 8009bb8:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 8009bba:	f107 0310 	add.w	r3, r7, #16
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7ff fdca 	bl	8009758 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 8009bc4:	e012      	b.n	8009bec <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8009bce:	2380      	movs	r3, #128	@ 0x80
 8009bd0:	723b      	strb	r3, [r7, #8]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	727b      	strb	r3, [r7, #9]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	72bb      	strb	r3, [r7, #10]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	72fb      	strb	r3, [r7, #11]
 8009bde:	2304      	movs	r3, #4
 8009be0:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009be2:	f107 0308 	add.w	r3, r7, #8
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff fdb6 	bl	8009758 <tmc5160_write>
}
 8009bec:	bf00      	nop
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <tmc5160_set_zero>:

void tmc5160_set_zero()
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	603b      	str	r3, [r7, #0]
 8009bfe:	2300      	movs	r3, #0
 8009c00:	713b      	strb	r3, [r7, #4]
	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x03; // RAMPMODE = 3 (HOLD mode)
 8009c02:	23a0      	movs	r3, #160	@ 0xa0
 8009c04:	703b      	strb	r3, [r7, #0]
 8009c06:	2300      	movs	r3, #0
 8009c08:	707b      	strb	r3, [r7, #1]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	70bb      	strb	r3, [r7, #2]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	70fb      	strb	r3, [r7, #3]
 8009c12:	2303      	movs	r3, #3
 8009c14:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009c16:	463b      	mov	r3, r7
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff fd9d 	bl	8009758 <tmc5160_write>

	WData[0] = 0xA1; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Set zero
 8009c1e:	23a1      	movs	r3, #161	@ 0xa1
 8009c20:	703b      	strb	r3, [r7, #0]
 8009c22:	2300      	movs	r3, #0
 8009c24:	707b      	strb	r3, [r7, #1]
 8009c26:	2300      	movs	r3, #0
 8009c28:	70bb      	strb	r3, [r7, #2]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	70fb      	strb	r3, [r7, #3]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009c32:	463b      	mov	r3, r7
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff fd8f 	bl	8009758 <tmc5160_write>
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
	...

08009c44 <tmc5160_disarm>:

void tmc5160_disarm()
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //DRV SLEEP 0 for power on, 1 for power off
 8009c48:	2201      	movs	r2, #1
 8009c4a:	2120      	movs	r1, #32
 8009c4c:	4802      	ldr	r0, [pc, #8]	@ (8009c58 <tmc5160_disarm+0x14>)
 8009c4e:	f001 fc09 	bl	800b464 <HAL_GPIO_WritePin>
}
 8009c52:	bf00      	nop
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	48000800 	.word	0x48000800

08009c5c <tmc5160_arm>:

void tmc5160_arm()
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 8009c60:	2200      	movs	r2, #0
 8009c62:	2120      	movs	r1, #32
 8009c64:	4802      	ldr	r0, [pc, #8]	@ (8009c70 <tmc5160_arm+0x14>)
 8009c66:	f001 fbfd 	bl	800b464 <HAL_GPIO_WritePin>
}
 8009c6a:	bf00      	nop
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	48000800 	.word	0x48000800

08009c74 <tmc5160_stop>:

void tmc5160_stop()
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	607b      	str	r3, [r7, #4]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	723b      	strb	r3, [r7, #8]
	uint32_t pos = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	60fb      	str	r3, [r7, #12]

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Start acceleration = 10 (Near start)
 8009c86:	23a3      	movs	r3, #163	@ 0xa3
 8009c88:	713b      	strb	r3, [r7, #4]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	717b      	strb	r3, [r7, #5]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	71bb      	strb	r3, [r7, #6]
 8009c92:	2300      	movs	r3, #0
 8009c94:	71fb      	strb	r3, [r7, #7]
 8009c96:	2300      	movs	r3, #0
 8009c98:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 8009c9a:	1d3b      	adds	r3, r7, #4
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff fd5b 	bl	8009758 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00;
 8009ca2:	23a7      	movs	r3, #167	@ 0xa7
 8009ca4:	713b      	strb	r3, [r7, #4]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	717b      	strb	r3, [r7, #5]
 8009caa:	2300      	movs	r3, #0
 8009cac:	71bb      	strb	r3, [r7, #6]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	71fb      	strb	r3, [r7, #7]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 8009cb6:	1d3b      	adds	r3, r7, #4
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7ff fd4d 	bl	8009758 <tmc5160_write>

	pos = tmc5160_position_read();
 8009cbe:	f7ff fda1 	bl	8009804 <tmc5160_position_read>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	60fb      	str	r3, [r7, #12]
	tmc5160_position(pos);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff fbbf 	bl	800944c <tmc5160_position>
}
 8009cce:	bf00      	nop
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009cdc:	4b22      	ldr	r3, [pc, #136]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009cde:	4a23      	ldr	r2, [pc, #140]	@ (8009d6c <MX_USART2_UART_Init+0x94>)
 8009ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009ce2:	4b21      	ldr	r3, [pc, #132]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009cea:	4b1f      	ldr	r3, [pc, #124]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009cfe:	220c      	movs	r2, #12
 8009d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d02:	4b19      	ldr	r3, [pc, #100]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d08:	4b17      	ldr	r3, [pc, #92]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009d0e:	4b16      	ldr	r3, [pc, #88]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009d14:	4b14      	ldr	r3, [pc, #80]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009d1a:	4b13      	ldr	r3, [pc, #76]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009d20:	4811      	ldr	r0, [pc, #68]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009d22:	f005 fc2f 	bl	800f584 <HAL_UART_Init>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8009d2c:	f7fe fea7 	bl	8008a7e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009d30:	2100      	movs	r1, #0
 8009d32:	480d      	ldr	r0, [pc, #52]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009d34:	f006 fd6d 	bl	8010812 <HAL_UARTEx_SetTxFifoThreshold>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8009d3e:	f7fe fe9e 	bl	8008a7e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009d42:	2100      	movs	r1, #0
 8009d44:	4808      	ldr	r0, [pc, #32]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009d46:	f006 fda2 	bl	801088e <HAL_UARTEx_SetRxFifoThreshold>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8009d50:	f7fe fe95 	bl	8008a7e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009d54:	4804      	ldr	r0, [pc, #16]	@ (8009d68 <MX_USART2_UART_Init+0x90>)
 8009d56:	f006 fd23 	bl	80107a0 <HAL_UARTEx_DisableFifoMode>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8009d60:	f7fe fe8d 	bl	8008a7e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009d64:	bf00      	nop
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	20000968 	.word	0x20000968
 8009d6c:	40004400 	.word	0x40004400

08009d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b09e      	sub	sp, #120	@ 0x78
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	605a      	str	r2, [r3, #4]
 8009d82:	609a      	str	r2, [r3, #8]
 8009d84:	60da      	str	r2, [r3, #12]
 8009d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009d88:	f107 0310 	add.w	r3, r7, #16
 8009d8c:	2254      	movs	r2, #84	@ 0x54
 8009d8e:	2100      	movs	r1, #0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f00a fd6e 	bl	8014872 <memset>
  if(uartHandle->Instance==USART2)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a23      	ldr	r2, [pc, #140]	@ (8009e28 <HAL_UART_MspInit+0xb8>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d13e      	bne.n	8009e1e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009da0:	2302      	movs	r3, #2
 8009da2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009da4:	2300      	movs	r3, #0
 8009da6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009da8:	f107 0310 	add.w	r3, r7, #16
 8009dac:	4618      	mov	r0, r3
 8009dae:	f003 fe63 	bl	800da78 <HAL_RCCEx_PeriphCLKConfig>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009db8:	f7fe fe61 	bl	8008a7e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8009e2c <HAL_UART_MspInit+0xbc>)
 8009dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8009e2c <HAL_UART_MspInit+0xbc>)
 8009dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dc8:	4b18      	ldr	r3, [pc, #96]	@ (8009e2c <HAL_UART_MspInit+0xbc>)
 8009dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dd4:	4b15      	ldr	r3, [pc, #84]	@ (8009e2c <HAL_UART_MspInit+0xbc>)
 8009dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dd8:	4a14      	ldr	r2, [pc, #80]	@ (8009e2c <HAL_UART_MspInit+0xbc>)
 8009dda:	f043 0301 	orr.w	r3, r3, #1
 8009dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009de0:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <HAL_UART_MspInit+0xbc>)
 8009de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	60bb      	str	r3, [r7, #8]
 8009dea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009dec:	230c      	movs	r3, #12
 8009dee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df0:	2302      	movs	r3, #2
 8009df2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df4:	2300      	movs	r3, #0
 8009df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009dfc:	2307      	movs	r3, #7
 8009dfe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009e04:	4619      	mov	r1, r3
 8009e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009e0a:	f001 f9a9 	bl	800b160 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2100      	movs	r1, #0
 8009e12:	2026      	movs	r0, #38	@ 0x26
 8009e14:	f000 fa33 	bl	800a27e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009e18:	2026      	movs	r0, #38	@ 0x26
 8009e1a:	f000 fa4a 	bl	800a2b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009e1e:	bf00      	nop
 8009e20:	3778      	adds	r7, #120	@ 0x78
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	40004400 	.word	0x40004400
 8009e2c:	40021000 	.word	0x40021000

08009e30 <sign_extend_bits_to_32>:

#include "utility.h"


//TODO make sure that is works for less than 24 bit values
int32_t sign_extend_bits_to_32(int32_t x, uint8_t bits) {
 8009e30:	b480      	push	{r7}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]

	uint32_t sign_mask = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	617b      	str	r3, [r7, #20]
	//getting value of sign bit
	sign_mask = 1u << (bits - 1);
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	2201      	movs	r2, #1
 8009e46:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4a:	617b      	str	r3, [r7, #20]
	uint32_t sign_bit = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	613b      	str	r3, [r7, #16]
	sign_bit = x & sign_mask;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	4013      	ands	r3, r2
 8009e56:	613b      	str	r3, [r7, #16]
	if(sign_bit) //if value < 0 therefore sign_bit == 1, fill first 8 bits with 1
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d010      	beq.n	8009e80 <sign_extend_bits_to_32+0x50>
	{
		int32_t res = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]
		int32_t mask = 0b11111111;
 8009e62:	23ff      	movs	r3, #255	@ 0xff
 8009e64:	60bb      	str	r3, [r7, #8]
		res |= x;
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	60fb      	str	r3, [r7, #12]
		res |= (mask << (bits));
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	fa02 f303 	lsl.w	r3, r2, r3
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
		return res;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	e000      	b.n	8009e82 <sign_extend_bits_to_32+0x52>
	}
    return x; //else return value itself
 8009e80:	687b      	ldr	r3, [r7, #4]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	371c      	adds	r7, #28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
	...

08009e90 <steps_to_rads>:
	*value = (((*min_value < *value)? *value : *min_value) > *max_value)? *max_value: *value;
}


float steps_to_rads(int32_t steps, int32_t full_steps)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
	float rads = 0;
 8009e9a:	f04f 0300 	mov.w	r3, #0
 8009e9e:	60fb      	str	r3, [r7, #12]
	rads = ((float)steps /(float)full_steps) * (M_PI * 2);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	ee07 3a90 	vmov	s15, r3
 8009eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009eb4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009eb8:	ee16 0a90 	vmov	r0, s13
 8009ebc:	f7f6 fb6c 	bl	8000598 <__aeabi_f2d>
 8009ec0:	a30b      	add	r3, pc, #44	@ (adr r3, 8009ef0 <steps_to_rads+0x60>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f7f6 fbbf 	bl	8000648 <__aeabi_dmul>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4610      	mov	r0, r2
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	f7f6 feb1 	bl	8000c38 <__aeabi_d2f>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	60fb      	str	r3, [r7, #12]
	return rads;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	ee07 3a90 	vmov	s15, r3
}
 8009ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	f3af 8000 	nop.w
 8009ef0:	54442d18 	.word	0x54442d18
 8009ef4:	401921fb 	.word	0x401921fb

08009ef8 <rad_to_steps>:

int32_t rad_to_steps(float rads, int32_t full_steps)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	ed87 0a01 	vstr	s0, [r7, #4]
 8009f02:	6038      	str	r0, [r7, #0]
	int32_t steps = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]
	steps = (int32_t)((full_steps * rads)/(M_PI * 2));
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	ee07 3a90 	vmov	s15, r3
 8009f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1a:	ee17 0a90 	vmov	r0, s15
 8009f1e:	f7f6 fb3b 	bl	8000598 <__aeabi_f2d>
 8009f22:	a309      	add	r3, pc, #36	@ (adr r3, 8009f48 <rad_to_steps+0x50>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	f7f6 fcb8 	bl	800089c <__aeabi_ddiv>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4610      	mov	r0, r2
 8009f32:	4619      	mov	r1, r3
 8009f34:	f7f6 fe38 	bl	8000ba8 <__aeabi_d2iz>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	60fb      	str	r3, [r7, #12]
	return steps;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	54442d18 	.word	0x54442d18
 8009f4c:	401921fb 	.word	0x401921fb

08009f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009f50:	480d      	ldr	r0, [pc, #52]	@ (8009f88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009f52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009f54:	f7ff f8fc 	bl	8009150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009f58:	480c      	ldr	r0, [pc, #48]	@ (8009f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8009f5a:	490d      	ldr	r1, [pc, #52]	@ (8009f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8009f94 <LoopForever+0xe>)
  movs r3, #0
 8009f5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009f60:	e002      	b.n	8009f68 <LoopCopyDataInit>

08009f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009f66:	3304      	adds	r3, #4

08009f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009f6c:	d3f9      	bcc.n	8009f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8009f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009f70:	4c0a      	ldr	r4, [pc, #40]	@ (8009f9c <LoopForever+0x16>)
  movs r3, #0
 8009f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009f74:	e001      	b.n	8009f7a <LoopFillZerobss>

08009f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009f78:	3204      	adds	r2, #4

08009f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009f7c:	d3fb      	bcc.n	8009f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009f7e:	f00a fd37 	bl	80149f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009f82:	f7fe fd09 	bl	8008998 <main>

08009f86 <LoopForever>:

LoopForever:
    b LoopForever
 8009f86:	e7fe      	b.n	8009f86 <LoopForever>
  ldr   r0, =_estack
 8009f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009f90:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8009f94:	08019438 	.word	0x08019438
  ldr r2, =_sbss
 8009f98:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8009f9c:	20000b94 	.word	0x20000b94

08009fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009fa0:	e7fe      	b.n	8009fa0 <ADC1_2_IRQHandler>

08009fa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009fac:	2003      	movs	r0, #3
 8009fae:	f000 f95b 	bl	800a268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009fb2:	200f      	movs	r0, #15
 8009fb4:	f000 f80e 	bl	8009fd4 <HAL_InitTick>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	71fb      	strb	r3, [r7, #7]
 8009fc2:	e001      	b.n	8009fc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009fc4:	f7fe ff5a 	bl	8008e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009fc8:	79fb      	ldrb	r3, [r7, #7]

}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009fe0:	4b16      	ldr	r3, [pc, #88]	@ (800a03c <HAL_InitTick+0x68>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d022      	beq.n	800a02e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009fe8:	4b15      	ldr	r3, [pc, #84]	@ (800a040 <HAL_InitTick+0x6c>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	4b13      	ldr	r3, [pc, #76]	@ (800a03c <HAL_InitTick+0x68>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 f966 	bl	800a2ce <HAL_SYSTICK_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10f      	bne.n	800a028 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b0f      	cmp	r3, #15
 800a00c:	d809      	bhi.n	800a022 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a00e:	2200      	movs	r2, #0
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	f04f 30ff 	mov.w	r0, #4294967295
 800a016:	f000 f932 	bl	800a27e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a01a:	4a0a      	ldr	r2, [pc, #40]	@ (800a044 <HAL_InitTick+0x70>)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	e007      	b.n	800a032 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	73fb      	strb	r3, [r7, #15]
 800a026:	e004      	b.n	800a032 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	73fb      	strb	r3, [r7, #15]
 800a02c:	e001      	b.n	800a032 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20000080 	.word	0x20000080
 800a040:	20000078 	.word	0x20000078
 800a044:	2000007c 	.word	0x2000007c

0800a048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a048:	b480      	push	{r7}
 800a04a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a04c:	4b05      	ldr	r3, [pc, #20]	@ (800a064 <HAL_IncTick+0x1c>)
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	4b05      	ldr	r3, [pc, #20]	@ (800a068 <HAL_IncTick+0x20>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4413      	add	r3, r2
 800a056:	4a03      	ldr	r2, [pc, #12]	@ (800a064 <HAL_IncTick+0x1c>)
 800a058:	6013      	str	r3, [r2, #0]
}
 800a05a:	bf00      	nop
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	200009fc 	.word	0x200009fc
 800a068:	20000080 	.word	0x20000080

0800a06c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  return uwTick;
 800a070:	4b03      	ldr	r3, [pc, #12]	@ (800a080 <HAL_GetTick+0x14>)
 800a072:	681b      	ldr	r3, [r3, #0]
}
 800a074:	4618      	mov	r0, r3
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	200009fc 	.word	0x200009fc

0800a084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a08c:	f7ff ffee 	bl	800a06c <HAL_GetTick>
 800a090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09c:	d004      	beq.n	800a0a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800a09e:	4b09      	ldr	r3, [pc, #36]	@ (800a0c4 <HAL_Delay+0x40>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a0a8:	bf00      	nop
 800a0aa:	f7ff ffdf 	bl	800a06c <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d8f7      	bhi.n	800a0aa <HAL_Delay+0x26>
  {
  }
}
 800a0ba:	bf00      	nop
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	20000080 	.word	0x20000080

0800a0c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <__NVIC_SetPriorityGrouping+0x44>)
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a0f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a0f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a0fa:	4a04      	ldr	r2, [pc, #16]	@ (800a10c <__NVIC_SetPriorityGrouping+0x44>)
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	60d3      	str	r3, [r2, #12]
}
 800a100:	bf00      	nop
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	e000ed00 	.word	0xe000ed00

0800a110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a114:	4b04      	ldr	r3, [pc, #16]	@ (800a128 <__NVIC_GetPriorityGrouping+0x18>)
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	0a1b      	lsrs	r3, r3, #8
 800a11a:	f003 0307 	and.w	r3, r3, #7
}
 800a11e:	4618      	mov	r0, r3
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	e000ed00 	.word	0xe000ed00

0800a12c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	4603      	mov	r3, r0
 800a134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	db0b      	blt.n	800a156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	f003 021f 	and.w	r2, r3, #31
 800a144:	4907      	ldr	r1, [pc, #28]	@ (800a164 <__NVIC_EnableIRQ+0x38>)
 800a146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a14a:	095b      	lsrs	r3, r3, #5
 800a14c:	2001      	movs	r0, #1
 800a14e:	fa00 f202 	lsl.w	r2, r0, r2
 800a152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a156:	bf00      	nop
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	e000e100 	.word	0xe000e100

0800a168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	6039      	str	r1, [r7, #0]
 800a172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	db0a      	blt.n	800a192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	490c      	ldr	r1, [pc, #48]	@ (800a1b4 <__NVIC_SetPriority+0x4c>)
 800a182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a186:	0112      	lsls	r2, r2, #4
 800a188:	b2d2      	uxtb	r2, r2
 800a18a:	440b      	add	r3, r1
 800a18c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a190:	e00a      	b.n	800a1a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	b2da      	uxtb	r2, r3
 800a196:	4908      	ldr	r1, [pc, #32]	@ (800a1b8 <__NVIC_SetPriority+0x50>)
 800a198:	79fb      	ldrb	r3, [r7, #7]
 800a19a:	f003 030f 	and.w	r3, r3, #15
 800a19e:	3b04      	subs	r3, #4
 800a1a0:	0112      	lsls	r2, r2, #4
 800a1a2:	b2d2      	uxtb	r2, r2
 800a1a4:	440b      	add	r3, r1
 800a1a6:	761a      	strb	r2, [r3, #24]
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	e000e100 	.word	0xe000e100
 800a1b8:	e000ed00 	.word	0xe000ed00

0800a1bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b089      	sub	sp, #36	@ 0x24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f003 0307 	and.w	r3, r3, #7
 800a1ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	f1c3 0307 	rsb	r3, r3, #7
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	bf28      	it	cs
 800a1da:	2304      	movcs	r3, #4
 800a1dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	2b06      	cmp	r3, #6
 800a1e4:	d902      	bls.n	800a1ec <NVIC_EncodePriority+0x30>
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	3b03      	subs	r3, #3
 800a1ea:	e000      	b.n	800a1ee <NVIC_EncodePriority+0x32>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fa:	43da      	mvns	r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	401a      	ands	r2, r3
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a204:	f04f 31ff 	mov.w	r1, #4294967295
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	fa01 f303 	lsl.w	r3, r1, r3
 800a20e:	43d9      	mvns	r1, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a214:	4313      	orrs	r3, r2
         );
}
 800a216:	4618      	mov	r0, r3
 800a218:	3724      	adds	r7, #36	@ 0x24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
	...

0800a224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3b01      	subs	r3, #1
 800a230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a234:	d301      	bcc.n	800a23a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a236:	2301      	movs	r3, #1
 800a238:	e00f      	b.n	800a25a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a23a:	4a0a      	ldr	r2, [pc, #40]	@ (800a264 <SysTick_Config+0x40>)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3b01      	subs	r3, #1
 800a240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a242:	210f      	movs	r1, #15
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	f7ff ff8e 	bl	800a168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a24c:	4b05      	ldr	r3, [pc, #20]	@ (800a264 <SysTick_Config+0x40>)
 800a24e:	2200      	movs	r2, #0
 800a250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a252:	4b04      	ldr	r3, [pc, #16]	@ (800a264 <SysTick_Config+0x40>)
 800a254:	2207      	movs	r2, #7
 800a256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	e000e010 	.word	0xe000e010

0800a268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff ff29 	bl	800a0c8 <__NVIC_SetPriorityGrouping>
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b086      	sub	sp, #24
 800a282:	af00      	add	r7, sp, #0
 800a284:	4603      	mov	r3, r0
 800a286:	60b9      	str	r1, [r7, #8]
 800a288:	607a      	str	r2, [r7, #4]
 800a28a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a28c:	f7ff ff40 	bl	800a110 <__NVIC_GetPriorityGrouping>
 800a290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	68b9      	ldr	r1, [r7, #8]
 800a296:	6978      	ldr	r0, [r7, #20]
 800a298:	f7ff ff90 	bl	800a1bc <NVIC_EncodePriority>
 800a29c:	4602      	mov	r2, r0
 800a29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7ff ff5f 	bl	800a168 <__NVIC_SetPriority>
}
 800a2aa:	bf00      	nop
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a2bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff ff33 	bl	800a12c <__NVIC_EnableIRQ>
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b082      	sub	sp, #8
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7ff ffa4 	bl	800a224 <SysTick_Config>
 800a2dc:	4603      	mov	r3, r0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e08d      	b.n	800a416 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	4b47      	ldr	r3, [pc, #284]	@ (800a420 <HAL_DMA_Init+0x138>)
 800a302:	429a      	cmp	r2, r3
 800a304:	d80f      	bhi.n	800a326 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	4b45      	ldr	r3, [pc, #276]	@ (800a424 <HAL_DMA_Init+0x13c>)
 800a30e:	4413      	add	r3, r2
 800a310:	4a45      	ldr	r2, [pc, #276]	@ (800a428 <HAL_DMA_Init+0x140>)
 800a312:	fba2 2303 	umull	r2, r3, r2, r3
 800a316:	091b      	lsrs	r3, r3, #4
 800a318:	009a      	lsls	r2, r3, #2
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a42      	ldr	r2, [pc, #264]	@ (800a42c <HAL_DMA_Init+0x144>)
 800a322:	641a      	str	r2, [r3, #64]	@ 0x40
 800a324:	e00e      	b.n	800a344 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	4b40      	ldr	r3, [pc, #256]	@ (800a430 <HAL_DMA_Init+0x148>)
 800a32e:	4413      	add	r3, r2
 800a330:	4a3d      	ldr	r2, [pc, #244]	@ (800a428 <HAL_DMA_Init+0x140>)
 800a332:	fba2 2303 	umull	r2, r3, r2, r3
 800a336:	091b      	lsrs	r3, r3, #4
 800a338:	009a      	lsls	r2, r3, #2
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a3c      	ldr	r2, [pc, #240]	@ (800a434 <HAL_DMA_Init+0x14c>)
 800a342:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a35a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a35e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f9cc 	bl	800a734 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3a4:	d102      	bne.n	800a3ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a3c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d010      	beq.n	800a3ec <HAL_DMA_Init+0x104>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d80c      	bhi.n	800a3ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f9ec 	bl	800a7b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a3e8:	605a      	str	r2, [r3, #4]
 800a3ea:	e008      	b.n	800a3fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	40020407 	.word	0x40020407
 800a424:	bffdfff8 	.word	0xbffdfff8
 800a428:	cccccccd 	.word	0xcccccccd
 800a42c:	40020000 	.word	0x40020000
 800a430:	bffdfbf8 	.word	0xbffdfbf8
 800a434:	40020400 	.word	0x40020400

0800a438 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d005      	beq.n	800a45c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2204      	movs	r2, #4
 800a454:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	73fb      	strb	r3, [r7, #15]
 800a45a:	e037      	b.n	800a4cc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f022 020e 	bic.w	r2, r2, #14
 800a46a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a476:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a47a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f022 0201 	bic.w	r2, r2, #1
 800a48a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a490:	f003 021f 	and.w	r2, r3, #31
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a498:	2101      	movs	r1, #1
 800a49a:	fa01 f202 	lsl.w	r2, r1, r2
 800a49e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a4a8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00c      	beq.n	800a4cc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a4c0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a4ca:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d00d      	beq.n	800a51e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2204      	movs	r2, #4
 800a506:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	73fb      	strb	r3, [r7, #15]
 800a51c:	e047      	b.n	800a5ae <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 020e 	bic.w	r2, r2, #14
 800a52c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 0201 	bic.w	r2, r2, #1
 800a53c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a54c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a552:	f003 021f 	and.w	r2, r3, #31
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a55a:	2101      	movs	r1, #1
 800a55c:	fa01 f202 	lsl.w	r2, r1, r2
 800a560:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a56a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00c      	beq.n	800a58e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a57e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a582:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a58c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
    }
  }
  return status;
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5d4:	f003 031f 	and.w	r3, r3, #31
 800a5d8:	2204      	movs	r2, #4
 800a5da:	409a      	lsls	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d026      	beq.n	800a632 <HAL_DMA_IRQHandler+0x7a>
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	f003 0304 	and.w	r3, r3, #4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d021      	beq.n	800a632 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0320 	and.w	r3, r3, #32
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d107      	bne.n	800a60c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f022 0204 	bic.w	r2, r2, #4
 800a60a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a610:	f003 021f 	and.w	r2, r3, #31
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a618:	2104      	movs	r1, #4
 800a61a:	fa01 f202 	lsl.w	r2, r1, r2
 800a61e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a624:	2b00      	cmp	r3, #0
 800a626:	d071      	beq.n	800a70c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a630:	e06c      	b.n	800a70c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a636:	f003 031f 	and.w	r3, r3, #31
 800a63a:	2202      	movs	r2, #2
 800a63c:	409a      	lsls	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	4013      	ands	r3, r2
 800a642:	2b00      	cmp	r3, #0
 800a644:	d02e      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	f003 0302 	and.w	r3, r3, #2
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d029      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10b      	bne.n	800a676 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f022 020a 	bic.w	r2, r2, #10
 800a66c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a67a:	f003 021f 	and.w	r2, r3, #31
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a682:	2102      	movs	r1, #2
 800a684:	fa01 f202 	lsl.w	r2, r1, r2
 800a688:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d038      	beq.n	800a70c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a6a2:	e033      	b.n	800a70c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6a8:	f003 031f 	and.w	r3, r3, #31
 800a6ac:	2208      	movs	r2, #8
 800a6ae:	409a      	lsls	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d02a      	beq.n	800a70e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	f003 0308 	and.w	r3, r3, #8
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d025      	beq.n	800a70e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f022 020e 	bic.w	r2, r2, #14
 800a6d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6d6:	f003 021f 	and.w	r2, r3, #31
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6de:	2101      	movs	r1, #1
 800a6e0:	fa01 f202 	lsl.w	r2, r1, r2
 800a6e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a700:	2b00      	cmp	r3, #0
 800a702:	d004      	beq.n	800a70e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a70c:	bf00      	nop
 800a70e:	bf00      	nop
}
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a716:	b480      	push	{r7}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a724:	b2db      	uxtb	r3, r3
}
 800a726:	4618      	mov	r0, r3
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
	...

0800a734 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	4b16      	ldr	r3, [pc, #88]	@ (800a79c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a744:	429a      	cmp	r2, r3
 800a746:	d802      	bhi.n	800a74e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a748:	4b15      	ldr	r3, [pc, #84]	@ (800a7a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a74a:	617b      	str	r3, [r7, #20]
 800a74c:	e001      	b.n	800a752 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a74e:	4b15      	ldr	r3, [pc, #84]	@ (800a7a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a750:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	3b08      	subs	r3, #8
 800a75e:	4a12      	ldr	r2, [pc, #72]	@ (800a7a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a760:	fba2 2303 	umull	r2, r3, r2, r3
 800a764:	091b      	lsrs	r3, r3, #4
 800a766:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a76c:	089b      	lsrs	r3, r3, #2
 800a76e:	009a      	lsls	r2, r3, #2
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	4413      	add	r3, r2
 800a774:	461a      	mov	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a0b      	ldr	r2, [pc, #44]	@ (800a7ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a77e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f003 031f 	and.w	r3, r3, #31
 800a786:	2201      	movs	r2, #1
 800a788:	409a      	lsls	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a78e:	bf00      	nop
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	40020407 	.word	0x40020407
 800a7a0:	40020800 	.word	0x40020800
 800a7a4:	40020820 	.word	0x40020820
 800a7a8:	cccccccd 	.word	0xcccccccd
 800a7ac:	40020880 	.word	0x40020880

0800a7b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a7c4:	4413      	add	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a08      	ldr	r2, [pc, #32]	@ (800a7f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a7d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	f003 031f 	and.w	r3, r3, #31
 800a7dc:	2201      	movs	r2, #1
 800a7de:	409a      	lsls	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800a7e4:	bf00      	nop
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	1000823f 	.word	0x1000823f
 800a7f4:	40020940 	.word	0x40020940

0800a7f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e147      	b.n	800aa9a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d106      	bne.n	800a824 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7fd fdd2 	bl	80083c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	699a      	ldr	r2, [r3, #24]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 0210 	bic.w	r2, r2, #16
 800a832:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a834:	f7ff fc1a 	bl	800a06c <HAL_GetTick>
 800a838:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a83a:	e012      	b.n	800a862 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a83c:	f7ff fc16 	bl	800a06c <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b0a      	cmp	r3, #10
 800a848:	d90b      	bls.n	800a862 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a84e:	f043 0201 	orr.w	r2, r3, #1
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2203      	movs	r2, #3
 800a85a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e11b      	b.n	800aa9a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	f003 0308 	and.w	r3, r3, #8
 800a86c:	2b08      	cmp	r3, #8
 800a86e:	d0e5      	beq.n	800a83c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	699a      	ldr	r2, [r3, #24]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0201 	orr.w	r2, r2, #1
 800a87e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a880:	f7ff fbf4 	bl	800a06c <HAL_GetTick>
 800a884:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a886:	e012      	b.n	800a8ae <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a888:	f7ff fbf0 	bl	800a06c <HAL_GetTick>
 800a88c:	4602      	mov	r2, r0
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	2b0a      	cmp	r3, #10
 800a894:	d90b      	bls.n	800a8ae <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a89a:	f043 0201 	orr.w	r2, r3, #1
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e0f5      	b.n	800aa9a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0e5      	beq.n	800a888 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	699a      	ldr	r2, [r3, #24]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0202 	orr.w	r2, r2, #2
 800a8ca:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a74      	ldr	r2, [pc, #464]	@ (800aaa4 <HAL_FDCAN_Init+0x2ac>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d103      	bne.n	800a8de <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800a8d6:	4a74      	ldr	r2, [pc, #464]	@ (800aaa8 <HAL_FDCAN_Init+0x2b0>)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	7c1b      	ldrb	r3, [r3, #16]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d108      	bne.n	800a8f8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	699a      	ldr	r2, [r3, #24]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8f4:	619a      	str	r2, [r3, #24]
 800a8f6:	e007      	b.n	800a908 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	699a      	ldr	r2, [r3, #24]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a906:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	7c5b      	ldrb	r3, [r3, #17]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d108      	bne.n	800a922 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a91e:	619a      	str	r2, [r3, #24]
 800a920:	e007      	b.n	800a932 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	699a      	ldr	r2, [r3, #24]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a930:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	7c9b      	ldrb	r3, [r3, #18]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d108      	bne.n	800a94c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	699a      	ldr	r2, [r3, #24]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a948:	619a      	str	r2, [r3, #24]
 800a94a:	e007      	b.n	800a95c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	699a      	ldr	r2, [r3, #24]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a95a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	689a      	ldr	r2, [r3, #8]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	430a      	orrs	r2, r1
 800a970:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	699a      	ldr	r2, [r3, #24]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800a980:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0210 	bic.w	r2, r2, #16
 800a990:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d108      	bne.n	800a9ac <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	699a      	ldr	r2, [r3, #24]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f042 0204 	orr.w	r2, r2, #4
 800a9a8:	619a      	str	r2, [r3, #24]
 800a9aa:	e02c      	b.n	800aa06 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d028      	beq.n	800aa06 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d01c      	beq.n	800a9f6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	699a      	ldr	r2, [r3, #24]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a9ca:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691a      	ldr	r2, [r3, #16]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f042 0210 	orr.w	r2, r2, #16
 800a9da:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	2b03      	cmp	r3, #3
 800a9e2:	d110      	bne.n	800aa06 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f042 0220 	orr.w	r2, r2, #32
 800a9f2:	619a      	str	r2, [r3, #24]
 800a9f4:	e007      	b.n	800aa06 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	699a      	ldr	r2, [r3, #24]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f042 0220 	orr.w	r2, r2, #32
 800aa04:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	699b      	ldr	r3, [r3, #24]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800aa16:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800aa1e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800aa2e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800aa30:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa3a:	d115      	bne.n	800aa68 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa40:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa46:	3b01      	subs	r3, #1
 800aa48:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800aa4a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa50:	3b01      	subs	r3, #1
 800aa52:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800aa54:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800aa64:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800aa66:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fa86 	bl	800af90 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	40006400 	.word	0x40006400
 800aaa8:	40006500 	.word	0x40006500

0800aaac <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800aabc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d002      	beq.n	800aaca <HAL_FDCAN_ConfigFilter+0x1e>
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d13d      	bne.n	800ab46 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d119      	bne.n	800ab06 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800aade:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800aae6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800aaec:	4313      	orrs	r3, r2
 800aaee:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	e01d      	b.n	800ab42 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	075a      	lsls	r2, r3, #29
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	079a      	lsls	r2, r3, #30
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	00db      	lsls	r3, r3, #3
 800ab2c:	4413      	add	r3, r2
 800ab2e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	3304      	adds	r3, #4
 800ab3a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e006      	b.n	800ab54 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab4a:	f043 0202 	orr.w	r2, r3, #2
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
  }
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	371c      	adds	r7, #28
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d116      	bne.n	800aba8 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab82:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	011a      	lsls	r2, r3, #4
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	431a      	orrs	r2, r3
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	431a      	orrs	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	e006      	b.n	800abb6 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abac:	f043 0204 	orr.w	r2, r3, #4
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
  }
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b085      	sub	sp, #20
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d108      	bne.n	800abec <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	0219      	lsls	r1, r3, #8
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	e006      	b.n	800abfa <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abf0:	f043 0204 	orr.w	r2, r3, #4
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
  }
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b083      	sub	sp, #12
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d109      	bne.n	800ac2e <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68da      	ldr	r2, [r3, #12]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800ac28:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e006      	b.n	800ac3c <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac32:	f043 0204 	orr.w	r2, r3, #4
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
  }
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d110      	bne.n	800ac7e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	699a      	ldr	r2, [r3, #24]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f022 0201 	bic.w	r2, r2, #1
 800ac72:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e006      	b.n	800ac8c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac82:	f043 0204 	orr.w	r2, r3, #4
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
  }
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d12c      	bne.n	800ad0a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800acb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d007      	beq.n	800acd0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e023      	b.n	800ad18 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800acd8:	0c1b      	lsrs	r3, r3, #16
 800acda:	f003 0303 	and.w	r3, r3, #3
 800acde:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	68b9      	ldr	r1, [r7, #8]
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f000 f9be 	bl	800b068 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2101      	movs	r1, #1
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	fa01 f202 	lsl.w	r2, r1, r2
 800acf8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800acfc:	2201      	movs	r2, #1
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	409a      	lsls	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	e006      	b.n	800ad18 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad0e:	f043 0208 	orr.w	r2, r3, #8
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
  }
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3718      	adds	r7, #24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b08b      	sub	sp, #44	@ 0x2c
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ad38:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800ad3a:	7efb      	ldrb	r3, [r7, #27]
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	f040 80e8 	bne.w	800af12 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2b40      	cmp	r3, #64	@ 0x40
 800ad46:	d137      	bne.n	800adb8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad50:	f003 030f 	and.w	r3, r3, #15
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d107      	bne.n	800ad68 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e0db      	b.n	800af20 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad70:	0e1b      	lsrs	r3, r3, #24
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d10a      	bne.n	800ad90 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad82:	0a5b      	lsrs	r3, r3, #9
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d101      	bne.n	800ad90 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad98:	0a1b      	lsrs	r3, r3, #8
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	69fa      	ldr	r2, [r7, #28]
 800ada0:	4413      	add	r3, r2
 800ada2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800ada8:	69fa      	ldr	r2, [r7, #28]
 800adaa:	4613      	mov	r3, r2
 800adac:	00db      	lsls	r3, r3, #3
 800adae:	4413      	add	r3, r2
 800adb0:	00db      	lsls	r3, r3, #3
 800adb2:	440b      	add	r3, r1
 800adb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800adb6:	e036      	b.n	800ae26 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800adc0:	f003 030f 	and.w	r3, r3, #15
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d107      	bne.n	800add8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e0a3      	b.n	800af20 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ade0:	0e1b      	lsrs	r3, r3, #24
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d10a      	bne.n	800ae00 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adf2:	0a1b      	lsrs	r3, r3, #8
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d101      	bne.n	800ae00 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800adfc:	2301      	movs	r3, #1
 800adfe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae08:	0a1b      	lsrs	r3, r3, #8
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	69fa      	ldr	r2, [r7, #28]
 800ae10:	4413      	add	r3, r2
 800ae12:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ae18:	69fa      	ldr	r2, [r7, #28]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	4413      	add	r3, r2
 800ae20:	00db      	lsls	r3, r3, #3
 800ae22:	440b      	add	r3, r1
 800ae24:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d107      	bne.n	800ae4a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	0c9b      	lsrs	r3, r3, #18
 800ae40:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	e005      	b.n	800ae56 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800ae56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800ae62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae70:	3304      	adds	r3, #4
 800ae72:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	0c1b      	lsrs	r3, r3, #16
 800ae84:	f003 020f 	and.w	r2, r3, #15
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	0e1b      	lsrs	r3, r3, #24
 800aeaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	0fda      	lsrs	r2, r3, #31
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800aebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebe:	3304      	adds	r3, #4
 800aec0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800aec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800aec6:	2300      	movs	r3, #0
 800aec8:	623b      	str	r3, [r7, #32]
 800aeca:	e00a      	b.n	800aee2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	441a      	add	r2, r3
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	440b      	add	r3, r1
 800aed8:	7812      	ldrb	r2, [r2, #0]
 800aeda:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	3301      	adds	r3, #1
 800aee0:	623b      	str	r3, [r7, #32]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	4a11      	ldr	r2, [pc, #68]	@ (800af2c <HAL_FDCAN_GetRxMessage+0x20c>)
 800aee8:	5cd3      	ldrb	r3, [r2, r3]
 800aeea:	461a      	mov	r2, r3
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d3ec      	bcc.n	800aecc <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	2b40      	cmp	r3, #64	@ 0x40
 800aef6:	d105      	bne.n	800af04 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	69fa      	ldr	r2, [r7, #28]
 800aefe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800af02:	e004      	b.n	800af0e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	69fa      	ldr	r2, [r7, #28]
 800af0a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	e006      	b.n	800af20 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af16:	f043 0208 	orr.w	r2, r3, #8
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
  }
}
 800af20:	4618      	mov	r0, r3
 800af22:	372c      	adds	r7, #44	@ 0x2c
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	08018998 	.word	0x08018998

0800af30 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b40      	cmp	r3, #64	@ 0x40
 800af3e:	d107      	bne.n	800af50 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af48:	f003 030f 	and.w	r3, r3, #15
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	e006      	b.n	800af5e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800af58:	f003 030f 	and.w	r3, r3, #15
 800af5c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800af5e:	68fb      	ldr	r3, [r7, #12]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800af7c:	f003 0307 	and.w	r3, r3, #7
 800af80:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800af82:	68fb      	ldr	r3, [r7, #12]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800af98:	4b30      	ldr	r3, [pc, #192]	@ (800b05c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800af9a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a2f      	ldr	r2, [pc, #188]	@ (800b060 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d103      	bne.n	800afae <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800afac:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a2c      	ldr	r2, [pc, #176]	@ (800b064 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d103      	bne.n	800afc0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800afbe:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afce:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afd6:	041a      	lsls	r2, r3, #16
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affc:	061a      	lsls	r2, r3, #24
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	430a      	orrs	r2, r1
 800b004:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	e005      	b.n	800b042 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3304      	adds	r3, #4
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d3f3      	bcc.n	800b036 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800b04e:	bf00      	nop
 800b050:	bf00      	nop
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	4000a400 	.word	0x4000a400
 800b060:	40006800 	.word	0x40006800
 800b064:	40006c00 	.word	0x40006c00

0800b068 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800b068:	b480      	push	{r7}
 800b06a:	b089      	sub	sp, #36	@ 0x24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10a      	bne.n	800b094 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b086:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b08e:	4313      	orrs	r3, r2
 800b090:	61fb      	str	r3, [r7, #28]
 800b092:	e00a      	b.n	800b0aa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b09c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b0a2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b0a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b0a8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b0b4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b0ba:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b0c0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	00db      	lsls	r3, r3, #3
 800b0d6:	4413      	add	r3, r2
 800b0d8:	00db      	lsls	r3, r3, #3
 800b0da:	440b      	add	r3, r1
 800b0dc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	69fa      	ldr	r2, [r7, #28]
 800b0e2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	e020      	b.n	800b13e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	3303      	adds	r3, #3
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4413      	add	r3, r2
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	3302      	adds	r3, #2
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	440b      	add	r3, r1
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b114:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	3301      	adds	r3, #1
 800b11a:	6879      	ldr	r1, [r7, #4]
 800b11c:	440b      	add	r3, r1
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b122:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	440a      	add	r2, r1
 800b12a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b12c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	3304      	adds	r3, #4
 800b136:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	3304      	adds	r3, #4
 800b13c:	617b      	str	r3, [r7, #20]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	4a06      	ldr	r2, [pc, #24]	@ (800b15c <FDCAN_CopyMessageToRAM+0xf4>)
 800b144:	5cd3      	ldrb	r3, [r2, r3]
 800b146:	461a      	mov	r2, r3
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d3d6      	bcc.n	800b0fc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800b14e:	bf00      	nop
 800b150:	bf00      	nop
 800b152:	3724      	adds	r7, #36	@ 0x24
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	08018998 	.word	0x08018998

0800b160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b160:	b480      	push	{r7}
 800b162:	b087      	sub	sp, #28
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b16e:	e15a      	b.n	800b426 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	2101      	movs	r1, #1
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	fa01 f303 	lsl.w	r3, r1, r3
 800b17c:	4013      	ands	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	f000 814c 	beq.w	800b420 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	2b01      	cmp	r3, #1
 800b192:	d005      	beq.n	800b1a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d130      	bne.n	800b202 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	2203      	movs	r2, #3
 800b1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b0:	43db      	mvns	r3, r3
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	68da      	ldr	r2, [r3, #12]
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	005b      	lsls	r3, r3, #1
 800b1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	fa02 f303 	lsl.w	r3, r2, r3
 800b1de:	43db      	mvns	r3, r3
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	091b      	lsrs	r3, r3, #4
 800b1ec:	f003 0201 	and.w	r2, r3, #1
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d017      	beq.n	800b23e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	2203      	movs	r2, #3
 800b21a:	fa02 f303 	lsl.w	r3, r2, r3
 800b21e:	43db      	mvns	r3, r3
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	4013      	ands	r3, r2
 800b224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	689a      	ldr	r2, [r3, #8]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	005b      	lsls	r3, r3, #1
 800b22e:	fa02 f303 	lsl.w	r3, r2, r3
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	4313      	orrs	r3, r2
 800b236:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	2b02      	cmp	r3, #2
 800b248:	d123      	bne.n	800b292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	08da      	lsrs	r2, r3, #3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3208      	adds	r2, #8
 800b252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f003 0307 	and.w	r3, r3, #7
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	220f      	movs	r2, #15
 800b262:	fa02 f303 	lsl.w	r3, r2, r3
 800b266:	43db      	mvns	r3, r3
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	4013      	ands	r3, r2
 800b26c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	691a      	ldr	r2, [r3, #16]
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f003 0307 	and.w	r3, r3, #7
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	fa02 f303 	lsl.w	r3, r2, r3
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	4313      	orrs	r3, r2
 800b282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	08da      	lsrs	r2, r3, #3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	3208      	adds	r2, #8
 800b28c:	6939      	ldr	r1, [r7, #16]
 800b28e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	2203      	movs	r2, #3
 800b29e:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a2:	43db      	mvns	r3, r3
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f003 0203 	and.w	r2, r3, #3
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ba:	693a      	ldr	r2, [r7, #16]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f000 80a6 	beq.w	800b420 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2d4:	4b5b      	ldr	r3, [pc, #364]	@ (800b444 <HAL_GPIO_Init+0x2e4>)
 800b2d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2d8:	4a5a      	ldr	r2, [pc, #360]	@ (800b444 <HAL_GPIO_Init+0x2e4>)
 800b2da:	f043 0301 	orr.w	r3, r3, #1
 800b2de:	6613      	str	r3, [r2, #96]	@ 0x60
 800b2e0:	4b58      	ldr	r3, [pc, #352]	@ (800b444 <HAL_GPIO_Init+0x2e4>)
 800b2e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	60bb      	str	r3, [r7, #8]
 800b2ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b2ec:	4a56      	ldr	r2, [pc, #344]	@ (800b448 <HAL_GPIO_Init+0x2e8>)
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	089b      	lsrs	r3, r3, #2
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f003 0303 	and.w	r3, r3, #3
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	220f      	movs	r2, #15
 800b304:	fa02 f303 	lsl.w	r3, r2, r3
 800b308:	43db      	mvns	r3, r3
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	4013      	ands	r3, r2
 800b30e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b316:	d01f      	beq.n	800b358 <HAL_GPIO_Init+0x1f8>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a4c      	ldr	r2, [pc, #304]	@ (800b44c <HAL_GPIO_Init+0x2ec>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d019      	beq.n	800b354 <HAL_GPIO_Init+0x1f4>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a4b      	ldr	r2, [pc, #300]	@ (800b450 <HAL_GPIO_Init+0x2f0>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d013      	beq.n	800b350 <HAL_GPIO_Init+0x1f0>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a4a      	ldr	r2, [pc, #296]	@ (800b454 <HAL_GPIO_Init+0x2f4>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d00d      	beq.n	800b34c <HAL_GPIO_Init+0x1ec>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a49      	ldr	r2, [pc, #292]	@ (800b458 <HAL_GPIO_Init+0x2f8>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d007      	beq.n	800b348 <HAL_GPIO_Init+0x1e8>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a48      	ldr	r2, [pc, #288]	@ (800b45c <HAL_GPIO_Init+0x2fc>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d101      	bne.n	800b344 <HAL_GPIO_Init+0x1e4>
 800b340:	2305      	movs	r3, #5
 800b342:	e00a      	b.n	800b35a <HAL_GPIO_Init+0x1fa>
 800b344:	2306      	movs	r3, #6
 800b346:	e008      	b.n	800b35a <HAL_GPIO_Init+0x1fa>
 800b348:	2304      	movs	r3, #4
 800b34a:	e006      	b.n	800b35a <HAL_GPIO_Init+0x1fa>
 800b34c:	2303      	movs	r3, #3
 800b34e:	e004      	b.n	800b35a <HAL_GPIO_Init+0x1fa>
 800b350:	2302      	movs	r3, #2
 800b352:	e002      	b.n	800b35a <HAL_GPIO_Init+0x1fa>
 800b354:	2301      	movs	r3, #1
 800b356:	e000      	b.n	800b35a <HAL_GPIO_Init+0x1fa>
 800b358:	2300      	movs	r3, #0
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	f002 0203 	and.w	r2, r2, #3
 800b360:	0092      	lsls	r2, r2, #2
 800b362:	4093      	lsls	r3, r2
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	4313      	orrs	r3, r2
 800b368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b36a:	4937      	ldr	r1, [pc, #220]	@ (800b448 <HAL_GPIO_Init+0x2e8>)
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	089b      	lsrs	r3, r3, #2
 800b370:	3302      	adds	r3, #2
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b378:	4b39      	ldr	r3, [pc, #228]	@ (800b460 <HAL_GPIO_Init+0x300>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	43db      	mvns	r3, r3
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	4013      	ands	r3, r2
 800b386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b390:	2b00      	cmp	r3, #0
 800b392:	d003      	beq.n	800b39c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	4313      	orrs	r3, r2
 800b39a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b39c:	4a30      	ldr	r2, [pc, #192]	@ (800b460 <HAL_GPIO_Init+0x300>)
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b3a2:	4b2f      	ldr	r3, [pc, #188]	@ (800b460 <HAL_GPIO_Init+0x300>)
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	43db      	mvns	r3, r3
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	4013      	ands	r3, r2
 800b3b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b3c6:	4a26      	ldr	r2, [pc, #152]	@ (800b460 <HAL_GPIO_Init+0x300>)
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800b3cc:	4b24      	ldr	r3, [pc, #144]	@ (800b460 <HAL_GPIO_Init+0x300>)
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	43db      	mvns	r3, r3
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	4013      	ands	r3, r2
 800b3da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d003      	beq.n	800b3f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b3f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b460 <HAL_GPIO_Init+0x300>)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b3f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b460 <HAL_GPIO_Init+0x300>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	43db      	mvns	r3, r3
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	4013      	ands	r3, r2
 800b404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d003      	beq.n	800b41a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b41a:	4a11      	ldr	r2, [pc, #68]	@ (800b460 <HAL_GPIO_Init+0x300>)
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	3301      	adds	r3, #1
 800b424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	fa22 f303 	lsr.w	r3, r2, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	f47f ae9d 	bne.w	800b170 <HAL_GPIO_Init+0x10>
  }
}
 800b436:	bf00      	nop
 800b438:	bf00      	nop
 800b43a:	371c      	adds	r7, #28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	40021000 	.word	0x40021000
 800b448:	40010000 	.word	0x40010000
 800b44c:	48000400 	.word	0x48000400
 800b450:	48000800 	.word	0x48000800
 800b454:	48000c00 	.word	0x48000c00
 800b458:	48001000 	.word	0x48001000
 800b45c:	48001400 	.word	0x48001400
 800b460:	40010400 	.word	0x40010400

0800b464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	807b      	strh	r3, [r7, #2]
 800b470:	4613      	mov	r3, r2
 800b472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b474:	787b      	ldrb	r3, [r7, #1]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b47a:	887a      	ldrh	r2, [r7, #2]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b480:	e002      	b.n	800b488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b482:	887a      	ldrh	r2, [r7, #2]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b4a6:	887a      	ldrh	r2, [r7, #2]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	041a      	lsls	r2, r3, #16
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	43d9      	mvns	r1, r3
 800b4b2:	887b      	ldrh	r3, [r7, #2]
 800b4b4:	400b      	ands	r3, r1
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	619a      	str	r2, [r3, #24]
}
 800b4bc:	bf00      	nop
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e08d      	b.n	800b5f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d106      	bne.n	800b4f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7fd f8ac 	bl	800864c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2224      	movs	r2, #36	@ 0x24
 800b4f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0201 	bic.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685a      	ldr	r2, [r3, #4]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b518:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	689a      	ldr	r2, [r3, #8]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b528:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d107      	bne.n	800b542 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	689a      	ldr	r2, [r3, #8]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b53e:	609a      	str	r2, [r3, #8]
 800b540:	e006      	b.n	800b550 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b54e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	2b02      	cmp	r3, #2
 800b556:	d108      	bne.n	800b56a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685a      	ldr	r2, [r3, #4]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b566:	605a      	str	r2, [r3, #4]
 800b568:	e007      	b.n	800b57a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	685a      	ldr	r2, [r3, #4]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b578:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	6812      	ldr	r2, [r2, #0]
 800b584:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b58c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68da      	ldr	r2, [r3, #12]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b59c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	691a      	ldr	r2, [r3, #16]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	69d9      	ldr	r1, [r3, #28]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a1a      	ldr	r2, [r3, #32]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	430a      	orrs	r2, r1
 800b5c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f042 0201 	orr.w	r2, r2, #1
 800b5d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
	...

0800b600 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b088      	sub	sp, #32
 800b604:	af02      	add	r7, sp, #8
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	4608      	mov	r0, r1
 800b60a:	4611      	mov	r1, r2
 800b60c:	461a      	mov	r2, r3
 800b60e:	4603      	mov	r3, r0
 800b610:	817b      	strh	r3, [r7, #10]
 800b612:	460b      	mov	r3, r1
 800b614:	813b      	strh	r3, [r7, #8]
 800b616:	4613      	mov	r3, r2
 800b618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b20      	cmp	r3, #32
 800b624:	f040 80f9 	bne.w	800b81a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d002      	beq.n	800b634 <HAL_I2C_Mem_Write+0x34>
 800b62e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b630:	2b00      	cmp	r3, #0
 800b632:	d105      	bne.n	800b640 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b63a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e0ed      	b.n	800b81c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b646:	2b01      	cmp	r3, #1
 800b648:	d101      	bne.n	800b64e <HAL_I2C_Mem_Write+0x4e>
 800b64a:	2302      	movs	r3, #2
 800b64c:	e0e6      	b.n	800b81c <HAL_I2C_Mem_Write+0x21c>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b656:	f7fe fd09 	bl	800a06c <HAL_GetTick>
 800b65a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	2319      	movs	r3, #25
 800b662:	2201      	movs	r2, #1
 800b664:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f001 f938 	bl	800c8de <I2C_WaitOnFlagUntilTimeout>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	e0d1      	b.n	800b81c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2221      	movs	r2, #33	@ 0x21
 800b67c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2240      	movs	r2, #64	@ 0x40
 800b684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6a3a      	ldr	r2, [r7, #32]
 800b692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b6a0:	88f8      	ldrh	r0, [r7, #6]
 800b6a2:	893a      	ldrh	r2, [r7, #8]
 800b6a4:	8979      	ldrh	r1, [r7, #10]
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f000 fc7b 	bl	800bfac <I2C_RequestMemoryWrite>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d005      	beq.n	800b6c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e0a9      	b.n	800b81c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	2bff      	cmp	r3, #255	@ 0xff
 800b6d0:	d90e      	bls.n	800b6f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	22ff      	movs	r2, #255	@ 0xff
 800b6d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	8979      	ldrh	r1, [r7, #10]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f001 fabb 	bl	800cc64 <I2C_TransferConfig>
 800b6ee:	e00f      	b.n	800b710 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	8979      	ldrh	r1, [r7, #10]
 800b702:	2300      	movs	r3, #0
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f001 faaa 	bl	800cc64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f001 f93b 	bl	800c990 <I2C_WaitOnTXISFlagUntilTimeout>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	e07b      	b.n	800b81c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b728:	781a      	ldrb	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b73e:	b29b      	uxth	r3, r3
 800b740:	3b01      	subs	r3, #1
 800b742:	b29a      	uxth	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b74c:	3b01      	subs	r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d034      	beq.n	800b7c8 <HAL_I2C_Mem_Write+0x1c8>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b762:	2b00      	cmp	r3, #0
 800b764:	d130      	bne.n	800b7c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76c:	2200      	movs	r2, #0
 800b76e:	2180      	movs	r1, #128	@ 0x80
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f001 f8b4 	bl	800c8de <I2C_WaitOnFlagUntilTimeout>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e04d      	b.n	800b81c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b784:	b29b      	uxth	r3, r3
 800b786:	2bff      	cmp	r3, #255	@ 0xff
 800b788:	d90e      	bls.n	800b7a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	22ff      	movs	r2, #255	@ 0xff
 800b78e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b794:	b2da      	uxtb	r2, r3
 800b796:	8979      	ldrh	r1, [r7, #10]
 800b798:	2300      	movs	r3, #0
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f001 fa5f 	bl	800cc64 <I2C_TransferConfig>
 800b7a6:	e00f      	b.n	800b7c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	8979      	ldrh	r1, [r7, #10]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f001 fa4e 	bl	800cc64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d19e      	bne.n	800b710 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f001 f921 	bl	800ca1e <I2C_WaitOnSTOPFlagUntilTimeout>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e01a      	b.n	800b81c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6859      	ldr	r1, [r3, #4]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b824 <HAL_I2C_Mem_Write+0x224>)
 800b7fa:	400b      	ands	r3, r1
 800b7fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2220      	movs	r2, #32
 800b802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	e000      	b.n	800b81c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b81a:	2302      	movs	r3, #2
  }
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	fe00e800 	.word	0xfe00e800

0800b828 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af02      	add	r7, sp, #8
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	4608      	mov	r0, r1
 800b832:	4611      	mov	r1, r2
 800b834:	461a      	mov	r2, r3
 800b836:	4603      	mov	r3, r0
 800b838:	817b      	strh	r3, [r7, #10]
 800b83a:	460b      	mov	r3, r1
 800b83c:	813b      	strh	r3, [r7, #8]
 800b83e:	4613      	mov	r3, r2
 800b840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	2b20      	cmp	r3, #32
 800b84c:	f040 80fd 	bne.w	800ba4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d002      	beq.n	800b85c <HAL_I2C_Mem_Read+0x34>
 800b856:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d105      	bne.n	800b868 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b862:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e0f1      	b.n	800ba4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d101      	bne.n	800b876 <HAL_I2C_Mem_Read+0x4e>
 800b872:	2302      	movs	r3, #2
 800b874:	e0ea      	b.n	800ba4c <HAL_I2C_Mem_Read+0x224>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2201      	movs	r2, #1
 800b87a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b87e:	f7fe fbf5 	bl	800a06c <HAL_GetTick>
 800b882:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	2319      	movs	r3, #25
 800b88a:	2201      	movs	r2, #1
 800b88c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f001 f824 	bl	800c8de <I2C_WaitOnFlagUntilTimeout>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e0d5      	b.n	800ba4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2222      	movs	r2, #34	@ 0x22
 800b8a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2240      	movs	r2, #64	@ 0x40
 800b8ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6a3a      	ldr	r2, [r7, #32]
 800b8ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b8c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b8c8:	88f8      	ldrh	r0, [r7, #6]
 800b8ca:	893a      	ldrh	r2, [r7, #8]
 800b8cc:	8979      	ldrh	r1, [r7, #10]
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 fbbb 	bl	800c054 <I2C_RequestMemoryRead>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d005      	beq.n	800b8f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e0ad      	b.n	800ba4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	2bff      	cmp	r3, #255	@ 0xff
 800b8f8:	d90e      	bls.n	800b918 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	22ff      	movs	r2, #255	@ 0xff
 800b8fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b904:	b2da      	uxtb	r2, r3
 800b906:	8979      	ldrh	r1, [r7, #10]
 800b908:	4b52      	ldr	r3, [pc, #328]	@ (800ba54 <HAL_I2C_Mem_Read+0x22c>)
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f001 f9a7 	bl	800cc64 <I2C_TransferConfig>
 800b916:	e00f      	b.n	800b938 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b926:	b2da      	uxtb	r2, r3
 800b928:	8979      	ldrh	r1, [r7, #10]
 800b92a:	4b4a      	ldr	r3, [pc, #296]	@ (800ba54 <HAL_I2C_Mem_Read+0x22c>)
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f001 f996 	bl	800cc64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93e:	2200      	movs	r2, #0
 800b940:	2104      	movs	r1, #4
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f000 ffcb 	bl	800c8de <I2C_WaitOnFlagUntilTimeout>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e07c      	b.n	800ba4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b95c:	b2d2      	uxtb	r2, r2
 800b95e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b96e:	3b01      	subs	r3, #1
 800b970:	b29a      	uxth	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	3b01      	subs	r3, #1
 800b97e:	b29a      	uxth	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b988:	b29b      	uxth	r3, r3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d034      	beq.n	800b9f8 <HAL_I2C_Mem_Read+0x1d0>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b992:	2b00      	cmp	r3, #0
 800b994:	d130      	bne.n	800b9f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99c:	2200      	movs	r2, #0
 800b99e:	2180      	movs	r1, #128	@ 0x80
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 ff9c 	bl	800c8de <I2C_WaitOnFlagUntilTimeout>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e04d      	b.n	800ba4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	2bff      	cmp	r3, #255	@ 0xff
 800b9b8:	d90e      	bls.n	800b9d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	22ff      	movs	r2, #255	@ 0xff
 800b9be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	8979      	ldrh	r1, [r7, #10]
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f001 f947 	bl	800cc64 <I2C_TransferConfig>
 800b9d6:	e00f      	b.n	800b9f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	8979      	ldrh	r1, [r7, #10]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f001 f936 	bl	800cc64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d19a      	bne.n	800b938 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f001 f809 	bl	800ca1e <I2C_WaitOnSTOPFlagUntilTimeout>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e01a      	b.n	800ba4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	6859      	ldr	r1, [r3, #4]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	4b0b      	ldr	r3, [pc, #44]	@ (800ba58 <HAL_I2C_Mem_Read+0x230>)
 800ba2a:	400b      	ands	r3, r1
 800ba2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2220      	movs	r2, #32
 800ba32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e000      	b.n	800ba4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ba4a:	2302      	movs	r3, #2
  }
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	80002400 	.word	0x80002400
 800ba58:	fe00e800 	.word	0xfe00e800

0800ba5c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b08a      	sub	sp, #40	@ 0x28
 800ba60:	af02      	add	r7, sp, #8
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	607a      	str	r2, [r7, #4]
 800ba66:	603b      	str	r3, [r7, #0]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b20      	cmp	r3, #32
 800ba7a:	f040 80d6 	bne.w	800bc2a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba8c:	d101      	bne.n	800ba92 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800ba8e:	2302      	movs	r3, #2
 800ba90:	e0cc      	b.n	800bc2c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d101      	bne.n	800baa0 <HAL_I2C_IsDeviceReady+0x44>
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	e0c5      	b.n	800bc2c <HAL_I2C_IsDeviceReady+0x1d0>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2224      	movs	r2, #36	@ 0x24
 800baac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d107      	bne.n	800bace <HAL_I2C_IsDeviceReady+0x72>
 800babe:	897b      	ldrh	r3, [r7, #10]
 800bac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bac4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bac8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800bacc:	e006      	b.n	800badc <HAL_I2C_IsDeviceReady+0x80>
 800bace:	897b      	ldrh	r3, [r7, #10]
 800bad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bad4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bad8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	6812      	ldr	r2, [r2, #0]
 800bae0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800bae2:	f7fe fac3 	bl	800a06c <HAL_GetTick>
 800bae6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	f003 0320 	and.w	r3, r3, #32
 800baf2:	2b20      	cmp	r3, #32
 800baf4:	bf0c      	ite	eq
 800baf6:	2301      	moveq	r3, #1
 800baf8:	2300      	movne	r3, #0
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	f003 0310 	and.w	r3, r3, #16
 800bb08:	2b10      	cmp	r3, #16
 800bb0a:	bf0c      	ite	eq
 800bb0c:	2301      	moveq	r3, #1
 800bb0e:	2300      	movne	r3, #0
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bb14:	e034      	b.n	800bb80 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1c:	d01a      	beq.n	800bb54 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb1e:	f7fe faa5 	bl	800a06c <HAL_GetTick>
 800bb22:	4602      	mov	r2, r0
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d302      	bcc.n	800bb34 <HAL_I2C_IsDeviceReady+0xd8>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10f      	bne.n	800bb54 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2220      	movs	r2, #32
 800bb38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb40:	f043 0220 	orr.w	r2, r3, #32
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e06b      	b.n	800bc2c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	f003 0320 	and.w	r3, r3, #32
 800bb5e:	2b20      	cmp	r3, #32
 800bb60:	bf0c      	ite	eq
 800bb62:	2301      	moveq	r3, #1
 800bb64:	2300      	movne	r3, #0
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	f003 0310 	and.w	r3, r3, #16
 800bb74:	2b10      	cmp	r3, #16
 800bb76:	bf0c      	ite	eq
 800bb78:	2301      	moveq	r3, #1
 800bb7a:	2300      	movne	r3, #0
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bb80:	7ffb      	ldrb	r3, [r7, #31]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d102      	bne.n	800bb8c <HAL_I2C_IsDeviceReady+0x130>
 800bb86:	7fbb      	ldrb	r3, [r7, #30]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0c4      	beq.n	800bb16 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	f003 0310 	and.w	r3, r3, #16
 800bb96:	2b10      	cmp	r3, #16
 800bb98:	d01a      	beq.n	800bbd0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2200      	movs	r2, #0
 800bba2:	2120      	movs	r1, #32
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f000 fe9a 	bl	800c8de <I2C_WaitOnFlagUntilTimeout>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e03b      	b.n	800bc2c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2220      	movs	r2, #32
 800bbba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2220      	movs	r2, #32
 800bbc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e02d      	b.n	800bc2c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	2120      	movs	r1, #32
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f000 fe7f 	bl	800c8de <I2C_WaitOnFlagUntilTimeout>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e020      	b.n	800bc2c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2210      	movs	r2, #16
 800bbf0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	f63f af56 	bhi.w	800bab6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2220      	movs	r2, #32
 800bc0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc16:	f043 0220 	orr.w	r2, r3, #32
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e000      	b.n	800bc2c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800bc2a:	2302      	movs	r3, #2
  }
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d005      	beq.n	800bc60 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	68f9      	ldr	r1, [r7, #12]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	4798      	blx	r3
  }
}
 800bc60:	bf00      	nop
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00f      	beq.n	800bcaa <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00a      	beq.n	800bcaa <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc98:	f043 0201 	orr.w	r2, r3, #1
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bca8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00f      	beq.n	800bcd4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00a      	beq.n	800bcd4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcc2:	f043 0208 	orr.w	r2, r3, #8
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bcd2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00f      	beq.n	800bcfe <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00a      	beq.n	800bcfe <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcec:	f043 0202 	orr.w	r2, r3, #2
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcfc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd02:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f003 030b 	and.w	r3, r3, #11
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800bd0e:	68f9      	ldr	r1, [r7, #12]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fc8b 	bl	800c62c <I2C_ITError>
  }
}
 800bd16:	bf00      	nop
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b083      	sub	sp, #12
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bd26:	bf00      	nop
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b083      	sub	sp, #12
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bd3a:	bf00      	nop
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	70fb      	strb	r3, [r7, #3]
 800bd52:	4613      	mov	r3, r2
 800bd54:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bd56:	bf00      	nop
 800bd58:	370c      	adds	r7, #12
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b083      	sub	sp, #12
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bd6a:	bf00      	nop
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b083      	sub	sp, #12
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bd7e:	bf00      	nop
 800bd80:	370c      	adds	r7, #12
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr

0800bd8a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd8a:	b480      	push	{r7}
 800bd8c:	b083      	sub	sp, #12
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bd92:	bf00      	nop
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b083      	sub	sp, #12
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bdac:	b2db      	uxtb	r3, r3
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b086      	sub	sp, #24
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d101      	bne.n	800bdde <I2C_Slave_ISR_IT+0x24>
 800bdda:	2302      	movs	r3, #2
 800bddc:	e0e2      	b.n	800bfa4 <I2C_Slave_ISR_IT+0x1ea>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2201      	movs	r2, #1
 800bde2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f003 0320 	and.w	r3, r3, #32
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d004      	beq.n	800be04 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bdfa:	6939      	ldr	r1, [r7, #16]
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f000 fa5d 	bl	800c2bc <I2C_ITSlaveCplt>
 800be02:	e0ca      	b.n	800bf9a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	f003 0310 	and.w	r3, r3, #16
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d04b      	beq.n	800bea6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be14:	2b00      	cmp	r3, #0
 800be16:	d046      	beq.n	800bea6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d128      	bne.n	800be74 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b28      	cmp	r3, #40	@ 0x28
 800be2c:	d108      	bne.n	800be40 <I2C_Slave_ISR_IT+0x86>
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be34:	d104      	bne.n	800be40 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800be36:	6939      	ldr	r1, [r7, #16]
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 fba3 	bl	800c584 <I2C_ITListenCplt>
 800be3e:	e031      	b.n	800bea4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b29      	cmp	r3, #41	@ 0x29
 800be4a:	d10e      	bne.n	800be6a <I2C_Slave_ISR_IT+0xb0>
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800be52:	d00a      	beq.n	800be6a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2210      	movs	r2, #16
 800be5a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f000 fcfc 	bl	800c85a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f000 f9ce 	bl	800c204 <I2C_ITSlaveSeqCplt>
 800be68:	e01c      	b.n	800bea4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2210      	movs	r2, #16
 800be70:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800be72:	e08f      	b.n	800bf94 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2210      	movs	r2, #16
 800be7a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be80:	f043 0204 	orr.w	r2, r3, #4
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d003      	beq.n	800be96 <I2C_Slave_ISR_IT+0xdc>
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be94:	d17e      	bne.n	800bf94 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be9a:	4619      	mov	r1, r3
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f000 fbc5 	bl	800c62c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bea2:	e077      	b.n	800bf94 <I2C_Slave_ISR_IT+0x1da>
 800bea4:	e076      	b.n	800bf94 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b00      	cmp	r3, #0
 800beae:	d02f      	beq.n	800bf10 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d02a      	beq.n	800bf10 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d018      	beq.n	800bef6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	b2d2      	uxtb	r2, r2
 800bed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed6:	1c5a      	adds	r2, r3, #1
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bee0:	3b01      	subs	r3, #1
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800beec:	b29b      	uxth	r3, r3
 800beee:	3b01      	subs	r3, #1
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800befa:	b29b      	uxth	r3, r3
 800befc:	2b00      	cmp	r3, #0
 800befe:	d14b      	bne.n	800bf98 <I2C_Slave_ISR_IT+0x1de>
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bf06:	d047      	beq.n	800bf98 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f000 f97b 	bl	800c204 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bf0e:	e043      	b.n	800bf98 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	f003 0308 	and.w	r3, r3, #8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d009      	beq.n	800bf2e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d004      	beq.n	800bf2e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bf24:	6939      	ldr	r1, [r7, #16]
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 f8e8 	bl	800c0fc <I2C_ITAddrCplt>
 800bf2c:	e035      	b.n	800bf9a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	f003 0302 	and.w	r3, r3, #2
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d030      	beq.n	800bf9a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d02b      	beq.n	800bf9a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d018      	beq.n	800bf7e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf50:	781a      	ldrb	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf5c:	1c5a      	adds	r2, r3, #1
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf74:	3b01      	subs	r3, #1
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bf7c:	e00d      	b.n	800bf9a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bf84:	d002      	beq.n	800bf8c <I2C_Slave_ISR_IT+0x1d2>
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d106      	bne.n	800bf9a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 f939 	bl	800c204 <I2C_ITSlaveSeqCplt>
 800bf92:	e002      	b.n	800bf9a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800bf94:	bf00      	nop
 800bf96:	e000      	b.n	800bf9a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800bf98:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3718      	adds	r7, #24
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af02      	add	r7, sp, #8
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	4608      	mov	r0, r1
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	461a      	mov	r2, r3
 800bfba:	4603      	mov	r3, r0
 800bfbc:	817b      	strh	r3, [r7, #10]
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	813b      	strh	r3, [r7, #8]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bfc6:	88fb      	ldrh	r3, [r7, #6]
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	8979      	ldrh	r1, [r7, #10]
 800bfcc:	4b20      	ldr	r3, [pc, #128]	@ (800c050 <I2C_RequestMemoryWrite+0xa4>)
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f000 fe45 	bl	800cc64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfda:	69fa      	ldr	r2, [r7, #28]
 800bfdc:	69b9      	ldr	r1, [r7, #24]
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 fcd6 	bl	800c990 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e02c      	b.n	800c048 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bfee:	88fb      	ldrh	r3, [r7, #6]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d105      	bne.n	800c000 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bff4:	893b      	ldrh	r3, [r7, #8]
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	629a      	str	r2, [r3, #40]	@ 0x28
 800bffe:	e015      	b.n	800c02c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c000:	893b      	ldrh	r3, [r7, #8]
 800c002:	0a1b      	lsrs	r3, r3, #8
 800c004:	b29b      	uxth	r3, r3
 800c006:	b2da      	uxtb	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c00e:	69fa      	ldr	r2, [r7, #28]
 800c010:	69b9      	ldr	r1, [r7, #24]
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f000 fcbc 	bl	800c990 <I2C_WaitOnTXISFlagUntilTimeout>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d001      	beq.n	800c022 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e012      	b.n	800c048 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c022:	893b      	ldrh	r3, [r7, #8]
 800c024:	b2da      	uxtb	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	2200      	movs	r2, #0
 800c034:	2180      	movs	r1, #128	@ 0x80
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f000 fc51 	bl	800c8de <I2C_WaitOnFlagUntilTimeout>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e000      	b.n	800c048 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	80002000 	.word	0x80002000

0800c054 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af02      	add	r7, sp, #8
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	4608      	mov	r0, r1
 800c05e:	4611      	mov	r1, r2
 800c060:	461a      	mov	r2, r3
 800c062:	4603      	mov	r3, r0
 800c064:	817b      	strh	r3, [r7, #10]
 800c066:	460b      	mov	r3, r1
 800c068:	813b      	strh	r3, [r7, #8]
 800c06a:	4613      	mov	r3, r2
 800c06c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c06e:	88fb      	ldrh	r3, [r7, #6]
 800c070:	b2da      	uxtb	r2, r3
 800c072:	8979      	ldrh	r1, [r7, #10]
 800c074:	4b20      	ldr	r3, [pc, #128]	@ (800c0f8 <I2C_RequestMemoryRead+0xa4>)
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	2300      	movs	r3, #0
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f000 fdf2 	bl	800cc64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c080:	69fa      	ldr	r2, [r7, #28]
 800c082:	69b9      	ldr	r1, [r7, #24]
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f000 fc83 	bl	800c990 <I2C_WaitOnTXISFlagUntilTimeout>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	e02c      	b.n	800c0ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c094:	88fb      	ldrh	r3, [r7, #6]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d105      	bne.n	800c0a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c09a:	893b      	ldrh	r3, [r7, #8]
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	629a      	str	r2, [r3, #40]	@ 0x28
 800c0a4:	e015      	b.n	800c0d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c0a6:	893b      	ldrh	r3, [r7, #8]
 800c0a8:	0a1b      	lsrs	r3, r3, #8
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0b4:	69fa      	ldr	r2, [r7, #28]
 800c0b6:	69b9      	ldr	r1, [r7, #24]
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f000 fc69 	bl	800c990 <I2C_WaitOnTXISFlagUntilTimeout>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d001      	beq.n	800c0c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e012      	b.n	800c0ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c0c8:	893b      	ldrh	r3, [r7, #8]
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2140      	movs	r1, #64	@ 0x40
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f000 fbfe 	bl	800c8de <I2C_WaitOnFlagUntilTimeout>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e000      	b.n	800c0ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	80002000 	.word	0x80002000

0800c0fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c112:	2b28      	cmp	r3, #40	@ 0x28
 800c114:	d16a      	bne.n	800c1ec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	0c1b      	lsrs	r3, r3, #16
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	0c1b      	lsrs	r3, r3, #16
 800c12e:	b29b      	uxth	r3, r3
 800c130:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800c134:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c142:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800c150:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	2b02      	cmp	r3, #2
 800c158:	d138      	bne.n	800c1cc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c15a:	897b      	ldrh	r3, [r7, #10]
 800c15c:	09db      	lsrs	r3, r3, #7
 800c15e:	b29a      	uxth	r2, r3
 800c160:	89bb      	ldrh	r3, [r7, #12]
 800c162:	4053      	eors	r3, r2
 800c164:	b29b      	uxth	r3, r3
 800c166:	f003 0306 	and.w	r3, r3, #6
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d11c      	bne.n	800c1a8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c16e:	897b      	ldrh	r3, [r7, #10]
 800c170:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c180:	2b02      	cmp	r3, #2
 800c182:	d13b      	bne.n	800c1fc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2208      	movs	r2, #8
 800c190:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c19a:	89ba      	ldrh	r2, [r7, #12]
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff fdd0 	bl	800bd46 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c1a6:	e029      	b.n	800c1fc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c1a8:	893b      	ldrh	r3, [r7, #8]
 800c1aa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c1ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fd89 	bl	800ccc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c1be:	89ba      	ldrh	r2, [r7, #12]
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff fdbe 	bl	800bd46 <HAL_I2C_AddrCallback>
}
 800c1ca:	e017      	b.n	800c1fc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c1cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 fd79 	bl	800ccc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c1de:	89ba      	ldrh	r2, [r7, #12]
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7ff fdae 	bl	800bd46 <HAL_I2C_AddrCallback>
}
 800c1ea:	e007      	b.n	800c1fc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800c1fc:	bf00      	nop
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c222:	2b00      	cmp	r3, #0
 800c224:	d008      	beq.n	800c238 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	e00c      	b.n	800c252 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d007      	beq.n	800c252 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c250:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	2b29      	cmp	r3, #41	@ 0x29
 800c25c:	d112      	bne.n	800c284 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2228      	movs	r2, #40	@ 0x28
 800c262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2221      	movs	r2, #33	@ 0x21
 800c26a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c26c:	2101      	movs	r1, #1
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fd2a 	bl	800ccc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7ff fd4e 	bl	800bd1e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c282:	e017      	b.n	800c2b4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c28e:	d111      	bne.n	800c2b4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2228      	movs	r2, #40	@ 0x28
 800c294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2222      	movs	r2, #34	@ 0x22
 800c29c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c29e:	2102      	movs	r1, #2
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 fd11 	bl	800ccc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff fd3f 	bl	800bd32 <HAL_I2C_SlaveRxCpltCallback>
}
 800c2b4:	bf00      	nop
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2de:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c2e8:	7afb      	ldrb	r3, [r7, #11]
 800c2ea:	2b21      	cmp	r3, #33	@ 0x21
 800c2ec:	d002      	beq.n	800c2f4 <I2C_ITSlaveCplt+0x38>
 800c2ee:	7afb      	ldrb	r3, [r7, #11]
 800c2f0:	2b29      	cmp	r3, #41	@ 0x29
 800c2f2:	d108      	bne.n	800c306 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c2f4:	f248 0101 	movw	r1, #32769	@ 0x8001
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fce5 	bl	800ccc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2221      	movs	r2, #33	@ 0x21
 800c302:	631a      	str	r2, [r3, #48]	@ 0x30
 800c304:	e019      	b.n	800c33a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c306:	7afb      	ldrb	r3, [r7, #11]
 800c308:	2b22      	cmp	r3, #34	@ 0x22
 800c30a:	d002      	beq.n	800c312 <I2C_ITSlaveCplt+0x56>
 800c30c:	7afb      	ldrb	r3, [r7, #11]
 800c30e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c310:	d108      	bne.n	800c324 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c312:	f248 0102 	movw	r1, #32770	@ 0x8002
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fcd6 	bl	800ccc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2222      	movs	r2, #34	@ 0x22
 800c320:	631a      	str	r2, [r3, #48]	@ 0x30
 800c322:	e00a      	b.n	800c33a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c324:	7afb      	ldrb	r3, [r7, #11]
 800c326:	2b28      	cmp	r3, #40	@ 0x28
 800c328:	d107      	bne.n	800c33a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c32a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fcca 	bl	800ccc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c348:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	6859      	ldr	r1, [r3, #4]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	4b89      	ldr	r3, [pc, #548]	@ (800c57c <I2C_ITSlaveCplt+0x2c0>)
 800c356:	400b      	ands	r3, r1
 800c358:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fa7d 	bl	800c85a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c366:	2b00      	cmp	r3, #0
 800c368:	d013      	beq.n	800c392 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c378:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d01f      	beq.n	800c3c2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c390:	e017      	b.n	800c3c2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d012      	beq.n	800c3c2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c3aa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d006      	beq.n	800c3c2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	f003 0304 	and.w	r3, r3, #4
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d020      	beq.n	800c40e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	f023 0304 	bic.w	r3, r3, #4
 800c3d2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3de:	b2d2      	uxtb	r2, r2
 800c3e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3e6:	1c5a      	adds	r2, r3, #1
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00c      	beq.n	800c40e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c404:	b29b      	uxth	r3, r3
 800c406:	3b01      	subs	r3, #1
 800c408:	b29a      	uxth	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c412:	b29b      	uxth	r3, r3
 800c414:	2b00      	cmp	r3, #0
 800c416:	d005      	beq.n	800c424 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c41c:	f043 0204 	orr.w	r2, r3, #4
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	f003 0310 	and.w	r3, r3, #16
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d049      	beq.n	800c4c2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c434:	2b00      	cmp	r3, #0
 800c436:	d044      	beq.n	800c4c2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d128      	bne.n	800c494 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b28      	cmp	r3, #40	@ 0x28
 800c44c:	d108      	bne.n	800c460 <I2C_ITSlaveCplt+0x1a4>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c454:	d104      	bne.n	800c460 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c456:	6979      	ldr	r1, [r7, #20]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 f893 	bl	800c584 <I2C_ITListenCplt>
 800c45e:	e030      	b.n	800c4c2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b29      	cmp	r3, #41	@ 0x29
 800c46a:	d10e      	bne.n	800c48a <I2C_ITSlaveCplt+0x1ce>
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c472:	d00a      	beq.n	800c48a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2210      	movs	r2, #16
 800c47a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f9ec 	bl	800c85a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff febe 	bl	800c204 <I2C_ITSlaveSeqCplt>
 800c488:	e01b      	b.n	800c4c2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2210      	movs	r2, #16
 800c490:	61da      	str	r2, [r3, #28]
 800c492:	e016      	b.n	800c4c2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2210      	movs	r2, #16
 800c49a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4a0:	f043 0204 	orr.w	r2, r3, #4
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <I2C_ITSlaveCplt+0x1fa>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4b4:	d105      	bne.n	800c4c2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f8b5 	bl	800c62c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d010      	beq.n	800c4fa <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4dc:	4619      	mov	r1, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f8a4 	bl	800c62c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b28      	cmp	r3, #40	@ 0x28
 800c4ee:	d141      	bne.n	800c574 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c4f0:	6979      	ldr	r1, [r7, #20]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f846 	bl	800c584 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c4f8:	e03c      	b.n	800c574 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c502:	d014      	beq.n	800c52e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7ff fe7d 	bl	800c204 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a1c      	ldr	r2, [pc, #112]	@ (800c580 <I2C_ITSlaveCplt+0x2c4>)
 800c50e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2220      	movs	r2, #32
 800c514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7ff fc1b 	bl	800bd62 <HAL_I2C_ListenCpltCallback>
}
 800c52c:	e022      	b.n	800c574 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b22      	cmp	r3, #34	@ 0x22
 800c538:	d10e      	bne.n	800c558 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2220      	movs	r2, #32
 800c53e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff fbee 	bl	800bd32 <HAL_I2C_SlaveRxCpltCallback>
}
 800c556:	e00d      	b.n	800c574 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2220      	movs	r2, #32
 800c55c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7ff fbd5 	bl	800bd1e <HAL_I2C_SlaveTxCpltCallback>
}
 800c574:	bf00      	nop
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	fe00e800 	.word	0xfe00e800
 800c580:	ffff0000 	.word	0xffff0000

0800c584 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a25      	ldr	r2, [pc, #148]	@ (800c628 <I2C_ITListenCplt+0xa4>)
 800c592:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2220      	movs	r2, #32
 800c59e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	f003 0304 	and.w	r3, r3, #4
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d022      	beq.n	800c600 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c4:	b2d2      	uxtb	r2, r2
 800c5c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d012      	beq.n	800c600 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f8:	f043 0204 	orr.w	r2, r3, #4
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c600:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 fb5f 	bl	800ccc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2210      	movs	r2, #16
 800c610:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff fba1 	bl	800bd62 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c620:	bf00      	nop
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	ffff0000 	.word	0xffff0000

0800c62c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c63c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a6d      	ldr	r2, [pc, #436]	@ (800c800 <I2C_ITError+0x1d4>)
 800c64a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	431a      	orrs	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	2b28      	cmp	r3, #40	@ 0x28
 800c662:	d005      	beq.n	800c670 <I2C_ITError+0x44>
 800c664:	7bfb      	ldrb	r3, [r7, #15]
 800c666:	2b29      	cmp	r3, #41	@ 0x29
 800c668:	d002      	beq.n	800c670 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
 800c66c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c66e:	d10b      	bne.n	800c688 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c670:	2103      	movs	r1, #3
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fb28 	bl	800ccc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2228      	movs	r2, #40	@ 0x28
 800c67c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a60      	ldr	r2, [pc, #384]	@ (800c804 <I2C_ITError+0x1d8>)
 800c684:	635a      	str	r2, [r3, #52]	@ 0x34
 800c686:	e030      	b.n	800c6ea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c688:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fb1b 	bl	800ccc8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f8e1 	bl	800c85a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b60      	cmp	r3, #96	@ 0x60
 800c6a2:	d01f      	beq.n	800c6e4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	f003 0320 	and.w	r3, r3, #32
 800c6b6:	2b20      	cmp	r3, #32
 800c6b8:	d114      	bne.n	800c6e4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	f003 0310 	and.w	r3, r3, #16
 800c6c4:	2b10      	cmp	r3, #16
 800c6c6:	d109      	bne.n	800c6dc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2210      	movs	r2, #16
 800c6ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6d4:	f043 0204 	orr.w	r2, r3, #4
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d039      	beq.n	800c76c <I2C_ITError+0x140>
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b11      	cmp	r3, #17
 800c6fc:	d002      	beq.n	800c704 <I2C_ITError+0xd8>
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b21      	cmp	r3, #33	@ 0x21
 800c702:	d133      	bne.n	800c76c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c70e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c712:	d107      	bne.n	800c724 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c722:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fd fff4 	bl	800a716 <HAL_DMA_GetState>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b01      	cmp	r3, #1
 800c732:	d017      	beq.n	800c764 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c738:	4a33      	ldr	r2, [pc, #204]	@ (800c808 <I2C_ITError+0x1dc>)
 800c73a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c748:	4618      	mov	r0, r3
 800c74a:	f7fd fece 	bl	800a4ea <HAL_DMA_Abort_IT>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d04d      	beq.n	800c7f0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c75e:	4610      	mov	r0, r2
 800c760:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c762:	e045      	b.n	800c7f0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f851 	bl	800c80c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c76a:	e041      	b.n	800c7f0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c770:	2b00      	cmp	r3, #0
 800c772:	d039      	beq.n	800c7e8 <I2C_ITError+0x1bc>
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2b12      	cmp	r3, #18
 800c778:	d002      	beq.n	800c780 <I2C_ITError+0x154>
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	2b22      	cmp	r3, #34	@ 0x22
 800c77e:	d133      	bne.n	800c7e8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c78a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c78e:	d107      	bne.n	800c7a0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c79e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fd ffb6 	bl	800a716 <HAL_DMA_GetState>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d017      	beq.n	800c7e0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7b4:	4a14      	ldr	r2, [pc, #80]	@ (800c808 <I2C_ITError+0x1dc>)
 800c7b6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fd fe90 	bl	800a4ea <HAL_DMA_Abort_IT>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d011      	beq.n	800c7f4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c7da:	4610      	mov	r0, r2
 800c7dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c7de:	e009      	b.n	800c7f4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f813 	bl	800c80c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c7e6:	e005      	b.n	800c7f4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f80f 	bl	800c80c <I2C_TreatErrorCallback>
  }
}
 800c7ee:	e002      	b.n	800c7f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c7f0:	bf00      	nop
 800c7f2:	e000      	b.n	800c7f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c7f4:	bf00      	nop
}
 800c7f6:	bf00      	nop
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	ffff0000 	.word	0xffff0000
 800c804:	0800bdbb 	.word	0x0800bdbb
 800c808:	0800c8a3 	.word	0x0800c8a3

0800c80c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	2b60      	cmp	r3, #96	@ 0x60
 800c81e:	d10e      	bne.n	800c83e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2220      	movs	r2, #32
 800c824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7ff faa7 	bl	800bd8a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c83c:	e009      	b.n	800c852 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fa92 	bl	800bd76 <HAL_I2C_ErrorCallback>
}
 800c852:	bf00      	nop
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c85a:	b480      	push	{r7}
 800c85c:	b083      	sub	sp, #12
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	699b      	ldr	r3, [r3, #24]
 800c868:	f003 0302 	and.w	r3, r3, #2
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d103      	bne.n	800c878 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2200      	movs	r2, #0
 800c876:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	2b01      	cmp	r3, #1
 800c884:	d007      	beq.n	800c896 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	699a      	ldr	r2, [r3, #24]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f042 0201 	orr.w	r2, r2, #1
 800c894:	619a      	str	r2, [r3, #24]
  }
}
 800c896:	bf00      	nop
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8bc:	2200      	movs	r2, #0
 800c8be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d003      	beq.n	800c8d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f7ff ff9b 	bl	800c80c <I2C_TreatErrorCallback>
}
 800c8d6:	bf00      	nop
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	60f8      	str	r0, [r7, #12]
 800c8e6:	60b9      	str	r1, [r7, #8]
 800c8e8:	603b      	str	r3, [r7, #0]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c8ee:	e03b      	b.n	800c968 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c8f0:	69ba      	ldr	r2, [r7, #24]
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f000 f8d5 	bl	800caa4 <I2C_IsErrorOccurred>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e041      	b.n	800c988 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90a:	d02d      	beq.n	800c968 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c90c:	f7fd fbae 	bl	800a06c <HAL_GetTick>
 800c910:	4602      	mov	r2, r0
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d302      	bcc.n	800c922 <I2C_WaitOnFlagUntilTimeout+0x44>
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d122      	bne.n	800c968 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	699a      	ldr	r2, [r3, #24]
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	4013      	ands	r3, r2
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	429a      	cmp	r2, r3
 800c930:	bf0c      	ite	eq
 800c932:	2301      	moveq	r3, #1
 800c934:	2300      	movne	r3, #0
 800c936:	b2db      	uxtb	r3, r3
 800c938:	461a      	mov	r2, r3
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d113      	bne.n	800c968 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c944:	f043 0220 	orr.w	r2, r3, #32
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2220      	movs	r2, #32
 800c950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2200      	movs	r2, #0
 800c960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	e00f      	b.n	800c988 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	699a      	ldr	r2, [r3, #24]
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	4013      	ands	r3, r2
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	429a      	cmp	r2, r3
 800c976:	bf0c      	ite	eq
 800c978:	2301      	moveq	r3, #1
 800c97a:	2300      	movne	r3, #0
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	461a      	mov	r2, r3
 800c980:	79fb      	ldrb	r3, [r7, #7]
 800c982:	429a      	cmp	r2, r3
 800c984:	d0b4      	beq.n	800c8f0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c99c:	e033      	b.n	800ca06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	68b9      	ldr	r1, [r7, #8]
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f000 f87e 	bl	800caa4 <I2C_IsErrorOccurred>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e031      	b.n	800ca16 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b8:	d025      	beq.n	800ca06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9ba:	f7fd fb57 	bl	800a06c <HAL_GetTick>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	1ad3      	subs	r3, r2, r3
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d302      	bcc.n	800c9d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d11a      	bne.n	800ca06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	f003 0302 	and.w	r3, r3, #2
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d013      	beq.n	800ca06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9e2:	f043 0220 	orr.w	r2, r3, #32
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2220      	movs	r2, #32
 800c9ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	e007      	b.n	800ca16 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	699b      	ldr	r3, [r3, #24]
 800ca0c:	f003 0302 	and.w	r3, r3, #2
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d1c4      	bne.n	800c99e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	60f8      	str	r0, [r7, #12]
 800ca26:	60b9      	str	r1, [r7, #8]
 800ca28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ca2a:	e02f      	b.n	800ca8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	68b9      	ldr	r1, [r7, #8]
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f000 f837 	bl	800caa4 <I2C_IsErrorOccurred>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e02d      	b.n	800ca9c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca40:	f7fd fb14 	bl	800a06c <HAL_GetTick>
 800ca44:	4602      	mov	r2, r0
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d302      	bcc.n	800ca56 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d11a      	bne.n	800ca8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	699b      	ldr	r3, [r3, #24]
 800ca5c:	f003 0320 	and.w	r3, r3, #32
 800ca60:	2b20      	cmp	r3, #32
 800ca62:	d013      	beq.n	800ca8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca68:	f043 0220 	orr.w	r2, r3, #32
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2220      	movs	r2, #32
 800ca74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e007      	b.n	800ca9c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	f003 0320 	and.w	r3, r3, #32
 800ca96:	2b20      	cmp	r3, #32
 800ca98:	d1c8      	bne.n	800ca2c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08a      	sub	sp, #40	@ 0x28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	699b      	ldr	r3, [r3, #24]
 800cabc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	f003 0310 	and.w	r3, r3, #16
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d068      	beq.n	800cba2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2210      	movs	r2, #16
 800cad6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cad8:	e049      	b.n	800cb6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae0:	d045      	beq.n	800cb6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cae2:	f7fd fac3 	bl	800a06c <HAL_GetTick>
 800cae6:	4602      	mov	r2, r0
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d302      	bcc.n	800caf8 <I2C_IsErrorOccurred+0x54>
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d13a      	bne.n	800cb6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb1a:	d121      	bne.n	800cb60 <I2C_IsErrorOccurred+0xbc>
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb22:	d01d      	beq.n	800cb60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800cb24:	7cfb      	ldrb	r3, [r7, #19]
 800cb26:	2b20      	cmp	r3, #32
 800cb28:	d01a      	beq.n	800cb60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	685a      	ldr	r2, [r3, #4]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cb38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800cb3a:	f7fd fa97 	bl	800a06c <HAL_GetTick>
 800cb3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cb40:	e00e      	b.n	800cb60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cb42:	f7fd fa93 	bl	800a06c <HAL_GetTick>
 800cb46:	4602      	mov	r2, r0
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	2b19      	cmp	r3, #25
 800cb4e:	d907      	bls.n	800cb60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	f043 0320 	orr.w	r3, r3, #32
 800cb56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800cb5e:	e006      	b.n	800cb6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	f003 0320 	and.w	r3, r3, #32
 800cb6a:	2b20      	cmp	r3, #32
 800cb6c:	d1e9      	bne.n	800cb42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	699b      	ldr	r3, [r3, #24]
 800cb74:	f003 0320 	and.w	r3, r3, #32
 800cb78:	2b20      	cmp	r3, #32
 800cb7a:	d003      	beq.n	800cb84 <I2C_IsErrorOccurred+0xe0>
 800cb7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d0aa      	beq.n	800cada <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800cb84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2220      	movs	r2, #32
 800cb92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800cb94:	6a3b      	ldr	r3, [r7, #32]
 800cb96:	f043 0304 	orr.w	r3, r3, #4
 800cb9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	699b      	ldr	r3, [r3, #24]
 800cba8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00b      	beq.n	800cbcc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800cbb4:	6a3b      	ldr	r3, [r7, #32]
 800cbb6:	f043 0301 	orr.w	r3, r3, #1
 800cbba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cbc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00b      	beq.n	800cbee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	f043 0308 	orr.w	r3, r3, #8
 800cbdc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cbe6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00b      	beq.n	800cc10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	f043 0302 	orr.w	r3, r3, #2
 800cbfe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800cc10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01c      	beq.n	800cc52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	f7ff fe1e 	bl	800c85a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	6859      	ldr	r1, [r3, #4]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	4b0d      	ldr	r3, [pc, #52]	@ (800cc60 <I2C_IsErrorOccurred+0x1bc>)
 800cc2a:	400b      	ands	r3, r1
 800cc2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	431a      	orrs	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2200      	movs	r2, #0
 800cc46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800cc52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3728      	adds	r7, #40	@ 0x28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	fe00e800 	.word	0xfe00e800

0800cc64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b087      	sub	sp, #28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	607b      	str	r3, [r7, #4]
 800cc6e:	460b      	mov	r3, r1
 800cc70:	817b      	strh	r3, [r7, #10]
 800cc72:	4613      	mov	r3, r2
 800cc74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cc76:	897b      	ldrh	r3, [r7, #10]
 800cc78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cc7c:	7a7b      	ldrb	r3, [r7, #9]
 800cc7e:	041b      	lsls	r3, r3, #16
 800cc80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cc84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	6a3b      	ldr	r3, [r7, #32]
 800cc9c:	0d5b      	lsrs	r3, r3, #21
 800cc9e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800cca2:	4b08      	ldr	r3, [pc, #32]	@ (800ccc4 <I2C_TransferConfig+0x60>)
 800cca4:	430b      	orrs	r3, r1
 800cca6:	43db      	mvns	r3, r3
 800cca8:	ea02 0103 	and.w	r1, r2, r3
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ccb6:	bf00      	nop
 800ccb8:	371c      	adds	r7, #28
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	03ff63ff 	.word	0x03ff63ff

0800ccc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ccd8:	887b      	ldrh	r3, [r7, #2]
 800ccda:	f003 0301 	and.w	r3, r3, #1
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00f      	beq.n	800cd02 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800cce8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ccf6:	2b28      	cmp	r3, #40	@ 0x28
 800ccf8:	d003      	beq.n	800cd02 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800cd00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cd02:	887b      	ldrh	r3, [r7, #2]
 800cd04:	f003 0302 	and.w	r3, r3, #2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00f      	beq.n	800cd2c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800cd12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cd20:	2b28      	cmp	r3, #40	@ 0x28
 800cd22:	d003      	beq.n	800cd2c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800cd2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cd2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	da03      	bge.n	800cd3c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800cd3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cd3c:	887b      	ldrh	r3, [r7, #2]
 800cd3e:	2b10      	cmp	r3, #16
 800cd40:	d103      	bne.n	800cd4a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800cd48:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cd4a:	887b      	ldrh	r3, [r7, #2]
 800cd4c:	2b20      	cmp	r3, #32
 800cd4e:	d103      	bne.n	800cd58 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f043 0320 	orr.w	r3, r3, #32
 800cd56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800cd58:	887b      	ldrh	r3, [r7, #2]
 800cd5a:	2b40      	cmp	r3, #64	@ 0x40
 800cd5c:	d103      	bne.n	800cd66 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd64:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6819      	ldr	r1, [r3, #0]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	43da      	mvns	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	400a      	ands	r2, r1
 800cd76:	601a      	str	r2, [r3, #0]
}
 800cd78:	bf00      	nop
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b20      	cmp	r3, #32
 800cd98:	d138      	bne.n	800ce0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d101      	bne.n	800cda8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cda4:	2302      	movs	r3, #2
 800cda6:	e032      	b.n	800ce0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2224      	movs	r2, #36	@ 0x24
 800cdb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f022 0201 	bic.w	r2, r2, #1
 800cdc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cdd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6819      	ldr	r1, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	430a      	orrs	r2, r1
 800cde6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f042 0201 	orr.w	r2, r2, #1
 800cdf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2220      	movs	r2, #32
 800cdfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	e000      	b.n	800ce0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ce0c:	2302      	movs	r3, #2
  }
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b085      	sub	sp, #20
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	2b20      	cmp	r3, #32
 800ce2e:	d139      	bne.n	800cea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d101      	bne.n	800ce3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ce3a:	2302      	movs	r3, #2
 800ce3c:	e033      	b.n	800cea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2224      	movs	r2, #36	@ 0x24
 800ce4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f022 0201 	bic.w	r2, r2, #1
 800ce5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ce6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	021b      	lsls	r3, r3, #8
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f042 0201 	orr.w	r2, r2, #1
 800ce8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2220      	movs	r2, #32
 800ce94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	e000      	b.n	800cea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cea4:	2302      	movs	r3, #2
  }
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
	...

0800ceb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d141      	bne.n	800cf46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cec2:	4b4b      	ldr	r3, [pc, #300]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ceca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cece:	d131      	bne.n	800cf34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ced0:	4b47      	ldr	r3, [pc, #284]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ced2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ced6:	4a46      	ldr	r2, [pc, #280]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ced8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cedc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cee0:	4b43      	ldr	r3, [pc, #268]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cee8:	4a41      	ldr	r2, [pc, #260]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ceea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ceee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cef0:	4b40      	ldr	r3, [pc, #256]	@ (800cff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2232      	movs	r2, #50	@ 0x32
 800cef6:	fb02 f303 	mul.w	r3, r2, r3
 800cefa:	4a3f      	ldr	r2, [pc, #252]	@ (800cff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cefc:	fba2 2303 	umull	r2, r3, r2, r3
 800cf00:	0c9b      	lsrs	r3, r3, #18
 800cf02:	3301      	adds	r3, #1
 800cf04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cf06:	e002      	b.n	800cf0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cf0e:	4b38      	ldr	r3, [pc, #224]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf10:	695b      	ldr	r3, [r3, #20]
 800cf12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf1a:	d102      	bne.n	800cf22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1f2      	bne.n	800cf08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cf22:	4b33      	ldr	r3, [pc, #204]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf24:	695b      	ldr	r3, [r3, #20]
 800cf26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf2e:	d158      	bne.n	800cfe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cf30:	2303      	movs	r3, #3
 800cf32:	e057      	b.n	800cfe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cf34:	4b2e      	ldr	r3, [pc, #184]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf3a:	4a2d      	ldr	r2, [pc, #180]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800cf44:	e04d      	b.n	800cfe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf4c:	d141      	bne.n	800cfd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cf4e:	4b28      	ldr	r3, [pc, #160]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cf56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf5a:	d131      	bne.n	800cfc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cf5c:	4b24      	ldr	r3, [pc, #144]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf62:	4a23      	ldr	r2, [pc, #140]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cf6c:	4b20      	ldr	r3, [pc, #128]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cf74:	4a1e      	ldr	r2, [pc, #120]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cf7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cf7c:	4b1d      	ldr	r3, [pc, #116]	@ (800cff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2232      	movs	r2, #50	@ 0x32
 800cf82:	fb02 f303 	mul.w	r3, r2, r3
 800cf86:	4a1c      	ldr	r2, [pc, #112]	@ (800cff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cf88:	fba2 2303 	umull	r2, r3, r2, r3
 800cf8c:	0c9b      	lsrs	r3, r3, #18
 800cf8e:	3301      	adds	r3, #1
 800cf90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cf92:	e002      	b.n	800cf9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	3b01      	subs	r3, #1
 800cf98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cf9a:	4b15      	ldr	r3, [pc, #84]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf9c:	695b      	ldr	r3, [r3, #20]
 800cf9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfa6:	d102      	bne.n	800cfae <HAL_PWREx_ControlVoltageScaling+0xfa>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1f2      	bne.n	800cf94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cfae:	4b10      	ldr	r3, [pc, #64]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfb0:	695b      	ldr	r3, [r3, #20]
 800cfb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfba:	d112      	bne.n	800cfe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	e011      	b.n	800cfe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cfc0:	4b0b      	ldr	r3, [pc, #44]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfc6:	4a0a      	ldr	r2, [pc, #40]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cfcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800cfd0:	e007      	b.n	800cfe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cfd2:	4b07      	ldr	r3, [pc, #28]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cfda:	4a05      	ldr	r2, [pc, #20]	@ (800cff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cfe0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	40007000 	.word	0x40007000
 800cff4:	20000078 	.word	0x20000078
 800cff8:	431bde83 	.word	0x431bde83

0800cffc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800cffc:	b480      	push	{r7}
 800cffe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d000:	4b05      	ldr	r3, [pc, #20]	@ (800d018 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	4a04      	ldr	r2, [pc, #16]	@ (800d018 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d00a:	6093      	str	r3, [r2, #8]
}
 800d00c:	bf00      	nop
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	40007000 	.word	0x40007000

0800d01c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d101      	bne.n	800d02e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e2fe      	b.n	800d62c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f003 0301 	and.w	r3, r3, #1
 800d036:	2b00      	cmp	r3, #0
 800d038:	d075      	beq.n	800d126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d03a:	4b97      	ldr	r3, [pc, #604]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	f003 030c 	and.w	r3, r3, #12
 800d042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d044:	4b94      	ldr	r3, [pc, #592]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	f003 0303 	and.w	r3, r3, #3
 800d04c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2b0c      	cmp	r3, #12
 800d052:	d102      	bne.n	800d05a <HAL_RCC_OscConfig+0x3e>
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	2b03      	cmp	r3, #3
 800d058:	d002      	beq.n	800d060 <HAL_RCC_OscConfig+0x44>
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	2b08      	cmp	r3, #8
 800d05e:	d10b      	bne.n	800d078 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d060:	4b8d      	ldr	r3, [pc, #564]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d05b      	beq.n	800d124 <HAL_RCC_OscConfig+0x108>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d157      	bne.n	800d124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e2d9      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d080:	d106      	bne.n	800d090 <HAL_RCC_OscConfig+0x74>
 800d082:	4b85      	ldr	r3, [pc, #532]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a84      	ldr	r2, [pc, #528]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d08c:	6013      	str	r3, [r2, #0]
 800d08e:	e01d      	b.n	800d0cc <HAL_RCC_OscConfig+0xb0>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d098:	d10c      	bne.n	800d0b4 <HAL_RCC_OscConfig+0x98>
 800d09a:	4b7f      	ldr	r3, [pc, #508]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a7e      	ldr	r2, [pc, #504]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d0a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d0a4:	6013      	str	r3, [r2, #0]
 800d0a6:	4b7c      	ldr	r3, [pc, #496]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a7b      	ldr	r2, [pc, #492]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d0ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0b0:	6013      	str	r3, [r2, #0]
 800d0b2:	e00b      	b.n	800d0cc <HAL_RCC_OscConfig+0xb0>
 800d0b4:	4b78      	ldr	r3, [pc, #480]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a77      	ldr	r2, [pc, #476]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d0ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d0be:	6013      	str	r3, [r2, #0]
 800d0c0:	4b75      	ldr	r3, [pc, #468]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a74      	ldr	r2, [pc, #464]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d0c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d0ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d013      	beq.n	800d0fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0d4:	f7fc ffca 	bl	800a06c <HAL_GetTick>
 800d0d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d0da:	e008      	b.n	800d0ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d0dc:	f7fc ffc6 	bl	800a06c <HAL_GetTick>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	2b64      	cmp	r3, #100	@ 0x64
 800d0e8:	d901      	bls.n	800d0ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e29e      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d0ee:	4b6a      	ldr	r3, [pc, #424]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0f0      	beq.n	800d0dc <HAL_RCC_OscConfig+0xc0>
 800d0fa:	e014      	b.n	800d126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0fc:	f7fc ffb6 	bl	800a06c <HAL_GetTick>
 800d100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d102:	e008      	b.n	800d116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d104:	f7fc ffb2 	bl	800a06c <HAL_GetTick>
 800d108:	4602      	mov	r2, r0
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	1ad3      	subs	r3, r2, r3
 800d10e:	2b64      	cmp	r3, #100	@ 0x64
 800d110:	d901      	bls.n	800d116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d112:	2303      	movs	r3, #3
 800d114:	e28a      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d116:	4b60      	ldr	r3, [pc, #384]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1f0      	bne.n	800d104 <HAL_RCC_OscConfig+0xe8>
 800d122:	e000      	b.n	800d126 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 0302 	and.w	r3, r3, #2
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d075      	beq.n	800d21e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d132:	4b59      	ldr	r3, [pc, #356]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	f003 030c 	and.w	r3, r3, #12
 800d13a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d13c:	4b56      	ldr	r3, [pc, #344]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	f003 0303 	and.w	r3, r3, #3
 800d144:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	2b0c      	cmp	r3, #12
 800d14a:	d102      	bne.n	800d152 <HAL_RCC_OscConfig+0x136>
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d002      	beq.n	800d158 <HAL_RCC_OscConfig+0x13c>
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	2b04      	cmp	r3, #4
 800d156:	d11f      	bne.n	800d198 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d158:	4b4f      	ldr	r3, [pc, #316]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d160:	2b00      	cmp	r3, #0
 800d162:	d005      	beq.n	800d170 <HAL_RCC_OscConfig+0x154>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e25d      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d170:	4b49      	ldr	r3, [pc, #292]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	061b      	lsls	r3, r3, #24
 800d17e:	4946      	ldr	r1, [pc, #280]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d180:	4313      	orrs	r3, r2
 800d182:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d184:	4b45      	ldr	r3, [pc, #276]	@ (800d29c <HAL_RCC_OscConfig+0x280>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fc ff23 	bl	8009fd4 <HAL_InitTick>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d043      	beq.n	800d21c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	e249      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d023      	beq.n	800d1e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d1a0:	4b3d      	ldr	r3, [pc, #244]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a3c      	ldr	r2, [pc, #240]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d1a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1ac:	f7fc ff5e 	bl	800a06c <HAL_GetTick>
 800d1b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d1b2:	e008      	b.n	800d1c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d1b4:	f7fc ff5a 	bl	800a06c <HAL_GetTick>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d901      	bls.n	800d1c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d1c2:	2303      	movs	r3, #3
 800d1c4:	e232      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d1c6:	4b34      	ldr	r3, [pc, #208]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d0f0      	beq.n	800d1b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1d2:	4b31      	ldr	r3, [pc, #196]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	061b      	lsls	r3, r3, #24
 800d1e0:	492d      	ldr	r1, [pc, #180]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	604b      	str	r3, [r1, #4]
 800d1e6:	e01a      	b.n	800d21e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d1e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a2a      	ldr	r2, [pc, #168]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d1ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1f4:	f7fc ff3a 	bl	800a06c <HAL_GetTick>
 800d1f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d1fa:	e008      	b.n	800d20e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d1fc:	f7fc ff36 	bl	800a06c <HAL_GetTick>
 800d200:	4602      	mov	r2, r0
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	2b02      	cmp	r3, #2
 800d208:	d901      	bls.n	800d20e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d20a:	2303      	movs	r3, #3
 800d20c:	e20e      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d20e:	4b22      	ldr	r3, [pc, #136]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1f0      	bne.n	800d1fc <HAL_RCC_OscConfig+0x1e0>
 800d21a:	e000      	b.n	800d21e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d21c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 0308 	and.w	r3, r3, #8
 800d226:	2b00      	cmp	r3, #0
 800d228:	d041      	beq.n	800d2ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	695b      	ldr	r3, [r3, #20]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d01c      	beq.n	800d26c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d232:	4b19      	ldr	r3, [pc, #100]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d238:	4a17      	ldr	r2, [pc, #92]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d23a:	f043 0301 	orr.w	r3, r3, #1
 800d23e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d242:	f7fc ff13 	bl	800a06c <HAL_GetTick>
 800d246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d248:	e008      	b.n	800d25c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d24a:	f7fc ff0f 	bl	800a06c <HAL_GetTick>
 800d24e:	4602      	mov	r2, r0
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	2b02      	cmp	r3, #2
 800d256:	d901      	bls.n	800d25c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d258:	2303      	movs	r3, #3
 800d25a:	e1e7      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d25c:	4b0e      	ldr	r3, [pc, #56]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d25e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d262:	f003 0302 	and.w	r3, r3, #2
 800d266:	2b00      	cmp	r3, #0
 800d268:	d0ef      	beq.n	800d24a <HAL_RCC_OscConfig+0x22e>
 800d26a:	e020      	b.n	800d2ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d26c:	4b0a      	ldr	r3, [pc, #40]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d26e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d272:	4a09      	ldr	r2, [pc, #36]	@ (800d298 <HAL_RCC_OscConfig+0x27c>)
 800d274:	f023 0301 	bic.w	r3, r3, #1
 800d278:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d27c:	f7fc fef6 	bl	800a06c <HAL_GetTick>
 800d280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d282:	e00d      	b.n	800d2a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d284:	f7fc fef2 	bl	800a06c <HAL_GetTick>
 800d288:	4602      	mov	r2, r0
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	1ad3      	subs	r3, r2, r3
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d906      	bls.n	800d2a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d292:	2303      	movs	r3, #3
 800d294:	e1ca      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
 800d296:	bf00      	nop
 800d298:	40021000 	.word	0x40021000
 800d29c:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d2a0:	4b8c      	ldr	r3, [pc, #560]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d2a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d2a6:	f003 0302 	and.w	r3, r3, #2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1ea      	bne.n	800d284 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f003 0304 	and.w	r3, r3, #4
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f000 80a6 	beq.w	800d408 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d2c0:	4b84      	ldr	r3, [pc, #528]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d2c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <HAL_RCC_OscConfig+0x2b4>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e000      	b.n	800d2d2 <HAL_RCC_OscConfig+0x2b6>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00d      	beq.n	800d2f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d2d6:	4b7f      	ldr	r3, [pc, #508]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d2d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2da:	4a7e      	ldr	r2, [pc, #504]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d2dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d2e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2e2:	4b7c      	ldr	r3, [pc, #496]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d2e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2ea:	60fb      	str	r3, [r7, #12]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d2f2:	4b79      	ldr	r3, [pc, #484]	@ (800d4d8 <HAL_RCC_OscConfig+0x4bc>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d118      	bne.n	800d330 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d2fe:	4b76      	ldr	r3, [pc, #472]	@ (800d4d8 <HAL_RCC_OscConfig+0x4bc>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a75      	ldr	r2, [pc, #468]	@ (800d4d8 <HAL_RCC_OscConfig+0x4bc>)
 800d304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d30a:	f7fc feaf 	bl	800a06c <HAL_GetTick>
 800d30e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d310:	e008      	b.n	800d324 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d312:	f7fc feab 	bl	800a06c <HAL_GetTick>
 800d316:	4602      	mov	r2, r0
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	d901      	bls.n	800d324 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d320:	2303      	movs	r3, #3
 800d322:	e183      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d324:	4b6c      	ldr	r3, [pc, #432]	@ (800d4d8 <HAL_RCC_OscConfig+0x4bc>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d0f0      	beq.n	800d312 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d108      	bne.n	800d34a <HAL_RCC_OscConfig+0x32e>
 800d338:	4b66      	ldr	r3, [pc, #408]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d33e:	4a65      	ldr	r2, [pc, #404]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d340:	f043 0301 	orr.w	r3, r3, #1
 800d344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d348:	e024      	b.n	800d394 <HAL_RCC_OscConfig+0x378>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	2b05      	cmp	r3, #5
 800d350:	d110      	bne.n	800d374 <HAL_RCC_OscConfig+0x358>
 800d352:	4b60      	ldr	r3, [pc, #384]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d358:	4a5e      	ldr	r2, [pc, #376]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d35a:	f043 0304 	orr.w	r3, r3, #4
 800d35e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d362:	4b5c      	ldr	r3, [pc, #368]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d368:	4a5a      	ldr	r2, [pc, #360]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d36a:	f043 0301 	orr.w	r3, r3, #1
 800d36e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d372:	e00f      	b.n	800d394 <HAL_RCC_OscConfig+0x378>
 800d374:	4b57      	ldr	r3, [pc, #348]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d37a:	4a56      	ldr	r2, [pc, #344]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d37c:	f023 0301 	bic.w	r3, r3, #1
 800d380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d384:	4b53      	ldr	r3, [pc, #332]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d38a:	4a52      	ldr	r2, [pc, #328]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d38c:	f023 0304 	bic.w	r3, r3, #4
 800d390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d016      	beq.n	800d3ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d39c:	f7fc fe66 	bl	800a06c <HAL_GetTick>
 800d3a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d3a2:	e00a      	b.n	800d3ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3a4:	f7fc fe62 	bl	800a06c <HAL_GetTick>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d901      	bls.n	800d3ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d3b6:	2303      	movs	r3, #3
 800d3b8:	e138      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d3ba:	4b46      	ldr	r3, [pc, #280]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3c0:	f003 0302 	and.w	r3, r3, #2
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d0ed      	beq.n	800d3a4 <HAL_RCC_OscConfig+0x388>
 800d3c8:	e015      	b.n	800d3f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3ca:	f7fc fe4f 	bl	800a06c <HAL_GetTick>
 800d3ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d3d0:	e00a      	b.n	800d3e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3d2:	f7fc fe4b 	bl	800a06c <HAL_GetTick>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d901      	bls.n	800d3e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e121      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d3e8:	4b3a      	ldr	r3, [pc, #232]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ee:	f003 0302 	and.w	r3, r3, #2
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1ed      	bne.n	800d3d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d3f6:	7ffb      	ldrb	r3, [r7, #31]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d105      	bne.n	800d408 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d3fc:	4b35      	ldr	r3, [pc, #212]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d3fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d400:	4a34      	ldr	r2, [pc, #208]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d406:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f003 0320 	and.w	r3, r3, #32
 800d410:	2b00      	cmp	r3, #0
 800d412:	d03c      	beq.n	800d48e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	699b      	ldr	r3, [r3, #24]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d01c      	beq.n	800d456 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d41c:	4b2d      	ldr	r3, [pc, #180]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d41e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d422:	4a2c      	ldr	r2, [pc, #176]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d424:	f043 0301 	orr.w	r3, r3, #1
 800d428:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d42c:	f7fc fe1e 	bl	800a06c <HAL_GetTick>
 800d430:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d432:	e008      	b.n	800d446 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d434:	f7fc fe1a 	bl	800a06c <HAL_GetTick>
 800d438:	4602      	mov	r2, r0
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	2b02      	cmp	r3, #2
 800d440:	d901      	bls.n	800d446 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d442:	2303      	movs	r3, #3
 800d444:	e0f2      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d446:	4b23      	ldr	r3, [pc, #140]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d448:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d44c:	f003 0302 	and.w	r3, r3, #2
 800d450:	2b00      	cmp	r3, #0
 800d452:	d0ef      	beq.n	800d434 <HAL_RCC_OscConfig+0x418>
 800d454:	e01b      	b.n	800d48e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d456:	4b1f      	ldr	r3, [pc, #124]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d458:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d45c:	4a1d      	ldr	r2, [pc, #116]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d45e:	f023 0301 	bic.w	r3, r3, #1
 800d462:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d466:	f7fc fe01 	bl	800a06c <HAL_GetTick>
 800d46a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d46c:	e008      	b.n	800d480 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d46e:	f7fc fdfd 	bl	800a06c <HAL_GetTick>
 800d472:	4602      	mov	r2, r0
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d901      	bls.n	800d480 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d47c:	2303      	movs	r3, #3
 800d47e:	e0d5      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d480:	4b14      	ldr	r3, [pc, #80]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d486:	f003 0302 	and.w	r3, r3, #2
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1ef      	bne.n	800d46e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	2b00      	cmp	r3, #0
 800d494:	f000 80c9 	beq.w	800d62a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d498:	4b0e      	ldr	r3, [pc, #56]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	f003 030c 	and.w	r3, r3, #12
 800d4a0:	2b0c      	cmp	r3, #12
 800d4a2:	f000 8083 	beq.w	800d5ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	d15e      	bne.n	800d56c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4ae:	4b09      	ldr	r3, [pc, #36]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a08      	ldr	r2, [pc, #32]	@ (800d4d4 <HAL_RCC_OscConfig+0x4b8>)
 800d4b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d4b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4ba:	f7fc fdd7 	bl	800a06c <HAL_GetTick>
 800d4be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d4c0:	e00c      	b.n	800d4dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4c2:	f7fc fdd3 	bl	800a06c <HAL_GetTick>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d905      	bls.n	800d4dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	e0ab      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
 800d4d4:	40021000 	.word	0x40021000
 800d4d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d4dc:	4b55      	ldr	r3, [pc, #340]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1ec      	bne.n	800d4c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d4e8:	4b52      	ldr	r3, [pc, #328]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d4ea:	68da      	ldr	r2, [r3, #12]
 800d4ec:	4b52      	ldr	r3, [pc, #328]	@ (800d638 <HAL_RCC_OscConfig+0x61c>)
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	6a11      	ldr	r1, [r2, #32]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d4f8:	3a01      	subs	r2, #1
 800d4fa:	0112      	lsls	r2, r2, #4
 800d4fc:	4311      	orrs	r1, r2
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800d502:	0212      	lsls	r2, r2, #8
 800d504:	4311      	orrs	r1, r2
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d50a:	0852      	lsrs	r2, r2, #1
 800d50c:	3a01      	subs	r2, #1
 800d50e:	0552      	lsls	r2, r2, #21
 800d510:	4311      	orrs	r1, r2
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d516:	0852      	lsrs	r2, r2, #1
 800d518:	3a01      	subs	r2, #1
 800d51a:	0652      	lsls	r2, r2, #25
 800d51c:	4311      	orrs	r1, r2
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d522:	06d2      	lsls	r2, r2, #27
 800d524:	430a      	orrs	r2, r1
 800d526:	4943      	ldr	r1, [pc, #268]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d528:	4313      	orrs	r3, r2
 800d52a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d52c:	4b41      	ldr	r3, [pc, #260]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a40      	ldr	r2, [pc, #256]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d536:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d538:	4b3e      	ldr	r3, [pc, #248]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	4a3d      	ldr	r2, [pc, #244]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d53e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d542:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d544:	f7fc fd92 	bl	800a06c <HAL_GetTick>
 800d548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d54a:	e008      	b.n	800d55e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d54c:	f7fc fd8e 	bl	800a06c <HAL_GetTick>
 800d550:	4602      	mov	r2, r0
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	1ad3      	subs	r3, r2, r3
 800d556:	2b02      	cmp	r3, #2
 800d558:	d901      	bls.n	800d55e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d55a:	2303      	movs	r3, #3
 800d55c:	e066      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d55e:	4b35      	ldr	r3, [pc, #212]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d566:	2b00      	cmp	r3, #0
 800d568:	d0f0      	beq.n	800d54c <HAL_RCC_OscConfig+0x530>
 800d56a:	e05e      	b.n	800d62a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d56c:	4b31      	ldr	r3, [pc, #196]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a30      	ldr	r2, [pc, #192]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d578:	f7fc fd78 	bl	800a06c <HAL_GetTick>
 800d57c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d57e:	e008      	b.n	800d592 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d580:	f7fc fd74 	bl	800a06c <HAL_GetTick>
 800d584:	4602      	mov	r2, r0
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	1ad3      	subs	r3, r2, r3
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d901      	bls.n	800d592 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e04c      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d592:	4b28      	ldr	r3, [pc, #160]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1f0      	bne.n	800d580 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d59e:	4b25      	ldr	r3, [pc, #148]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	4924      	ldr	r1, [pc, #144]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d5a4:	4b25      	ldr	r3, [pc, #148]	@ (800d63c <HAL_RCC_OscConfig+0x620>)
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	60cb      	str	r3, [r1, #12]
 800d5aa:	e03e      	b.n	800d62a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	69db      	ldr	r3, [r3, #28]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d101      	bne.n	800d5b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e039      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d5b8:	4b1e      	ldr	r3, [pc, #120]	@ (800d634 <HAL_RCC_OscConfig+0x618>)
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	f003 0203 	and.w	r2, r3, #3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d12c      	bne.n	800d626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d123      	bne.n	800d626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d11b      	bne.n	800d626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d113      	bne.n	800d626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d608:	085b      	lsrs	r3, r3, #1
 800d60a:	3b01      	subs	r3, #1
 800d60c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d60e:	429a      	cmp	r2, r3
 800d610:	d109      	bne.n	800d626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d61c:	085b      	lsrs	r3, r3, #1
 800d61e:	3b01      	subs	r3, #1
 800d620:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d622:	429a      	cmp	r2, r3
 800d624:	d001      	beq.n	800d62a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	e000      	b.n	800d62c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d62a:	2300      	movs	r3, #0
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3720      	adds	r7, #32
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	40021000 	.word	0x40021000
 800d638:	019f800c 	.word	0x019f800c
 800d63c:	feeefffc 	.word	0xfeeefffc

0800d640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d64a:	2300      	movs	r3, #0
 800d64c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	e11e      	b.n	800d896 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d658:	4b91      	ldr	r3, [pc, #580]	@ (800d8a0 <HAL_RCC_ClockConfig+0x260>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f003 030f 	and.w	r3, r3, #15
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	d910      	bls.n	800d688 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d666:	4b8e      	ldr	r3, [pc, #568]	@ (800d8a0 <HAL_RCC_ClockConfig+0x260>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f023 020f 	bic.w	r2, r3, #15
 800d66e:	498c      	ldr	r1, [pc, #560]	@ (800d8a0 <HAL_RCC_ClockConfig+0x260>)
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	4313      	orrs	r3, r2
 800d674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d676:	4b8a      	ldr	r3, [pc, #552]	@ (800d8a0 <HAL_RCC_ClockConfig+0x260>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 030f 	and.w	r3, r3, #15
 800d67e:	683a      	ldr	r2, [r7, #0]
 800d680:	429a      	cmp	r2, r3
 800d682:	d001      	beq.n	800d688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e106      	b.n	800d896 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f003 0301 	and.w	r3, r3, #1
 800d690:	2b00      	cmp	r3, #0
 800d692:	d073      	beq.n	800d77c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	2b03      	cmp	r3, #3
 800d69a:	d129      	bne.n	800d6f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d69c:	4b81      	ldr	r3, [pc, #516]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e0f4      	b.n	800d896 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d6ac:	f000 f99e 	bl	800d9ec <RCC_GetSysClockFreqFromPLLSource>
 800d6b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	4a7c      	ldr	r2, [pc, #496]	@ (800d8a8 <HAL_RCC_ClockConfig+0x268>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d93f      	bls.n	800d73a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d6ba:	4b7a      	ldr	r3, [pc, #488]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d009      	beq.n	800d6da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d033      	beq.n	800d73a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d12f      	bne.n	800d73a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d6da:	4b72      	ldr	r3, [pc, #456]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d6e2:	4a70      	ldr	r2, [pc, #448]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d6e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d6ea:	2380      	movs	r3, #128	@ 0x80
 800d6ec:	617b      	str	r3, [r7, #20]
 800d6ee:	e024      	b.n	800d73a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d107      	bne.n	800d708 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d6f8:	4b6a      	ldr	r3, [pc, #424]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d700:	2b00      	cmp	r3, #0
 800d702:	d109      	bne.n	800d718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d704:	2301      	movs	r3, #1
 800d706:	e0c6      	b.n	800d896 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d708:	4b66      	ldr	r3, [pc, #408]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d714:	2301      	movs	r3, #1
 800d716:	e0be      	b.n	800d896 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d718:	f000 f8ce 	bl	800d8b8 <HAL_RCC_GetSysClockFreq>
 800d71c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	4a61      	ldr	r2, [pc, #388]	@ (800d8a8 <HAL_RCC_ClockConfig+0x268>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d909      	bls.n	800d73a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d726:	4b5f      	ldr	r3, [pc, #380]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d72e:	4a5d      	ldr	r2, [pc, #372]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d734:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d736:	2380      	movs	r3, #128	@ 0x80
 800d738:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d73a:	4b5a      	ldr	r3, [pc, #360]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	f023 0203 	bic.w	r2, r3, #3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	4957      	ldr	r1, [pc, #348]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d748:	4313      	orrs	r3, r2
 800d74a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d74c:	f7fc fc8e 	bl	800a06c <HAL_GetTick>
 800d750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d752:	e00a      	b.n	800d76a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d754:	f7fc fc8a 	bl	800a06c <HAL_GetTick>
 800d758:	4602      	mov	r2, r0
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	1ad3      	subs	r3, r2, r3
 800d75e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d762:	4293      	cmp	r3, r2
 800d764:	d901      	bls.n	800d76a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d766:	2303      	movs	r3, #3
 800d768:	e095      	b.n	800d896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d76a:	4b4e      	ldr	r3, [pc, #312]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	f003 020c 	and.w	r2, r3, #12
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	429a      	cmp	r2, r3
 800d77a:	d1eb      	bne.n	800d754 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f003 0302 	and.w	r3, r3, #2
 800d784:	2b00      	cmp	r3, #0
 800d786:	d023      	beq.n	800d7d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f003 0304 	and.w	r3, r3, #4
 800d790:	2b00      	cmp	r3, #0
 800d792:	d005      	beq.n	800d7a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d794:	4b43      	ldr	r3, [pc, #268]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	4a42      	ldr	r2, [pc, #264]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d79a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d79e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 0308 	and.w	r3, r3, #8
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d007      	beq.n	800d7bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d7ac:	4b3d      	ldr	r3, [pc, #244]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d7b4:	4a3b      	ldr	r2, [pc, #236]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d7b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d7ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d7bc:	4b39      	ldr	r3, [pc, #228]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	4936      	ldr	r1, [pc, #216]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	608b      	str	r3, [r1, #8]
 800d7ce:	e008      	b.n	800d7e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2b80      	cmp	r3, #128	@ 0x80
 800d7d4:	d105      	bne.n	800d7e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d7d6:	4b33      	ldr	r3, [pc, #204]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	4a32      	ldr	r2, [pc, #200]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d7dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d7e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d7e2:	4b2f      	ldr	r3, [pc, #188]	@ (800d8a0 <HAL_RCC_ClockConfig+0x260>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 030f 	and.w	r3, r3, #15
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d21d      	bcs.n	800d82c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d7f0:	4b2b      	ldr	r3, [pc, #172]	@ (800d8a0 <HAL_RCC_ClockConfig+0x260>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f023 020f 	bic.w	r2, r3, #15
 800d7f8:	4929      	ldr	r1, [pc, #164]	@ (800d8a0 <HAL_RCC_ClockConfig+0x260>)
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d800:	f7fc fc34 	bl	800a06c <HAL_GetTick>
 800d804:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d806:	e00a      	b.n	800d81e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d808:	f7fc fc30 	bl	800a06c <HAL_GetTick>
 800d80c:	4602      	mov	r2, r0
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d816:	4293      	cmp	r3, r2
 800d818:	d901      	bls.n	800d81e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d81a:	2303      	movs	r3, #3
 800d81c:	e03b      	b.n	800d896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d81e:	4b20      	ldr	r3, [pc, #128]	@ (800d8a0 <HAL_RCC_ClockConfig+0x260>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f003 030f 	and.w	r3, r3, #15
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d1ed      	bne.n	800d808 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f003 0304 	and.w	r3, r3, #4
 800d834:	2b00      	cmp	r3, #0
 800d836:	d008      	beq.n	800d84a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d838:	4b1a      	ldr	r3, [pc, #104]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	4917      	ldr	r1, [pc, #92]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d846:	4313      	orrs	r3, r2
 800d848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f003 0308 	and.w	r3, r3, #8
 800d852:	2b00      	cmp	r3, #0
 800d854:	d009      	beq.n	800d86a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d856:	4b13      	ldr	r3, [pc, #76]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	00db      	lsls	r3, r3, #3
 800d864:	490f      	ldr	r1, [pc, #60]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d866:	4313      	orrs	r3, r2
 800d868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d86a:	f000 f825 	bl	800d8b8 <HAL_RCC_GetSysClockFreq>
 800d86e:	4602      	mov	r2, r0
 800d870:	4b0c      	ldr	r3, [pc, #48]	@ (800d8a4 <HAL_RCC_ClockConfig+0x264>)
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	091b      	lsrs	r3, r3, #4
 800d876:	f003 030f 	and.w	r3, r3, #15
 800d87a:	490c      	ldr	r1, [pc, #48]	@ (800d8ac <HAL_RCC_ClockConfig+0x26c>)
 800d87c:	5ccb      	ldrb	r3, [r1, r3]
 800d87e:	f003 031f 	and.w	r3, r3, #31
 800d882:	fa22 f303 	lsr.w	r3, r2, r3
 800d886:	4a0a      	ldr	r2, [pc, #40]	@ (800d8b0 <HAL_RCC_ClockConfig+0x270>)
 800d888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d88a:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b4 <HAL_RCC_ClockConfig+0x274>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fc fba0 	bl	8009fd4 <HAL_InitTick>
 800d894:	4603      	mov	r3, r0
}
 800d896:	4618      	mov	r0, r3
 800d898:	3718      	adds	r7, #24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	40022000 	.word	0x40022000
 800d8a4:	40021000 	.word	0x40021000
 800d8a8:	04c4b400 	.word	0x04c4b400
 800d8ac:	08018980 	.word	0x08018980
 800d8b0:	20000078 	.word	0x20000078
 800d8b4:	2000007c 	.word	0x2000007c

0800d8b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b087      	sub	sp, #28
 800d8bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d8be:	4b2c      	ldr	r3, [pc, #176]	@ (800d970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	f003 030c 	and.w	r3, r3, #12
 800d8c6:	2b04      	cmp	r3, #4
 800d8c8:	d102      	bne.n	800d8d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d8ca:	4b2a      	ldr	r3, [pc, #168]	@ (800d974 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d8cc:	613b      	str	r3, [r7, #16]
 800d8ce:	e047      	b.n	800d960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d8d0:	4b27      	ldr	r3, [pc, #156]	@ (800d970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	f003 030c 	and.w	r3, r3, #12
 800d8d8:	2b08      	cmp	r3, #8
 800d8da:	d102      	bne.n	800d8e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d8dc:	4b26      	ldr	r3, [pc, #152]	@ (800d978 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d8de:	613b      	str	r3, [r7, #16]
 800d8e0:	e03e      	b.n	800d960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d8e2:	4b23      	ldr	r3, [pc, #140]	@ (800d970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	f003 030c 	and.w	r3, r3, #12
 800d8ea:	2b0c      	cmp	r3, #12
 800d8ec:	d136      	bne.n	800d95c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d8ee:	4b20      	ldr	r3, [pc, #128]	@ (800d970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	f003 0303 	and.w	r3, r3, #3
 800d8f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d8f8:	4b1d      	ldr	r3, [pc, #116]	@ (800d970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	091b      	lsrs	r3, r3, #4
 800d8fe:	f003 030f 	and.w	r3, r3, #15
 800d902:	3301      	adds	r3, #1
 800d904:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b03      	cmp	r3, #3
 800d90a:	d10c      	bne.n	800d926 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d90c:	4a1a      	ldr	r2, [pc, #104]	@ (800d978 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	fbb2 f3f3 	udiv	r3, r2, r3
 800d914:	4a16      	ldr	r2, [pc, #88]	@ (800d970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d916:	68d2      	ldr	r2, [r2, #12]
 800d918:	0a12      	lsrs	r2, r2, #8
 800d91a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d91e:	fb02 f303 	mul.w	r3, r2, r3
 800d922:	617b      	str	r3, [r7, #20]
      break;
 800d924:	e00c      	b.n	800d940 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d926:	4a13      	ldr	r2, [pc, #76]	@ (800d974 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d92e:	4a10      	ldr	r2, [pc, #64]	@ (800d970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d930:	68d2      	ldr	r2, [r2, #12]
 800d932:	0a12      	lsrs	r2, r2, #8
 800d934:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d938:	fb02 f303 	mul.w	r3, r2, r3
 800d93c:	617b      	str	r3, [r7, #20]
      break;
 800d93e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d940:	4b0b      	ldr	r3, [pc, #44]	@ (800d970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	0e5b      	lsrs	r3, r3, #25
 800d946:	f003 0303 	and.w	r3, r3, #3
 800d94a:	3301      	adds	r3, #1
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d950:	697a      	ldr	r2, [r7, #20]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	fbb2 f3f3 	udiv	r3, r2, r3
 800d958:	613b      	str	r3, [r7, #16]
 800d95a:	e001      	b.n	800d960 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d95c:	2300      	movs	r3, #0
 800d95e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d960:	693b      	ldr	r3, [r7, #16]
}
 800d962:	4618      	mov	r0, r3
 800d964:	371c      	adds	r7, #28
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	40021000 	.word	0x40021000
 800d974:	00f42400 	.word	0x00f42400
 800d978:	007a1200 	.word	0x007a1200

0800d97c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d980:	4b03      	ldr	r3, [pc, #12]	@ (800d990 <HAL_RCC_GetHCLKFreq+0x14>)
 800d982:	681b      	ldr	r3, [r3, #0]
}
 800d984:	4618      	mov	r0, r3
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	20000078 	.word	0x20000078

0800d994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d998:	f7ff fff0 	bl	800d97c <HAL_RCC_GetHCLKFreq>
 800d99c:	4602      	mov	r2, r0
 800d99e:	4b06      	ldr	r3, [pc, #24]	@ (800d9b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	0a1b      	lsrs	r3, r3, #8
 800d9a4:	f003 0307 	and.w	r3, r3, #7
 800d9a8:	4904      	ldr	r1, [pc, #16]	@ (800d9bc <HAL_RCC_GetPCLK1Freq+0x28>)
 800d9aa:	5ccb      	ldrb	r3, [r1, r3]
 800d9ac:	f003 031f 	and.w	r3, r3, #31
 800d9b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	40021000 	.word	0x40021000
 800d9bc:	08018990 	.word	0x08018990

0800d9c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d9c4:	f7ff ffda 	bl	800d97c <HAL_RCC_GetHCLKFreq>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	4b06      	ldr	r3, [pc, #24]	@ (800d9e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	0adb      	lsrs	r3, r3, #11
 800d9d0:	f003 0307 	and.w	r3, r3, #7
 800d9d4:	4904      	ldr	r1, [pc, #16]	@ (800d9e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d9d6:	5ccb      	ldrb	r3, [r1, r3]
 800d9d8:	f003 031f 	and.w	r3, r3, #31
 800d9dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	40021000 	.word	0x40021000
 800d9e8:	08018990 	.word	0x08018990

0800d9ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b087      	sub	sp, #28
 800d9f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d9f2:	4b1e      	ldr	r3, [pc, #120]	@ (800da6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	f003 0303 	and.w	r3, r3, #3
 800d9fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d9fc:	4b1b      	ldr	r3, [pc, #108]	@ (800da6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	091b      	lsrs	r3, r3, #4
 800da02:	f003 030f 	and.w	r3, r3, #15
 800da06:	3301      	adds	r3, #1
 800da08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	2b03      	cmp	r3, #3
 800da0e:	d10c      	bne.n	800da2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800da10:	4a17      	ldr	r2, [pc, #92]	@ (800da70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	fbb2 f3f3 	udiv	r3, r2, r3
 800da18:	4a14      	ldr	r2, [pc, #80]	@ (800da6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da1a:	68d2      	ldr	r2, [r2, #12]
 800da1c:	0a12      	lsrs	r2, r2, #8
 800da1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800da22:	fb02 f303 	mul.w	r3, r2, r3
 800da26:	617b      	str	r3, [r7, #20]
    break;
 800da28:	e00c      	b.n	800da44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800da2a:	4a12      	ldr	r2, [pc, #72]	@ (800da74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da32:	4a0e      	ldr	r2, [pc, #56]	@ (800da6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da34:	68d2      	ldr	r2, [r2, #12]
 800da36:	0a12      	lsrs	r2, r2, #8
 800da38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800da3c:	fb02 f303 	mul.w	r3, r2, r3
 800da40:	617b      	str	r3, [r7, #20]
    break;
 800da42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800da44:	4b09      	ldr	r3, [pc, #36]	@ (800da6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	0e5b      	lsrs	r3, r3, #25
 800da4a:	f003 0303 	and.w	r3, r3, #3
 800da4e:	3301      	adds	r3, #1
 800da50:	005b      	lsls	r3, r3, #1
 800da52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	fbb2 f3f3 	udiv	r3, r2, r3
 800da5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800da5e:	687b      	ldr	r3, [r7, #4]
}
 800da60:	4618      	mov	r0, r3
 800da62:	371c      	adds	r7, #28
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	40021000 	.word	0x40021000
 800da70:	007a1200 	.word	0x007a1200
 800da74:	00f42400 	.word	0x00f42400

0800da78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800da80:	2300      	movs	r3, #0
 800da82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800da84:	2300      	movs	r3, #0
 800da86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 8098 	beq.w	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800da96:	2300      	movs	r3, #0
 800da98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da9a:	4b43      	ldr	r3, [pc, #268]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10d      	bne.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800daa6:	4b40      	ldr	r3, [pc, #256]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800daa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daaa:	4a3f      	ldr	r2, [pc, #252]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800daac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dab0:	6593      	str	r3, [r2, #88]	@ 0x58
 800dab2:	4b3d      	ldr	r3, [pc, #244]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800daba:	60bb      	str	r3, [r7, #8]
 800dabc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dabe:	2301      	movs	r3, #1
 800dac0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dac2:	4b3a      	ldr	r3, [pc, #232]	@ (800dbac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a39      	ldr	r2, [pc, #228]	@ (800dbac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dacc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dace:	f7fc facd 	bl	800a06c <HAL_GetTick>
 800dad2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dad4:	e009      	b.n	800daea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dad6:	f7fc fac9 	bl	800a06c <HAL_GetTick>
 800dada:	4602      	mov	r2, r0
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d902      	bls.n	800daea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800dae4:	2303      	movs	r3, #3
 800dae6:	74fb      	strb	r3, [r7, #19]
        break;
 800dae8:	e005      	b.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800daea:	4b30      	ldr	r3, [pc, #192]	@ (800dbac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d0ef      	beq.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800daf6:	7cfb      	ldrb	r3, [r7, #19]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d159      	bne.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800dafc:	4b2a      	ldr	r3, [pc, #168]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d01e      	beq.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db12:	697a      	ldr	r2, [r7, #20]
 800db14:	429a      	cmp	r2, r3
 800db16:	d019      	beq.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800db18:	4b23      	ldr	r3, [pc, #140]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800db24:	4b20      	ldr	r3, [pc, #128]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db2a:	4a1f      	ldr	r2, [pc, #124]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800db34:	4b1c      	ldr	r3, [pc, #112]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db3a:	4a1b      	ldr	r2, [pc, #108]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800db44:	4a18      	ldr	r2, [pc, #96]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	2b00      	cmp	r3, #0
 800db54:	d016      	beq.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db56:	f7fc fa89 	bl	800a06c <HAL_GetTick>
 800db5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800db5c:	e00b      	b.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db5e:	f7fc fa85 	bl	800a06c <HAL_GetTick>
 800db62:	4602      	mov	r2, r0
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d902      	bls.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800db70:	2303      	movs	r3, #3
 800db72:	74fb      	strb	r3, [r7, #19]
            break;
 800db74:	e006      	b.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800db76:	4b0c      	ldr	r3, [pc, #48]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db7c:	f003 0302 	and.w	r3, r3, #2
 800db80:	2b00      	cmp	r3, #0
 800db82:	d0ec      	beq.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800db84:	7cfb      	ldrb	r3, [r7, #19]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10b      	bne.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800db8a:	4b07      	ldr	r3, [pc, #28]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db98:	4903      	ldr	r1, [pc, #12]	@ (800dba8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db9a:	4313      	orrs	r3, r2
 800db9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800dba0:	e008      	b.n	800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dba2:	7cfb      	ldrb	r3, [r7, #19]
 800dba4:	74bb      	strb	r3, [r7, #18]
 800dba6:	e005      	b.n	800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800dba8:	40021000 	.word	0x40021000
 800dbac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbb0:	7cfb      	ldrb	r3, [r7, #19]
 800dbb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dbb4:	7c7b      	ldrb	r3, [r7, #17]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d105      	bne.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbba:	4ba7      	ldr	r3, [pc, #668]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbbe:	4aa6      	ldr	r2, [pc, #664]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dbc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00a      	beq.n	800dbe8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dbd2:	4ba1      	ldr	r3, [pc, #644]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbd8:	f023 0203 	bic.w	r2, r3, #3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	499d      	ldr	r1, [pc, #628]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f003 0302 	and.w	r3, r3, #2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00a      	beq.n	800dc0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dbf4:	4b98      	ldr	r3, [pc, #608]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbfa:	f023 020c 	bic.w	r2, r3, #12
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	4995      	ldr	r1, [pc, #596]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc04:	4313      	orrs	r3, r2
 800dc06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0304 	and.w	r3, r3, #4
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00a      	beq.n	800dc2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dc16:	4b90      	ldr	r3, [pc, #576]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	498c      	ldr	r1, [pc, #560]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc26:	4313      	orrs	r3, r2
 800dc28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f003 0308 	and.w	r3, r3, #8
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00a      	beq.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dc38:	4b87      	ldr	r3, [pc, #540]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	4984      	ldr	r1, [pc, #528]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f003 0310 	and.w	r3, r3, #16
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00a      	beq.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dc5a:	4b7f      	ldr	r3, [pc, #508]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	695b      	ldr	r3, [r3, #20]
 800dc68:	497b      	ldr	r1, [pc, #492]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f003 0320 	and.w	r3, r3, #32
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00a      	beq.n	800dc92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dc7c:	4b76      	ldr	r3, [pc, #472]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	4973      	ldr	r1, [pc, #460]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00a      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dc9e:	4b6e      	ldr	r3, [pc, #440]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dca4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	69db      	ldr	r3, [r3, #28]
 800dcac:	496a      	ldr	r1, [pc, #424]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00a      	beq.n	800dcd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dcc0:	4b65      	ldr	r3, [pc, #404]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcc6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a1b      	ldr	r3, [r3, #32]
 800dcce:	4962      	ldr	r1, [pc, #392]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00a      	beq.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dce2:	4b5d      	ldr	r3, [pc, #372]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dce8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcf0:	4959      	ldr	r1, [pc, #356]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00a      	beq.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dd04:	4b54      	ldr	r3, [pc, #336]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dd0a:	f023 0203 	bic.w	r2, r3, #3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd12:	4951      	ldr	r1, [pc, #324]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd14:	4313      	orrs	r3, r2
 800dd16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00a      	beq.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dd26:	4b4c      	ldr	r3, [pc, #304]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd34:	4948      	ldr	r1, [pc, #288]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd36:	4313      	orrs	r3, r2
 800dd38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d015      	beq.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dd48:	4b43      	ldr	r3, [pc, #268]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd56:	4940      	ldr	r1, [pc, #256]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd66:	d105      	bne.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd68:	4b3b      	ldr	r3, [pc, #236]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	4a3a      	ldr	r2, [pc, #232]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d015      	beq.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dd80:	4b35      	ldr	r3, [pc, #212]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd8e:	4932      	ldr	r1, [pc, #200]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd90:	4313      	orrs	r3, r2
 800dd92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dd9e:	d105      	bne.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dda0:	4b2d      	ldr	r3, [pc, #180]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	4a2c      	ldr	r2, [pc, #176]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dda6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ddaa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d015      	beq.n	800dde4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ddb8:	4b27      	ldr	r3, [pc, #156]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddc6:	4924      	ldr	r1, [pc, #144]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ddd6:	d105      	bne.n	800dde4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ddd8:	4b1f      	ldr	r3, [pc, #124]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	4a1e      	ldr	r2, [pc, #120]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dde2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d015      	beq.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ddf0:	4b19      	ldr	r3, [pc, #100]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddfe:	4916      	ldr	r1, [pc, #88]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de00:	4313      	orrs	r3, r2
 800de02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de0e:	d105      	bne.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de10:	4b11      	ldr	r3, [pc, #68]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	4a10      	ldr	r2, [pc, #64]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de24:	2b00      	cmp	r3, #0
 800de26:	d019      	beq.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800de28:	4b0b      	ldr	r3, [pc, #44]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de36:	4908      	ldr	r1, [pc, #32]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de38:	4313      	orrs	r3, r2
 800de3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de46:	d109      	bne.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de48:	4b03      	ldr	r3, [pc, #12]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	4a02      	ldr	r2, [pc, #8]	@ (800de58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de52:	60d3      	str	r3, [r2, #12]
 800de54:	e002      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800de56:	bf00      	nop
 800de58:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de64:	2b00      	cmp	r3, #0
 800de66:	d015      	beq.n	800de94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800de68:	4b29      	ldr	r3, [pc, #164]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de76:	4926      	ldr	r1, [pc, #152]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de78:	4313      	orrs	r3, r2
 800de7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de86:	d105      	bne.n	800de94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800de88:	4b21      	ldr	r3, [pc, #132]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	4a20      	ldr	r2, [pc, #128]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800de92:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d015      	beq.n	800decc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800dea0:	4b1b      	ldr	r3, [pc, #108]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dea6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800deae:	4918      	ldr	r1, [pc, #96]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800deb0:	4313      	orrs	r3, r2
 800deb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800deba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800debe:	d105      	bne.n	800decc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dec0:	4b13      	ldr	r3, [pc, #76]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	4a12      	ldr	r2, [pc, #72]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800deca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d015      	beq.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ded8:	4b0d      	ldr	r3, [pc, #52]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800deda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dede:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dee6:	490a      	ldr	r1, [pc, #40]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dee8:	4313      	orrs	r3, r2
 800deea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800def2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800def6:	d105      	bne.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800def8:	4b05      	ldr	r3, [pc, #20]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	4a04      	ldr	r2, [pc, #16]	@ (800df10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800defe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800df04:	7cbb      	ldrb	r3, [r7, #18]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	40021000 	.word	0x40021000

0800df14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d101      	bne.n	800df26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df22:	2301      	movs	r3, #1
 800df24:	e09d      	b.n	800e062 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d108      	bne.n	800df40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800df36:	d009      	beq.n	800df4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	61da      	str	r2, [r3, #28]
 800df3e:	e005      	b.n	800df4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d106      	bne.n	800df6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7fa ff0a 	bl	8008d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2202      	movs	r2, #2
 800df70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800df82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800df8c:	d902      	bls.n	800df94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800df8e:	2300      	movs	r3, #0
 800df90:	60fb      	str	r3, [r7, #12]
 800df92:	e002      	b.n	800df9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800df94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800dfa2:	d007      	beq.n	800dfb4 <HAL_SPI_Init+0xa0>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dfac:	d002      	beq.n	800dfb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	691b      	ldr	r3, [r3, #16]
 800dfca:	f003 0302 	and.w	r3, r3, #2
 800dfce:	431a      	orrs	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	695b      	ldr	r3, [r3, #20]
 800dfd4:	f003 0301 	and.w	r3, r3, #1
 800dfd8:	431a      	orrs	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	699b      	ldr	r3, [r3, #24]
 800dfde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dfe2:	431a      	orrs	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	69db      	ldr	r3, [r3, #28]
 800dfe8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dfec:	431a      	orrs	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dff6:	ea42 0103 	orr.w	r1, r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dffe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	430a      	orrs	r2, r1
 800e008:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	0c1b      	lsrs	r3, r3, #16
 800e010:	f003 0204 	and.w	r2, r3, #4
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e018:	f003 0310 	and.w	r3, r3, #16
 800e01c:	431a      	orrs	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e022:	f003 0308 	and.w	r3, r3, #8
 800e026:	431a      	orrs	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e030:	ea42 0103 	orr.w	r1, r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	430a      	orrs	r2, r1
 800e040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	69da      	ldr	r2, [r3, #28]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e060:	2300      	movs	r3, #0
}
 800e062:	4618      	mov	r0, r3
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b088      	sub	sp, #32
 800e06e:	af00      	add	r7, sp, #0
 800e070:	60f8      	str	r0, [r7, #12]
 800e072:	60b9      	str	r1, [r7, #8]
 800e074:	603b      	str	r3, [r7, #0]
 800e076:	4613      	mov	r3, r2
 800e078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e07a:	2300      	movs	r3, #0
 800e07c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e084:	2b01      	cmp	r3, #1
 800e086:	d101      	bne.n	800e08c <HAL_SPI_Transmit+0x22>
 800e088:	2302      	movs	r3, #2
 800e08a:	e15f      	b.n	800e34c <HAL_SPI_Transmit+0x2e2>
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e094:	f7fb ffea 	bl	800a06c <HAL_GetTick>
 800e098:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e09a:	88fb      	ldrh	r3, [r7, #6]
 800e09c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d002      	beq.n	800e0b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e0aa:	2302      	movs	r3, #2
 800e0ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e0ae:	e148      	b.n	800e342 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d002      	beq.n	800e0bc <HAL_SPI_Transmit+0x52>
 800e0b6:	88fb      	ldrh	r3, [r7, #6]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d102      	bne.n	800e0c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e0c0:	e13f      	b.n	800e342 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2203      	movs	r2, #3
 800e0c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	68ba      	ldr	r2, [r7, #8]
 800e0d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	88fa      	ldrh	r2, [r7, #6]
 800e0da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	88fa      	ldrh	r2, [r7, #6]
 800e0e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e10c:	d10f      	bne.n	800e12e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e11c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e12c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e138:	2b40      	cmp	r3, #64	@ 0x40
 800e13a:	d007      	beq.n	800e14c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e14a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e154:	d94f      	bls.n	800e1f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d002      	beq.n	800e164 <HAL_SPI_Transmit+0xfa>
 800e15e:	8afb      	ldrh	r3, [r7, #22]
 800e160:	2b01      	cmp	r3, #1
 800e162:	d142      	bne.n	800e1ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e168:	881a      	ldrh	r2, [r3, #0]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e174:	1c9a      	adds	r2, r3, #2
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e17e:	b29b      	uxth	r3, r3
 800e180:	3b01      	subs	r3, #1
 800e182:	b29a      	uxth	r2, r3
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e188:	e02f      	b.n	800e1ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	f003 0302 	and.w	r3, r3, #2
 800e194:	2b02      	cmp	r3, #2
 800e196:	d112      	bne.n	800e1be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e19c:	881a      	ldrh	r2, [r3, #0]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1a8:	1c9a      	adds	r2, r3, #2
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e1bc:	e015      	b.n	800e1ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1be:	f7fb ff55 	bl	800a06c <HAL_GetTick>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d803      	bhi.n	800e1d6 <HAL_SPI_Transmit+0x16c>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d4:	d102      	bne.n	800e1dc <HAL_SPI_Transmit+0x172>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d106      	bne.n	800e1ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800e1dc:	2303      	movs	r3, #3
 800e1de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800e1e8:	e0ab      	b.n	800e342 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d1ca      	bne.n	800e18a <HAL_SPI_Transmit+0x120>
 800e1f4:	e080      	b.n	800e2f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d002      	beq.n	800e204 <HAL_SPI_Transmit+0x19a>
 800e1fe:	8afb      	ldrh	r3, [r7, #22]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d174      	bne.n	800e2ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e208:	b29b      	uxth	r3, r3
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d912      	bls.n	800e234 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e212:	881a      	ldrh	r2, [r3, #0]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e21e:	1c9a      	adds	r2, r3, #2
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e228:	b29b      	uxth	r3, r3
 800e22a:	3b02      	subs	r3, #2
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e232:	e05c      	b.n	800e2ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	330c      	adds	r3, #12
 800e23e:	7812      	ldrb	r2, [r2, #0]
 800e240:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e246:	1c5a      	adds	r2, r3, #1
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e250:	b29b      	uxth	r3, r3
 800e252:	3b01      	subs	r3, #1
 800e254:	b29a      	uxth	r2, r3
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e25a:	e048      	b.n	800e2ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	f003 0302 	and.w	r3, r3, #2
 800e266:	2b02      	cmp	r3, #2
 800e268:	d12b      	bne.n	800e2c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e26e:	b29b      	uxth	r3, r3
 800e270:	2b01      	cmp	r3, #1
 800e272:	d912      	bls.n	800e29a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e278:	881a      	ldrh	r2, [r3, #0]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e284:	1c9a      	adds	r2, r3, #2
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e28e:	b29b      	uxth	r3, r3
 800e290:	3b02      	subs	r3, #2
 800e292:	b29a      	uxth	r2, r3
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e298:	e029      	b.n	800e2ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	330c      	adds	r3, #12
 800e2a4:	7812      	ldrb	r2, [r2, #0]
 800e2a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e2c0:	e015      	b.n	800e2ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2c2:	f7fb fed3 	bl	800a06c <HAL_GetTick>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	683a      	ldr	r2, [r7, #0]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d803      	bhi.n	800e2da <HAL_SPI_Transmit+0x270>
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d8:	d102      	bne.n	800e2e0 <HAL_SPI_Transmit+0x276>
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d106      	bne.n	800e2ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800e2e0:	2303      	movs	r3, #3
 800e2e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800e2ec:	e029      	b.n	800e342 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1b1      	bne.n	800e25c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e2f8:	69ba      	ldr	r2, [r7, #24]
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f000 fc7d 	bl	800ebfc <SPI_EndRxTxTransaction>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d002      	beq.n	800e30e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2220      	movs	r2, #32
 800e30c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d10a      	bne.n	800e32c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e316:	2300      	movs	r3, #0
 800e318:	613b      	str	r3, [r7, #16]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	613b      	str	r3, [r7, #16]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	613b      	str	r3, [r7, #16]
 800e32a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	77fb      	strb	r3, [r7, #31]
 800e338:	e003      	b.n	800e342 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2201      	movs	r2, #1
 800e33e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800e34a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3720      	adds	r7, #32
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b08a      	sub	sp, #40	@ 0x28
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
 800e360:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e362:	2301      	movs	r3, #1
 800e364:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e366:	2300      	movs	r3, #0
 800e368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e372:	2b01      	cmp	r3, #1
 800e374:	d101      	bne.n	800e37a <HAL_SPI_TransmitReceive+0x26>
 800e376:	2302      	movs	r3, #2
 800e378:	e20a      	b.n	800e790 <HAL_SPI_TransmitReceive+0x43c>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2201      	movs	r2, #1
 800e37e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e382:	f7fb fe73 	bl	800a06c <HAL_GetTick>
 800e386:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e38e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e396:	887b      	ldrh	r3, [r7, #2]
 800e398:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e39a:	887b      	ldrh	r3, [r7, #2]
 800e39c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e39e:	7efb      	ldrb	r3, [r7, #27]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d00e      	beq.n	800e3c2 <HAL_SPI_TransmitReceive+0x6e>
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e3aa:	d106      	bne.n	800e3ba <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d102      	bne.n	800e3ba <HAL_SPI_TransmitReceive+0x66>
 800e3b4:	7efb      	ldrb	r3, [r7, #27]
 800e3b6:	2b04      	cmp	r3, #4
 800e3b8:	d003      	beq.n	800e3c2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e3ba:	2302      	movs	r3, #2
 800e3bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800e3c0:	e1e0      	b.n	800e784 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d005      	beq.n	800e3d4 <HAL_SPI_TransmitReceive+0x80>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d002      	beq.n	800e3d4 <HAL_SPI_TransmitReceive+0x80>
 800e3ce:	887b      	ldrh	r3, [r7, #2]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d103      	bne.n	800e3dc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800e3da:	e1d3      	b.n	800e784 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	2b04      	cmp	r3, #4
 800e3e6:	d003      	beq.n	800e3f0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2205      	movs	r2, #5
 800e3ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	887a      	ldrh	r2, [r7, #2]
 800e400:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	887a      	ldrh	r2, [r7, #2]
 800e408:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	68ba      	ldr	r2, [r7, #8]
 800e410:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	887a      	ldrh	r2, [r7, #2]
 800e416:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	887a      	ldrh	r2, [r7, #2]
 800e41c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2200      	movs	r2, #0
 800e428:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e432:	d802      	bhi.n	800e43a <HAL_SPI_TransmitReceive+0xe6>
 800e434:	8a3b      	ldrh	r3, [r7, #16]
 800e436:	2b01      	cmp	r3, #1
 800e438:	d908      	bls.n	800e44c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	685a      	ldr	r2, [r3, #4]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e448:	605a      	str	r2, [r3, #4]
 800e44a:	e007      	b.n	800e45c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	685a      	ldr	r2, [r3, #4]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e45a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e466:	2b40      	cmp	r3, #64	@ 0x40
 800e468:	d007      	beq.n	800e47a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e478:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e482:	f240 8081 	bls.w	800e588 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d002      	beq.n	800e494 <HAL_SPI_TransmitReceive+0x140>
 800e48e:	8a7b      	ldrh	r3, [r7, #18]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d16d      	bne.n	800e570 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e498:	881a      	ldrh	r2, [r3, #0]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4a4:	1c9a      	adds	r2, r3, #2
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4b8:	e05a      	b.n	800e570 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	f003 0302 	and.w	r3, r3, #2
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d11b      	bne.n	800e500 <HAL_SPI_TransmitReceive+0x1ac>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d016      	beq.n	800e500 <HAL_SPI_TransmitReceive+0x1ac>
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d113      	bne.n	800e500 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4dc:	881a      	ldrh	r2, [r3, #0]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4e8:	1c9a      	adds	r2, r3, #2
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	f003 0301 	and.w	r3, r3, #1
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d11c      	bne.n	800e548 <HAL_SPI_TransmitReceive+0x1f4>
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e514:	b29b      	uxth	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d016      	beq.n	800e548 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68da      	ldr	r2, [r3, #12]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e524:	b292      	uxth	r2, r2
 800e526:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e52c:	1c9a      	adds	r2, r3, #2
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e538:	b29b      	uxth	r3, r3
 800e53a:	3b01      	subs	r3, #1
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e544:	2301      	movs	r3, #1
 800e546:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e548:	f7fb fd90 	bl	800a06c <HAL_GetTick>
 800e54c:	4602      	mov	r2, r0
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e554:	429a      	cmp	r2, r3
 800e556:	d80b      	bhi.n	800e570 <HAL_SPI_TransmitReceive+0x21c>
 800e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55e:	d007      	beq.n	800e570 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800e560:	2303      	movs	r3, #3
 800e562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800e56e:	e109      	b.n	800e784 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e574:	b29b      	uxth	r3, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	d19f      	bne.n	800e4ba <HAL_SPI_TransmitReceive+0x166>
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e580:	b29b      	uxth	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d199      	bne.n	800e4ba <HAL_SPI_TransmitReceive+0x166>
 800e586:	e0e3      	b.n	800e750 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d003      	beq.n	800e598 <HAL_SPI_TransmitReceive+0x244>
 800e590:	8a7b      	ldrh	r3, [r7, #18]
 800e592:	2b01      	cmp	r3, #1
 800e594:	f040 80cf 	bne.w	800e736 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d912      	bls.n	800e5c8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5a6:	881a      	ldrh	r2, [r3, #0]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5b2:	1c9a      	adds	r2, r3, #2
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	3b02      	subs	r3, #2
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e5c6:	e0b6      	b.n	800e736 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	330c      	adds	r3, #12
 800e5d2:	7812      	ldrb	r2, [r2, #0]
 800e5d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5da:	1c5a      	adds	r2, r3, #1
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5ee:	e0a2      	b.n	800e736 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	f003 0302 	and.w	r3, r3, #2
 800e5fa:	2b02      	cmp	r3, #2
 800e5fc:	d134      	bne.n	800e668 <HAL_SPI_TransmitReceive+0x314>
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e602:	b29b      	uxth	r3, r3
 800e604:	2b00      	cmp	r3, #0
 800e606:	d02f      	beq.n	800e668 <HAL_SPI_TransmitReceive+0x314>
 800e608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d12c      	bne.n	800e668 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e612:	b29b      	uxth	r3, r3
 800e614:	2b01      	cmp	r3, #1
 800e616:	d912      	bls.n	800e63e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e61c:	881a      	ldrh	r2, [r3, #0]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e628:	1c9a      	adds	r2, r3, #2
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e632:	b29b      	uxth	r3, r3
 800e634:	3b02      	subs	r3, #2
 800e636:	b29a      	uxth	r2, r3
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e63c:	e012      	b.n	800e664 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	330c      	adds	r3, #12
 800e648:	7812      	ldrb	r2, [r2, #0]
 800e64a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e650:	1c5a      	adds	r2, r3, #1
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	3b01      	subs	r3, #1
 800e65e:	b29a      	uxth	r2, r3
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e664:	2300      	movs	r3, #0
 800e666:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	f003 0301 	and.w	r3, r3, #1
 800e672:	2b01      	cmp	r3, #1
 800e674:	d148      	bne.n	800e708 <HAL_SPI_TransmitReceive+0x3b4>
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d042      	beq.n	800e708 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e688:	b29b      	uxth	r3, r3
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d923      	bls.n	800e6d6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68da      	ldr	r2, [r3, #12]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e698:	b292      	uxth	r2, r2
 800e69a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6a0:	1c9a      	adds	r2, r3, #2
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	3b02      	subs	r3, #2
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d81f      	bhi.n	800e704 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	685a      	ldr	r2, [r3, #4]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e6d2:	605a      	str	r2, [r3, #4]
 800e6d4:	e016      	b.n	800e704 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f103 020c 	add.w	r2, r3, #12
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6e2:	7812      	ldrb	r2, [r2, #0]
 800e6e4:	b2d2      	uxtb	r2, r2
 800e6e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ec:	1c5a      	adds	r2, r3, #1
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	3b01      	subs	r3, #1
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e704:	2301      	movs	r3, #1
 800e706:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e708:	f7fb fcb0 	bl	800a06c <HAL_GetTick>
 800e70c:	4602      	mov	r2, r0
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e714:	429a      	cmp	r2, r3
 800e716:	d803      	bhi.n	800e720 <HAL_SPI_TransmitReceive+0x3cc>
 800e718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e71e:	d102      	bne.n	800e726 <HAL_SPI_TransmitReceive+0x3d2>
 800e720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e722:	2b00      	cmp	r3, #0
 800e724:	d107      	bne.n	800e736 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800e726:	2303      	movs	r3, #3
 800e728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800e734:	e026      	b.n	800e784 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f47f af57 	bne.w	800e5f0 <HAL_SPI_TransmitReceive+0x29c>
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e748:	b29b      	uxth	r3, r3
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f47f af50 	bne.w	800e5f0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e750:	69fa      	ldr	r2, [r7, #28]
 800e752:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f000 fa51 	bl	800ebfc <SPI_EndRxTxTransaction>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d005      	beq.n	800e76c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800e760:	2301      	movs	r3, #1
 800e762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2220      	movs	r2, #32
 800e76a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e77a:	e003      	b.n	800e784 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2201      	movs	r2, #1
 800e780:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2200      	movs	r2, #0
 800e788:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800e78c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800e790:	4618      	mov	r0, r3
 800e792:	3728      	adds	r7, #40	@ 0x28
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b088      	sub	sp, #32
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10e      	bne.n	800e7d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d009      	beq.n	800e7d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d004      	beq.n	800e7d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	4798      	blx	r3
    return;
 800e7d6:	e0ce      	b.n	800e976 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	f003 0302 	and.w	r3, r3, #2
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d009      	beq.n	800e7f6 <HAL_SPI_IRQHandler+0x5e>
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d004      	beq.n	800e7f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	4798      	blx	r3
    return;
 800e7f4:	e0bf      	b.n	800e976 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	f003 0320 	and.w	r3, r3, #32
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <HAL_SPI_IRQHandler+0x7e>
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e806:	2b00      	cmp	r3, #0
 800e808:	d105      	bne.n	800e816 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e810:	2b00      	cmp	r3, #0
 800e812:	f000 80b0 	beq.w	800e976 <HAL_SPI_IRQHandler+0x1de>
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	f003 0320 	and.w	r3, r3, #32
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f000 80aa 	beq.w	800e976 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d023      	beq.n	800e874 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e832:	b2db      	uxtb	r3, r3
 800e834:	2b03      	cmp	r3, #3
 800e836:	d011      	beq.n	800e85c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e83c:	f043 0204 	orr.w	r2, r3, #4
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e844:	2300      	movs	r3, #0
 800e846:	617b      	str	r3, [r7, #20]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	617b      	str	r3, [r7, #20]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	617b      	str	r3, [r7, #20]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	e00b      	b.n	800e874 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e85c:	2300      	movs	r3, #0
 800e85e:	613b      	str	r3, [r7, #16]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	613b      	str	r3, [r7, #16]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	613b      	str	r3, [r7, #16]
 800e870:	693b      	ldr	r3, [r7, #16]
        return;
 800e872:	e080      	b.n	800e976 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	f003 0320 	and.w	r3, r3, #32
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d014      	beq.n	800e8a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e882:	f043 0201 	orr.w	r2, r3, #1
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e88a:	2300      	movs	r3, #0
 800e88c:	60fb      	str	r3, [r7, #12]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	60fb      	str	r3, [r7, #12]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00c      	beq.n	800e8cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8b6:	f043 0208 	orr.w	r2, r3, #8
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e8be:	2300      	movs	r3, #0
 800e8c0:	60bb      	str	r3, [r7, #8]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	60bb      	str	r3, [r7, #8]
 800e8ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d04f      	beq.n	800e974 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	685a      	ldr	r2, [r3, #4]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e8e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	f003 0302 	and.w	r3, r3, #2
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d104      	bne.n	800e900 <HAL_SPI_IRQHandler+0x168>
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	f003 0301 	and.w	r3, r3, #1
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d034      	beq.n	800e96a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f022 0203 	bic.w	r2, r2, #3
 800e90e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e914:	2b00      	cmp	r3, #0
 800e916:	d011      	beq.n	800e93c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e91c:	4a17      	ldr	r2, [pc, #92]	@ (800e97c <HAL_SPI_IRQHandler+0x1e4>)
 800e91e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e924:	4618      	mov	r0, r3
 800e926:	f7fb fde0 	bl	800a4ea <HAL_DMA_Abort_IT>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d005      	beq.n	800e93c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e934:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e940:	2b00      	cmp	r3, #0
 800e942:	d016      	beq.n	800e972 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e948:	4a0c      	ldr	r2, [pc, #48]	@ (800e97c <HAL_SPI_IRQHandler+0x1e4>)
 800e94a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e950:	4618      	mov	r0, r3
 800e952:	f7fb fdca 	bl	800a4ea <HAL_DMA_Abort_IT>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00a      	beq.n	800e972 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e960:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800e968:	e003      	b.n	800e972 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 f808 	bl	800e980 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e970:	e000      	b.n	800e974 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800e972:	bf00      	nop
    return;
 800e974:	bf00      	nop
  }
}
 800e976:	3720      	adds	r7, #32
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	0800e995 	.word	0x0800e995

0800e980 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e988:	bf00      	nop
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr

0800e994 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	f7ff ffe5 	bl	800e980 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e9b6:	bf00      	nop
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
	...

0800e9c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b088      	sub	sp, #32
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	603b      	str	r3, [r7, #0]
 800e9cc:	4613      	mov	r3, r2
 800e9ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e9d0:	f7fb fb4c 	bl	800a06c <HAL_GetTick>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d8:	1a9b      	subs	r3, r3, r2
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	4413      	add	r3, r2
 800e9de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e9e0:	f7fb fb44 	bl	800a06c <HAL_GetTick>
 800e9e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e9e6:	4b39      	ldr	r3, [pc, #228]	@ (800eacc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	015b      	lsls	r3, r3, #5
 800e9ec:	0d1b      	lsrs	r3, r3, #20
 800e9ee:	69fa      	ldr	r2, [r7, #28]
 800e9f0:	fb02 f303 	mul.w	r3, r2, r3
 800e9f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e9f6:	e054      	b.n	800eaa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9fe:	d050      	beq.n	800eaa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ea00:	f7fb fb34 	bl	800a06c <HAL_GetTick>
 800ea04:	4602      	mov	r2, r0
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	69fa      	ldr	r2, [r7, #28]
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d902      	bls.n	800ea16 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d13d      	bne.n	800ea92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ea24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ea2e:	d111      	bne.n	800ea54 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea38:	d004      	beq.n	800ea44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea42:	d107      	bne.n	800ea54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ea52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ea5c:	d10f      	bne.n	800ea7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ea6c:	601a      	str	r2, [r3, #0]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ea7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	e017      	b.n	800eac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d101      	bne.n	800ea9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	689a      	ldr	r2, [r3, #8]
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	4013      	ands	r3, r2
 800eaac:	68ba      	ldr	r2, [r7, #8]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	bf0c      	ite	eq
 800eab2:	2301      	moveq	r3, #1
 800eab4:	2300      	movne	r3, #0
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	461a      	mov	r2, r3
 800eaba:	79fb      	ldrb	r3, [r7, #7]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d19b      	bne.n	800e9f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3720      	adds	r7, #32
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20000078 	.word	0x20000078

0800ead0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b08a      	sub	sp, #40	@ 0x28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
 800eadc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800eae2:	f7fb fac3 	bl	800a06c <HAL_GetTick>
 800eae6:	4602      	mov	r2, r0
 800eae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaea:	1a9b      	subs	r3, r3, r2
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	4413      	add	r3, r2
 800eaf0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800eaf2:	f7fb fabb 	bl	800a06c <HAL_GetTick>
 800eaf6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	330c      	adds	r3, #12
 800eafe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800eb00:	4b3d      	ldr	r3, [pc, #244]	@ (800ebf8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	4613      	mov	r3, r2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	00da      	lsls	r2, r3, #3
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	0d1b      	lsrs	r3, r3, #20
 800eb10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb12:	fb02 f303 	mul.w	r3, r2, r3
 800eb16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800eb18:	e060      	b.n	800ebdc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800eb20:	d107      	bne.n	800eb32 <SPI_WaitFifoStateUntilTimeout+0x62>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d104      	bne.n	800eb32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800eb30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb38:	d050      	beq.n	800ebdc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb3a:	f7fb fa97 	bl	800a06c <HAL_GetTick>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	6a3b      	ldr	r3, [r7, #32]
 800eb42:	1ad3      	subs	r3, r2, r3
 800eb44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d902      	bls.n	800eb50 <SPI_WaitFifoStateUntilTimeout+0x80>
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d13d      	bne.n	800ebcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	685a      	ldr	r2, [r3, #4]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800eb5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eb68:	d111      	bne.n	800eb8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb72:	d004      	beq.n	800eb7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb7c:	d107      	bne.n	800eb8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb96:	d10f      	bne.n	800ebb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800eba6:	601a      	str	r2, [r3, #0]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ebb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ebc8:	2303      	movs	r3, #3
 800ebca:	e010      	b.n	800ebee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d101      	bne.n	800ebd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	689a      	ldr	r2, [r3, #8]
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	4013      	ands	r3, r2
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d196      	bne.n	800eb1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ebec:	2300      	movs	r3, #0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3728      	adds	r7, #40	@ 0x28
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	20000078 	.word	0x20000078

0800ebfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b086      	sub	sp, #24
 800ec00:	af02      	add	r7, sp, #8
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f7ff ff5b 	bl	800ead0 <SPI_WaitFifoStateUntilTimeout>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d007      	beq.n	800ec30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec24:	f043 0220 	orr.w	r2, r3, #32
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ec2c:	2303      	movs	r3, #3
 800ec2e:	e027      	b.n	800ec80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	2200      	movs	r2, #0
 800ec38:	2180      	movs	r1, #128	@ 0x80
 800ec3a:	68f8      	ldr	r0, [r7, #12]
 800ec3c:	f7ff fec0 	bl	800e9c0 <SPI_WaitFlagStateUntilTimeout>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d007      	beq.n	800ec56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec4a:	f043 0220 	orr.w	r2, r3, #32
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ec52:	2303      	movs	r3, #3
 800ec54:	e014      	b.n	800ec80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f7ff ff34 	bl	800ead0 <SPI_WaitFifoStateUntilTimeout>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d007      	beq.n	800ec7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec72:	f043 0220 	orr.w	r2, r3, #32
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ec7a:	2303      	movs	r3, #3
 800ec7c:	e000      	b.n	800ec80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d101      	bne.n	800ec9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec96:	2301      	movs	r3, #1
 800ec98:	e049      	b.n	800ed2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d106      	bne.n	800ecb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f7fa fb28 	bl	8009304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	4610      	mov	r0, r2
 800ecc8:	f000 facc 	bl	800f264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2201      	movs	r2, #1
 800ed08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ed2c:	2300      	movs	r3, #0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
	...

0800ed38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b085      	sub	sp, #20
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d001      	beq.n	800ed50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e054      	b.n	800edfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2202      	movs	r2, #2
 800ed54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68da      	ldr	r2, [r3, #12]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f042 0201 	orr.w	r2, r2, #1
 800ed66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a26      	ldr	r2, [pc, #152]	@ (800ee08 <HAL_TIM_Base_Start_IT+0xd0>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d022      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed7a:	d01d      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a22      	ldr	r2, [pc, #136]	@ (800ee0c <HAL_TIM_Base_Start_IT+0xd4>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d018      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a21      	ldr	r2, [pc, #132]	@ (800ee10 <HAL_TIM_Base_Start_IT+0xd8>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d013      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a1f      	ldr	r2, [pc, #124]	@ (800ee14 <HAL_TIM_Base_Start_IT+0xdc>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00e      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a1e      	ldr	r2, [pc, #120]	@ (800ee18 <HAL_TIM_Base_Start_IT+0xe0>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d009      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a1c      	ldr	r2, [pc, #112]	@ (800ee1c <HAL_TIM_Base_Start_IT+0xe4>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d004      	beq.n	800edb8 <HAL_TIM_Base_Start_IT+0x80>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a1b      	ldr	r2, [pc, #108]	@ (800ee20 <HAL_TIM_Base_Start_IT+0xe8>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d115      	bne.n	800ede4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	689a      	ldr	r2, [r3, #8]
 800edbe:	4b19      	ldr	r3, [pc, #100]	@ (800ee24 <HAL_TIM_Base_Start_IT+0xec>)
 800edc0:	4013      	ands	r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2b06      	cmp	r3, #6
 800edc8:	d015      	beq.n	800edf6 <HAL_TIM_Base_Start_IT+0xbe>
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edd0:	d011      	beq.n	800edf6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f042 0201 	orr.w	r2, r2, #1
 800ede0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ede2:	e008      	b.n	800edf6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f042 0201 	orr.w	r2, r2, #1
 800edf2:	601a      	str	r2, [r3, #0]
 800edf4:	e000      	b.n	800edf8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3714      	adds	r7, #20
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop
 800ee08:	40012c00 	.word	0x40012c00
 800ee0c:	40000400 	.word	0x40000400
 800ee10:	40000800 	.word	0x40000800
 800ee14:	40000c00 	.word	0x40000c00
 800ee18:	40013400 	.word	0x40013400
 800ee1c:	40014000 	.word	0x40014000
 800ee20:	40015000 	.word	0x40015000
 800ee24:	00010007 	.word	0x00010007

0800ee28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b086      	sub	sp, #24
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d101      	bne.n	800ee3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	e097      	b.n	800ef6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d106      	bne.n	800ee56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7fa fa99 	bl	8009388 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2202      	movs	r2, #2
 800ee5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	6812      	ldr	r2, [r2, #0]
 800ee68:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ee6c:	f023 0307 	bic.w	r3, r3, #7
 800ee70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681a      	ldr	r2, [r3, #0]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	3304      	adds	r3, #4
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	4610      	mov	r0, r2
 800ee7e:	f000 f9f1 	bl	800f264 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	699b      	ldr	r3, [r3, #24]
 800ee90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	6a1b      	ldr	r3, [r3, #32]
 800ee98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	697a      	ldr	r2, [r7, #20]
 800eea0:	4313      	orrs	r3, r2
 800eea2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eeaa:	f023 0303 	bic.w	r3, r3, #3
 800eeae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	689a      	ldr	r2, [r3, #8]
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	021b      	lsls	r3, r3, #8
 800eeba:	4313      	orrs	r3, r2
 800eebc:	693a      	ldr	r2, [r7, #16]
 800eebe:	4313      	orrs	r3, r2
 800eec0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800eec8:	f023 030c 	bic.w	r3, r3, #12
 800eecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800eed4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800eed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	68da      	ldr	r2, [r3, #12]
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	69db      	ldr	r3, [r3, #28]
 800eee2:	021b      	lsls	r3, r3, #8
 800eee4:	4313      	orrs	r3, r2
 800eee6:	693a      	ldr	r2, [r7, #16]
 800eee8:	4313      	orrs	r3, r2
 800eeea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	691b      	ldr	r3, [r3, #16]
 800eef0:	011a      	lsls	r2, r3, #4
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	6a1b      	ldr	r3, [r3, #32]
 800eef6:	031b      	lsls	r3, r3, #12
 800eef8:	4313      	orrs	r3, r2
 800eefa:	693a      	ldr	r2, [r7, #16]
 800eefc:	4313      	orrs	r3, r2
 800eefe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ef06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ef0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	685a      	ldr	r2, [r3, #4]
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	695b      	ldr	r3, [r3, #20]
 800ef18:	011b      	lsls	r3, r3, #4
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	697a      	ldr	r2, [r7, #20]
 800ef28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	693a      	ldr	r2, [r7, #16]
 800ef30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	68fa      	ldr	r2, [r7, #12]
 800ef38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2201      	movs	r2, #1
 800ef46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2201      	movs	r2, #1
 800ef56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3718      	adds	r7, #24
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	691b      	ldr	r3, [r3, #16]
 800ef8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	f003 0302 	and.w	r3, r3, #2
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d020      	beq.n	800efd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f003 0302 	and.w	r3, r3, #2
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d01b      	beq.n	800efd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f06f 0202 	mvn.w	r2, #2
 800efa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2201      	movs	r2, #1
 800efae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	699b      	ldr	r3, [r3, #24]
 800efb6:	f003 0303 	and.w	r3, r3, #3
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d003      	beq.n	800efc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 f931 	bl	800f226 <HAL_TIM_IC_CaptureCallback>
 800efc4:	e005      	b.n	800efd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 f923 	bl	800f212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f934 	bl	800f23a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	f003 0304 	and.w	r3, r3, #4
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d020      	beq.n	800f024 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f003 0304 	and.w	r3, r3, #4
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d01b      	beq.n	800f024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f06f 0204 	mvn.w	r2, #4
 800eff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2202      	movs	r2, #2
 800effa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	699b      	ldr	r3, [r3, #24]
 800f002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f006:	2b00      	cmp	r3, #0
 800f008:	d003      	beq.n	800f012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f90b 	bl	800f226 <HAL_TIM_IC_CaptureCallback>
 800f010:	e005      	b.n	800f01e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 f8fd 	bl	800f212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 f90e 	bl	800f23a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	f003 0308 	and.w	r3, r3, #8
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d020      	beq.n	800f070 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f003 0308 	and.w	r3, r3, #8
 800f034:	2b00      	cmp	r3, #0
 800f036:	d01b      	beq.n	800f070 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f06f 0208 	mvn.w	r2, #8
 800f040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2204      	movs	r2, #4
 800f046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	69db      	ldr	r3, [r3, #28]
 800f04e:	f003 0303 	and.w	r3, r3, #3
 800f052:	2b00      	cmp	r3, #0
 800f054:	d003      	beq.n	800f05e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f8e5 	bl	800f226 <HAL_TIM_IC_CaptureCallback>
 800f05c:	e005      	b.n	800f06a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f8d7 	bl	800f212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 f8e8 	bl	800f23a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f003 0310 	and.w	r3, r3, #16
 800f076:	2b00      	cmp	r3, #0
 800f078:	d020      	beq.n	800f0bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f003 0310 	and.w	r3, r3, #16
 800f080:	2b00      	cmp	r3, #0
 800f082:	d01b      	beq.n	800f0bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f06f 0210 	mvn.w	r2, #16
 800f08c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2208      	movs	r2, #8
 800f092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	69db      	ldr	r3, [r3, #28]
 800f09a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d003      	beq.n	800f0aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f000 f8bf 	bl	800f226 <HAL_TIM_IC_CaptureCallback>
 800f0a8:	e005      	b.n	800f0b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 f8b1 	bl	800f212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 f8c2 	bl	800f23a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f003 0301 	and.w	r3, r3, #1
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00c      	beq.n	800f0e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f003 0301 	and.w	r3, r3, #1
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d007      	beq.n	800f0e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f06f 0201 	mvn.w	r2, #1
 800f0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f7f9 fd20 	bl	8008b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d104      	bne.n	800f0f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00c      	beq.n	800f10e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d007      	beq.n	800f10e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 f9ff 	bl	800f50c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00c      	beq.n	800f132 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d007      	beq.n	800f132 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f12a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 f9f7 	bl	800f520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00c      	beq.n	800f156 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f142:	2b00      	cmp	r3, #0
 800f144:	d007      	beq.n	800f156 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f14e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 f87c 	bl	800f24e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f003 0320 	and.w	r3, r3, #32
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00c      	beq.n	800f17a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f003 0320 	and.w	r3, r3, #32
 800f166:	2b00      	cmp	r3, #0
 800f168:	d007      	beq.n	800f17a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f06f 0220 	mvn.w	r2, #32
 800f172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 f9bf 	bl	800f4f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00c      	beq.n	800f19e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d007      	beq.n	800f19e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800f196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 f9cb 	bl	800f534 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00c      	beq.n	800f1c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d007      	beq.n	800f1c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800f1ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 f9c3 	bl	800f548 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00c      	beq.n	800f1e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d007      	beq.n	800f1e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800f1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 f9bb 	bl	800f55c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00c      	beq.n	800f20a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d007      	beq.n	800f20a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800f202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 f9b3 	bl	800f570 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f20a:	bf00      	nop
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f212:	b480      	push	{r7}
 800f214:	b083      	sub	sp, #12
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f21a:	bf00      	nop
 800f21c:	370c      	adds	r7, #12
 800f21e:	46bd      	mov	sp, r7
 800f220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f224:	4770      	bx	lr

0800f226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f226:	b480      	push	{r7}
 800f228:	b083      	sub	sp, #12
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f22e:	bf00      	nop
 800f230:	370c      	adds	r7, #12
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr

0800f23a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f23a:	b480      	push	{r7}
 800f23c:	b083      	sub	sp, #12
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f242:	bf00      	nop
 800f244:	370c      	adds	r7, #12
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f24e:	b480      	push	{r7}
 800f250:	b083      	sub	sp, #12
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f256:	bf00      	nop
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
	...

0800f264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f264:	b480      	push	{r7}
 800f266:	b085      	sub	sp, #20
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a4c      	ldr	r2, [pc, #304]	@ (800f3a8 <TIM_Base_SetConfig+0x144>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d017      	beq.n	800f2ac <TIM_Base_SetConfig+0x48>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f282:	d013      	beq.n	800f2ac <TIM_Base_SetConfig+0x48>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a49      	ldr	r2, [pc, #292]	@ (800f3ac <TIM_Base_SetConfig+0x148>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d00f      	beq.n	800f2ac <TIM_Base_SetConfig+0x48>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a48      	ldr	r2, [pc, #288]	@ (800f3b0 <TIM_Base_SetConfig+0x14c>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d00b      	beq.n	800f2ac <TIM_Base_SetConfig+0x48>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a47      	ldr	r2, [pc, #284]	@ (800f3b4 <TIM_Base_SetConfig+0x150>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d007      	beq.n	800f2ac <TIM_Base_SetConfig+0x48>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a46      	ldr	r2, [pc, #280]	@ (800f3b8 <TIM_Base_SetConfig+0x154>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d003      	beq.n	800f2ac <TIM_Base_SetConfig+0x48>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a45      	ldr	r2, [pc, #276]	@ (800f3bc <TIM_Base_SetConfig+0x158>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d108      	bne.n	800f2be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	68fa      	ldr	r2, [r7, #12]
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4a39      	ldr	r2, [pc, #228]	@ (800f3a8 <TIM_Base_SetConfig+0x144>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d023      	beq.n	800f30e <TIM_Base_SetConfig+0xaa>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2cc:	d01f      	beq.n	800f30e <TIM_Base_SetConfig+0xaa>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4a36      	ldr	r2, [pc, #216]	@ (800f3ac <TIM_Base_SetConfig+0x148>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d01b      	beq.n	800f30e <TIM_Base_SetConfig+0xaa>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4a35      	ldr	r2, [pc, #212]	@ (800f3b0 <TIM_Base_SetConfig+0x14c>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d017      	beq.n	800f30e <TIM_Base_SetConfig+0xaa>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4a34      	ldr	r2, [pc, #208]	@ (800f3b4 <TIM_Base_SetConfig+0x150>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d013      	beq.n	800f30e <TIM_Base_SetConfig+0xaa>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4a33      	ldr	r2, [pc, #204]	@ (800f3b8 <TIM_Base_SetConfig+0x154>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d00f      	beq.n	800f30e <TIM_Base_SetConfig+0xaa>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4a33      	ldr	r2, [pc, #204]	@ (800f3c0 <TIM_Base_SetConfig+0x15c>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d00b      	beq.n	800f30e <TIM_Base_SetConfig+0xaa>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4a32      	ldr	r2, [pc, #200]	@ (800f3c4 <TIM_Base_SetConfig+0x160>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d007      	beq.n	800f30e <TIM_Base_SetConfig+0xaa>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4a31      	ldr	r2, [pc, #196]	@ (800f3c8 <TIM_Base_SetConfig+0x164>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d003      	beq.n	800f30e <TIM_Base_SetConfig+0xaa>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a2c      	ldr	r2, [pc, #176]	@ (800f3bc <TIM_Base_SetConfig+0x158>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d108      	bne.n	800f320 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	4313      	orrs	r3, r2
 800f31e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	695b      	ldr	r3, [r3, #20]
 800f32a:	4313      	orrs	r3, r2
 800f32c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	689a      	ldr	r2, [r3, #8]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4a18      	ldr	r2, [pc, #96]	@ (800f3a8 <TIM_Base_SetConfig+0x144>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d013      	beq.n	800f374 <TIM_Base_SetConfig+0x110>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a1a      	ldr	r2, [pc, #104]	@ (800f3b8 <TIM_Base_SetConfig+0x154>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d00f      	beq.n	800f374 <TIM_Base_SetConfig+0x110>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a1a      	ldr	r2, [pc, #104]	@ (800f3c0 <TIM_Base_SetConfig+0x15c>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d00b      	beq.n	800f374 <TIM_Base_SetConfig+0x110>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4a19      	ldr	r2, [pc, #100]	@ (800f3c4 <TIM_Base_SetConfig+0x160>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d007      	beq.n	800f374 <TIM_Base_SetConfig+0x110>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4a18      	ldr	r2, [pc, #96]	@ (800f3c8 <TIM_Base_SetConfig+0x164>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d003      	beq.n	800f374 <TIM_Base_SetConfig+0x110>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4a13      	ldr	r2, [pc, #76]	@ (800f3bc <TIM_Base_SetConfig+0x158>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d103      	bne.n	800f37c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	691a      	ldr	r2, [r3, #16]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2201      	movs	r2, #1
 800f380:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	691b      	ldr	r3, [r3, #16]
 800f386:	f003 0301 	and.w	r3, r3, #1
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d105      	bne.n	800f39a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	f023 0201 	bic.w	r2, r3, #1
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	611a      	str	r2, [r3, #16]
  }
}
 800f39a:	bf00      	nop
 800f39c:	3714      	adds	r7, #20
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	40012c00 	.word	0x40012c00
 800f3ac:	40000400 	.word	0x40000400
 800f3b0:	40000800 	.word	0x40000800
 800f3b4:	40000c00 	.word	0x40000c00
 800f3b8:	40013400 	.word	0x40013400
 800f3bc:	40015000 	.word	0x40015000
 800f3c0:	40014000 	.word	0x40014000
 800f3c4:	40014400 	.word	0x40014400
 800f3c8:	40014800 	.word	0x40014800

0800f3cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d101      	bne.n	800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f3e0:	2302      	movs	r3, #2
 800f3e2:	e074      	b.n	800f4ce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2202      	movs	r2, #2
 800f3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	689b      	ldr	r3, [r3, #8]
 800f402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4a34      	ldr	r2, [pc, #208]	@ (800f4dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d009      	beq.n	800f422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4a33      	ldr	r2, [pc, #204]	@ (800f4e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d004      	beq.n	800f422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a31      	ldr	r2, [pc, #196]	@ (800f4e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d108      	bne.n	800f434 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f428:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	68fa      	ldr	r2, [r7, #12]
 800f430:	4313      	orrs	r3, r2
 800f432:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f43a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f43e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	68fa      	ldr	r2, [r7, #12]
 800f446:	4313      	orrs	r3, r2
 800f448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4a21      	ldr	r2, [pc, #132]	@ (800f4dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d022      	beq.n	800f4a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f464:	d01d      	beq.n	800f4a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4a1f      	ldr	r2, [pc, #124]	@ (800f4e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d018      	beq.n	800f4a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4a1d      	ldr	r2, [pc, #116]	@ (800f4ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d013      	beq.n	800f4a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	4a1c      	ldr	r2, [pc, #112]	@ (800f4f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d00e      	beq.n	800f4a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4a15      	ldr	r2, [pc, #84]	@ (800f4e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d009      	beq.n	800f4a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4a18      	ldr	r2, [pc, #96]	@ (800f4f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d004      	beq.n	800f4a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4a11      	ldr	r2, [pc, #68]	@ (800f4e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d10c      	bne.n	800f4bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f4a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	68ba      	ldr	r2, [r7, #8]
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	68ba      	ldr	r2, [r7, #8]
 800f4ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3714      	adds	r7, #20
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	40012c00 	.word	0x40012c00
 800f4e0:	40013400 	.word	0x40013400
 800f4e4:	40015000 	.word	0x40015000
 800f4e8:	40000400 	.word	0x40000400
 800f4ec:	40000800 	.word	0x40000800
 800f4f0:	40000c00 	.word	0x40000c00
 800f4f4:	40014000 	.word	0x40014000

0800f4f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b083      	sub	sp, #12
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f500:	bf00      	nop
 800f502:	370c      	adds	r7, #12
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr

0800f50c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f514:	bf00      	nop
 800f516:	370c      	adds	r7, #12
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr

0800f520 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f528:	bf00      	nop
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f53c:	bf00      	nop
 800f53e:	370c      	adds	r7, #12
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d101      	bne.n	800f596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	e042      	b.n	800f61c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d106      	bne.n	800f5ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f7fa fbe1 	bl	8009d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2224      	movs	r2, #36	@ 0x24
 800f5b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f022 0201 	bic.w	r2, r2, #1
 800f5c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d002      	beq.n	800f5d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 fe68 	bl	80102a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 fb69 	bl	800fcac <UART_SetConfig>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d101      	bne.n	800f5e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e01b      	b.n	800f61c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	685a      	ldr	r2, [r3, #4]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f5f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	689a      	ldr	r2, [r3, #8]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f042 0201 	orr.w	r2, r2, #1
 800f612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 fee7 	bl	80103e8 <UART_CheckIdleState>
 800f61a:	4603      	mov	r3, r0
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3708      	adds	r7, #8
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b0ba      	sub	sp, #232	@ 0xe8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	69db      	ldr	r3, [r3, #28]
 800f632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f64a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f64e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f652:	4013      	ands	r3, r2
 800f654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d11b      	bne.n	800f698 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f664:	f003 0320 	and.w	r3, r3, #32
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d015      	beq.n	800f698 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f670:	f003 0320 	and.w	r3, r3, #32
 800f674:	2b00      	cmp	r3, #0
 800f676:	d105      	bne.n	800f684 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f67c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f680:	2b00      	cmp	r3, #0
 800f682:	d009      	beq.n	800f698 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f000 82e3 	beq.w	800fc54 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	4798      	blx	r3
      }
      return;
 800f696:	e2dd      	b.n	800fc54 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f000 8123 	beq.w	800f8e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f6a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f6a6:	4b8d      	ldr	r3, [pc, #564]	@ (800f8dc <HAL_UART_IRQHandler+0x2b8>)
 800f6a8:	4013      	ands	r3, r2
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d106      	bne.n	800f6bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f6ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f6b2:	4b8b      	ldr	r3, [pc, #556]	@ (800f8e0 <HAL_UART_IRQHandler+0x2bc>)
 800f6b4:	4013      	ands	r3, r2
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f000 8116 	beq.w	800f8e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6c0:	f003 0301 	and.w	r3, r3, #1
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d011      	beq.n	800f6ec <HAL_UART_IRQHandler+0xc8>
 800f6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d00b      	beq.n	800f6ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2201      	movs	r2, #1
 800f6da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6e2:	f043 0201 	orr.w	r2, r3, #1
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6f0:	f003 0302 	and.w	r3, r3, #2
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d011      	beq.n	800f71c <HAL_UART_IRQHandler+0xf8>
 800f6f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6fc:	f003 0301 	and.w	r3, r3, #1
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00b      	beq.n	800f71c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2202      	movs	r2, #2
 800f70a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f712:	f043 0204 	orr.w	r2, r3, #4
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f720:	f003 0304 	and.w	r3, r3, #4
 800f724:	2b00      	cmp	r3, #0
 800f726:	d011      	beq.n	800f74c <HAL_UART_IRQHandler+0x128>
 800f728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f72c:	f003 0301 	and.w	r3, r3, #1
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00b      	beq.n	800f74c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2204      	movs	r2, #4
 800f73a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f742:	f043 0202 	orr.w	r2, r3, #2
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f750:	f003 0308 	and.w	r3, r3, #8
 800f754:	2b00      	cmp	r3, #0
 800f756:	d017      	beq.n	800f788 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f75c:	f003 0320 	and.w	r3, r3, #32
 800f760:	2b00      	cmp	r3, #0
 800f762:	d105      	bne.n	800f770 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f764:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f768:	4b5c      	ldr	r3, [pc, #368]	@ (800f8dc <HAL_UART_IRQHandler+0x2b8>)
 800f76a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d00b      	beq.n	800f788 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2208      	movs	r2, #8
 800f776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f77e:	f043 0208 	orr.w	r2, r3, #8
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f78c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f790:	2b00      	cmp	r3, #0
 800f792:	d012      	beq.n	800f7ba <HAL_UART_IRQHandler+0x196>
 800f794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f798:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00c      	beq.n	800f7ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f7a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7b0:	f043 0220 	orr.w	r2, r3, #32
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f000 8249 	beq.w	800fc58 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7ca:	f003 0320 	and.w	r3, r3, #32
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d013      	beq.n	800f7fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7d6:	f003 0320 	and.w	r3, r3, #32
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d105      	bne.n	800f7ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f7de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d007      	beq.n	800f7fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d003      	beq.n	800f7fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f800:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f80e:	2b40      	cmp	r3, #64	@ 0x40
 800f810:	d005      	beq.n	800f81e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f816:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d054      	beq.n	800f8c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fef9 	bl	8010616 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f82e:	2b40      	cmp	r3, #64	@ 0x40
 800f830:	d146      	bne.n	800f8c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	3308      	adds	r3, #8
 800f838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f840:	e853 3f00 	ldrex	r3, [r3]
 800f844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f84c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	3308      	adds	r3, #8
 800f85a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f85e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f86a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f86e:	e841 2300 	strex	r3, r2, [r1]
 800f872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1d9      	bne.n	800f832 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f884:	2b00      	cmp	r3, #0
 800f886:	d017      	beq.n	800f8b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f88e:	4a15      	ldr	r2, [pc, #84]	@ (800f8e4 <HAL_UART_IRQHandler+0x2c0>)
 800f890:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f898:	4618      	mov	r0, r3
 800f89a:	f7fa fe26 	bl	800a4ea <HAL_DMA_Abort_IT>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d019      	beq.n	800f8d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8b6:	e00f      	b.n	800f8d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 f9e1 	bl	800fc80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8be:	e00b      	b.n	800f8d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f9dd 	bl	800fc80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8c6:	e007      	b.n	800f8d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 f9d9 	bl	800fc80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f8d6:	e1bf      	b.n	800fc58 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8d8:	bf00      	nop
    return;
 800f8da:	e1bd      	b.n	800fc58 <HAL_UART_IRQHandler+0x634>
 800f8dc:	10000001 	.word	0x10000001
 800f8e0:	04000120 	.word	0x04000120
 800f8e4:	080106e3 	.word	0x080106e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	f040 8153 	bne.w	800fb98 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f8f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8f6:	f003 0310 	and.w	r3, r3, #16
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f000 814c 	beq.w	800fb98 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f904:	f003 0310 	and.w	r3, r3, #16
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f000 8145 	beq.w	800fb98 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2210      	movs	r2, #16
 800f914:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f920:	2b40      	cmp	r3, #64	@ 0x40
 800f922:	f040 80bb 	bne.w	800fa9c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f934:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f000 818f 	beq.w	800fc5c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f944:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f948:	429a      	cmp	r2, r3
 800f94a:	f080 8187 	bcs.w	800fc5c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f954:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f003 0320 	and.w	r3, r3, #32
 800f966:	2b00      	cmp	r3, #0
 800f968:	f040 8087 	bne.w	800fa7a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f974:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f978:	e853 3f00 	ldrex	r3, [r3]
 800f97c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f980:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f988:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	461a      	mov	r2, r3
 800f992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f99a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f99e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f9a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f9a6:	e841 2300 	strex	r3, r2, [r1]
 800f9aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f9ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d1da      	bne.n	800f96c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	3308      	adds	r3, #8
 800f9bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9c0:	e853 3f00 	ldrex	r3, [r3]
 800f9c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f9c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f9c8:	f023 0301 	bic.w	r3, r3, #1
 800f9cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	3308      	adds	r3, #8
 800f9d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f9da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f9de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f9e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f9e6:	e841 2300 	strex	r3, r2, [r1]
 800f9ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f9ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1e1      	bne.n	800f9b6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	3308      	adds	r3, #8
 800f9f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9fc:	e853 3f00 	ldrex	r3, [r3]
 800fa00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fa02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	3308      	adds	r3, #8
 800fa12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fa16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fa18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fa1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fa1e:	e841 2300 	strex	r3, r2, [r1]
 800fa22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fa24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1e3      	bne.n	800f9f2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2220      	movs	r2, #32
 800fa2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa40:	e853 3f00 	ldrex	r3, [r3]
 800fa44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fa46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa48:	f023 0310 	bic.w	r3, r3, #16
 800fa4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	461a      	mov	r2, r3
 800fa56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa62:	e841 2300 	strex	r3, r2, [r1]
 800fa66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fa68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1e4      	bne.n	800fa38 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fa fcdf 	bl	800a438 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2202      	movs	r2, #2
 800fa7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	1ad3      	subs	r3, r2, r3
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	4619      	mov	r1, r3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 f8fd 	bl	800fc94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fa9a:	e0df      	b.n	800fc5c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f000 80d1 	beq.w	800fc60 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800fabe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f000 80cc 	beq.w	800fc60 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800face:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fadc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	461a      	mov	r2, r3
 800fae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800faea:	647b      	str	r3, [r7, #68]	@ 0x44
 800faec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800faf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800faf2:	e841 2300 	strex	r3, r2, [r1]
 800faf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800faf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d1e4      	bne.n	800fac8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	3308      	adds	r3, #8
 800fb04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb08:	e853 3f00 	ldrex	r3, [r3]
 800fb0c:	623b      	str	r3, [r7, #32]
   return(result);
 800fb0e:	6a3b      	ldr	r3, [r7, #32]
 800fb10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fb14:	f023 0301 	bic.w	r3, r3, #1
 800fb18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	3308      	adds	r3, #8
 800fb22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fb26:	633a      	str	r2, [r7, #48]	@ 0x30
 800fb28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb2e:	e841 2300 	strex	r3, r2, [r1]
 800fb32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d1e1      	bne.n	800fafe <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2220      	movs	r2, #32
 800fb3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	e853 3f00 	ldrex	r3, [r3]
 800fb5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f023 0310 	bic.w	r3, r3, #16
 800fb62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fb70:	61fb      	str	r3, [r7, #28]
 800fb72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb74:	69b9      	ldr	r1, [r7, #24]
 800fb76:	69fa      	ldr	r2, [r7, #28]
 800fb78:	e841 2300 	strex	r3, r2, [r1]
 800fb7c:	617b      	str	r3, [r7, #20]
   return(result);
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d1e4      	bne.n	800fb4e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2202      	movs	r2, #2
 800fb88:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fb8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fb8e:	4619      	mov	r1, r3
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 f87f 	bl	800fc94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fb96:	e063      	b.n	800fc60 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d00e      	beq.n	800fbc2 <HAL_UART_IRQHandler+0x59e>
 800fba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d008      	beq.n	800fbc2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fbb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 fdd2 	bl	8010764 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fbc0:	e051      	b.n	800fc66 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fbc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d014      	beq.n	800fbf8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fbce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d105      	bne.n	800fbe6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fbda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fbde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d008      	beq.n	800fbf8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d03a      	beq.n	800fc64 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	4798      	blx	r3
    }
    return;
 800fbf6:	e035      	b.n	800fc64 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d009      	beq.n	800fc18 <HAL_UART_IRQHandler+0x5f4>
 800fc04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d003      	beq.n	800fc18 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 fd7c 	bl	801070e <UART_EndTransmit_IT>
    return;
 800fc16:	e026      	b.n	800fc66 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fc18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d009      	beq.n	800fc38 <HAL_UART_IRQHandler+0x614>
 800fc24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d003      	beq.n	800fc38 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fdab 	bl	801078c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc36:	e016      	b.n	800fc66 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d010      	beq.n	800fc66 <HAL_UART_IRQHandler+0x642>
 800fc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	da0c      	bge.n	800fc66 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 fd93 	bl	8010778 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc52:	e008      	b.n	800fc66 <HAL_UART_IRQHandler+0x642>
      return;
 800fc54:	bf00      	nop
 800fc56:	e006      	b.n	800fc66 <HAL_UART_IRQHandler+0x642>
    return;
 800fc58:	bf00      	nop
 800fc5a:	e004      	b.n	800fc66 <HAL_UART_IRQHandler+0x642>
      return;
 800fc5c:	bf00      	nop
 800fc5e:	e002      	b.n	800fc66 <HAL_UART_IRQHandler+0x642>
      return;
 800fc60:	bf00      	nop
 800fc62:	e000      	b.n	800fc66 <HAL_UART_IRQHandler+0x642>
    return;
 800fc64:	bf00      	nop
  }
}
 800fc66:	37e8      	adds	r7, #232	@ 0xe8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b083      	sub	sp, #12
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fc74:	bf00      	nop
 800fc76:	370c      	adds	r7, #12
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fc88:	bf00      	nop
 800fc8a:	370c      	adds	r7, #12
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr

0800fc94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b083      	sub	sp, #12
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fca0:	bf00      	nop
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fcac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fcb0:	b08c      	sub	sp, #48	@ 0x30
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	689a      	ldr	r2, [r3, #8]
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	691b      	ldr	r3, [r3, #16]
 800fcc4:	431a      	orrs	r2, r3
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	695b      	ldr	r3, [r3, #20]
 800fcca:	431a      	orrs	r2, r3
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	69db      	ldr	r3, [r3, #28]
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	4baa      	ldr	r3, [pc, #680]	@ (800ff84 <UART_SetConfig+0x2d8>)
 800fcdc:	4013      	ands	r3, r2
 800fcde:	697a      	ldr	r2, [r7, #20]
 800fce0:	6812      	ldr	r2, [r2, #0]
 800fce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fce4:	430b      	orrs	r3, r1
 800fce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	68da      	ldr	r2, [r3, #12]
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	430a      	orrs	r2, r1
 800fcfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	699b      	ldr	r3, [r3, #24]
 800fd02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4a9f      	ldr	r2, [pc, #636]	@ (800ff88 <UART_SetConfig+0x2dc>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d004      	beq.n	800fd18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	6a1b      	ldr	r3, [r3, #32]
 800fd12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd14:	4313      	orrs	r3, r2
 800fd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800fd22:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800fd26:	697a      	ldr	r2, [r7, #20]
 800fd28:	6812      	ldr	r2, [r2, #0]
 800fd2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd2c:	430b      	orrs	r3, r1
 800fd2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd36:	f023 010f 	bic.w	r1, r3, #15
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	430a      	orrs	r2, r1
 800fd44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a90      	ldr	r2, [pc, #576]	@ (800ff8c <UART_SetConfig+0x2e0>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d125      	bne.n	800fd9c <UART_SetConfig+0xf0>
 800fd50:	4b8f      	ldr	r3, [pc, #572]	@ (800ff90 <UART_SetConfig+0x2e4>)
 800fd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd56:	f003 0303 	and.w	r3, r3, #3
 800fd5a:	2b03      	cmp	r3, #3
 800fd5c:	d81a      	bhi.n	800fd94 <UART_SetConfig+0xe8>
 800fd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800fd64 <UART_SetConfig+0xb8>)
 800fd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd64:	0800fd75 	.word	0x0800fd75
 800fd68:	0800fd85 	.word	0x0800fd85
 800fd6c:	0800fd7d 	.word	0x0800fd7d
 800fd70:	0800fd8d 	.word	0x0800fd8d
 800fd74:	2301      	movs	r3, #1
 800fd76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd7a:	e116      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fd7c:	2302      	movs	r3, #2
 800fd7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd82:	e112      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fd84:	2304      	movs	r3, #4
 800fd86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd8a:	e10e      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fd8c:	2308      	movs	r3, #8
 800fd8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd92:	e10a      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fd94:	2310      	movs	r3, #16
 800fd96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd9a:	e106      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a7c      	ldr	r2, [pc, #496]	@ (800ff94 <UART_SetConfig+0x2e8>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d138      	bne.n	800fe18 <UART_SetConfig+0x16c>
 800fda6:	4b7a      	ldr	r3, [pc, #488]	@ (800ff90 <UART_SetConfig+0x2e4>)
 800fda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdac:	f003 030c 	and.w	r3, r3, #12
 800fdb0:	2b0c      	cmp	r3, #12
 800fdb2:	d82d      	bhi.n	800fe10 <UART_SetConfig+0x164>
 800fdb4:	a201      	add	r2, pc, #4	@ (adr r2, 800fdbc <UART_SetConfig+0x110>)
 800fdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdba:	bf00      	nop
 800fdbc:	0800fdf1 	.word	0x0800fdf1
 800fdc0:	0800fe11 	.word	0x0800fe11
 800fdc4:	0800fe11 	.word	0x0800fe11
 800fdc8:	0800fe11 	.word	0x0800fe11
 800fdcc:	0800fe01 	.word	0x0800fe01
 800fdd0:	0800fe11 	.word	0x0800fe11
 800fdd4:	0800fe11 	.word	0x0800fe11
 800fdd8:	0800fe11 	.word	0x0800fe11
 800fddc:	0800fdf9 	.word	0x0800fdf9
 800fde0:	0800fe11 	.word	0x0800fe11
 800fde4:	0800fe11 	.word	0x0800fe11
 800fde8:	0800fe11 	.word	0x0800fe11
 800fdec:	0800fe09 	.word	0x0800fe09
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fdf6:	e0d8      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fdfe:	e0d4      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fe00:	2304      	movs	r3, #4
 800fe02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe06:	e0d0      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fe08:	2308      	movs	r3, #8
 800fe0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe0e:	e0cc      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fe10:	2310      	movs	r3, #16
 800fe12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe16:	e0c8      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4a5e      	ldr	r2, [pc, #376]	@ (800ff98 <UART_SetConfig+0x2ec>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d125      	bne.n	800fe6e <UART_SetConfig+0x1c2>
 800fe22:	4b5b      	ldr	r3, [pc, #364]	@ (800ff90 <UART_SetConfig+0x2e4>)
 800fe24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fe2c:	2b30      	cmp	r3, #48	@ 0x30
 800fe2e:	d016      	beq.n	800fe5e <UART_SetConfig+0x1b2>
 800fe30:	2b30      	cmp	r3, #48	@ 0x30
 800fe32:	d818      	bhi.n	800fe66 <UART_SetConfig+0x1ba>
 800fe34:	2b20      	cmp	r3, #32
 800fe36:	d00a      	beq.n	800fe4e <UART_SetConfig+0x1a2>
 800fe38:	2b20      	cmp	r3, #32
 800fe3a:	d814      	bhi.n	800fe66 <UART_SetConfig+0x1ba>
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d002      	beq.n	800fe46 <UART_SetConfig+0x19a>
 800fe40:	2b10      	cmp	r3, #16
 800fe42:	d008      	beq.n	800fe56 <UART_SetConfig+0x1aa>
 800fe44:	e00f      	b.n	800fe66 <UART_SetConfig+0x1ba>
 800fe46:	2300      	movs	r3, #0
 800fe48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe4c:	e0ad      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fe4e:	2302      	movs	r3, #2
 800fe50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe54:	e0a9      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fe56:	2304      	movs	r3, #4
 800fe58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe5c:	e0a5      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fe5e:	2308      	movs	r3, #8
 800fe60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe64:	e0a1      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fe66:	2310      	movs	r3, #16
 800fe68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe6c:	e09d      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	4a4a      	ldr	r2, [pc, #296]	@ (800ff9c <UART_SetConfig+0x2f0>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d125      	bne.n	800fec4 <UART_SetConfig+0x218>
 800fe78:	4b45      	ldr	r3, [pc, #276]	@ (800ff90 <UART_SetConfig+0x2e4>)
 800fe7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fe82:	2bc0      	cmp	r3, #192	@ 0xc0
 800fe84:	d016      	beq.n	800feb4 <UART_SetConfig+0x208>
 800fe86:	2bc0      	cmp	r3, #192	@ 0xc0
 800fe88:	d818      	bhi.n	800febc <UART_SetConfig+0x210>
 800fe8a:	2b80      	cmp	r3, #128	@ 0x80
 800fe8c:	d00a      	beq.n	800fea4 <UART_SetConfig+0x1f8>
 800fe8e:	2b80      	cmp	r3, #128	@ 0x80
 800fe90:	d814      	bhi.n	800febc <UART_SetConfig+0x210>
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d002      	beq.n	800fe9c <UART_SetConfig+0x1f0>
 800fe96:	2b40      	cmp	r3, #64	@ 0x40
 800fe98:	d008      	beq.n	800feac <UART_SetConfig+0x200>
 800fe9a:	e00f      	b.n	800febc <UART_SetConfig+0x210>
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fea2:	e082      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fea4:	2302      	movs	r3, #2
 800fea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800feaa:	e07e      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800feac:	2304      	movs	r3, #4
 800feae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800feb2:	e07a      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800feb4:	2308      	movs	r3, #8
 800feb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800feba:	e076      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800febc:	2310      	movs	r3, #16
 800febe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fec2:	e072      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4a35      	ldr	r2, [pc, #212]	@ (800ffa0 <UART_SetConfig+0x2f4>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d12a      	bne.n	800ff24 <UART_SetConfig+0x278>
 800fece:	4b30      	ldr	r3, [pc, #192]	@ (800ff90 <UART_SetConfig+0x2e4>)
 800fed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fedc:	d01a      	beq.n	800ff14 <UART_SetConfig+0x268>
 800fede:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fee2:	d81b      	bhi.n	800ff1c <UART_SetConfig+0x270>
 800fee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fee8:	d00c      	beq.n	800ff04 <UART_SetConfig+0x258>
 800feea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800feee:	d815      	bhi.n	800ff1c <UART_SetConfig+0x270>
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d003      	beq.n	800fefc <UART_SetConfig+0x250>
 800fef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fef8:	d008      	beq.n	800ff0c <UART_SetConfig+0x260>
 800fefa:	e00f      	b.n	800ff1c <UART_SetConfig+0x270>
 800fefc:	2300      	movs	r3, #0
 800fefe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff02:	e052      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff04:	2302      	movs	r3, #2
 800ff06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff0a:	e04e      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff0c:	2304      	movs	r3, #4
 800ff0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff12:	e04a      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff14:	2308      	movs	r3, #8
 800ff16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff1a:	e046      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff1c:	2310      	movs	r3, #16
 800ff1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff22:	e042      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4a17      	ldr	r2, [pc, #92]	@ (800ff88 <UART_SetConfig+0x2dc>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d13a      	bne.n	800ffa4 <UART_SetConfig+0x2f8>
 800ff2e:	4b18      	ldr	r3, [pc, #96]	@ (800ff90 <UART_SetConfig+0x2e4>)
 800ff30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ff38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ff3c:	d01a      	beq.n	800ff74 <UART_SetConfig+0x2c8>
 800ff3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ff42:	d81b      	bhi.n	800ff7c <UART_SetConfig+0x2d0>
 800ff44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ff48:	d00c      	beq.n	800ff64 <UART_SetConfig+0x2b8>
 800ff4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ff4e:	d815      	bhi.n	800ff7c <UART_SetConfig+0x2d0>
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d003      	beq.n	800ff5c <UART_SetConfig+0x2b0>
 800ff54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ff58:	d008      	beq.n	800ff6c <UART_SetConfig+0x2c0>
 800ff5a:	e00f      	b.n	800ff7c <UART_SetConfig+0x2d0>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff62:	e022      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff64:	2302      	movs	r3, #2
 800ff66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff6a:	e01e      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff6c:	2304      	movs	r3, #4
 800ff6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff72:	e01a      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff74:	2308      	movs	r3, #8
 800ff76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff7a:	e016      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff7c:	2310      	movs	r3, #16
 800ff7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff82:	e012      	b.n	800ffaa <UART_SetConfig+0x2fe>
 800ff84:	cfff69f3 	.word	0xcfff69f3
 800ff88:	40008000 	.word	0x40008000
 800ff8c:	40013800 	.word	0x40013800
 800ff90:	40021000 	.word	0x40021000
 800ff94:	40004400 	.word	0x40004400
 800ff98:	40004800 	.word	0x40004800
 800ff9c:	40004c00 	.word	0x40004c00
 800ffa0:	40005000 	.word	0x40005000
 800ffa4:	2310      	movs	r3, #16
 800ffa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4aae      	ldr	r2, [pc, #696]	@ (8010268 <UART_SetConfig+0x5bc>)
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	f040 8097 	bne.w	80100e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ffb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ffba:	2b08      	cmp	r3, #8
 800ffbc:	d823      	bhi.n	8010006 <UART_SetConfig+0x35a>
 800ffbe:	a201      	add	r2, pc, #4	@ (adr r2, 800ffc4 <UART_SetConfig+0x318>)
 800ffc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc4:	0800ffe9 	.word	0x0800ffe9
 800ffc8:	08010007 	.word	0x08010007
 800ffcc:	0800fff1 	.word	0x0800fff1
 800ffd0:	08010007 	.word	0x08010007
 800ffd4:	0800fff7 	.word	0x0800fff7
 800ffd8:	08010007 	.word	0x08010007
 800ffdc:	08010007 	.word	0x08010007
 800ffe0:	08010007 	.word	0x08010007
 800ffe4:	0800ffff 	.word	0x0800ffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ffe8:	f7fd fcd4 	bl	800d994 <HAL_RCC_GetPCLK1Freq>
 800ffec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ffee:	e010      	b.n	8010012 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fff0:	4b9e      	ldr	r3, [pc, #632]	@ (801026c <UART_SetConfig+0x5c0>)
 800fff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fff4:	e00d      	b.n	8010012 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fff6:	f7fd fc5f 	bl	800d8b8 <HAL_RCC_GetSysClockFreq>
 800fffa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fffc:	e009      	b.n	8010012 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010004:	e005      	b.n	8010012 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010006:	2300      	movs	r3, #0
 8010008:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801000a:	2301      	movs	r3, #1
 801000c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010010:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 8130 	beq.w	801027a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801001e:	4a94      	ldr	r2, [pc, #592]	@ (8010270 <UART_SetConfig+0x5c4>)
 8010020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010024:	461a      	mov	r2, r3
 8010026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010028:	fbb3 f3f2 	udiv	r3, r3, r2
 801002c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	4613      	mov	r3, r2
 8010034:	005b      	lsls	r3, r3, #1
 8010036:	4413      	add	r3, r2
 8010038:	69ba      	ldr	r2, [r7, #24]
 801003a:	429a      	cmp	r2, r3
 801003c:	d305      	bcc.n	801004a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010044:	69ba      	ldr	r2, [r7, #24]
 8010046:	429a      	cmp	r2, r3
 8010048:	d903      	bls.n	8010052 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801004a:	2301      	movs	r3, #1
 801004c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010050:	e113      	b.n	801027a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010054:	2200      	movs	r2, #0
 8010056:	60bb      	str	r3, [r7, #8]
 8010058:	60fa      	str	r2, [r7, #12]
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801005e:	4a84      	ldr	r2, [pc, #528]	@ (8010270 <UART_SetConfig+0x5c4>)
 8010060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010064:	b29b      	uxth	r3, r3
 8010066:	2200      	movs	r2, #0
 8010068:	603b      	str	r3, [r7, #0]
 801006a:	607a      	str	r2, [r7, #4]
 801006c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010070:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010074:	f7f0 fe30 	bl	8000cd8 <__aeabi_uldivmod>
 8010078:	4602      	mov	r2, r0
 801007a:	460b      	mov	r3, r1
 801007c:	4610      	mov	r0, r2
 801007e:	4619      	mov	r1, r3
 8010080:	f04f 0200 	mov.w	r2, #0
 8010084:	f04f 0300 	mov.w	r3, #0
 8010088:	020b      	lsls	r3, r1, #8
 801008a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801008e:	0202      	lsls	r2, r0, #8
 8010090:	6979      	ldr	r1, [r7, #20]
 8010092:	6849      	ldr	r1, [r1, #4]
 8010094:	0849      	lsrs	r1, r1, #1
 8010096:	2000      	movs	r0, #0
 8010098:	460c      	mov	r4, r1
 801009a:	4605      	mov	r5, r0
 801009c:	eb12 0804 	adds.w	r8, r2, r4
 80100a0:	eb43 0905 	adc.w	r9, r3, r5
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	469a      	mov	sl, r3
 80100ac:	4693      	mov	fp, r2
 80100ae:	4652      	mov	r2, sl
 80100b0:	465b      	mov	r3, fp
 80100b2:	4640      	mov	r0, r8
 80100b4:	4649      	mov	r1, r9
 80100b6:	f7f0 fe0f 	bl	8000cd8 <__aeabi_uldivmod>
 80100ba:	4602      	mov	r2, r0
 80100bc:	460b      	mov	r3, r1
 80100be:	4613      	mov	r3, r2
 80100c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80100c2:	6a3b      	ldr	r3, [r7, #32]
 80100c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80100c8:	d308      	bcc.n	80100dc <UART_SetConfig+0x430>
 80100ca:	6a3b      	ldr	r3, [r7, #32]
 80100cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80100d0:	d204      	bcs.n	80100dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	6a3a      	ldr	r2, [r7, #32]
 80100d8:	60da      	str	r2, [r3, #12]
 80100da:	e0ce      	b.n	801027a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80100dc:	2301      	movs	r3, #1
 80100de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80100e2:	e0ca      	b.n	801027a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	69db      	ldr	r3, [r3, #28]
 80100e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80100ec:	d166      	bne.n	80101bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80100ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80100f2:	2b08      	cmp	r3, #8
 80100f4:	d827      	bhi.n	8010146 <UART_SetConfig+0x49a>
 80100f6:	a201      	add	r2, pc, #4	@ (adr r2, 80100fc <UART_SetConfig+0x450>)
 80100f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fc:	08010121 	.word	0x08010121
 8010100:	08010129 	.word	0x08010129
 8010104:	08010131 	.word	0x08010131
 8010108:	08010147 	.word	0x08010147
 801010c:	08010137 	.word	0x08010137
 8010110:	08010147 	.word	0x08010147
 8010114:	08010147 	.word	0x08010147
 8010118:	08010147 	.word	0x08010147
 801011c:	0801013f 	.word	0x0801013f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010120:	f7fd fc38 	bl	800d994 <HAL_RCC_GetPCLK1Freq>
 8010124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010126:	e014      	b.n	8010152 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010128:	f7fd fc4a 	bl	800d9c0 <HAL_RCC_GetPCLK2Freq>
 801012c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801012e:	e010      	b.n	8010152 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010130:	4b4e      	ldr	r3, [pc, #312]	@ (801026c <UART_SetConfig+0x5c0>)
 8010132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010134:	e00d      	b.n	8010152 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010136:	f7fd fbbf 	bl	800d8b8 <HAL_RCC_GetSysClockFreq>
 801013a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801013c:	e009      	b.n	8010152 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801013e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010144:	e005      	b.n	8010152 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010146:	2300      	movs	r3, #0
 8010148:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801014a:	2301      	movs	r3, #1
 801014c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010150:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010154:	2b00      	cmp	r3, #0
 8010156:	f000 8090 	beq.w	801027a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801015e:	4a44      	ldr	r2, [pc, #272]	@ (8010270 <UART_SetConfig+0x5c4>)
 8010160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010164:	461a      	mov	r2, r3
 8010166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010168:	fbb3 f3f2 	udiv	r3, r3, r2
 801016c:	005a      	lsls	r2, r3, #1
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	085b      	lsrs	r3, r3, #1
 8010174:	441a      	add	r2, r3
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	fbb2 f3f3 	udiv	r3, r2, r3
 801017e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010180:	6a3b      	ldr	r3, [r7, #32]
 8010182:	2b0f      	cmp	r3, #15
 8010184:	d916      	bls.n	80101b4 <UART_SetConfig+0x508>
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801018c:	d212      	bcs.n	80101b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801018e:	6a3b      	ldr	r3, [r7, #32]
 8010190:	b29b      	uxth	r3, r3
 8010192:	f023 030f 	bic.w	r3, r3, #15
 8010196:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010198:	6a3b      	ldr	r3, [r7, #32]
 801019a:	085b      	lsrs	r3, r3, #1
 801019c:	b29b      	uxth	r3, r3
 801019e:	f003 0307 	and.w	r3, r3, #7
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	8bfb      	ldrh	r3, [r7, #30]
 80101a6:	4313      	orrs	r3, r2
 80101a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	8bfa      	ldrh	r2, [r7, #30]
 80101b0:	60da      	str	r2, [r3, #12]
 80101b2:	e062      	b.n	801027a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80101b4:	2301      	movs	r3, #1
 80101b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80101ba:	e05e      	b.n	801027a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80101bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80101c0:	2b08      	cmp	r3, #8
 80101c2:	d828      	bhi.n	8010216 <UART_SetConfig+0x56a>
 80101c4:	a201      	add	r2, pc, #4	@ (adr r2, 80101cc <UART_SetConfig+0x520>)
 80101c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ca:	bf00      	nop
 80101cc:	080101f1 	.word	0x080101f1
 80101d0:	080101f9 	.word	0x080101f9
 80101d4:	08010201 	.word	0x08010201
 80101d8:	08010217 	.word	0x08010217
 80101dc:	08010207 	.word	0x08010207
 80101e0:	08010217 	.word	0x08010217
 80101e4:	08010217 	.word	0x08010217
 80101e8:	08010217 	.word	0x08010217
 80101ec:	0801020f 	.word	0x0801020f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80101f0:	f7fd fbd0 	bl	800d994 <HAL_RCC_GetPCLK1Freq>
 80101f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80101f6:	e014      	b.n	8010222 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80101f8:	f7fd fbe2 	bl	800d9c0 <HAL_RCC_GetPCLK2Freq>
 80101fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80101fe:	e010      	b.n	8010222 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010200:	4b1a      	ldr	r3, [pc, #104]	@ (801026c <UART_SetConfig+0x5c0>)
 8010202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010204:	e00d      	b.n	8010222 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010206:	f7fd fb57 	bl	800d8b8 <HAL_RCC_GetSysClockFreq>
 801020a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801020c:	e009      	b.n	8010222 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801020e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010214:	e005      	b.n	8010222 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010216:	2300      	movs	r3, #0
 8010218:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801021a:	2301      	movs	r3, #1
 801021c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010220:	bf00      	nop
    }

    if (pclk != 0U)
 8010222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010224:	2b00      	cmp	r3, #0
 8010226:	d028      	beq.n	801027a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801022c:	4a10      	ldr	r2, [pc, #64]	@ (8010270 <UART_SetConfig+0x5c4>)
 801022e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010232:	461a      	mov	r2, r3
 8010234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010236:	fbb3 f2f2 	udiv	r2, r3, r2
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	085b      	lsrs	r3, r3, #1
 8010240:	441a      	add	r2, r3
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	fbb2 f3f3 	udiv	r3, r2, r3
 801024a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801024c:	6a3b      	ldr	r3, [r7, #32]
 801024e:	2b0f      	cmp	r3, #15
 8010250:	d910      	bls.n	8010274 <UART_SetConfig+0x5c8>
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010258:	d20c      	bcs.n	8010274 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801025a:	6a3b      	ldr	r3, [r7, #32]
 801025c:	b29a      	uxth	r2, r3
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	60da      	str	r2, [r3, #12]
 8010264:	e009      	b.n	801027a <UART_SetConfig+0x5ce>
 8010266:	bf00      	nop
 8010268:	40008000 	.word	0x40008000
 801026c:	00f42400 	.word	0x00f42400
 8010270:	080189a8 	.word	0x080189a8
      }
      else
      {
        ret = HAL_ERROR;
 8010274:	2301      	movs	r3, #1
 8010276:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	2201      	movs	r2, #1
 801027e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	2201      	movs	r2, #1
 8010286:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	2200      	movs	r2, #0
 801028e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	2200      	movs	r2, #0
 8010294:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010296:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801029a:	4618      	mov	r0, r3
 801029c:	3730      	adds	r7, #48	@ 0x30
 801029e:	46bd      	mov	sp, r7
 80102a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080102a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102b0:	f003 0308 	and.w	r3, r3, #8
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d00a      	beq.n	80102ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	430a      	orrs	r2, r1
 80102cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102d2:	f003 0301 	and.w	r3, r3, #1
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00a      	beq.n	80102f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	430a      	orrs	r2, r1
 80102ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102f4:	f003 0302 	and.w	r3, r3, #2
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00a      	beq.n	8010312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	430a      	orrs	r2, r1
 8010310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010316:	f003 0304 	and.w	r3, r3, #4
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00a      	beq.n	8010334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	430a      	orrs	r2, r1
 8010332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010338:	f003 0310 	and.w	r3, r3, #16
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00a      	beq.n	8010356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	689b      	ldr	r3, [r3, #8]
 8010346:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	430a      	orrs	r2, r1
 8010354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801035a:	f003 0320 	and.w	r3, r3, #32
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00a      	beq.n	8010378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	689b      	ldr	r3, [r3, #8]
 8010368:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	430a      	orrs	r2, r1
 8010376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801037c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010380:	2b00      	cmp	r3, #0
 8010382:	d01a      	beq.n	80103ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	430a      	orrs	r2, r1
 8010398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801039e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80103a2:	d10a      	bne.n	80103ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	430a      	orrs	r2, r1
 80103b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00a      	beq.n	80103dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	430a      	orrs	r2, r1
 80103da:	605a      	str	r2, [r3, #4]
  }
}
 80103dc:	bf00      	nop
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b098      	sub	sp, #96	@ 0x60
 80103ec:	af02      	add	r7, sp, #8
 80103ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2200      	movs	r2, #0
 80103f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80103f8:	f7f9 fe38 	bl	800a06c <HAL_GetTick>
 80103fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f003 0308 	and.w	r3, r3, #8
 8010408:	2b08      	cmp	r3, #8
 801040a:	d12f      	bne.n	801046c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801040c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010414:	2200      	movs	r2, #0
 8010416:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 f88e 	bl	801053c <UART_WaitOnFlagUntilTimeout>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d022      	beq.n	801046c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801042e:	e853 3f00 	ldrex	r3, [r3]
 8010432:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801043a:	653b      	str	r3, [r7, #80]	@ 0x50
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	461a      	mov	r2, r3
 8010442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010444:	647b      	str	r3, [r7, #68]	@ 0x44
 8010446:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801044a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801044c:	e841 2300 	strex	r3, r2, [r1]
 8010450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1e6      	bne.n	8010426 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2220      	movs	r2, #32
 801045c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2200      	movs	r2, #0
 8010464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010468:	2303      	movs	r3, #3
 801046a:	e063      	b.n	8010534 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f003 0304 	and.w	r3, r3, #4
 8010476:	2b04      	cmp	r3, #4
 8010478:	d149      	bne.n	801050e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801047a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010482:	2200      	movs	r2, #0
 8010484:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 f857 	bl	801053c <UART_WaitOnFlagUntilTimeout>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d03c      	beq.n	801050e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801049a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801049c:	e853 3f00 	ldrex	r3, [r3]
 80104a0:	623b      	str	r3, [r7, #32]
   return(result);
 80104a2:	6a3b      	ldr	r3, [r7, #32]
 80104a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80104a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	461a      	mov	r2, r3
 80104b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80104b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80104b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104ba:	e841 2300 	strex	r3, r2, [r1]
 80104be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80104c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d1e6      	bne.n	8010494 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	3308      	adds	r3, #8
 80104cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	e853 3f00 	ldrex	r3, [r3]
 80104d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f023 0301 	bic.w	r3, r3, #1
 80104dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	3308      	adds	r3, #8
 80104e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80104e6:	61fa      	str	r2, [r7, #28]
 80104e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ea:	69b9      	ldr	r1, [r7, #24]
 80104ec:	69fa      	ldr	r2, [r7, #28]
 80104ee:	e841 2300 	strex	r3, r2, [r1]
 80104f2:	617b      	str	r3, [r7, #20]
   return(result);
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1e5      	bne.n	80104c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2220      	movs	r2, #32
 80104fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2200      	movs	r2, #0
 8010506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801050a:	2303      	movs	r3, #3
 801050c:	e012      	b.n	8010534 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2220      	movs	r2, #32
 8010512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2220      	movs	r2, #32
 801051a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2200      	movs	r2, #0
 801052e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010532:	2300      	movs	r3, #0
}
 8010534:	4618      	mov	r0, r3
 8010536:	3758      	adds	r7, #88	@ 0x58
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	603b      	str	r3, [r7, #0]
 8010548:	4613      	mov	r3, r2
 801054a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801054c:	e04f      	b.n	80105ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010554:	d04b      	beq.n	80105ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010556:	f7f9 fd89 	bl	800a06c <HAL_GetTick>
 801055a:	4602      	mov	r2, r0
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	1ad3      	subs	r3, r2, r3
 8010560:	69ba      	ldr	r2, [r7, #24]
 8010562:	429a      	cmp	r2, r3
 8010564:	d302      	bcc.n	801056c <UART_WaitOnFlagUntilTimeout+0x30>
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d101      	bne.n	8010570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801056c:	2303      	movs	r3, #3
 801056e:	e04e      	b.n	801060e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f003 0304 	and.w	r3, r3, #4
 801057a:	2b00      	cmp	r3, #0
 801057c:	d037      	beq.n	80105ee <UART_WaitOnFlagUntilTimeout+0xb2>
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	2b80      	cmp	r3, #128	@ 0x80
 8010582:	d034      	beq.n	80105ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	2b40      	cmp	r3, #64	@ 0x40
 8010588:	d031      	beq.n	80105ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	69db      	ldr	r3, [r3, #28]
 8010590:	f003 0308 	and.w	r3, r3, #8
 8010594:	2b08      	cmp	r3, #8
 8010596:	d110      	bne.n	80105ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2208      	movs	r2, #8
 801059e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f000 f838 	bl	8010616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2208      	movs	r2, #8
 80105aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2200      	movs	r2, #0
 80105b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80105b6:	2301      	movs	r3, #1
 80105b8:	e029      	b.n	801060e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	69db      	ldr	r3, [r3, #28]
 80105c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80105c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105c8:	d111      	bne.n	80105ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80105d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80105d4:	68f8      	ldr	r0, [r7, #12]
 80105d6:	f000 f81e 	bl	8010616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2220      	movs	r2, #32
 80105de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2200      	movs	r2, #0
 80105e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80105ea:	2303      	movs	r3, #3
 80105ec:	e00f      	b.n	801060e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	69da      	ldr	r2, [r3, #28]
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	4013      	ands	r3, r2
 80105f8:	68ba      	ldr	r2, [r7, #8]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	bf0c      	ite	eq
 80105fe:	2301      	moveq	r3, #1
 8010600:	2300      	movne	r3, #0
 8010602:	b2db      	uxtb	r3, r3
 8010604:	461a      	mov	r2, r3
 8010606:	79fb      	ldrb	r3, [r7, #7]
 8010608:	429a      	cmp	r2, r3
 801060a:	d0a0      	beq.n	801054e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801060c:	2300      	movs	r3, #0
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010616:	b480      	push	{r7}
 8010618:	b095      	sub	sp, #84	@ 0x54
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010626:	e853 3f00 	ldrex	r3, [r3]
 801062a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801062c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801062e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	461a      	mov	r2, r3
 801063a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801063c:	643b      	str	r3, [r7, #64]	@ 0x40
 801063e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010640:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010642:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010644:	e841 2300 	strex	r3, r2, [r1]
 8010648:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801064a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1e6      	bne.n	801061e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	3308      	adds	r3, #8
 8010656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010658:	6a3b      	ldr	r3, [r7, #32]
 801065a:	e853 3f00 	ldrex	r3, [r3]
 801065e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010666:	f023 0301 	bic.w	r3, r3, #1
 801066a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	3308      	adds	r3, #8
 8010672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010674:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010676:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801067a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801067c:	e841 2300 	strex	r3, r2, [r1]
 8010680:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010684:	2b00      	cmp	r3, #0
 8010686:	d1e3      	bne.n	8010650 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801068c:	2b01      	cmp	r3, #1
 801068e:	d118      	bne.n	80106c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	e853 3f00 	ldrex	r3, [r3]
 801069c:	60bb      	str	r3, [r7, #8]
   return(result);
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	f023 0310 	bic.w	r3, r3, #16
 80106a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	461a      	mov	r2, r3
 80106ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106ae:	61bb      	str	r3, [r7, #24]
 80106b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b2:	6979      	ldr	r1, [r7, #20]
 80106b4:	69ba      	ldr	r2, [r7, #24]
 80106b6:	e841 2300 	strex	r3, r2, [r1]
 80106ba:	613b      	str	r3, [r7, #16]
   return(result);
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1e6      	bne.n	8010690 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2220      	movs	r2, #32
 80106c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2200      	movs	r2, #0
 80106ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80106d6:	bf00      	nop
 80106d8:	3754      	adds	r7, #84	@ 0x54
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80106e2:	b580      	push	{r7, lr}
 80106e4:	b084      	sub	sp, #16
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2200      	movs	r2, #0
 80106f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2200      	movs	r2, #0
 80106fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f7ff fabd 	bl	800fc80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010706:	bf00      	nop
 8010708:	3710      	adds	r7, #16
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801070e:	b580      	push	{r7, lr}
 8010710:	b088      	sub	sp, #32
 8010712:	af00      	add	r7, sp, #0
 8010714:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	e853 3f00 	ldrex	r3, [r3]
 8010722:	60bb      	str	r3, [r7, #8]
   return(result);
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801072a:	61fb      	str	r3, [r7, #28]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	461a      	mov	r2, r3
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	61bb      	str	r3, [r7, #24]
 8010736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010738:	6979      	ldr	r1, [r7, #20]
 801073a:	69ba      	ldr	r2, [r7, #24]
 801073c:	e841 2300 	strex	r3, r2, [r1]
 8010740:	613b      	str	r3, [r7, #16]
   return(result);
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d1e6      	bne.n	8010716 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2220      	movs	r2, #32
 801074c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2200      	movs	r2, #0
 8010754:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7ff fa88 	bl	800fc6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801075c:	bf00      	nop
 801075e:	3720      	adds	r7, #32
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801076c:	bf00      	nop
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010780:	bf00      	nop
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010794:	bf00      	nop
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b085      	sub	sp, #20
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d101      	bne.n	80107b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80107b2:	2302      	movs	r3, #2
 80107b4:	e027      	b.n	8010806 <HAL_UARTEx_DisableFifoMode+0x66>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2201      	movs	r2, #1
 80107ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2224      	movs	r2, #36	@ 0x24
 80107c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	f022 0201 	bic.w	r2, r2, #1
 80107dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80107e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2200      	movs	r2, #0
 80107ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	68fa      	ldr	r2, [r7, #12]
 80107f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2220      	movs	r2, #32
 80107f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2200      	movs	r2, #0
 8010800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010804:	2300      	movs	r3, #0
}
 8010806:	4618      	mov	r0, r3
 8010808:	3714      	adds	r7, #20
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b084      	sub	sp, #16
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010822:	2b01      	cmp	r3, #1
 8010824:	d101      	bne.n	801082a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010826:	2302      	movs	r3, #2
 8010828:	e02d      	b.n	8010886 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2224      	movs	r2, #36	@ 0x24
 8010836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f022 0201 	bic.w	r2, r2, #1
 8010850:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	689b      	ldr	r3, [r3, #8]
 8010858:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	430a      	orrs	r2, r1
 8010864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 f850 	bl	801090c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68fa      	ldr	r2, [r7, #12]
 8010872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2220      	movs	r2, #32
 8010878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b084      	sub	sp, #16
 8010892:	af00      	add	r7, sp, #0
 8010894:	6078      	str	r0, [r7, #4]
 8010896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801089e:	2b01      	cmp	r3, #1
 80108a0:	d101      	bne.n	80108a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80108a2:	2302      	movs	r3, #2
 80108a4:	e02d      	b.n	8010902 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2201      	movs	r2, #1
 80108aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2224      	movs	r2, #36	@ 0x24
 80108b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f022 0201 	bic.w	r2, r2, #1
 80108cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	683a      	ldr	r2, [r7, #0]
 80108de:	430a      	orrs	r2, r1
 80108e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 f812 	bl	801090c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	68fa      	ldr	r2, [r7, #12]
 80108ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2220      	movs	r2, #32
 80108f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3710      	adds	r7, #16
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
	...

0801090c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801090c:	b480      	push	{r7}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010918:	2b00      	cmp	r3, #0
 801091a:	d108      	bne.n	801092e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2201      	movs	r2, #1
 8010920:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2201      	movs	r2, #1
 8010928:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801092c:	e031      	b.n	8010992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801092e:	2308      	movs	r3, #8
 8010930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010932:	2308      	movs	r3, #8
 8010934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	689b      	ldr	r3, [r3, #8]
 801093c:	0e5b      	lsrs	r3, r3, #25
 801093e:	b2db      	uxtb	r3, r3
 8010940:	f003 0307 	and.w	r3, r3, #7
 8010944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	0f5b      	lsrs	r3, r3, #29
 801094e:	b2db      	uxtb	r3, r3
 8010950:	f003 0307 	and.w	r3, r3, #7
 8010954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010956:	7bbb      	ldrb	r3, [r7, #14]
 8010958:	7b3a      	ldrb	r2, [r7, #12]
 801095a:	4911      	ldr	r1, [pc, #68]	@ (80109a0 <UARTEx_SetNbDataToProcess+0x94>)
 801095c:	5c8a      	ldrb	r2, [r1, r2]
 801095e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010962:	7b3a      	ldrb	r2, [r7, #12]
 8010964:	490f      	ldr	r1, [pc, #60]	@ (80109a4 <UARTEx_SetNbDataToProcess+0x98>)
 8010966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010968:	fb93 f3f2 	sdiv	r3, r3, r2
 801096c:	b29a      	uxth	r2, r3
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010974:	7bfb      	ldrb	r3, [r7, #15]
 8010976:	7b7a      	ldrb	r2, [r7, #13]
 8010978:	4909      	ldr	r1, [pc, #36]	@ (80109a0 <UARTEx_SetNbDataToProcess+0x94>)
 801097a:	5c8a      	ldrb	r2, [r1, r2]
 801097c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010980:	7b7a      	ldrb	r2, [r7, #13]
 8010982:	4908      	ldr	r1, [pc, #32]	@ (80109a4 <UARTEx_SetNbDataToProcess+0x98>)
 8010984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010986:	fb93 f3f2 	sdiv	r3, r3, r2
 801098a:	b29a      	uxth	r2, r3
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010992:	bf00      	nop
 8010994:	3714      	adds	r7, #20
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr
 801099e:	bf00      	nop
 80109a0:	080189c0 	.word	0x080189c0
 80109a4:	080189c8 	.word	0x080189c8

080109a8 <_ZN17AbstractAllocatorD1Ev>:
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	4a04      	ldr	r2, [pc, #16]	@ (80109c4 <_ZN17AbstractAllocatorD1Ev+0x1c>)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	601a      	str	r2, [r3, #0]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr
 80109c4:	08018954 	.word	0x08018954

080109c8 <_ZN17AbstractAllocatorD0Ev>:
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7ff ffe9 	bl	80109a8 <_ZN17AbstractAllocatorD1Ev>
 80109d6:	2108      	movs	r1, #8
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f002 fe66 	bl	80136aa <_ZdlPvj>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include <cyphal/allocators/sys/sys_allocator.h>
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f002 feb1 	bl	801375c <malloc>
 80109fa:	4603      	mov	r3, r0
 80109fc:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d105      	bne.n	8010a10 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	3310      	adds	r3, #16
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7f6 fad8 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 8010a10:	697b      	ldr	r3, [r7, #20]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3718      	adds	r7, #24
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 8010a1a:	b580      	push	{r7, lr}
 8010a1c:	b084      	sub	sp, #16
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	60f8      	str	r0, [r7, #12]
 8010a22:	60b9      	str	r1, [r7, #8]
 8010a24:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f002 fea0 	bl	801376c <free>
}
 8010a2c:	bf00      	nop
 8010a2e:	3710      	adds	r7, #16
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	4a05      	ldr	r2, [pc, #20]	@ (8010a54 <_ZN15SystemAllocatorD1Ev+0x20>)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	601a      	str	r2, [r3, #0]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7ff ffaf 	bl	80109a8 <_ZN17AbstractAllocatorD1Ev>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	080189d8 	.word	0x080189d8

08010a58 <_ZN15SystemAllocatorD0Ev>:
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7ff ffe7 	bl	8010a34 <_ZN15SystemAllocatorD1Ev>
 8010a66:	2108      	movs	r1, #8
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f002 fe1e 	bl	80136aa <_ZdlPvj>
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4618      	mov	r0, r3
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 8010a78:	b590      	push	{r4, r7, lr}
 8010a7a:	b08b      	sub	sp, #44	@ 0x2c
 8010a7c:	af04      	add	r7, sp, #16
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	3308      	adds	r3, #8
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f000 f863 	bl	8010b54 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010a8e:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 8010a90:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	3308      	adds	r3, #8
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f000 f85b 	bl	8010b54 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010a9e:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 8010aa0:	f103 0120 	add.w	r1, r3, #32
 8010aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aa6:	9302      	str	r3, [sp, #8]
 8010aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aaa:	9301      	str	r3, [sp, #4]
 8010aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f002 fb51 	bl	801315c <canardTxPush>
 8010aba:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	f113 0f03 	cmn.w	r3, #3
 8010ac2:	d106      	bne.n	8010ad2 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	3310      	adds	r3, #16
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7f6 fa78 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 8010ad0:	e008      	b.n	8010ae4 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	da05      	bge.n	8010ae4 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	3310      	adds	r3, #16
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7f6 fa6e 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8010ae4:	371c      	adds	r7, #28
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd90      	pop	{r4, r7, pc}
	...

08010aec <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 8010aec:	b590      	push	{r4, r7, lr}
 8010aee:	b089      	sub	sp, #36	@ 0x24
 8010af0:	af04      	add	r7, sp, #16
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	607a      	str	r2, [r7, #4]
 8010af6:	461a      	mov	r2, r3
 8010af8:	460b      	mov	r3, r1
 8010afa:	817b      	strh	r3, [r7, #10]
 8010afc:	4613      	mov	r3, r2
 8010afe:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	3308      	adds	r3, #8
 8010b04:	4618      	mov	r0, r3
 8010b06:	f000 f825 	bl	8010b54 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010b0a:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 8010b0c:	f103 0020 	add.w	r0, r3, #32
 8010b10:	897c      	ldrh	r4, [r7, #10]
 8010b12:	7a79      	ldrb	r1, [r7, #9]
 8010b14:	6a3b      	ldr	r3, [r7, #32]
 8010b16:	9302      	str	r3, [sp, #8]
 8010b18:	4a0d      	ldr	r2, [pc, #52]	@ (8010b50 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 8010b1a:	f04f 0300 	mov.w	r3, #0
 8010b1e:	e9cd 2300 	strd	r2, r3, [sp]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	4622      	mov	r2, r4
 8010b26:	f002 fc69 	bl	80133fc <canardRxSubscribe>
 8010b2a:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	bf14      	ite	ne
 8010b30:	2301      	movne	r3, #1
 8010b32:	2300      	moveq	r3, #0
 8010b34:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d005      	beq.n	8010b46 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	3310      	adds	r3, #16
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7f6 fa3d 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8010b46:	bf00      	nop
 8010b48:	3714      	adds	r7, #20
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd90      	pop	{r4, r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	001e8480 	.word	0x001e8480

08010b54 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
	return get();
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f000 f805 	bl	8010b6c <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 8010b62:	4603      	mov	r3, r0
      }
 8010b64:	4618      	mov	r0, r3
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	4618      	mov	r0, r3
 8010b78:	f000 f805 	bl	8010b86 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b082      	sub	sp, #8
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	4618      	mov	r0, r3
 8010b92:	f000 f806 	bl	8010ba2 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010b96:	4603      	mov	r3, r0
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3708      	adds	r7, #8
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b082      	sub	sp, #8
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 f805 	bl	8010bbc <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3708      	adds	r7, #8
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 f805 	bl	8010bd4 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3708      	adds	r7, #8
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	4618      	mov	r0, r3
 8010be0:	f000 f805 	bl	8010bee <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 8010be4:	4603      	mov	r3, r0
 8010be6:	4618      	mov	r0, r3
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8010bee:	b480      	push	{r7}
 8010bf0:	b083      	sub	sp, #12
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	370c      	adds	r7, #12
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	0c1b      	lsrs	r3, r3, #16
 8010c10:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 8010c12:	7bfb      	ldrb	r3, [r7, #15]
 8010c14:	2b08      	cmp	r3, #8
 8010c16:	d801      	bhi.n	8010c1c <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 8010c18:	7bfb      	ldrb	r3, [r7, #15]
 8010c1a:	e009      	b.n	8010c30 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 8010c1c:	7bfb      	ldrb	r3, [r7, #15]
 8010c1e:	2b0c      	cmp	r3, #12
 8010c20:	d803      	bhi.n	8010c2a <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 8010c22:	7bfb      	ldrb	r3, [r7, #15]
 8010c24:	3b06      	subs	r3, #6
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	e002      	b.n	8010c30 <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 8010c2a:	7bfb      	ldrb	r3, [r7, #15]
 8010c2c:	3b0b      	subs	r3, #11
 8010c2e:	011b      	lsls	r3, r3, #4
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3714      	adds	r7, #20
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 8010c3c:	f1a0 0308 	sub.w	r3, r0, #8
 8010c40:	4a07      	ldr	r2, [pc, #28]	@ (8010c60 <_ZL12delay_cyclest+0x24>)
 8010c42:	fb82 1203 	smull	r1, r2, r2, r3
 8010c46:	17db      	asrs	r3, r3, #31
 8010c48:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 8010c4c:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8010c50:	d004      	beq.n	8010c5c <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 8010c52:	bf00      	nop
    while (real_cycles--) {
 8010c54:	3b01      	subs	r3, #1
 8010c56:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8010c5a:	d1fa      	bne.n	8010c52 <_ZL12delay_cyclest+0x16>
    }
}
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	66666667 	.word	0x66666667

08010c64 <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include <cyphal/providers/FDCAN_generic.h>

uint32_t G4CAN::len_to_dlc(size_t len) {
 8010c64:	b480      	push	{r7}
 8010c66:	b083      	sub	sp, #12
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 8010c6e:	4a05      	ldr	r2, [pc, #20]	@ (8010c84 <_ZN5G4CAN10len_to_dlcEj+0x20>)
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	370c      	adds	r7, #12
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	080189e8 	.word	0x080189e8

08010c88 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 8010c92:	6838      	ldr	r0, [r7, #0]
 8010c94:	f7ff ffb6 	bl	8010c04 <_Z16fdcan_dlc_to_lenm>
 8010c98:	4603      	mov	r3, r0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b086      	sub	sp, #24
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 8010caa:	e017      	b.n	8010cdc <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	330c      	adds	r3, #12
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	f107 0208 	add.w	r2, r7, #8
 8010cb8:	4611      	mov	r1, r2
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	4798      	blx	r3
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
 8010cc4:	f083 0301 	eor.w	r3, r3, #1
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d115      	bne.n	8010cfa <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f107 0208 	add.w	r2, r7, #8
 8010cd4:	4611      	mov	r1, r2
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f000 f904 	bl	8010ee4 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ce0:	2140      	movs	r1, #64	@ 0x40
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7fa f924 	bl	800af30 <HAL_FDCAN_GetRxFifoFillLevel>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	bf14      	ite	ne
 8010cee:	2301      	movne	r3, #1
 8010cf0:	2300      	moveq	r3, #0
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d1d9      	bne.n	8010cac <_ZN5G4CAN8can_loopEv+0xa>
 8010cf8:	e000      	b.n	8010cfc <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 8010cfa:	bf00      	nop
    }

    process_canard_tx();
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f000 f944 	bl	8010f8c <_ZN19AbstractCANProvider17process_canard_txEv>
}
 8010d04:	bf00      	nop
 8010d06:	3718      	adds	r7, #24
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};
bool G4CAN::read_frame(CanardFrame* rxf) {
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b08e      	sub	sp, #56	@ 0x38
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
    uint32_t rx_fifo = -1;
 8010d16:	f04f 33ff 	mov.w	r3, #4294967295
 8010d1a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d20:	2140      	movs	r1, #64	@ 0x40
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7fa f904 	bl	800af30 <HAL_FDCAN_GetRxFifoFillLevel>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	bf14      	ite	ne
 8010d2e:	2301      	movne	r3, #1
 8010d30:	2300      	moveq	r3, #0
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 8010d38:	2340      	movs	r3, #64	@ 0x40
 8010d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d3c:	e00f      	b.n	8010d5e <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d42:	2141      	movs	r1, #65	@ 0x41
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7fa f8f3 	bl	800af30 <HAL_FDCAN_GetRxFifoFillLevel>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	bf14      	ite	ne
 8010d50:	2301      	movne	r3, #1
 8010d52:	2300      	moveq	r3, #0
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 8010d5a:	2341      	movs	r3, #65	@ 0x41
 8010d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 8010d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d64:	d101      	bne.n	8010d6a <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 8010d66:	2300      	movs	r3, #0
 8010d68:	e02e      	b.n	8010dc8 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 8010d6a:	f107 030c 	add.w	r3, r7, #12
 8010d6e:	2228      	movs	r2, #40	@ 0x28
 8010d70:	2100      	movs	r1, #0
 8010d72:	4618      	mov	r0, r3
 8010d74:	f003 fd7d 	bl	8014872 <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010d7c:	f107 020c 	add.w	r2, r7, #12
 8010d80:	4b13      	ldr	r3, [pc, #76]	@ (8010dd0 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010d82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010d84:	f7f9 ffcc 	bl	800ad20 <HAL_FDCAN_GetRxMessage>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	bf14      	ite	ne
 8010d8e:	2301      	movne	r3, #1
 8010d90:	2300      	moveq	r3, #0
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d005      	beq.n	8010da4 <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d9c:	3310      	adds	r3, #16
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7f6 f90e 	bl	8006fc0 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	3304      	adds	r3, #4
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	69ba      	ldr	r2, [r7, #24]
 8010db4:	4611      	mov	r1, r2
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	4798      	blx	r3
 8010dba:	4602      	mov	r2, r0
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	4a03      	ldr	r2, [pc, #12]	@ (8010dd0 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010dc4:	609a      	str	r2, [r3, #8]
    return true;
 8010dc6:	2301      	movs	r3, #1
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3738      	adds	r7, #56	@ 0x38
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	20000a00 	.word	0x20000a00

08010dd4 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b08c      	sub	sp, #48	@ 0x30
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	6a1b      	ldr	r3, [r3, #32]
 8010de2:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8010de4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010de8:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8010dea:	2300      	movs	r3, #0
 8010dec:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010df2:	4a2a      	ldr	r2, [pc, #168]	@ (8010e9c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 8010df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010df8:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8010dfe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010e02:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8010e04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010e08:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8010e0a:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.MessageMarker = 0x0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	62bb      	str	r3, [r7, #40]	@ 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 8010e14:	2300      	movs	r3, #0
 8010e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e18:	e006      	b.n	8010e28 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 8010e1a:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8010e1e:	f7ff ff0d 	bl	8010c3c <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 8010e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e24:	3301      	adds	r3, #1
 8010e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7fa f89d 	bl	800af6c <HAL_FDCAN_GetTxFifoFreeLevel>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b03      	cmp	r3, #3
 8010e36:	d004      	beq.n	8010e42 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8010e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	dc01      	bgt.n	8010e42 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8010e3e:	2301      	movs	r3, #1
 8010e40:	e000      	b.n	8010e44 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 8010e42:	2300      	movs	r3, #0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d1e8      	bne.n	8010e1a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7fa f88d 	bl	800af6c <HAL_FDCAN_GetTxFifoFreeLevel>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b03      	cmp	r3, #3
 8010e56:	bf14      	ite	ne
 8010e58:	2301      	movne	r3, #1
 8010e5a:	2300      	moveq	r3, #0
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d002      	beq.n	8010e68 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 8010e62:	f04f 33ff 	mov.w	r3, #4294967295
 8010e66:	e014      	b.n	8010e92 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010e70:	f107 0308 	add.w	r3, r7, #8
 8010e74:	4619      	mov	r1, r3
 8010e76:	f7f9 ff0f 	bl	800ac98 <HAL_FDCAN_AddMessageToTxFifoQ>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	bf14      	ite	ne
 8010e80:	2301      	movne	r3, #1
 8010e82:	2300      	moveq	r3, #0
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d002      	beq.n	8010e90 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 8010e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010e8e:	e000      	b.n	8010e92 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 8010e90:	697b      	ldr	r3, [r7, #20]
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3730      	adds	r7, #48	@ 0x30
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
 8010e9a:	bf00      	nop
 8010e9c:	080189e8 	.word	0x080189e8

08010ea0 <_ZN5G4CAND1Ev>:
class G4CAN : public AbstractCANProvider {
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	4a05      	ldr	r2, [pc, #20]	@ (8010ec0 <_ZN5G4CAND1Ev+0x20>)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	601a      	str	r2, [r3, #0]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f000 f8b1 	bl	8011018 <_ZN19AbstractCANProviderD1Ev>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3708      	adds	r7, #8
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	08018af4 	.word	0x08018af4

08010ec4 <_ZN5G4CAND0Ev>:
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7ff ffe7 	bl	8010ea0 <_ZN5G4CAND1Ev>
 8010ed2:	2144      	movs	r1, #68	@ 0x44
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f002 fbe8 	bl	80136aa <_ZdlPvj>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 8010ee4:	b590      	push	{r4, r7, lr}
 8010ee6:	b091      	sub	sp, #68	@ 0x44
 8010ee8:	af04      	add	r7, sp, #16
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 8010eee:	f107 0310 	add.w	r3, r7, #16
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	601a      	str	r2, [r3, #0]
 8010ef6:	605a      	str	r2, [r3, #4]
 8010ef8:	609a      	str	r2, [r3, #8]
 8010efa:	60da      	str	r2, [r3, #12]
 8010efc:	611a      	str	r2, [r3, #16]
 8010efe:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 8010f00:	2300      	movs	r3, #0
 8010f02:	60fb      	str	r3, [r7, #12]

    const int8_t accept_result = canardRxAccept(
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    const int8_t accept_result = canardRxAccept(
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7f6 f86c 	bl	8006fec <_ZNKSt8functionIFyvEEclEv>
 8010f14:	4602      	mov	r2, r0
 8010f16:	460b      	mov	r3, r1
 8010f18:	f107 010c 	add.w	r1, r7, #12
 8010f1c:	9103      	str	r1, [sp, #12]
 8010f1e:	f107 0110 	add.w	r1, r7, #16
 8010f22:	9102      	str	r1, [sp, #8]
 8010f24:	2100      	movs	r1, #0
 8010f26:	9101      	str	r1, [sp, #4]
 8010f28:	6839      	ldr	r1, [r7, #0]
 8010f2a:	9100      	str	r1, [sp, #0]
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f002 f9d5 	bl	80132dc <canardRxAccept>
 8010f32:	4603      	mov	r3, r0
 8010f34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 1) {
 8010f38:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010f3c:	2b01      	cmp	r3, #1
 8010f3e:	d10e      	bne.n	8010f5e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
        IListener<CanardRxTransfer*>* listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6a1b      	ldr	r3, [r3, #32]
 8010f44:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (listener != nullptr) {
 8010f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d010      	beq.n	8010f6e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
            listener->accept(&transfer);
 8010f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f107 0210 	add.w	r2, r7, #16
 8010f56:	4611      	mov	r1, r2
 8010f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f5a:	4798      	blx	r3
 8010f5c:	e007      	b.n	8010f6e <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
        }
    }
    else if (accept_result == 0 || accept_result > 1) {
 8010f5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00e      	beq.n	8010f84 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 8010f66:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010f6a:	2b01      	cmp	r3, #1
 8010f6c:	dc0a      	bgt.n	8010f84 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }

    if (transfer.payload != nullptr) {
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d008      	beq.n	8010f86 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        canard.memory_free(&canard, transfer.payload);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	3220      	adds	r2, #32
 8010f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010f7e:	4610      	mov	r0, r2
 8010f80:	4798      	blx	r3
 8010f82:	e000      	b.n	8010f86 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        return;
 8010f84:	bf00      	nop
    }
}
 8010f86:	3734      	adds	r7, #52	@ 0x34
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd90      	pop	{r4, r7, pc}

08010f8c <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 8010f8c:	b5b0      	push	{r4, r5, r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 8010f94:	e036      	b.n	8011004 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	330c      	adds	r3, #12
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f002 f968 	bl	8013270 <canardTxPeek>
 8010fa0:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8010fa8:	4313      	orrs	r3, r2
 8010faa:	d00c      	beq.n	8010fc6 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7f6 f818 	bl	8006fec <_ZNKSt8functionIFyvEEclEv>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	42a2      	cmp	r2, r4
 8010fc2:	41ab      	sbcs	r3, r5
 8010fc4:	d201      	bcs.n	8010fca <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	e000      	b.n	8010fcc <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 8010fca:	2300      	movs	r3, #0
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d00a      	beq.n	8010fe6 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	3310      	adds	r3, #16
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	68f9      	ldr	r1, [r7, #12]
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	4798      	blx	r3
 8010fde:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	db13      	blt.n	801100e <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f103 0520 	add.w	r5, r3, #32
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	330c      	adds	r3, #12
 8010ff4:	68f9      	ldr	r1, [r7, #12]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f002 f94f 	bl	801329a <canardTxPop>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	4619      	mov	r1, r3
 8011000:	4628      	mov	r0, r5
 8011002:	47a0      	blx	r4
    while (queue.size != 0) {
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	695b      	ldr	r3, [r3, #20]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d1c4      	bne.n	8010f96 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 801100c:	e000      	b.n	8011010 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 801100e:	bf00      	nop
}
 8011010:	bf00      	nop
 8011012:	3710      	adds	r7, #16
 8011014:	46bd      	mov	sp, r7
 8011016:	bdb0      	pop	{r4, r5, r7, pc}

08011018 <_ZN19AbstractCANProviderD1Ev>:

AbstractCANProvider::~AbstractCANProvider() {
 8011018:	b480      	push	{r7}
 801101a:	b083      	sub	sp, #12
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	4a04      	ldr	r2, [pc, #16]	@ (8011034 <_ZN19AbstractCANProviderD1Ev+0x1c>)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	601a      	str	r2, [r3, #0]

}
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4618      	mov	r0, r3
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr
 8011034:	08018b18 	.word	0x08018b18

08011038 <_Z41__static_initialization_and_destruction_0ii>:
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d107      	bne.n	8011058 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801104e:	4293      	cmp	r3, r2
 8011050:	d102      	bne.n	8011058 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011052:	4803      	ldr	r0, [pc, #12]	@ (8011060 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011054:	f000 f806 	bl	8011064 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 8011058:	bf00      	nop
 801105a:	3708      	adds	r7, #8
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}
 8011060:	20000a40 	.word	0x20000a40

08011064 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8011064:	b590      	push	{r4, r7, lr}
 8011066:	b085      	sub	sp, #20
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	4618      	mov	r0, r3
 8011070:	f7f6 fe84 	bl	8007d7c <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8011074:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00c      	beq.n	8011098 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7f6 fd40 	bl	8007b04 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8011084:	4604      	mov	r4, r0
 8011086:	68f8      	ldr	r0, [r7, #12]
 8011088:	f7f6 fdd7 	bl	8007c3a <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 801108c:	4603      	mov	r3, r0
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	4619      	mov	r1, r3
 8011092:	4620      	mov	r0, r4
 8011094:	f7f6 fe7f 	bl	8007d96 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2200      	movs	r2, #0
 801109c:	601a      	str	r2, [r3, #0]
      }
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	4618      	mov	r0, r3
 80110a2:	3714      	adds	r7, #20
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd90      	pop	{r4, r7, pc}

080110a8 <_GLOBAL__sub_I_queue>:
 80110a8:	b580      	push	{r7, lr}
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80110b0:	2001      	movs	r0, #1
 80110b2:	f7ff ffc1 	bl	8011038 <_Z41__static_initialization_and_destruction_0ii>
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <_GLOBAL__sub_D_queue>:
 80110b8:	b580      	push	{r7, lr}
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80110c0:	2000      	movs	r0, #0
 80110c2:	f7ff ffb9 	bl	8011038 <_Z41__static_initialization_and_destruction_0ii>
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b085      	sub	sp, #20
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	460b      	mov	r3, r1
 80110d2:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 80110d4:	2300      	movs	r3, #0
 80110d6:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 80110dc:	e007      	b.n	80110ee <cavlFindExtremum+0x26>
    {
        result = c;
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 80110e2:	78fb      	ldrb	r3, [r7, #3]
 80110e4:	68ba      	ldr	r2, [r7, #8]
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	4413      	add	r3, r2
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1f4      	bne.n	80110de <cavlFindExtremum+0x16>
    }
    return result;
 80110f4:	68fb      	ldr	r3, [r7, #12]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3714      	adds	r7, #20
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr
	...

08011104 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	460b      	mov	r3, r1
 801110e:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d014      	beq.n	8011140 <cavlPrivateRotate+0x3c>
 8011116:	78fb      	ldrb	r3, [r7, #3]
 8011118:	f083 0301 	eor.w	r3, r3, #1
 801111c:	b2db      	uxtb	r3, r3
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	009b      	lsls	r3, r3, #2
 8011122:	4413      	add	r3, r2
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00a      	beq.n	8011140 <cavlPrivateRotate+0x3c>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011134:	db04      	blt.n	8011140 <cavlPrivateRotate+0x3c>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801113c:	2b01      	cmp	r3, #1
 801113e:	dd05      	ble.n	801114c <cavlPrivateRotate+0x48>
 8011140:	4b2a      	ldr	r3, [pc, #168]	@ (80111ec <cavlPrivateRotate+0xe8>)
 8011142:	4a2b      	ldr	r2, [pc, #172]	@ (80111f0 <cavlPrivateRotate+0xec>)
 8011144:	2162      	movs	r1, #98	@ 0x62
 8011146:	482b      	ldr	r0, [pc, #172]	@ (80111f4 <cavlPrivateRotate+0xf0>)
 8011148:	f002 fad8 	bl	80136fc <__assert_func>
    Cavl* const z = x->lr[!r];
 801114c:	78fb      	ldrb	r3, [r7, #3]
 801114e:	f083 0301 	eor.w	r3, r3, #1
 8011152:	b2db      	uxtb	r3, r3
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	009b      	lsls	r3, r3, #2
 8011158:	4413      	add	r3, r2
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d00e      	beq.n	8011184 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	689b      	ldr	r3, [r3, #8]
 8011170:	6879      	ldr	r1, [r7, #4]
 8011172:	4299      	cmp	r1, r3
 8011174:	bf0c      	ite	eq
 8011176:	2301      	moveq	r3, #1
 8011178:	2300      	movne	r3, #0
 801117a:	b2db      	uxtb	r3, r3
 801117c:	009b      	lsls	r3, r3, #2
 801117e:	4413      	add	r3, r2
 8011180:	68fa      	ldr	r2, [r7, #12]
 8011182:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681a      	ldr	r2, [r3, #0]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	601a      	str	r2, [r3, #0]
    x->up     = z;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 8011192:	78fb      	ldrb	r3, [r7, #3]
 8011194:	78fa      	ldrb	r2, [r7, #3]
 8011196:	f082 0201 	eor.w	r2, r2, #1
 801119a:	b2d2      	uxtb	r2, r2
 801119c:	4610      	mov	r0, r2
 801119e:	68fa      	ldr	r2, [r7, #12]
 80111a0:	009b      	lsls	r3, r3, #2
 80111a2:	4413      	add	r3, r2
 80111a4:	685a      	ldr	r2, [r3, #4]
 80111a6:	6879      	ldr	r1, [r7, #4]
 80111a8:	0083      	lsls	r3, r0, #2
 80111aa:	440b      	add	r3, r1
 80111ac:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 80111ae:	78fb      	ldrb	r3, [r7, #3]
 80111b0:	f083 0301 	eor.w	r3, r3, #1
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	4413      	add	r3, r2
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d009      	beq.n	80111d6 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 80111c2:	78fb      	ldrb	r3, [r7, #3]
 80111c4:	f083 0301 	eor.w	r3, r3, #1
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	687a      	ldr	r2, [r7, #4]
 80111cc:	009b      	lsls	r3, r3, #2
 80111ce:	4413      	add	r3, r2
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	687a      	ldr	r2, [r7, #4]
 80111d4:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 80111d6:	78fb      	ldrb	r3, [r7, #3]
 80111d8:	68fa      	ldr	r2, [r7, #12]
 80111da:	009b      	lsls	r3, r3, #2
 80111dc:	4413      	add	r3, r2
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	605a      	str	r2, [r3, #4]
}
 80111e2:	bf00      	nop
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	08017e60 	.word	0x08017e60
 80111f0:	08018ea0 	.word	0x08018ea0
 80111f4:	08017ea8 	.word	0x08017ea8

080111f8 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b086      	sub	sp, #24
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	460b      	mov	r3, r1
 8011202:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d00a      	beq.n	8011220 <cavlPrivateAdjustBalance+0x28>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011214:	db04      	blt.n	8011220 <cavlPrivateAdjustBalance+0x28>
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801121c:	2b01      	cmp	r3, #1
 801121e:	dd05      	ble.n	801122c <cavlPrivateAdjustBalance+0x34>
 8011220:	4b61      	ldr	r3, [pc, #388]	@ (80113a8 <cavlPrivateAdjustBalance+0x1b0>)
 8011222:	4a62      	ldr	r2, [pc, #392]	@ (80113ac <cavlPrivateAdjustBalance+0x1b4>)
 8011224:	2177      	movs	r1, #119	@ 0x77
 8011226:	4862      	ldr	r0, [pc, #392]	@ (80113b0 <cavlPrivateAdjustBalance+0x1b8>)
 8011228:	f002 fa68 	bl	80136fc <__assert_func>
    Cavl*        out    = x;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011236:	b2db      	uxtb	r3, r3
 8011238:	78fa      	ldrb	r2, [r7, #3]
 801123a:	2a00      	cmp	r2, #0
 801123c:	d001      	beq.n	8011242 <cavlPrivateAdjustBalance+0x4a>
 801123e:	2201      	movs	r2, #1
 8011240:	e000      	b.n	8011244 <cavlPrivateAdjustBalance+0x4c>
 8011242:	22ff      	movs	r2, #255	@ 0xff
 8011244:	4413      	add	r3, r2
 8011246:	b2db      	uxtb	r3, r3
 8011248:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 801124a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801124e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011252:	db04      	blt.n	801125e <cavlPrivateAdjustBalance+0x66>
 8011254:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011258:	2b01      	cmp	r3, #1
 801125a:	f340 809c 	ble.w	8011396 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 801125e:	7cfb      	ldrb	r3, [r7, #19]
 8011260:	09db      	lsrs	r3, r3, #7
 8011262:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 8011264:	7cbb      	ldrb	r3, [r7, #18]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d001      	beq.n	801126e <cavlPrivateAdjustBalance+0x76>
 801126a:	2301      	movs	r3, #1
 801126c:	e001      	b.n	8011272 <cavlPrivateAdjustBalance+0x7a>
 801126e:	f04f 33ff 	mov.w	r3, #4294967295
 8011272:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 8011274:	7cbb      	ldrb	r3, [r7, #18]
 8011276:	f083 0301 	eor.w	r3, r3, #1
 801127a:	b2db      	uxtb	r3, r3
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	4413      	add	r3, r2
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d105      	bne.n	8011298 <cavlPrivateAdjustBalance+0xa0>
 801128c:	4b49      	ldr	r3, [pc, #292]	@ (80113b4 <cavlPrivateAdjustBalance+0x1bc>)
 801128e:	4a47      	ldr	r2, [pc, #284]	@ (80113ac <cavlPrivateAdjustBalance+0x1b4>)
 8011290:	217f      	movs	r1, #127	@ 0x7f
 8011292:	4847      	ldr	r0, [pc, #284]	@ (80113b0 <cavlPrivateAdjustBalance+0x1b8>)
 8011294:	f002 fa32 	bl	80136fc <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801129e:	461a      	mov	r2, r3
 80112a0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80112a4:	fb02 f303 	mul.w	r3, r2, r3
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	dc1c      	bgt.n	80112e6 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 80112b0:	7cbb      	ldrb	r3, [r7, #18]
 80112b2:	4619      	mov	r1, r3
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f7ff ff25 	bl	8011104 <cavlPrivateRotate>
            if (0 == z->bf)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d109      	bne.n	80112d8 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 80112c4:	7c7b      	ldrb	r3, [r7, #17]
 80112c6:	425b      	negs	r3, r3
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	b25a      	sxtb	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	7c7a      	ldrb	r2, [r7, #17]
 80112d4:	731a      	strb	r2, [r3, #12]
    {
 80112d6:	e061      	b.n	801139c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2200      	movs	r2, #0
 80112e2:	731a      	strb	r2, [r3, #12]
    {
 80112e4:	e05a      	b.n	801139c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 80112e6:	7cbb      	ldrb	r3, [r7, #18]
 80112e8:	68fa      	ldr	r2, [r7, #12]
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	4413      	add	r3, r2
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d105      	bne.n	8011304 <cavlPrivateAdjustBalance+0x10c>
 80112f8:	4b2f      	ldr	r3, [pc, #188]	@ (80113b8 <cavlPrivateAdjustBalance+0x1c0>)
 80112fa:	4a2c      	ldr	r2, [pc, #176]	@ (80113ac <cavlPrivateAdjustBalance+0x1b4>)
 80112fc:	2192      	movs	r1, #146	@ 0x92
 80112fe:	482c      	ldr	r0, [pc, #176]	@ (80113b0 <cavlPrivateAdjustBalance+0x1b8>)
 8011300:	f002 f9fc 	bl	80136fc <__assert_func>
            out = y;
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 8011308:	7cbb      	ldrb	r3, [r7, #18]
 801130a:	2b00      	cmp	r3, #0
 801130c:	bf14      	ite	ne
 801130e:	2301      	movne	r3, #1
 8011310:	2300      	moveq	r3, #0
 8011312:	b2db      	uxtb	r3, r3
 8011314:	f083 0301 	eor.w	r3, r3, #1
 8011318:	b2db      	uxtb	r3, r3
 801131a:	f003 0301 	and.w	r3, r3, #1
 801131e:	b2db      	uxtb	r3, r3
 8011320:	4619      	mov	r1, r3
 8011322:	68f8      	ldr	r0, [r7, #12]
 8011324:	f7ff feee 	bl	8011104 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 8011328:	7cbb      	ldrb	r3, [r7, #18]
 801132a:	4619      	mov	r1, r3
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f7ff fee9 	bl	8011104 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011338:	461a      	mov	r2, r3
 801133a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801133e:	fb02 f303 	mul.w	r3, r2, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	da09      	bge.n	801135a <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	7c7a      	ldrb	r2, [r7, #17]
 801134a:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	2200      	movs	r2, #0
 8011350:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	2200      	movs	r2, #0
 8011356:	731a      	strb	r2, [r3, #12]
    {
 8011358:	e020      	b.n	801139c <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011360:	461a      	mov	r2, r3
 8011362:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011366:	fb02 f303 	mul.w	r3, r2, r3
 801136a:	2b00      	cmp	r3, #0
 801136c:	dd0c      	ble.n	8011388 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2200      	movs	r2, #0
 8011372:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	2200      	movs	r2, #0
 8011378:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 801137a:	7c7b      	ldrb	r3, [r7, #17]
 801137c:	425b      	negs	r3, r3
 801137e:	b2db      	uxtb	r3, r3
 8011380:	b25a      	sxtb	r2, r3
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	731a      	strb	r2, [r3, #12]
    {
 8011386:	e009      	b.n	801139c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2200      	movs	r2, #0
 801138c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2200      	movs	r2, #0
 8011392:	731a      	strb	r2, [r3, #12]
    {
 8011394:	e002      	b.n	801139c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	7cfa      	ldrb	r2, [r7, #19]
 801139a:	731a      	strb	r2, [r3, #12]
    }
    return out;
 801139c:	697b      	ldr	r3, [r7, #20]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3718      	adds	r7, #24
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	08017ed4 	.word	0x08017ed4
 80113ac:	08018e84 	.word	0x08018e84
 80113b0:	08017ea8 	.word	0x08017ea8
 80113b4:	08017f04 	.word	0x08017f04
 80113b8:	08017f10 	.word	0x08017f10

080113bc <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b086      	sub	sp, #24
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d004      	beq.n	80113d4 <cavlPrivateRetraceOnGrowth+0x18>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d005      	beq.n	80113e0 <cavlPrivateRetraceOnGrowth+0x24>
 80113d4:	4b23      	ldr	r3, [pc, #140]	@ (8011464 <cavlPrivateRetraceOnGrowth+0xa8>)
 80113d6:	4a24      	ldr	r2, [pc, #144]	@ (8011468 <cavlPrivateRetraceOnGrowth+0xac>)
 80113d8:	21b5      	movs	r1, #181	@ 0xb5
 80113da:	4824      	ldr	r0, [pc, #144]	@ (801146c <cavlPrivateRetraceOnGrowth+0xb0>)
 80113dc:	f002 f98e 	bl	80136fc <__assert_func>
    Cavl* c = added;      // Child
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 80113ea:	e023      	b.n	8011434 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	689b      	ldr	r3, [r3, #8]
 80113f0:	697a      	ldr	r2, [r7, #20]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	bf0c      	ite	eq
 80113f6:	2301      	moveq	r3, #1
 80113f8:	2300      	movne	r3, #0
 80113fa:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 80113fc:	7bfb      	ldrb	r3, [r7, #15]
 80113fe:	693a      	ldr	r2, [r7, #16]
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	4413      	add	r3, r2
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	697a      	ldr	r2, [r7, #20]
 8011408:	429a      	cmp	r2, r3
 801140a:	d005      	beq.n	8011418 <cavlPrivateRetraceOnGrowth+0x5c>
 801140c:	4b18      	ldr	r3, [pc, #96]	@ (8011470 <cavlPrivateRetraceOnGrowth+0xb4>)
 801140e:	4a16      	ldr	r2, [pc, #88]	@ (8011468 <cavlPrivateRetraceOnGrowth+0xac>)
 8011410:	21bb      	movs	r1, #187	@ 0xbb
 8011412:	4816      	ldr	r0, [pc, #88]	@ (801146c <cavlPrivateRetraceOnGrowth+0xb0>)
 8011414:	f002 f972 	bl	80136fc <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 8011418:	7bfb      	ldrb	r3, [r7, #15]
 801141a:	4619      	mov	r1, r3
 801141c:	6938      	ldr	r0, [r7, #16]
 801141e:	f7ff feeb 	bl	80111f8 <cavlPrivateAdjustBalance>
 8011422:	6178      	str	r0, [r7, #20]
        p = c->up;
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d003      	beq.n	801143c <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d1d8      	bne.n	80113ec <cavlPrivateRetraceOnGrowth+0x30>
 801143a:	e000      	b.n	801143e <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 801143c:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d105      	bne.n	8011450 <cavlPrivateRetraceOnGrowth+0x94>
 8011444:	4b0b      	ldr	r3, [pc, #44]	@ (8011474 <cavlPrivateRetraceOnGrowth+0xb8>)
 8011446:	4a08      	ldr	r2, [pc, #32]	@ (8011468 <cavlPrivateRetraceOnGrowth+0xac>)
 8011448:	21c3      	movs	r1, #195	@ 0xc3
 801144a:	4808      	ldr	r0, [pc, #32]	@ (801146c <cavlPrivateRetraceOnGrowth+0xb0>)
 801144c:	f002 f956 	bl	80136fc <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d101      	bne.n	801145a <cavlPrivateRetraceOnGrowth+0x9e>
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	e000      	b.n	801145c <cavlPrivateRetraceOnGrowth+0xa0>
 801145a:	2300      	movs	r3, #0
}
 801145c:	4618      	mov	r0, r3
 801145e:	3718      	adds	r7, #24
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	08017f1c 	.word	0x08017f1c
 8011468:	08018e68 	.word	0x08018e68
 801146c:	08017ea8 	.word	0x08017ea8
 8011470:	08017f40 	.word	0x08017f40
 8011474:	08017f50 	.word	0x08017f50

08011478 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b08a      	sub	sp, #40	@ 0x28
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	60b9      	str	r1, [r7, #8]
 8011482:	607a      	str	r2, [r7, #4]
 8011484:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 8011486:	2300      	movs	r3, #0
 8011488:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d065      	beq.n	801155c <cavlSearch+0xe4>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d062      	beq.n	801155c <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 80114a0:	e02f      	b.n	8011502 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	4611      	mov	r1, r2
 80114aa:	68b8      	ldr	r0, [r7, #8]
 80114ac:	4798      	blx	r3
 80114ae:	4603      	mov	r3, r0
 80114b0:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 80114b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d103      	bne.n	80114c2 <cavlSearch+0x4a>
            {
                out = *n;
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80114c0:	e023      	b.n	801150a <cavlSearch+0x92>
            }
            up = *n;
 80114c2:	69fb      	ldr	r3, [r7, #28]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	bfcc      	ite	gt
 80114d4:	2301      	movgt	r3, #1
 80114d6:	2300      	movle	r3, #0
 80114d8:	b2db      	uxtb	r3, r3
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	4413      	add	r3, r2
 80114de:	3304      	adds	r3, #4
 80114e0:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d00b      	beq.n	8011502 <cavlSearch+0x8a>
 80114ea:	69fb      	ldr	r3, [r7, #28]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	6a3a      	ldr	r2, [r7, #32]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d005      	beq.n	8011502 <cavlSearch+0x8a>
 80114f6:	4b1c      	ldr	r3, [pc, #112]	@ (8011568 <cavlSearch+0xf0>)
 80114f8:	4a1c      	ldr	r2, [pc, #112]	@ (801156c <cavlSearch+0xf4>)
 80114fa:	21db      	movs	r1, #219	@ 0xdb
 80114fc:	481c      	ldr	r0, [pc, #112]	@ (8011570 <cavlSearch+0xf8>)
 80114fe:	f002 f8fd 	bl	80136fc <__assert_func>
        while (*n != NULL)
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d1cb      	bne.n	80114a2 <cavlSearch+0x2a>
        }
        if (NULL == out)
 801150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801150c:	2b00      	cmp	r3, #0
 801150e:	d125      	bne.n	801155c <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d004      	beq.n	8011520 <cavlSearch+0xa8>
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	68b8      	ldr	r0, [r7, #8]
 801151a:	4798      	blx	r3
 801151c:	4603      	mov	r3, r0
 801151e:	e000      	b.n	8011522 <cavlSearch+0xaa>
 8011520:	2300      	movs	r3, #0
 8011522:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 8011524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011526:	2b00      	cmp	r3, #0
 8011528:	d018      	beq.n	801155c <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801152e:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 8011530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011532:	2200      	movs	r2, #0
 8011534:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 8011536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011538:	2200      	movs	r2, #0
 801153a:	609a      	str	r2, [r3, #8]
                out->up        = up;
 801153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801153e:	6a3a      	ldr	r2, [r7, #32]
 8011540:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 8011542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011544:	2200      	movs	r2, #0
 8011546:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 8011548:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801154a:	f7ff ff37 	bl	80113bc <cavlPrivateRetraceOnGrowth>
 801154e:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d002      	beq.n	801155c <cavlSearch+0xe4>
                {
                    *root = rt;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	697a      	ldr	r2, [r7, #20]
 801155a:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 801155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801155e:	4618      	mov	r0, r3
 8011560:	3728      	adds	r7, #40	@ 0x28
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	08017f5c 	.word	0x08017f5c
 801156c:	08018e5c 	.word	0x08018e5c
 8011570:	08017ea8 	.word	0x08017ea8

08011574 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b088      	sub	sp, #32
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	f000 8116 	beq.w	80117b2 <cavlRemove+0x23e>
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	f000 8112 	beq.w	80117b2 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d105      	bne.n	80115a2 <cavlRemove+0x2e>
 8011596:	4b89      	ldr	r3, [pc, #548]	@ (80117bc <cavlRemove+0x248>)
 8011598:	4a89      	ldr	r2, [pc, #548]	@ (80117c0 <cavlRemove+0x24c>)
 801159a:	21f6      	movs	r1, #246	@ 0xf6
 801159c:	4889      	ldr	r0, [pc, #548]	@ (80117c4 <cavlRemove+0x250>)
 801159e:	f002 f8ad 	bl	80136fc <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10a      	bne.n	80115c0 <cavlRemove+0x4c>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	683a      	ldr	r2, [r7, #0]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d005      	beq.n	80115c0 <cavlRemove+0x4c>
 80115b4:	4b84      	ldr	r3, [pc, #528]	@ (80117c8 <cavlRemove+0x254>)
 80115b6:	4a82      	ldr	r2, [pc, #520]	@ (80117c0 <cavlRemove+0x24c>)
 80115b8:	21f7      	movs	r1, #247	@ 0xf7
 80115ba:	4882      	ldr	r0, [pc, #520]	@ (80117c4 <cavlRemove+0x250>)
 80115bc:	f002 f89e 	bl	80136fc <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 80115c0:	2300      	movs	r3, #0
 80115c2:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 80115c4:	2300      	movs	r3, #0
 80115c6:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d073      	beq.n	80116b8 <cavlRemove+0x144>
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	689b      	ldr	r3, [r3, #8]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d06f      	beq.n	80116b8 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	2100      	movs	r1, #0
 80115de:	4618      	mov	r0, r3
 80115e0:	f7ff fd72 	bl	80110c8 <cavlFindExtremum>
 80115e4:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d007      	beq.n	80115fc <cavlRemove+0x88>
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d103      	bne.n	80115fc <cavlRemove+0x88>
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d105      	bne.n	8011608 <cavlRemove+0x94>
 80115fc:	4b73      	ldr	r3, [pc, #460]	@ (80117cc <cavlRemove+0x258>)
 80115fe:	4a70      	ldr	r2, [pc, #448]	@ (80117c0 <cavlRemove+0x24c>)
 8011600:	21ff      	movs	r1, #255	@ 0xff
 8011602:	4870      	ldr	r0, [pc, #448]	@ (80117c4 <cavlRemove+0x250>)
 8011604:	f002 f87a 	bl	80136fc <__assert_func>
            re->bf        = node->bf;
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	f993 200c 	ldrsb.w	r2, [r3, #12]
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	685a      	ldr	r2, [r3, #4]
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	697a      	ldr	r2, [r7, #20]
 8011620:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	429a      	cmp	r2, r3
 801162a:	d025      	beq.n	8011678 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	697a      	ldr	r2, [r7, #20]
 8011638:	429a      	cmp	r2, r3
 801163a:	d006      	beq.n	801164a <cavlRemove+0xd6>
 801163c:	4b64      	ldr	r3, [pc, #400]	@ (80117d0 <cavlRemove+0x25c>)
 801163e:	4a60      	ldr	r2, [pc, #384]	@ (80117c0 <cavlRemove+0x24c>)
 8011640:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8011644:	485f      	ldr	r0, [pc, #380]	@ (80117c4 <cavlRemove+0x250>)
 8011646:	f002 f859 	bl	80136fc <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	689a      	ldr	r2, [r3, #8]
 801164e:	69fb      	ldr	r3, [r7, #28]
 8011650:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d003      	beq.n	8011662 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 801165a:	69fb      	ldr	r3, [r7, #28]
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	69fa      	ldr	r2, [r7, #28]
 8011660:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	689a      	ldr	r2, [r3, #8]
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	689b      	ldr	r3, [r3, #8]
 801166e:	697a      	ldr	r2, [r7, #20]
 8011670:	601a      	str	r2, [r3, #0]
                r             = false;
 8011672:	2300      	movs	r3, #0
 8011674:	76fb      	strb	r3, [r7, #27]
 8011676:	e003      	b.n	8011680 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 801167c:	2301      	movs	r3, #1
 801167e:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d00f      	beq.n	80116b0 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	681a      	ldr	r2, [r3, #0]
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	689b      	ldr	r3, [r3, #8]
 801169a:	6839      	ldr	r1, [r7, #0]
 801169c:	4299      	cmp	r1, r3
 801169e:	bf0c      	ite	eq
 80116a0:	2301      	moveq	r3, #1
 80116a2:	2300      	movne	r3, #0
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	4413      	add	r3, r2
 80116aa:	697a      	ldr	r2, [r7, #20]
 80116ac:	605a      	str	r2, [r3, #4]
        {
 80116ae:	e046      	b.n	801173e <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	697a      	ldr	r2, [r7, #20]
 80116b4:	601a      	str	r2, [r3, #0]
        {
 80116b6:	e042      	b.n	801173e <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	689b      	ldr	r3, [r3, #8]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	bf14      	ite	ne
 80116c6:	2301      	movne	r3, #1
 80116c8:	2300      	moveq	r3, #0
 80116ca:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 80116cc:	7cfb      	ldrb	r3, [r7, #19]
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	009b      	lsls	r3, r3, #2
 80116d2:	4413      	add	r3, r2
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d006      	beq.n	80116e8 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 80116da:	7cfb      	ldrb	r3, [r7, #19]
 80116dc:	683a      	ldr	r2, [r7, #0]
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	4413      	add	r3, r2
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	69fa      	ldr	r2, [r7, #28]
 80116e6:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d020      	beq.n	8011730 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	689b      	ldr	r3, [r3, #8]
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	bf0c      	ite	eq
 80116f8:	2301      	moveq	r3, #1
 80116fa:	2300      	movne	r3, #0
 80116fc:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 80116fe:	7cfb      	ldrb	r3, [r7, #19]
 8011700:	7ef8      	ldrb	r0, [r7, #27]
 8011702:	683a      	ldr	r2, [r7, #0]
 8011704:	009b      	lsls	r3, r3, #2
 8011706:	4413      	add	r3, r2
 8011708:	685a      	ldr	r2, [r3, #4]
 801170a:	69f9      	ldr	r1, [r7, #28]
 801170c:	0083      	lsls	r3, r0, #2
 801170e:	440b      	add	r3, r1
 8011710:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 8011712:	7efb      	ldrb	r3, [r7, #27]
 8011714:	69fa      	ldr	r2, [r7, #28]
 8011716:	009b      	lsls	r3, r3, #2
 8011718:	4413      	add	r3, r2
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00e      	beq.n	801173e <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 8011720:	7efb      	ldrb	r3, [r7, #27]
 8011722:	69fa      	ldr	r2, [r7, #28]
 8011724:	009b      	lsls	r3, r3, #2
 8011726:	4413      	add	r3, r2
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	69fa      	ldr	r2, [r7, #28]
 801172c:	601a      	str	r2, [r3, #0]
 801172e:	e006      	b.n	801173e <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 8011730:	7cfb      	ldrb	r3, [r7, #19]
 8011732:	683a      	ldr	r2, [r7, #0]
 8011734:	009b      	lsls	r3, r3, #2
 8011736:	4413      	add	r3, r2
 8011738:	685a      	ldr	r2, [r3, #4]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d036      	beq.n	80117b2 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 8011744:	2300      	movs	r3, #0
 8011746:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 8011748:	7efb      	ldrb	r3, [r7, #27]
 801174a:	2b00      	cmp	r3, #0
 801174c:	bf14      	ite	ne
 801174e:	2301      	movne	r3, #1
 8011750:	2300      	moveq	r3, #0
 8011752:	b2db      	uxtb	r3, r3
 8011754:	f083 0301 	eor.w	r3, r3, #1
 8011758:	b2db      	uxtb	r3, r3
 801175a:	f003 0301 	and.w	r3, r3, #1
 801175e:	b2db      	uxtb	r3, r3
 8011760:	4619      	mov	r1, r3
 8011762:	69f8      	ldr	r0, [r7, #28]
 8011764:	f7ff fd48 	bl	80111f8 <cavlPrivateAdjustBalance>
 8011768:	60f8      	str	r0, [r7, #12]
                p = c->up;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d10b      	bne.n	8011792 <cavlRemove+0x21e>
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d008      	beq.n	8011792 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8011780:	69fb      	ldr	r3, [r7, #28]
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	68fa      	ldr	r2, [r7, #12]
 8011786:	429a      	cmp	r2, r3
 8011788:	bf0c      	ite	eq
 801178a:	2301      	moveq	r3, #1
 801178c:	2300      	movne	r3, #0
 801178e:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8011790:	e7da      	b.n	8011748 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 8011792:	69fb      	ldr	r3, [r7, #28]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d10c      	bne.n	80117b2 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d106      	bne.n	80117ac <cavlRemove+0x238>
 801179e:	4b0d      	ldr	r3, [pc, #52]	@ (80117d4 <cavlRemove+0x260>)
 80117a0:	4a07      	ldr	r2, [pc, #28]	@ (80117c0 <cavlRemove+0x24c>)
 80117a2:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80117a6:	4807      	ldr	r0, [pc, #28]	@ (80117c4 <cavlRemove+0x250>)
 80117a8:	f001 ffa8 	bl	80136fc <__assert_func>
                *root = c;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	68fa      	ldr	r2, [r7, #12]
 80117b0:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 80117b2:	bf00      	nop
 80117b4:	3720      	adds	r7, #32
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	bf00      	nop
 80117bc:	08017f80 	.word	0x08017f80
 80117c0:	08018ee4 	.word	0x08018ee4
 80117c4:	08017ea8 	.word	0x08017ea8
 80117c8:	08017f90 	.word	0x08017f90
 80117cc:	08017fb8 	.word	0x08017fb8
 80117d0:	08017ff0 	.word	0x08017ff0
 80117d4:	08017f50 	.word	0x08017f50

080117d8 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 80117d8:	b480      	push	{r7}
 80117da:	b083      	sub	sp, #12
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 80117e0:	687b      	ldr	r3, [r7, #4]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	370c      	adds	r7, #12
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr
	...

080117f0 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	4603      	mov	r3, r0
 80117f8:	460a      	mov	r2, r1
 80117fa:	80fb      	strh	r3, [r7, #6]
 80117fc:	4613      	mov	r3, r2
 80117fe:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8011800:	88fb      	ldrh	r3, [r7, #6]
 8011802:	021b      	lsls	r3, r3, #8
 8011804:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 8011806:	88fb      	ldrh	r3, [r7, #6]
 8011808:	0a1b      	lsrs	r3, r3, #8
 801180a:	b299      	uxth	r1, r3
 801180c:	797b      	ldrb	r3, [r7, #5]
 801180e:	b29b      	uxth	r3, r3
 8011810:	404b      	eors	r3, r1
 8011812:	b29b      	uxth	r3, r3
 8011814:	b2db      	uxtb	r3, r3
 8011816:	4905      	ldr	r1, [pc, #20]	@ (801182c <crcAddByte+0x3c>)
 8011818:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 801181c:	4053      	eors	r3, r2
 801181e:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 8011820:	4618      	mov	r0, r3
 8011822:	370c      	adds	r7, #12
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr
 801182c:	08018b34 	.word	0x08018b34

08011830 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b088      	sub	sp, #32
 8011834:	af00      	add	r7, sp, #0
 8011836:	4603      	mov	r3, r0
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	607a      	str	r2, [r7, #4]
 801183c:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d108      	bne.n	8011856 <crcAdd+0x26>
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d005      	beq.n	8011856 <crcAdd+0x26>
 801184a:	4b12      	ldr	r3, [pc, #72]	@ (8011894 <crcAdd+0x64>)
 801184c:	4a12      	ldr	r2, [pc, #72]	@ (8011898 <crcAdd+0x68>)
 801184e:	2185      	movs	r1, #133	@ 0x85
 8011850:	4812      	ldr	r0, [pc, #72]	@ (801189c <crcAdd+0x6c>)
 8011852:	f001 ff53 	bl	80136fc <__assert_func>
    TransferCRC    out = crc;
 8011856:	89fb      	ldrh	r3, [r7, #14]
 8011858:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 801185e:	2300      	movs	r3, #0
 8011860:	617b      	str	r3, [r7, #20]
 8011862:	e00e      	b.n	8011882 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8011864:	69bb      	ldr	r3, [r7, #24]
 8011866:	781a      	ldrb	r2, [r3, #0]
 8011868:	8bfb      	ldrh	r3, [r7, #30]
 801186a:	4611      	mov	r1, r2
 801186c:	4618      	mov	r0, r3
 801186e:	f7ff ffbf 	bl	80117f0 <crcAddByte>
 8011872:	4603      	mov	r3, r0
 8011874:	83fb      	strh	r3, [r7, #30]
        ++p;
 8011876:	69bb      	ldr	r3, [r7, #24]
 8011878:	3301      	adds	r3, #1
 801187a:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	3301      	adds	r3, #1
 8011880:	617b      	str	r3, [r7, #20]
 8011882:	697a      	ldr	r2, [r7, #20]
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	429a      	cmp	r2, r3
 8011888:	d3ec      	bcc.n	8011864 <crcAdd+0x34>
    }
    return out;
 801188a:	8bfb      	ldrh	r3, [r7, #30]
}
 801188c:	4618      	mov	r0, r3
 801188e:	3720      	adds	r7, #32
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	08018000 	.word	0x08018000
 8011898:	08018db0 	.word	0x08018db0
 801189c:	08018028 	.word	0x08018028

080118a0 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	4603      	mov	r3, r0
 80118a8:	460a      	mov	r2, r1
 80118aa:	80fb      	strh	r3, [r7, #6]
 80118ac:	4613      	mov	r3, r2
 80118ae:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 80118b0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	da05      	bge.n	80118c4 <txMakeMessageSessionSpecifier+0x24>
 80118b8:	4b0e      	ldr	r3, [pc, #56]	@ (80118f4 <txMakeMessageSessionSpecifier+0x54>)
 80118ba:	4a0f      	ldr	r2, [pc, #60]	@ (80118f8 <txMakeMessageSessionSpecifier+0x58>)
 80118bc:	21ac      	movs	r1, #172	@ 0xac
 80118be:	480f      	ldr	r0, [pc, #60]	@ (80118fc <txMakeMessageSessionSpecifier+0x5c>)
 80118c0:	f001 ff1c 	bl	80136fc <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 80118c4:	88fb      	ldrh	r3, [r7, #6]
 80118c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80118ca:	d305      	bcc.n	80118d8 <txMakeMessageSessionSpecifier+0x38>
 80118cc:	4b0c      	ldr	r3, [pc, #48]	@ (8011900 <txMakeMessageSessionSpecifier+0x60>)
 80118ce:	4a0a      	ldr	r2, [pc, #40]	@ (80118f8 <txMakeMessageSessionSpecifier+0x58>)
 80118d0:	21ad      	movs	r1, #173	@ 0xad
 80118d2:	480a      	ldr	r0, [pc, #40]	@ (80118fc <txMakeMessageSessionSpecifier+0x5c>)
 80118d4:	f001 ff12 	bl	80136fc <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 80118d8:	88fb      	ldrh	r3, [r7, #6]
 80118da:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80118de:	b29b      	uxth	r3, r3
 80118e0:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 80118e2:	797a      	ldrb	r2, [r7, #5]
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	021b      	lsls	r3, r3, #8
 80118e8:	4313      	orrs	r3, r2
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	08018058 	.word	0x08018058
 80118f8:	08018db8 	.word	0x08018db8
 80118fc:	08018028 	.word	0x08018028
 8011900:	0801806c 	.word	0x0801806c

08011904 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8011904:	b590      	push	{r4, r7, lr}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	4604      	mov	r4, r0
 801190c:	4608      	mov	r0, r1
 801190e:	4611      	mov	r1, r2
 8011910:	461a      	mov	r2, r3
 8011912:	4623      	mov	r3, r4
 8011914:	80fb      	strh	r3, [r7, #6]
 8011916:	4603      	mov	r3, r0
 8011918:	717b      	strb	r3, [r7, #5]
 801191a:	460b      	mov	r3, r1
 801191c:	713b      	strb	r3, [r7, #4]
 801191e:	4613      	mov	r3, r2
 8011920:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8011922:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	da05      	bge.n	8011936 <txMakeServiceSessionSpecifier+0x32>
 801192a:	4b17      	ldr	r3, [pc, #92]	@ (8011988 <txMakeServiceSessionSpecifier+0x84>)
 801192c:	4a17      	ldr	r2, [pc, #92]	@ (801198c <txMakeServiceSessionSpecifier+0x88>)
 801192e:	21b7      	movs	r1, #183	@ 0xb7
 8011930:	4817      	ldr	r0, [pc, #92]	@ (8011990 <txMakeServiceSessionSpecifier+0x8c>)
 8011932:	f001 fee3 	bl	80136fc <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 8011936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801193a:	2b00      	cmp	r3, #0
 801193c:	da05      	bge.n	801194a <txMakeServiceSessionSpecifier+0x46>
 801193e:	4b15      	ldr	r3, [pc, #84]	@ (8011994 <txMakeServiceSessionSpecifier+0x90>)
 8011940:	4a12      	ldr	r2, [pc, #72]	@ (801198c <txMakeServiceSessionSpecifier+0x88>)
 8011942:	21b8      	movs	r1, #184	@ 0xb8
 8011944:	4812      	ldr	r0, [pc, #72]	@ (8011990 <txMakeServiceSessionSpecifier+0x8c>)
 8011946:	f001 fed9 	bl	80136fc <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 801194a:	88fb      	ldrh	r3, [r7, #6]
 801194c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011950:	d305      	bcc.n	801195e <txMakeServiceSessionSpecifier+0x5a>
 8011952:	4b11      	ldr	r3, [pc, #68]	@ (8011998 <txMakeServiceSessionSpecifier+0x94>)
 8011954:	4a0d      	ldr	r2, [pc, #52]	@ (801198c <txMakeServiceSessionSpecifier+0x88>)
 8011956:	21b9      	movs	r1, #185	@ 0xb9
 8011958:	480d      	ldr	r0, [pc, #52]	@ (8011990 <txMakeServiceSessionSpecifier+0x8c>)
 801195a:	f001 fecf 	bl	80136fc <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 801195e:	793a      	ldrb	r2, [r7, #4]
 8011960:	78fb      	ldrb	r3, [r7, #3]
 8011962:	01db      	lsls	r3, r3, #7
 8011964:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8011966:	88fb      	ldrh	r3, [r7, #6]
 8011968:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 801196a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 801196c:	797a      	ldrb	r2, [r7, #5]
 801196e:	2a00      	cmp	r2, #0
 8011970:	d002      	beq.n	8011978 <txMakeServiceSessionSpecifier+0x74>
 8011972:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011976:	e000      	b.n	801197a <txMakeServiceSessionSpecifier+0x76>
 8011978:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 801197a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 801197c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8011980:	4618      	mov	r0, r3
 8011982:	370c      	adds	r7, #12
 8011984:	46bd      	mov	sp, r7
 8011986:	bd90      	pop	{r4, r7, pc}
 8011988:	08018058 	.word	0x08018058
 801198c:	08018dd8 	.word	0x08018dd8
 8011990:	08018028 	.word	0x08018028
 8011994:	08018080 	.word	0x08018080
 8011998:	08018094 	.word	0x08018094

0801199c <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 801199c:	b480      	push	{r7}
 801199e:	b085      	sub	sp, #20
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 80119a4:	2340      	movs	r3, #64	@ 0x40
 80119a6:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 80119a8:	2300      	movs	r3, #0
 80119aa:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2b07      	cmp	r3, #7
 80119b0:	d802      	bhi.n	80119b8 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 80119b2:	2308      	movs	r3, #8
 80119b4:	60fb      	str	r3, [r7, #12]
 80119b6:	e014      	b.n	80119e2 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 80119b8:	687a      	ldr	r2, [r7, #4]
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	429a      	cmp	r2, r3
 80119be:	d808      	bhi.n	80119d2 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 80119c0:	4a0c      	ldr	r2, [pc, #48]	@ (80119f4 <adjustPresentationLayerMTU+0x58>)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4413      	add	r3, r2
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	461a      	mov	r2, r3
 80119ca:	4b0b      	ldr	r3, [pc, #44]	@ (80119f8 <adjustPresentationLayerMTU+0x5c>)
 80119cc:	5c9b      	ldrb	r3, [r3, r2]
 80119ce:	60fb      	str	r3, [r7, #12]
 80119d0:	e007      	b.n	80119e2 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 80119d2:	4a08      	ldr	r2, [pc, #32]	@ (80119f4 <adjustPresentationLayerMTU+0x58>)
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	4413      	add	r3, r2
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	461a      	mov	r2, r3
 80119dc:	4b06      	ldr	r3, [pc, #24]	@ (80119f8 <adjustPresentationLayerMTU+0x5c>)
 80119de:	5c9b      	ldrb	r3, [r3, r2]
 80119e0:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	3b01      	subs	r3, #1
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3714      	adds	r7, #20
 80119ea:	46bd      	mov	sp, r7
 80119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	08018d44 	.word	0x08018d44
 80119f8:	08018d34 	.word	0x08018d34

080119fc <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b08a      	sub	sp, #40	@ 0x28
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	607a      	str	r2, [r7, #4]
 8011a08:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d105      	bne.n	8011a1c <txMakeCANID+0x20>
 8011a10:	4b60      	ldr	r3, [pc, #384]	@ (8011b94 <txMakeCANID+0x198>)
 8011a12:	4a61      	ldr	r2, [pc, #388]	@ (8011b98 <txMakeCANID+0x19c>)
 8011a14:	21d9      	movs	r1, #217	@ 0xd9
 8011a16:	4861      	ldr	r0, [pc, #388]	@ (8011b9c <txMakeCANID+0x1a0>)
 8011a18:	f001 fe70 	bl	80136fc <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 8011a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d105      	bne.n	8011a2e <txMakeCANID+0x32>
 8011a22:	4b5f      	ldr	r3, [pc, #380]	@ (8011ba0 <txMakeCANID+0x1a4>)
 8011a24:	4a5c      	ldr	r2, [pc, #368]	@ (8011b98 <txMakeCANID+0x19c>)
 8011a26:	21da      	movs	r1, #218	@ 0xda
 8011a28:	485c      	ldr	r0, [pc, #368]	@ (8011b9c <txMakeCANID+0x1a0>)
 8011a2a:	f001 fe67 	bl	80136fc <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011a2e:	f06f 0301 	mvn.w	r3, #1
 8011a32:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	785b      	ldrb	r3, [r3, #1]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d157      	bne.n	8011aec <txMakeCANID+0xf0>
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	791b      	ldrb	r3, [r3, #4]
 8011a40:	2bff      	cmp	r3, #255	@ 0xff
 8011a42:	d153      	bne.n	8011aec <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8011a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011a4c:	d24e      	bcs.n	8011aec <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	db11      	blt.n	8011a7a <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	885b      	ldrh	r3, [r3, #2]
 8011a5a:	78fa      	ldrb	r2, [r7, #3]
 8011a5c:	4611      	mov	r1, r2
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7ff ff1e 	bl	80118a0 <txMakeMessageSessionSpecifier>
 8011a64:	4603      	mov	r3, r0
 8011a66:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8011a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	da75      	bge.n	8011b5a <txMakeCANID+0x15e>
 8011a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8011ba4 <txMakeCANID+0x1a8>)
 8011a70:	4a49      	ldr	r2, [pc, #292]	@ (8011b98 <txMakeCANID+0x19c>)
 8011a72:	21e2      	movs	r1, #226	@ 0xe2
 8011a74:	4849      	ldr	r0, [pc, #292]	@ (8011b9c <txMakeCANID+0x1a0>)
 8011a76:	f001 fe41 	bl	80136fc <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d830      	bhi.n	8011ae4 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d108      	bne.n	8011a9a <txMakeCANID+0x9e>
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d005      	beq.n	8011a9a <txMakeCANID+0x9e>
 8011a8e:	4b46      	ldr	r3, [pc, #280]	@ (8011ba8 <txMakeCANID+0x1ac>)
 8011a90:	4a41      	ldr	r2, [pc, #260]	@ (8011b98 <txMakeCANID+0x19c>)
 8011a92:	21e6      	movs	r1, #230	@ 0xe6
 8011a94:	4841      	ldr	r0, [pc, #260]	@ (8011b9c <txMakeCANID+0x1a0>)
 8011a96:	f001 fe31 	bl	80136fc <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	68b9      	ldr	r1, [r7, #8]
 8011a9e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8011aa2:	f7ff fec5 	bl	8011830 <crcAdd>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	885b      	ldrh	r3, [r3, #2]
 8011ab6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8011aba:	4611      	mov	r1, r2
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7ff feef 	bl	80118a0 <txMakeMessageSessionSpecifier>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011ac8:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011ad0:	d305      	bcc.n	8011ade <txMakeCANID+0xe2>
 8011ad2:	4b36      	ldr	r3, [pc, #216]	@ (8011bac <txMakeCANID+0x1b0>)
 8011ad4:	4a30      	ldr	r2, [pc, #192]	@ (8011b98 <txMakeCANID+0x19c>)
 8011ad6:	21e9      	movs	r1, #233	@ 0xe9
 8011ad8:	4830      	ldr	r0, [pc, #192]	@ (8011b9c <txMakeCANID+0x1a0>)
 8011ada:	f001 fe0f 	bl	80136fc <__assert_func>
            out = (int32_t) spec;
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011ae2:	e03a      	b.n	8011b5a <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8011ae4:	f06f 0301 	mvn.w	r3, #1
 8011ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011aea:	e036      	b.n	8011b5a <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	785b      	ldrb	r3, [r3, #1]
 8011af0:	2b02      	cmp	r3, #2
 8011af2:	d003      	beq.n	8011afc <txMakeCANID+0x100>
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	785b      	ldrb	r3, [r3, #1]
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	d12a      	bne.n	8011b52 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	791b      	ldrb	r3, [r3, #4]
 8011b00:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	db25      	blt.n	8011b52 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	885b      	ldrh	r3, [r3, #2]
 8011b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b0e:	d220      	bcs.n	8011b52 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	db18      	blt.n	8011b4a <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8011b20:	2b02      	cmp	r3, #2
 8011b22:	bf0c      	ite	eq
 8011b24:	2301      	moveq	r3, #1
 8011b26:	2300      	movne	r3, #0
 8011b28:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8011b2e:	78fa      	ldrb	r2, [r7, #3]
 8011b30:	f7ff fee8 	bl	8011904 <txMakeServiceSessionSpecifier>
 8011b34:	4603      	mov	r3, r0
 8011b36:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8011b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	da0f      	bge.n	8011b5e <txMakeCANID+0x162>
 8011b3e:	4b19      	ldr	r3, [pc, #100]	@ (8011ba4 <txMakeCANID+0x1a8>)
 8011b40:	4a15      	ldr	r2, [pc, #84]	@ (8011b98 <txMakeCANID+0x19c>)
 8011b42:	21fa      	movs	r1, #250	@ 0xfa
 8011b44:	4815      	ldr	r0, [pc, #84]	@ (8011b9c <txMakeCANID+0x1a0>)
 8011b46:	f001 fdd9 	bl	80136fc <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 8011b4a:	f06f 0301 	mvn.w	r3, #1
 8011b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011b50:	e005      	b.n	8011b5e <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011b52:	f06f 0301 	mvn.w	r3, #1
 8011b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b58:	e002      	b.n	8011b60 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011b5a:	bf00      	nop
 8011b5c:	e000      	b.n	8011b60 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011b5e:	bf00      	nop
    }

    if (out >= 0)
 8011b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	db10      	blt.n	8011b88 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	2b07      	cmp	r3, #7
 8011b70:	d807      	bhi.n	8011b82 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	069a      	lsls	r2, r3, #26
 8011b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b78:	4313      	orrs	r3, r2
 8011b7a:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b80:	e002      	b.n	8011b88 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011b82:	f06f 0301 	mvn.w	r3, #1
 8011b86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 8011b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3728      	adds	r7, #40	@ 0x28
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}
 8011b92:	bf00      	nop
 8011b94:	080180a8 	.word	0x080180a8
 8011b98:	08018da4 	.word	0x08018da4
 8011b9c:	08018028 	.word	0x08018028
 8011ba0:	080180bc 	.word	0x080180bc
 8011ba4:	080180d8 	.word	0x080180d8
 8011ba8:	080180e4 	.word	0x080180e4
 8011bac:	08018118 	.word	0x08018118

08011bb0 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8011bb0:	b590      	push	{r4, r7, lr}
 8011bb2:	b083      	sub	sp, #12
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	4608      	mov	r0, r1
 8011bba:	4611      	mov	r1, r2
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	4623      	mov	r3, r4
 8011bc0:	71fb      	strb	r3, [r7, #7]
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	71bb      	strb	r3, [r7, #6]
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	717b      	strb	r3, [r7, #5]
 8011bca:	4613      	mov	r3, r2
 8011bcc:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 8011bce:	79fb      	ldrb	r3, [r7, #7]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d009      	beq.n	8011be8 <txMakeTailByte+0x38>
 8011bd4:	797b      	ldrb	r3, [r7, #5]
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d006      	beq.n	8011be8 <txMakeTailByte+0x38>
 8011bda:	4b13      	ldr	r3, [pc, #76]	@ (8011c28 <txMakeTailByte+0x78>)
 8011bdc:	4a13      	ldr	r2, [pc, #76]	@ (8011c2c <txMakeTailByte+0x7c>)
 8011bde:	f240 111b 	movw	r1, #283	@ 0x11b
 8011be2:	4813      	ldr	r0, [pc, #76]	@ (8011c30 <txMakeTailByte+0x80>)
 8011be4:	f001 fd8a 	bl	80136fc <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8011be8:	79fb      	ldrb	r3, [r7, #7]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d001      	beq.n	8011bf2 <txMakeTailByte+0x42>
 8011bee:	2280      	movs	r2, #128	@ 0x80
 8011bf0:	e000      	b.n	8011bf4 <txMakeTailByte+0x44>
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	79bb      	ldrb	r3, [r7, #6]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d001      	beq.n	8011bfe <txMakeTailByte+0x4e>
 8011bfa:	2340      	movs	r3, #64	@ 0x40
 8011bfc:	e000      	b.n	8011c00 <txMakeTailByte+0x50>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	4313      	orrs	r3, r2
 8011c02:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 8011c04:	797a      	ldrb	r2, [r7, #5]
 8011c06:	2a00      	cmp	r2, #0
 8011c08:	d001      	beq.n	8011c0e <txMakeTailByte+0x5e>
 8011c0a:	2220      	movs	r2, #32
 8011c0c:	e000      	b.n	8011c10 <txMakeTailByte+0x60>
 8011c0e:	2200      	movs	r2, #0
 8011c10:	4313      	orrs	r3, r2
 8011c12:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 8011c14:	793b      	ldrb	r3, [r7, #4]
 8011c16:	f003 031f 	and.w	r3, r3, #31
 8011c1a:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	b2db      	uxtb	r3, r3
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	370c      	adds	r7, #12
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd90      	pop	{r4, r7, pc}
 8011c28:	08018134 	.word	0x08018134
 8011c2c:	08018e4c 	.word	0x08018e4c
 8011c30:	08018028 	.word	0x08018028

08011c34 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2b40      	cmp	r3, #64	@ 0x40
 8011c40:	d906      	bls.n	8011c50 <txRoundFramePayloadSizeUp+0x1c>
 8011c42:	4b0f      	ldr	r3, [pc, #60]	@ (8011c80 <txRoundFramePayloadSizeUp+0x4c>)
 8011c44:	4a0f      	ldr	r2, [pc, #60]	@ (8011c84 <txRoundFramePayloadSizeUp+0x50>)
 8011c46:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8011c4a:	480f      	ldr	r0, [pc, #60]	@ (8011c88 <txRoundFramePayloadSizeUp+0x54>)
 8011c4c:	f001 fd56 	bl	80136fc <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8011c50:	4a0e      	ldr	r2, [pc, #56]	@ (8011c8c <txRoundFramePayloadSizeUp+0x58>)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	4413      	add	r3, r2
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2b0f      	cmp	r3, #15
 8011c5e:	d906      	bls.n	8011c6e <txRoundFramePayloadSizeUp+0x3a>
 8011c60:	4b0b      	ldr	r3, [pc, #44]	@ (8011c90 <txRoundFramePayloadSizeUp+0x5c>)
 8011c62:	4a08      	ldr	r2, [pc, #32]	@ (8011c84 <txRoundFramePayloadSizeUp+0x50>)
 8011c64:	f240 1127 	movw	r1, #295	@ 0x127
 8011c68:	4807      	ldr	r0, [pc, #28]	@ (8011c88 <txRoundFramePayloadSizeUp+0x54>)
 8011c6a:	f001 fd47 	bl	80136fc <__assert_func>
    return CanardCANDLCToLength[y];
 8011c6e:	4a09      	ldr	r2, [pc, #36]	@ (8011c94 <txRoundFramePayloadSizeUp+0x60>)
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	4413      	add	r3, r2
 8011c74:	781b      	ldrb	r3, [r3, #0]
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3710      	adds	r7, #16
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	0801815c 	.word	0x0801815c
 8011c84:	08018e1c 	.word	0x08018e1c
 8011c88:	08018028 	.word	0x08018028
 8011c8c:	08018d44 	.word	0x08018d44
 8011c90:	080181a4 	.word	0x080181a4
 8011c94:	08018d34 	.word	0x08018d34

08011c98 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b086      	sub	sp, #24
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	60b9      	str	r1, [r7, #8]
 8011ca2:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d106      	bne.n	8011cba <txAllocateQueueItem+0x22>
 8011cac:	4b1f      	ldr	r3, [pc, #124]	@ (8011d2c <txAllocateQueueItem+0x94>)
 8011cae:	4a20      	ldr	r2, [pc, #128]	@ (8011d30 <txAllocateQueueItem+0x98>)
 8011cb0:	f240 1131 	movw	r1, #305	@ 0x131
 8011cb4:	481f      	ldr	r0, [pc, #124]	@ (8011d34 <txAllocateQueueItem+0x9c>)
 8011cb6:	f001 fd21 	bl	80136fc <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 8011cba:	6a3b      	ldr	r3, [r7, #32]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d106      	bne.n	8011cce <txAllocateQueueItem+0x36>
 8011cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8011d38 <txAllocateQueueItem+0xa0>)
 8011cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8011d30 <txAllocateQueueItem+0x98>)
 8011cc4:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8011cc8:	481a      	ldr	r0, [pc, #104]	@ (8011d34 <txAllocateQueueItem+0x9c>)
 8011cca:	f001 fd17 	bl	80136fc <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	6a3a      	ldr	r2, [r7, #32]
 8011cd4:	3230      	adds	r2, #48	@ 0x30
 8011cd6:	4611      	mov	r1, r2
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	4798      	blx	r3
 8011cdc:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d01e      	beq.n	8011d22 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	2200      	movs	r2, #0
 8011cee:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 8011d02:	6979      	ldr	r1, [r7, #20]
 8011d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d08:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	6a3a      	ldr	r2, [r7, #32]
 8011d10:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	68ba      	ldr	r2, [r7, #8]
 8011d20:	621a      	str	r2, [r3, #32]
    }
    return out;
 8011d22:	697b      	ldr	r3, [r7, #20]
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3718      	adds	r7, #24
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	080181ec 	.word	0x080181ec
 8011d30:	08018e38 	.word	0x08018e38
 8011d34:	08018028 	.word	0x08018028
 8011d38:	08018200 	.word	0x08018200

08011d3c <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d002      	beq.n	8011d5a <txAVLPredicate+0x1e>
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d106      	bne.n	8011d68 <txAVLPredicate+0x2c>
 8011d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8011d84 <txAVLPredicate+0x48>)
 8011d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8011d88 <txAVLPredicate+0x4c>)
 8011d5e:	f240 114d 	movw	r1, #333	@ 0x14d
 8011d62:	480a      	ldr	r0, [pc, #40]	@ (8011d8c <txAVLPredicate+0x50>)
 8011d64:	f001 fcca 	bl	80136fc <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	6a1a      	ldr	r2, [r3, #32]
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	6a1b      	ldr	r3, [r3, #32]
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d301      	bcc.n	8011d78 <txAVLPredicate+0x3c>
 8011d74:	2301      	movs	r3, #1
 8011d76:	e001      	b.n	8011d7c <txAVLPredicate+0x40>
 8011d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}
 8011d84:	08018214 	.word	0x08018214
 8011d88:	08018e0c 	.word	0x08018e0c
 8011d8c:	08018028 	.word	0x08018028

08011d90 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8011d90:	b590      	push	{r4, r7, lr}
 8011d92:	b08d      	sub	sp, #52	@ 0x34
 8011d94:	af02      	add	r7, sp, #8
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d106      	bne.n	8011db2 <txPushSingleFrame+0x22>
 8011da4:	4b5c      	ldr	r3, [pc, #368]	@ (8011f18 <txPushSingleFrame+0x188>)
 8011da6:	4a5d      	ldr	r2, [pc, #372]	@ (8011f1c <txPushSingleFrame+0x18c>)
 8011da8:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 8011dac:	485c      	ldr	r0, [pc, #368]	@ (8011f20 <txPushSingleFrame+0x190>)
 8011dae:	f001 fca5 	bl	80136fc <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 8011db2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d109      	bne.n	8011dcc <txPushSingleFrame+0x3c>
 8011db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d006      	beq.n	8011dcc <txPushSingleFrame+0x3c>
 8011dbe:	4b59      	ldr	r3, [pc, #356]	@ (8011f24 <txPushSingleFrame+0x194>)
 8011dc0:	4a56      	ldr	r2, [pc, #344]	@ (8011f1c <txPushSingleFrame+0x18c>)
 8011dc2:	f240 115b 	movw	r1, #347	@ 0x15b
 8011dc6:	4856      	ldr	r0, [pc, #344]	@ (8011f20 <txPushSingleFrame+0x190>)
 8011dc8:	f001 fc98 	bl	80136fc <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 8011dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011dce:	3301      	adds	r3, #1
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7ff ff2f 	bl	8011c34 <txRoundFramePayloadSizeUp>
 8011dd6:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8011dd8:	6a3a      	ldr	r2, [r7, #32]
 8011dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d806      	bhi.n	8011dee <txPushSingleFrame+0x5e>
 8011de0:	4b51      	ldr	r3, [pc, #324]	@ (8011f28 <txPushSingleFrame+0x198>)
 8011de2:	4a4e      	ldr	r2, [pc, #312]	@ (8011f1c <txPushSingleFrame+0x18c>)
 8011de4:	f240 115d 	movw	r1, #349	@ 0x15d
 8011de8:	484d      	ldr	r0, [pc, #308]	@ (8011f20 <txPushSingleFrame+0x190>)
 8011dea:	f001 fc87 	bl	80136fc <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 8011dee:	6a3a      	ldr	r2, [r7, #32]
 8011df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011df2:	1ad3      	subs	r3, r2, r3
 8011df4:	3b01      	subs	r3, #1
 8011df6:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 8011df8:	69fa      	ldr	r2, [r7, #28]
 8011dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011dfc:	4413      	add	r3, r2
 8011dfe:	3301      	adds	r3, #1
 8011e00:	6a3a      	ldr	r2, [r7, #32]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d006      	beq.n	8011e14 <txPushSingleFrame+0x84>
 8011e06:	4b49      	ldr	r3, [pc, #292]	@ (8011f2c <txPushSingleFrame+0x19c>)
 8011e08:	4a44      	ldr	r2, [pc, #272]	@ (8011f1c <txPushSingleFrame+0x18c>)
 8011e0a:	f240 115f 	movw	r1, #351	@ 0x15f
 8011e0e:	4844      	ldr	r0, [pc, #272]	@ (8011f20 <txPushSingleFrame+0x190>)
 8011e10:	f001 fc74 	bl	80136fc <__assert_func>
    int32_t       out = 0;
 8011e14:	2300      	movs	r3, #0
 8011e16:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	689a      	ldr	r2, [r3, #8]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d209      	bcs.n	8011e38 <txPushSingleFrame+0xa8>
 8011e24:	6a3b      	ldr	r3, [r7, #32]
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e2e:	68b8      	ldr	r0, [r7, #8]
 8011e30:	f7ff ff32 	bl	8011c98 <txAllocateQueueItem>
 8011e34:	4603      	mov	r3, r0
 8011e36:	e000      	b.n	8011e3a <txPushSingleFrame+0xaa>
 8011e38:	2300      	movs	r3, #0
    TxItem* const tqi =
 8011e3a:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 8011e3c:	69bb      	ldr	r3, [r7, #24]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d054      	beq.n	8011eec <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8011e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d010      	beq.n	8011e6a <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8011e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d106      	bne.n	8011e5c <txPushSingleFrame+0xcc>
 8011e4e:	4b38      	ldr	r3, [pc, #224]	@ (8011f30 <txPushSingleFrame+0x1a0>)
 8011e50:	4a32      	ldr	r2, [pc, #200]	@ (8011f1c <txPushSingleFrame+0x18c>)
 8011e52:	f240 1167 	movw	r1, #359	@ 0x167
 8011e56:	4832      	ldr	r0, [pc, #200]	@ (8011f20 <txPushSingleFrame+0x190>)
 8011e58:	f001 fc50 	bl	80136fc <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 8011e5c:	69bb      	ldr	r3, [r7, #24]
 8011e5e:	3330      	adds	r3, #48	@ 0x30
 8011e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011e62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011e64:	4618      	mov	r0, r3
 8011e66:	f002 fdea 	bl	8014a3e <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 8011e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e6c:	3330      	adds	r3, #48	@ 0x30
 8011e6e:	69ba      	ldr	r2, [r7, #24]
 8011e70:	4413      	add	r3, r2
 8011e72:	69fa      	ldr	r2, [r7, #28]
 8011e74:	2100      	movs	r1, #0
 8011e76:	4618      	mov	r0, r3
 8011e78:	f002 fcfb 	bl	8014872 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 8011e7c:	6a3b      	ldr	r3, [r7, #32]
 8011e7e:	1e5c      	subs	r4, r3, #1
 8011e80:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8011e84:	2201      	movs	r2, #1
 8011e86:	2101      	movs	r1, #1
 8011e88:	2001      	movs	r0, #1
 8011e8a:	f7ff fe91 	bl	8011bb0 <txMakeTailByte>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	461a      	mov	r2, r3
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	4423      	add	r3, r4
 8011e96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f103 000c 	add.w	r0, r3, #12
 8011ea0:	69b9      	ldr	r1, [r7, #24]
 8011ea2:	4b24      	ldr	r3, [pc, #144]	@ (8011f34 <txPushSingleFrame+0x1a4>)
 8011ea4:	4a24      	ldr	r2, [pc, #144]	@ (8011f38 <txPushSingleFrame+0x1a8>)
 8011ea6:	f7ff fae7 	bl	8011478 <cavlSearch>
 8011eaa:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 8011eac:	69bb      	ldr	r3, [r7, #24]
 8011eae:	697a      	ldr	r2, [r7, #20]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d006      	beq.n	8011ec2 <txPushSingleFrame+0x132>
 8011eb4:	4b21      	ldr	r3, [pc, #132]	@ (8011f3c <txPushSingleFrame+0x1ac>)
 8011eb6:	4a19      	ldr	r2, [pc, #100]	@ (8011f1c <txPushSingleFrame+0x18c>)
 8011eb8:	f240 1173 	movw	r1, #371	@ 0x173
 8011ebc:	4818      	ldr	r0, [pc, #96]	@ (8011f20 <txPushSingleFrame+0x190>)
 8011ebe:	f001 fc1d 	bl	80136fc <__assert_func>
        que->size++;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	689b      	ldr	r3, [r3, #8]
 8011ec6:	1c5a      	adds	r2, r3, #1
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	689a      	ldr	r2, [r3, #8]
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d906      	bls.n	8011ee6 <txPushSingleFrame+0x156>
 8011ed8:	4b19      	ldr	r3, [pc, #100]	@ (8011f40 <txPushSingleFrame+0x1b0>)
 8011eda:	4a10      	ldr	r2, [pc, #64]	@ (8011f1c <txPushSingleFrame+0x18c>)
 8011edc:	f240 1175 	movw	r1, #373	@ 0x175
 8011ee0:	480f      	ldr	r0, [pc, #60]	@ (8011f20 <txPushSingleFrame+0x190>)
 8011ee2:	f001 fc0b 	bl	80136fc <__assert_func>
        out = 1;  // One frame enqueued.
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8011eea:	e002      	b.n	8011ef2 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8011eec:	f06f 0302 	mvn.w	r3, #2
 8011ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 8011ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	db09      	blt.n	8011f0c <txPushSingleFrame+0x17c>
 8011ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011efa:	2b01      	cmp	r3, #1
 8011efc:	d006      	beq.n	8011f0c <txPushSingleFrame+0x17c>
 8011efe:	4b11      	ldr	r3, [pc, #68]	@ (8011f44 <txPushSingleFrame+0x1b4>)
 8011f00:	4a06      	ldr	r2, [pc, #24]	@ (8011f1c <txPushSingleFrame+0x18c>)
 8011f02:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8011f06:	4806      	ldr	r0, [pc, #24]	@ (8011f20 <txPushSingleFrame+0x190>)
 8011f08:	f001 fbf8 	bl	80136fc <__assert_func>
    return out;
 8011f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	372c      	adds	r7, #44	@ 0x2c
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd90      	pop	{r4, r7, pc}
 8011f16:	bf00      	nop
 8011f18:	080181ec 	.word	0x080181ec
 8011f1c:	08018df8 	.word	0x08018df8
 8011f20:	08018028 	.word	0x08018028
 8011f24:	08018248 	.word	0x08018248
 8011f28:	08018278 	.word	0x08018278
 8011f2c:	0801829c 	.word	0x0801829c
 8011f30:	080182d8 	.word	0x080182d8
 8011f34:	080117d9 	.word	0x080117d9
 8011f38:	08011d3d 	.word	0x08011d3d
 8011f3c:	080182f0 	.word	0x080182f0
 8011f40:	08018308 	.word	0x08018308
 8011f44:	08018324 	.word	0x08018324

08011f48 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 8011f48:	b590      	push	{r4, r7, lr}
 8011f4a:	b093      	sub	sp, #76	@ 0x4c
 8011f4c:	af02      	add	r7, sp, #8
 8011f4e:	60f8      	str	r0, [r7, #12]
 8011f50:	60b9      	str	r1, [r7, #8]
 8011f52:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d106      	bne.n	8011f68 <txGenerateMultiFrameChain+0x20>
 8011f5a:	4b93      	ldr	r3, [pc, #588]	@ (80121a8 <txGenerateMultiFrameChain+0x260>)
 8011f5c:	4a93      	ldr	r2, [pc, #588]	@ (80121ac <txGenerateMultiFrameChain+0x264>)
 8011f5e:	f240 1189 	movw	r1, #393	@ 0x189
 8011f62:	4893      	ldr	r0, [pc, #588]	@ (80121b0 <txGenerateMultiFrameChain+0x268>)
 8011f64:	f001 fbca 	bl	80136fc <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d106      	bne.n	8011f7c <txGenerateMultiFrameChain+0x34>
 8011f6e:	4b91      	ldr	r3, [pc, #580]	@ (80121b4 <txGenerateMultiFrameChain+0x26c>)
 8011f70:	4a8e      	ldr	r2, [pc, #568]	@ (80121ac <txGenerateMultiFrameChain+0x264>)
 8011f72:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8011f76:	488e      	ldr	r0, [pc, #568]	@ (80121b0 <txGenerateMultiFrameChain+0x268>)
 8011f78:	f001 fbc0 	bl	80136fc <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8011f7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d806      	bhi.n	8011f92 <txGenerateMultiFrameChain+0x4a>
 8011f84:	4b8c      	ldr	r3, [pc, #560]	@ (80121b8 <txGenerateMultiFrameChain+0x270>)
 8011f86:	4a89      	ldr	r2, [pc, #548]	@ (80121ac <txGenerateMultiFrameChain+0x264>)
 8011f88:	f240 118b 	movw	r1, #395	@ 0x18b
 8011f8c:	4888      	ldr	r0, [pc, #544]	@ (80121b0 <txGenerateMultiFrameChain+0x268>)
 8011f8e:	f001 fbb5 	bl	80136fc <__assert_func>
    CANARD_ASSERT(payload != NULL);
 8011f92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d106      	bne.n	8011fa6 <txGenerateMultiFrameChain+0x5e>
 8011f98:	4b88      	ldr	r3, [pc, #544]	@ (80121bc <txGenerateMultiFrameChain+0x274>)
 8011f9a:	4a84      	ldr	r2, [pc, #528]	@ (80121ac <txGenerateMultiFrameChain+0x264>)
 8011f9c:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8011fa0:	4883      	ldr	r0, [pc, #524]	@ (80121b0 <txGenerateMultiFrameChain+0x268>)
 8011fa2:	f001 fbab 	bl	80136fc <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	613b      	str	r3, [r7, #16]
 8011faa:	2300      	movs	r3, #0
 8011fac:	617b      	str	r3, [r7, #20]
 8011fae:	2300      	movs	r3, #0
 8011fb0:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8011fb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011fb4:	3302      	adds	r3, #2
 8011fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8011fbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011fbe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011fc0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8011fc4:	f7ff fc34 	bl	8011830 <crcAdd>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 8011fd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 8011fd6:	e0d4      	b.n	8012182 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8011fd8:	69bb      	ldr	r3, [r7, #24]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8011fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fe2:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d908      	bls.n	8011ffc <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 8011fea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fee:	1ad3      	subs	r3, r2, r3
 8011ff0:	3301      	adds	r3, #1
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7ff fe1e 	bl	8011c34 <txRoundFramePayloadSizeUp>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	e001      	b.n	8012000 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8012000:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 8012002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801200a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801200c:	68b8      	ldr	r0, [r7, #8]
 801200e:	f7ff fe43 	bl	8011c98 <txAllocateQueueItem>
 8012012:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d102      	bne.n	8012020 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 801201a:	6a3b      	ldr	r3, [r7, #32]
 801201c:	613b      	str	r3, [r7, #16]
 801201e:	e002      	b.n	8012026 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	6a3a      	ldr	r2, [r7, #32]
 8012024:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 8012026:	6a3b      	ldr	r3, [r7, #32]
 8012028:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	2b00      	cmp	r3, #0
 801202e:	f000 80ae 	beq.w	801218e <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 8012032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012034:	3b01      	subs	r3, #1
 8012036:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 8012038:	2300      	movs	r3, #0
 801203a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 801203c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801203e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012040:	429a      	cmp	r2, r3
 8012042:	d21c      	bcs.n	801207e <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 8012044:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012048:	1ad3      	subs	r3, r2, r3
 801204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 801204c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	429a      	cmp	r2, r3
 8012052:	d901      	bls.n	8012058 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	3330      	adds	r3, #48	@ 0x30
 801205c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801205e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012060:	4618      	mov	r0, r3
 8012062:	f002 fcec 	bl	8014a3e <memcpy>
            frame_offset = frame_offset + move_size;
 8012066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801206a:	4413      	add	r3, r2
 801206c:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 801206e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012072:	4413      	add	r3, r2
 8012074:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 8012076:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801207a:	4413      	add	r3, r2
 801207c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 801207e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012080:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012082:	429a      	cmp	r2, r3
 8012084:	d343      	bcc.n	801210e <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8012086:	e00f      	b.n	80120a8 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8012088:	697a      	ldr	r2, [r7, #20]
 801208a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801208c:	4413      	add	r3, r2
 801208e:	3330      	adds	r3, #48	@ 0x30
 8012090:	2200      	movs	r2, #0
 8012092:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8012094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012096:	3301      	adds	r3, #1
 8012098:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 801209a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801209c:	2100      	movs	r1, #0
 801209e:	4618      	mov	r0, r3
 80120a0:	f7ff fba6 	bl	80117f0 <crcAddByte>
 80120a4:	4603      	mov	r3, r0
 80120a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 80120a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120aa:	3302      	adds	r3, #2
 80120ac:	69fa      	ldr	r2, [r7, #28]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d8ea      	bhi.n	8012088 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 80120b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d213      	bcs.n	80120e2 <txGenerateMultiFrameChain+0x19a>
 80120ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80120bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80120be:	429a      	cmp	r2, r3
 80120c0:	d10f      	bne.n	80120e2 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 80120c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80120c4:	0a1b      	lsrs	r3, r3, #8
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	697a      	ldr	r2, [r7, #20]
 80120ca:	b2d9      	uxtb	r1, r3
 80120cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ce:	4413      	add	r3, r2
 80120d0:	3330      	adds	r3, #48	@ 0x30
 80120d2:	460a      	mov	r2, r1
 80120d4:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 80120d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120d8:	3301      	adds	r3, #1
 80120da:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 80120dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120de:	3301      	adds	r3, #1
 80120e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 80120e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d211      	bcs.n	801210e <txGenerateMultiFrameChain+0x1c6>
 80120ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80120ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d90d      	bls.n	801210e <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 80120f2:	697a      	ldr	r2, [r7, #20]
 80120f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80120f6:	b2d9      	uxtb	r1, r3
 80120f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120fa:	4413      	add	r3, r2
 80120fc:	3330      	adds	r3, #48	@ 0x30
 80120fe:	460a      	mov	r2, r1
 8012100:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8012102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012104:	3301      	adds	r3, #1
 8012106:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8012108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801210a:	3301      	adds	r3, #1
 801210c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 801210e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012110:	1c5a      	adds	r2, r3, #1
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012116:	429a      	cmp	r2, r3
 8012118:	d006      	beq.n	8012128 <txGenerateMultiFrameChain+0x1e0>
 801211a:	4b29      	ldr	r3, [pc, #164]	@ (80121c0 <txGenerateMultiFrameChain+0x278>)
 801211c:	4a23      	ldr	r2, [pc, #140]	@ (80121ac <txGenerateMultiFrameChain+0x264>)
 801211e:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8012122:	4823      	ldr	r0, [pc, #140]	@ (80121b0 <txGenerateMultiFrameChain+0x268>)
 8012124:	f001 faea 	bl	80136fc <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8012128:	693a      	ldr	r2, [r7, #16]
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	429a      	cmp	r2, r3
 801212e:	bf0c      	ite	eq
 8012130:	2301      	moveq	r3, #1
 8012132:	2300      	movne	r3, #0
 8012134:	b2d8      	uxtb	r0, r3
 8012136:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801213a:	429a      	cmp	r2, r3
 801213c:	bf2c      	ite	cs
 801213e:	2301      	movcs	r3, #1
 8012140:	2300      	movcc	r3, #0
 8012142:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8012144:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8012146:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 801214a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 801214e:	f7ff fd2f 	bl	8011bb0 <txMakeTailByte>
 8012152:	4603      	mov	r3, r0
 8012154:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8012156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012158:	4423      	add	r3, r4
 801215a:	3330      	adds	r3, #48	@ 0x30
 801215c:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 801215e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8012162:	2b00      	cmp	r3, #0
 8012164:	bf14      	ite	ne
 8012166:	2301      	movne	r3, #1
 8012168:	2300      	moveq	r3, #0
 801216a:	b2db      	uxtb	r3, r3
 801216c:	f083 0301 	eor.w	r3, r3, #1
 8012170:	b2db      	uxtb	r3, r3
 8012172:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8012176:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801217a:	f003 0301 	and.w	r3, r3, #1
 801217e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 8012182:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012186:	429a      	cmp	r2, r3
 8012188:	f4ff af26 	bcc.w	8011fd8 <txGenerateMultiFrameChain+0x90>
 801218c:	e000      	b.n	8012190 <txGenerateMultiFrameChain+0x248>
            break;
 801218e:	bf00      	nop
    }
    return out;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	461c      	mov	r4, r3
 8012194:	f107 0310 	add.w	r3, r7, #16
 8012198:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801219c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80121a0:	68f8      	ldr	r0, [r7, #12]
 80121a2:	3744      	adds	r7, #68	@ 0x44
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd90      	pop	{r4, r7, pc}
 80121a8:	080181ec 	.word	0x080181ec
 80121ac:	08018ec8 	.word	0x08018ec8
 80121b0:	08018028 	.word	0x08018028
 80121b4:	0801833c 	.word	0x0801833c
 80121b8:	08018358 	.word	0x08018358
 80121bc:	080182d8 	.word	0x080182d8
 80121c0:	08018380 	.word	0x08018380

080121c4 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b094      	sub	sp, #80	@ 0x50
 80121c8:	af06      	add	r7, sp, #24
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d002      	beq.n	80121dc <txPushMultiFrame+0x18>
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d106      	bne.n	80121ea <txPushMultiFrame+0x26>
 80121dc:	4b65      	ldr	r3, [pc, #404]	@ (8012374 <txPushMultiFrame+0x1b0>)
 80121de:	4a66      	ldr	r2, [pc, #408]	@ (8012378 <txPushMultiFrame+0x1b4>)
 80121e0:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 80121e4:	4865      	ldr	r0, [pc, #404]	@ (801237c <txPushMultiFrame+0x1b8>)
 80121e6:	f001 fa89 	bl	80136fc <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d106      	bne.n	80121fe <txPushMultiFrame+0x3a>
 80121f0:	4b63      	ldr	r3, [pc, #396]	@ (8012380 <txPushMultiFrame+0x1bc>)
 80121f2:	4a61      	ldr	r2, [pc, #388]	@ (8012378 <txPushMultiFrame+0x1b4>)
 80121f4:	f240 11ed 	movw	r1, #493	@ 0x1ed
 80121f8:	4860      	ldr	r0, [pc, #384]	@ (801237c <txPushMultiFrame+0x1b8>)
 80121fa:	f001 fa7f 	bl	80136fc <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 80121fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	429a      	cmp	r2, r3
 8012204:	d806      	bhi.n	8012214 <txPushMultiFrame+0x50>
 8012206:	4b5f      	ldr	r3, [pc, #380]	@ (8012384 <txPushMultiFrame+0x1c0>)
 8012208:	4a5b      	ldr	r2, [pc, #364]	@ (8012378 <txPushMultiFrame+0x1b4>)
 801220a:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 801220e:	485b      	ldr	r0, [pc, #364]	@ (801237c <txPushMultiFrame+0x1b8>)
 8012210:	f001 fa74 	bl	80136fc <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 8012214:	2300      	movs	r3, #0
 8012216:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8012218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801221a:	3302      	adds	r3, #2
 801221c:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 801221e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	4413      	add	r3, r2
 8012224:	1e5a      	subs	r2, r3, #1
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	fbb2 f3f3 	udiv	r3, r2, r3
 801222c:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 801222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012230:	2b01      	cmp	r3, #1
 8012232:	d806      	bhi.n	8012242 <txPushMultiFrame+0x7e>
 8012234:	4b54      	ldr	r3, [pc, #336]	@ (8012388 <txPushMultiFrame+0x1c4>)
 8012236:	4a50      	ldr	r2, [pc, #320]	@ (8012378 <txPushMultiFrame+0x1b4>)
 8012238:	f240 11f3 	movw	r1, #499	@ 0x1f3
 801223c:	484f      	ldr	r0, [pc, #316]	@ (801237c <txPushMultiFrame+0x1b8>)
 801223e:	f001 fa5d 	bl	80136fc <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	689a      	ldr	r2, [r3, #8]
 8012246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012248:	441a      	add	r2, r3
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	429a      	cmp	r2, r3
 8012250:	d87b      	bhi.n	801234a <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 8012252:	f107 0010 	add.w	r0, r7, #16
 8012256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012258:	9305      	str	r3, [sp, #20]
 801225a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801225c:	9304      	str	r3, [sp, #16]
 801225e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8012262:	9303      	str	r3, [sp, #12]
 8012264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012266:	9302      	str	r3, [sp, #8]
 8012268:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801226c:	e9cd 2300 	strd	r2, r3, [sp]
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	68b9      	ldr	r1, [r7, #8]
 8012274:	f7ff fe68 	bl	8011f48 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d051      	beq.n	8012322 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	f103 000c 	add.w	r0, r3, #12
 8012288:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801228a:	4b40      	ldr	r3, [pc, #256]	@ (801238c <txPushMultiFrame+0x1c8>)
 801228c:	4a40      	ldr	r2, [pc, #256]	@ (8012390 <txPushMultiFrame+0x1cc>)
 801228e:	f7ff f8f3 	bl	8011478 <cavlSearch>
 8012292:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 8012294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012296:	69fa      	ldr	r2, [r7, #28]
 8012298:	429a      	cmp	r2, r3
 801229a:	d006      	beq.n	80122aa <txPushMultiFrame+0xe6>
 801229c:	4b3d      	ldr	r3, [pc, #244]	@ (8012394 <txPushMultiFrame+0x1d0>)
 801229e:	4a36      	ldr	r2, [pc, #216]	@ (8012378 <txPushMultiFrame+0x1b4>)
 80122a0:	f240 2105 	movw	r1, #517	@ 0x205
 80122a4:	4835      	ldr	r0, [pc, #212]	@ (801237c <txPushMultiFrame+0x1b8>)
 80122a6:	f001 fa29 	bl	80136fc <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	68db      	ldr	r3, [r3, #12]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d106      	bne.n	80122c0 <txPushMultiFrame+0xfc>
 80122b2:	4b39      	ldr	r3, [pc, #228]	@ (8012398 <txPushMultiFrame+0x1d4>)
 80122b4:	4a30      	ldr	r2, [pc, #192]	@ (8012378 <txPushMultiFrame+0x1b4>)
 80122b6:	f240 2106 	movw	r1, #518	@ 0x206
 80122ba:	4830      	ldr	r0, [pc, #192]	@ (801237c <txPushMultiFrame+0x1b8>)
 80122bc:	f001 fa1e 	bl	80136fc <__assert_func>
                next = next->next_in_transfer;
 80122c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c2:	691b      	ldr	r3, [r3, #16]
 80122c4:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 80122c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d1da      	bne.n	8012282 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d006      	beq.n	80122e2 <txPushMultiFrame+0x11e>
 80122d4:	4b31      	ldr	r3, [pc, #196]	@ (801239c <txPushMultiFrame+0x1d8>)
 80122d6:	4a28      	ldr	r2, [pc, #160]	@ (8012378 <txPushMultiFrame+0x1b4>)
 80122d8:	f240 2109 	movw	r1, #521	@ 0x209
 80122dc:	4827      	ldr	r0, [pc, #156]	@ (801237c <txPushMultiFrame+0x1b8>)
 80122de:	f001 fa0d 	bl	80136fc <__assert_func>
            que->size += sq.size;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	689a      	ldr	r2, [r3, #8]
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	441a      	add	r2, r3
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	689a      	ldr	r2, [r3, #8]
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d906      	bls.n	8012308 <txPushMultiFrame+0x144>
 80122fa:	4b29      	ldr	r3, [pc, #164]	@ (80123a0 <txPushMultiFrame+0x1dc>)
 80122fc:	4a1e      	ldr	r2, [pc, #120]	@ (8012378 <txPushMultiFrame+0x1b4>)
 80122fe:	f240 210b 	movw	r1, #523	@ 0x20b
 8012302:	481e      	ldr	r0, [pc, #120]	@ (801237c <txPushMultiFrame+0x1b8>)
 8012304:	f001 f9fa 	bl	80136fc <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 8012308:	69bb      	ldr	r3, [r7, #24]
 801230a:	2b00      	cmp	r3, #0
 801230c:	da06      	bge.n	801231c <txPushMultiFrame+0x158>
 801230e:	4b25      	ldr	r3, [pc, #148]	@ (80123a4 <txPushMultiFrame+0x1e0>)
 8012310:	4a19      	ldr	r2, [pc, #100]	@ (8012378 <txPushMultiFrame+0x1b4>)
 8012312:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8012316:	4819      	ldr	r0, [pc, #100]	@ (801237c <txPushMultiFrame+0x1b8>)
 8012318:	f001 f9f0 	bl	80136fc <__assert_func>
            out = (int32_t) sq.size;
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012320:	e016      	b.n	8012350 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 8012322:	f06f 0302 	mvn.w	r3, #2
 8012326:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 801232c:	e009      	b.n	8012342 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 801232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012330:	691b      	ldr	r3, [r3, #16]
 8012332:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801233a:	68b8      	ldr	r0, [r7, #8]
 801233c:	4798      	blx	r3
                head = next;
 801233e:	6a3b      	ldr	r3, [r7, #32]
 8012340:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8012342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012344:	2b00      	cmp	r3, #0
 8012346:	d1f2      	bne.n	801232e <txPushMultiFrame+0x16a>
 8012348:	e002      	b.n	8012350 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 801234a:	f06f 0302 	mvn.w	r3, #2
 801234e:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8012350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012352:	2b00      	cmp	r3, #0
 8012354:	db09      	blt.n	801236a <txPushMultiFrame+0x1a6>
 8012356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012358:	2b01      	cmp	r3, #1
 801235a:	dc06      	bgt.n	801236a <txPushMultiFrame+0x1a6>
 801235c:	4b12      	ldr	r3, [pc, #72]	@ (80123a8 <txPushMultiFrame+0x1e4>)
 801235e:	4a06      	ldr	r2, [pc, #24]	@ (8012378 <txPushMultiFrame+0x1b4>)
 8012360:	f240 211f 	movw	r1, #543	@ 0x21f
 8012364:	4805      	ldr	r0, [pc, #20]	@ (801237c <txPushMultiFrame+0x1b8>)
 8012366:	f001 f9c9 	bl	80136fc <__assert_func>
    return out;
 801236a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801236c:	4618      	mov	r0, r3
 801236e:	3738      	adds	r7, #56	@ 0x38
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	080183bc 	.word	0x080183bc
 8012378:	08018eb4 	.word	0x08018eb4
 801237c:	08018028 	.word	0x08018028
 8012380:	0801833c 	.word	0x0801833c
 8012384:	08018358 	.word	0x08018358
 8012388:	080183ec 	.word	0x080183ec
 801238c:	080117d9 	.word	0x080117d9
 8012390:	08011d3d 	.word	0x08011d3d
 8012394:	080183fc 	.word	0x080183fc
 8012398:	08018410 	.word	0x08018410
 801239c:	0801842c 	.word	0x0801842c
 80123a0:	08018308 	.word	0x08018308
 80123a4:	08018444 	.word	0x08018444
 80123a8:	08018468 	.word	0x08018468

080123ac <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b088      	sub	sp, #32
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d106      	bne.n	80123ce <rxTryParseFrame+0x22>
 80123c0:	4b96      	ldr	r3, [pc, #600]	@ (801261c <rxTryParseFrame+0x270>)
 80123c2:	4a97      	ldr	r2, [pc, #604]	@ (8012620 <rxTryParseFrame+0x274>)
 80123c4:	f240 214e 	movw	r1, #590	@ 0x24e
 80123c8:	4896      	ldr	r0, [pc, #600]	@ (8012624 <rxTryParseFrame+0x278>)
 80123ca:	f001 f997 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80123d6:	d306      	bcc.n	80123e6 <rxTryParseFrame+0x3a>
 80123d8:	4b93      	ldr	r3, [pc, #588]	@ (8012628 <rxTryParseFrame+0x27c>)
 80123da:	4a91      	ldr	r2, [pc, #580]	@ (8012620 <rxTryParseFrame+0x274>)
 80123dc:	f240 214f 	movw	r1, #591	@ 0x24f
 80123e0:	4890      	ldr	r0, [pc, #576]	@ (8012624 <rxTryParseFrame+0x278>)
 80123e2:	f001 f98b 	bl	80136fc <__assert_func>
    CANARD_ASSERT(out != NULL);
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d106      	bne.n	80123fa <rxTryParseFrame+0x4e>
 80123ec:	4b8f      	ldr	r3, [pc, #572]	@ (801262c <rxTryParseFrame+0x280>)
 80123ee:	4a8c      	ldr	r2, [pc, #560]	@ (8012620 <rxTryParseFrame+0x274>)
 80123f0:	f44f 7114 	mov.w	r1, #592	@ 0x250
 80123f4:	488b      	ldr	r0, [pc, #556]	@ (8012624 <rxTryParseFrame+0x278>)
 80123f6:	f001 f981 	bl	80136fc <__assert_func>
    bool valid = false;
 80123fa:	2300      	movs	r3, #0
 80123fc:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	685b      	ldr	r3, [r3, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	f000 8105 	beq.w	8012612 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	689b      	ldr	r3, [r3, #8]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d106      	bne.n	801241e <rxTryParseFrame+0x72>
 8012410:	4b87      	ldr	r3, [pc, #540]	@ (8012630 <rxTryParseFrame+0x284>)
 8012412:	4a83      	ldr	r2, [pc, #524]	@ (8012620 <rxTryParseFrame+0x274>)
 8012414:	f44f 7115 	mov.w	r1, #596	@ 0x254
 8012418:	4882      	ldr	r0, [pc, #520]	@ (8012624 <rxTryParseFrame+0x278>)
 801241a:	f001 f96f 	bl	80136fc <__assert_func>
        out->timestamp_usec = timestamp_usec;
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012424:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	0e9b      	lsrs	r3, r3, #26
 8012432:	b2db      	uxtb	r3, r3
 8012434:	f003 0307 	and.w	r3, r3, #7
 8012438:	b2da      	uxtb	r2, r3
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	b2db      	uxtb	r3, r3
 8012442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012446:	b2da      	uxtb	r2, r3
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012452:	2b00      	cmp	r3, #0
 8012454:	d128      	bne.n	80124a8 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	2200      	movs	r2, #0
 801245a:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	0a1b      	lsrs	r3, r3, #8
 8012460:	b29b      	uxth	r3, r3
 8012462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012466:	b29a      	uxth	r2, r3
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 801246c:	69bb      	ldr	r3, [r7, #24]
 801246e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012472:	2b00      	cmp	r3, #0
 8012474:	d002      	beq.n	801247c <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	22ff      	movs	r2, #255	@ 0xff
 801247a:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	22ff      	movs	r2, #255	@ 0xff
 8012480:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 8012482:	69bb      	ldr	r3, [r7, #24]
 8012484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012488:	2b00      	cmp	r3, #0
 801248a:	d106      	bne.n	801249a <rxTryParseFrame+0xee>
 801248c:	69bb      	ldr	r3, [r7, #24]
 801248e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012492:	2b00      	cmp	r3, #0
 8012494:	d101      	bne.n	801249a <rxTryParseFrame+0xee>
 8012496:	2301      	movs	r3, #1
 8012498:	e000      	b.n	801249c <rxTryParseFrame+0xf0>
 801249a:	2300      	movs	r3, #0
 801249c:	77fb      	strb	r3, [r7, #31]
 801249e:	7ffb      	ldrb	r3, [r7, #31]
 80124a0:	f003 0301 	and.w	r3, r3, #1
 80124a4:	77fb      	strb	r3, [r7, #31]
 80124a6:	e02c      	b.n	8012502 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 80124a8:	69bb      	ldr	r3, [r7, #24]
 80124aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d001      	beq.n	80124b6 <rxTryParseFrame+0x10a>
 80124b2:	2202      	movs	r2, #2
 80124b4:	e000      	b.n	80124b8 <rxTryParseFrame+0x10c>
 80124b6:	2201      	movs	r2, #1
            out->transfer_kind =
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	0b9b      	lsrs	r3, r3, #14
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124c6:	b29a      	uxth	r2, r3
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 80124cc:	69bb      	ldr	r3, [r7, #24]
 80124ce:	09db      	lsrs	r3, r3, #7
 80124d0:	b2db      	uxtb	r3, r3
 80124d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80124d6:	b2da      	uxtb	r2, r3
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d107      	bne.n	80124f6 <rxTryParseFrame+0x14a>
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	7b1a      	ldrb	r2, [r3, #12]
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	7b5b      	ldrb	r3, [r3, #13]
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d001      	beq.n	80124f6 <rxTryParseFrame+0x14a>
 80124f2:	2301      	movs	r3, #1
 80124f4:	e000      	b.n	80124f8 <rxTryParseFrame+0x14c>
 80124f6:	2300      	movs	r3, #0
 80124f8:	77fb      	strb	r3, [r7, #31]
 80124fa:	7ffb      	ldrb	r3, [r7, #31]
 80124fc:	f003 0301 	and.w	r3, r3, #1
 8012500:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	685b      	ldr	r3, [r3, #4]
 8012506:	1e5a      	subs	r2, r3, #1
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	689a      	ldr	r2, [r3, #8]
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	699a      	ldr	r2, [r3, #24]
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	695b      	ldr	r3, [r3, #20]
 801251c:	4413      	add	r3, r2
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 8012522:	7dfb      	ldrb	r3, [r7, #23]
 8012524:	f003 031f 	and.w	r3, r3, #31
 8012528:	b2da      	uxtb	r2, r3
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 801252e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012532:	b2db      	uxtb	r3, r3
 8012534:	09db      	lsrs	r3, r3, #7
 8012536:	b2da      	uxtb	r2, r3
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 801253c:	7dfb      	ldrb	r3, [r7, #23]
 801253e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012542:	2b00      	cmp	r3, #0
 8012544:	bf14      	ite	ne
 8012546:	2301      	movne	r3, #1
 8012548:	2300      	moveq	r3, #0
 801254a:	b2da      	uxtb	r2, r3
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 8012550:	7dfb      	ldrb	r3, [r7, #23]
 8012552:	f003 0320 	and.w	r3, r3, #32
 8012556:	2b00      	cmp	r3, #0
 8012558:	bf14      	ite	ne
 801255a:	2301      	movne	r3, #1
 801255c:	2300      	moveq	r3, #0
 801255e:	b2da      	uxtb	r2, r3
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 8012564:	7ffb      	ldrb	r3, [r7, #31]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00c      	beq.n	8012584 <rxTryParseFrame+0x1d8>
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	7bdb      	ldrb	r3, [r3, #15]
 801256e:	f083 0301 	eor.w	r3, r3, #1
 8012572:	b2db      	uxtb	r3, r3
 8012574:	2b00      	cmp	r3, #0
 8012576:	d103      	bne.n	8012580 <rxTryParseFrame+0x1d4>
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	7c5b      	ldrb	r3, [r3, #17]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d001      	beq.n	8012584 <rxTryParseFrame+0x1d8>
 8012580:	2301      	movs	r3, #1
 8012582:	e000      	b.n	8012586 <rxTryParseFrame+0x1da>
 8012584:	2300      	movs	r3, #0
 8012586:	77fb      	strb	r3, [r7, #31]
 8012588:	7ffb      	ldrb	r3, [r7, #31]
 801258a:	f003 0301 	and.w	r3, r3, #1
 801258e:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8012590:	7ffb      	ldrb	r3, [r7, #31]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d00d      	beq.n	80125b2 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 801259a:	2b00      	cmp	r3, #0
 801259c:	d003      	beq.n	80125a6 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	7c1b      	ldrb	r3, [r3, #16]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d103      	bne.n	80125ae <rxTryParseFrame+0x202>
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	7b1b      	ldrb	r3, [r3, #12]
 80125aa:	2bff      	cmp	r3, #255	@ 0xff
 80125ac:	d001      	beq.n	80125b2 <rxTryParseFrame+0x206>
        valid = valid &&
 80125ae:	2301      	movs	r3, #1
 80125b0:	e000      	b.n	80125b4 <rxTryParseFrame+0x208>
 80125b2:	2300      	movs	r3, #0
 80125b4:	77fb      	strb	r3, [r7, #31]
 80125b6:	7ffb      	ldrb	r3, [r7, #31]
 80125b8:	f003 0301 	and.w	r3, r3, #1
 80125bc:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 80125be:	7ffb      	ldrb	r3, [r7, #31]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d009      	beq.n	80125d8 <rxTryParseFrame+0x22c>
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	695b      	ldr	r3, [r3, #20]
 80125c8:	2b06      	cmp	r3, #6
 80125ca:	d803      	bhi.n	80125d4 <rxTryParseFrame+0x228>
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	7c1b      	ldrb	r3, [r3, #16]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d001      	beq.n	80125d8 <rxTryParseFrame+0x22c>
 80125d4:	2301      	movs	r3, #1
 80125d6:	e000      	b.n	80125da <rxTryParseFrame+0x22e>
 80125d8:	2300      	movs	r3, #0
 80125da:	77fb      	strb	r3, [r7, #31]
 80125dc:	7ffb      	ldrb	r3, [r7, #31]
 80125de:	f003 0301 	and.w	r3, r3, #1
 80125e2:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 80125e4:	7ffb      	ldrb	r3, [r7, #31]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d00d      	beq.n	8012606 <rxTryParseFrame+0x25a>
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	695b      	ldr	r3, [r3, #20]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d107      	bne.n	8012602 <rxTryParseFrame+0x256>
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	7bdb      	ldrb	r3, [r3, #15]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d005      	beq.n	8012606 <rxTryParseFrame+0x25a>
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	7c1b      	ldrb	r3, [r3, #16]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d001      	beq.n	8012606 <rxTryParseFrame+0x25a>
 8012602:	2301      	movs	r3, #1
 8012604:	e000      	b.n	8012608 <rxTryParseFrame+0x25c>
 8012606:	2300      	movs	r3, #0
 8012608:	77fb      	strb	r3, [r7, #31]
 801260a:	7ffb      	ldrb	r3, [r7, #31]
 801260c:	f003 0301 	and.w	r3, r3, #1
 8012610:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 8012612:	7ffb      	ldrb	r3, [r7, #31]
}
 8012614:	4618      	mov	r0, r3
 8012616:	3720      	adds	r7, #32
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	08018480 	.word	0x08018480
 8012620:	08018f04 	.word	0x08018f04
 8012624:	08018028 	.word	0x08018028
 8012628:	08018498 	.word	0x08018498
 801262c:	080184c8 	.word	0x080184c8
 8012630:	080184dc 	.word	0x080184dc

08012634 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d106      	bne.n	8012652 <rxInitTransferMetadataFromFrame+0x1e>
 8012644:	4b19      	ldr	r3, [pc, #100]	@ (80126ac <rxInitTransferMetadataFromFrame+0x78>)
 8012646:	4a1a      	ldr	r2, [pc, #104]	@ (80126b0 <rxInitTransferMetadataFromFrame+0x7c>)
 8012648:	f240 218f 	movw	r1, #655	@ 0x28f
 801264c:	4819      	ldr	r0, [pc, #100]	@ (80126b4 <rxInitTransferMetadataFromFrame+0x80>)
 801264e:	f001 f855 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	699b      	ldr	r3, [r3, #24]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <rxInitTransferMetadataFromFrame+0x34>
 801265a:	4b17      	ldr	r3, [pc, #92]	@ (80126b8 <rxInitTransferMetadataFromFrame+0x84>)
 801265c:	4a14      	ldr	r2, [pc, #80]	@ (80126b0 <rxInitTransferMetadataFromFrame+0x7c>)
 801265e:	f44f 7124 	mov.w	r1, #656	@ 0x290
 8012662:	4814      	ldr	r0, [pc, #80]	@ (80126b4 <rxInitTransferMetadataFromFrame+0x80>)
 8012664:	f001 f84a 	bl	80136fc <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d106      	bne.n	801267c <rxInitTransferMetadataFromFrame+0x48>
 801266e:	4b13      	ldr	r3, [pc, #76]	@ (80126bc <rxInitTransferMetadataFromFrame+0x88>)
 8012670:	4a0f      	ldr	r2, [pc, #60]	@ (80126b0 <rxInitTransferMetadataFromFrame+0x7c>)
 8012672:	f240 2191 	movw	r1, #657	@ 0x291
 8012676:	480f      	ldr	r0, [pc, #60]	@ (80126b4 <rxInitTransferMetadataFromFrame+0x80>)
 8012678:	f001 f840 	bl	80136fc <__assert_func>
    out_transfer->priority       = frame->priority;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	7a1a      	ldrb	r2, [r3, #8]
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	7a5a      	ldrb	r2, [r3, #9]
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	895a      	ldrh	r2, [r3, #10]
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	7b1a      	ldrb	r2, [r3, #12]
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	7b9a      	ldrb	r2, [r3, #14]
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	715a      	strb	r2, [r3, #5]
}
 80126a4:	bf00      	nop
 80126a6:	3708      	adds	r7, #8
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	08018480 	.word	0x08018480
 80126b0:	08018f98 	.word	0x08018f98
 80126b4:	08018028 	.word	0x08018028
 80126b8:	080184dc 	.word	0x080184dc
 80126bc:	080184fc 	.word	0x080184fc

080126c0 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b084      	sub	sp, #16
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	4603      	mov	r3, r0
 80126c8:	460a      	mov	r2, r1
 80126ca:	71fb      	strb	r3, [r7, #7]
 80126cc:	4613      	mov	r3, r2
 80126ce:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 80126d0:	79fb      	ldrb	r3, [r7, #7]
 80126d2:	2b1f      	cmp	r3, #31
 80126d4:	d906      	bls.n	80126e4 <rxComputeTransferIDDifference+0x24>
 80126d6:	4b15      	ldr	r3, [pc, #84]	@ (801272c <rxComputeTransferIDDifference+0x6c>)
 80126d8:	4a15      	ldr	r2, [pc, #84]	@ (8012730 <rxComputeTransferIDDifference+0x70>)
 80126da:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 80126de:	4815      	ldr	r0, [pc, #84]	@ (8012734 <rxComputeTransferIDDifference+0x74>)
 80126e0:	f001 f80c 	bl	80136fc <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 80126e4:	79bb      	ldrb	r3, [r7, #6]
 80126e6:	2b1f      	cmp	r3, #31
 80126e8:	d906      	bls.n	80126f8 <rxComputeTransferIDDifference+0x38>
 80126ea:	4b13      	ldr	r3, [pc, #76]	@ (8012738 <rxComputeTransferIDDifference+0x78>)
 80126ec:	4a10      	ldr	r2, [pc, #64]	@ (8012730 <rxComputeTransferIDDifference+0x70>)
 80126ee:	f240 219d 	movw	r1, #669	@ 0x29d
 80126f2:	4810      	ldr	r0, [pc, #64]	@ (8012734 <rxComputeTransferIDDifference+0x74>)
 80126f4:	f001 f802 	bl	80136fc <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 80126f8:	79fb      	ldrb	r3, [r7, #7]
 80126fa:	b29a      	uxth	r2, r3
 80126fc:	79bb      	ldrb	r3, [r7, #6]
 80126fe:	b29b      	uxth	r3, r3
 8012700:	1ad3      	subs	r3, r2, r3
 8012702:	b29b      	uxth	r3, r3
 8012704:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 8012706:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801270a:	2b00      	cmp	r3, #0
 801270c:	da07      	bge.n	801271e <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 801270e:	2320      	movs	r3, #32
 8012710:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 8012712:	7b7b      	ldrb	r3, [r7, #13]
 8012714:	b29a      	uxth	r2, r3
 8012716:	89fb      	ldrh	r3, [r7, #14]
 8012718:	4413      	add	r3, r2
 801271a:	b29b      	uxth	r3, r3
 801271c:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 801271e:	89fb      	ldrh	r3, [r7, #14]
 8012720:	b2db      	uxtb	r3, r3
}
 8012722:	4618      	mov	r0, r3
 8012724:	3710      	adds	r7, #16
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	08018518 	.word	0x08018518
 8012730:	08018f34 	.word	0x08018f34
 8012734:	08018028 	.word	0x08018028
 8012738:	08018530 	.word	0x08018530

0801273c <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b086      	sub	sp, #24
 8012740:	af00      	add	r7, sp, #0
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	60b9      	str	r1, [r7, #8]
 8012746:	607a      	str	r2, [r7, #4]
 8012748:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d106      	bne.n	801275e <rxSessionWritePayload+0x22>
 8012750:	4b67      	ldr	r3, [pc, #412]	@ (80128f0 <rxSessionWritePayload+0x1b4>)
 8012752:	4a68      	ldr	r2, [pc, #416]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 8012754:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8012758:	4867      	ldr	r0, [pc, #412]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 801275a:	f000 ffcf 	bl	80136fc <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d106      	bne.n	8012772 <rxSessionWritePayload+0x36>
 8012764:	4b65      	ldr	r3, [pc, #404]	@ (80128fc <rxSessionWritePayload+0x1c0>)
 8012766:	4a63      	ldr	r2, [pc, #396]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 8012768:	f240 21ae 	movw	r1, #686	@ 0x2ae
 801276c:	4862      	ldr	r0, [pc, #392]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 801276e:	f000 ffc5 	bl	80136fc <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8012772:	6a3b      	ldr	r3, [r7, #32]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d109      	bne.n	801278c <rxSessionWritePayload+0x50>
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d006      	beq.n	801278c <rxSessionWritePayload+0x50>
 801277e:	4b60      	ldr	r3, [pc, #384]	@ (8012900 <rxSessionWritePayload+0x1c4>)
 8012780:	4a5c      	ldr	r2, [pc, #368]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 8012782:	f240 21af 	movw	r1, #687	@ 0x2af
 8012786:	485c      	ldr	r0, [pc, #368]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 8012788:	f000 ffb8 	bl	80136fc <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	68db      	ldr	r3, [r3, #12]
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	429a      	cmp	r2, r3
 8012794:	d206      	bcs.n	80127a4 <rxSessionWritePayload+0x68>
 8012796:	4b5b      	ldr	r3, [pc, #364]	@ (8012904 <rxSessionWritePayload+0x1c8>)
 8012798:	4a56      	ldr	r2, [pc, #344]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 801279a:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 801279e:	4856      	ldr	r0, [pc, #344]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 80127a0:	f000 ffac 	bl	80136fc <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	68da      	ldr	r2, [r3, #12]
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	689b      	ldr	r3, [r3, #8]
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d906      	bls.n	80127be <rxSessionWritePayload+0x82>
 80127b0:	4b55      	ldr	r3, [pc, #340]	@ (8012908 <rxSessionWritePayload+0x1cc>)
 80127b2:	4a50      	ldr	r2, [pc, #320]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 80127b4:	f240 21b1 	movw	r1, #689	@ 0x2b1
 80127b8:	484f      	ldr	r0, [pc, #316]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 80127ba:	f000 ff9f 	bl	80136fc <__assert_func>

    rxs->total_payload_size += payload_size;
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	689a      	ldr	r2, [r3, #8]
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	441a      	add	r2, r3
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	691b      	ldr	r3, [r3, #16]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d115      	bne.n	80127fe <rxSessionWritePayload+0xc2>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d012      	beq.n	80127fe <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d006      	beq.n	80127ee <rxSessionWritePayload+0xb2>
 80127e0:	4b4a      	ldr	r3, [pc, #296]	@ (801290c <rxSessionWritePayload+0x1d0>)
 80127e2:	4a44      	ldr	r2, [pc, #272]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 80127e4:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 80127e8:	4843      	ldr	r0, [pc, #268]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 80127ea:	f000 ff87 	bl	80136fc <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	689b      	ldr	r3, [r3, #8]
 80127f2:	6879      	ldr	r1, [r7, #4]
 80127f4:	68f8      	ldr	r0, [r7, #12]
 80127f6:	4798      	blx	r3
 80127f8:	4602      	mov	r2, r0
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 80127fe:	2300      	movs	r3, #0
 8012800:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	691b      	ldr	r3, [r3, #16]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d04e      	beq.n	80128a8 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	68da      	ldr	r2, [r3, #12]
 8012812:	693b      	ldr	r3, [r7, #16]
 8012814:	4413      	add	r3, r2
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	429a      	cmp	r2, r3
 801281a:	d229      	bcs.n	8012870 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	68db      	ldr	r3, [r3, #12]
 8012820:	687a      	ldr	r2, [r7, #4]
 8012822:	429a      	cmp	r2, r3
 8012824:	d206      	bcs.n	8012834 <rxSessionWritePayload+0xf8>
 8012826:	4b37      	ldr	r3, [pc, #220]	@ (8012904 <rxSessionWritePayload+0x1c8>)
 8012828:	4a32      	ldr	r2, [pc, #200]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 801282a:	f240 21c3 	movw	r1, #707	@ 0x2c3
 801282e:	4832      	ldr	r0, [pc, #200]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 8012830:	f000 ff64 	bl	80136fc <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	68db      	ldr	r3, [r3, #12]
 8012838:	687a      	ldr	r2, [r7, #4]
 801283a:	1ad3      	subs	r3, r2, r3
 801283c:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	68da      	ldr	r2, [r3, #12]
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	4413      	add	r3, r2
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	429a      	cmp	r2, r3
 801284a:	d006      	beq.n	801285a <rxSessionWritePayload+0x11e>
 801284c:	4b30      	ldr	r3, [pc, #192]	@ (8012910 <rxSessionWritePayload+0x1d4>)
 801284e:	4a29      	ldr	r2, [pc, #164]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 8012850:	f240 21c5 	movw	r1, #709	@ 0x2c5
 8012854:	4828      	ldr	r0, [pc, #160]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 8012856:	f000 ff51 	bl	80136fc <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 801285a:	693a      	ldr	r2, [r7, #16]
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	429a      	cmp	r2, r3
 8012860:	d306      	bcc.n	8012870 <rxSessionWritePayload+0x134>
 8012862:	4b2c      	ldr	r3, [pc, #176]	@ (8012914 <rxSessionWritePayload+0x1d8>)
 8012864:	4a23      	ldr	r2, [pc, #140]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 8012866:	f240 21c6 	movw	r1, #710	@ 0x2c6
 801286a:	4823      	ldr	r0, [pc, #140]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 801286c:	f000 ff46 	bl	80136fc <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	691a      	ldr	r2, [r3, #16]
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	4413      	add	r3, r2
 801287a:	693a      	ldr	r2, [r7, #16]
 801287c:	6a39      	ldr	r1, [r7, #32]
 801287e:	4618      	mov	r0, r3
 8012880:	f002 f8dd 	bl	8014a3e <memcpy>
        rxs->payload_size += bytes_to_copy;
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	68da      	ldr	r2, [r3, #12]
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	441a      	add	r2, r3
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	68db      	ldr	r3, [r3, #12]
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	429a      	cmp	r2, r3
 8012898:	d219      	bcs.n	80128ce <rxSessionWritePayload+0x192>
 801289a:	4b1a      	ldr	r3, [pc, #104]	@ (8012904 <rxSessionWritePayload+0x1c8>)
 801289c:	4a15      	ldr	r2, [pc, #84]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 801289e:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 80128a2:	4815      	ldr	r0, [pc, #84]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 80128a4:	f000 ff2a 	bl	80136fc <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	68db      	ldr	r3, [r3, #12]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d006      	beq.n	80128be <rxSessionWritePayload+0x182>
 80128b0:	4b16      	ldr	r3, [pc, #88]	@ (801290c <rxSessionWritePayload+0x1d0>)
 80128b2:	4a10      	ldr	r2, [pc, #64]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 80128b4:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 80128b8:	480f      	ldr	r0, [pc, #60]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 80128ba:	f000 ff1f 	bl	80136fc <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d002      	beq.n	80128ca <rxSessionWritePayload+0x18e>
 80128c4:	f06f 0302 	mvn.w	r3, #2
 80128c8:	e000      	b.n	80128cc <rxSessionWritePayload+0x190>
 80128ca:	2300      	movs	r3, #0
 80128cc:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 80128ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	dd06      	ble.n	80128e4 <rxSessionWritePayload+0x1a8>
 80128d6:	4b10      	ldr	r3, [pc, #64]	@ (8012918 <rxSessionWritePayload+0x1dc>)
 80128d8:	4a06      	ldr	r2, [pc, #24]	@ (80128f4 <rxSessionWritePayload+0x1b8>)
 80128da:	f240 21d7 	movw	r1, #727	@ 0x2d7
 80128de:	4806      	ldr	r0, [pc, #24]	@ (80128f8 <rxSessionWritePayload+0x1bc>)
 80128e0:	f000 ff0c 	bl	80136fc <__assert_func>
    return out;
 80128e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3718      	adds	r7, #24
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	080181ec 	.word	0x080181ec
 80128f4:	08018f80 	.word	0x08018f80
 80128f8:	08018028 	.word	0x08018028
 80128fc:	08018548 	.word	0x08018548
 8012900:	080180e4 	.word	0x080180e4
 8012904:	0801855c 	.word	0x0801855c
 8012908:	08018578 	.word	0x08018578
 801290c:	080185a8 	.word	0x080185a8
 8012910:	080185c0 	.word	0x080185c0
 8012914:	080185f0 	.word	0x080185f0
 8012918:	08018610 	.word	0x08018610

0801291c <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d106      	bne.n	801293a <rxSessionRestart+0x1e>
 801292c:	4b1a      	ldr	r3, [pc, #104]	@ (8012998 <rxSessionRestart+0x7c>)
 801292e:	4a1b      	ldr	r2, [pc, #108]	@ (801299c <rxSessionRestart+0x80>)
 8012930:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8012934:	481a      	ldr	r0, [pc, #104]	@ (80129a0 <rxSessionRestart+0x84>)
 8012936:	f000 fee1 	bl	80136fc <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d106      	bne.n	801294e <rxSessionRestart+0x32>
 8012940:	4b18      	ldr	r3, [pc, #96]	@ (80129a4 <rxSessionRestart+0x88>)
 8012942:	4a16      	ldr	r2, [pc, #88]	@ (801299c <rxSessionRestart+0x80>)
 8012944:	f240 21de 	movw	r1, #734	@ 0x2de
 8012948:	4815      	ldr	r0, [pc, #84]	@ (80129a0 <rxSessionRestart+0x84>)
 801294a:	f000 fed7 	bl	80136fc <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	68db      	ldr	r3, [r3, #12]
 8012952:	683a      	ldr	r2, [r7, #0]
 8012954:	6912      	ldr	r2, [r2, #16]
 8012956:	4611      	mov	r1, r2
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	2200      	movs	r2, #0
 8012960:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	2200      	movs	r2, #0
 8012966:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	2200      	movs	r2, #0
 801296c:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012974:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	7d9b      	ldrb	r3, [r3, #22]
 801297a:	3301      	adds	r3, #1
 801297c:	b2db      	uxtb	r3, r3
 801297e:	f003 031f 	and.w	r3, r3, #31
 8012982:	b2da      	uxtb	r2, r3
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	2201      	movs	r2, #1
 801298c:	761a      	strb	r2, [r3, #24]
}
 801298e:	bf00      	nop
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	080181ec 	.word	0x080181ec
 801299c:	08018f54 	.word	0x08018f54
 80129a0:	08018028 	.word	0x08018028
 80129a4:	08018548 	.word	0x08018548

080129a8 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b088      	sub	sp, #32
 80129ac:	af02      	add	r7, sp, #8
 80129ae:	60f8      	str	r0, [r7, #12]
 80129b0:	60b9      	str	r1, [r7, #8]
 80129b2:	607a      	str	r2, [r7, #4]
 80129b4:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d106      	bne.n	80129ca <rxSessionAcceptFrame+0x22>
 80129bc:	4b81      	ldr	r3, [pc, #516]	@ (8012bc4 <rxSessionAcceptFrame+0x21c>)
 80129be:	4a82      	ldr	r2, [pc, #520]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 80129c0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80129c4:	4881      	ldr	r0, [pc, #516]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 80129c6:	f000 fe99 	bl	80136fc <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d106      	bne.n	80129de <rxSessionAcceptFrame+0x36>
 80129d0:	4b7f      	ldr	r3, [pc, #508]	@ (8012bd0 <rxSessionAcceptFrame+0x228>)
 80129d2:	4a7d      	ldr	r2, [pc, #500]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 80129d4:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 80129d8:	487c      	ldr	r0, [pc, #496]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 80129da:	f000 fe8f 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame != NULL);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d106      	bne.n	80129f2 <rxSessionAcceptFrame+0x4a>
 80129e4:	4b7b      	ldr	r3, [pc, #492]	@ (8012bd4 <rxSessionAcceptFrame+0x22c>)
 80129e6:	4a78      	ldr	r2, [pc, #480]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 80129e8:	f240 21f1 	movw	r1, #753	@ 0x2f1
 80129ec:	4877      	ldr	r0, [pc, #476]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 80129ee:	f000 fe85 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	699b      	ldr	r3, [r3, #24]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d106      	bne.n	8012a08 <rxSessionAcceptFrame+0x60>
 80129fa:	4b77      	ldr	r3, [pc, #476]	@ (8012bd8 <rxSessionAcceptFrame+0x230>)
 80129fc:	4a72      	ldr	r2, [pc, #456]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 80129fe:	f240 21f2 	movw	r1, #754	@ 0x2f2
 8012a02:	4872      	ldr	r0, [pc, #456]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 8012a04:	f000 fe7a 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	7b9b      	ldrb	r3, [r3, #14]
 8012a0c:	2b1f      	cmp	r3, #31
 8012a0e:	d906      	bls.n	8012a1e <rxSessionAcceptFrame+0x76>
 8012a10:	4b72      	ldr	r3, [pc, #456]	@ (8012bdc <rxSessionAcceptFrame+0x234>)
 8012a12:	4a6d      	ldr	r2, [pc, #436]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 8012a14:	f240 21f3 	movw	r1, #755	@ 0x2f3
 8012a18:	486c      	ldr	r0, [pc, #432]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 8012a1a:	f000 fe6f 	bl	80136fc <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8012a1e:	6a3b      	ldr	r3, [r7, #32]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d106      	bne.n	8012a32 <rxSessionAcceptFrame+0x8a>
 8012a24:	4b6e      	ldr	r3, [pc, #440]	@ (8012be0 <rxSessionAcceptFrame+0x238>)
 8012a26:	4a68      	ldr	r2, [pc, #416]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 8012a28:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8012a2c:	4867      	ldr	r0, [pc, #412]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 8012a2e:	f000 fe65 	bl	80136fc <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	7bdb      	ldrb	r3, [r3, #15]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d005      	beq.n	8012a46 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a40:	68b9      	ldr	r1, [r7, #8]
 8012a42:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	7bdb      	ldrb	r3, [r3, #15]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d005      	beq.n	8012a5a <rxSessionAcceptFrame+0xb2>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	7c1b      	ldrb	r3, [r3, #16]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d001      	beq.n	8012a5a <rxSessionAcceptFrame+0xb2>
 8012a56:	2301      	movs	r3, #1
 8012a58:	e000      	b.n	8012a5c <rxSessionAcceptFrame+0xb4>
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	75bb      	strb	r3, [r7, #22]
 8012a5e:	7dbb      	ldrb	r3, [r7, #22]
 8012a60:	f003 0301 	and.w	r3, r3, #1
 8012a64:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 8012a66:	7dbb      	ldrb	r3, [r7, #22]
 8012a68:	f083 0301 	eor.w	r3, r3, #1
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d00c      	beq.n	8012a8c <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	8a98      	ldrh	r0, [r3, #20]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6959      	ldr	r1, [r3, #20]
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	699b      	ldr	r3, [r3, #24]
 8012a7e:	461a      	mov	r2, r3
 8012a80:	f7fe fed6 	bl	8011830 <crcAdd>
 8012a84:	4603      	mov	r3, r0
 8012a86:	461a      	mov	r2, r3
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	695a      	ldr	r2, [r3, #20]
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	699b      	ldr	r3, [r3, #24]
 8012a94:	9300      	str	r3, [sp, #0]
 8012a96:	4613      	mov	r3, r2
 8012a98:	683a      	ldr	r2, [r7, #0]
 8012a9a:	68b9      	ldr	r1, [r7, #8]
 8012a9c:	68f8      	ldr	r0, [r7, #12]
 8012a9e:	f7ff fe4d 	bl	801273c <rxSessionWritePayload>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 8012aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	da10      	bge.n	8012ad0 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 8012aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ab2:	f113 0f03 	cmn.w	r3, #3
 8012ab6:	d006      	beq.n	8012ac6 <rxSessionAcceptFrame+0x11e>
 8012ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8012be4 <rxSessionAcceptFrame+0x23c>)
 8012aba:	4a43      	ldr	r2, [pc, #268]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 8012abc:	f240 3106 	movw	r1, #774	@ 0x306
 8012ac0:	4842      	ldr	r0, [pc, #264]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 8012ac2:	f000 fe1b 	bl	80136fc <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 8012ac6:	68b9      	ldr	r1, [r7, #8]
 8012ac8:	68f8      	ldr	r0, [r7, #12]
 8012aca:	f7ff ff27 	bl	801291c <rxSessionRestart>
 8012ace:	e072      	b.n	8012bb6 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	7c1b      	ldrb	r3, [r3, #16]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d05f      	beq.n	8012b98 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8012ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d006      	beq.n	8012aee <rxSessionAcceptFrame+0x146>
 8012ae0:	4b41      	ldr	r3, [pc, #260]	@ (8012be8 <rxSessionAcceptFrame+0x240>)
 8012ae2:	4a39      	ldr	r2, [pc, #228]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 8012ae4:	f240 310b 	movw	r1, #779	@ 0x30b
 8012ae8:	4838      	ldr	r0, [pc, #224]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 8012aea:	f000 fe07 	bl	80136fc <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 8012aee:	7dbb      	ldrb	r3, [r7, #22]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d103      	bne.n	8012afc <rxSessionAcceptFrame+0x154>
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	8a9b      	ldrh	r3, [r3, #20]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d148      	bne.n	8012b8e <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 8012afc:	2301      	movs	r3, #1
 8012afe:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8012b00:	6a3b      	ldr	r3, [r7, #32]
 8012b02:	4619      	mov	r1, r3
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff fd95 	bl	8012634 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b10:	6a39      	ldr	r1, [r7, #32]
 8012b12:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	68da      	ldr	r2, [r3, #12]
 8012b1a:	6a3b      	ldr	r3, [r7, #32]
 8012b1c:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	691a      	ldr	r2, [r3, #16]
 8012b22:	6a3b      	ldr	r3, [r7, #32]
 8012b24:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	689a      	ldr	r2, [r3, #8]
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d206      	bcs.n	8012b40 <rxSessionAcceptFrame+0x198>
 8012b32:	4b2e      	ldr	r3, [pc, #184]	@ (8012bec <rxSessionAcceptFrame+0x244>)
 8012b34:	4a24      	ldr	r2, [pc, #144]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 8012b36:	f240 3115 	movw	r1, #789	@ 0x315
 8012b3a:	4824      	ldr	r0, [pc, #144]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 8012b3c:	f000 fdde 	bl	80136fc <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	689a      	ldr	r2, [r3, #8]
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	1ad3      	subs	r3, r2, r3
 8012b4a:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 8012b4c:	7dbb      	ldrb	r3, [r7, #22]
 8012b4e:	f083 0301 	eor.w	r3, r3, #1
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d017      	beq.n	8012b88 <rxSessionAcceptFrame+0x1e0>
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d814      	bhi.n	8012b88 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 8012b5e:	6a3b      	ldr	r3, [r7, #32]
 8012b60:	691a      	ldr	r2, [r3, #16]
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	f1c3 0302 	rsb	r3, r3, #2
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d206      	bcs.n	8012b7a <rxSessionAcceptFrame+0x1d2>
 8012b6c:	4b20      	ldr	r3, [pc, #128]	@ (8012bf0 <rxSessionAcceptFrame+0x248>)
 8012b6e:	4a16      	ldr	r2, [pc, #88]	@ (8012bc8 <rxSessionAcceptFrame+0x220>)
 8012b70:	f240 3119 	movw	r1, #793	@ 0x319
 8012b74:	4815      	ldr	r0, [pc, #84]	@ (8012bcc <rxSessionAcceptFrame+0x224>)
 8012b76:	f000 fdc1 	bl	80136fc <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 8012b7a:	6a3b      	ldr	r3, [r7, #32]
 8012b7c:	691a      	ldr	r2, [r3, #16]
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	4413      	add	r3, r2
 8012b82:	1e9a      	subs	r2, r3, #2
 8012b84:	6a3b      	ldr	r3, [r7, #32]
 8012b86:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 8012b8e:	68b9      	ldr	r1, [r7, #8]
 8012b90:	68f8      	ldr	r0, [r7, #12]
 8012b92:	f7ff fec3 	bl	801291c <rxSessionRestart>
 8012b96:	e00e      	b.n	8012bb6 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	7e1b      	ldrb	r3, [r3, #24]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	bf14      	ite	ne
 8012ba0:	2301      	movne	r3, #1
 8012ba2:	2300      	moveq	r3, #0
 8012ba4:	b2db      	uxtb	r3, r3
 8012ba6:	f083 0301 	eor.w	r3, r3, #1
 8012baa:	b2db      	uxtb	r3, r3
 8012bac:	f003 0301 	and.w	r3, r3, #1
 8012bb0:	b2da      	uxtb	r2, r3
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	761a      	strb	r2, [r3, #24]
    }
    return out;
 8012bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3718      	adds	r7, #24
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	080181ec 	.word	0x080181ec
 8012bc8:	08018f68 	.word	0x08018f68
 8012bcc:	08018028 	.word	0x08018028
 8012bd0:	08018548 	.word	0x08018548
 8012bd4:	08018480 	.word	0x08018480
 8012bd8:	080184dc 	.word	0x080184dc
 8012bdc:	0801861c 	.word	0x0801861c
 8012be0:	080184fc 	.word	0x080184fc
 8012be4:	08018644 	.word	0x08018644
 8012be8:	08018650 	.word	0x08018650
 8012bec:	0801865c 	.word	0x0801865c
 8012bf0:	0801868c 	.word	0x0801868c

08012bf4 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8012bf4:	b5b0      	push	{r4, r5, r7, lr}
 8012bf6:	b088      	sub	sp, #32
 8012bf8:	af02      	add	r7, sp, #8
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
 8012c00:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d106      	bne.n	8012c16 <rxSessionUpdate+0x22>
 8012c08:	4b6d      	ldr	r3, [pc, #436]	@ (8012dc0 <rxSessionUpdate+0x1cc>)
 8012c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8012dc4 <rxSessionUpdate+0x1d0>)
 8012c0c:	f240 3137 	movw	r1, #823	@ 0x337
 8012c10:	486d      	ldr	r0, [pc, #436]	@ (8012dc8 <rxSessionUpdate+0x1d4>)
 8012c12:	f000 fd73 	bl	80136fc <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d106      	bne.n	8012c2a <rxSessionUpdate+0x36>
 8012c1c:	4b6b      	ldr	r3, [pc, #428]	@ (8012dcc <rxSessionUpdate+0x1d8>)
 8012c1e:	4a69      	ldr	r2, [pc, #420]	@ (8012dc4 <rxSessionUpdate+0x1d0>)
 8012c20:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8012c24:	4868      	ldr	r0, [pc, #416]	@ (8012dc8 <rxSessionUpdate+0x1d4>)
 8012c26:	f000 fd69 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d106      	bne.n	8012c3e <rxSessionUpdate+0x4a>
 8012c30:	4b67      	ldr	r3, [pc, #412]	@ (8012dd0 <rxSessionUpdate+0x1dc>)
 8012c32:	4a64      	ldr	r2, [pc, #400]	@ (8012dc4 <rxSessionUpdate+0x1d0>)
 8012c34:	f240 3139 	movw	r1, #825	@ 0x339
 8012c38:	4863      	ldr	r0, [pc, #396]	@ (8012dc8 <rxSessionUpdate+0x1d4>)
 8012c3a:	f000 fd5f 	bl	80136fc <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8012c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d106      	bne.n	8012c52 <rxSessionUpdate+0x5e>
 8012c44:	4b63      	ldr	r3, [pc, #396]	@ (8012dd4 <rxSessionUpdate+0x1e0>)
 8012c46:	4a5f      	ldr	r2, [pc, #380]	@ (8012dc4 <rxSessionUpdate+0x1d0>)
 8012c48:	f240 313a 	movw	r1, #826	@ 0x33a
 8012c4c:	485e      	ldr	r0, [pc, #376]	@ (8012dc8 <rxSessionUpdate+0x1d4>)
 8012c4e:	f000 fd55 	bl	80136fc <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	7d9b      	ldrb	r3, [r3, #22]
 8012c56:	2b1f      	cmp	r3, #31
 8012c58:	d906      	bls.n	8012c68 <rxSessionUpdate+0x74>
 8012c5a:	4b5f      	ldr	r3, [pc, #380]	@ (8012dd8 <rxSessionUpdate+0x1e4>)
 8012c5c:	4a59      	ldr	r2, [pc, #356]	@ (8012dc4 <rxSessionUpdate+0x1d0>)
 8012c5e:	f240 313b 	movw	r1, #827	@ 0x33b
 8012c62:	4859      	ldr	r0, [pc, #356]	@ (8012dc8 <rxSessionUpdate+0x1d4>)
 8012c64:	f000 fd4a 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	7b9b      	ldrb	r3, [r3, #14]
 8012c6c:	2b1f      	cmp	r3, #31
 8012c6e:	d906      	bls.n	8012c7e <rxSessionUpdate+0x8a>
 8012c70:	4b5a      	ldr	r3, [pc, #360]	@ (8012ddc <rxSessionUpdate+0x1e8>)
 8012c72:	4a54      	ldr	r2, [pc, #336]	@ (8012dc4 <rxSessionUpdate+0x1d0>)
 8012c74:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 8012c78:	4853      	ldr	r0, [pc, #332]	@ (8012dc8 <rxSessionUpdate+0x1d4>)
 8012c7a:	f000 fd3f 	bl	80136fc <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c84:	68b9      	ldr	r1, [r7, #8]
 8012c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c8a:	4290      	cmp	r0, r2
 8012c8c:	eb71 0303 	sbcs.w	r3, r1, r3
 8012c90:	d20f      	bcs.n	8012cb2 <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9e:	1a84      	subs	r4, r0, r2
 8012ca0:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8012ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8012ca8:	42a2      	cmp	r2, r4
 8012caa:	41ab      	sbcs	r3, r5
 8012cac:	d201      	bcs.n	8012cb2 <rxSessionUpdate+0xbe>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	e000      	b.n	8012cb4 <rxSessionUpdate+0xc0>
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	75bb      	strb	r3, [r7, #22]
 8012cb6:	7dbb      	ldrb	r3, [r7, #22]
 8012cb8:	f003 0301 	and.w	r3, r3, #1
 8012cbc:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	7d9a      	ldrb	r2, [r3, #22]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	7b9b      	ldrb	r3, [r3, #14]
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	4610      	mov	r0, r2
 8012cca:	f7ff fcf9 	bl	80126c0 <rxComputeTransferIDDifference>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	2b01      	cmp	r3, #1
 8012cd2:	bf8c      	ite	hi
 8012cd4:	2301      	movhi	r3, #1
 8012cd6:	2300      	movls	r3, #0
 8012cd8:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8012cda:	7dbb      	ldrb	r3, [r7, #22]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d10b      	bne.n	8012cf8 <rxSessionUpdate+0x104>
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	7ddb      	ldrb	r3, [r3, #23]
 8012ce4:	78fa      	ldrb	r2, [r7, #3]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d108      	bne.n	8012cfc <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d004      	beq.n	8012cfc <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8012cf2:	7d7b      	ldrb	r3, [r7, #21]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d001      	beq.n	8012cfc <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	e000      	b.n	8012cfe <rxSessionUpdate+0x10a>
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	753b      	strb	r3, [r7, #20]
 8012d00:	7d3b      	ldrb	r3, [r7, #20]
 8012d02:	f003 0301 	and.w	r3, r3, #1
 8012d06:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 8012d08:	7d3b      	ldrb	r3, [r7, #20]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d013      	beq.n	8012d36 <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	2200      	movs	r2, #0
 8012d12:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	2200      	movs	r2, #0
 8012d18:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012d20:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	7b9a      	ldrb	r2, [r3, #14]
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	78fa      	ldrb	r2, [r7, #3]
 8012d34:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 8012d36:	2300      	movs	r3, #0
 8012d38:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 8012d3a:	7d3b      	ldrb	r3, [r7, #20]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d00b      	beq.n	8012d58 <rxSessionUpdate+0x164>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	7bdb      	ldrb	r3, [r3, #15]
 8012d44:	f083 0301 	eor.w	r3, r3, #1
 8012d48:	b2db      	uxtb	r3, r3
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d004      	beq.n	8012d58 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 8012d4e:	68b9      	ldr	r1, [r7, #8]
 8012d50:	68f8      	ldr	r0, [r7, #12]
 8012d52:	f7ff fde3 	bl	801291c <rxSessionRestart>
 8012d56:	e02c      	b.n	8012db2 <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	7ddb      	ldrb	r3, [r3, #23]
 8012d5c:	78fa      	ldrb	r2, [r7, #3]
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	bf0c      	ite	eq
 8012d62:	2301      	moveq	r3, #1
 8012d64:	2300      	movne	r3, #0
 8012d66:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	7c5a      	ldrb	r2, [r3, #17]
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	7e1b      	ldrb	r3, [r3, #24]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	bf0c      	ite	eq
 8012d74:	2301      	moveq	r3, #1
 8012d76:	2300      	movne	r3, #0
 8012d78:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	7b9a      	ldrb	r2, [r3, #14]
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	7d9b      	ldrb	r3, [r3, #22]
 8012d82:	429a      	cmp	r2, r3
 8012d84:	bf0c      	ite	eq
 8012d86:	2301      	moveq	r3, #1
 8012d88:	2300      	movne	r3, #0
 8012d8a:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 8012d8c:	7cfb      	ldrb	r3, [r7, #19]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00f      	beq.n	8012db2 <rxSessionUpdate+0x1be>
 8012d92:	7cbb      	ldrb	r3, [r7, #18]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d00c      	beq.n	8012db2 <rxSessionUpdate+0x1be>
 8012d98:	7c7b      	ldrb	r3, [r7, #17]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d009      	beq.n	8012db2 <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 8012d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	68b9      	ldr	r1, [r7, #8]
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	f7ff fdfd 	bl	80129a8 <rxSessionAcceptFrame>
 8012dae:	4603      	mov	r3, r0
 8012db0:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 8012db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3718      	adds	r7, #24
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	080181ec 	.word	0x080181ec
 8012dc4:	08018f24 	.word	0x08018f24
 8012dc8:	08018028 	.word	0x08018028
 8012dcc:	08018548 	.word	0x08018548
 8012dd0:	08018480 	.word	0x08018480
 8012dd4:	080184fc 	.word	0x080184fc
 8012dd8:	080186c4 	.word	0x080186c4
 8012ddc:	0801861c 	.word	0x0801861c

08012de0 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8012de0:	b5b0      	push	{r4, r5, r7, lr}
 8012de2:	b08c      	sub	sp, #48	@ 0x30
 8012de4:	af04      	add	r7, sp, #16
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
 8012dec:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d106      	bne.n	8012e02 <rxAcceptFrame+0x22>
 8012df4:	4b85      	ldr	r3, [pc, #532]	@ (801300c <rxAcceptFrame+0x22c>)
 8012df6:	4a86      	ldr	r2, [pc, #536]	@ (8013010 <rxAcceptFrame+0x230>)
 8012df8:	f44f 715a 	mov.w	r1, #872	@ 0x368
 8012dfc:	4885      	ldr	r0, [pc, #532]	@ (8013014 <rxAcceptFrame+0x234>)
 8012dfe:	f000 fc7d 	bl	80136fc <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d106      	bne.n	8012e16 <rxAcceptFrame+0x36>
 8012e08:	4b83      	ldr	r3, [pc, #524]	@ (8013018 <rxAcceptFrame+0x238>)
 8012e0a:	4a81      	ldr	r2, [pc, #516]	@ (8013010 <rxAcceptFrame+0x230>)
 8012e0c:	f240 3169 	movw	r1, #873	@ 0x369
 8012e10:	4880      	ldr	r0, [pc, #512]	@ (8013014 <rxAcceptFrame+0x234>)
 8012e12:	f000 fc73 	bl	80136fc <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	8b9a      	ldrh	r2, [r3, #28]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	895b      	ldrh	r3, [r3, #10]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d006      	beq.n	8012e30 <rxAcceptFrame+0x50>
 8012e22:	4b7e      	ldr	r3, [pc, #504]	@ (801301c <rxAcceptFrame+0x23c>)
 8012e24:	4a7a      	ldr	r2, [pc, #488]	@ (8013010 <rxAcceptFrame+0x230>)
 8012e26:	f240 316a 	movw	r1, #874	@ 0x36a
 8012e2a:	487a      	ldr	r0, [pc, #488]	@ (8013014 <rxAcceptFrame+0x234>)
 8012e2c:	f000 fc66 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d106      	bne.n	8012e44 <rxAcceptFrame+0x64>
 8012e36:	4b7a      	ldr	r3, [pc, #488]	@ (8013020 <rxAcceptFrame+0x240>)
 8012e38:	4a75      	ldr	r2, [pc, #468]	@ (8013010 <rxAcceptFrame+0x230>)
 8012e3a:	f240 316b 	movw	r1, #875	@ 0x36b
 8012e3e:	4875      	ldr	r0, [pc, #468]	@ (8013014 <rxAcceptFrame+0x234>)
 8012e40:	f000 fc5c 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	699b      	ldr	r3, [r3, #24]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d106      	bne.n	8012e5a <rxAcceptFrame+0x7a>
 8012e4c:	4b75      	ldr	r3, [pc, #468]	@ (8013024 <rxAcceptFrame+0x244>)
 8012e4e:	4a70      	ldr	r2, [pc, #448]	@ (8013010 <rxAcceptFrame+0x230>)
 8012e50:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8012e54:	486f      	ldr	r0, [pc, #444]	@ (8013014 <rxAcceptFrame+0x234>)
 8012e56:	f000 fc51 	bl	80136fc <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	7b9b      	ldrb	r3, [r3, #14]
 8012e5e:	2b1f      	cmp	r3, #31
 8012e60:	d906      	bls.n	8012e70 <rxAcceptFrame+0x90>
 8012e62:	4b71      	ldr	r3, [pc, #452]	@ (8013028 <rxAcceptFrame+0x248>)
 8012e64:	4a6a      	ldr	r2, [pc, #424]	@ (8013010 <rxAcceptFrame+0x230>)
 8012e66:	f240 316d 	movw	r1, #877	@ 0x36d
 8012e6a:	486a      	ldr	r0, [pc, #424]	@ (8013014 <rxAcceptFrame+0x234>)
 8012e6c:	f000 fc46 	bl	80136fc <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	7b5b      	ldrb	r3, [r3, #13]
 8012e74:	2bff      	cmp	r3, #255	@ 0xff
 8012e76:	d00c      	beq.n	8012e92 <rxAcceptFrame+0xb2>
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	791a      	ldrb	r2, [r3, #4]
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	7b5b      	ldrb	r3, [r3, #13]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d006      	beq.n	8012e92 <rxAcceptFrame+0xb2>
 8012e84:	4b69      	ldr	r3, [pc, #420]	@ (801302c <rxAcceptFrame+0x24c>)
 8012e86:	4a62      	ldr	r2, [pc, #392]	@ (8013010 <rxAcceptFrame+0x230>)
 8012e88:	f240 316e 	movw	r1, #878	@ 0x36e
 8012e8c:	4861      	ldr	r0, [pc, #388]	@ (8013014 <rxAcceptFrame+0x234>)
 8012e8e:	f000 fc35 	bl	80136fc <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8012e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d106      	bne.n	8012ea6 <rxAcceptFrame+0xc6>
 8012e98:	4b65      	ldr	r3, [pc, #404]	@ (8013030 <rxAcceptFrame+0x250>)
 8012e9a:	4a5d      	ldr	r2, [pc, #372]	@ (8013010 <rxAcceptFrame+0x230>)
 8012e9c:	f240 316f 	movw	r1, #879	@ 0x36f
 8012ea0:	485c      	ldr	r0, [pc, #368]	@ (8013014 <rxAcceptFrame+0x234>)
 8012ea2:	f000 fc2b 	bl	80136fc <__assert_func>

    int8_t out = 0;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	7b1b      	ldrb	r3, [r3, #12]
 8012eae:	b25b      	sxtb	r3, r3
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	db6c      	blt.n	8012f8e <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	7b1b      	ldrb	r3, [r3, #12]
 8012eb8:	68ba      	ldr	r2, [r7, #8]
 8012eba:	3308      	adds	r3, #8
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	4413      	add	r3, r2
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d134      	bne.n	8012f30 <rxAcceptFrame+0x150>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	7bdb      	ldrb	r3, [r3, #15]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d030      	beq.n	8012f30 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	689b      	ldr	r3, [r3, #8]
 8012ed2:	2120      	movs	r1, #32
 8012ed4:	68f8      	ldr	r0, [r7, #12]
 8012ed6:	4798      	blx	r3
 8012ed8:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	7b1b      	ldrb	r3, [r3, #12]
 8012ede:	68ba      	ldr	r2, [r7, #8]
 8012ee0:	3308      	adds	r3, #8
 8012ee2:	009b      	lsls	r3, r3, #2
 8012ee4:	4413      	add	r3, r2
 8012ee6:	693a      	ldr	r2, [r7, #16]
 8012ee8:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d01d      	beq.n	8012f2c <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef6:	6939      	ldr	r1, [r7, #16]
 8012ef8:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	2200      	movs	r2, #0
 8012f00:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	2200      	movs	r2, #0
 8012f06:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012f14:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	7b9a      	ldrb	r2, [r3, #14]
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	78fa      	ldrb	r2, [r7, #3]
 8012f22:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	2201      	movs	r2, #1
 8012f28:	761a      	strb	r2, [r3, #24]
 8012f2a:	e001      	b.n	8012f30 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 8012f2c:	23fd      	movs	r3, #253	@ 0xfd
 8012f2e:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	7b1b      	ldrb	r3, [r3, #12]
 8012f34:	68ba      	ldr	r2, [r7, #8]
 8012f36:	3308      	adds	r3, #8
 8012f38:	009b      	lsls	r3, r3, #2
 8012f3a:	4413      	add	r3, r2
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d05e      	beq.n	8013000 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 8012f42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d006      	beq.n	8012f58 <rxAcceptFrame+0x178>
 8012f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8013034 <rxAcceptFrame+0x254>)
 8012f4c:	4a30      	ldr	r2, [pc, #192]	@ (8013010 <rxAcceptFrame+0x230>)
 8012f4e:	f240 318e 	movw	r1, #910	@ 0x38e
 8012f52:	4830      	ldr	r0, [pc, #192]	@ (8013014 <rxAcceptFrame+0x234>)
 8012f54:	f000 fbd2 	bl	80136fc <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	7b1b      	ldrb	r3, [r3, #12]
 8012f5c:	68ba      	ldr	r2, [r7, #8]
 8012f5e:	3308      	adds	r3, #8
 8012f60:	009b      	lsls	r3, r3, #2
 8012f62:	4413      	add	r3, r2
 8012f64:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012f6c:	68b9      	ldr	r1, [r7, #8]
 8012f6e:	6989      	ldr	r1, [r1, #24]
 8012f70:	78fd      	ldrb	r5, [r7, #3]
 8012f72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f74:	9003      	str	r0, [sp, #12]
 8012f76:	9102      	str	r1, [sp, #8]
 8012f78:	e9cd 2300 	strd	r2, r3, [sp]
 8012f7c:	462b      	mov	r3, r5
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	4621      	mov	r1, r4
 8012f82:	68f8      	ldr	r0, [r7, #12]
 8012f84:	f7ff fe36 	bl	8012bf4 <rxSessionUpdate>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	77fb      	strb	r3, [r7, #31]
 8012f8c:	e038      	b.n	8013000 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	7b1b      	ldrb	r3, [r3, #12]
 8012f92:	2bff      	cmp	r3, #255	@ 0xff
 8012f94:	d006      	beq.n	8012fa4 <rxAcceptFrame+0x1c4>
 8012f96:	4b28      	ldr	r3, [pc, #160]	@ (8013038 <rxAcceptFrame+0x258>)
 8012f98:	4a1d      	ldr	r2, [pc, #116]	@ (8013010 <rxAcceptFrame+0x230>)
 8012f9a:	f240 319a 	movw	r1, #922	@ 0x39a
 8012f9e:	481d      	ldr	r0, [pc, #116]	@ (8013014 <rxAcceptFrame+0x234>)
 8012fa0:	f000 fbac 	bl	80136fc <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	695a      	ldr	r2, [r3, #20]
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 8012fac:	4293      	cmp	r3, r2
 8012fae:	bf28      	it	cs
 8012fb0:	4613      	movcs	r3, r2
 8012fb2:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	689b      	ldr	r3, [r3, #8]
 8012fb8:	69b9      	ldr	r1, [r7, #24]
 8012fba:	68f8      	ldr	r0, [r7, #12]
 8012fbc:	4798      	blx	r3
 8012fbe:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d01a      	beq.n	8012ffc <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8012fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fc8:	4619      	mov	r1, r3
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f7ff fb32 	bl	8012634 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012fd8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 8012fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fde:	69ba      	ldr	r2, [r7, #24]
 8012fe0:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 8012fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fe4:	697a      	ldr	r2, [r7, #20]
 8012fe6:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	699b      	ldr	r3, [r3, #24]
 8012fec:	69ba      	ldr	r2, [r7, #24]
 8012fee:	4619      	mov	r1, r3
 8012ff0:	6978      	ldr	r0, [r7, #20]
 8012ff2:	f001 fd24 	bl	8014a3e <memcpy>
            out = 1;
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	77fb      	strb	r3, [r7, #31]
 8012ffa:	e001      	b.n	8013000 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 8012ffc:	23fd      	movs	r3, #253	@ 0xfd
 8012ffe:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8013000:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013004:	4618      	mov	r0, r3
 8013006:	3720      	adds	r7, #32
 8013008:	46bd      	mov	sp, r7
 801300a:	bdb0      	pop	{r4, r5, r7, pc}
 801300c:	080181ec 	.word	0x080181ec
 8013010:	08018f14 	.word	0x08018f14
 8013014:	08018028 	.word	0x08018028
 8013018:	080186ec 	.word	0x080186ec
 801301c:	08018708 	.word	0x08018708
 8013020:	08018480 	.word	0x08018480
 8013024:	080184dc 	.word	0x080184dc
 8013028:	0801861c 	.word	0x0801861c
 801302c:	08018730 	.word	0x08018730
 8013030:	080184fc 	.word	0x080184fc
 8013034:	08018788 	.word	0x08018788
 8013038:	08018794 	.word	0x08018794

0801303c <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	881b      	ldrh	r3, [r3, #0]
 801304a:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	8b9b      	ldrh	r3, [r3, #28]
 8013050:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 8013052:	89fa      	ldrh	r2, [r7, #14]
 8013054:	89bb      	ldrh	r3, [r7, #12]
 8013056:	429a      	cmp	r2, r3
 8013058:	d00a      	beq.n	8013070 <rxSubscriptionPredicateOnPortID+0x34>
 801305a:	89fa      	ldrh	r2, [r7, #14]
 801305c:	89bb      	ldrh	r3, [r7, #12]
 801305e:	429a      	cmp	r2, r3
 8013060:	bf8c      	ite	hi
 8013062:	2301      	movhi	r3, #1
 8013064:	2300      	movls	r3, #0
 8013066:	b2db      	uxtb	r3, r3
 8013068:	461a      	mov	r2, r3
 801306a:	4b05      	ldr	r3, [pc, #20]	@ (8013080 <rxSubscriptionPredicateOnPortID+0x44>)
 801306c:	569b      	ldrsb	r3, [r3, r2]
 801306e:	e000      	b.n	8013072 <rxSubscriptionPredicateOnPortID+0x36>
 8013070:	2300      	movs	r3, #0
}
 8013072:	4618      	mov	r0, r3
 8013074:	3714      	adds	r7, #20
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop
 8013080:	08018f00 	.word	0x08018f00

08013084 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	331c      	adds	r3, #28
 8013092:	6839      	ldr	r1, [r7, #0]
 8013094:	4618      	mov	r0, r3
 8013096:	f7ff ffd1 	bl	801303c <rxSubscriptionPredicateOnPortID>
 801309a:	4603      	mov	r3, r0
}
 801309c:	4618      	mov	r0, r3
 801309e:	3708      	adds	r7, #8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 80130a4:	b5b0      	push	{r4, r5, r7, lr}
 80130a6:	b08c      	sub	sp, #48	@ 0x30
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	60f8      	str	r0, [r7, #12]
 80130ac:	60b9      	str	r1, [r7, #8]
 80130ae:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d106      	bne.n	80130c4 <canardInit+0x20>
 80130b6:	4b16      	ldr	r3, [pc, #88]	@ (8013110 <canardInit+0x6c>)
 80130b8:	4a16      	ldr	r2, [pc, #88]	@ (8013114 <canardInit+0x70>)
 80130ba:	f240 31d6 	movw	r1, #982	@ 0x3d6
 80130be:	4816      	ldr	r0, [pc, #88]	@ (8013118 <canardInit+0x74>)
 80130c0:	f000 fb1c 	bl	80136fc <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d106      	bne.n	80130d8 <canardInit+0x34>
 80130ca:	4b14      	ldr	r3, [pc, #80]	@ (801311c <canardInit+0x78>)
 80130cc:	4a11      	ldr	r2, [pc, #68]	@ (8013114 <canardInit+0x70>)
 80130ce:	f240 31d7 	movw	r1, #983	@ 0x3d7
 80130d2:	4811      	ldr	r0, [pc, #68]	@ (8013118 <canardInit+0x74>)
 80130d4:	f000 fb12 	bl	80136fc <__assert_func>
    const CanardInstance out = {
 80130d8:	2300      	movs	r3, #0
 80130da:	617b      	str	r3, [r7, #20]
 80130dc:	23ff      	movs	r3, #255	@ 0xff
 80130de:	763b      	strb	r3, [r7, #24]
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	61fb      	str	r3, [r7, #28]
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	623b      	str	r3, [r7, #32]
 80130e8:	2300      	movs	r3, #0
 80130ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80130ec:	2300      	movs	r3, #0
 80130ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80130f0:	2300      	movs	r3, #0
 80130f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	461d      	mov	r5, r3
 80130f8:	f107 0414 	add.w	r4, r7, #20
 80130fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013100:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013104:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8013108:	68f8      	ldr	r0, [r7, #12]
 801310a:	3730      	adds	r7, #48	@ 0x30
 801310c:	46bd      	mov	sp, r7
 801310e:	bdb0      	pop	{r4, r5, r7, pc}
 8013110:	080187b4 	.word	0x080187b4
 8013114:	08018d88 	.word	0x08018d88
 8013118:	08018028 	.word	0x08018028
 801311c:	080187d4 	.word	0x080187d4

08013120 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 8013120:	b4b0      	push	{r4, r5, r7}
 8013122:	b08b      	sub	sp, #44	@ 0x2c
 8013124:	af00      	add	r7, sp, #0
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	617b      	str	r3, [r7, #20]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	61bb      	str	r3, [r7, #24]
 8013134:	2300      	movs	r3, #0
 8013136:	61fb      	str	r3, [r7, #28]
 8013138:	2300      	movs	r3, #0
 801313a:	623b      	str	r3, [r7, #32]
 801313c:	2300      	movs	r3, #0
 801313e:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	461d      	mov	r5, r3
 8013144:	f107 0414 	add.w	r4, r7, #20
 8013148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801314a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801314c:	6823      	ldr	r3, [r4, #0]
 801314e:	602b      	str	r3, [r5, #0]
}
 8013150:	68f8      	ldr	r0, [r7, #12]
 8013152:	372c      	adds	r7, #44	@ 0x2c
 8013154:	46bd      	mov	sp, r7
 8013156:	bcb0      	pop	{r4, r5, r7}
 8013158:	4770      	bx	lr
	...

0801315c <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b08e      	sub	sp, #56	@ 0x38
 8013160:	af06      	add	r7, sp, #24
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 801316a:	f06f 0301 	mvn.w	r3, #1
 801316e:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d062      	beq.n	801323c <canardTxPush+0xe0>
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d05f      	beq.n	801323c <canardTxPush+0xe0>
 801317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801317e:	2b00      	cmp	r3, #0
 8013180:	d05c      	beq.n	801323c <canardTxPush+0xe0>
 8013182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013184:	2b00      	cmp	r3, #0
 8013186:	d102      	bne.n	801318e <canardTxPush+0x32>
 8013188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801318a:	2b00      	cmp	r3, #0
 801318c:	d156      	bne.n	801323c <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	4618      	mov	r0, r3
 8013194:	f7fe fc02 	bl	801199c <adjustPresentationLayerMTU>
 8013198:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	791a      	ldrb	r2, [r3, #4]
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	9300      	str	r3, [sp, #0]
 80131a2:	4613      	mov	r3, r2
 80131a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80131a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131aa:	f7fe fc27 	bl	80119fc <txMakeCANID>
 80131ae:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	db40      	blt.n	8013238 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 80131b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80131b8:	69bb      	ldr	r3, [r7, #24]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d81c      	bhi.n	80131f8 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 80131be:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 80131c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131c2:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 80131c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80131c6:	9103      	str	r1, [sp, #12]
 80131c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80131ca:	9102      	str	r1, [sp, #8]
 80131cc:	9201      	str	r2, [sp, #4]
 80131ce:	9300      	str	r3, [sp, #0]
 80131d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131d4:	68b9      	ldr	r1, [r7, #8]
 80131d6:	68f8      	ldr	r0, [r7, #12]
 80131d8:	f7fe fdda 	bl	8011d90 <txPushSingleFrame>
 80131dc:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	db2b      	blt.n	801323c <canardTxPush+0xe0>
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	2b01      	cmp	r3, #1
 80131e8:	d028      	beq.n	801323c <canardTxPush+0xe0>
 80131ea:	4b1c      	ldr	r3, [pc, #112]	@ (801325c <canardTxPush+0x100>)
 80131ec:	4a1c      	ldr	r2, [pc, #112]	@ (8013260 <canardTxPush+0x104>)
 80131ee:	f240 4105 	movw	r1, #1029	@ 0x405
 80131f2:	481c      	ldr	r0, [pc, #112]	@ (8013264 <canardTxPush+0x108>)
 80131f4:	f000 fa82 	bl	80136fc <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 80131f8:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 80131fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131fc:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 80131fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013200:	9105      	str	r1, [sp, #20]
 8013202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013204:	9104      	str	r1, [sp, #16]
 8013206:	9203      	str	r2, [sp, #12]
 8013208:	9302      	str	r3, [sp, #8]
 801320a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801320e:	e9cd 2300 	strd	r2, r3, [sp]
 8013212:	69ba      	ldr	r2, [r7, #24]
 8013214:	68b9      	ldr	r1, [r7, #8]
 8013216:	68f8      	ldr	r0, [r7, #12]
 8013218:	f7fe ffd4 	bl	80121c4 <txPushMultiFrame>
 801321c:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	2b00      	cmp	r3, #0
 8013222:	db0b      	blt.n	801323c <canardTxPush+0xe0>
 8013224:	69fb      	ldr	r3, [r7, #28]
 8013226:	2b01      	cmp	r3, #1
 8013228:	dc08      	bgt.n	801323c <canardTxPush+0xe0>
 801322a:	4b0f      	ldr	r3, [pc, #60]	@ (8013268 <canardTxPush+0x10c>)
 801322c:	4a0c      	ldr	r2, [pc, #48]	@ (8013260 <canardTxPush+0x104>)
 801322e:	f240 4111 	movw	r1, #1041	@ 0x411
 8013232:	480c      	ldr	r0, [pc, #48]	@ (8013264 <canardTxPush+0x108>)
 8013234:	f000 fa62 	bl	80136fc <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d106      	bne.n	8013250 <canardTxPush+0xf4>
 8013242:	4b0a      	ldr	r3, [pc, #40]	@ (801326c <canardTxPush+0x110>)
 8013244:	4a06      	ldr	r2, [pc, #24]	@ (8013260 <canardTxPush+0x104>)
 8013246:	f240 4119 	movw	r1, #1049	@ 0x419
 801324a:	4806      	ldr	r0, [pc, #24]	@ (8013264 <canardTxPush+0x108>)
 801324c:	f000 fa56 	bl	80136fc <__assert_func>
    return out;
 8013250:	69fb      	ldr	r3, [r7, #28]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3720      	adds	r7, #32
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	08018324 	.word	0x08018324
 8013260:	08018d94 	.word	0x08018d94
 8013264:	08018028 	.word	0x08018028
 8013268:	08018468 	.word	0x08018468
 801326c:	080187f0 	.word	0x080187f0

08013270 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 8013278:	2300      	movs	r3, #0
 801327a:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d006      	beq.n	8013290 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	68db      	ldr	r3, [r3, #12]
 8013286:	2100      	movs	r1, #0
 8013288:	4618      	mov	r0, r3
 801328a:	f7fd ff1d 	bl	80110c8 <cavlFindExtremum>
 801328e:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8013290:	68fb      	ldr	r3, [r7, #12]
}
 8013292:	4618      	mov	r0, r3
 8013294:	3710      	adds	r7, #16
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}

0801329a <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 801329a:	b580      	push	{r7, lr}
 801329c:	b084      	sub	sp, #16
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
 80132a2:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 80132a4:	2300      	movs	r3, #0
 80132a6:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d010      	beq.n	80132d0 <canardTxPop+0x36>
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d00d      	beq.n	80132d0 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	330c      	adds	r3, #12
 80132bc:	683a      	ldr	r2, [r7, #0]
 80132be:	4611      	mov	r1, r2
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fe f957 	bl	8011574 <cavlRemove>
        que->size--;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	689b      	ldr	r3, [r3, #8]
 80132ca:	1e5a      	subs	r2, r3, #1
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	609a      	str	r2, [r3, #8]
    }
    return out;
 80132d0:	68fb      	ldr	r3, [r7, #12]
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3710      	adds	r7, #16
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
	...

080132dc <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b090      	sub	sp, #64	@ 0x40
 80132e0:	af02      	add	r7, sp, #8
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 80132e8:	23fe      	movs	r3, #254	@ 0xfe
 80132ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d068      	beq.n	80133c6 <canardRxAccept+0xea>
 80132f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d065      	beq.n	80133c6 <canardRxAccept+0xea>
 80132fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d062      	beq.n	80133c6 <canardRxAccept+0xea>
 8013300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013308:	d25d      	bcs.n	80133c6 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 801330a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801330c:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 801330e:	2b00      	cmp	r3, #0
 8013310:	d103      	bne.n	801331a <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 8013312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d155      	bne.n	80133c6 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 801331a:	f107 0310 	add.w	r3, r7, #16
 801331e:	2220      	movs	r2, #32
 8013320:	2100      	movs	r1, #0
 8013322:	4618      	mov	r0, r3
 8013324:	f001 faa5 	bl	8014872 <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 8013328:	f107 0310 	add.w	r3, r7, #16
 801332c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801332e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013332:	f7ff f83b 	bl	80123ac <rxTryParseFrame>
 8013336:	4603      	mov	r3, r0
 8013338:	2b00      	cmp	r3, #0
 801333a:	d041      	beq.n	80133c0 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 801333c:	7f7b      	ldrb	r3, [r7, #29]
 801333e:	2bff      	cmp	r3, #255	@ 0xff
 8013340:	d004      	beq.n	801334c <canardRxAccept+0x70>
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	791a      	ldrb	r2, [r3, #4]
 8013346:	7f7b      	ldrb	r3, [r7, #29]
 8013348:	429a      	cmp	r2, r3
 801334a:	d135      	bne.n	80133b8 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 801334c:	7e7b      	ldrb	r3, [r7, #25]
 801334e:	3304      	adds	r3, #4
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	68fa      	ldr	r2, [r7, #12]
 8013354:	18d0      	adds	r0, r2, r3
 8013356:	f107 0310 	add.w	r3, r7, #16
 801335a:	f103 010a 	add.w	r1, r3, #10
 801335e:	2300      	movs	r3, #0
 8013360:	4a21      	ldr	r2, [pc, #132]	@ (80133e8 <canardRxAccept+0x10c>)
 8013362:	f7fe f889 	bl	8011478 <cavlSearch>
 8013366:	6338      	str	r0, [r7, #48]	@ 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 8013368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801336a:	2b00      	cmp	r3, #0
 801336c:	d002      	beq.n	8013374 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 801336e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013372:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 8013374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013376:	2b00      	cmp	r3, #0
 8013378:	d01a      	beq.n	80133b0 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 801337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337c:	8b9a      	ldrh	r2, [r3, #28]
 801337e:	8b7b      	ldrh	r3, [r7, #26]
 8013380:	429a      	cmp	r2, r3
 8013382:	d006      	beq.n	8013392 <canardRxAccept+0xb6>
 8013384:	4b19      	ldr	r3, [pc, #100]	@ (80133ec <canardRxAccept+0x110>)
 8013386:	4a1a      	ldr	r2, [pc, #104]	@ (80133f0 <canardRxAccept+0x114>)
 8013388:	f240 415a 	movw	r1, #1114	@ 0x45a
 801338c:	4819      	ldr	r0, [pc, #100]	@ (80133f4 <canardRxAccept+0x118>)
 801338e:	f000 f9b5 	bl	80136fc <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 8013392:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8013396:	f107 0210 	add.w	r2, r7, #16
 801339a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801339c:	9300      	str	r3, [sp, #0]
 801339e:	460b      	mov	r3, r1
 80133a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80133a2:	68f8      	ldr	r0, [r7, #12]
 80133a4:	f7ff fd1c 	bl	8012de0 <rxAcceptFrame>
 80133a8:	4603      	mov	r3, r0
 80133aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 80133ae:	e00a      	b.n	80133c6 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 80133b0:	2300      	movs	r3, #0
 80133b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 80133b6:	e006      	b.n	80133c6 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 80133b8:	2300      	movs	r3, #0
 80133ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80133be:	e002      	b.n	80133c6 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 80133c0:	2300      	movs	r3, #0
 80133c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 80133c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80133ca:	2b01      	cmp	r3, #1
 80133cc:	dd06      	ble.n	80133dc <canardRxAccept+0x100>
 80133ce:	4b0a      	ldr	r3, [pc, #40]	@ (80133f8 <canardRxAccept+0x11c>)
 80133d0:	4a07      	ldr	r2, [pc, #28]	@ (80133f0 <canardRxAccept+0x114>)
 80133d2:	f240 416c 	movw	r1, #1132	@ 0x46c
 80133d6:	4807      	ldr	r0, [pc, #28]	@ (80133f4 <canardRxAccept+0x118>)
 80133d8:	f000 f990 	bl	80136fc <__assert_func>
    return out;
 80133dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3738      	adds	r7, #56	@ 0x38
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	0801303d 	.word	0x0801303d
 80133ec:	080187fc 	.word	0x080187fc
 80133f0:	08018ef0 	.word	0x08018ef0
 80133f4:	08018028 	.word	0x08018028
 80133f8:	0801881c 	.word	0x0801881c

080133fc <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b088      	sub	sp, #32
 8013400:	af00      	add	r7, sp, #0
 8013402:	60f8      	str	r0, [r7, #12]
 8013404:	607b      	str	r3, [r7, #4]
 8013406:	460b      	mov	r3, r1
 8013408:	72fb      	strb	r3, [r7, #11]
 801340a:	4613      	mov	r3, r2
 801340c:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 801340e:	23fe      	movs	r3, #254	@ 0xfe
 8013410:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8013412:	7afb      	ldrb	r3, [r7, #11]
 8013414:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d04a      	beq.n	80134b2 <canardRxSubscribe+0xb6>
 801341c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801341e:	2b00      	cmp	r3, #0
 8013420:	d047      	beq.n	80134b2 <canardRxSubscribe+0xb6>
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	2b02      	cmp	r3, #2
 8013426:	d844      	bhi.n	80134b2 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 8013428:	893a      	ldrh	r2, [r7, #8]
 801342a:	7afb      	ldrb	r3, [r7, #11]
 801342c:	4619      	mov	r1, r3
 801342e:	68f8      	ldr	r0, [r7, #12]
 8013430:	f000 f850 	bl	80134d4 <canardRxUnsubscribe>
 8013434:	4603      	mov	r3, r0
 8013436:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 8013438:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801343c:	2b00      	cmp	r3, #0
 801343e:	db38      	blt.n	80134b2 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 8013440:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013446:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 801344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801344c:	687a      	ldr	r2, [r7, #4]
 801344e:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 8013450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013452:	893a      	ldrh	r2, [r7, #8]
 8013454:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8013456:	2300      	movs	r3, #0
 8013458:	61bb      	str	r3, [r7, #24]
 801345a:	e009      	b.n	8013470 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 801345c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801345e:	69bb      	ldr	r3, [r7, #24]
 8013460:	3308      	adds	r3, #8
 8013462:	009b      	lsls	r3, r3, #2
 8013464:	4413      	add	r3, r2
 8013466:	2200      	movs	r2, #0
 8013468:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	3301      	adds	r3, #1
 801346e:	61bb      	str	r3, [r7, #24]
 8013470:	69bb      	ldr	r3, [r7, #24]
 8013472:	2b7f      	cmp	r3, #127	@ 0x7f
 8013474:	d9f2      	bls.n	801345c <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	3304      	adds	r3, #4
 801347a:	009b      	lsls	r3, r3, #2
 801347c:	68fa      	ldr	r2, [r7, #12]
 801347e:	18d0      	adds	r0, r2, r3
 8013480:	4b0f      	ldr	r3, [pc, #60]	@ (80134c0 <canardRxSubscribe+0xc4>)
 8013482:	4a10      	ldr	r2, [pc, #64]	@ (80134c4 <canardRxSubscribe+0xc8>)
 8013484:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013486:	f7fd fff7 	bl	8011478 <cavlSearch>
 801348a:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 801348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801348e:	693a      	ldr	r2, [r7, #16]
 8013490:	429a      	cmp	r2, r3
 8013492:	d006      	beq.n	80134a2 <canardRxSubscribe+0xa6>
 8013494:	4b0c      	ldr	r3, [pc, #48]	@ (80134c8 <canardRxSubscribe+0xcc>)
 8013496:	4a0d      	ldr	r2, [pc, #52]	@ (80134cc <canardRxSubscribe+0xd0>)
 8013498:	f44f 6192 	mov.w	r1, #1168	@ 0x490
 801349c:	480c      	ldr	r0, [pc, #48]	@ (80134d0 <canardRxSubscribe+0xd4>)
 801349e:	f000 f92d 	bl	80136fc <__assert_func>
            out = (out > 0) ? 0 : 1;
 80134a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	bfd4      	ite	le
 80134aa:	2301      	movle	r3, #1
 80134ac:	2300      	movgt	r3, #0
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80134b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3720      	adds	r7, #32
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	080117d9 	.word	0x080117d9
 80134c4:	08013085 	.word	0x08013085
 80134c8:	08018828 	.word	0x08018828
 80134cc:	08018fb8 	.word	0x08018fb8
 80134d0:	08018028 	.word	0x08018028

080134d4 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b088      	sub	sp, #32
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	460b      	mov	r3, r1
 80134de:	70fb      	strb	r3, [r7, #3]
 80134e0:	4613      	mov	r3, r2
 80134e2:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 80134e4:	23fe      	movs	r3, #254	@ 0xfe
 80134e6:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 80134e8:	78fb      	ldrb	r3, [r7, #3]
 80134ea:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d05f      	beq.n	80135b2 <canardRxUnsubscribe+0xde>
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	2b02      	cmp	r3, #2
 80134f6:	d85c      	bhi.n	80135b2 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 80134f8:	883b      	ldrh	r3, [r7, #0]
 80134fa:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	3304      	adds	r3, #4
 8013500:	009b      	lsls	r3, r3, #2
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	18d0      	adds	r0, r2, r3
 8013506:	f107 010e 	add.w	r1, r7, #14
 801350a:	2300      	movs	r3, #0
 801350c:	4a2c      	ldr	r2, [pc, #176]	@ (80135c0 <canardRxUnsubscribe+0xec>)
 801350e:	f7fd ffb3 	bl	8011478 <cavlSearch>
 8013512:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d049      	beq.n	80135ae <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	3304      	adds	r3, #4
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	687a      	ldr	r2, [r7, #4]
 8013522:	4413      	add	r3, r2
 8013524:	693a      	ldr	r2, [r7, #16]
 8013526:	4611      	mov	r1, r2
 8013528:	4618      	mov	r0, r3
 801352a:	f7fe f823 	bl	8011574 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	8b9b      	ldrh	r3, [r3, #28]
 8013532:	883a      	ldrh	r2, [r7, #0]
 8013534:	429a      	cmp	r2, r3
 8013536:	d006      	beq.n	8013546 <canardRxUnsubscribe+0x72>
 8013538:	4b22      	ldr	r3, [pc, #136]	@ (80135c4 <canardRxUnsubscribe+0xf0>)
 801353a:	4a23      	ldr	r2, [pc, #140]	@ (80135c8 <canardRxUnsubscribe+0xf4>)
 801353c:	f240 41a5 	movw	r1, #1189	@ 0x4a5
 8013540:	4822      	ldr	r0, [pc, #136]	@ (80135cc <canardRxUnsubscribe+0xf8>)
 8013542:	f000 f8db 	bl	80136fc <__assert_func>
            out = 1;
 8013546:	2301      	movs	r3, #1
 8013548:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 801354a:	2300      	movs	r3, #0
 801354c:	61bb      	str	r3, [r7, #24]
 801354e:	e02a      	b.n	80135a6 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	68da      	ldr	r2, [r3, #12]
 8013554:	6939      	ldr	r1, [r7, #16]
 8013556:	69bb      	ldr	r3, [r7, #24]
 8013558:	3308      	adds	r3, #8
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	440b      	add	r3, r1
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d007      	beq.n	8013574 <canardRxUnsubscribe+0xa0>
 8013564:	6939      	ldr	r1, [r7, #16]
 8013566:	69bb      	ldr	r3, [r7, #24]
 8013568:	3308      	adds	r3, #8
 801356a:	009b      	lsls	r3, r3, #2
 801356c:	440b      	add	r3, r1
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	691b      	ldr	r3, [r3, #16]
 8013572:	e000      	b.n	8013576 <canardRxUnsubscribe+0xa2>
 8013574:	2300      	movs	r3, #0
 8013576:	4619      	mov	r1, r3
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	68da      	ldr	r2, [r3, #12]
 8013580:	6939      	ldr	r1, [r7, #16]
 8013582:	69bb      	ldr	r3, [r7, #24]
 8013584:	3308      	adds	r3, #8
 8013586:	009b      	lsls	r3, r3, #2
 8013588:	440b      	add	r3, r1
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	4619      	mov	r1, r3
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	4790      	blx	r2
                sub->sessions[i] = NULL;
 8013592:	693a      	ldr	r2, [r7, #16]
 8013594:	69bb      	ldr	r3, [r7, #24]
 8013596:	3308      	adds	r3, #8
 8013598:	009b      	lsls	r3, r3, #2
 801359a:	4413      	add	r3, r2
 801359c:	2200      	movs	r2, #0
 801359e:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80135a0:	69bb      	ldr	r3, [r7, #24]
 80135a2:	3301      	adds	r3, #1
 80135a4:	61bb      	str	r3, [r7, #24]
 80135a6:	69bb      	ldr	r3, [r7, #24]
 80135a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80135aa:	d9d1      	bls.n	8013550 <canardRxUnsubscribe+0x7c>
 80135ac:	e001      	b.n	80135b2 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 80135ae:	2300      	movs	r3, #0
 80135b0:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80135b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	3720      	adds	r7, #32
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	0801303d 	.word	0x0801303d
 80135c4:	08018848 	.word	0x08018848
 80135c8:	08018fcc 	.word	0x08018fcc
 80135cc:	08018028 	.word	0x08018028

080135d0 <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b085      	sub	sp, #20
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
 80135d8:	460b      	mov	r3, r1
 80135da:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 80135dc:	f107 0308 	add.w	r3, r7, #8
 80135e0:	2200      	movs	r2, #0
 80135e2:	601a      	str	r2, [r3, #0]
 80135e4:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 80135e6:	887b      	ldrh	r3, [r7, #2]
 80135e8:	021b      	lsls	r3, r3, #8
 80135ea:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 80135ec:	4b07      	ldr	r3, [pc, #28]	@ (801360c <canardMakeFilterForSubject+0x3c>)
 80135ee:	60fb      	str	r3, [r7, #12]

    return out;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	461a      	mov	r2, r3
 80135f4:	f107 0308 	add.w	r3, r7, #8
 80135f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80135fc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	3714      	adds	r7, #20
 8013604:	46bd      	mov	sp, r7
 8013606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360a:	4770      	bx	lr
 801360c:	021fff80 	.word	0x021fff80

08013610 <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 8013610:	b480      	push	{r7}
 8013612:	b085      	sub	sp, #20
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
 8013618:	460b      	mov	r3, r1
 801361a:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 801361c:	f107 0308 	add.w	r3, r7, #8
 8013620:	2200      	movs	r2, #0
 8013622:	601a      	str	r2, [r3, #0]
 8013624:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 8013626:	78fb      	ldrb	r3, [r7, #3]
 8013628:	01db      	lsls	r3, r3, #7
 801362a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801362e:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 8013630:	4b07      	ldr	r3, [pc, #28]	@ (8013650 <canardMakeFilterForServices+0x40>)
 8013632:	60fb      	str	r3, [r7, #12]

    return out;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	461a      	mov	r2, r3
 8013638:	f107 0308 	add.w	r3, r7, #8
 801363c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013640:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	3714      	adds	r7, #20
 8013648:	46bd      	mov	sp, r7
 801364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364e:	4770      	bx	lr
 8013650:	02803f80 	.word	0x02803f80

08013654 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 8013654:	b480      	push	{r7}
 8013656:	b087      	sub	sp, #28
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 8013660:	f107 0310 	add.w	r3, r7, #16
 8013664:	2200      	movs	r2, #0
 8013666:	601a      	str	r2, [r3, #0]
 8013668:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	685a      	ldr	r2, [r3, #4]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	401a      	ands	r2, r3
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	6819      	ldr	r1, [r3, #0]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	404b      	eors	r3, r1
 801367e:	43db      	mvns	r3, r3
 8013680:	4013      	ands	r3, r2
 8013682:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	681a      	ldr	r2, [r3, #0]
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	4013      	ands	r3, r2
 801368c:	613b      	str	r3, [r7, #16]

    return out;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	461a      	mov	r2, r3
 8013692:	f107 0310 	add.w	r3, r7, #16
 8013696:	e893 0003 	ldmia.w	r3, {r0, r1}
 801369a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801369e:	68f8      	ldr	r0, [r7, #12]
 80136a0:	371c      	adds	r7, #28
 80136a2:	46bd      	mov	sp, r7
 80136a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a8:	4770      	bx	lr

080136aa <_ZdlPvj>:
 80136aa:	f000 b814 	b.w	80136d6 <_ZdlPv>

080136ae <_Znwj>:
 80136ae:	2801      	cmp	r0, #1
 80136b0:	bf38      	it	cc
 80136b2:	2001      	movcc	r0, #1
 80136b4:	b510      	push	{r4, lr}
 80136b6:	4604      	mov	r4, r0
 80136b8:	4620      	mov	r0, r4
 80136ba:	f000 f84f 	bl	801375c <malloc>
 80136be:	b100      	cbz	r0, 80136c2 <_Znwj+0x14>
 80136c0:	bd10      	pop	{r4, pc}
 80136c2:	f000 f80b 	bl	80136dc <_ZSt15get_new_handlerv>
 80136c6:	b908      	cbnz	r0, 80136cc <_Znwj+0x1e>
 80136c8:	f000 f810 	bl	80136ec <abort>
 80136cc:	4780      	blx	r0
 80136ce:	e7f3      	b.n	80136b8 <_Znwj+0xa>

080136d0 <_ZSt25__throw_bad_function_callv>:
 80136d0:	b508      	push	{r3, lr}
 80136d2:	f000 f80b 	bl	80136ec <abort>

080136d6 <_ZdlPv>:
 80136d6:	f000 b849 	b.w	801376c <free>
	...

080136dc <_ZSt15get_new_handlerv>:
 80136dc:	4b02      	ldr	r3, [pc, #8]	@ (80136e8 <_ZSt15get_new_handlerv+0xc>)
 80136de:	6818      	ldr	r0, [r3, #0]
 80136e0:	f3bf 8f5b 	dmb	ish
 80136e4:	4770      	bx	lr
 80136e6:	bf00      	nop
 80136e8:	20000a44 	.word	0x20000a44

080136ec <abort>:
 80136ec:	b508      	push	{r3, lr}
 80136ee:	2006      	movs	r0, #6
 80136f0:	f001 f902 	bl	80148f8 <raise>
 80136f4:	2001      	movs	r0, #1
 80136f6:	f7f5 fc7d 	bl	8008ff4 <_exit>
	...

080136fc <__assert_func>:
 80136fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136fe:	4614      	mov	r4, r2
 8013700:	461a      	mov	r2, r3
 8013702:	4b09      	ldr	r3, [pc, #36]	@ (8013728 <__assert_func+0x2c>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	4605      	mov	r5, r0
 8013708:	68d8      	ldr	r0, [r3, #12]
 801370a:	b954      	cbnz	r4, 8013722 <__assert_func+0x26>
 801370c:	4b07      	ldr	r3, [pc, #28]	@ (801372c <__assert_func+0x30>)
 801370e:	461c      	mov	r4, r3
 8013710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013714:	9100      	str	r1, [sp, #0]
 8013716:	462b      	mov	r3, r5
 8013718:	4905      	ldr	r1, [pc, #20]	@ (8013730 <__assert_func+0x34>)
 801371a:	f000 ffed 	bl	80146f8 <fiprintf>
 801371e:	f7ff ffe5 	bl	80136ec <abort>
 8013722:	4b04      	ldr	r3, [pc, #16]	@ (8013734 <__assert_func+0x38>)
 8013724:	e7f4      	b.n	8013710 <__assert_func+0x14>
 8013726:	bf00      	nop
 8013728:	20000090 	.word	0x20000090
 801372c:	0801901b 	.word	0x0801901b
 8013730:	08018fed 	.word	0x08018fed
 8013734:	08018fe0 	.word	0x08018fe0

08013738 <exit>:
 8013738:	b508      	push	{r3, lr}
 801373a:	4b06      	ldr	r3, [pc, #24]	@ (8013754 <exit+0x1c>)
 801373c:	4604      	mov	r4, r0
 801373e:	b113      	cbz	r3, 8013746 <exit+0xe>
 8013740:	2100      	movs	r1, #0
 8013742:	f3af 8000 	nop.w
 8013746:	4b04      	ldr	r3, [pc, #16]	@ (8013758 <exit+0x20>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	b103      	cbz	r3, 801374e <exit+0x16>
 801374c:	4798      	blx	r3
 801374e:	4620      	mov	r0, r4
 8013750:	f7f5 fc50 	bl	8008ff4 <_exit>
 8013754:	00000000 	.word	0x00000000
 8013758:	20000b88 	.word	0x20000b88

0801375c <malloc>:
 801375c:	4b02      	ldr	r3, [pc, #8]	@ (8013768 <malloc+0xc>)
 801375e:	4601      	mov	r1, r0
 8013760:	6818      	ldr	r0, [r3, #0]
 8013762:	f000 b82d 	b.w	80137c0 <_malloc_r>
 8013766:	bf00      	nop
 8013768:	20000090 	.word	0x20000090

0801376c <free>:
 801376c:	4b02      	ldr	r3, [pc, #8]	@ (8013778 <free+0xc>)
 801376e:	4601      	mov	r1, r0
 8013770:	6818      	ldr	r0, [r3, #0]
 8013772:	f001 bfc5 	b.w	8015700 <_free_r>
 8013776:	bf00      	nop
 8013778:	20000090 	.word	0x20000090

0801377c <sbrk_aligned>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	4e0f      	ldr	r6, [pc, #60]	@ (80137bc <sbrk_aligned+0x40>)
 8013780:	460c      	mov	r4, r1
 8013782:	6831      	ldr	r1, [r6, #0]
 8013784:	4605      	mov	r5, r0
 8013786:	b911      	cbnz	r1, 801378e <sbrk_aligned+0x12>
 8013788:	f001 f90a 	bl	80149a0 <_sbrk_r>
 801378c:	6030      	str	r0, [r6, #0]
 801378e:	4621      	mov	r1, r4
 8013790:	4628      	mov	r0, r5
 8013792:	f001 f905 	bl	80149a0 <_sbrk_r>
 8013796:	1c43      	adds	r3, r0, #1
 8013798:	d103      	bne.n	80137a2 <sbrk_aligned+0x26>
 801379a:	f04f 34ff 	mov.w	r4, #4294967295
 801379e:	4620      	mov	r0, r4
 80137a0:	bd70      	pop	{r4, r5, r6, pc}
 80137a2:	1cc4      	adds	r4, r0, #3
 80137a4:	f024 0403 	bic.w	r4, r4, #3
 80137a8:	42a0      	cmp	r0, r4
 80137aa:	d0f8      	beq.n	801379e <sbrk_aligned+0x22>
 80137ac:	1a21      	subs	r1, r4, r0
 80137ae:	4628      	mov	r0, r5
 80137b0:	f001 f8f6 	bl	80149a0 <_sbrk_r>
 80137b4:	3001      	adds	r0, #1
 80137b6:	d1f2      	bne.n	801379e <sbrk_aligned+0x22>
 80137b8:	e7ef      	b.n	801379a <sbrk_aligned+0x1e>
 80137ba:	bf00      	nop
 80137bc:	20000a48 	.word	0x20000a48

080137c0 <_malloc_r>:
 80137c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137c4:	1ccd      	adds	r5, r1, #3
 80137c6:	f025 0503 	bic.w	r5, r5, #3
 80137ca:	3508      	adds	r5, #8
 80137cc:	2d0c      	cmp	r5, #12
 80137ce:	bf38      	it	cc
 80137d0:	250c      	movcc	r5, #12
 80137d2:	2d00      	cmp	r5, #0
 80137d4:	4606      	mov	r6, r0
 80137d6:	db01      	blt.n	80137dc <_malloc_r+0x1c>
 80137d8:	42a9      	cmp	r1, r5
 80137da:	d904      	bls.n	80137e6 <_malloc_r+0x26>
 80137dc:	230c      	movs	r3, #12
 80137de:	6033      	str	r3, [r6, #0]
 80137e0:	2000      	movs	r0, #0
 80137e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80138bc <_malloc_r+0xfc>
 80137ea:	f000 f869 	bl	80138c0 <__malloc_lock>
 80137ee:	f8d8 3000 	ldr.w	r3, [r8]
 80137f2:	461c      	mov	r4, r3
 80137f4:	bb44      	cbnz	r4, 8013848 <_malloc_r+0x88>
 80137f6:	4629      	mov	r1, r5
 80137f8:	4630      	mov	r0, r6
 80137fa:	f7ff ffbf 	bl	801377c <sbrk_aligned>
 80137fe:	1c43      	adds	r3, r0, #1
 8013800:	4604      	mov	r4, r0
 8013802:	d158      	bne.n	80138b6 <_malloc_r+0xf6>
 8013804:	f8d8 4000 	ldr.w	r4, [r8]
 8013808:	4627      	mov	r7, r4
 801380a:	2f00      	cmp	r7, #0
 801380c:	d143      	bne.n	8013896 <_malloc_r+0xd6>
 801380e:	2c00      	cmp	r4, #0
 8013810:	d04b      	beq.n	80138aa <_malloc_r+0xea>
 8013812:	6823      	ldr	r3, [r4, #0]
 8013814:	4639      	mov	r1, r7
 8013816:	4630      	mov	r0, r6
 8013818:	eb04 0903 	add.w	r9, r4, r3
 801381c:	f001 f8c0 	bl	80149a0 <_sbrk_r>
 8013820:	4581      	cmp	r9, r0
 8013822:	d142      	bne.n	80138aa <_malloc_r+0xea>
 8013824:	6821      	ldr	r1, [r4, #0]
 8013826:	1a6d      	subs	r5, r5, r1
 8013828:	4629      	mov	r1, r5
 801382a:	4630      	mov	r0, r6
 801382c:	f7ff ffa6 	bl	801377c <sbrk_aligned>
 8013830:	3001      	adds	r0, #1
 8013832:	d03a      	beq.n	80138aa <_malloc_r+0xea>
 8013834:	6823      	ldr	r3, [r4, #0]
 8013836:	442b      	add	r3, r5
 8013838:	6023      	str	r3, [r4, #0]
 801383a:	f8d8 3000 	ldr.w	r3, [r8]
 801383e:	685a      	ldr	r2, [r3, #4]
 8013840:	bb62      	cbnz	r2, 801389c <_malloc_r+0xdc>
 8013842:	f8c8 7000 	str.w	r7, [r8]
 8013846:	e00f      	b.n	8013868 <_malloc_r+0xa8>
 8013848:	6822      	ldr	r2, [r4, #0]
 801384a:	1b52      	subs	r2, r2, r5
 801384c:	d420      	bmi.n	8013890 <_malloc_r+0xd0>
 801384e:	2a0b      	cmp	r2, #11
 8013850:	d917      	bls.n	8013882 <_malloc_r+0xc2>
 8013852:	1961      	adds	r1, r4, r5
 8013854:	42a3      	cmp	r3, r4
 8013856:	6025      	str	r5, [r4, #0]
 8013858:	bf18      	it	ne
 801385a:	6059      	strne	r1, [r3, #4]
 801385c:	6863      	ldr	r3, [r4, #4]
 801385e:	bf08      	it	eq
 8013860:	f8c8 1000 	streq.w	r1, [r8]
 8013864:	5162      	str	r2, [r4, r5]
 8013866:	604b      	str	r3, [r1, #4]
 8013868:	4630      	mov	r0, r6
 801386a:	f000 f82f 	bl	80138cc <__malloc_unlock>
 801386e:	f104 000b 	add.w	r0, r4, #11
 8013872:	1d23      	adds	r3, r4, #4
 8013874:	f020 0007 	bic.w	r0, r0, #7
 8013878:	1ac2      	subs	r2, r0, r3
 801387a:	bf1c      	itt	ne
 801387c:	1a1b      	subne	r3, r3, r0
 801387e:	50a3      	strne	r3, [r4, r2]
 8013880:	e7af      	b.n	80137e2 <_malloc_r+0x22>
 8013882:	6862      	ldr	r2, [r4, #4]
 8013884:	42a3      	cmp	r3, r4
 8013886:	bf0c      	ite	eq
 8013888:	f8c8 2000 	streq.w	r2, [r8]
 801388c:	605a      	strne	r2, [r3, #4]
 801388e:	e7eb      	b.n	8013868 <_malloc_r+0xa8>
 8013890:	4623      	mov	r3, r4
 8013892:	6864      	ldr	r4, [r4, #4]
 8013894:	e7ae      	b.n	80137f4 <_malloc_r+0x34>
 8013896:	463c      	mov	r4, r7
 8013898:	687f      	ldr	r7, [r7, #4]
 801389a:	e7b6      	b.n	801380a <_malloc_r+0x4a>
 801389c:	461a      	mov	r2, r3
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	42a3      	cmp	r3, r4
 80138a2:	d1fb      	bne.n	801389c <_malloc_r+0xdc>
 80138a4:	2300      	movs	r3, #0
 80138a6:	6053      	str	r3, [r2, #4]
 80138a8:	e7de      	b.n	8013868 <_malloc_r+0xa8>
 80138aa:	230c      	movs	r3, #12
 80138ac:	6033      	str	r3, [r6, #0]
 80138ae:	4630      	mov	r0, r6
 80138b0:	f000 f80c 	bl	80138cc <__malloc_unlock>
 80138b4:	e794      	b.n	80137e0 <_malloc_r+0x20>
 80138b6:	6005      	str	r5, [r0, #0]
 80138b8:	e7d6      	b.n	8013868 <_malloc_r+0xa8>
 80138ba:	bf00      	nop
 80138bc:	20000a4c 	.word	0x20000a4c

080138c0 <__malloc_lock>:
 80138c0:	4801      	ldr	r0, [pc, #4]	@ (80138c8 <__malloc_lock+0x8>)
 80138c2:	f001 b8ba 	b.w	8014a3a <__retarget_lock_acquire_recursive>
 80138c6:	bf00      	nop
 80138c8:	20000b90 	.word	0x20000b90

080138cc <__malloc_unlock>:
 80138cc:	4801      	ldr	r0, [pc, #4]	@ (80138d4 <__malloc_unlock+0x8>)
 80138ce:	f001 b8b5 	b.w	8014a3c <__retarget_lock_release_recursive>
 80138d2:	bf00      	nop
 80138d4:	20000b90 	.word	0x20000b90

080138d8 <__cvt>:
 80138d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80138dc:	ec57 6b10 	vmov	r6, r7, d0
 80138e0:	2f00      	cmp	r7, #0
 80138e2:	460c      	mov	r4, r1
 80138e4:	4619      	mov	r1, r3
 80138e6:	463b      	mov	r3, r7
 80138e8:	bfbb      	ittet	lt
 80138ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80138ee:	461f      	movlt	r7, r3
 80138f0:	2300      	movge	r3, #0
 80138f2:	232d      	movlt	r3, #45	@ 0x2d
 80138f4:	700b      	strb	r3, [r1, #0]
 80138f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80138fc:	4691      	mov	r9, r2
 80138fe:	f023 0820 	bic.w	r8, r3, #32
 8013902:	bfbc      	itt	lt
 8013904:	4632      	movlt	r2, r6
 8013906:	4616      	movlt	r6, r2
 8013908:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801390c:	d005      	beq.n	801391a <__cvt+0x42>
 801390e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013912:	d100      	bne.n	8013916 <__cvt+0x3e>
 8013914:	3401      	adds	r4, #1
 8013916:	2102      	movs	r1, #2
 8013918:	e000      	b.n	801391c <__cvt+0x44>
 801391a:	2103      	movs	r1, #3
 801391c:	ab03      	add	r3, sp, #12
 801391e:	9301      	str	r3, [sp, #4]
 8013920:	ab02      	add	r3, sp, #8
 8013922:	9300      	str	r3, [sp, #0]
 8013924:	ec47 6b10 	vmov	d0, r6, r7
 8013928:	4653      	mov	r3, sl
 801392a:	4622      	mov	r2, r4
 801392c:	f001 f924 	bl	8014b78 <_dtoa_r>
 8013930:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013934:	4605      	mov	r5, r0
 8013936:	d119      	bne.n	801396c <__cvt+0x94>
 8013938:	f019 0f01 	tst.w	r9, #1
 801393c:	d00e      	beq.n	801395c <__cvt+0x84>
 801393e:	eb00 0904 	add.w	r9, r0, r4
 8013942:	2200      	movs	r2, #0
 8013944:	2300      	movs	r3, #0
 8013946:	4630      	mov	r0, r6
 8013948:	4639      	mov	r1, r7
 801394a:	f7ed f8e5 	bl	8000b18 <__aeabi_dcmpeq>
 801394e:	b108      	cbz	r0, 8013954 <__cvt+0x7c>
 8013950:	f8cd 900c 	str.w	r9, [sp, #12]
 8013954:	2230      	movs	r2, #48	@ 0x30
 8013956:	9b03      	ldr	r3, [sp, #12]
 8013958:	454b      	cmp	r3, r9
 801395a:	d31e      	bcc.n	801399a <__cvt+0xc2>
 801395c:	9b03      	ldr	r3, [sp, #12]
 801395e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013960:	1b5b      	subs	r3, r3, r5
 8013962:	4628      	mov	r0, r5
 8013964:	6013      	str	r3, [r2, #0]
 8013966:	b004      	add	sp, #16
 8013968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801396c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013970:	eb00 0904 	add.w	r9, r0, r4
 8013974:	d1e5      	bne.n	8013942 <__cvt+0x6a>
 8013976:	7803      	ldrb	r3, [r0, #0]
 8013978:	2b30      	cmp	r3, #48	@ 0x30
 801397a:	d10a      	bne.n	8013992 <__cvt+0xba>
 801397c:	2200      	movs	r2, #0
 801397e:	2300      	movs	r3, #0
 8013980:	4630      	mov	r0, r6
 8013982:	4639      	mov	r1, r7
 8013984:	f7ed f8c8 	bl	8000b18 <__aeabi_dcmpeq>
 8013988:	b918      	cbnz	r0, 8013992 <__cvt+0xba>
 801398a:	f1c4 0401 	rsb	r4, r4, #1
 801398e:	f8ca 4000 	str.w	r4, [sl]
 8013992:	f8da 3000 	ldr.w	r3, [sl]
 8013996:	4499      	add	r9, r3
 8013998:	e7d3      	b.n	8013942 <__cvt+0x6a>
 801399a:	1c59      	adds	r1, r3, #1
 801399c:	9103      	str	r1, [sp, #12]
 801399e:	701a      	strb	r2, [r3, #0]
 80139a0:	e7d9      	b.n	8013956 <__cvt+0x7e>

080139a2 <__exponent>:
 80139a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139a4:	2900      	cmp	r1, #0
 80139a6:	bfba      	itte	lt
 80139a8:	4249      	neglt	r1, r1
 80139aa:	232d      	movlt	r3, #45	@ 0x2d
 80139ac:	232b      	movge	r3, #43	@ 0x2b
 80139ae:	2909      	cmp	r1, #9
 80139b0:	7002      	strb	r2, [r0, #0]
 80139b2:	7043      	strb	r3, [r0, #1]
 80139b4:	dd29      	ble.n	8013a0a <__exponent+0x68>
 80139b6:	f10d 0307 	add.w	r3, sp, #7
 80139ba:	461d      	mov	r5, r3
 80139bc:	270a      	movs	r7, #10
 80139be:	461a      	mov	r2, r3
 80139c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80139c4:	fb07 1416 	mls	r4, r7, r6, r1
 80139c8:	3430      	adds	r4, #48	@ 0x30
 80139ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80139ce:	460c      	mov	r4, r1
 80139d0:	2c63      	cmp	r4, #99	@ 0x63
 80139d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80139d6:	4631      	mov	r1, r6
 80139d8:	dcf1      	bgt.n	80139be <__exponent+0x1c>
 80139da:	3130      	adds	r1, #48	@ 0x30
 80139dc:	1e94      	subs	r4, r2, #2
 80139de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80139e2:	1c41      	adds	r1, r0, #1
 80139e4:	4623      	mov	r3, r4
 80139e6:	42ab      	cmp	r3, r5
 80139e8:	d30a      	bcc.n	8013a00 <__exponent+0x5e>
 80139ea:	f10d 0309 	add.w	r3, sp, #9
 80139ee:	1a9b      	subs	r3, r3, r2
 80139f0:	42ac      	cmp	r4, r5
 80139f2:	bf88      	it	hi
 80139f4:	2300      	movhi	r3, #0
 80139f6:	3302      	adds	r3, #2
 80139f8:	4403      	add	r3, r0
 80139fa:	1a18      	subs	r0, r3, r0
 80139fc:	b003      	add	sp, #12
 80139fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a00:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013a04:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013a08:	e7ed      	b.n	80139e6 <__exponent+0x44>
 8013a0a:	2330      	movs	r3, #48	@ 0x30
 8013a0c:	3130      	adds	r1, #48	@ 0x30
 8013a0e:	7083      	strb	r3, [r0, #2]
 8013a10:	70c1      	strb	r1, [r0, #3]
 8013a12:	1d03      	adds	r3, r0, #4
 8013a14:	e7f1      	b.n	80139fa <__exponent+0x58>
	...

08013a18 <_printf_float>:
 8013a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a1c:	b08d      	sub	sp, #52	@ 0x34
 8013a1e:	460c      	mov	r4, r1
 8013a20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013a24:	4616      	mov	r6, r2
 8013a26:	461f      	mov	r7, r3
 8013a28:	4605      	mov	r5, r0
 8013a2a:	f000 ff6d 	bl	8014908 <_localeconv_r>
 8013a2e:	6803      	ldr	r3, [r0, #0]
 8013a30:	9304      	str	r3, [sp, #16]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7ec fc44 	bl	80002c0 <strlen>
 8013a38:	2300      	movs	r3, #0
 8013a3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8013a40:	9005      	str	r0, [sp, #20]
 8013a42:	3307      	adds	r3, #7
 8013a44:	f023 0307 	bic.w	r3, r3, #7
 8013a48:	f103 0208 	add.w	r2, r3, #8
 8013a4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013a50:	f8d4 b000 	ldr.w	fp, [r4]
 8013a54:	f8c8 2000 	str.w	r2, [r8]
 8013a58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013a5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013a60:	9307      	str	r3, [sp, #28]
 8013a62:	f8cd 8018 	str.w	r8, [sp, #24]
 8013a66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013a6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8013ce0 <_printf_float+0x2c8>)
 8013a70:	f04f 32ff 	mov.w	r2, #4294967295
 8013a74:	f7ed f882 	bl	8000b7c <__aeabi_dcmpun>
 8013a78:	bb70      	cbnz	r0, 8013ad8 <_printf_float+0xc0>
 8013a7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a7e:	4b98      	ldr	r3, [pc, #608]	@ (8013ce0 <_printf_float+0x2c8>)
 8013a80:	f04f 32ff 	mov.w	r2, #4294967295
 8013a84:	f7ed f85c 	bl	8000b40 <__aeabi_dcmple>
 8013a88:	bb30      	cbnz	r0, 8013ad8 <_printf_float+0xc0>
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	4640      	mov	r0, r8
 8013a90:	4649      	mov	r1, r9
 8013a92:	f7ed f84b 	bl	8000b2c <__aeabi_dcmplt>
 8013a96:	b110      	cbz	r0, 8013a9e <_printf_float+0x86>
 8013a98:	232d      	movs	r3, #45	@ 0x2d
 8013a9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a9e:	4a91      	ldr	r2, [pc, #580]	@ (8013ce4 <_printf_float+0x2cc>)
 8013aa0:	4b91      	ldr	r3, [pc, #580]	@ (8013ce8 <_printf_float+0x2d0>)
 8013aa2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013aa6:	bf94      	ite	ls
 8013aa8:	4690      	movls	r8, r2
 8013aaa:	4698      	movhi	r8, r3
 8013aac:	2303      	movs	r3, #3
 8013aae:	6123      	str	r3, [r4, #16]
 8013ab0:	f02b 0304 	bic.w	r3, fp, #4
 8013ab4:	6023      	str	r3, [r4, #0]
 8013ab6:	f04f 0900 	mov.w	r9, #0
 8013aba:	9700      	str	r7, [sp, #0]
 8013abc:	4633      	mov	r3, r6
 8013abe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013ac0:	4621      	mov	r1, r4
 8013ac2:	4628      	mov	r0, r5
 8013ac4:	f000 f9d2 	bl	8013e6c <_printf_common>
 8013ac8:	3001      	adds	r0, #1
 8013aca:	f040 808d 	bne.w	8013be8 <_printf_float+0x1d0>
 8013ace:	f04f 30ff 	mov.w	r0, #4294967295
 8013ad2:	b00d      	add	sp, #52	@ 0x34
 8013ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ad8:	4642      	mov	r2, r8
 8013ada:	464b      	mov	r3, r9
 8013adc:	4640      	mov	r0, r8
 8013ade:	4649      	mov	r1, r9
 8013ae0:	f7ed f84c 	bl	8000b7c <__aeabi_dcmpun>
 8013ae4:	b140      	cbz	r0, 8013af8 <_printf_float+0xe0>
 8013ae6:	464b      	mov	r3, r9
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	bfbc      	itt	lt
 8013aec:	232d      	movlt	r3, #45	@ 0x2d
 8013aee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013af2:	4a7e      	ldr	r2, [pc, #504]	@ (8013cec <_printf_float+0x2d4>)
 8013af4:	4b7e      	ldr	r3, [pc, #504]	@ (8013cf0 <_printf_float+0x2d8>)
 8013af6:	e7d4      	b.n	8013aa2 <_printf_float+0x8a>
 8013af8:	6863      	ldr	r3, [r4, #4]
 8013afa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013afe:	9206      	str	r2, [sp, #24]
 8013b00:	1c5a      	adds	r2, r3, #1
 8013b02:	d13b      	bne.n	8013b7c <_printf_float+0x164>
 8013b04:	2306      	movs	r3, #6
 8013b06:	6063      	str	r3, [r4, #4]
 8013b08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	6022      	str	r2, [r4, #0]
 8013b10:	9303      	str	r3, [sp, #12]
 8013b12:	ab0a      	add	r3, sp, #40	@ 0x28
 8013b14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013b18:	ab09      	add	r3, sp, #36	@ 0x24
 8013b1a:	9300      	str	r3, [sp, #0]
 8013b1c:	6861      	ldr	r1, [r4, #4]
 8013b1e:	ec49 8b10 	vmov	d0, r8, r9
 8013b22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013b26:	4628      	mov	r0, r5
 8013b28:	f7ff fed6 	bl	80138d8 <__cvt>
 8013b2c:	9b06      	ldr	r3, [sp, #24]
 8013b2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013b30:	2b47      	cmp	r3, #71	@ 0x47
 8013b32:	4680      	mov	r8, r0
 8013b34:	d129      	bne.n	8013b8a <_printf_float+0x172>
 8013b36:	1cc8      	adds	r0, r1, #3
 8013b38:	db02      	blt.n	8013b40 <_printf_float+0x128>
 8013b3a:	6863      	ldr	r3, [r4, #4]
 8013b3c:	4299      	cmp	r1, r3
 8013b3e:	dd41      	ble.n	8013bc4 <_printf_float+0x1ac>
 8013b40:	f1aa 0a02 	sub.w	sl, sl, #2
 8013b44:	fa5f fa8a 	uxtb.w	sl, sl
 8013b48:	3901      	subs	r1, #1
 8013b4a:	4652      	mov	r2, sl
 8013b4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013b50:	9109      	str	r1, [sp, #36]	@ 0x24
 8013b52:	f7ff ff26 	bl	80139a2 <__exponent>
 8013b56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b58:	1813      	adds	r3, r2, r0
 8013b5a:	2a01      	cmp	r2, #1
 8013b5c:	4681      	mov	r9, r0
 8013b5e:	6123      	str	r3, [r4, #16]
 8013b60:	dc02      	bgt.n	8013b68 <_printf_float+0x150>
 8013b62:	6822      	ldr	r2, [r4, #0]
 8013b64:	07d2      	lsls	r2, r2, #31
 8013b66:	d501      	bpl.n	8013b6c <_printf_float+0x154>
 8013b68:	3301      	adds	r3, #1
 8013b6a:	6123      	str	r3, [r4, #16]
 8013b6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d0a2      	beq.n	8013aba <_printf_float+0xa2>
 8013b74:	232d      	movs	r3, #45	@ 0x2d
 8013b76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b7a:	e79e      	b.n	8013aba <_printf_float+0xa2>
 8013b7c:	9a06      	ldr	r2, [sp, #24]
 8013b7e:	2a47      	cmp	r2, #71	@ 0x47
 8013b80:	d1c2      	bne.n	8013b08 <_printf_float+0xf0>
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d1c0      	bne.n	8013b08 <_printf_float+0xf0>
 8013b86:	2301      	movs	r3, #1
 8013b88:	e7bd      	b.n	8013b06 <_printf_float+0xee>
 8013b8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013b8e:	d9db      	bls.n	8013b48 <_printf_float+0x130>
 8013b90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013b94:	d118      	bne.n	8013bc8 <_printf_float+0x1b0>
 8013b96:	2900      	cmp	r1, #0
 8013b98:	6863      	ldr	r3, [r4, #4]
 8013b9a:	dd0b      	ble.n	8013bb4 <_printf_float+0x19c>
 8013b9c:	6121      	str	r1, [r4, #16]
 8013b9e:	b913      	cbnz	r3, 8013ba6 <_printf_float+0x18e>
 8013ba0:	6822      	ldr	r2, [r4, #0]
 8013ba2:	07d0      	lsls	r0, r2, #31
 8013ba4:	d502      	bpl.n	8013bac <_printf_float+0x194>
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	440b      	add	r3, r1
 8013baa:	6123      	str	r3, [r4, #16]
 8013bac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013bae:	f04f 0900 	mov.w	r9, #0
 8013bb2:	e7db      	b.n	8013b6c <_printf_float+0x154>
 8013bb4:	b913      	cbnz	r3, 8013bbc <_printf_float+0x1a4>
 8013bb6:	6822      	ldr	r2, [r4, #0]
 8013bb8:	07d2      	lsls	r2, r2, #31
 8013bba:	d501      	bpl.n	8013bc0 <_printf_float+0x1a8>
 8013bbc:	3302      	adds	r3, #2
 8013bbe:	e7f4      	b.n	8013baa <_printf_float+0x192>
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	e7f2      	b.n	8013baa <_printf_float+0x192>
 8013bc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013bca:	4299      	cmp	r1, r3
 8013bcc:	db05      	blt.n	8013bda <_printf_float+0x1c2>
 8013bce:	6823      	ldr	r3, [r4, #0]
 8013bd0:	6121      	str	r1, [r4, #16]
 8013bd2:	07d8      	lsls	r0, r3, #31
 8013bd4:	d5ea      	bpl.n	8013bac <_printf_float+0x194>
 8013bd6:	1c4b      	adds	r3, r1, #1
 8013bd8:	e7e7      	b.n	8013baa <_printf_float+0x192>
 8013bda:	2900      	cmp	r1, #0
 8013bdc:	bfd4      	ite	le
 8013bde:	f1c1 0202 	rsble	r2, r1, #2
 8013be2:	2201      	movgt	r2, #1
 8013be4:	4413      	add	r3, r2
 8013be6:	e7e0      	b.n	8013baa <_printf_float+0x192>
 8013be8:	6823      	ldr	r3, [r4, #0]
 8013bea:	055a      	lsls	r2, r3, #21
 8013bec:	d407      	bmi.n	8013bfe <_printf_float+0x1e6>
 8013bee:	6923      	ldr	r3, [r4, #16]
 8013bf0:	4642      	mov	r2, r8
 8013bf2:	4631      	mov	r1, r6
 8013bf4:	4628      	mov	r0, r5
 8013bf6:	47b8      	blx	r7
 8013bf8:	3001      	adds	r0, #1
 8013bfa:	d12b      	bne.n	8013c54 <_printf_float+0x23c>
 8013bfc:	e767      	b.n	8013ace <_printf_float+0xb6>
 8013bfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013c02:	f240 80dd 	bls.w	8013dc0 <_printf_float+0x3a8>
 8013c06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	f7ec ff83 	bl	8000b18 <__aeabi_dcmpeq>
 8013c12:	2800      	cmp	r0, #0
 8013c14:	d033      	beq.n	8013c7e <_printf_float+0x266>
 8013c16:	4a37      	ldr	r2, [pc, #220]	@ (8013cf4 <_printf_float+0x2dc>)
 8013c18:	2301      	movs	r3, #1
 8013c1a:	4631      	mov	r1, r6
 8013c1c:	4628      	mov	r0, r5
 8013c1e:	47b8      	blx	r7
 8013c20:	3001      	adds	r0, #1
 8013c22:	f43f af54 	beq.w	8013ace <_printf_float+0xb6>
 8013c26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013c2a:	4543      	cmp	r3, r8
 8013c2c:	db02      	blt.n	8013c34 <_printf_float+0x21c>
 8013c2e:	6823      	ldr	r3, [r4, #0]
 8013c30:	07d8      	lsls	r0, r3, #31
 8013c32:	d50f      	bpl.n	8013c54 <_printf_float+0x23c>
 8013c34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c38:	4631      	mov	r1, r6
 8013c3a:	4628      	mov	r0, r5
 8013c3c:	47b8      	blx	r7
 8013c3e:	3001      	adds	r0, #1
 8013c40:	f43f af45 	beq.w	8013ace <_printf_float+0xb6>
 8013c44:	f04f 0900 	mov.w	r9, #0
 8013c48:	f108 38ff 	add.w	r8, r8, #4294967295
 8013c4c:	f104 0a1a 	add.w	sl, r4, #26
 8013c50:	45c8      	cmp	r8, r9
 8013c52:	dc09      	bgt.n	8013c68 <_printf_float+0x250>
 8013c54:	6823      	ldr	r3, [r4, #0]
 8013c56:	079b      	lsls	r3, r3, #30
 8013c58:	f100 8103 	bmi.w	8013e62 <_printf_float+0x44a>
 8013c5c:	68e0      	ldr	r0, [r4, #12]
 8013c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c60:	4298      	cmp	r0, r3
 8013c62:	bfb8      	it	lt
 8013c64:	4618      	movlt	r0, r3
 8013c66:	e734      	b.n	8013ad2 <_printf_float+0xba>
 8013c68:	2301      	movs	r3, #1
 8013c6a:	4652      	mov	r2, sl
 8013c6c:	4631      	mov	r1, r6
 8013c6e:	4628      	mov	r0, r5
 8013c70:	47b8      	blx	r7
 8013c72:	3001      	adds	r0, #1
 8013c74:	f43f af2b 	beq.w	8013ace <_printf_float+0xb6>
 8013c78:	f109 0901 	add.w	r9, r9, #1
 8013c7c:	e7e8      	b.n	8013c50 <_printf_float+0x238>
 8013c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	dc39      	bgt.n	8013cf8 <_printf_float+0x2e0>
 8013c84:	4a1b      	ldr	r2, [pc, #108]	@ (8013cf4 <_printf_float+0x2dc>)
 8013c86:	2301      	movs	r3, #1
 8013c88:	4631      	mov	r1, r6
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	47b8      	blx	r7
 8013c8e:	3001      	adds	r0, #1
 8013c90:	f43f af1d 	beq.w	8013ace <_printf_float+0xb6>
 8013c94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013c98:	ea59 0303 	orrs.w	r3, r9, r3
 8013c9c:	d102      	bne.n	8013ca4 <_printf_float+0x28c>
 8013c9e:	6823      	ldr	r3, [r4, #0]
 8013ca0:	07d9      	lsls	r1, r3, #31
 8013ca2:	d5d7      	bpl.n	8013c54 <_printf_float+0x23c>
 8013ca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ca8:	4631      	mov	r1, r6
 8013caa:	4628      	mov	r0, r5
 8013cac:	47b8      	blx	r7
 8013cae:	3001      	adds	r0, #1
 8013cb0:	f43f af0d 	beq.w	8013ace <_printf_float+0xb6>
 8013cb4:	f04f 0a00 	mov.w	sl, #0
 8013cb8:	f104 0b1a 	add.w	fp, r4, #26
 8013cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cbe:	425b      	negs	r3, r3
 8013cc0:	4553      	cmp	r3, sl
 8013cc2:	dc01      	bgt.n	8013cc8 <_printf_float+0x2b0>
 8013cc4:	464b      	mov	r3, r9
 8013cc6:	e793      	b.n	8013bf0 <_printf_float+0x1d8>
 8013cc8:	2301      	movs	r3, #1
 8013cca:	465a      	mov	r2, fp
 8013ccc:	4631      	mov	r1, r6
 8013cce:	4628      	mov	r0, r5
 8013cd0:	47b8      	blx	r7
 8013cd2:	3001      	adds	r0, #1
 8013cd4:	f43f aefb 	beq.w	8013ace <_printf_float+0xb6>
 8013cd8:	f10a 0a01 	add.w	sl, sl, #1
 8013cdc:	e7ee      	b.n	8013cbc <_printf_float+0x2a4>
 8013cde:	bf00      	nop
 8013ce0:	7fefffff 	.word	0x7fefffff
 8013ce4:	0801901c 	.word	0x0801901c
 8013ce8:	08019020 	.word	0x08019020
 8013cec:	08019024 	.word	0x08019024
 8013cf0:	08019028 	.word	0x08019028
 8013cf4:	0801902c 	.word	0x0801902c
 8013cf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013cfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013cfe:	4553      	cmp	r3, sl
 8013d00:	bfa8      	it	ge
 8013d02:	4653      	movge	r3, sl
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	4699      	mov	r9, r3
 8013d08:	dc36      	bgt.n	8013d78 <_printf_float+0x360>
 8013d0a:	f04f 0b00 	mov.w	fp, #0
 8013d0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d12:	f104 021a 	add.w	r2, r4, #26
 8013d16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013d18:	9306      	str	r3, [sp, #24]
 8013d1a:	eba3 0309 	sub.w	r3, r3, r9
 8013d1e:	455b      	cmp	r3, fp
 8013d20:	dc31      	bgt.n	8013d86 <_printf_float+0x36e>
 8013d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d24:	459a      	cmp	sl, r3
 8013d26:	dc3a      	bgt.n	8013d9e <_printf_float+0x386>
 8013d28:	6823      	ldr	r3, [r4, #0]
 8013d2a:	07da      	lsls	r2, r3, #31
 8013d2c:	d437      	bmi.n	8013d9e <_printf_float+0x386>
 8013d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d30:	ebaa 0903 	sub.w	r9, sl, r3
 8013d34:	9b06      	ldr	r3, [sp, #24]
 8013d36:	ebaa 0303 	sub.w	r3, sl, r3
 8013d3a:	4599      	cmp	r9, r3
 8013d3c:	bfa8      	it	ge
 8013d3e:	4699      	movge	r9, r3
 8013d40:	f1b9 0f00 	cmp.w	r9, #0
 8013d44:	dc33      	bgt.n	8013dae <_printf_float+0x396>
 8013d46:	f04f 0800 	mov.w	r8, #0
 8013d4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d4e:	f104 0b1a 	add.w	fp, r4, #26
 8013d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d54:	ebaa 0303 	sub.w	r3, sl, r3
 8013d58:	eba3 0309 	sub.w	r3, r3, r9
 8013d5c:	4543      	cmp	r3, r8
 8013d5e:	f77f af79 	ble.w	8013c54 <_printf_float+0x23c>
 8013d62:	2301      	movs	r3, #1
 8013d64:	465a      	mov	r2, fp
 8013d66:	4631      	mov	r1, r6
 8013d68:	4628      	mov	r0, r5
 8013d6a:	47b8      	blx	r7
 8013d6c:	3001      	adds	r0, #1
 8013d6e:	f43f aeae 	beq.w	8013ace <_printf_float+0xb6>
 8013d72:	f108 0801 	add.w	r8, r8, #1
 8013d76:	e7ec      	b.n	8013d52 <_printf_float+0x33a>
 8013d78:	4642      	mov	r2, r8
 8013d7a:	4631      	mov	r1, r6
 8013d7c:	4628      	mov	r0, r5
 8013d7e:	47b8      	blx	r7
 8013d80:	3001      	adds	r0, #1
 8013d82:	d1c2      	bne.n	8013d0a <_printf_float+0x2f2>
 8013d84:	e6a3      	b.n	8013ace <_printf_float+0xb6>
 8013d86:	2301      	movs	r3, #1
 8013d88:	4631      	mov	r1, r6
 8013d8a:	4628      	mov	r0, r5
 8013d8c:	9206      	str	r2, [sp, #24]
 8013d8e:	47b8      	blx	r7
 8013d90:	3001      	adds	r0, #1
 8013d92:	f43f ae9c 	beq.w	8013ace <_printf_float+0xb6>
 8013d96:	9a06      	ldr	r2, [sp, #24]
 8013d98:	f10b 0b01 	add.w	fp, fp, #1
 8013d9c:	e7bb      	b.n	8013d16 <_printf_float+0x2fe>
 8013d9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013da2:	4631      	mov	r1, r6
 8013da4:	4628      	mov	r0, r5
 8013da6:	47b8      	blx	r7
 8013da8:	3001      	adds	r0, #1
 8013daa:	d1c0      	bne.n	8013d2e <_printf_float+0x316>
 8013dac:	e68f      	b.n	8013ace <_printf_float+0xb6>
 8013dae:	9a06      	ldr	r2, [sp, #24]
 8013db0:	464b      	mov	r3, r9
 8013db2:	4442      	add	r2, r8
 8013db4:	4631      	mov	r1, r6
 8013db6:	4628      	mov	r0, r5
 8013db8:	47b8      	blx	r7
 8013dba:	3001      	adds	r0, #1
 8013dbc:	d1c3      	bne.n	8013d46 <_printf_float+0x32e>
 8013dbe:	e686      	b.n	8013ace <_printf_float+0xb6>
 8013dc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013dc4:	f1ba 0f01 	cmp.w	sl, #1
 8013dc8:	dc01      	bgt.n	8013dce <_printf_float+0x3b6>
 8013dca:	07db      	lsls	r3, r3, #31
 8013dcc:	d536      	bpl.n	8013e3c <_printf_float+0x424>
 8013dce:	2301      	movs	r3, #1
 8013dd0:	4642      	mov	r2, r8
 8013dd2:	4631      	mov	r1, r6
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	47b8      	blx	r7
 8013dd8:	3001      	adds	r0, #1
 8013dda:	f43f ae78 	beq.w	8013ace <_printf_float+0xb6>
 8013dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013de2:	4631      	mov	r1, r6
 8013de4:	4628      	mov	r0, r5
 8013de6:	47b8      	blx	r7
 8013de8:	3001      	adds	r0, #1
 8013dea:	f43f ae70 	beq.w	8013ace <_printf_float+0xb6>
 8013dee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013df2:	2200      	movs	r2, #0
 8013df4:	2300      	movs	r3, #0
 8013df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013dfa:	f7ec fe8d 	bl	8000b18 <__aeabi_dcmpeq>
 8013dfe:	b9c0      	cbnz	r0, 8013e32 <_printf_float+0x41a>
 8013e00:	4653      	mov	r3, sl
 8013e02:	f108 0201 	add.w	r2, r8, #1
 8013e06:	4631      	mov	r1, r6
 8013e08:	4628      	mov	r0, r5
 8013e0a:	47b8      	blx	r7
 8013e0c:	3001      	adds	r0, #1
 8013e0e:	d10c      	bne.n	8013e2a <_printf_float+0x412>
 8013e10:	e65d      	b.n	8013ace <_printf_float+0xb6>
 8013e12:	2301      	movs	r3, #1
 8013e14:	465a      	mov	r2, fp
 8013e16:	4631      	mov	r1, r6
 8013e18:	4628      	mov	r0, r5
 8013e1a:	47b8      	blx	r7
 8013e1c:	3001      	adds	r0, #1
 8013e1e:	f43f ae56 	beq.w	8013ace <_printf_float+0xb6>
 8013e22:	f108 0801 	add.w	r8, r8, #1
 8013e26:	45d0      	cmp	r8, sl
 8013e28:	dbf3      	blt.n	8013e12 <_printf_float+0x3fa>
 8013e2a:	464b      	mov	r3, r9
 8013e2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013e30:	e6df      	b.n	8013bf2 <_printf_float+0x1da>
 8013e32:	f04f 0800 	mov.w	r8, #0
 8013e36:	f104 0b1a 	add.w	fp, r4, #26
 8013e3a:	e7f4      	b.n	8013e26 <_printf_float+0x40e>
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	4642      	mov	r2, r8
 8013e40:	e7e1      	b.n	8013e06 <_printf_float+0x3ee>
 8013e42:	2301      	movs	r3, #1
 8013e44:	464a      	mov	r2, r9
 8013e46:	4631      	mov	r1, r6
 8013e48:	4628      	mov	r0, r5
 8013e4a:	47b8      	blx	r7
 8013e4c:	3001      	adds	r0, #1
 8013e4e:	f43f ae3e 	beq.w	8013ace <_printf_float+0xb6>
 8013e52:	f108 0801 	add.w	r8, r8, #1
 8013e56:	68e3      	ldr	r3, [r4, #12]
 8013e58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013e5a:	1a5b      	subs	r3, r3, r1
 8013e5c:	4543      	cmp	r3, r8
 8013e5e:	dcf0      	bgt.n	8013e42 <_printf_float+0x42a>
 8013e60:	e6fc      	b.n	8013c5c <_printf_float+0x244>
 8013e62:	f04f 0800 	mov.w	r8, #0
 8013e66:	f104 0919 	add.w	r9, r4, #25
 8013e6a:	e7f4      	b.n	8013e56 <_printf_float+0x43e>

08013e6c <_printf_common>:
 8013e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e70:	4616      	mov	r6, r2
 8013e72:	4698      	mov	r8, r3
 8013e74:	688a      	ldr	r2, [r1, #8]
 8013e76:	690b      	ldr	r3, [r1, #16]
 8013e78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013e7c:	4293      	cmp	r3, r2
 8013e7e:	bfb8      	it	lt
 8013e80:	4613      	movlt	r3, r2
 8013e82:	6033      	str	r3, [r6, #0]
 8013e84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013e88:	4607      	mov	r7, r0
 8013e8a:	460c      	mov	r4, r1
 8013e8c:	b10a      	cbz	r2, 8013e92 <_printf_common+0x26>
 8013e8e:	3301      	adds	r3, #1
 8013e90:	6033      	str	r3, [r6, #0]
 8013e92:	6823      	ldr	r3, [r4, #0]
 8013e94:	0699      	lsls	r1, r3, #26
 8013e96:	bf42      	ittt	mi
 8013e98:	6833      	ldrmi	r3, [r6, #0]
 8013e9a:	3302      	addmi	r3, #2
 8013e9c:	6033      	strmi	r3, [r6, #0]
 8013e9e:	6825      	ldr	r5, [r4, #0]
 8013ea0:	f015 0506 	ands.w	r5, r5, #6
 8013ea4:	d106      	bne.n	8013eb4 <_printf_common+0x48>
 8013ea6:	f104 0a19 	add.w	sl, r4, #25
 8013eaa:	68e3      	ldr	r3, [r4, #12]
 8013eac:	6832      	ldr	r2, [r6, #0]
 8013eae:	1a9b      	subs	r3, r3, r2
 8013eb0:	42ab      	cmp	r3, r5
 8013eb2:	dc26      	bgt.n	8013f02 <_printf_common+0x96>
 8013eb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013eb8:	6822      	ldr	r2, [r4, #0]
 8013eba:	3b00      	subs	r3, #0
 8013ebc:	bf18      	it	ne
 8013ebe:	2301      	movne	r3, #1
 8013ec0:	0692      	lsls	r2, r2, #26
 8013ec2:	d42b      	bmi.n	8013f1c <_printf_common+0xb0>
 8013ec4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013ec8:	4641      	mov	r1, r8
 8013eca:	4638      	mov	r0, r7
 8013ecc:	47c8      	blx	r9
 8013ece:	3001      	adds	r0, #1
 8013ed0:	d01e      	beq.n	8013f10 <_printf_common+0xa4>
 8013ed2:	6823      	ldr	r3, [r4, #0]
 8013ed4:	6922      	ldr	r2, [r4, #16]
 8013ed6:	f003 0306 	and.w	r3, r3, #6
 8013eda:	2b04      	cmp	r3, #4
 8013edc:	bf02      	ittt	eq
 8013ede:	68e5      	ldreq	r5, [r4, #12]
 8013ee0:	6833      	ldreq	r3, [r6, #0]
 8013ee2:	1aed      	subeq	r5, r5, r3
 8013ee4:	68a3      	ldr	r3, [r4, #8]
 8013ee6:	bf0c      	ite	eq
 8013ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013eec:	2500      	movne	r5, #0
 8013eee:	4293      	cmp	r3, r2
 8013ef0:	bfc4      	itt	gt
 8013ef2:	1a9b      	subgt	r3, r3, r2
 8013ef4:	18ed      	addgt	r5, r5, r3
 8013ef6:	2600      	movs	r6, #0
 8013ef8:	341a      	adds	r4, #26
 8013efa:	42b5      	cmp	r5, r6
 8013efc:	d11a      	bne.n	8013f34 <_printf_common+0xc8>
 8013efe:	2000      	movs	r0, #0
 8013f00:	e008      	b.n	8013f14 <_printf_common+0xa8>
 8013f02:	2301      	movs	r3, #1
 8013f04:	4652      	mov	r2, sl
 8013f06:	4641      	mov	r1, r8
 8013f08:	4638      	mov	r0, r7
 8013f0a:	47c8      	blx	r9
 8013f0c:	3001      	adds	r0, #1
 8013f0e:	d103      	bne.n	8013f18 <_printf_common+0xac>
 8013f10:	f04f 30ff 	mov.w	r0, #4294967295
 8013f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f18:	3501      	adds	r5, #1
 8013f1a:	e7c6      	b.n	8013eaa <_printf_common+0x3e>
 8013f1c:	18e1      	adds	r1, r4, r3
 8013f1e:	1c5a      	adds	r2, r3, #1
 8013f20:	2030      	movs	r0, #48	@ 0x30
 8013f22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013f26:	4422      	add	r2, r4
 8013f28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013f2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013f30:	3302      	adds	r3, #2
 8013f32:	e7c7      	b.n	8013ec4 <_printf_common+0x58>
 8013f34:	2301      	movs	r3, #1
 8013f36:	4622      	mov	r2, r4
 8013f38:	4641      	mov	r1, r8
 8013f3a:	4638      	mov	r0, r7
 8013f3c:	47c8      	blx	r9
 8013f3e:	3001      	adds	r0, #1
 8013f40:	d0e6      	beq.n	8013f10 <_printf_common+0xa4>
 8013f42:	3601      	adds	r6, #1
 8013f44:	e7d9      	b.n	8013efa <_printf_common+0x8e>
	...

08013f48 <_printf_i>:
 8013f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f4c:	7e0f      	ldrb	r7, [r1, #24]
 8013f4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013f50:	2f78      	cmp	r7, #120	@ 0x78
 8013f52:	4691      	mov	r9, r2
 8013f54:	4680      	mov	r8, r0
 8013f56:	460c      	mov	r4, r1
 8013f58:	469a      	mov	sl, r3
 8013f5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013f5e:	d807      	bhi.n	8013f70 <_printf_i+0x28>
 8013f60:	2f62      	cmp	r7, #98	@ 0x62
 8013f62:	d80a      	bhi.n	8013f7a <_printf_i+0x32>
 8013f64:	2f00      	cmp	r7, #0
 8013f66:	f000 80d2 	beq.w	801410e <_printf_i+0x1c6>
 8013f6a:	2f58      	cmp	r7, #88	@ 0x58
 8013f6c:	f000 80b9 	beq.w	80140e2 <_printf_i+0x19a>
 8013f70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013f74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013f78:	e03a      	b.n	8013ff0 <_printf_i+0xa8>
 8013f7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013f7e:	2b15      	cmp	r3, #21
 8013f80:	d8f6      	bhi.n	8013f70 <_printf_i+0x28>
 8013f82:	a101      	add	r1, pc, #4	@ (adr r1, 8013f88 <_printf_i+0x40>)
 8013f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f88:	08013fe1 	.word	0x08013fe1
 8013f8c:	08013ff5 	.word	0x08013ff5
 8013f90:	08013f71 	.word	0x08013f71
 8013f94:	08013f71 	.word	0x08013f71
 8013f98:	08013f71 	.word	0x08013f71
 8013f9c:	08013f71 	.word	0x08013f71
 8013fa0:	08013ff5 	.word	0x08013ff5
 8013fa4:	08013f71 	.word	0x08013f71
 8013fa8:	08013f71 	.word	0x08013f71
 8013fac:	08013f71 	.word	0x08013f71
 8013fb0:	08013f71 	.word	0x08013f71
 8013fb4:	080140f5 	.word	0x080140f5
 8013fb8:	0801401f 	.word	0x0801401f
 8013fbc:	080140af 	.word	0x080140af
 8013fc0:	08013f71 	.word	0x08013f71
 8013fc4:	08013f71 	.word	0x08013f71
 8013fc8:	08014117 	.word	0x08014117
 8013fcc:	08013f71 	.word	0x08013f71
 8013fd0:	0801401f 	.word	0x0801401f
 8013fd4:	08013f71 	.word	0x08013f71
 8013fd8:	08013f71 	.word	0x08013f71
 8013fdc:	080140b7 	.word	0x080140b7
 8013fe0:	6833      	ldr	r3, [r6, #0]
 8013fe2:	1d1a      	adds	r2, r3, #4
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	6032      	str	r2, [r6, #0]
 8013fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013fec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	e09d      	b.n	8014130 <_printf_i+0x1e8>
 8013ff4:	6833      	ldr	r3, [r6, #0]
 8013ff6:	6820      	ldr	r0, [r4, #0]
 8013ff8:	1d19      	adds	r1, r3, #4
 8013ffa:	6031      	str	r1, [r6, #0]
 8013ffc:	0606      	lsls	r6, r0, #24
 8013ffe:	d501      	bpl.n	8014004 <_printf_i+0xbc>
 8014000:	681d      	ldr	r5, [r3, #0]
 8014002:	e003      	b.n	801400c <_printf_i+0xc4>
 8014004:	0645      	lsls	r5, r0, #25
 8014006:	d5fb      	bpl.n	8014000 <_printf_i+0xb8>
 8014008:	f9b3 5000 	ldrsh.w	r5, [r3]
 801400c:	2d00      	cmp	r5, #0
 801400e:	da03      	bge.n	8014018 <_printf_i+0xd0>
 8014010:	232d      	movs	r3, #45	@ 0x2d
 8014012:	426d      	negs	r5, r5
 8014014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014018:	4859      	ldr	r0, [pc, #356]	@ (8014180 <_printf_i+0x238>)
 801401a:	230a      	movs	r3, #10
 801401c:	e011      	b.n	8014042 <_printf_i+0xfa>
 801401e:	6821      	ldr	r1, [r4, #0]
 8014020:	6833      	ldr	r3, [r6, #0]
 8014022:	0608      	lsls	r0, r1, #24
 8014024:	f853 5b04 	ldr.w	r5, [r3], #4
 8014028:	d402      	bmi.n	8014030 <_printf_i+0xe8>
 801402a:	0649      	lsls	r1, r1, #25
 801402c:	bf48      	it	mi
 801402e:	b2ad      	uxthmi	r5, r5
 8014030:	2f6f      	cmp	r7, #111	@ 0x6f
 8014032:	4853      	ldr	r0, [pc, #332]	@ (8014180 <_printf_i+0x238>)
 8014034:	6033      	str	r3, [r6, #0]
 8014036:	bf14      	ite	ne
 8014038:	230a      	movne	r3, #10
 801403a:	2308      	moveq	r3, #8
 801403c:	2100      	movs	r1, #0
 801403e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014042:	6866      	ldr	r6, [r4, #4]
 8014044:	60a6      	str	r6, [r4, #8]
 8014046:	2e00      	cmp	r6, #0
 8014048:	bfa2      	ittt	ge
 801404a:	6821      	ldrge	r1, [r4, #0]
 801404c:	f021 0104 	bicge.w	r1, r1, #4
 8014050:	6021      	strge	r1, [r4, #0]
 8014052:	b90d      	cbnz	r5, 8014058 <_printf_i+0x110>
 8014054:	2e00      	cmp	r6, #0
 8014056:	d04b      	beq.n	80140f0 <_printf_i+0x1a8>
 8014058:	4616      	mov	r6, r2
 801405a:	fbb5 f1f3 	udiv	r1, r5, r3
 801405e:	fb03 5711 	mls	r7, r3, r1, r5
 8014062:	5dc7      	ldrb	r7, [r0, r7]
 8014064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014068:	462f      	mov	r7, r5
 801406a:	42bb      	cmp	r3, r7
 801406c:	460d      	mov	r5, r1
 801406e:	d9f4      	bls.n	801405a <_printf_i+0x112>
 8014070:	2b08      	cmp	r3, #8
 8014072:	d10b      	bne.n	801408c <_printf_i+0x144>
 8014074:	6823      	ldr	r3, [r4, #0]
 8014076:	07df      	lsls	r7, r3, #31
 8014078:	d508      	bpl.n	801408c <_printf_i+0x144>
 801407a:	6923      	ldr	r3, [r4, #16]
 801407c:	6861      	ldr	r1, [r4, #4]
 801407e:	4299      	cmp	r1, r3
 8014080:	bfde      	ittt	le
 8014082:	2330      	movle	r3, #48	@ 0x30
 8014084:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014088:	f106 36ff 	addle.w	r6, r6, #4294967295
 801408c:	1b92      	subs	r2, r2, r6
 801408e:	6122      	str	r2, [r4, #16]
 8014090:	f8cd a000 	str.w	sl, [sp]
 8014094:	464b      	mov	r3, r9
 8014096:	aa03      	add	r2, sp, #12
 8014098:	4621      	mov	r1, r4
 801409a:	4640      	mov	r0, r8
 801409c:	f7ff fee6 	bl	8013e6c <_printf_common>
 80140a0:	3001      	adds	r0, #1
 80140a2:	d14a      	bne.n	801413a <_printf_i+0x1f2>
 80140a4:	f04f 30ff 	mov.w	r0, #4294967295
 80140a8:	b004      	add	sp, #16
 80140aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140ae:	6823      	ldr	r3, [r4, #0]
 80140b0:	f043 0320 	orr.w	r3, r3, #32
 80140b4:	6023      	str	r3, [r4, #0]
 80140b6:	4833      	ldr	r0, [pc, #204]	@ (8014184 <_printf_i+0x23c>)
 80140b8:	2778      	movs	r7, #120	@ 0x78
 80140ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80140be:	6823      	ldr	r3, [r4, #0]
 80140c0:	6831      	ldr	r1, [r6, #0]
 80140c2:	061f      	lsls	r7, r3, #24
 80140c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80140c8:	d402      	bmi.n	80140d0 <_printf_i+0x188>
 80140ca:	065f      	lsls	r7, r3, #25
 80140cc:	bf48      	it	mi
 80140ce:	b2ad      	uxthmi	r5, r5
 80140d0:	6031      	str	r1, [r6, #0]
 80140d2:	07d9      	lsls	r1, r3, #31
 80140d4:	bf44      	itt	mi
 80140d6:	f043 0320 	orrmi.w	r3, r3, #32
 80140da:	6023      	strmi	r3, [r4, #0]
 80140dc:	b11d      	cbz	r5, 80140e6 <_printf_i+0x19e>
 80140de:	2310      	movs	r3, #16
 80140e0:	e7ac      	b.n	801403c <_printf_i+0xf4>
 80140e2:	4827      	ldr	r0, [pc, #156]	@ (8014180 <_printf_i+0x238>)
 80140e4:	e7e9      	b.n	80140ba <_printf_i+0x172>
 80140e6:	6823      	ldr	r3, [r4, #0]
 80140e8:	f023 0320 	bic.w	r3, r3, #32
 80140ec:	6023      	str	r3, [r4, #0]
 80140ee:	e7f6      	b.n	80140de <_printf_i+0x196>
 80140f0:	4616      	mov	r6, r2
 80140f2:	e7bd      	b.n	8014070 <_printf_i+0x128>
 80140f4:	6833      	ldr	r3, [r6, #0]
 80140f6:	6825      	ldr	r5, [r4, #0]
 80140f8:	6961      	ldr	r1, [r4, #20]
 80140fa:	1d18      	adds	r0, r3, #4
 80140fc:	6030      	str	r0, [r6, #0]
 80140fe:	062e      	lsls	r6, r5, #24
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	d501      	bpl.n	8014108 <_printf_i+0x1c0>
 8014104:	6019      	str	r1, [r3, #0]
 8014106:	e002      	b.n	801410e <_printf_i+0x1c6>
 8014108:	0668      	lsls	r0, r5, #25
 801410a:	d5fb      	bpl.n	8014104 <_printf_i+0x1bc>
 801410c:	8019      	strh	r1, [r3, #0]
 801410e:	2300      	movs	r3, #0
 8014110:	6123      	str	r3, [r4, #16]
 8014112:	4616      	mov	r6, r2
 8014114:	e7bc      	b.n	8014090 <_printf_i+0x148>
 8014116:	6833      	ldr	r3, [r6, #0]
 8014118:	1d1a      	adds	r2, r3, #4
 801411a:	6032      	str	r2, [r6, #0]
 801411c:	681e      	ldr	r6, [r3, #0]
 801411e:	6862      	ldr	r2, [r4, #4]
 8014120:	2100      	movs	r1, #0
 8014122:	4630      	mov	r0, r6
 8014124:	f7ec f87c 	bl	8000220 <memchr>
 8014128:	b108      	cbz	r0, 801412e <_printf_i+0x1e6>
 801412a:	1b80      	subs	r0, r0, r6
 801412c:	6060      	str	r0, [r4, #4]
 801412e:	6863      	ldr	r3, [r4, #4]
 8014130:	6123      	str	r3, [r4, #16]
 8014132:	2300      	movs	r3, #0
 8014134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014138:	e7aa      	b.n	8014090 <_printf_i+0x148>
 801413a:	6923      	ldr	r3, [r4, #16]
 801413c:	4632      	mov	r2, r6
 801413e:	4649      	mov	r1, r9
 8014140:	4640      	mov	r0, r8
 8014142:	47d0      	blx	sl
 8014144:	3001      	adds	r0, #1
 8014146:	d0ad      	beq.n	80140a4 <_printf_i+0x15c>
 8014148:	6823      	ldr	r3, [r4, #0]
 801414a:	079b      	lsls	r3, r3, #30
 801414c:	d413      	bmi.n	8014176 <_printf_i+0x22e>
 801414e:	68e0      	ldr	r0, [r4, #12]
 8014150:	9b03      	ldr	r3, [sp, #12]
 8014152:	4298      	cmp	r0, r3
 8014154:	bfb8      	it	lt
 8014156:	4618      	movlt	r0, r3
 8014158:	e7a6      	b.n	80140a8 <_printf_i+0x160>
 801415a:	2301      	movs	r3, #1
 801415c:	4632      	mov	r2, r6
 801415e:	4649      	mov	r1, r9
 8014160:	4640      	mov	r0, r8
 8014162:	47d0      	blx	sl
 8014164:	3001      	adds	r0, #1
 8014166:	d09d      	beq.n	80140a4 <_printf_i+0x15c>
 8014168:	3501      	adds	r5, #1
 801416a:	68e3      	ldr	r3, [r4, #12]
 801416c:	9903      	ldr	r1, [sp, #12]
 801416e:	1a5b      	subs	r3, r3, r1
 8014170:	42ab      	cmp	r3, r5
 8014172:	dcf2      	bgt.n	801415a <_printf_i+0x212>
 8014174:	e7eb      	b.n	801414e <_printf_i+0x206>
 8014176:	2500      	movs	r5, #0
 8014178:	f104 0619 	add.w	r6, r4, #25
 801417c:	e7f5      	b.n	801416a <_printf_i+0x222>
 801417e:	bf00      	nop
 8014180:	0801902e 	.word	0x0801902e
 8014184:	0801903f 	.word	0x0801903f

08014188 <_scanf_float>:
 8014188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801418c:	b087      	sub	sp, #28
 801418e:	4617      	mov	r7, r2
 8014190:	9303      	str	r3, [sp, #12]
 8014192:	688b      	ldr	r3, [r1, #8]
 8014194:	1e5a      	subs	r2, r3, #1
 8014196:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801419a:	bf81      	itttt	hi
 801419c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80141a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80141a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80141a8:	608b      	strhi	r3, [r1, #8]
 80141aa:	680b      	ldr	r3, [r1, #0]
 80141ac:	460a      	mov	r2, r1
 80141ae:	f04f 0500 	mov.w	r5, #0
 80141b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80141b6:	f842 3b1c 	str.w	r3, [r2], #28
 80141ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80141be:	4680      	mov	r8, r0
 80141c0:	460c      	mov	r4, r1
 80141c2:	bf98      	it	ls
 80141c4:	f04f 0b00 	movls.w	fp, #0
 80141c8:	9201      	str	r2, [sp, #4]
 80141ca:	4616      	mov	r6, r2
 80141cc:	46aa      	mov	sl, r5
 80141ce:	46a9      	mov	r9, r5
 80141d0:	9502      	str	r5, [sp, #8]
 80141d2:	68a2      	ldr	r2, [r4, #8]
 80141d4:	b152      	cbz	r2, 80141ec <_scanf_float+0x64>
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	781b      	ldrb	r3, [r3, #0]
 80141da:	2b4e      	cmp	r3, #78	@ 0x4e
 80141dc:	d864      	bhi.n	80142a8 <_scanf_float+0x120>
 80141de:	2b40      	cmp	r3, #64	@ 0x40
 80141e0:	d83c      	bhi.n	801425c <_scanf_float+0xd4>
 80141e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80141e6:	b2c8      	uxtb	r0, r1
 80141e8:	280e      	cmp	r0, #14
 80141ea:	d93a      	bls.n	8014262 <_scanf_float+0xda>
 80141ec:	f1b9 0f00 	cmp.w	r9, #0
 80141f0:	d003      	beq.n	80141fa <_scanf_float+0x72>
 80141f2:	6823      	ldr	r3, [r4, #0]
 80141f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80141f8:	6023      	str	r3, [r4, #0]
 80141fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80141fe:	f1ba 0f01 	cmp.w	sl, #1
 8014202:	f200 8117 	bhi.w	8014434 <_scanf_float+0x2ac>
 8014206:	9b01      	ldr	r3, [sp, #4]
 8014208:	429e      	cmp	r6, r3
 801420a:	f200 8108 	bhi.w	801441e <_scanf_float+0x296>
 801420e:	2001      	movs	r0, #1
 8014210:	b007      	add	sp, #28
 8014212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014216:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801421a:	2a0d      	cmp	r2, #13
 801421c:	d8e6      	bhi.n	80141ec <_scanf_float+0x64>
 801421e:	a101      	add	r1, pc, #4	@ (adr r1, 8014224 <_scanf_float+0x9c>)
 8014220:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014224:	0801436b 	.word	0x0801436b
 8014228:	080141ed 	.word	0x080141ed
 801422c:	080141ed 	.word	0x080141ed
 8014230:	080141ed 	.word	0x080141ed
 8014234:	080143cb 	.word	0x080143cb
 8014238:	080143a3 	.word	0x080143a3
 801423c:	080141ed 	.word	0x080141ed
 8014240:	080141ed 	.word	0x080141ed
 8014244:	08014379 	.word	0x08014379
 8014248:	080141ed 	.word	0x080141ed
 801424c:	080141ed 	.word	0x080141ed
 8014250:	080141ed 	.word	0x080141ed
 8014254:	080141ed 	.word	0x080141ed
 8014258:	08014331 	.word	0x08014331
 801425c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014260:	e7db      	b.n	801421a <_scanf_float+0x92>
 8014262:	290e      	cmp	r1, #14
 8014264:	d8c2      	bhi.n	80141ec <_scanf_float+0x64>
 8014266:	a001      	add	r0, pc, #4	@ (adr r0, 801426c <_scanf_float+0xe4>)
 8014268:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801426c:	08014321 	.word	0x08014321
 8014270:	080141ed 	.word	0x080141ed
 8014274:	08014321 	.word	0x08014321
 8014278:	080143b7 	.word	0x080143b7
 801427c:	080141ed 	.word	0x080141ed
 8014280:	080142c9 	.word	0x080142c9
 8014284:	08014307 	.word	0x08014307
 8014288:	08014307 	.word	0x08014307
 801428c:	08014307 	.word	0x08014307
 8014290:	08014307 	.word	0x08014307
 8014294:	08014307 	.word	0x08014307
 8014298:	08014307 	.word	0x08014307
 801429c:	08014307 	.word	0x08014307
 80142a0:	08014307 	.word	0x08014307
 80142a4:	08014307 	.word	0x08014307
 80142a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80142aa:	d809      	bhi.n	80142c0 <_scanf_float+0x138>
 80142ac:	2b60      	cmp	r3, #96	@ 0x60
 80142ae:	d8b2      	bhi.n	8014216 <_scanf_float+0x8e>
 80142b0:	2b54      	cmp	r3, #84	@ 0x54
 80142b2:	d07b      	beq.n	80143ac <_scanf_float+0x224>
 80142b4:	2b59      	cmp	r3, #89	@ 0x59
 80142b6:	d199      	bne.n	80141ec <_scanf_float+0x64>
 80142b8:	2d07      	cmp	r5, #7
 80142ba:	d197      	bne.n	80141ec <_scanf_float+0x64>
 80142bc:	2508      	movs	r5, #8
 80142be:	e02c      	b.n	801431a <_scanf_float+0x192>
 80142c0:	2b74      	cmp	r3, #116	@ 0x74
 80142c2:	d073      	beq.n	80143ac <_scanf_float+0x224>
 80142c4:	2b79      	cmp	r3, #121	@ 0x79
 80142c6:	e7f6      	b.n	80142b6 <_scanf_float+0x12e>
 80142c8:	6821      	ldr	r1, [r4, #0]
 80142ca:	05c8      	lsls	r0, r1, #23
 80142cc:	d51b      	bpl.n	8014306 <_scanf_float+0x17e>
 80142ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80142d2:	6021      	str	r1, [r4, #0]
 80142d4:	f109 0901 	add.w	r9, r9, #1
 80142d8:	f1bb 0f00 	cmp.w	fp, #0
 80142dc:	d003      	beq.n	80142e6 <_scanf_float+0x15e>
 80142de:	3201      	adds	r2, #1
 80142e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80142e4:	60a2      	str	r2, [r4, #8]
 80142e6:	68a3      	ldr	r3, [r4, #8]
 80142e8:	3b01      	subs	r3, #1
 80142ea:	60a3      	str	r3, [r4, #8]
 80142ec:	6923      	ldr	r3, [r4, #16]
 80142ee:	3301      	adds	r3, #1
 80142f0:	6123      	str	r3, [r4, #16]
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	3b01      	subs	r3, #1
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	607b      	str	r3, [r7, #4]
 80142fa:	f340 8087 	ble.w	801440c <_scanf_float+0x284>
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	3301      	adds	r3, #1
 8014302:	603b      	str	r3, [r7, #0]
 8014304:	e765      	b.n	80141d2 <_scanf_float+0x4a>
 8014306:	eb1a 0105 	adds.w	r1, sl, r5
 801430a:	f47f af6f 	bne.w	80141ec <_scanf_float+0x64>
 801430e:	6822      	ldr	r2, [r4, #0]
 8014310:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014314:	6022      	str	r2, [r4, #0]
 8014316:	460d      	mov	r5, r1
 8014318:	468a      	mov	sl, r1
 801431a:	f806 3b01 	strb.w	r3, [r6], #1
 801431e:	e7e2      	b.n	80142e6 <_scanf_float+0x15e>
 8014320:	6822      	ldr	r2, [r4, #0]
 8014322:	0610      	lsls	r0, r2, #24
 8014324:	f57f af62 	bpl.w	80141ec <_scanf_float+0x64>
 8014328:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801432c:	6022      	str	r2, [r4, #0]
 801432e:	e7f4      	b.n	801431a <_scanf_float+0x192>
 8014330:	f1ba 0f00 	cmp.w	sl, #0
 8014334:	d10e      	bne.n	8014354 <_scanf_float+0x1cc>
 8014336:	f1b9 0f00 	cmp.w	r9, #0
 801433a:	d10e      	bne.n	801435a <_scanf_float+0x1d2>
 801433c:	6822      	ldr	r2, [r4, #0]
 801433e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014342:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014346:	d108      	bne.n	801435a <_scanf_float+0x1d2>
 8014348:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801434c:	6022      	str	r2, [r4, #0]
 801434e:	f04f 0a01 	mov.w	sl, #1
 8014352:	e7e2      	b.n	801431a <_scanf_float+0x192>
 8014354:	f1ba 0f02 	cmp.w	sl, #2
 8014358:	d055      	beq.n	8014406 <_scanf_float+0x27e>
 801435a:	2d01      	cmp	r5, #1
 801435c:	d002      	beq.n	8014364 <_scanf_float+0x1dc>
 801435e:	2d04      	cmp	r5, #4
 8014360:	f47f af44 	bne.w	80141ec <_scanf_float+0x64>
 8014364:	3501      	adds	r5, #1
 8014366:	b2ed      	uxtb	r5, r5
 8014368:	e7d7      	b.n	801431a <_scanf_float+0x192>
 801436a:	f1ba 0f01 	cmp.w	sl, #1
 801436e:	f47f af3d 	bne.w	80141ec <_scanf_float+0x64>
 8014372:	f04f 0a02 	mov.w	sl, #2
 8014376:	e7d0      	b.n	801431a <_scanf_float+0x192>
 8014378:	b97d      	cbnz	r5, 801439a <_scanf_float+0x212>
 801437a:	f1b9 0f00 	cmp.w	r9, #0
 801437e:	f47f af38 	bne.w	80141f2 <_scanf_float+0x6a>
 8014382:	6822      	ldr	r2, [r4, #0]
 8014384:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014388:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801438c:	f040 8108 	bne.w	80145a0 <_scanf_float+0x418>
 8014390:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014394:	6022      	str	r2, [r4, #0]
 8014396:	2501      	movs	r5, #1
 8014398:	e7bf      	b.n	801431a <_scanf_float+0x192>
 801439a:	2d03      	cmp	r5, #3
 801439c:	d0e2      	beq.n	8014364 <_scanf_float+0x1dc>
 801439e:	2d05      	cmp	r5, #5
 80143a0:	e7de      	b.n	8014360 <_scanf_float+0x1d8>
 80143a2:	2d02      	cmp	r5, #2
 80143a4:	f47f af22 	bne.w	80141ec <_scanf_float+0x64>
 80143a8:	2503      	movs	r5, #3
 80143aa:	e7b6      	b.n	801431a <_scanf_float+0x192>
 80143ac:	2d06      	cmp	r5, #6
 80143ae:	f47f af1d 	bne.w	80141ec <_scanf_float+0x64>
 80143b2:	2507      	movs	r5, #7
 80143b4:	e7b1      	b.n	801431a <_scanf_float+0x192>
 80143b6:	6822      	ldr	r2, [r4, #0]
 80143b8:	0591      	lsls	r1, r2, #22
 80143ba:	f57f af17 	bpl.w	80141ec <_scanf_float+0x64>
 80143be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80143c2:	6022      	str	r2, [r4, #0]
 80143c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80143c8:	e7a7      	b.n	801431a <_scanf_float+0x192>
 80143ca:	6822      	ldr	r2, [r4, #0]
 80143cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80143d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80143d4:	d006      	beq.n	80143e4 <_scanf_float+0x25c>
 80143d6:	0550      	lsls	r0, r2, #21
 80143d8:	f57f af08 	bpl.w	80141ec <_scanf_float+0x64>
 80143dc:	f1b9 0f00 	cmp.w	r9, #0
 80143e0:	f000 80de 	beq.w	80145a0 <_scanf_float+0x418>
 80143e4:	0591      	lsls	r1, r2, #22
 80143e6:	bf58      	it	pl
 80143e8:	9902      	ldrpl	r1, [sp, #8]
 80143ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80143ee:	bf58      	it	pl
 80143f0:	eba9 0101 	subpl.w	r1, r9, r1
 80143f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80143f8:	bf58      	it	pl
 80143fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80143fe:	6022      	str	r2, [r4, #0]
 8014400:	f04f 0900 	mov.w	r9, #0
 8014404:	e789      	b.n	801431a <_scanf_float+0x192>
 8014406:	f04f 0a03 	mov.w	sl, #3
 801440a:	e786      	b.n	801431a <_scanf_float+0x192>
 801440c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014410:	4639      	mov	r1, r7
 8014412:	4640      	mov	r0, r8
 8014414:	4798      	blx	r3
 8014416:	2800      	cmp	r0, #0
 8014418:	f43f aedb 	beq.w	80141d2 <_scanf_float+0x4a>
 801441c:	e6e6      	b.n	80141ec <_scanf_float+0x64>
 801441e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014422:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014426:	463a      	mov	r2, r7
 8014428:	4640      	mov	r0, r8
 801442a:	4798      	blx	r3
 801442c:	6923      	ldr	r3, [r4, #16]
 801442e:	3b01      	subs	r3, #1
 8014430:	6123      	str	r3, [r4, #16]
 8014432:	e6e8      	b.n	8014206 <_scanf_float+0x7e>
 8014434:	1e6b      	subs	r3, r5, #1
 8014436:	2b06      	cmp	r3, #6
 8014438:	d824      	bhi.n	8014484 <_scanf_float+0x2fc>
 801443a:	2d02      	cmp	r5, #2
 801443c:	d836      	bhi.n	80144ac <_scanf_float+0x324>
 801443e:	9b01      	ldr	r3, [sp, #4]
 8014440:	429e      	cmp	r6, r3
 8014442:	f67f aee4 	bls.w	801420e <_scanf_float+0x86>
 8014446:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801444a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801444e:	463a      	mov	r2, r7
 8014450:	4640      	mov	r0, r8
 8014452:	4798      	blx	r3
 8014454:	6923      	ldr	r3, [r4, #16]
 8014456:	3b01      	subs	r3, #1
 8014458:	6123      	str	r3, [r4, #16]
 801445a:	e7f0      	b.n	801443e <_scanf_float+0x2b6>
 801445c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014460:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014464:	463a      	mov	r2, r7
 8014466:	4640      	mov	r0, r8
 8014468:	4798      	blx	r3
 801446a:	6923      	ldr	r3, [r4, #16]
 801446c:	3b01      	subs	r3, #1
 801446e:	6123      	str	r3, [r4, #16]
 8014470:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014474:	fa5f fa8a 	uxtb.w	sl, sl
 8014478:	f1ba 0f02 	cmp.w	sl, #2
 801447c:	d1ee      	bne.n	801445c <_scanf_float+0x2d4>
 801447e:	3d03      	subs	r5, #3
 8014480:	b2ed      	uxtb	r5, r5
 8014482:	1b76      	subs	r6, r6, r5
 8014484:	6823      	ldr	r3, [r4, #0]
 8014486:	05da      	lsls	r2, r3, #23
 8014488:	d530      	bpl.n	80144ec <_scanf_float+0x364>
 801448a:	055b      	lsls	r3, r3, #21
 801448c:	d511      	bpl.n	80144b2 <_scanf_float+0x32a>
 801448e:	9b01      	ldr	r3, [sp, #4]
 8014490:	429e      	cmp	r6, r3
 8014492:	f67f aebc 	bls.w	801420e <_scanf_float+0x86>
 8014496:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801449a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801449e:	463a      	mov	r2, r7
 80144a0:	4640      	mov	r0, r8
 80144a2:	4798      	blx	r3
 80144a4:	6923      	ldr	r3, [r4, #16]
 80144a6:	3b01      	subs	r3, #1
 80144a8:	6123      	str	r3, [r4, #16]
 80144aa:	e7f0      	b.n	801448e <_scanf_float+0x306>
 80144ac:	46aa      	mov	sl, r5
 80144ae:	46b3      	mov	fp, r6
 80144b0:	e7de      	b.n	8014470 <_scanf_float+0x2e8>
 80144b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80144b6:	6923      	ldr	r3, [r4, #16]
 80144b8:	2965      	cmp	r1, #101	@ 0x65
 80144ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80144be:	f106 35ff 	add.w	r5, r6, #4294967295
 80144c2:	6123      	str	r3, [r4, #16]
 80144c4:	d00c      	beq.n	80144e0 <_scanf_float+0x358>
 80144c6:	2945      	cmp	r1, #69	@ 0x45
 80144c8:	d00a      	beq.n	80144e0 <_scanf_float+0x358>
 80144ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80144ce:	463a      	mov	r2, r7
 80144d0:	4640      	mov	r0, r8
 80144d2:	4798      	blx	r3
 80144d4:	6923      	ldr	r3, [r4, #16]
 80144d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80144da:	3b01      	subs	r3, #1
 80144dc:	1eb5      	subs	r5, r6, #2
 80144de:	6123      	str	r3, [r4, #16]
 80144e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80144e4:	463a      	mov	r2, r7
 80144e6:	4640      	mov	r0, r8
 80144e8:	4798      	blx	r3
 80144ea:	462e      	mov	r6, r5
 80144ec:	6822      	ldr	r2, [r4, #0]
 80144ee:	f012 0210 	ands.w	r2, r2, #16
 80144f2:	d001      	beq.n	80144f8 <_scanf_float+0x370>
 80144f4:	2000      	movs	r0, #0
 80144f6:	e68b      	b.n	8014210 <_scanf_float+0x88>
 80144f8:	7032      	strb	r2, [r6, #0]
 80144fa:	6823      	ldr	r3, [r4, #0]
 80144fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014504:	d11c      	bne.n	8014540 <_scanf_float+0x3b8>
 8014506:	9b02      	ldr	r3, [sp, #8]
 8014508:	454b      	cmp	r3, r9
 801450a:	eba3 0209 	sub.w	r2, r3, r9
 801450e:	d123      	bne.n	8014558 <_scanf_float+0x3d0>
 8014510:	9901      	ldr	r1, [sp, #4]
 8014512:	2200      	movs	r2, #0
 8014514:	4640      	mov	r0, r8
 8014516:	f002 fbf3 	bl	8016d00 <_strtod_r>
 801451a:	9b03      	ldr	r3, [sp, #12]
 801451c:	6821      	ldr	r1, [r4, #0]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	f011 0f02 	tst.w	r1, #2
 8014524:	ec57 6b10 	vmov	r6, r7, d0
 8014528:	f103 0204 	add.w	r2, r3, #4
 801452c:	d01f      	beq.n	801456e <_scanf_float+0x3e6>
 801452e:	9903      	ldr	r1, [sp, #12]
 8014530:	600a      	str	r2, [r1, #0]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	e9c3 6700 	strd	r6, r7, [r3]
 8014538:	68e3      	ldr	r3, [r4, #12]
 801453a:	3301      	adds	r3, #1
 801453c:	60e3      	str	r3, [r4, #12]
 801453e:	e7d9      	b.n	80144f4 <_scanf_float+0x36c>
 8014540:	9b04      	ldr	r3, [sp, #16]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d0e4      	beq.n	8014510 <_scanf_float+0x388>
 8014546:	9905      	ldr	r1, [sp, #20]
 8014548:	230a      	movs	r3, #10
 801454a:	3101      	adds	r1, #1
 801454c:	4640      	mov	r0, r8
 801454e:	f002 fc57 	bl	8016e00 <_strtol_r>
 8014552:	9b04      	ldr	r3, [sp, #16]
 8014554:	9e05      	ldr	r6, [sp, #20]
 8014556:	1ac2      	subs	r2, r0, r3
 8014558:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801455c:	429e      	cmp	r6, r3
 801455e:	bf28      	it	cs
 8014560:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014564:	4910      	ldr	r1, [pc, #64]	@ (80145a8 <_scanf_float+0x420>)
 8014566:	4630      	mov	r0, r6
 8014568:	f000 f8f6 	bl	8014758 <siprintf>
 801456c:	e7d0      	b.n	8014510 <_scanf_float+0x388>
 801456e:	f011 0f04 	tst.w	r1, #4
 8014572:	9903      	ldr	r1, [sp, #12]
 8014574:	600a      	str	r2, [r1, #0]
 8014576:	d1dc      	bne.n	8014532 <_scanf_float+0x3aa>
 8014578:	681d      	ldr	r5, [r3, #0]
 801457a:	4632      	mov	r2, r6
 801457c:	463b      	mov	r3, r7
 801457e:	4630      	mov	r0, r6
 8014580:	4639      	mov	r1, r7
 8014582:	f7ec fafb 	bl	8000b7c <__aeabi_dcmpun>
 8014586:	b128      	cbz	r0, 8014594 <_scanf_float+0x40c>
 8014588:	4808      	ldr	r0, [pc, #32]	@ (80145ac <_scanf_float+0x424>)
 801458a:	f000 fa67 	bl	8014a5c <nanf>
 801458e:	ed85 0a00 	vstr	s0, [r5]
 8014592:	e7d1      	b.n	8014538 <_scanf_float+0x3b0>
 8014594:	4630      	mov	r0, r6
 8014596:	4639      	mov	r1, r7
 8014598:	f7ec fb4e 	bl	8000c38 <__aeabi_d2f>
 801459c:	6028      	str	r0, [r5, #0]
 801459e:	e7cb      	b.n	8014538 <_scanf_float+0x3b0>
 80145a0:	f04f 0900 	mov.w	r9, #0
 80145a4:	e629      	b.n	80141fa <_scanf_float+0x72>
 80145a6:	bf00      	nop
 80145a8:	08019050 	.word	0x08019050
 80145ac:	0801901b 	.word	0x0801901b

080145b0 <std>:
 80145b0:	2300      	movs	r3, #0
 80145b2:	b510      	push	{r4, lr}
 80145b4:	4604      	mov	r4, r0
 80145b6:	e9c0 3300 	strd	r3, r3, [r0]
 80145ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145be:	6083      	str	r3, [r0, #8]
 80145c0:	8181      	strh	r1, [r0, #12]
 80145c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80145c4:	81c2      	strh	r2, [r0, #14]
 80145c6:	6183      	str	r3, [r0, #24]
 80145c8:	4619      	mov	r1, r3
 80145ca:	2208      	movs	r2, #8
 80145cc:	305c      	adds	r0, #92	@ 0x5c
 80145ce:	f000 f950 	bl	8014872 <memset>
 80145d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014608 <std+0x58>)
 80145d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80145d6:	4b0d      	ldr	r3, [pc, #52]	@ (801460c <std+0x5c>)
 80145d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80145da:	4b0d      	ldr	r3, [pc, #52]	@ (8014610 <std+0x60>)
 80145dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80145de:	4b0d      	ldr	r3, [pc, #52]	@ (8014614 <std+0x64>)
 80145e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80145e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014618 <std+0x68>)
 80145e4:	6224      	str	r4, [r4, #32]
 80145e6:	429c      	cmp	r4, r3
 80145e8:	d006      	beq.n	80145f8 <std+0x48>
 80145ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80145ee:	4294      	cmp	r4, r2
 80145f0:	d002      	beq.n	80145f8 <std+0x48>
 80145f2:	33d0      	adds	r3, #208	@ 0xd0
 80145f4:	429c      	cmp	r4, r3
 80145f6:	d105      	bne.n	8014604 <std+0x54>
 80145f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80145fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014600:	f000 ba1a 	b.w	8014a38 <__retarget_lock_init_recursive>
 8014604:	bd10      	pop	{r4, pc}
 8014606:	bf00      	nop
 8014608:	08014799 	.word	0x08014799
 801460c:	080147bb 	.word	0x080147bb
 8014610:	080147f3 	.word	0x080147f3
 8014614:	08014817 	.word	0x08014817
 8014618:	20000a50 	.word	0x20000a50

0801461c <stdio_exit_handler>:
 801461c:	4a02      	ldr	r2, [pc, #8]	@ (8014628 <stdio_exit_handler+0xc>)
 801461e:	4903      	ldr	r1, [pc, #12]	@ (801462c <stdio_exit_handler+0x10>)
 8014620:	4803      	ldr	r0, [pc, #12]	@ (8014630 <stdio_exit_handler+0x14>)
 8014622:	f000 b87b 	b.w	801471c <_fwalk_sglue>
 8014626:	bf00      	nop
 8014628:	20000084 	.word	0x20000084
 801462c:	08017441 	.word	0x08017441
 8014630:	20000094 	.word	0x20000094

08014634 <cleanup_stdio>:
 8014634:	6841      	ldr	r1, [r0, #4]
 8014636:	4b0c      	ldr	r3, [pc, #48]	@ (8014668 <cleanup_stdio+0x34>)
 8014638:	4299      	cmp	r1, r3
 801463a:	b510      	push	{r4, lr}
 801463c:	4604      	mov	r4, r0
 801463e:	d001      	beq.n	8014644 <cleanup_stdio+0x10>
 8014640:	f002 fefe 	bl	8017440 <_fflush_r>
 8014644:	68a1      	ldr	r1, [r4, #8]
 8014646:	4b09      	ldr	r3, [pc, #36]	@ (801466c <cleanup_stdio+0x38>)
 8014648:	4299      	cmp	r1, r3
 801464a:	d002      	beq.n	8014652 <cleanup_stdio+0x1e>
 801464c:	4620      	mov	r0, r4
 801464e:	f002 fef7 	bl	8017440 <_fflush_r>
 8014652:	68e1      	ldr	r1, [r4, #12]
 8014654:	4b06      	ldr	r3, [pc, #24]	@ (8014670 <cleanup_stdio+0x3c>)
 8014656:	4299      	cmp	r1, r3
 8014658:	d004      	beq.n	8014664 <cleanup_stdio+0x30>
 801465a:	4620      	mov	r0, r4
 801465c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014660:	f002 beee 	b.w	8017440 <_fflush_r>
 8014664:	bd10      	pop	{r4, pc}
 8014666:	bf00      	nop
 8014668:	20000a50 	.word	0x20000a50
 801466c:	20000ab8 	.word	0x20000ab8
 8014670:	20000b20 	.word	0x20000b20

08014674 <global_stdio_init.part.0>:
 8014674:	b510      	push	{r4, lr}
 8014676:	4b0b      	ldr	r3, [pc, #44]	@ (80146a4 <global_stdio_init.part.0+0x30>)
 8014678:	4c0b      	ldr	r4, [pc, #44]	@ (80146a8 <global_stdio_init.part.0+0x34>)
 801467a:	4a0c      	ldr	r2, [pc, #48]	@ (80146ac <global_stdio_init.part.0+0x38>)
 801467c:	601a      	str	r2, [r3, #0]
 801467e:	4620      	mov	r0, r4
 8014680:	2200      	movs	r2, #0
 8014682:	2104      	movs	r1, #4
 8014684:	f7ff ff94 	bl	80145b0 <std>
 8014688:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801468c:	2201      	movs	r2, #1
 801468e:	2109      	movs	r1, #9
 8014690:	f7ff ff8e 	bl	80145b0 <std>
 8014694:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014698:	2202      	movs	r2, #2
 801469a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801469e:	2112      	movs	r1, #18
 80146a0:	f7ff bf86 	b.w	80145b0 <std>
 80146a4:	20000b88 	.word	0x20000b88
 80146a8:	20000a50 	.word	0x20000a50
 80146ac:	0801461d 	.word	0x0801461d

080146b0 <__sfp_lock_acquire>:
 80146b0:	4801      	ldr	r0, [pc, #4]	@ (80146b8 <__sfp_lock_acquire+0x8>)
 80146b2:	f000 b9c2 	b.w	8014a3a <__retarget_lock_acquire_recursive>
 80146b6:	bf00      	nop
 80146b8:	20000b91 	.word	0x20000b91

080146bc <__sfp_lock_release>:
 80146bc:	4801      	ldr	r0, [pc, #4]	@ (80146c4 <__sfp_lock_release+0x8>)
 80146be:	f000 b9bd 	b.w	8014a3c <__retarget_lock_release_recursive>
 80146c2:	bf00      	nop
 80146c4:	20000b91 	.word	0x20000b91

080146c8 <__sinit>:
 80146c8:	b510      	push	{r4, lr}
 80146ca:	4604      	mov	r4, r0
 80146cc:	f7ff fff0 	bl	80146b0 <__sfp_lock_acquire>
 80146d0:	6a23      	ldr	r3, [r4, #32]
 80146d2:	b11b      	cbz	r3, 80146dc <__sinit+0x14>
 80146d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146d8:	f7ff bff0 	b.w	80146bc <__sfp_lock_release>
 80146dc:	4b04      	ldr	r3, [pc, #16]	@ (80146f0 <__sinit+0x28>)
 80146de:	6223      	str	r3, [r4, #32]
 80146e0:	4b04      	ldr	r3, [pc, #16]	@ (80146f4 <__sinit+0x2c>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d1f5      	bne.n	80146d4 <__sinit+0xc>
 80146e8:	f7ff ffc4 	bl	8014674 <global_stdio_init.part.0>
 80146ec:	e7f2      	b.n	80146d4 <__sinit+0xc>
 80146ee:	bf00      	nop
 80146f0:	08014635 	.word	0x08014635
 80146f4:	20000b88 	.word	0x20000b88

080146f8 <fiprintf>:
 80146f8:	b40e      	push	{r1, r2, r3}
 80146fa:	b503      	push	{r0, r1, lr}
 80146fc:	4601      	mov	r1, r0
 80146fe:	ab03      	add	r3, sp, #12
 8014700:	4805      	ldr	r0, [pc, #20]	@ (8014718 <fiprintf+0x20>)
 8014702:	f853 2b04 	ldr.w	r2, [r3], #4
 8014706:	6800      	ldr	r0, [r0, #0]
 8014708:	9301      	str	r3, [sp, #4]
 801470a:	f002 fcfd 	bl	8017108 <_vfiprintf_r>
 801470e:	b002      	add	sp, #8
 8014710:	f85d eb04 	ldr.w	lr, [sp], #4
 8014714:	b003      	add	sp, #12
 8014716:	4770      	bx	lr
 8014718:	20000090 	.word	0x20000090

0801471c <_fwalk_sglue>:
 801471c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014720:	4607      	mov	r7, r0
 8014722:	4688      	mov	r8, r1
 8014724:	4614      	mov	r4, r2
 8014726:	2600      	movs	r6, #0
 8014728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801472c:	f1b9 0901 	subs.w	r9, r9, #1
 8014730:	d505      	bpl.n	801473e <_fwalk_sglue+0x22>
 8014732:	6824      	ldr	r4, [r4, #0]
 8014734:	2c00      	cmp	r4, #0
 8014736:	d1f7      	bne.n	8014728 <_fwalk_sglue+0xc>
 8014738:	4630      	mov	r0, r6
 801473a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801473e:	89ab      	ldrh	r3, [r5, #12]
 8014740:	2b01      	cmp	r3, #1
 8014742:	d907      	bls.n	8014754 <_fwalk_sglue+0x38>
 8014744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014748:	3301      	adds	r3, #1
 801474a:	d003      	beq.n	8014754 <_fwalk_sglue+0x38>
 801474c:	4629      	mov	r1, r5
 801474e:	4638      	mov	r0, r7
 8014750:	47c0      	blx	r8
 8014752:	4306      	orrs	r6, r0
 8014754:	3568      	adds	r5, #104	@ 0x68
 8014756:	e7e9      	b.n	801472c <_fwalk_sglue+0x10>

08014758 <siprintf>:
 8014758:	b40e      	push	{r1, r2, r3}
 801475a:	b500      	push	{lr}
 801475c:	b09c      	sub	sp, #112	@ 0x70
 801475e:	ab1d      	add	r3, sp, #116	@ 0x74
 8014760:	9002      	str	r0, [sp, #8]
 8014762:	9006      	str	r0, [sp, #24]
 8014764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014768:	4809      	ldr	r0, [pc, #36]	@ (8014790 <siprintf+0x38>)
 801476a:	9107      	str	r1, [sp, #28]
 801476c:	9104      	str	r1, [sp, #16]
 801476e:	4909      	ldr	r1, [pc, #36]	@ (8014794 <siprintf+0x3c>)
 8014770:	f853 2b04 	ldr.w	r2, [r3], #4
 8014774:	9105      	str	r1, [sp, #20]
 8014776:	6800      	ldr	r0, [r0, #0]
 8014778:	9301      	str	r3, [sp, #4]
 801477a:	a902      	add	r1, sp, #8
 801477c:	f002 fb9e 	bl	8016ebc <_svfiprintf_r>
 8014780:	9b02      	ldr	r3, [sp, #8]
 8014782:	2200      	movs	r2, #0
 8014784:	701a      	strb	r2, [r3, #0]
 8014786:	b01c      	add	sp, #112	@ 0x70
 8014788:	f85d eb04 	ldr.w	lr, [sp], #4
 801478c:	b003      	add	sp, #12
 801478e:	4770      	bx	lr
 8014790:	20000090 	.word	0x20000090
 8014794:	ffff0208 	.word	0xffff0208

08014798 <__sread>:
 8014798:	b510      	push	{r4, lr}
 801479a:	460c      	mov	r4, r1
 801479c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147a0:	f000 f8d8 	bl	8014954 <_read_r>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	bfab      	itete	ge
 80147a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80147aa:	89a3      	ldrhlt	r3, [r4, #12]
 80147ac:	181b      	addge	r3, r3, r0
 80147ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80147b2:	bfac      	ite	ge
 80147b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80147b6:	81a3      	strhlt	r3, [r4, #12]
 80147b8:	bd10      	pop	{r4, pc}

080147ba <__swrite>:
 80147ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147be:	461f      	mov	r7, r3
 80147c0:	898b      	ldrh	r3, [r1, #12]
 80147c2:	05db      	lsls	r3, r3, #23
 80147c4:	4605      	mov	r5, r0
 80147c6:	460c      	mov	r4, r1
 80147c8:	4616      	mov	r6, r2
 80147ca:	d505      	bpl.n	80147d8 <__swrite+0x1e>
 80147cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147d0:	2302      	movs	r3, #2
 80147d2:	2200      	movs	r2, #0
 80147d4:	f000 f8ac 	bl	8014930 <_lseek_r>
 80147d8:	89a3      	ldrh	r3, [r4, #12]
 80147da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80147e2:	81a3      	strh	r3, [r4, #12]
 80147e4:	4632      	mov	r2, r6
 80147e6:	463b      	mov	r3, r7
 80147e8:	4628      	mov	r0, r5
 80147ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147ee:	f000 b8e7 	b.w	80149c0 <_write_r>

080147f2 <__sseek>:
 80147f2:	b510      	push	{r4, lr}
 80147f4:	460c      	mov	r4, r1
 80147f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147fa:	f000 f899 	bl	8014930 <_lseek_r>
 80147fe:	1c43      	adds	r3, r0, #1
 8014800:	89a3      	ldrh	r3, [r4, #12]
 8014802:	bf15      	itete	ne
 8014804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801480a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801480e:	81a3      	strheq	r3, [r4, #12]
 8014810:	bf18      	it	ne
 8014812:	81a3      	strhne	r3, [r4, #12]
 8014814:	bd10      	pop	{r4, pc}

08014816 <__sclose>:
 8014816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801481a:	f000 b879 	b.w	8014910 <_close_r>

0801481e <memcmp>:
 801481e:	b510      	push	{r4, lr}
 8014820:	3901      	subs	r1, #1
 8014822:	4402      	add	r2, r0
 8014824:	4290      	cmp	r0, r2
 8014826:	d101      	bne.n	801482c <memcmp+0xe>
 8014828:	2000      	movs	r0, #0
 801482a:	e005      	b.n	8014838 <memcmp+0x1a>
 801482c:	7803      	ldrb	r3, [r0, #0]
 801482e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014832:	42a3      	cmp	r3, r4
 8014834:	d001      	beq.n	801483a <memcmp+0x1c>
 8014836:	1b18      	subs	r0, r3, r4
 8014838:	bd10      	pop	{r4, pc}
 801483a:	3001      	adds	r0, #1
 801483c:	e7f2      	b.n	8014824 <memcmp+0x6>

0801483e <memmove>:
 801483e:	4288      	cmp	r0, r1
 8014840:	b510      	push	{r4, lr}
 8014842:	eb01 0402 	add.w	r4, r1, r2
 8014846:	d902      	bls.n	801484e <memmove+0x10>
 8014848:	4284      	cmp	r4, r0
 801484a:	4623      	mov	r3, r4
 801484c:	d807      	bhi.n	801485e <memmove+0x20>
 801484e:	1e43      	subs	r3, r0, #1
 8014850:	42a1      	cmp	r1, r4
 8014852:	d008      	beq.n	8014866 <memmove+0x28>
 8014854:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014858:	f803 2f01 	strb.w	r2, [r3, #1]!
 801485c:	e7f8      	b.n	8014850 <memmove+0x12>
 801485e:	4402      	add	r2, r0
 8014860:	4601      	mov	r1, r0
 8014862:	428a      	cmp	r2, r1
 8014864:	d100      	bne.n	8014868 <memmove+0x2a>
 8014866:	bd10      	pop	{r4, pc}
 8014868:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801486c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014870:	e7f7      	b.n	8014862 <memmove+0x24>

08014872 <memset>:
 8014872:	4402      	add	r2, r0
 8014874:	4603      	mov	r3, r0
 8014876:	4293      	cmp	r3, r2
 8014878:	d100      	bne.n	801487c <memset+0xa>
 801487a:	4770      	bx	lr
 801487c:	f803 1b01 	strb.w	r1, [r3], #1
 8014880:	e7f9      	b.n	8014876 <memset+0x4>

08014882 <strncpy>:
 8014882:	b510      	push	{r4, lr}
 8014884:	3901      	subs	r1, #1
 8014886:	4603      	mov	r3, r0
 8014888:	b132      	cbz	r2, 8014898 <strncpy+0x16>
 801488a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801488e:	f803 4b01 	strb.w	r4, [r3], #1
 8014892:	3a01      	subs	r2, #1
 8014894:	2c00      	cmp	r4, #0
 8014896:	d1f7      	bne.n	8014888 <strncpy+0x6>
 8014898:	441a      	add	r2, r3
 801489a:	2100      	movs	r1, #0
 801489c:	4293      	cmp	r3, r2
 801489e:	d100      	bne.n	80148a2 <strncpy+0x20>
 80148a0:	bd10      	pop	{r4, pc}
 80148a2:	f803 1b01 	strb.w	r1, [r3], #1
 80148a6:	e7f9      	b.n	801489c <strncpy+0x1a>

080148a8 <_raise_r>:
 80148a8:	291f      	cmp	r1, #31
 80148aa:	b538      	push	{r3, r4, r5, lr}
 80148ac:	4605      	mov	r5, r0
 80148ae:	460c      	mov	r4, r1
 80148b0:	d904      	bls.n	80148bc <_raise_r+0x14>
 80148b2:	2316      	movs	r3, #22
 80148b4:	6003      	str	r3, [r0, #0]
 80148b6:	f04f 30ff 	mov.w	r0, #4294967295
 80148ba:	bd38      	pop	{r3, r4, r5, pc}
 80148bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80148be:	b112      	cbz	r2, 80148c6 <_raise_r+0x1e>
 80148c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80148c4:	b94b      	cbnz	r3, 80148da <_raise_r+0x32>
 80148c6:	4628      	mov	r0, r5
 80148c8:	f000 f868 	bl	801499c <_getpid_r>
 80148cc:	4622      	mov	r2, r4
 80148ce:	4601      	mov	r1, r0
 80148d0:	4628      	mov	r0, r5
 80148d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148d6:	f000 b84f 	b.w	8014978 <_kill_r>
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d00a      	beq.n	80148f4 <_raise_r+0x4c>
 80148de:	1c59      	adds	r1, r3, #1
 80148e0:	d103      	bne.n	80148ea <_raise_r+0x42>
 80148e2:	2316      	movs	r3, #22
 80148e4:	6003      	str	r3, [r0, #0]
 80148e6:	2001      	movs	r0, #1
 80148e8:	e7e7      	b.n	80148ba <_raise_r+0x12>
 80148ea:	2100      	movs	r1, #0
 80148ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80148f0:	4620      	mov	r0, r4
 80148f2:	4798      	blx	r3
 80148f4:	2000      	movs	r0, #0
 80148f6:	e7e0      	b.n	80148ba <_raise_r+0x12>

080148f8 <raise>:
 80148f8:	4b02      	ldr	r3, [pc, #8]	@ (8014904 <raise+0xc>)
 80148fa:	4601      	mov	r1, r0
 80148fc:	6818      	ldr	r0, [r3, #0]
 80148fe:	f7ff bfd3 	b.w	80148a8 <_raise_r>
 8014902:	bf00      	nop
 8014904:	20000090 	.word	0x20000090

08014908 <_localeconv_r>:
 8014908:	4800      	ldr	r0, [pc, #0]	@ (801490c <_localeconv_r+0x4>)
 801490a:	4770      	bx	lr
 801490c:	200001d0 	.word	0x200001d0

08014910 <_close_r>:
 8014910:	b538      	push	{r3, r4, r5, lr}
 8014912:	4d06      	ldr	r5, [pc, #24]	@ (801492c <_close_r+0x1c>)
 8014914:	2300      	movs	r3, #0
 8014916:	4604      	mov	r4, r0
 8014918:	4608      	mov	r0, r1
 801491a:	602b      	str	r3, [r5, #0]
 801491c:	f7f4 fbae 	bl	800907c <_close>
 8014920:	1c43      	adds	r3, r0, #1
 8014922:	d102      	bne.n	801492a <_close_r+0x1a>
 8014924:	682b      	ldr	r3, [r5, #0]
 8014926:	b103      	cbz	r3, 801492a <_close_r+0x1a>
 8014928:	6023      	str	r3, [r4, #0]
 801492a:	bd38      	pop	{r3, r4, r5, pc}
 801492c:	20000b8c 	.word	0x20000b8c

08014930 <_lseek_r>:
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	4d07      	ldr	r5, [pc, #28]	@ (8014950 <_lseek_r+0x20>)
 8014934:	4604      	mov	r4, r0
 8014936:	4608      	mov	r0, r1
 8014938:	4611      	mov	r1, r2
 801493a:	2200      	movs	r2, #0
 801493c:	602a      	str	r2, [r5, #0]
 801493e:	461a      	mov	r2, r3
 8014940:	f7f4 fbc3 	bl	80090ca <_lseek>
 8014944:	1c43      	adds	r3, r0, #1
 8014946:	d102      	bne.n	801494e <_lseek_r+0x1e>
 8014948:	682b      	ldr	r3, [r5, #0]
 801494a:	b103      	cbz	r3, 801494e <_lseek_r+0x1e>
 801494c:	6023      	str	r3, [r4, #0]
 801494e:	bd38      	pop	{r3, r4, r5, pc}
 8014950:	20000b8c 	.word	0x20000b8c

08014954 <_read_r>:
 8014954:	b538      	push	{r3, r4, r5, lr}
 8014956:	4d07      	ldr	r5, [pc, #28]	@ (8014974 <_read_r+0x20>)
 8014958:	4604      	mov	r4, r0
 801495a:	4608      	mov	r0, r1
 801495c:	4611      	mov	r1, r2
 801495e:	2200      	movs	r2, #0
 8014960:	602a      	str	r2, [r5, #0]
 8014962:	461a      	mov	r2, r3
 8014964:	f7f4 fb51 	bl	800900a <_read>
 8014968:	1c43      	adds	r3, r0, #1
 801496a:	d102      	bne.n	8014972 <_read_r+0x1e>
 801496c:	682b      	ldr	r3, [r5, #0]
 801496e:	b103      	cbz	r3, 8014972 <_read_r+0x1e>
 8014970:	6023      	str	r3, [r4, #0]
 8014972:	bd38      	pop	{r3, r4, r5, pc}
 8014974:	20000b8c 	.word	0x20000b8c

08014978 <_kill_r>:
 8014978:	b538      	push	{r3, r4, r5, lr}
 801497a:	4d07      	ldr	r5, [pc, #28]	@ (8014998 <_kill_r+0x20>)
 801497c:	2300      	movs	r3, #0
 801497e:	4604      	mov	r4, r0
 8014980:	4608      	mov	r0, r1
 8014982:	4611      	mov	r1, r2
 8014984:	602b      	str	r3, [r5, #0]
 8014986:	f7f4 fb25 	bl	8008fd4 <_kill>
 801498a:	1c43      	adds	r3, r0, #1
 801498c:	d102      	bne.n	8014994 <_kill_r+0x1c>
 801498e:	682b      	ldr	r3, [r5, #0]
 8014990:	b103      	cbz	r3, 8014994 <_kill_r+0x1c>
 8014992:	6023      	str	r3, [r4, #0]
 8014994:	bd38      	pop	{r3, r4, r5, pc}
 8014996:	bf00      	nop
 8014998:	20000b8c 	.word	0x20000b8c

0801499c <_getpid_r>:
 801499c:	f7f4 bb12 	b.w	8008fc4 <_getpid>

080149a0 <_sbrk_r>:
 80149a0:	b538      	push	{r3, r4, r5, lr}
 80149a2:	4d06      	ldr	r5, [pc, #24]	@ (80149bc <_sbrk_r+0x1c>)
 80149a4:	2300      	movs	r3, #0
 80149a6:	4604      	mov	r4, r0
 80149a8:	4608      	mov	r0, r1
 80149aa:	602b      	str	r3, [r5, #0]
 80149ac:	f7f4 fb9a 	bl	80090e4 <_sbrk>
 80149b0:	1c43      	adds	r3, r0, #1
 80149b2:	d102      	bne.n	80149ba <_sbrk_r+0x1a>
 80149b4:	682b      	ldr	r3, [r5, #0]
 80149b6:	b103      	cbz	r3, 80149ba <_sbrk_r+0x1a>
 80149b8:	6023      	str	r3, [r4, #0]
 80149ba:	bd38      	pop	{r3, r4, r5, pc}
 80149bc:	20000b8c 	.word	0x20000b8c

080149c0 <_write_r>:
 80149c0:	b538      	push	{r3, r4, r5, lr}
 80149c2:	4d07      	ldr	r5, [pc, #28]	@ (80149e0 <_write_r+0x20>)
 80149c4:	4604      	mov	r4, r0
 80149c6:	4608      	mov	r0, r1
 80149c8:	4611      	mov	r1, r2
 80149ca:	2200      	movs	r2, #0
 80149cc:	602a      	str	r2, [r5, #0]
 80149ce:	461a      	mov	r2, r3
 80149d0:	f7f4 fb38 	bl	8009044 <_write>
 80149d4:	1c43      	adds	r3, r0, #1
 80149d6:	d102      	bne.n	80149de <_write_r+0x1e>
 80149d8:	682b      	ldr	r3, [r5, #0]
 80149da:	b103      	cbz	r3, 80149de <_write_r+0x1e>
 80149dc:	6023      	str	r3, [r4, #0]
 80149de:	bd38      	pop	{r3, r4, r5, pc}
 80149e0:	20000b8c 	.word	0x20000b8c

080149e4 <__errno>:
 80149e4:	4b01      	ldr	r3, [pc, #4]	@ (80149ec <__errno+0x8>)
 80149e6:	6818      	ldr	r0, [r3, #0]
 80149e8:	4770      	bx	lr
 80149ea:	bf00      	nop
 80149ec:	20000090 	.word	0x20000090

080149f0 <__libc_init_array>:
 80149f0:	b570      	push	{r4, r5, r6, lr}
 80149f2:	4d0d      	ldr	r5, [pc, #52]	@ (8014a28 <__libc_init_array+0x38>)
 80149f4:	4c0d      	ldr	r4, [pc, #52]	@ (8014a2c <__libc_init_array+0x3c>)
 80149f6:	1b64      	subs	r4, r4, r5
 80149f8:	10a4      	asrs	r4, r4, #2
 80149fa:	2600      	movs	r6, #0
 80149fc:	42a6      	cmp	r6, r4
 80149fe:	d109      	bne.n	8014a14 <__libc_init_array+0x24>
 8014a00:	4d0b      	ldr	r5, [pc, #44]	@ (8014a30 <__libc_init_array+0x40>)
 8014a02:	4c0c      	ldr	r4, [pc, #48]	@ (8014a34 <__libc_init_array+0x44>)
 8014a04:	f003 fa1a 	bl	8017e3c <_init>
 8014a08:	1b64      	subs	r4, r4, r5
 8014a0a:	10a4      	asrs	r4, r4, #2
 8014a0c:	2600      	movs	r6, #0
 8014a0e:	42a6      	cmp	r6, r4
 8014a10:	d105      	bne.n	8014a1e <__libc_init_array+0x2e>
 8014a12:	bd70      	pop	{r4, r5, r6, pc}
 8014a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a18:	4798      	blx	r3
 8014a1a:	3601      	adds	r6, #1
 8014a1c:	e7ee      	b.n	80149fc <__libc_init_array+0xc>
 8014a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a22:	4798      	blx	r3
 8014a24:	3601      	adds	r6, #1
 8014a26:	e7f2      	b.n	8014a0e <__libc_init_array+0x1e>
 8014a28:	08019414 	.word	0x08019414
 8014a2c:	08019414 	.word	0x08019414
 8014a30:	08019414 	.word	0x08019414
 8014a34:	08019428 	.word	0x08019428

08014a38 <__retarget_lock_init_recursive>:
 8014a38:	4770      	bx	lr

08014a3a <__retarget_lock_acquire_recursive>:
 8014a3a:	4770      	bx	lr

08014a3c <__retarget_lock_release_recursive>:
 8014a3c:	4770      	bx	lr

08014a3e <memcpy>:
 8014a3e:	440a      	add	r2, r1
 8014a40:	4291      	cmp	r1, r2
 8014a42:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a46:	d100      	bne.n	8014a4a <memcpy+0xc>
 8014a48:	4770      	bx	lr
 8014a4a:	b510      	push	{r4, lr}
 8014a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a54:	4291      	cmp	r1, r2
 8014a56:	d1f9      	bne.n	8014a4c <memcpy+0xe>
 8014a58:	bd10      	pop	{r4, pc}
	...

08014a5c <nanf>:
 8014a5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014a64 <nanf+0x8>
 8014a60:	4770      	bx	lr
 8014a62:	bf00      	nop
 8014a64:	7fc00000 	.word	0x7fc00000

08014a68 <quorem>:
 8014a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a6c:	6903      	ldr	r3, [r0, #16]
 8014a6e:	690c      	ldr	r4, [r1, #16]
 8014a70:	42a3      	cmp	r3, r4
 8014a72:	4607      	mov	r7, r0
 8014a74:	db7e      	blt.n	8014b74 <quorem+0x10c>
 8014a76:	3c01      	subs	r4, #1
 8014a78:	f101 0814 	add.w	r8, r1, #20
 8014a7c:	00a3      	lsls	r3, r4, #2
 8014a7e:	f100 0514 	add.w	r5, r0, #20
 8014a82:	9300      	str	r3, [sp, #0]
 8014a84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014a88:	9301      	str	r3, [sp, #4]
 8014a8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014a8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014a92:	3301      	adds	r3, #1
 8014a94:	429a      	cmp	r2, r3
 8014a96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014a9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8014a9e:	d32e      	bcc.n	8014afe <quorem+0x96>
 8014aa0:	f04f 0a00 	mov.w	sl, #0
 8014aa4:	46c4      	mov	ip, r8
 8014aa6:	46ae      	mov	lr, r5
 8014aa8:	46d3      	mov	fp, sl
 8014aaa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014aae:	b298      	uxth	r0, r3
 8014ab0:	fb06 a000 	mla	r0, r6, r0, sl
 8014ab4:	0c02      	lsrs	r2, r0, #16
 8014ab6:	0c1b      	lsrs	r3, r3, #16
 8014ab8:	fb06 2303 	mla	r3, r6, r3, r2
 8014abc:	f8de 2000 	ldr.w	r2, [lr]
 8014ac0:	b280      	uxth	r0, r0
 8014ac2:	b292      	uxth	r2, r2
 8014ac4:	1a12      	subs	r2, r2, r0
 8014ac6:	445a      	add	r2, fp
 8014ac8:	f8de 0000 	ldr.w	r0, [lr]
 8014acc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014ad0:	b29b      	uxth	r3, r3
 8014ad2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014ad6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014ada:	b292      	uxth	r2, r2
 8014adc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014ae0:	45e1      	cmp	r9, ip
 8014ae2:	f84e 2b04 	str.w	r2, [lr], #4
 8014ae6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014aea:	d2de      	bcs.n	8014aaa <quorem+0x42>
 8014aec:	9b00      	ldr	r3, [sp, #0]
 8014aee:	58eb      	ldr	r3, [r5, r3]
 8014af0:	b92b      	cbnz	r3, 8014afe <quorem+0x96>
 8014af2:	9b01      	ldr	r3, [sp, #4]
 8014af4:	3b04      	subs	r3, #4
 8014af6:	429d      	cmp	r5, r3
 8014af8:	461a      	mov	r2, r3
 8014afa:	d32f      	bcc.n	8014b5c <quorem+0xf4>
 8014afc:	613c      	str	r4, [r7, #16]
 8014afe:	4638      	mov	r0, r7
 8014b00:	f001 f90c 	bl	8015d1c <__mcmp>
 8014b04:	2800      	cmp	r0, #0
 8014b06:	db25      	blt.n	8014b54 <quorem+0xec>
 8014b08:	4629      	mov	r1, r5
 8014b0a:	2000      	movs	r0, #0
 8014b0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014b10:	f8d1 c000 	ldr.w	ip, [r1]
 8014b14:	fa1f fe82 	uxth.w	lr, r2
 8014b18:	fa1f f38c 	uxth.w	r3, ip
 8014b1c:	eba3 030e 	sub.w	r3, r3, lr
 8014b20:	4403      	add	r3, r0
 8014b22:	0c12      	lsrs	r2, r2, #16
 8014b24:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014b28:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014b2c:	b29b      	uxth	r3, r3
 8014b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b32:	45c1      	cmp	r9, r8
 8014b34:	f841 3b04 	str.w	r3, [r1], #4
 8014b38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014b3c:	d2e6      	bcs.n	8014b0c <quorem+0xa4>
 8014b3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b46:	b922      	cbnz	r2, 8014b52 <quorem+0xea>
 8014b48:	3b04      	subs	r3, #4
 8014b4a:	429d      	cmp	r5, r3
 8014b4c:	461a      	mov	r2, r3
 8014b4e:	d30b      	bcc.n	8014b68 <quorem+0x100>
 8014b50:	613c      	str	r4, [r7, #16]
 8014b52:	3601      	adds	r6, #1
 8014b54:	4630      	mov	r0, r6
 8014b56:	b003      	add	sp, #12
 8014b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5c:	6812      	ldr	r2, [r2, #0]
 8014b5e:	3b04      	subs	r3, #4
 8014b60:	2a00      	cmp	r2, #0
 8014b62:	d1cb      	bne.n	8014afc <quorem+0x94>
 8014b64:	3c01      	subs	r4, #1
 8014b66:	e7c6      	b.n	8014af6 <quorem+0x8e>
 8014b68:	6812      	ldr	r2, [r2, #0]
 8014b6a:	3b04      	subs	r3, #4
 8014b6c:	2a00      	cmp	r2, #0
 8014b6e:	d1ef      	bne.n	8014b50 <quorem+0xe8>
 8014b70:	3c01      	subs	r4, #1
 8014b72:	e7ea      	b.n	8014b4a <quorem+0xe2>
 8014b74:	2000      	movs	r0, #0
 8014b76:	e7ee      	b.n	8014b56 <quorem+0xee>

08014b78 <_dtoa_r>:
 8014b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b7c:	69c7      	ldr	r7, [r0, #28]
 8014b7e:	b099      	sub	sp, #100	@ 0x64
 8014b80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014b84:	ec55 4b10 	vmov	r4, r5, d0
 8014b88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014b8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8014b8c:	4683      	mov	fp, r0
 8014b8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8014b90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014b92:	b97f      	cbnz	r7, 8014bb4 <_dtoa_r+0x3c>
 8014b94:	2010      	movs	r0, #16
 8014b96:	f7fe fde1 	bl	801375c <malloc>
 8014b9a:	4602      	mov	r2, r0
 8014b9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8014ba0:	b920      	cbnz	r0, 8014bac <_dtoa_r+0x34>
 8014ba2:	4ba7      	ldr	r3, [pc, #668]	@ (8014e40 <_dtoa_r+0x2c8>)
 8014ba4:	21ef      	movs	r1, #239	@ 0xef
 8014ba6:	48a7      	ldr	r0, [pc, #668]	@ (8014e44 <_dtoa_r+0x2cc>)
 8014ba8:	f7fe fda8 	bl	80136fc <__assert_func>
 8014bac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014bb0:	6007      	str	r7, [r0, #0]
 8014bb2:	60c7      	str	r7, [r0, #12]
 8014bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014bb8:	6819      	ldr	r1, [r3, #0]
 8014bba:	b159      	cbz	r1, 8014bd4 <_dtoa_r+0x5c>
 8014bbc:	685a      	ldr	r2, [r3, #4]
 8014bbe:	604a      	str	r2, [r1, #4]
 8014bc0:	2301      	movs	r3, #1
 8014bc2:	4093      	lsls	r3, r2
 8014bc4:	608b      	str	r3, [r1, #8]
 8014bc6:	4658      	mov	r0, fp
 8014bc8:	f000 fe24 	bl	8015814 <_Bfree>
 8014bcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	601a      	str	r2, [r3, #0]
 8014bd4:	1e2b      	subs	r3, r5, #0
 8014bd6:	bfb9      	ittee	lt
 8014bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014bdc:	9303      	strlt	r3, [sp, #12]
 8014bde:	2300      	movge	r3, #0
 8014be0:	6033      	strge	r3, [r6, #0]
 8014be2:	9f03      	ldr	r7, [sp, #12]
 8014be4:	4b98      	ldr	r3, [pc, #608]	@ (8014e48 <_dtoa_r+0x2d0>)
 8014be6:	bfbc      	itt	lt
 8014be8:	2201      	movlt	r2, #1
 8014bea:	6032      	strlt	r2, [r6, #0]
 8014bec:	43bb      	bics	r3, r7
 8014bee:	d112      	bne.n	8014c16 <_dtoa_r+0x9e>
 8014bf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014bf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014bf6:	6013      	str	r3, [r2, #0]
 8014bf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014bfc:	4323      	orrs	r3, r4
 8014bfe:	f000 854d 	beq.w	801569c <_dtoa_r+0xb24>
 8014c02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014c04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014e5c <_dtoa_r+0x2e4>
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	f000 854f 	beq.w	80156ac <_dtoa_r+0xb34>
 8014c0e:	f10a 0303 	add.w	r3, sl, #3
 8014c12:	f000 bd49 	b.w	80156a8 <_dtoa_r+0xb30>
 8014c16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	ec51 0b17 	vmov	r0, r1, d7
 8014c20:	2300      	movs	r3, #0
 8014c22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014c26:	f7eb ff77 	bl	8000b18 <__aeabi_dcmpeq>
 8014c2a:	4680      	mov	r8, r0
 8014c2c:	b158      	cbz	r0, 8014c46 <_dtoa_r+0xce>
 8014c2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014c30:	2301      	movs	r3, #1
 8014c32:	6013      	str	r3, [r2, #0]
 8014c34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014c36:	b113      	cbz	r3, 8014c3e <_dtoa_r+0xc6>
 8014c38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014c3a:	4b84      	ldr	r3, [pc, #528]	@ (8014e4c <_dtoa_r+0x2d4>)
 8014c3c:	6013      	str	r3, [r2, #0]
 8014c3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014e60 <_dtoa_r+0x2e8>
 8014c42:	f000 bd33 	b.w	80156ac <_dtoa_r+0xb34>
 8014c46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014c4a:	aa16      	add	r2, sp, #88	@ 0x58
 8014c4c:	a917      	add	r1, sp, #92	@ 0x5c
 8014c4e:	4658      	mov	r0, fp
 8014c50:	f001 f984 	bl	8015f5c <__d2b>
 8014c54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014c58:	4681      	mov	r9, r0
 8014c5a:	2e00      	cmp	r6, #0
 8014c5c:	d077      	beq.n	8014d4e <_dtoa_r+0x1d6>
 8014c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014c6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014c70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014c74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014c78:	4619      	mov	r1, r3
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	4b74      	ldr	r3, [pc, #464]	@ (8014e50 <_dtoa_r+0x2d8>)
 8014c7e:	f7eb fb2b 	bl	80002d8 <__aeabi_dsub>
 8014c82:	a369      	add	r3, pc, #420	@ (adr r3, 8014e28 <_dtoa_r+0x2b0>)
 8014c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c88:	f7eb fcde 	bl	8000648 <__aeabi_dmul>
 8014c8c:	a368      	add	r3, pc, #416	@ (adr r3, 8014e30 <_dtoa_r+0x2b8>)
 8014c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c92:	f7eb fb23 	bl	80002dc <__adddf3>
 8014c96:	4604      	mov	r4, r0
 8014c98:	4630      	mov	r0, r6
 8014c9a:	460d      	mov	r5, r1
 8014c9c:	f7eb fc6a 	bl	8000574 <__aeabi_i2d>
 8014ca0:	a365      	add	r3, pc, #404	@ (adr r3, 8014e38 <_dtoa_r+0x2c0>)
 8014ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca6:	f7eb fccf 	bl	8000648 <__aeabi_dmul>
 8014caa:	4602      	mov	r2, r0
 8014cac:	460b      	mov	r3, r1
 8014cae:	4620      	mov	r0, r4
 8014cb0:	4629      	mov	r1, r5
 8014cb2:	f7eb fb13 	bl	80002dc <__adddf3>
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	460d      	mov	r5, r1
 8014cba:	f7eb ff75 	bl	8000ba8 <__aeabi_d2iz>
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	4607      	mov	r7, r0
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	4629      	mov	r1, r5
 8014cc8:	f7eb ff30 	bl	8000b2c <__aeabi_dcmplt>
 8014ccc:	b140      	cbz	r0, 8014ce0 <_dtoa_r+0x168>
 8014cce:	4638      	mov	r0, r7
 8014cd0:	f7eb fc50 	bl	8000574 <__aeabi_i2d>
 8014cd4:	4622      	mov	r2, r4
 8014cd6:	462b      	mov	r3, r5
 8014cd8:	f7eb ff1e 	bl	8000b18 <__aeabi_dcmpeq>
 8014cdc:	b900      	cbnz	r0, 8014ce0 <_dtoa_r+0x168>
 8014cde:	3f01      	subs	r7, #1
 8014ce0:	2f16      	cmp	r7, #22
 8014ce2:	d851      	bhi.n	8014d88 <_dtoa_r+0x210>
 8014ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8014e54 <_dtoa_r+0x2dc>)
 8014ce6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014cf2:	f7eb ff1b 	bl	8000b2c <__aeabi_dcmplt>
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	d048      	beq.n	8014d8c <_dtoa_r+0x214>
 8014cfa:	3f01      	subs	r7, #1
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8014d00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014d02:	1b9b      	subs	r3, r3, r6
 8014d04:	1e5a      	subs	r2, r3, #1
 8014d06:	bf44      	itt	mi
 8014d08:	f1c3 0801 	rsbmi	r8, r3, #1
 8014d0c:	2300      	movmi	r3, #0
 8014d0e:	9208      	str	r2, [sp, #32]
 8014d10:	bf54      	ite	pl
 8014d12:	f04f 0800 	movpl.w	r8, #0
 8014d16:	9308      	strmi	r3, [sp, #32]
 8014d18:	2f00      	cmp	r7, #0
 8014d1a:	db39      	blt.n	8014d90 <_dtoa_r+0x218>
 8014d1c:	9b08      	ldr	r3, [sp, #32]
 8014d1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014d20:	443b      	add	r3, r7
 8014d22:	9308      	str	r3, [sp, #32]
 8014d24:	2300      	movs	r3, #0
 8014d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d2a:	2b09      	cmp	r3, #9
 8014d2c:	d864      	bhi.n	8014df8 <_dtoa_r+0x280>
 8014d2e:	2b05      	cmp	r3, #5
 8014d30:	bfc4      	itt	gt
 8014d32:	3b04      	subgt	r3, #4
 8014d34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d38:	f1a3 0302 	sub.w	r3, r3, #2
 8014d3c:	bfcc      	ite	gt
 8014d3e:	2400      	movgt	r4, #0
 8014d40:	2401      	movle	r4, #1
 8014d42:	2b03      	cmp	r3, #3
 8014d44:	d863      	bhi.n	8014e0e <_dtoa_r+0x296>
 8014d46:	e8df f003 	tbb	[pc, r3]
 8014d4a:	372a      	.short	0x372a
 8014d4c:	5535      	.short	0x5535
 8014d4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014d52:	441e      	add	r6, r3
 8014d54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014d58:	2b20      	cmp	r3, #32
 8014d5a:	bfc1      	itttt	gt
 8014d5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014d60:	409f      	lslgt	r7, r3
 8014d62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014d66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014d6a:	bfd6      	itet	le
 8014d6c:	f1c3 0320 	rsble	r3, r3, #32
 8014d70:	ea47 0003 	orrgt.w	r0, r7, r3
 8014d74:	fa04 f003 	lslle.w	r0, r4, r3
 8014d78:	f7eb fbec 	bl	8000554 <__aeabi_ui2d>
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014d82:	3e01      	subs	r6, #1
 8014d84:	9214      	str	r2, [sp, #80]	@ 0x50
 8014d86:	e777      	b.n	8014c78 <_dtoa_r+0x100>
 8014d88:	2301      	movs	r3, #1
 8014d8a:	e7b8      	b.n	8014cfe <_dtoa_r+0x186>
 8014d8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8014d8e:	e7b7      	b.n	8014d00 <_dtoa_r+0x188>
 8014d90:	427b      	negs	r3, r7
 8014d92:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d94:	2300      	movs	r3, #0
 8014d96:	eba8 0807 	sub.w	r8, r8, r7
 8014d9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014d9c:	e7c4      	b.n	8014d28 <_dtoa_r+0x1b0>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	dc35      	bgt.n	8014e14 <_dtoa_r+0x29c>
 8014da8:	2301      	movs	r3, #1
 8014daa:	9300      	str	r3, [sp, #0]
 8014dac:	9307      	str	r3, [sp, #28]
 8014dae:	461a      	mov	r2, r3
 8014db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8014db2:	e00b      	b.n	8014dcc <_dtoa_r+0x254>
 8014db4:	2301      	movs	r3, #1
 8014db6:	e7f3      	b.n	8014da0 <_dtoa_r+0x228>
 8014db8:	2300      	movs	r3, #0
 8014dba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014dbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014dbe:	18fb      	adds	r3, r7, r3
 8014dc0:	9300      	str	r3, [sp, #0]
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	9307      	str	r3, [sp, #28]
 8014dc8:	bfb8      	it	lt
 8014dca:	2301      	movlt	r3, #1
 8014dcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014dd0:	2100      	movs	r1, #0
 8014dd2:	2204      	movs	r2, #4
 8014dd4:	f102 0514 	add.w	r5, r2, #20
 8014dd8:	429d      	cmp	r5, r3
 8014dda:	d91f      	bls.n	8014e1c <_dtoa_r+0x2a4>
 8014ddc:	6041      	str	r1, [r0, #4]
 8014dde:	4658      	mov	r0, fp
 8014de0:	f000 fcd8 	bl	8015794 <_Balloc>
 8014de4:	4682      	mov	sl, r0
 8014de6:	2800      	cmp	r0, #0
 8014de8:	d13c      	bne.n	8014e64 <_dtoa_r+0x2ec>
 8014dea:	4b1b      	ldr	r3, [pc, #108]	@ (8014e58 <_dtoa_r+0x2e0>)
 8014dec:	4602      	mov	r2, r0
 8014dee:	f240 11af 	movw	r1, #431	@ 0x1af
 8014df2:	e6d8      	b.n	8014ba6 <_dtoa_r+0x2e>
 8014df4:	2301      	movs	r3, #1
 8014df6:	e7e0      	b.n	8014dba <_dtoa_r+0x242>
 8014df8:	2401      	movs	r4, #1
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014e00:	f04f 33ff 	mov.w	r3, #4294967295
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	9307      	str	r3, [sp, #28]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	2312      	movs	r3, #18
 8014e0c:	e7d0      	b.n	8014db0 <_dtoa_r+0x238>
 8014e0e:	2301      	movs	r3, #1
 8014e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e12:	e7f5      	b.n	8014e00 <_dtoa_r+0x288>
 8014e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e16:	9300      	str	r3, [sp, #0]
 8014e18:	9307      	str	r3, [sp, #28]
 8014e1a:	e7d7      	b.n	8014dcc <_dtoa_r+0x254>
 8014e1c:	3101      	adds	r1, #1
 8014e1e:	0052      	lsls	r2, r2, #1
 8014e20:	e7d8      	b.n	8014dd4 <_dtoa_r+0x25c>
 8014e22:	bf00      	nop
 8014e24:	f3af 8000 	nop.w
 8014e28:	636f4361 	.word	0x636f4361
 8014e2c:	3fd287a7 	.word	0x3fd287a7
 8014e30:	8b60c8b3 	.word	0x8b60c8b3
 8014e34:	3fc68a28 	.word	0x3fc68a28
 8014e38:	509f79fb 	.word	0x509f79fb
 8014e3c:	3fd34413 	.word	0x3fd34413
 8014e40:	08019062 	.word	0x08019062
 8014e44:	08019079 	.word	0x08019079
 8014e48:	7ff00000 	.word	0x7ff00000
 8014e4c:	0801902d 	.word	0x0801902d
 8014e50:	3ff80000 	.word	0x3ff80000
 8014e54:	08019170 	.word	0x08019170
 8014e58:	080190d1 	.word	0x080190d1
 8014e5c:	0801905e 	.word	0x0801905e
 8014e60:	0801902c 	.word	0x0801902c
 8014e64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014e68:	6018      	str	r0, [r3, #0]
 8014e6a:	9b07      	ldr	r3, [sp, #28]
 8014e6c:	2b0e      	cmp	r3, #14
 8014e6e:	f200 80a4 	bhi.w	8014fba <_dtoa_r+0x442>
 8014e72:	2c00      	cmp	r4, #0
 8014e74:	f000 80a1 	beq.w	8014fba <_dtoa_r+0x442>
 8014e78:	2f00      	cmp	r7, #0
 8014e7a:	dd33      	ble.n	8014ee4 <_dtoa_r+0x36c>
 8014e7c:	4bad      	ldr	r3, [pc, #692]	@ (8015134 <_dtoa_r+0x5bc>)
 8014e7e:	f007 020f 	and.w	r2, r7, #15
 8014e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e86:	ed93 7b00 	vldr	d7, [r3]
 8014e8a:	05f8      	lsls	r0, r7, #23
 8014e8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014e94:	d516      	bpl.n	8014ec4 <_dtoa_r+0x34c>
 8014e96:	4ba8      	ldr	r3, [pc, #672]	@ (8015138 <_dtoa_r+0x5c0>)
 8014e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ea0:	f7eb fcfc 	bl	800089c <__aeabi_ddiv>
 8014ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ea8:	f004 040f 	and.w	r4, r4, #15
 8014eac:	2603      	movs	r6, #3
 8014eae:	4da2      	ldr	r5, [pc, #648]	@ (8015138 <_dtoa_r+0x5c0>)
 8014eb0:	b954      	cbnz	r4, 8014ec8 <_dtoa_r+0x350>
 8014eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014eba:	f7eb fcef 	bl	800089c <__aeabi_ddiv>
 8014ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ec2:	e028      	b.n	8014f16 <_dtoa_r+0x39e>
 8014ec4:	2602      	movs	r6, #2
 8014ec6:	e7f2      	b.n	8014eae <_dtoa_r+0x336>
 8014ec8:	07e1      	lsls	r1, r4, #31
 8014eca:	d508      	bpl.n	8014ede <_dtoa_r+0x366>
 8014ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014ed4:	f7eb fbb8 	bl	8000648 <__aeabi_dmul>
 8014ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014edc:	3601      	adds	r6, #1
 8014ede:	1064      	asrs	r4, r4, #1
 8014ee0:	3508      	adds	r5, #8
 8014ee2:	e7e5      	b.n	8014eb0 <_dtoa_r+0x338>
 8014ee4:	f000 80d2 	beq.w	801508c <_dtoa_r+0x514>
 8014ee8:	427c      	negs	r4, r7
 8014eea:	4b92      	ldr	r3, [pc, #584]	@ (8015134 <_dtoa_r+0x5bc>)
 8014eec:	4d92      	ldr	r5, [pc, #584]	@ (8015138 <_dtoa_r+0x5c0>)
 8014eee:	f004 020f 	and.w	r2, r4, #15
 8014ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014efa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014efe:	f7eb fba3 	bl	8000648 <__aeabi_dmul>
 8014f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f06:	1124      	asrs	r4, r4, #4
 8014f08:	2300      	movs	r3, #0
 8014f0a:	2602      	movs	r6, #2
 8014f0c:	2c00      	cmp	r4, #0
 8014f0e:	f040 80b2 	bne.w	8015076 <_dtoa_r+0x4fe>
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d1d3      	bne.n	8014ebe <_dtoa_r+0x346>
 8014f16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014f18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	f000 80b7 	beq.w	8015090 <_dtoa_r+0x518>
 8014f22:	4b86      	ldr	r3, [pc, #536]	@ (801513c <_dtoa_r+0x5c4>)
 8014f24:	2200      	movs	r2, #0
 8014f26:	4620      	mov	r0, r4
 8014f28:	4629      	mov	r1, r5
 8014f2a:	f7eb fdff 	bl	8000b2c <__aeabi_dcmplt>
 8014f2e:	2800      	cmp	r0, #0
 8014f30:	f000 80ae 	beq.w	8015090 <_dtoa_r+0x518>
 8014f34:	9b07      	ldr	r3, [sp, #28]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	f000 80aa 	beq.w	8015090 <_dtoa_r+0x518>
 8014f3c:	9b00      	ldr	r3, [sp, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	dd37      	ble.n	8014fb2 <_dtoa_r+0x43a>
 8014f42:	1e7b      	subs	r3, r7, #1
 8014f44:	9304      	str	r3, [sp, #16]
 8014f46:	4620      	mov	r0, r4
 8014f48:	4b7d      	ldr	r3, [pc, #500]	@ (8015140 <_dtoa_r+0x5c8>)
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	4629      	mov	r1, r5
 8014f4e:	f7eb fb7b 	bl	8000648 <__aeabi_dmul>
 8014f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f56:	9c00      	ldr	r4, [sp, #0]
 8014f58:	3601      	adds	r6, #1
 8014f5a:	4630      	mov	r0, r6
 8014f5c:	f7eb fb0a 	bl	8000574 <__aeabi_i2d>
 8014f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014f64:	f7eb fb70 	bl	8000648 <__aeabi_dmul>
 8014f68:	4b76      	ldr	r3, [pc, #472]	@ (8015144 <_dtoa_r+0x5cc>)
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	f7eb f9b6 	bl	80002dc <__adddf3>
 8014f70:	4605      	mov	r5, r0
 8014f72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014f76:	2c00      	cmp	r4, #0
 8014f78:	f040 808d 	bne.w	8015096 <_dtoa_r+0x51e>
 8014f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f80:	4b71      	ldr	r3, [pc, #452]	@ (8015148 <_dtoa_r+0x5d0>)
 8014f82:	2200      	movs	r2, #0
 8014f84:	f7eb f9a8 	bl	80002d8 <__aeabi_dsub>
 8014f88:	4602      	mov	r2, r0
 8014f8a:	460b      	mov	r3, r1
 8014f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014f90:	462a      	mov	r2, r5
 8014f92:	4633      	mov	r3, r6
 8014f94:	f7eb fde8 	bl	8000b68 <__aeabi_dcmpgt>
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	f040 828b 	bne.w	80154b4 <_dtoa_r+0x93c>
 8014f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fa2:	462a      	mov	r2, r5
 8014fa4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014fa8:	f7eb fdc0 	bl	8000b2c <__aeabi_dcmplt>
 8014fac:	2800      	cmp	r0, #0
 8014fae:	f040 8128 	bne.w	8015202 <_dtoa_r+0x68a>
 8014fb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8014fb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014fba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	f2c0 815a 	blt.w	8015276 <_dtoa_r+0x6fe>
 8014fc2:	2f0e      	cmp	r7, #14
 8014fc4:	f300 8157 	bgt.w	8015276 <_dtoa_r+0x6fe>
 8014fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8015134 <_dtoa_r+0x5bc>)
 8014fca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014fce:	ed93 7b00 	vldr	d7, [r3]
 8014fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	ed8d 7b00 	vstr	d7, [sp]
 8014fda:	da03      	bge.n	8014fe4 <_dtoa_r+0x46c>
 8014fdc:	9b07      	ldr	r3, [sp, #28]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	f340 8101 	ble.w	80151e6 <_dtoa_r+0x66e>
 8014fe4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014fe8:	4656      	mov	r6, sl
 8014fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fee:	4620      	mov	r0, r4
 8014ff0:	4629      	mov	r1, r5
 8014ff2:	f7eb fc53 	bl	800089c <__aeabi_ddiv>
 8014ff6:	f7eb fdd7 	bl	8000ba8 <__aeabi_d2iz>
 8014ffa:	4680      	mov	r8, r0
 8014ffc:	f7eb faba 	bl	8000574 <__aeabi_i2d>
 8015000:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015004:	f7eb fb20 	bl	8000648 <__aeabi_dmul>
 8015008:	4602      	mov	r2, r0
 801500a:	460b      	mov	r3, r1
 801500c:	4620      	mov	r0, r4
 801500e:	4629      	mov	r1, r5
 8015010:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015014:	f7eb f960 	bl	80002d8 <__aeabi_dsub>
 8015018:	f806 4b01 	strb.w	r4, [r6], #1
 801501c:	9d07      	ldr	r5, [sp, #28]
 801501e:	eba6 040a 	sub.w	r4, r6, sl
 8015022:	42a5      	cmp	r5, r4
 8015024:	4602      	mov	r2, r0
 8015026:	460b      	mov	r3, r1
 8015028:	f040 8117 	bne.w	801525a <_dtoa_r+0x6e2>
 801502c:	f7eb f956 	bl	80002dc <__adddf3>
 8015030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015034:	4604      	mov	r4, r0
 8015036:	460d      	mov	r5, r1
 8015038:	f7eb fd96 	bl	8000b68 <__aeabi_dcmpgt>
 801503c:	2800      	cmp	r0, #0
 801503e:	f040 80f9 	bne.w	8015234 <_dtoa_r+0x6bc>
 8015042:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015046:	4620      	mov	r0, r4
 8015048:	4629      	mov	r1, r5
 801504a:	f7eb fd65 	bl	8000b18 <__aeabi_dcmpeq>
 801504e:	b118      	cbz	r0, 8015058 <_dtoa_r+0x4e0>
 8015050:	f018 0f01 	tst.w	r8, #1
 8015054:	f040 80ee 	bne.w	8015234 <_dtoa_r+0x6bc>
 8015058:	4649      	mov	r1, r9
 801505a:	4658      	mov	r0, fp
 801505c:	f000 fbda 	bl	8015814 <_Bfree>
 8015060:	2300      	movs	r3, #0
 8015062:	7033      	strb	r3, [r6, #0]
 8015064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015066:	3701      	adds	r7, #1
 8015068:	601f      	str	r7, [r3, #0]
 801506a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801506c:	2b00      	cmp	r3, #0
 801506e:	f000 831d 	beq.w	80156ac <_dtoa_r+0xb34>
 8015072:	601e      	str	r6, [r3, #0]
 8015074:	e31a      	b.n	80156ac <_dtoa_r+0xb34>
 8015076:	07e2      	lsls	r2, r4, #31
 8015078:	d505      	bpl.n	8015086 <_dtoa_r+0x50e>
 801507a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801507e:	f7eb fae3 	bl	8000648 <__aeabi_dmul>
 8015082:	3601      	adds	r6, #1
 8015084:	2301      	movs	r3, #1
 8015086:	1064      	asrs	r4, r4, #1
 8015088:	3508      	adds	r5, #8
 801508a:	e73f      	b.n	8014f0c <_dtoa_r+0x394>
 801508c:	2602      	movs	r6, #2
 801508e:	e742      	b.n	8014f16 <_dtoa_r+0x39e>
 8015090:	9c07      	ldr	r4, [sp, #28]
 8015092:	9704      	str	r7, [sp, #16]
 8015094:	e761      	b.n	8014f5a <_dtoa_r+0x3e2>
 8015096:	4b27      	ldr	r3, [pc, #156]	@ (8015134 <_dtoa_r+0x5bc>)
 8015098:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801509a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801509e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80150a2:	4454      	add	r4, sl
 80150a4:	2900      	cmp	r1, #0
 80150a6:	d053      	beq.n	8015150 <_dtoa_r+0x5d8>
 80150a8:	4928      	ldr	r1, [pc, #160]	@ (801514c <_dtoa_r+0x5d4>)
 80150aa:	2000      	movs	r0, #0
 80150ac:	f7eb fbf6 	bl	800089c <__aeabi_ddiv>
 80150b0:	4633      	mov	r3, r6
 80150b2:	462a      	mov	r2, r5
 80150b4:	f7eb f910 	bl	80002d8 <__aeabi_dsub>
 80150b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80150bc:	4656      	mov	r6, sl
 80150be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150c2:	f7eb fd71 	bl	8000ba8 <__aeabi_d2iz>
 80150c6:	4605      	mov	r5, r0
 80150c8:	f7eb fa54 	bl	8000574 <__aeabi_i2d>
 80150cc:	4602      	mov	r2, r0
 80150ce:	460b      	mov	r3, r1
 80150d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150d4:	f7eb f900 	bl	80002d8 <__aeabi_dsub>
 80150d8:	3530      	adds	r5, #48	@ 0x30
 80150da:	4602      	mov	r2, r0
 80150dc:	460b      	mov	r3, r1
 80150de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80150e2:	f806 5b01 	strb.w	r5, [r6], #1
 80150e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80150ea:	f7eb fd1f 	bl	8000b2c <__aeabi_dcmplt>
 80150ee:	2800      	cmp	r0, #0
 80150f0:	d171      	bne.n	80151d6 <_dtoa_r+0x65e>
 80150f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150f6:	4911      	ldr	r1, [pc, #68]	@ (801513c <_dtoa_r+0x5c4>)
 80150f8:	2000      	movs	r0, #0
 80150fa:	f7eb f8ed 	bl	80002d8 <__aeabi_dsub>
 80150fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015102:	f7eb fd13 	bl	8000b2c <__aeabi_dcmplt>
 8015106:	2800      	cmp	r0, #0
 8015108:	f040 8095 	bne.w	8015236 <_dtoa_r+0x6be>
 801510c:	42a6      	cmp	r6, r4
 801510e:	f43f af50 	beq.w	8014fb2 <_dtoa_r+0x43a>
 8015112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015116:	4b0a      	ldr	r3, [pc, #40]	@ (8015140 <_dtoa_r+0x5c8>)
 8015118:	2200      	movs	r2, #0
 801511a:	f7eb fa95 	bl	8000648 <__aeabi_dmul>
 801511e:	4b08      	ldr	r3, [pc, #32]	@ (8015140 <_dtoa_r+0x5c8>)
 8015120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015124:	2200      	movs	r2, #0
 8015126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801512a:	f7eb fa8d 	bl	8000648 <__aeabi_dmul>
 801512e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015132:	e7c4      	b.n	80150be <_dtoa_r+0x546>
 8015134:	08019170 	.word	0x08019170
 8015138:	08019148 	.word	0x08019148
 801513c:	3ff00000 	.word	0x3ff00000
 8015140:	40240000 	.word	0x40240000
 8015144:	401c0000 	.word	0x401c0000
 8015148:	40140000 	.word	0x40140000
 801514c:	3fe00000 	.word	0x3fe00000
 8015150:	4631      	mov	r1, r6
 8015152:	4628      	mov	r0, r5
 8015154:	f7eb fa78 	bl	8000648 <__aeabi_dmul>
 8015158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801515c:	9415      	str	r4, [sp, #84]	@ 0x54
 801515e:	4656      	mov	r6, sl
 8015160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015164:	f7eb fd20 	bl	8000ba8 <__aeabi_d2iz>
 8015168:	4605      	mov	r5, r0
 801516a:	f7eb fa03 	bl	8000574 <__aeabi_i2d>
 801516e:	4602      	mov	r2, r0
 8015170:	460b      	mov	r3, r1
 8015172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015176:	f7eb f8af 	bl	80002d8 <__aeabi_dsub>
 801517a:	3530      	adds	r5, #48	@ 0x30
 801517c:	f806 5b01 	strb.w	r5, [r6], #1
 8015180:	4602      	mov	r2, r0
 8015182:	460b      	mov	r3, r1
 8015184:	42a6      	cmp	r6, r4
 8015186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801518a:	f04f 0200 	mov.w	r2, #0
 801518e:	d124      	bne.n	80151da <_dtoa_r+0x662>
 8015190:	4bac      	ldr	r3, [pc, #688]	@ (8015444 <_dtoa_r+0x8cc>)
 8015192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015196:	f7eb f8a1 	bl	80002dc <__adddf3>
 801519a:	4602      	mov	r2, r0
 801519c:	460b      	mov	r3, r1
 801519e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151a2:	f7eb fce1 	bl	8000b68 <__aeabi_dcmpgt>
 80151a6:	2800      	cmp	r0, #0
 80151a8:	d145      	bne.n	8015236 <_dtoa_r+0x6be>
 80151aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80151ae:	49a5      	ldr	r1, [pc, #660]	@ (8015444 <_dtoa_r+0x8cc>)
 80151b0:	2000      	movs	r0, #0
 80151b2:	f7eb f891 	bl	80002d8 <__aeabi_dsub>
 80151b6:	4602      	mov	r2, r0
 80151b8:	460b      	mov	r3, r1
 80151ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151be:	f7eb fcb5 	bl	8000b2c <__aeabi_dcmplt>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	f43f aef5 	beq.w	8014fb2 <_dtoa_r+0x43a>
 80151c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80151ca:	1e73      	subs	r3, r6, #1
 80151cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80151ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80151d2:	2b30      	cmp	r3, #48	@ 0x30
 80151d4:	d0f8      	beq.n	80151c8 <_dtoa_r+0x650>
 80151d6:	9f04      	ldr	r7, [sp, #16]
 80151d8:	e73e      	b.n	8015058 <_dtoa_r+0x4e0>
 80151da:	4b9b      	ldr	r3, [pc, #620]	@ (8015448 <_dtoa_r+0x8d0>)
 80151dc:	f7eb fa34 	bl	8000648 <__aeabi_dmul>
 80151e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151e4:	e7bc      	b.n	8015160 <_dtoa_r+0x5e8>
 80151e6:	d10c      	bne.n	8015202 <_dtoa_r+0x68a>
 80151e8:	4b98      	ldr	r3, [pc, #608]	@ (801544c <_dtoa_r+0x8d4>)
 80151ea:	2200      	movs	r2, #0
 80151ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151f0:	f7eb fa2a 	bl	8000648 <__aeabi_dmul>
 80151f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151f8:	f7eb fcac 	bl	8000b54 <__aeabi_dcmpge>
 80151fc:	2800      	cmp	r0, #0
 80151fe:	f000 8157 	beq.w	80154b0 <_dtoa_r+0x938>
 8015202:	2400      	movs	r4, #0
 8015204:	4625      	mov	r5, r4
 8015206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015208:	43db      	mvns	r3, r3
 801520a:	9304      	str	r3, [sp, #16]
 801520c:	4656      	mov	r6, sl
 801520e:	2700      	movs	r7, #0
 8015210:	4621      	mov	r1, r4
 8015212:	4658      	mov	r0, fp
 8015214:	f000 fafe 	bl	8015814 <_Bfree>
 8015218:	2d00      	cmp	r5, #0
 801521a:	d0dc      	beq.n	80151d6 <_dtoa_r+0x65e>
 801521c:	b12f      	cbz	r7, 801522a <_dtoa_r+0x6b2>
 801521e:	42af      	cmp	r7, r5
 8015220:	d003      	beq.n	801522a <_dtoa_r+0x6b2>
 8015222:	4639      	mov	r1, r7
 8015224:	4658      	mov	r0, fp
 8015226:	f000 faf5 	bl	8015814 <_Bfree>
 801522a:	4629      	mov	r1, r5
 801522c:	4658      	mov	r0, fp
 801522e:	f000 faf1 	bl	8015814 <_Bfree>
 8015232:	e7d0      	b.n	80151d6 <_dtoa_r+0x65e>
 8015234:	9704      	str	r7, [sp, #16]
 8015236:	4633      	mov	r3, r6
 8015238:	461e      	mov	r6, r3
 801523a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801523e:	2a39      	cmp	r2, #57	@ 0x39
 8015240:	d107      	bne.n	8015252 <_dtoa_r+0x6da>
 8015242:	459a      	cmp	sl, r3
 8015244:	d1f8      	bne.n	8015238 <_dtoa_r+0x6c0>
 8015246:	9a04      	ldr	r2, [sp, #16]
 8015248:	3201      	adds	r2, #1
 801524a:	9204      	str	r2, [sp, #16]
 801524c:	2230      	movs	r2, #48	@ 0x30
 801524e:	f88a 2000 	strb.w	r2, [sl]
 8015252:	781a      	ldrb	r2, [r3, #0]
 8015254:	3201      	adds	r2, #1
 8015256:	701a      	strb	r2, [r3, #0]
 8015258:	e7bd      	b.n	80151d6 <_dtoa_r+0x65e>
 801525a:	4b7b      	ldr	r3, [pc, #492]	@ (8015448 <_dtoa_r+0x8d0>)
 801525c:	2200      	movs	r2, #0
 801525e:	f7eb f9f3 	bl	8000648 <__aeabi_dmul>
 8015262:	2200      	movs	r2, #0
 8015264:	2300      	movs	r3, #0
 8015266:	4604      	mov	r4, r0
 8015268:	460d      	mov	r5, r1
 801526a:	f7eb fc55 	bl	8000b18 <__aeabi_dcmpeq>
 801526e:	2800      	cmp	r0, #0
 8015270:	f43f aebb 	beq.w	8014fea <_dtoa_r+0x472>
 8015274:	e6f0      	b.n	8015058 <_dtoa_r+0x4e0>
 8015276:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015278:	2a00      	cmp	r2, #0
 801527a:	f000 80db 	beq.w	8015434 <_dtoa_r+0x8bc>
 801527e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015280:	2a01      	cmp	r2, #1
 8015282:	f300 80bf 	bgt.w	8015404 <_dtoa_r+0x88c>
 8015286:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015288:	2a00      	cmp	r2, #0
 801528a:	f000 80b7 	beq.w	80153fc <_dtoa_r+0x884>
 801528e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015292:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015294:	4646      	mov	r6, r8
 8015296:	9a08      	ldr	r2, [sp, #32]
 8015298:	2101      	movs	r1, #1
 801529a:	441a      	add	r2, r3
 801529c:	4658      	mov	r0, fp
 801529e:	4498      	add	r8, r3
 80152a0:	9208      	str	r2, [sp, #32]
 80152a2:	f000 fbb5 	bl	8015a10 <__i2b>
 80152a6:	4605      	mov	r5, r0
 80152a8:	b15e      	cbz	r6, 80152c2 <_dtoa_r+0x74a>
 80152aa:	9b08      	ldr	r3, [sp, #32]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	dd08      	ble.n	80152c2 <_dtoa_r+0x74a>
 80152b0:	42b3      	cmp	r3, r6
 80152b2:	9a08      	ldr	r2, [sp, #32]
 80152b4:	bfa8      	it	ge
 80152b6:	4633      	movge	r3, r6
 80152b8:	eba8 0803 	sub.w	r8, r8, r3
 80152bc:	1af6      	subs	r6, r6, r3
 80152be:	1ad3      	subs	r3, r2, r3
 80152c0:	9308      	str	r3, [sp, #32]
 80152c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80152c4:	b1f3      	cbz	r3, 8015304 <_dtoa_r+0x78c>
 80152c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	f000 80b7 	beq.w	801543c <_dtoa_r+0x8c4>
 80152ce:	b18c      	cbz	r4, 80152f4 <_dtoa_r+0x77c>
 80152d0:	4629      	mov	r1, r5
 80152d2:	4622      	mov	r2, r4
 80152d4:	4658      	mov	r0, fp
 80152d6:	f000 fc5b 	bl	8015b90 <__pow5mult>
 80152da:	464a      	mov	r2, r9
 80152dc:	4601      	mov	r1, r0
 80152de:	4605      	mov	r5, r0
 80152e0:	4658      	mov	r0, fp
 80152e2:	f000 fbab 	bl	8015a3c <__multiply>
 80152e6:	4649      	mov	r1, r9
 80152e8:	9004      	str	r0, [sp, #16]
 80152ea:	4658      	mov	r0, fp
 80152ec:	f000 fa92 	bl	8015814 <_Bfree>
 80152f0:	9b04      	ldr	r3, [sp, #16]
 80152f2:	4699      	mov	r9, r3
 80152f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80152f6:	1b1a      	subs	r2, r3, r4
 80152f8:	d004      	beq.n	8015304 <_dtoa_r+0x78c>
 80152fa:	4649      	mov	r1, r9
 80152fc:	4658      	mov	r0, fp
 80152fe:	f000 fc47 	bl	8015b90 <__pow5mult>
 8015302:	4681      	mov	r9, r0
 8015304:	2101      	movs	r1, #1
 8015306:	4658      	mov	r0, fp
 8015308:	f000 fb82 	bl	8015a10 <__i2b>
 801530c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801530e:	4604      	mov	r4, r0
 8015310:	2b00      	cmp	r3, #0
 8015312:	f000 81cf 	beq.w	80156b4 <_dtoa_r+0xb3c>
 8015316:	461a      	mov	r2, r3
 8015318:	4601      	mov	r1, r0
 801531a:	4658      	mov	r0, fp
 801531c:	f000 fc38 	bl	8015b90 <__pow5mult>
 8015320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015322:	2b01      	cmp	r3, #1
 8015324:	4604      	mov	r4, r0
 8015326:	f300 8095 	bgt.w	8015454 <_dtoa_r+0x8dc>
 801532a:	9b02      	ldr	r3, [sp, #8]
 801532c:	2b00      	cmp	r3, #0
 801532e:	f040 8087 	bne.w	8015440 <_dtoa_r+0x8c8>
 8015332:	9b03      	ldr	r3, [sp, #12]
 8015334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015338:	2b00      	cmp	r3, #0
 801533a:	f040 8089 	bne.w	8015450 <_dtoa_r+0x8d8>
 801533e:	9b03      	ldr	r3, [sp, #12]
 8015340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015344:	0d1b      	lsrs	r3, r3, #20
 8015346:	051b      	lsls	r3, r3, #20
 8015348:	b12b      	cbz	r3, 8015356 <_dtoa_r+0x7de>
 801534a:	9b08      	ldr	r3, [sp, #32]
 801534c:	3301      	adds	r3, #1
 801534e:	9308      	str	r3, [sp, #32]
 8015350:	f108 0801 	add.w	r8, r8, #1
 8015354:	2301      	movs	r3, #1
 8015356:	930a      	str	r3, [sp, #40]	@ 0x28
 8015358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801535a:	2b00      	cmp	r3, #0
 801535c:	f000 81b0 	beq.w	80156c0 <_dtoa_r+0xb48>
 8015360:	6923      	ldr	r3, [r4, #16]
 8015362:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015366:	6918      	ldr	r0, [r3, #16]
 8015368:	f000 fb06 	bl	8015978 <__hi0bits>
 801536c:	f1c0 0020 	rsb	r0, r0, #32
 8015370:	9b08      	ldr	r3, [sp, #32]
 8015372:	4418      	add	r0, r3
 8015374:	f010 001f 	ands.w	r0, r0, #31
 8015378:	d077      	beq.n	801546a <_dtoa_r+0x8f2>
 801537a:	f1c0 0320 	rsb	r3, r0, #32
 801537e:	2b04      	cmp	r3, #4
 8015380:	dd6b      	ble.n	801545a <_dtoa_r+0x8e2>
 8015382:	9b08      	ldr	r3, [sp, #32]
 8015384:	f1c0 001c 	rsb	r0, r0, #28
 8015388:	4403      	add	r3, r0
 801538a:	4480      	add	r8, r0
 801538c:	4406      	add	r6, r0
 801538e:	9308      	str	r3, [sp, #32]
 8015390:	f1b8 0f00 	cmp.w	r8, #0
 8015394:	dd05      	ble.n	80153a2 <_dtoa_r+0x82a>
 8015396:	4649      	mov	r1, r9
 8015398:	4642      	mov	r2, r8
 801539a:	4658      	mov	r0, fp
 801539c:	f000 fc52 	bl	8015c44 <__lshift>
 80153a0:	4681      	mov	r9, r0
 80153a2:	9b08      	ldr	r3, [sp, #32]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	dd05      	ble.n	80153b4 <_dtoa_r+0x83c>
 80153a8:	4621      	mov	r1, r4
 80153aa:	461a      	mov	r2, r3
 80153ac:	4658      	mov	r0, fp
 80153ae:	f000 fc49 	bl	8015c44 <__lshift>
 80153b2:	4604      	mov	r4, r0
 80153b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d059      	beq.n	801546e <_dtoa_r+0x8f6>
 80153ba:	4621      	mov	r1, r4
 80153bc:	4648      	mov	r0, r9
 80153be:	f000 fcad 	bl	8015d1c <__mcmp>
 80153c2:	2800      	cmp	r0, #0
 80153c4:	da53      	bge.n	801546e <_dtoa_r+0x8f6>
 80153c6:	1e7b      	subs	r3, r7, #1
 80153c8:	9304      	str	r3, [sp, #16]
 80153ca:	4649      	mov	r1, r9
 80153cc:	2300      	movs	r3, #0
 80153ce:	220a      	movs	r2, #10
 80153d0:	4658      	mov	r0, fp
 80153d2:	f000 fa41 	bl	8015858 <__multadd>
 80153d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153d8:	4681      	mov	r9, r0
 80153da:	2b00      	cmp	r3, #0
 80153dc:	f000 8172 	beq.w	80156c4 <_dtoa_r+0xb4c>
 80153e0:	2300      	movs	r3, #0
 80153e2:	4629      	mov	r1, r5
 80153e4:	220a      	movs	r2, #10
 80153e6:	4658      	mov	r0, fp
 80153e8:	f000 fa36 	bl	8015858 <__multadd>
 80153ec:	9b00      	ldr	r3, [sp, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	4605      	mov	r5, r0
 80153f2:	dc67      	bgt.n	80154c4 <_dtoa_r+0x94c>
 80153f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153f6:	2b02      	cmp	r3, #2
 80153f8:	dc41      	bgt.n	801547e <_dtoa_r+0x906>
 80153fa:	e063      	b.n	80154c4 <_dtoa_r+0x94c>
 80153fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80153fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015402:	e746      	b.n	8015292 <_dtoa_r+0x71a>
 8015404:	9b07      	ldr	r3, [sp, #28]
 8015406:	1e5c      	subs	r4, r3, #1
 8015408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801540a:	42a3      	cmp	r3, r4
 801540c:	bfbf      	itttt	lt
 801540e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015410:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015412:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015414:	1ae3      	sublt	r3, r4, r3
 8015416:	bfb4      	ite	lt
 8015418:	18d2      	addlt	r2, r2, r3
 801541a:	1b1c      	subge	r4, r3, r4
 801541c:	9b07      	ldr	r3, [sp, #28]
 801541e:	bfbc      	itt	lt
 8015420:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015422:	2400      	movlt	r4, #0
 8015424:	2b00      	cmp	r3, #0
 8015426:	bfb5      	itete	lt
 8015428:	eba8 0603 	sublt.w	r6, r8, r3
 801542c:	9b07      	ldrge	r3, [sp, #28]
 801542e:	2300      	movlt	r3, #0
 8015430:	4646      	movge	r6, r8
 8015432:	e730      	b.n	8015296 <_dtoa_r+0x71e>
 8015434:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015436:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015438:	4646      	mov	r6, r8
 801543a:	e735      	b.n	80152a8 <_dtoa_r+0x730>
 801543c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801543e:	e75c      	b.n	80152fa <_dtoa_r+0x782>
 8015440:	2300      	movs	r3, #0
 8015442:	e788      	b.n	8015356 <_dtoa_r+0x7de>
 8015444:	3fe00000 	.word	0x3fe00000
 8015448:	40240000 	.word	0x40240000
 801544c:	40140000 	.word	0x40140000
 8015450:	9b02      	ldr	r3, [sp, #8]
 8015452:	e780      	b.n	8015356 <_dtoa_r+0x7de>
 8015454:	2300      	movs	r3, #0
 8015456:	930a      	str	r3, [sp, #40]	@ 0x28
 8015458:	e782      	b.n	8015360 <_dtoa_r+0x7e8>
 801545a:	d099      	beq.n	8015390 <_dtoa_r+0x818>
 801545c:	9a08      	ldr	r2, [sp, #32]
 801545e:	331c      	adds	r3, #28
 8015460:	441a      	add	r2, r3
 8015462:	4498      	add	r8, r3
 8015464:	441e      	add	r6, r3
 8015466:	9208      	str	r2, [sp, #32]
 8015468:	e792      	b.n	8015390 <_dtoa_r+0x818>
 801546a:	4603      	mov	r3, r0
 801546c:	e7f6      	b.n	801545c <_dtoa_r+0x8e4>
 801546e:	9b07      	ldr	r3, [sp, #28]
 8015470:	9704      	str	r7, [sp, #16]
 8015472:	2b00      	cmp	r3, #0
 8015474:	dc20      	bgt.n	80154b8 <_dtoa_r+0x940>
 8015476:	9300      	str	r3, [sp, #0]
 8015478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801547a:	2b02      	cmp	r3, #2
 801547c:	dd1e      	ble.n	80154bc <_dtoa_r+0x944>
 801547e:	9b00      	ldr	r3, [sp, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	f47f aec0 	bne.w	8015206 <_dtoa_r+0x68e>
 8015486:	4621      	mov	r1, r4
 8015488:	2205      	movs	r2, #5
 801548a:	4658      	mov	r0, fp
 801548c:	f000 f9e4 	bl	8015858 <__multadd>
 8015490:	4601      	mov	r1, r0
 8015492:	4604      	mov	r4, r0
 8015494:	4648      	mov	r0, r9
 8015496:	f000 fc41 	bl	8015d1c <__mcmp>
 801549a:	2800      	cmp	r0, #0
 801549c:	f77f aeb3 	ble.w	8015206 <_dtoa_r+0x68e>
 80154a0:	4656      	mov	r6, sl
 80154a2:	2331      	movs	r3, #49	@ 0x31
 80154a4:	f806 3b01 	strb.w	r3, [r6], #1
 80154a8:	9b04      	ldr	r3, [sp, #16]
 80154aa:	3301      	adds	r3, #1
 80154ac:	9304      	str	r3, [sp, #16]
 80154ae:	e6ae      	b.n	801520e <_dtoa_r+0x696>
 80154b0:	9c07      	ldr	r4, [sp, #28]
 80154b2:	9704      	str	r7, [sp, #16]
 80154b4:	4625      	mov	r5, r4
 80154b6:	e7f3      	b.n	80154a0 <_dtoa_r+0x928>
 80154b8:	9b07      	ldr	r3, [sp, #28]
 80154ba:	9300      	str	r3, [sp, #0]
 80154bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154be:	2b00      	cmp	r3, #0
 80154c0:	f000 8104 	beq.w	80156cc <_dtoa_r+0xb54>
 80154c4:	2e00      	cmp	r6, #0
 80154c6:	dd05      	ble.n	80154d4 <_dtoa_r+0x95c>
 80154c8:	4629      	mov	r1, r5
 80154ca:	4632      	mov	r2, r6
 80154cc:	4658      	mov	r0, fp
 80154ce:	f000 fbb9 	bl	8015c44 <__lshift>
 80154d2:	4605      	mov	r5, r0
 80154d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d05a      	beq.n	8015590 <_dtoa_r+0xa18>
 80154da:	6869      	ldr	r1, [r5, #4]
 80154dc:	4658      	mov	r0, fp
 80154de:	f000 f959 	bl	8015794 <_Balloc>
 80154e2:	4606      	mov	r6, r0
 80154e4:	b928      	cbnz	r0, 80154f2 <_dtoa_r+0x97a>
 80154e6:	4b84      	ldr	r3, [pc, #528]	@ (80156f8 <_dtoa_r+0xb80>)
 80154e8:	4602      	mov	r2, r0
 80154ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80154ee:	f7ff bb5a 	b.w	8014ba6 <_dtoa_r+0x2e>
 80154f2:	692a      	ldr	r2, [r5, #16]
 80154f4:	3202      	adds	r2, #2
 80154f6:	0092      	lsls	r2, r2, #2
 80154f8:	f105 010c 	add.w	r1, r5, #12
 80154fc:	300c      	adds	r0, #12
 80154fe:	f7ff fa9e 	bl	8014a3e <memcpy>
 8015502:	2201      	movs	r2, #1
 8015504:	4631      	mov	r1, r6
 8015506:	4658      	mov	r0, fp
 8015508:	f000 fb9c 	bl	8015c44 <__lshift>
 801550c:	f10a 0301 	add.w	r3, sl, #1
 8015510:	9307      	str	r3, [sp, #28]
 8015512:	9b00      	ldr	r3, [sp, #0]
 8015514:	4453      	add	r3, sl
 8015516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015518:	9b02      	ldr	r3, [sp, #8]
 801551a:	f003 0301 	and.w	r3, r3, #1
 801551e:	462f      	mov	r7, r5
 8015520:	930a      	str	r3, [sp, #40]	@ 0x28
 8015522:	4605      	mov	r5, r0
 8015524:	9b07      	ldr	r3, [sp, #28]
 8015526:	4621      	mov	r1, r4
 8015528:	3b01      	subs	r3, #1
 801552a:	4648      	mov	r0, r9
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	f7ff fa9b 	bl	8014a68 <quorem>
 8015532:	4639      	mov	r1, r7
 8015534:	9002      	str	r0, [sp, #8]
 8015536:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801553a:	4648      	mov	r0, r9
 801553c:	f000 fbee 	bl	8015d1c <__mcmp>
 8015540:	462a      	mov	r2, r5
 8015542:	9008      	str	r0, [sp, #32]
 8015544:	4621      	mov	r1, r4
 8015546:	4658      	mov	r0, fp
 8015548:	f000 fc04 	bl	8015d54 <__mdiff>
 801554c:	68c2      	ldr	r2, [r0, #12]
 801554e:	4606      	mov	r6, r0
 8015550:	bb02      	cbnz	r2, 8015594 <_dtoa_r+0xa1c>
 8015552:	4601      	mov	r1, r0
 8015554:	4648      	mov	r0, r9
 8015556:	f000 fbe1 	bl	8015d1c <__mcmp>
 801555a:	4602      	mov	r2, r0
 801555c:	4631      	mov	r1, r6
 801555e:	4658      	mov	r0, fp
 8015560:	920e      	str	r2, [sp, #56]	@ 0x38
 8015562:	f000 f957 	bl	8015814 <_Bfree>
 8015566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015568:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801556a:	9e07      	ldr	r6, [sp, #28]
 801556c:	ea43 0102 	orr.w	r1, r3, r2
 8015570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015572:	4319      	orrs	r1, r3
 8015574:	d110      	bne.n	8015598 <_dtoa_r+0xa20>
 8015576:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801557a:	d029      	beq.n	80155d0 <_dtoa_r+0xa58>
 801557c:	9b08      	ldr	r3, [sp, #32]
 801557e:	2b00      	cmp	r3, #0
 8015580:	dd02      	ble.n	8015588 <_dtoa_r+0xa10>
 8015582:	9b02      	ldr	r3, [sp, #8]
 8015584:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015588:	9b00      	ldr	r3, [sp, #0]
 801558a:	f883 8000 	strb.w	r8, [r3]
 801558e:	e63f      	b.n	8015210 <_dtoa_r+0x698>
 8015590:	4628      	mov	r0, r5
 8015592:	e7bb      	b.n	801550c <_dtoa_r+0x994>
 8015594:	2201      	movs	r2, #1
 8015596:	e7e1      	b.n	801555c <_dtoa_r+0x9e4>
 8015598:	9b08      	ldr	r3, [sp, #32]
 801559a:	2b00      	cmp	r3, #0
 801559c:	db04      	blt.n	80155a8 <_dtoa_r+0xa30>
 801559e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80155a0:	430b      	orrs	r3, r1
 80155a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80155a4:	430b      	orrs	r3, r1
 80155a6:	d120      	bne.n	80155ea <_dtoa_r+0xa72>
 80155a8:	2a00      	cmp	r2, #0
 80155aa:	dded      	ble.n	8015588 <_dtoa_r+0xa10>
 80155ac:	4649      	mov	r1, r9
 80155ae:	2201      	movs	r2, #1
 80155b0:	4658      	mov	r0, fp
 80155b2:	f000 fb47 	bl	8015c44 <__lshift>
 80155b6:	4621      	mov	r1, r4
 80155b8:	4681      	mov	r9, r0
 80155ba:	f000 fbaf 	bl	8015d1c <__mcmp>
 80155be:	2800      	cmp	r0, #0
 80155c0:	dc03      	bgt.n	80155ca <_dtoa_r+0xa52>
 80155c2:	d1e1      	bne.n	8015588 <_dtoa_r+0xa10>
 80155c4:	f018 0f01 	tst.w	r8, #1
 80155c8:	d0de      	beq.n	8015588 <_dtoa_r+0xa10>
 80155ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80155ce:	d1d8      	bne.n	8015582 <_dtoa_r+0xa0a>
 80155d0:	9a00      	ldr	r2, [sp, #0]
 80155d2:	2339      	movs	r3, #57	@ 0x39
 80155d4:	7013      	strb	r3, [r2, #0]
 80155d6:	4633      	mov	r3, r6
 80155d8:	461e      	mov	r6, r3
 80155da:	3b01      	subs	r3, #1
 80155dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80155e0:	2a39      	cmp	r2, #57	@ 0x39
 80155e2:	d052      	beq.n	801568a <_dtoa_r+0xb12>
 80155e4:	3201      	adds	r2, #1
 80155e6:	701a      	strb	r2, [r3, #0]
 80155e8:	e612      	b.n	8015210 <_dtoa_r+0x698>
 80155ea:	2a00      	cmp	r2, #0
 80155ec:	dd07      	ble.n	80155fe <_dtoa_r+0xa86>
 80155ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80155f2:	d0ed      	beq.n	80155d0 <_dtoa_r+0xa58>
 80155f4:	9a00      	ldr	r2, [sp, #0]
 80155f6:	f108 0301 	add.w	r3, r8, #1
 80155fa:	7013      	strb	r3, [r2, #0]
 80155fc:	e608      	b.n	8015210 <_dtoa_r+0x698>
 80155fe:	9b07      	ldr	r3, [sp, #28]
 8015600:	9a07      	ldr	r2, [sp, #28]
 8015602:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015608:	4293      	cmp	r3, r2
 801560a:	d028      	beq.n	801565e <_dtoa_r+0xae6>
 801560c:	4649      	mov	r1, r9
 801560e:	2300      	movs	r3, #0
 8015610:	220a      	movs	r2, #10
 8015612:	4658      	mov	r0, fp
 8015614:	f000 f920 	bl	8015858 <__multadd>
 8015618:	42af      	cmp	r7, r5
 801561a:	4681      	mov	r9, r0
 801561c:	f04f 0300 	mov.w	r3, #0
 8015620:	f04f 020a 	mov.w	r2, #10
 8015624:	4639      	mov	r1, r7
 8015626:	4658      	mov	r0, fp
 8015628:	d107      	bne.n	801563a <_dtoa_r+0xac2>
 801562a:	f000 f915 	bl	8015858 <__multadd>
 801562e:	4607      	mov	r7, r0
 8015630:	4605      	mov	r5, r0
 8015632:	9b07      	ldr	r3, [sp, #28]
 8015634:	3301      	adds	r3, #1
 8015636:	9307      	str	r3, [sp, #28]
 8015638:	e774      	b.n	8015524 <_dtoa_r+0x9ac>
 801563a:	f000 f90d 	bl	8015858 <__multadd>
 801563e:	4629      	mov	r1, r5
 8015640:	4607      	mov	r7, r0
 8015642:	2300      	movs	r3, #0
 8015644:	220a      	movs	r2, #10
 8015646:	4658      	mov	r0, fp
 8015648:	f000 f906 	bl	8015858 <__multadd>
 801564c:	4605      	mov	r5, r0
 801564e:	e7f0      	b.n	8015632 <_dtoa_r+0xaba>
 8015650:	9b00      	ldr	r3, [sp, #0]
 8015652:	2b00      	cmp	r3, #0
 8015654:	bfcc      	ite	gt
 8015656:	461e      	movgt	r6, r3
 8015658:	2601      	movle	r6, #1
 801565a:	4456      	add	r6, sl
 801565c:	2700      	movs	r7, #0
 801565e:	4649      	mov	r1, r9
 8015660:	2201      	movs	r2, #1
 8015662:	4658      	mov	r0, fp
 8015664:	f000 faee 	bl	8015c44 <__lshift>
 8015668:	4621      	mov	r1, r4
 801566a:	4681      	mov	r9, r0
 801566c:	f000 fb56 	bl	8015d1c <__mcmp>
 8015670:	2800      	cmp	r0, #0
 8015672:	dcb0      	bgt.n	80155d6 <_dtoa_r+0xa5e>
 8015674:	d102      	bne.n	801567c <_dtoa_r+0xb04>
 8015676:	f018 0f01 	tst.w	r8, #1
 801567a:	d1ac      	bne.n	80155d6 <_dtoa_r+0xa5e>
 801567c:	4633      	mov	r3, r6
 801567e:	461e      	mov	r6, r3
 8015680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015684:	2a30      	cmp	r2, #48	@ 0x30
 8015686:	d0fa      	beq.n	801567e <_dtoa_r+0xb06>
 8015688:	e5c2      	b.n	8015210 <_dtoa_r+0x698>
 801568a:	459a      	cmp	sl, r3
 801568c:	d1a4      	bne.n	80155d8 <_dtoa_r+0xa60>
 801568e:	9b04      	ldr	r3, [sp, #16]
 8015690:	3301      	adds	r3, #1
 8015692:	9304      	str	r3, [sp, #16]
 8015694:	2331      	movs	r3, #49	@ 0x31
 8015696:	f88a 3000 	strb.w	r3, [sl]
 801569a:	e5b9      	b.n	8015210 <_dtoa_r+0x698>
 801569c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801569e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80156fc <_dtoa_r+0xb84>
 80156a2:	b11b      	cbz	r3, 80156ac <_dtoa_r+0xb34>
 80156a4:	f10a 0308 	add.w	r3, sl, #8
 80156a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80156aa:	6013      	str	r3, [r2, #0]
 80156ac:	4650      	mov	r0, sl
 80156ae:	b019      	add	sp, #100	@ 0x64
 80156b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156b6:	2b01      	cmp	r3, #1
 80156b8:	f77f ae37 	ble.w	801532a <_dtoa_r+0x7b2>
 80156bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156be:	930a      	str	r3, [sp, #40]	@ 0x28
 80156c0:	2001      	movs	r0, #1
 80156c2:	e655      	b.n	8015370 <_dtoa_r+0x7f8>
 80156c4:	9b00      	ldr	r3, [sp, #0]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	f77f aed6 	ble.w	8015478 <_dtoa_r+0x900>
 80156cc:	4656      	mov	r6, sl
 80156ce:	4621      	mov	r1, r4
 80156d0:	4648      	mov	r0, r9
 80156d2:	f7ff f9c9 	bl	8014a68 <quorem>
 80156d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80156da:	f806 8b01 	strb.w	r8, [r6], #1
 80156de:	9b00      	ldr	r3, [sp, #0]
 80156e0:	eba6 020a 	sub.w	r2, r6, sl
 80156e4:	4293      	cmp	r3, r2
 80156e6:	ddb3      	ble.n	8015650 <_dtoa_r+0xad8>
 80156e8:	4649      	mov	r1, r9
 80156ea:	2300      	movs	r3, #0
 80156ec:	220a      	movs	r2, #10
 80156ee:	4658      	mov	r0, fp
 80156f0:	f000 f8b2 	bl	8015858 <__multadd>
 80156f4:	4681      	mov	r9, r0
 80156f6:	e7ea      	b.n	80156ce <_dtoa_r+0xb56>
 80156f8:	080190d1 	.word	0x080190d1
 80156fc:	08019055 	.word	0x08019055

08015700 <_free_r>:
 8015700:	b538      	push	{r3, r4, r5, lr}
 8015702:	4605      	mov	r5, r0
 8015704:	2900      	cmp	r1, #0
 8015706:	d041      	beq.n	801578c <_free_r+0x8c>
 8015708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801570c:	1f0c      	subs	r4, r1, #4
 801570e:	2b00      	cmp	r3, #0
 8015710:	bfb8      	it	lt
 8015712:	18e4      	addlt	r4, r4, r3
 8015714:	f7fe f8d4 	bl	80138c0 <__malloc_lock>
 8015718:	4a1d      	ldr	r2, [pc, #116]	@ (8015790 <_free_r+0x90>)
 801571a:	6813      	ldr	r3, [r2, #0]
 801571c:	b933      	cbnz	r3, 801572c <_free_r+0x2c>
 801571e:	6063      	str	r3, [r4, #4]
 8015720:	6014      	str	r4, [r2, #0]
 8015722:	4628      	mov	r0, r5
 8015724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015728:	f7fe b8d0 	b.w	80138cc <__malloc_unlock>
 801572c:	42a3      	cmp	r3, r4
 801572e:	d908      	bls.n	8015742 <_free_r+0x42>
 8015730:	6820      	ldr	r0, [r4, #0]
 8015732:	1821      	adds	r1, r4, r0
 8015734:	428b      	cmp	r3, r1
 8015736:	bf01      	itttt	eq
 8015738:	6819      	ldreq	r1, [r3, #0]
 801573a:	685b      	ldreq	r3, [r3, #4]
 801573c:	1809      	addeq	r1, r1, r0
 801573e:	6021      	streq	r1, [r4, #0]
 8015740:	e7ed      	b.n	801571e <_free_r+0x1e>
 8015742:	461a      	mov	r2, r3
 8015744:	685b      	ldr	r3, [r3, #4]
 8015746:	b10b      	cbz	r3, 801574c <_free_r+0x4c>
 8015748:	42a3      	cmp	r3, r4
 801574a:	d9fa      	bls.n	8015742 <_free_r+0x42>
 801574c:	6811      	ldr	r1, [r2, #0]
 801574e:	1850      	adds	r0, r2, r1
 8015750:	42a0      	cmp	r0, r4
 8015752:	d10b      	bne.n	801576c <_free_r+0x6c>
 8015754:	6820      	ldr	r0, [r4, #0]
 8015756:	4401      	add	r1, r0
 8015758:	1850      	adds	r0, r2, r1
 801575a:	4283      	cmp	r3, r0
 801575c:	6011      	str	r1, [r2, #0]
 801575e:	d1e0      	bne.n	8015722 <_free_r+0x22>
 8015760:	6818      	ldr	r0, [r3, #0]
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	6053      	str	r3, [r2, #4]
 8015766:	4408      	add	r0, r1
 8015768:	6010      	str	r0, [r2, #0]
 801576a:	e7da      	b.n	8015722 <_free_r+0x22>
 801576c:	d902      	bls.n	8015774 <_free_r+0x74>
 801576e:	230c      	movs	r3, #12
 8015770:	602b      	str	r3, [r5, #0]
 8015772:	e7d6      	b.n	8015722 <_free_r+0x22>
 8015774:	6820      	ldr	r0, [r4, #0]
 8015776:	1821      	adds	r1, r4, r0
 8015778:	428b      	cmp	r3, r1
 801577a:	bf04      	itt	eq
 801577c:	6819      	ldreq	r1, [r3, #0]
 801577e:	685b      	ldreq	r3, [r3, #4]
 8015780:	6063      	str	r3, [r4, #4]
 8015782:	bf04      	itt	eq
 8015784:	1809      	addeq	r1, r1, r0
 8015786:	6021      	streq	r1, [r4, #0]
 8015788:	6054      	str	r4, [r2, #4]
 801578a:	e7ca      	b.n	8015722 <_free_r+0x22>
 801578c:	bd38      	pop	{r3, r4, r5, pc}
 801578e:	bf00      	nop
 8015790:	20000a4c 	.word	0x20000a4c

08015794 <_Balloc>:
 8015794:	b570      	push	{r4, r5, r6, lr}
 8015796:	69c6      	ldr	r6, [r0, #28]
 8015798:	4604      	mov	r4, r0
 801579a:	460d      	mov	r5, r1
 801579c:	b976      	cbnz	r6, 80157bc <_Balloc+0x28>
 801579e:	2010      	movs	r0, #16
 80157a0:	f7fd ffdc 	bl	801375c <malloc>
 80157a4:	4602      	mov	r2, r0
 80157a6:	61e0      	str	r0, [r4, #28]
 80157a8:	b920      	cbnz	r0, 80157b4 <_Balloc+0x20>
 80157aa:	4b18      	ldr	r3, [pc, #96]	@ (801580c <_Balloc+0x78>)
 80157ac:	4818      	ldr	r0, [pc, #96]	@ (8015810 <_Balloc+0x7c>)
 80157ae:	216b      	movs	r1, #107	@ 0x6b
 80157b0:	f7fd ffa4 	bl	80136fc <__assert_func>
 80157b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80157b8:	6006      	str	r6, [r0, #0]
 80157ba:	60c6      	str	r6, [r0, #12]
 80157bc:	69e6      	ldr	r6, [r4, #28]
 80157be:	68f3      	ldr	r3, [r6, #12]
 80157c0:	b183      	cbz	r3, 80157e4 <_Balloc+0x50>
 80157c2:	69e3      	ldr	r3, [r4, #28]
 80157c4:	68db      	ldr	r3, [r3, #12]
 80157c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80157ca:	b9b8      	cbnz	r0, 80157fc <_Balloc+0x68>
 80157cc:	2101      	movs	r1, #1
 80157ce:	fa01 f605 	lsl.w	r6, r1, r5
 80157d2:	1d72      	adds	r2, r6, #5
 80157d4:	0092      	lsls	r2, r2, #2
 80157d6:	4620      	mov	r0, r4
 80157d8:	f001 ff0a 	bl	80175f0 <_calloc_r>
 80157dc:	b160      	cbz	r0, 80157f8 <_Balloc+0x64>
 80157de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80157e2:	e00e      	b.n	8015802 <_Balloc+0x6e>
 80157e4:	2221      	movs	r2, #33	@ 0x21
 80157e6:	2104      	movs	r1, #4
 80157e8:	4620      	mov	r0, r4
 80157ea:	f001 ff01 	bl	80175f0 <_calloc_r>
 80157ee:	69e3      	ldr	r3, [r4, #28]
 80157f0:	60f0      	str	r0, [r6, #12]
 80157f2:	68db      	ldr	r3, [r3, #12]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d1e4      	bne.n	80157c2 <_Balloc+0x2e>
 80157f8:	2000      	movs	r0, #0
 80157fa:	bd70      	pop	{r4, r5, r6, pc}
 80157fc:	6802      	ldr	r2, [r0, #0]
 80157fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015802:	2300      	movs	r3, #0
 8015804:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015808:	e7f7      	b.n	80157fa <_Balloc+0x66>
 801580a:	bf00      	nop
 801580c:	08019062 	.word	0x08019062
 8015810:	080190e2 	.word	0x080190e2

08015814 <_Bfree>:
 8015814:	b570      	push	{r4, r5, r6, lr}
 8015816:	69c6      	ldr	r6, [r0, #28]
 8015818:	4605      	mov	r5, r0
 801581a:	460c      	mov	r4, r1
 801581c:	b976      	cbnz	r6, 801583c <_Bfree+0x28>
 801581e:	2010      	movs	r0, #16
 8015820:	f7fd ff9c 	bl	801375c <malloc>
 8015824:	4602      	mov	r2, r0
 8015826:	61e8      	str	r0, [r5, #28]
 8015828:	b920      	cbnz	r0, 8015834 <_Bfree+0x20>
 801582a:	4b09      	ldr	r3, [pc, #36]	@ (8015850 <_Bfree+0x3c>)
 801582c:	4809      	ldr	r0, [pc, #36]	@ (8015854 <_Bfree+0x40>)
 801582e:	218f      	movs	r1, #143	@ 0x8f
 8015830:	f7fd ff64 	bl	80136fc <__assert_func>
 8015834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015838:	6006      	str	r6, [r0, #0]
 801583a:	60c6      	str	r6, [r0, #12]
 801583c:	b13c      	cbz	r4, 801584e <_Bfree+0x3a>
 801583e:	69eb      	ldr	r3, [r5, #28]
 8015840:	6862      	ldr	r2, [r4, #4]
 8015842:	68db      	ldr	r3, [r3, #12]
 8015844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015848:	6021      	str	r1, [r4, #0]
 801584a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801584e:	bd70      	pop	{r4, r5, r6, pc}
 8015850:	08019062 	.word	0x08019062
 8015854:	080190e2 	.word	0x080190e2

08015858 <__multadd>:
 8015858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801585c:	690d      	ldr	r5, [r1, #16]
 801585e:	4607      	mov	r7, r0
 8015860:	460c      	mov	r4, r1
 8015862:	461e      	mov	r6, r3
 8015864:	f101 0c14 	add.w	ip, r1, #20
 8015868:	2000      	movs	r0, #0
 801586a:	f8dc 3000 	ldr.w	r3, [ip]
 801586e:	b299      	uxth	r1, r3
 8015870:	fb02 6101 	mla	r1, r2, r1, r6
 8015874:	0c1e      	lsrs	r6, r3, #16
 8015876:	0c0b      	lsrs	r3, r1, #16
 8015878:	fb02 3306 	mla	r3, r2, r6, r3
 801587c:	b289      	uxth	r1, r1
 801587e:	3001      	adds	r0, #1
 8015880:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015884:	4285      	cmp	r5, r0
 8015886:	f84c 1b04 	str.w	r1, [ip], #4
 801588a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801588e:	dcec      	bgt.n	801586a <__multadd+0x12>
 8015890:	b30e      	cbz	r6, 80158d6 <__multadd+0x7e>
 8015892:	68a3      	ldr	r3, [r4, #8]
 8015894:	42ab      	cmp	r3, r5
 8015896:	dc19      	bgt.n	80158cc <__multadd+0x74>
 8015898:	6861      	ldr	r1, [r4, #4]
 801589a:	4638      	mov	r0, r7
 801589c:	3101      	adds	r1, #1
 801589e:	f7ff ff79 	bl	8015794 <_Balloc>
 80158a2:	4680      	mov	r8, r0
 80158a4:	b928      	cbnz	r0, 80158b2 <__multadd+0x5a>
 80158a6:	4602      	mov	r2, r0
 80158a8:	4b0c      	ldr	r3, [pc, #48]	@ (80158dc <__multadd+0x84>)
 80158aa:	480d      	ldr	r0, [pc, #52]	@ (80158e0 <__multadd+0x88>)
 80158ac:	21ba      	movs	r1, #186	@ 0xba
 80158ae:	f7fd ff25 	bl	80136fc <__assert_func>
 80158b2:	6922      	ldr	r2, [r4, #16]
 80158b4:	3202      	adds	r2, #2
 80158b6:	f104 010c 	add.w	r1, r4, #12
 80158ba:	0092      	lsls	r2, r2, #2
 80158bc:	300c      	adds	r0, #12
 80158be:	f7ff f8be 	bl	8014a3e <memcpy>
 80158c2:	4621      	mov	r1, r4
 80158c4:	4638      	mov	r0, r7
 80158c6:	f7ff ffa5 	bl	8015814 <_Bfree>
 80158ca:	4644      	mov	r4, r8
 80158cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80158d0:	3501      	adds	r5, #1
 80158d2:	615e      	str	r6, [r3, #20]
 80158d4:	6125      	str	r5, [r4, #16]
 80158d6:	4620      	mov	r0, r4
 80158d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158dc:	080190d1 	.word	0x080190d1
 80158e0:	080190e2 	.word	0x080190e2

080158e4 <__s2b>:
 80158e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158e8:	460c      	mov	r4, r1
 80158ea:	4615      	mov	r5, r2
 80158ec:	461f      	mov	r7, r3
 80158ee:	2209      	movs	r2, #9
 80158f0:	3308      	adds	r3, #8
 80158f2:	4606      	mov	r6, r0
 80158f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80158f8:	2100      	movs	r1, #0
 80158fa:	2201      	movs	r2, #1
 80158fc:	429a      	cmp	r2, r3
 80158fe:	db09      	blt.n	8015914 <__s2b+0x30>
 8015900:	4630      	mov	r0, r6
 8015902:	f7ff ff47 	bl	8015794 <_Balloc>
 8015906:	b940      	cbnz	r0, 801591a <__s2b+0x36>
 8015908:	4602      	mov	r2, r0
 801590a:	4b19      	ldr	r3, [pc, #100]	@ (8015970 <__s2b+0x8c>)
 801590c:	4819      	ldr	r0, [pc, #100]	@ (8015974 <__s2b+0x90>)
 801590e:	21d3      	movs	r1, #211	@ 0xd3
 8015910:	f7fd fef4 	bl	80136fc <__assert_func>
 8015914:	0052      	lsls	r2, r2, #1
 8015916:	3101      	adds	r1, #1
 8015918:	e7f0      	b.n	80158fc <__s2b+0x18>
 801591a:	9b08      	ldr	r3, [sp, #32]
 801591c:	6143      	str	r3, [r0, #20]
 801591e:	2d09      	cmp	r5, #9
 8015920:	f04f 0301 	mov.w	r3, #1
 8015924:	6103      	str	r3, [r0, #16]
 8015926:	dd16      	ble.n	8015956 <__s2b+0x72>
 8015928:	f104 0909 	add.w	r9, r4, #9
 801592c:	46c8      	mov	r8, r9
 801592e:	442c      	add	r4, r5
 8015930:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015934:	4601      	mov	r1, r0
 8015936:	3b30      	subs	r3, #48	@ 0x30
 8015938:	220a      	movs	r2, #10
 801593a:	4630      	mov	r0, r6
 801593c:	f7ff ff8c 	bl	8015858 <__multadd>
 8015940:	45a0      	cmp	r8, r4
 8015942:	d1f5      	bne.n	8015930 <__s2b+0x4c>
 8015944:	f1a5 0408 	sub.w	r4, r5, #8
 8015948:	444c      	add	r4, r9
 801594a:	1b2d      	subs	r5, r5, r4
 801594c:	1963      	adds	r3, r4, r5
 801594e:	42bb      	cmp	r3, r7
 8015950:	db04      	blt.n	801595c <__s2b+0x78>
 8015952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015956:	340a      	adds	r4, #10
 8015958:	2509      	movs	r5, #9
 801595a:	e7f6      	b.n	801594a <__s2b+0x66>
 801595c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015960:	4601      	mov	r1, r0
 8015962:	3b30      	subs	r3, #48	@ 0x30
 8015964:	220a      	movs	r2, #10
 8015966:	4630      	mov	r0, r6
 8015968:	f7ff ff76 	bl	8015858 <__multadd>
 801596c:	e7ee      	b.n	801594c <__s2b+0x68>
 801596e:	bf00      	nop
 8015970:	080190d1 	.word	0x080190d1
 8015974:	080190e2 	.word	0x080190e2

08015978 <__hi0bits>:
 8015978:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801597c:	4603      	mov	r3, r0
 801597e:	bf36      	itet	cc
 8015980:	0403      	lslcc	r3, r0, #16
 8015982:	2000      	movcs	r0, #0
 8015984:	2010      	movcc	r0, #16
 8015986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801598a:	bf3c      	itt	cc
 801598c:	021b      	lslcc	r3, r3, #8
 801598e:	3008      	addcc	r0, #8
 8015990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015994:	bf3c      	itt	cc
 8015996:	011b      	lslcc	r3, r3, #4
 8015998:	3004      	addcc	r0, #4
 801599a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801599e:	bf3c      	itt	cc
 80159a0:	009b      	lslcc	r3, r3, #2
 80159a2:	3002      	addcc	r0, #2
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	db05      	blt.n	80159b4 <__hi0bits+0x3c>
 80159a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80159ac:	f100 0001 	add.w	r0, r0, #1
 80159b0:	bf08      	it	eq
 80159b2:	2020      	moveq	r0, #32
 80159b4:	4770      	bx	lr

080159b6 <__lo0bits>:
 80159b6:	6803      	ldr	r3, [r0, #0]
 80159b8:	4602      	mov	r2, r0
 80159ba:	f013 0007 	ands.w	r0, r3, #7
 80159be:	d00b      	beq.n	80159d8 <__lo0bits+0x22>
 80159c0:	07d9      	lsls	r1, r3, #31
 80159c2:	d421      	bmi.n	8015a08 <__lo0bits+0x52>
 80159c4:	0798      	lsls	r0, r3, #30
 80159c6:	bf49      	itett	mi
 80159c8:	085b      	lsrmi	r3, r3, #1
 80159ca:	089b      	lsrpl	r3, r3, #2
 80159cc:	2001      	movmi	r0, #1
 80159ce:	6013      	strmi	r3, [r2, #0]
 80159d0:	bf5c      	itt	pl
 80159d2:	6013      	strpl	r3, [r2, #0]
 80159d4:	2002      	movpl	r0, #2
 80159d6:	4770      	bx	lr
 80159d8:	b299      	uxth	r1, r3
 80159da:	b909      	cbnz	r1, 80159e0 <__lo0bits+0x2a>
 80159dc:	0c1b      	lsrs	r3, r3, #16
 80159de:	2010      	movs	r0, #16
 80159e0:	b2d9      	uxtb	r1, r3
 80159e2:	b909      	cbnz	r1, 80159e8 <__lo0bits+0x32>
 80159e4:	3008      	adds	r0, #8
 80159e6:	0a1b      	lsrs	r3, r3, #8
 80159e8:	0719      	lsls	r1, r3, #28
 80159ea:	bf04      	itt	eq
 80159ec:	091b      	lsreq	r3, r3, #4
 80159ee:	3004      	addeq	r0, #4
 80159f0:	0799      	lsls	r1, r3, #30
 80159f2:	bf04      	itt	eq
 80159f4:	089b      	lsreq	r3, r3, #2
 80159f6:	3002      	addeq	r0, #2
 80159f8:	07d9      	lsls	r1, r3, #31
 80159fa:	d403      	bmi.n	8015a04 <__lo0bits+0x4e>
 80159fc:	085b      	lsrs	r3, r3, #1
 80159fe:	f100 0001 	add.w	r0, r0, #1
 8015a02:	d003      	beq.n	8015a0c <__lo0bits+0x56>
 8015a04:	6013      	str	r3, [r2, #0]
 8015a06:	4770      	bx	lr
 8015a08:	2000      	movs	r0, #0
 8015a0a:	4770      	bx	lr
 8015a0c:	2020      	movs	r0, #32
 8015a0e:	4770      	bx	lr

08015a10 <__i2b>:
 8015a10:	b510      	push	{r4, lr}
 8015a12:	460c      	mov	r4, r1
 8015a14:	2101      	movs	r1, #1
 8015a16:	f7ff febd 	bl	8015794 <_Balloc>
 8015a1a:	4602      	mov	r2, r0
 8015a1c:	b928      	cbnz	r0, 8015a2a <__i2b+0x1a>
 8015a1e:	4b05      	ldr	r3, [pc, #20]	@ (8015a34 <__i2b+0x24>)
 8015a20:	4805      	ldr	r0, [pc, #20]	@ (8015a38 <__i2b+0x28>)
 8015a22:	f240 1145 	movw	r1, #325	@ 0x145
 8015a26:	f7fd fe69 	bl	80136fc <__assert_func>
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	6144      	str	r4, [r0, #20]
 8015a2e:	6103      	str	r3, [r0, #16]
 8015a30:	bd10      	pop	{r4, pc}
 8015a32:	bf00      	nop
 8015a34:	080190d1 	.word	0x080190d1
 8015a38:	080190e2 	.word	0x080190e2

08015a3c <__multiply>:
 8015a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a40:	4614      	mov	r4, r2
 8015a42:	690a      	ldr	r2, [r1, #16]
 8015a44:	6923      	ldr	r3, [r4, #16]
 8015a46:	429a      	cmp	r2, r3
 8015a48:	bfa8      	it	ge
 8015a4a:	4623      	movge	r3, r4
 8015a4c:	460f      	mov	r7, r1
 8015a4e:	bfa4      	itt	ge
 8015a50:	460c      	movge	r4, r1
 8015a52:	461f      	movge	r7, r3
 8015a54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015a58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015a5c:	68a3      	ldr	r3, [r4, #8]
 8015a5e:	6861      	ldr	r1, [r4, #4]
 8015a60:	eb0a 0609 	add.w	r6, sl, r9
 8015a64:	42b3      	cmp	r3, r6
 8015a66:	b085      	sub	sp, #20
 8015a68:	bfb8      	it	lt
 8015a6a:	3101      	addlt	r1, #1
 8015a6c:	f7ff fe92 	bl	8015794 <_Balloc>
 8015a70:	b930      	cbnz	r0, 8015a80 <__multiply+0x44>
 8015a72:	4602      	mov	r2, r0
 8015a74:	4b44      	ldr	r3, [pc, #272]	@ (8015b88 <__multiply+0x14c>)
 8015a76:	4845      	ldr	r0, [pc, #276]	@ (8015b8c <__multiply+0x150>)
 8015a78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015a7c:	f7fd fe3e 	bl	80136fc <__assert_func>
 8015a80:	f100 0514 	add.w	r5, r0, #20
 8015a84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015a88:	462b      	mov	r3, r5
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	4543      	cmp	r3, r8
 8015a8e:	d321      	bcc.n	8015ad4 <__multiply+0x98>
 8015a90:	f107 0114 	add.w	r1, r7, #20
 8015a94:	f104 0214 	add.w	r2, r4, #20
 8015a98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015a9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015aa0:	9302      	str	r3, [sp, #8]
 8015aa2:	1b13      	subs	r3, r2, r4
 8015aa4:	3b15      	subs	r3, #21
 8015aa6:	f023 0303 	bic.w	r3, r3, #3
 8015aaa:	3304      	adds	r3, #4
 8015aac:	f104 0715 	add.w	r7, r4, #21
 8015ab0:	42ba      	cmp	r2, r7
 8015ab2:	bf38      	it	cc
 8015ab4:	2304      	movcc	r3, #4
 8015ab6:	9301      	str	r3, [sp, #4]
 8015ab8:	9b02      	ldr	r3, [sp, #8]
 8015aba:	9103      	str	r1, [sp, #12]
 8015abc:	428b      	cmp	r3, r1
 8015abe:	d80c      	bhi.n	8015ada <__multiply+0x9e>
 8015ac0:	2e00      	cmp	r6, #0
 8015ac2:	dd03      	ble.n	8015acc <__multiply+0x90>
 8015ac4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d05b      	beq.n	8015b84 <__multiply+0x148>
 8015acc:	6106      	str	r6, [r0, #16]
 8015ace:	b005      	add	sp, #20
 8015ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad4:	f843 2b04 	str.w	r2, [r3], #4
 8015ad8:	e7d8      	b.n	8015a8c <__multiply+0x50>
 8015ada:	f8b1 a000 	ldrh.w	sl, [r1]
 8015ade:	f1ba 0f00 	cmp.w	sl, #0
 8015ae2:	d024      	beq.n	8015b2e <__multiply+0xf2>
 8015ae4:	f104 0e14 	add.w	lr, r4, #20
 8015ae8:	46a9      	mov	r9, r5
 8015aea:	f04f 0c00 	mov.w	ip, #0
 8015aee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015af2:	f8d9 3000 	ldr.w	r3, [r9]
 8015af6:	fa1f fb87 	uxth.w	fp, r7
 8015afa:	b29b      	uxth	r3, r3
 8015afc:	fb0a 330b 	mla	r3, sl, fp, r3
 8015b00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015b04:	f8d9 7000 	ldr.w	r7, [r9]
 8015b08:	4463      	add	r3, ip
 8015b0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015b0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8015b12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015b1c:	4572      	cmp	r2, lr
 8015b1e:	f849 3b04 	str.w	r3, [r9], #4
 8015b22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015b26:	d8e2      	bhi.n	8015aee <__multiply+0xb2>
 8015b28:	9b01      	ldr	r3, [sp, #4]
 8015b2a:	f845 c003 	str.w	ip, [r5, r3]
 8015b2e:	9b03      	ldr	r3, [sp, #12]
 8015b30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015b34:	3104      	adds	r1, #4
 8015b36:	f1b9 0f00 	cmp.w	r9, #0
 8015b3a:	d021      	beq.n	8015b80 <__multiply+0x144>
 8015b3c:	682b      	ldr	r3, [r5, #0]
 8015b3e:	f104 0c14 	add.w	ip, r4, #20
 8015b42:	46ae      	mov	lr, r5
 8015b44:	f04f 0a00 	mov.w	sl, #0
 8015b48:	f8bc b000 	ldrh.w	fp, [ip]
 8015b4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015b50:	fb09 770b 	mla	r7, r9, fp, r7
 8015b54:	4457      	add	r7, sl
 8015b56:	b29b      	uxth	r3, r3
 8015b58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015b5c:	f84e 3b04 	str.w	r3, [lr], #4
 8015b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015b64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015b68:	f8be 3000 	ldrh.w	r3, [lr]
 8015b6c:	fb09 330a 	mla	r3, r9, sl, r3
 8015b70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015b74:	4562      	cmp	r2, ip
 8015b76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015b7a:	d8e5      	bhi.n	8015b48 <__multiply+0x10c>
 8015b7c:	9f01      	ldr	r7, [sp, #4]
 8015b7e:	51eb      	str	r3, [r5, r7]
 8015b80:	3504      	adds	r5, #4
 8015b82:	e799      	b.n	8015ab8 <__multiply+0x7c>
 8015b84:	3e01      	subs	r6, #1
 8015b86:	e79b      	b.n	8015ac0 <__multiply+0x84>
 8015b88:	080190d1 	.word	0x080190d1
 8015b8c:	080190e2 	.word	0x080190e2

08015b90 <__pow5mult>:
 8015b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b94:	4615      	mov	r5, r2
 8015b96:	f012 0203 	ands.w	r2, r2, #3
 8015b9a:	4607      	mov	r7, r0
 8015b9c:	460e      	mov	r6, r1
 8015b9e:	d007      	beq.n	8015bb0 <__pow5mult+0x20>
 8015ba0:	4c25      	ldr	r4, [pc, #148]	@ (8015c38 <__pow5mult+0xa8>)
 8015ba2:	3a01      	subs	r2, #1
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015baa:	f7ff fe55 	bl	8015858 <__multadd>
 8015bae:	4606      	mov	r6, r0
 8015bb0:	10ad      	asrs	r5, r5, #2
 8015bb2:	d03d      	beq.n	8015c30 <__pow5mult+0xa0>
 8015bb4:	69fc      	ldr	r4, [r7, #28]
 8015bb6:	b97c      	cbnz	r4, 8015bd8 <__pow5mult+0x48>
 8015bb8:	2010      	movs	r0, #16
 8015bba:	f7fd fdcf 	bl	801375c <malloc>
 8015bbe:	4602      	mov	r2, r0
 8015bc0:	61f8      	str	r0, [r7, #28]
 8015bc2:	b928      	cbnz	r0, 8015bd0 <__pow5mult+0x40>
 8015bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8015c3c <__pow5mult+0xac>)
 8015bc6:	481e      	ldr	r0, [pc, #120]	@ (8015c40 <__pow5mult+0xb0>)
 8015bc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015bcc:	f7fd fd96 	bl	80136fc <__assert_func>
 8015bd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015bd4:	6004      	str	r4, [r0, #0]
 8015bd6:	60c4      	str	r4, [r0, #12]
 8015bd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015bdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015be0:	b94c      	cbnz	r4, 8015bf6 <__pow5mult+0x66>
 8015be2:	f240 2171 	movw	r1, #625	@ 0x271
 8015be6:	4638      	mov	r0, r7
 8015be8:	f7ff ff12 	bl	8015a10 <__i2b>
 8015bec:	2300      	movs	r3, #0
 8015bee:	f8c8 0008 	str.w	r0, [r8, #8]
 8015bf2:	4604      	mov	r4, r0
 8015bf4:	6003      	str	r3, [r0, #0]
 8015bf6:	f04f 0900 	mov.w	r9, #0
 8015bfa:	07eb      	lsls	r3, r5, #31
 8015bfc:	d50a      	bpl.n	8015c14 <__pow5mult+0x84>
 8015bfe:	4631      	mov	r1, r6
 8015c00:	4622      	mov	r2, r4
 8015c02:	4638      	mov	r0, r7
 8015c04:	f7ff ff1a 	bl	8015a3c <__multiply>
 8015c08:	4631      	mov	r1, r6
 8015c0a:	4680      	mov	r8, r0
 8015c0c:	4638      	mov	r0, r7
 8015c0e:	f7ff fe01 	bl	8015814 <_Bfree>
 8015c12:	4646      	mov	r6, r8
 8015c14:	106d      	asrs	r5, r5, #1
 8015c16:	d00b      	beq.n	8015c30 <__pow5mult+0xa0>
 8015c18:	6820      	ldr	r0, [r4, #0]
 8015c1a:	b938      	cbnz	r0, 8015c2c <__pow5mult+0x9c>
 8015c1c:	4622      	mov	r2, r4
 8015c1e:	4621      	mov	r1, r4
 8015c20:	4638      	mov	r0, r7
 8015c22:	f7ff ff0b 	bl	8015a3c <__multiply>
 8015c26:	6020      	str	r0, [r4, #0]
 8015c28:	f8c0 9000 	str.w	r9, [r0]
 8015c2c:	4604      	mov	r4, r0
 8015c2e:	e7e4      	b.n	8015bfa <__pow5mult+0x6a>
 8015c30:	4630      	mov	r0, r6
 8015c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c36:	bf00      	nop
 8015c38:	0801913c 	.word	0x0801913c
 8015c3c:	08019062 	.word	0x08019062
 8015c40:	080190e2 	.word	0x080190e2

08015c44 <__lshift>:
 8015c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c48:	460c      	mov	r4, r1
 8015c4a:	6849      	ldr	r1, [r1, #4]
 8015c4c:	6923      	ldr	r3, [r4, #16]
 8015c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015c52:	68a3      	ldr	r3, [r4, #8]
 8015c54:	4607      	mov	r7, r0
 8015c56:	4691      	mov	r9, r2
 8015c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015c5c:	f108 0601 	add.w	r6, r8, #1
 8015c60:	42b3      	cmp	r3, r6
 8015c62:	db0b      	blt.n	8015c7c <__lshift+0x38>
 8015c64:	4638      	mov	r0, r7
 8015c66:	f7ff fd95 	bl	8015794 <_Balloc>
 8015c6a:	4605      	mov	r5, r0
 8015c6c:	b948      	cbnz	r0, 8015c82 <__lshift+0x3e>
 8015c6e:	4602      	mov	r2, r0
 8015c70:	4b28      	ldr	r3, [pc, #160]	@ (8015d14 <__lshift+0xd0>)
 8015c72:	4829      	ldr	r0, [pc, #164]	@ (8015d18 <__lshift+0xd4>)
 8015c74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015c78:	f7fd fd40 	bl	80136fc <__assert_func>
 8015c7c:	3101      	adds	r1, #1
 8015c7e:	005b      	lsls	r3, r3, #1
 8015c80:	e7ee      	b.n	8015c60 <__lshift+0x1c>
 8015c82:	2300      	movs	r3, #0
 8015c84:	f100 0114 	add.w	r1, r0, #20
 8015c88:	f100 0210 	add.w	r2, r0, #16
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	4553      	cmp	r3, sl
 8015c90:	db33      	blt.n	8015cfa <__lshift+0xb6>
 8015c92:	6920      	ldr	r0, [r4, #16]
 8015c94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c98:	f104 0314 	add.w	r3, r4, #20
 8015c9c:	f019 091f 	ands.w	r9, r9, #31
 8015ca0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015ca4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015ca8:	d02b      	beq.n	8015d02 <__lshift+0xbe>
 8015caa:	f1c9 0e20 	rsb	lr, r9, #32
 8015cae:	468a      	mov	sl, r1
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	6818      	ldr	r0, [r3, #0]
 8015cb4:	fa00 f009 	lsl.w	r0, r0, r9
 8015cb8:	4310      	orrs	r0, r2
 8015cba:	f84a 0b04 	str.w	r0, [sl], #4
 8015cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cc2:	459c      	cmp	ip, r3
 8015cc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8015cc8:	d8f3      	bhi.n	8015cb2 <__lshift+0x6e>
 8015cca:	ebac 0304 	sub.w	r3, ip, r4
 8015cce:	3b15      	subs	r3, #21
 8015cd0:	f023 0303 	bic.w	r3, r3, #3
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	f104 0015 	add.w	r0, r4, #21
 8015cda:	4584      	cmp	ip, r0
 8015cdc:	bf38      	it	cc
 8015cde:	2304      	movcc	r3, #4
 8015ce0:	50ca      	str	r2, [r1, r3]
 8015ce2:	b10a      	cbz	r2, 8015ce8 <__lshift+0xa4>
 8015ce4:	f108 0602 	add.w	r6, r8, #2
 8015ce8:	3e01      	subs	r6, #1
 8015cea:	4638      	mov	r0, r7
 8015cec:	612e      	str	r6, [r5, #16]
 8015cee:	4621      	mov	r1, r4
 8015cf0:	f7ff fd90 	bl	8015814 <_Bfree>
 8015cf4:	4628      	mov	r0, r5
 8015cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8015cfe:	3301      	adds	r3, #1
 8015d00:	e7c5      	b.n	8015c8e <__lshift+0x4a>
 8015d02:	3904      	subs	r1, #4
 8015d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d08:	f841 2f04 	str.w	r2, [r1, #4]!
 8015d0c:	459c      	cmp	ip, r3
 8015d0e:	d8f9      	bhi.n	8015d04 <__lshift+0xc0>
 8015d10:	e7ea      	b.n	8015ce8 <__lshift+0xa4>
 8015d12:	bf00      	nop
 8015d14:	080190d1 	.word	0x080190d1
 8015d18:	080190e2 	.word	0x080190e2

08015d1c <__mcmp>:
 8015d1c:	690a      	ldr	r2, [r1, #16]
 8015d1e:	4603      	mov	r3, r0
 8015d20:	6900      	ldr	r0, [r0, #16]
 8015d22:	1a80      	subs	r0, r0, r2
 8015d24:	b530      	push	{r4, r5, lr}
 8015d26:	d10e      	bne.n	8015d46 <__mcmp+0x2a>
 8015d28:	3314      	adds	r3, #20
 8015d2a:	3114      	adds	r1, #20
 8015d2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015d30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015d34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015d38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015d3c:	4295      	cmp	r5, r2
 8015d3e:	d003      	beq.n	8015d48 <__mcmp+0x2c>
 8015d40:	d205      	bcs.n	8015d4e <__mcmp+0x32>
 8015d42:	f04f 30ff 	mov.w	r0, #4294967295
 8015d46:	bd30      	pop	{r4, r5, pc}
 8015d48:	42a3      	cmp	r3, r4
 8015d4a:	d3f3      	bcc.n	8015d34 <__mcmp+0x18>
 8015d4c:	e7fb      	b.n	8015d46 <__mcmp+0x2a>
 8015d4e:	2001      	movs	r0, #1
 8015d50:	e7f9      	b.n	8015d46 <__mcmp+0x2a>
	...

08015d54 <__mdiff>:
 8015d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d58:	4689      	mov	r9, r1
 8015d5a:	4606      	mov	r6, r0
 8015d5c:	4611      	mov	r1, r2
 8015d5e:	4648      	mov	r0, r9
 8015d60:	4614      	mov	r4, r2
 8015d62:	f7ff ffdb 	bl	8015d1c <__mcmp>
 8015d66:	1e05      	subs	r5, r0, #0
 8015d68:	d112      	bne.n	8015d90 <__mdiff+0x3c>
 8015d6a:	4629      	mov	r1, r5
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	f7ff fd11 	bl	8015794 <_Balloc>
 8015d72:	4602      	mov	r2, r0
 8015d74:	b928      	cbnz	r0, 8015d82 <__mdiff+0x2e>
 8015d76:	4b3f      	ldr	r3, [pc, #252]	@ (8015e74 <__mdiff+0x120>)
 8015d78:	f240 2137 	movw	r1, #567	@ 0x237
 8015d7c:	483e      	ldr	r0, [pc, #248]	@ (8015e78 <__mdiff+0x124>)
 8015d7e:	f7fd fcbd 	bl	80136fc <__assert_func>
 8015d82:	2301      	movs	r3, #1
 8015d84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015d88:	4610      	mov	r0, r2
 8015d8a:	b003      	add	sp, #12
 8015d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d90:	bfbc      	itt	lt
 8015d92:	464b      	movlt	r3, r9
 8015d94:	46a1      	movlt	r9, r4
 8015d96:	4630      	mov	r0, r6
 8015d98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015d9c:	bfba      	itte	lt
 8015d9e:	461c      	movlt	r4, r3
 8015da0:	2501      	movlt	r5, #1
 8015da2:	2500      	movge	r5, #0
 8015da4:	f7ff fcf6 	bl	8015794 <_Balloc>
 8015da8:	4602      	mov	r2, r0
 8015daa:	b918      	cbnz	r0, 8015db4 <__mdiff+0x60>
 8015dac:	4b31      	ldr	r3, [pc, #196]	@ (8015e74 <__mdiff+0x120>)
 8015dae:	f240 2145 	movw	r1, #581	@ 0x245
 8015db2:	e7e3      	b.n	8015d7c <__mdiff+0x28>
 8015db4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015db8:	6926      	ldr	r6, [r4, #16]
 8015dba:	60c5      	str	r5, [r0, #12]
 8015dbc:	f109 0310 	add.w	r3, r9, #16
 8015dc0:	f109 0514 	add.w	r5, r9, #20
 8015dc4:	f104 0e14 	add.w	lr, r4, #20
 8015dc8:	f100 0b14 	add.w	fp, r0, #20
 8015dcc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015dd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015dd4:	9301      	str	r3, [sp, #4]
 8015dd6:	46d9      	mov	r9, fp
 8015dd8:	f04f 0c00 	mov.w	ip, #0
 8015ddc:	9b01      	ldr	r3, [sp, #4]
 8015dde:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015de2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015de6:	9301      	str	r3, [sp, #4]
 8015de8:	fa1f f38a 	uxth.w	r3, sl
 8015dec:	4619      	mov	r1, r3
 8015dee:	b283      	uxth	r3, r0
 8015df0:	1acb      	subs	r3, r1, r3
 8015df2:	0c00      	lsrs	r0, r0, #16
 8015df4:	4463      	add	r3, ip
 8015df6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015dfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015dfe:	b29b      	uxth	r3, r3
 8015e00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015e04:	4576      	cmp	r6, lr
 8015e06:	f849 3b04 	str.w	r3, [r9], #4
 8015e0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015e0e:	d8e5      	bhi.n	8015ddc <__mdiff+0x88>
 8015e10:	1b33      	subs	r3, r6, r4
 8015e12:	3b15      	subs	r3, #21
 8015e14:	f023 0303 	bic.w	r3, r3, #3
 8015e18:	3415      	adds	r4, #21
 8015e1a:	3304      	adds	r3, #4
 8015e1c:	42a6      	cmp	r6, r4
 8015e1e:	bf38      	it	cc
 8015e20:	2304      	movcc	r3, #4
 8015e22:	441d      	add	r5, r3
 8015e24:	445b      	add	r3, fp
 8015e26:	461e      	mov	r6, r3
 8015e28:	462c      	mov	r4, r5
 8015e2a:	4544      	cmp	r4, r8
 8015e2c:	d30e      	bcc.n	8015e4c <__mdiff+0xf8>
 8015e2e:	f108 0103 	add.w	r1, r8, #3
 8015e32:	1b49      	subs	r1, r1, r5
 8015e34:	f021 0103 	bic.w	r1, r1, #3
 8015e38:	3d03      	subs	r5, #3
 8015e3a:	45a8      	cmp	r8, r5
 8015e3c:	bf38      	it	cc
 8015e3e:	2100      	movcc	r1, #0
 8015e40:	440b      	add	r3, r1
 8015e42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015e46:	b191      	cbz	r1, 8015e6e <__mdiff+0x11a>
 8015e48:	6117      	str	r7, [r2, #16]
 8015e4a:	e79d      	b.n	8015d88 <__mdiff+0x34>
 8015e4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8015e50:	46e6      	mov	lr, ip
 8015e52:	0c08      	lsrs	r0, r1, #16
 8015e54:	fa1c fc81 	uxtah	ip, ip, r1
 8015e58:	4471      	add	r1, lr
 8015e5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015e5e:	b289      	uxth	r1, r1
 8015e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015e64:	f846 1b04 	str.w	r1, [r6], #4
 8015e68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015e6c:	e7dd      	b.n	8015e2a <__mdiff+0xd6>
 8015e6e:	3f01      	subs	r7, #1
 8015e70:	e7e7      	b.n	8015e42 <__mdiff+0xee>
 8015e72:	bf00      	nop
 8015e74:	080190d1 	.word	0x080190d1
 8015e78:	080190e2 	.word	0x080190e2

08015e7c <__ulp>:
 8015e7c:	b082      	sub	sp, #8
 8015e7e:	ed8d 0b00 	vstr	d0, [sp]
 8015e82:	9a01      	ldr	r2, [sp, #4]
 8015e84:	4b0f      	ldr	r3, [pc, #60]	@ (8015ec4 <__ulp+0x48>)
 8015e86:	4013      	ands	r3, r2
 8015e88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	dc08      	bgt.n	8015ea2 <__ulp+0x26>
 8015e90:	425b      	negs	r3, r3
 8015e92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8015e96:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015e9a:	da04      	bge.n	8015ea6 <__ulp+0x2a>
 8015e9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015ea0:	4113      	asrs	r3, r2
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	e008      	b.n	8015eb8 <__ulp+0x3c>
 8015ea6:	f1a2 0314 	sub.w	r3, r2, #20
 8015eaa:	2b1e      	cmp	r3, #30
 8015eac:	bfda      	itte	le
 8015eae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8015eb2:	40da      	lsrle	r2, r3
 8015eb4:	2201      	movgt	r2, #1
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	4619      	mov	r1, r3
 8015eba:	4610      	mov	r0, r2
 8015ebc:	ec41 0b10 	vmov	d0, r0, r1
 8015ec0:	b002      	add	sp, #8
 8015ec2:	4770      	bx	lr
 8015ec4:	7ff00000 	.word	0x7ff00000

08015ec8 <__b2d>:
 8015ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ecc:	6906      	ldr	r6, [r0, #16]
 8015ece:	f100 0814 	add.w	r8, r0, #20
 8015ed2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015ed6:	1f37      	subs	r7, r6, #4
 8015ed8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015edc:	4610      	mov	r0, r2
 8015ede:	f7ff fd4b 	bl	8015978 <__hi0bits>
 8015ee2:	f1c0 0320 	rsb	r3, r0, #32
 8015ee6:	280a      	cmp	r0, #10
 8015ee8:	600b      	str	r3, [r1, #0]
 8015eea:	491b      	ldr	r1, [pc, #108]	@ (8015f58 <__b2d+0x90>)
 8015eec:	dc15      	bgt.n	8015f1a <__b2d+0x52>
 8015eee:	f1c0 0c0b 	rsb	ip, r0, #11
 8015ef2:	fa22 f30c 	lsr.w	r3, r2, ip
 8015ef6:	45b8      	cmp	r8, r7
 8015ef8:	ea43 0501 	orr.w	r5, r3, r1
 8015efc:	bf34      	ite	cc
 8015efe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015f02:	2300      	movcs	r3, #0
 8015f04:	3015      	adds	r0, #21
 8015f06:	fa02 f000 	lsl.w	r0, r2, r0
 8015f0a:	fa23 f30c 	lsr.w	r3, r3, ip
 8015f0e:	4303      	orrs	r3, r0
 8015f10:	461c      	mov	r4, r3
 8015f12:	ec45 4b10 	vmov	d0, r4, r5
 8015f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f1a:	45b8      	cmp	r8, r7
 8015f1c:	bf3a      	itte	cc
 8015f1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015f22:	f1a6 0708 	subcc.w	r7, r6, #8
 8015f26:	2300      	movcs	r3, #0
 8015f28:	380b      	subs	r0, #11
 8015f2a:	d012      	beq.n	8015f52 <__b2d+0x8a>
 8015f2c:	f1c0 0120 	rsb	r1, r0, #32
 8015f30:	fa23 f401 	lsr.w	r4, r3, r1
 8015f34:	4082      	lsls	r2, r0
 8015f36:	4322      	orrs	r2, r4
 8015f38:	4547      	cmp	r7, r8
 8015f3a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8015f3e:	bf8c      	ite	hi
 8015f40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015f44:	2200      	movls	r2, #0
 8015f46:	4083      	lsls	r3, r0
 8015f48:	40ca      	lsrs	r2, r1
 8015f4a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015f4e:	4313      	orrs	r3, r2
 8015f50:	e7de      	b.n	8015f10 <__b2d+0x48>
 8015f52:	ea42 0501 	orr.w	r5, r2, r1
 8015f56:	e7db      	b.n	8015f10 <__b2d+0x48>
 8015f58:	3ff00000 	.word	0x3ff00000

08015f5c <__d2b>:
 8015f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f60:	460f      	mov	r7, r1
 8015f62:	2101      	movs	r1, #1
 8015f64:	ec59 8b10 	vmov	r8, r9, d0
 8015f68:	4616      	mov	r6, r2
 8015f6a:	f7ff fc13 	bl	8015794 <_Balloc>
 8015f6e:	4604      	mov	r4, r0
 8015f70:	b930      	cbnz	r0, 8015f80 <__d2b+0x24>
 8015f72:	4602      	mov	r2, r0
 8015f74:	4b23      	ldr	r3, [pc, #140]	@ (8016004 <__d2b+0xa8>)
 8015f76:	4824      	ldr	r0, [pc, #144]	@ (8016008 <__d2b+0xac>)
 8015f78:	f240 310f 	movw	r1, #783	@ 0x30f
 8015f7c:	f7fd fbbe 	bl	80136fc <__assert_func>
 8015f80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015f84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015f88:	b10d      	cbz	r5, 8015f8e <__d2b+0x32>
 8015f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015f8e:	9301      	str	r3, [sp, #4]
 8015f90:	f1b8 0300 	subs.w	r3, r8, #0
 8015f94:	d023      	beq.n	8015fde <__d2b+0x82>
 8015f96:	4668      	mov	r0, sp
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	f7ff fd0c 	bl	80159b6 <__lo0bits>
 8015f9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015fa2:	b1d0      	cbz	r0, 8015fda <__d2b+0x7e>
 8015fa4:	f1c0 0320 	rsb	r3, r0, #32
 8015fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8015fac:	430b      	orrs	r3, r1
 8015fae:	40c2      	lsrs	r2, r0
 8015fb0:	6163      	str	r3, [r4, #20]
 8015fb2:	9201      	str	r2, [sp, #4]
 8015fb4:	9b01      	ldr	r3, [sp, #4]
 8015fb6:	61a3      	str	r3, [r4, #24]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	bf0c      	ite	eq
 8015fbc:	2201      	moveq	r2, #1
 8015fbe:	2202      	movne	r2, #2
 8015fc0:	6122      	str	r2, [r4, #16]
 8015fc2:	b1a5      	cbz	r5, 8015fee <__d2b+0x92>
 8015fc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015fc8:	4405      	add	r5, r0
 8015fca:	603d      	str	r5, [r7, #0]
 8015fcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015fd0:	6030      	str	r0, [r6, #0]
 8015fd2:	4620      	mov	r0, r4
 8015fd4:	b003      	add	sp, #12
 8015fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fda:	6161      	str	r1, [r4, #20]
 8015fdc:	e7ea      	b.n	8015fb4 <__d2b+0x58>
 8015fde:	a801      	add	r0, sp, #4
 8015fe0:	f7ff fce9 	bl	80159b6 <__lo0bits>
 8015fe4:	9b01      	ldr	r3, [sp, #4]
 8015fe6:	6163      	str	r3, [r4, #20]
 8015fe8:	3020      	adds	r0, #32
 8015fea:	2201      	movs	r2, #1
 8015fec:	e7e8      	b.n	8015fc0 <__d2b+0x64>
 8015fee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015ff2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015ff6:	6038      	str	r0, [r7, #0]
 8015ff8:	6918      	ldr	r0, [r3, #16]
 8015ffa:	f7ff fcbd 	bl	8015978 <__hi0bits>
 8015ffe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016002:	e7e5      	b.n	8015fd0 <__d2b+0x74>
 8016004:	080190d1 	.word	0x080190d1
 8016008:	080190e2 	.word	0x080190e2

0801600c <__ratio>:
 801600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016010:	b085      	sub	sp, #20
 8016012:	e9cd 1000 	strd	r1, r0, [sp]
 8016016:	a902      	add	r1, sp, #8
 8016018:	f7ff ff56 	bl	8015ec8 <__b2d>
 801601c:	9800      	ldr	r0, [sp, #0]
 801601e:	a903      	add	r1, sp, #12
 8016020:	ec55 4b10 	vmov	r4, r5, d0
 8016024:	f7ff ff50 	bl	8015ec8 <__b2d>
 8016028:	9b01      	ldr	r3, [sp, #4]
 801602a:	6919      	ldr	r1, [r3, #16]
 801602c:	9b00      	ldr	r3, [sp, #0]
 801602e:	691b      	ldr	r3, [r3, #16]
 8016030:	1ac9      	subs	r1, r1, r3
 8016032:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016036:	1a9b      	subs	r3, r3, r2
 8016038:	ec5b ab10 	vmov	sl, fp, d0
 801603c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016040:	2b00      	cmp	r3, #0
 8016042:	bfce      	itee	gt
 8016044:	462a      	movgt	r2, r5
 8016046:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801604a:	465a      	movle	r2, fp
 801604c:	462f      	mov	r7, r5
 801604e:	46d9      	mov	r9, fp
 8016050:	bfcc      	ite	gt
 8016052:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016056:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801605a:	464b      	mov	r3, r9
 801605c:	4652      	mov	r2, sl
 801605e:	4620      	mov	r0, r4
 8016060:	4639      	mov	r1, r7
 8016062:	f7ea fc1b 	bl	800089c <__aeabi_ddiv>
 8016066:	ec41 0b10 	vmov	d0, r0, r1
 801606a:	b005      	add	sp, #20
 801606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016070 <__copybits>:
 8016070:	3901      	subs	r1, #1
 8016072:	b570      	push	{r4, r5, r6, lr}
 8016074:	1149      	asrs	r1, r1, #5
 8016076:	6914      	ldr	r4, [r2, #16]
 8016078:	3101      	adds	r1, #1
 801607a:	f102 0314 	add.w	r3, r2, #20
 801607e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016082:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016086:	1f05      	subs	r5, r0, #4
 8016088:	42a3      	cmp	r3, r4
 801608a:	d30c      	bcc.n	80160a6 <__copybits+0x36>
 801608c:	1aa3      	subs	r3, r4, r2
 801608e:	3b11      	subs	r3, #17
 8016090:	f023 0303 	bic.w	r3, r3, #3
 8016094:	3211      	adds	r2, #17
 8016096:	42a2      	cmp	r2, r4
 8016098:	bf88      	it	hi
 801609a:	2300      	movhi	r3, #0
 801609c:	4418      	add	r0, r3
 801609e:	2300      	movs	r3, #0
 80160a0:	4288      	cmp	r0, r1
 80160a2:	d305      	bcc.n	80160b0 <__copybits+0x40>
 80160a4:	bd70      	pop	{r4, r5, r6, pc}
 80160a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80160aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80160ae:	e7eb      	b.n	8016088 <__copybits+0x18>
 80160b0:	f840 3b04 	str.w	r3, [r0], #4
 80160b4:	e7f4      	b.n	80160a0 <__copybits+0x30>

080160b6 <__any_on>:
 80160b6:	f100 0214 	add.w	r2, r0, #20
 80160ba:	6900      	ldr	r0, [r0, #16]
 80160bc:	114b      	asrs	r3, r1, #5
 80160be:	4298      	cmp	r0, r3
 80160c0:	b510      	push	{r4, lr}
 80160c2:	db11      	blt.n	80160e8 <__any_on+0x32>
 80160c4:	dd0a      	ble.n	80160dc <__any_on+0x26>
 80160c6:	f011 011f 	ands.w	r1, r1, #31
 80160ca:	d007      	beq.n	80160dc <__any_on+0x26>
 80160cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80160d0:	fa24 f001 	lsr.w	r0, r4, r1
 80160d4:	fa00 f101 	lsl.w	r1, r0, r1
 80160d8:	428c      	cmp	r4, r1
 80160da:	d10b      	bne.n	80160f4 <__any_on+0x3e>
 80160dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80160e0:	4293      	cmp	r3, r2
 80160e2:	d803      	bhi.n	80160ec <__any_on+0x36>
 80160e4:	2000      	movs	r0, #0
 80160e6:	bd10      	pop	{r4, pc}
 80160e8:	4603      	mov	r3, r0
 80160ea:	e7f7      	b.n	80160dc <__any_on+0x26>
 80160ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80160f0:	2900      	cmp	r1, #0
 80160f2:	d0f5      	beq.n	80160e0 <__any_on+0x2a>
 80160f4:	2001      	movs	r0, #1
 80160f6:	e7f6      	b.n	80160e6 <__any_on+0x30>

080160f8 <sulp>:
 80160f8:	b570      	push	{r4, r5, r6, lr}
 80160fa:	4604      	mov	r4, r0
 80160fc:	460d      	mov	r5, r1
 80160fe:	ec45 4b10 	vmov	d0, r4, r5
 8016102:	4616      	mov	r6, r2
 8016104:	f7ff feba 	bl	8015e7c <__ulp>
 8016108:	ec51 0b10 	vmov	r0, r1, d0
 801610c:	b17e      	cbz	r6, 801612e <sulp+0x36>
 801610e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016112:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016116:	2b00      	cmp	r3, #0
 8016118:	dd09      	ble.n	801612e <sulp+0x36>
 801611a:	051b      	lsls	r3, r3, #20
 801611c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016120:	2400      	movs	r4, #0
 8016122:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016126:	4622      	mov	r2, r4
 8016128:	462b      	mov	r3, r5
 801612a:	f7ea fa8d 	bl	8000648 <__aeabi_dmul>
 801612e:	ec41 0b10 	vmov	d0, r0, r1
 8016132:	bd70      	pop	{r4, r5, r6, pc}
 8016134:	0000      	movs	r0, r0
	...

08016138 <_strtod_l>:
 8016138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613c:	b09f      	sub	sp, #124	@ 0x7c
 801613e:	460c      	mov	r4, r1
 8016140:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016142:	2200      	movs	r2, #0
 8016144:	921a      	str	r2, [sp, #104]	@ 0x68
 8016146:	9005      	str	r0, [sp, #20]
 8016148:	f04f 0a00 	mov.w	sl, #0
 801614c:	f04f 0b00 	mov.w	fp, #0
 8016150:	460a      	mov	r2, r1
 8016152:	9219      	str	r2, [sp, #100]	@ 0x64
 8016154:	7811      	ldrb	r1, [r2, #0]
 8016156:	292b      	cmp	r1, #43	@ 0x2b
 8016158:	d04a      	beq.n	80161f0 <_strtod_l+0xb8>
 801615a:	d838      	bhi.n	80161ce <_strtod_l+0x96>
 801615c:	290d      	cmp	r1, #13
 801615e:	d832      	bhi.n	80161c6 <_strtod_l+0x8e>
 8016160:	2908      	cmp	r1, #8
 8016162:	d832      	bhi.n	80161ca <_strtod_l+0x92>
 8016164:	2900      	cmp	r1, #0
 8016166:	d03b      	beq.n	80161e0 <_strtod_l+0xa8>
 8016168:	2200      	movs	r2, #0
 801616a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801616c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801616e:	782a      	ldrb	r2, [r5, #0]
 8016170:	2a30      	cmp	r2, #48	@ 0x30
 8016172:	f040 80b3 	bne.w	80162dc <_strtod_l+0x1a4>
 8016176:	786a      	ldrb	r2, [r5, #1]
 8016178:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801617c:	2a58      	cmp	r2, #88	@ 0x58
 801617e:	d16e      	bne.n	801625e <_strtod_l+0x126>
 8016180:	9302      	str	r3, [sp, #8]
 8016182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016184:	9301      	str	r3, [sp, #4]
 8016186:	ab1a      	add	r3, sp, #104	@ 0x68
 8016188:	9300      	str	r3, [sp, #0]
 801618a:	4a8e      	ldr	r2, [pc, #568]	@ (80163c4 <_strtod_l+0x28c>)
 801618c:	9805      	ldr	r0, [sp, #20]
 801618e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016190:	a919      	add	r1, sp, #100	@ 0x64
 8016192:	f001 faa9 	bl	80176e8 <__gethex>
 8016196:	f010 060f 	ands.w	r6, r0, #15
 801619a:	4604      	mov	r4, r0
 801619c:	d005      	beq.n	80161aa <_strtod_l+0x72>
 801619e:	2e06      	cmp	r6, #6
 80161a0:	d128      	bne.n	80161f4 <_strtod_l+0xbc>
 80161a2:	3501      	adds	r5, #1
 80161a4:	2300      	movs	r3, #0
 80161a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80161a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80161aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	f040 858e 	bne.w	8016cce <_strtod_l+0xb96>
 80161b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80161b4:	b1cb      	cbz	r3, 80161ea <_strtod_l+0xb2>
 80161b6:	4652      	mov	r2, sl
 80161b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80161bc:	ec43 2b10 	vmov	d0, r2, r3
 80161c0:	b01f      	add	sp, #124	@ 0x7c
 80161c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c6:	2920      	cmp	r1, #32
 80161c8:	d1ce      	bne.n	8016168 <_strtod_l+0x30>
 80161ca:	3201      	adds	r2, #1
 80161cc:	e7c1      	b.n	8016152 <_strtod_l+0x1a>
 80161ce:	292d      	cmp	r1, #45	@ 0x2d
 80161d0:	d1ca      	bne.n	8016168 <_strtod_l+0x30>
 80161d2:	2101      	movs	r1, #1
 80161d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80161d6:	1c51      	adds	r1, r2, #1
 80161d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80161da:	7852      	ldrb	r2, [r2, #1]
 80161dc:	2a00      	cmp	r2, #0
 80161de:	d1c5      	bne.n	801616c <_strtod_l+0x34>
 80161e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80161e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	f040 8570 	bne.w	8016cca <_strtod_l+0xb92>
 80161ea:	4652      	mov	r2, sl
 80161ec:	465b      	mov	r3, fp
 80161ee:	e7e5      	b.n	80161bc <_strtod_l+0x84>
 80161f0:	2100      	movs	r1, #0
 80161f2:	e7ef      	b.n	80161d4 <_strtod_l+0x9c>
 80161f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80161f6:	b13a      	cbz	r2, 8016208 <_strtod_l+0xd0>
 80161f8:	2135      	movs	r1, #53	@ 0x35
 80161fa:	a81c      	add	r0, sp, #112	@ 0x70
 80161fc:	f7ff ff38 	bl	8016070 <__copybits>
 8016200:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016202:	9805      	ldr	r0, [sp, #20]
 8016204:	f7ff fb06 	bl	8015814 <_Bfree>
 8016208:	3e01      	subs	r6, #1
 801620a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801620c:	2e04      	cmp	r6, #4
 801620e:	d806      	bhi.n	801621e <_strtod_l+0xe6>
 8016210:	e8df f006 	tbb	[pc, r6]
 8016214:	201d0314 	.word	0x201d0314
 8016218:	14          	.byte	0x14
 8016219:	00          	.byte	0x00
 801621a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801621e:	05e1      	lsls	r1, r4, #23
 8016220:	bf48      	it	mi
 8016222:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016226:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801622a:	0d1b      	lsrs	r3, r3, #20
 801622c:	051b      	lsls	r3, r3, #20
 801622e:	2b00      	cmp	r3, #0
 8016230:	d1bb      	bne.n	80161aa <_strtod_l+0x72>
 8016232:	f7fe fbd7 	bl	80149e4 <__errno>
 8016236:	2322      	movs	r3, #34	@ 0x22
 8016238:	6003      	str	r3, [r0, #0]
 801623a:	e7b6      	b.n	80161aa <_strtod_l+0x72>
 801623c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016240:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016244:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016248:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801624c:	e7e7      	b.n	801621e <_strtod_l+0xe6>
 801624e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80163cc <_strtod_l+0x294>
 8016252:	e7e4      	b.n	801621e <_strtod_l+0xe6>
 8016254:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016258:	f04f 3aff 	mov.w	sl, #4294967295
 801625c:	e7df      	b.n	801621e <_strtod_l+0xe6>
 801625e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016260:	1c5a      	adds	r2, r3, #1
 8016262:	9219      	str	r2, [sp, #100]	@ 0x64
 8016264:	785b      	ldrb	r3, [r3, #1]
 8016266:	2b30      	cmp	r3, #48	@ 0x30
 8016268:	d0f9      	beq.n	801625e <_strtod_l+0x126>
 801626a:	2b00      	cmp	r3, #0
 801626c:	d09d      	beq.n	80161aa <_strtod_l+0x72>
 801626e:	2301      	movs	r3, #1
 8016270:	9309      	str	r3, [sp, #36]	@ 0x24
 8016272:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016274:	930c      	str	r3, [sp, #48]	@ 0x30
 8016276:	2300      	movs	r3, #0
 8016278:	9308      	str	r3, [sp, #32]
 801627a:	930a      	str	r3, [sp, #40]	@ 0x28
 801627c:	461f      	mov	r7, r3
 801627e:	220a      	movs	r2, #10
 8016280:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016282:	7805      	ldrb	r5, [r0, #0]
 8016284:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016288:	b2d9      	uxtb	r1, r3
 801628a:	2909      	cmp	r1, #9
 801628c:	d928      	bls.n	80162e0 <_strtod_l+0x1a8>
 801628e:	494e      	ldr	r1, [pc, #312]	@ (80163c8 <_strtod_l+0x290>)
 8016290:	2201      	movs	r2, #1
 8016292:	f001 f991 	bl	80175b8 <strncmp>
 8016296:	2800      	cmp	r0, #0
 8016298:	d032      	beq.n	8016300 <_strtod_l+0x1c8>
 801629a:	2000      	movs	r0, #0
 801629c:	462a      	mov	r2, r5
 801629e:	4681      	mov	r9, r0
 80162a0:	463d      	mov	r5, r7
 80162a2:	4603      	mov	r3, r0
 80162a4:	2a65      	cmp	r2, #101	@ 0x65
 80162a6:	d001      	beq.n	80162ac <_strtod_l+0x174>
 80162a8:	2a45      	cmp	r2, #69	@ 0x45
 80162aa:	d114      	bne.n	80162d6 <_strtod_l+0x19e>
 80162ac:	b91d      	cbnz	r5, 80162b6 <_strtod_l+0x17e>
 80162ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80162b0:	4302      	orrs	r2, r0
 80162b2:	d095      	beq.n	80161e0 <_strtod_l+0xa8>
 80162b4:	2500      	movs	r5, #0
 80162b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80162b8:	1c62      	adds	r2, r4, #1
 80162ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80162bc:	7862      	ldrb	r2, [r4, #1]
 80162be:	2a2b      	cmp	r2, #43	@ 0x2b
 80162c0:	d077      	beq.n	80163b2 <_strtod_l+0x27a>
 80162c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80162c4:	d07b      	beq.n	80163be <_strtod_l+0x286>
 80162c6:	f04f 0c00 	mov.w	ip, #0
 80162ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80162ce:	2909      	cmp	r1, #9
 80162d0:	f240 8082 	bls.w	80163d8 <_strtod_l+0x2a0>
 80162d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80162d6:	f04f 0800 	mov.w	r8, #0
 80162da:	e0a2      	b.n	8016422 <_strtod_l+0x2ea>
 80162dc:	2300      	movs	r3, #0
 80162de:	e7c7      	b.n	8016270 <_strtod_l+0x138>
 80162e0:	2f08      	cmp	r7, #8
 80162e2:	bfd5      	itete	le
 80162e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80162e6:	9908      	ldrgt	r1, [sp, #32]
 80162e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80162ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80162f0:	f100 0001 	add.w	r0, r0, #1
 80162f4:	bfd4      	ite	le
 80162f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80162f8:	9308      	strgt	r3, [sp, #32]
 80162fa:	3701      	adds	r7, #1
 80162fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80162fe:	e7bf      	b.n	8016280 <_strtod_l+0x148>
 8016300:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016302:	1c5a      	adds	r2, r3, #1
 8016304:	9219      	str	r2, [sp, #100]	@ 0x64
 8016306:	785a      	ldrb	r2, [r3, #1]
 8016308:	b37f      	cbz	r7, 801636a <_strtod_l+0x232>
 801630a:	4681      	mov	r9, r0
 801630c:	463d      	mov	r5, r7
 801630e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016312:	2b09      	cmp	r3, #9
 8016314:	d912      	bls.n	801633c <_strtod_l+0x204>
 8016316:	2301      	movs	r3, #1
 8016318:	e7c4      	b.n	80162a4 <_strtod_l+0x16c>
 801631a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801631c:	1c5a      	adds	r2, r3, #1
 801631e:	9219      	str	r2, [sp, #100]	@ 0x64
 8016320:	785a      	ldrb	r2, [r3, #1]
 8016322:	3001      	adds	r0, #1
 8016324:	2a30      	cmp	r2, #48	@ 0x30
 8016326:	d0f8      	beq.n	801631a <_strtod_l+0x1e2>
 8016328:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801632c:	2b08      	cmp	r3, #8
 801632e:	f200 84d3 	bhi.w	8016cd8 <_strtod_l+0xba0>
 8016332:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016334:	930c      	str	r3, [sp, #48]	@ 0x30
 8016336:	4681      	mov	r9, r0
 8016338:	2000      	movs	r0, #0
 801633a:	4605      	mov	r5, r0
 801633c:	3a30      	subs	r2, #48	@ 0x30
 801633e:	f100 0301 	add.w	r3, r0, #1
 8016342:	d02a      	beq.n	801639a <_strtod_l+0x262>
 8016344:	4499      	add	r9, r3
 8016346:	eb00 0c05 	add.w	ip, r0, r5
 801634a:	462b      	mov	r3, r5
 801634c:	210a      	movs	r1, #10
 801634e:	4563      	cmp	r3, ip
 8016350:	d10d      	bne.n	801636e <_strtod_l+0x236>
 8016352:	1c69      	adds	r1, r5, #1
 8016354:	4401      	add	r1, r0
 8016356:	4428      	add	r0, r5
 8016358:	2808      	cmp	r0, #8
 801635a:	dc16      	bgt.n	801638a <_strtod_l+0x252>
 801635c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801635e:	230a      	movs	r3, #10
 8016360:	fb03 2300 	mla	r3, r3, r0, r2
 8016364:	930a      	str	r3, [sp, #40]	@ 0x28
 8016366:	2300      	movs	r3, #0
 8016368:	e018      	b.n	801639c <_strtod_l+0x264>
 801636a:	4638      	mov	r0, r7
 801636c:	e7da      	b.n	8016324 <_strtod_l+0x1ec>
 801636e:	2b08      	cmp	r3, #8
 8016370:	f103 0301 	add.w	r3, r3, #1
 8016374:	dc03      	bgt.n	801637e <_strtod_l+0x246>
 8016376:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016378:	434e      	muls	r6, r1
 801637a:	960a      	str	r6, [sp, #40]	@ 0x28
 801637c:	e7e7      	b.n	801634e <_strtod_l+0x216>
 801637e:	2b10      	cmp	r3, #16
 8016380:	bfde      	ittt	le
 8016382:	9e08      	ldrle	r6, [sp, #32]
 8016384:	434e      	mulle	r6, r1
 8016386:	9608      	strle	r6, [sp, #32]
 8016388:	e7e1      	b.n	801634e <_strtod_l+0x216>
 801638a:	280f      	cmp	r0, #15
 801638c:	dceb      	bgt.n	8016366 <_strtod_l+0x22e>
 801638e:	9808      	ldr	r0, [sp, #32]
 8016390:	230a      	movs	r3, #10
 8016392:	fb03 2300 	mla	r3, r3, r0, r2
 8016396:	9308      	str	r3, [sp, #32]
 8016398:	e7e5      	b.n	8016366 <_strtod_l+0x22e>
 801639a:	4629      	mov	r1, r5
 801639c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801639e:	1c50      	adds	r0, r2, #1
 80163a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80163a2:	7852      	ldrb	r2, [r2, #1]
 80163a4:	4618      	mov	r0, r3
 80163a6:	460d      	mov	r5, r1
 80163a8:	e7b1      	b.n	801630e <_strtod_l+0x1d6>
 80163aa:	f04f 0900 	mov.w	r9, #0
 80163ae:	2301      	movs	r3, #1
 80163b0:	e77d      	b.n	80162ae <_strtod_l+0x176>
 80163b2:	f04f 0c00 	mov.w	ip, #0
 80163b6:	1ca2      	adds	r2, r4, #2
 80163b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80163ba:	78a2      	ldrb	r2, [r4, #2]
 80163bc:	e785      	b.n	80162ca <_strtod_l+0x192>
 80163be:	f04f 0c01 	mov.w	ip, #1
 80163c2:	e7f8      	b.n	80163b6 <_strtod_l+0x27e>
 80163c4:	08019250 	.word	0x08019250
 80163c8:	08019238 	.word	0x08019238
 80163cc:	7ff00000 	.word	0x7ff00000
 80163d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80163d2:	1c51      	adds	r1, r2, #1
 80163d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80163d6:	7852      	ldrb	r2, [r2, #1]
 80163d8:	2a30      	cmp	r2, #48	@ 0x30
 80163da:	d0f9      	beq.n	80163d0 <_strtod_l+0x298>
 80163dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80163e0:	2908      	cmp	r1, #8
 80163e2:	f63f af78 	bhi.w	80162d6 <_strtod_l+0x19e>
 80163e6:	3a30      	subs	r2, #48	@ 0x30
 80163e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80163ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80163ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80163ee:	f04f 080a 	mov.w	r8, #10
 80163f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80163f4:	1c56      	adds	r6, r2, #1
 80163f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80163f8:	7852      	ldrb	r2, [r2, #1]
 80163fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80163fe:	f1be 0f09 	cmp.w	lr, #9
 8016402:	d939      	bls.n	8016478 <_strtod_l+0x340>
 8016404:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016406:	1a76      	subs	r6, r6, r1
 8016408:	2e08      	cmp	r6, #8
 801640a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801640e:	dc03      	bgt.n	8016418 <_strtod_l+0x2e0>
 8016410:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016412:	4588      	cmp	r8, r1
 8016414:	bfa8      	it	ge
 8016416:	4688      	movge	r8, r1
 8016418:	f1bc 0f00 	cmp.w	ip, #0
 801641c:	d001      	beq.n	8016422 <_strtod_l+0x2ea>
 801641e:	f1c8 0800 	rsb	r8, r8, #0
 8016422:	2d00      	cmp	r5, #0
 8016424:	d14e      	bne.n	80164c4 <_strtod_l+0x38c>
 8016426:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016428:	4308      	orrs	r0, r1
 801642a:	f47f aebe 	bne.w	80161aa <_strtod_l+0x72>
 801642e:	2b00      	cmp	r3, #0
 8016430:	f47f aed6 	bne.w	80161e0 <_strtod_l+0xa8>
 8016434:	2a69      	cmp	r2, #105	@ 0x69
 8016436:	d028      	beq.n	801648a <_strtod_l+0x352>
 8016438:	dc25      	bgt.n	8016486 <_strtod_l+0x34e>
 801643a:	2a49      	cmp	r2, #73	@ 0x49
 801643c:	d025      	beq.n	801648a <_strtod_l+0x352>
 801643e:	2a4e      	cmp	r2, #78	@ 0x4e
 8016440:	f47f aece 	bne.w	80161e0 <_strtod_l+0xa8>
 8016444:	499b      	ldr	r1, [pc, #620]	@ (80166b4 <_strtod_l+0x57c>)
 8016446:	a819      	add	r0, sp, #100	@ 0x64
 8016448:	f001 fb70 	bl	8017b2c <__match>
 801644c:	2800      	cmp	r0, #0
 801644e:	f43f aec7 	beq.w	80161e0 <_strtod_l+0xa8>
 8016452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	2b28      	cmp	r3, #40	@ 0x28
 8016458:	d12e      	bne.n	80164b8 <_strtod_l+0x380>
 801645a:	4997      	ldr	r1, [pc, #604]	@ (80166b8 <_strtod_l+0x580>)
 801645c:	aa1c      	add	r2, sp, #112	@ 0x70
 801645e:	a819      	add	r0, sp, #100	@ 0x64
 8016460:	f001 fb78 	bl	8017b54 <__hexnan>
 8016464:	2805      	cmp	r0, #5
 8016466:	d127      	bne.n	80164b8 <_strtod_l+0x380>
 8016468:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801646a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801646e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016472:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016476:	e698      	b.n	80161aa <_strtod_l+0x72>
 8016478:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801647a:	fb08 2101 	mla	r1, r8, r1, r2
 801647e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016482:	920e      	str	r2, [sp, #56]	@ 0x38
 8016484:	e7b5      	b.n	80163f2 <_strtod_l+0x2ba>
 8016486:	2a6e      	cmp	r2, #110	@ 0x6e
 8016488:	e7da      	b.n	8016440 <_strtod_l+0x308>
 801648a:	498c      	ldr	r1, [pc, #560]	@ (80166bc <_strtod_l+0x584>)
 801648c:	a819      	add	r0, sp, #100	@ 0x64
 801648e:	f001 fb4d 	bl	8017b2c <__match>
 8016492:	2800      	cmp	r0, #0
 8016494:	f43f aea4 	beq.w	80161e0 <_strtod_l+0xa8>
 8016498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801649a:	4989      	ldr	r1, [pc, #548]	@ (80166c0 <_strtod_l+0x588>)
 801649c:	3b01      	subs	r3, #1
 801649e:	a819      	add	r0, sp, #100	@ 0x64
 80164a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80164a2:	f001 fb43 	bl	8017b2c <__match>
 80164a6:	b910      	cbnz	r0, 80164ae <_strtod_l+0x376>
 80164a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164aa:	3301      	adds	r3, #1
 80164ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80164ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80166d0 <_strtod_l+0x598>
 80164b2:	f04f 0a00 	mov.w	sl, #0
 80164b6:	e678      	b.n	80161aa <_strtod_l+0x72>
 80164b8:	4882      	ldr	r0, [pc, #520]	@ (80166c4 <_strtod_l+0x58c>)
 80164ba:	f001 f891 	bl	80175e0 <nan>
 80164be:	ec5b ab10 	vmov	sl, fp, d0
 80164c2:	e672      	b.n	80161aa <_strtod_l+0x72>
 80164c4:	eba8 0309 	sub.w	r3, r8, r9
 80164c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80164ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80164cc:	2f00      	cmp	r7, #0
 80164ce:	bf08      	it	eq
 80164d0:	462f      	moveq	r7, r5
 80164d2:	2d10      	cmp	r5, #16
 80164d4:	462c      	mov	r4, r5
 80164d6:	bfa8      	it	ge
 80164d8:	2410      	movge	r4, #16
 80164da:	f7ea f83b 	bl	8000554 <__aeabi_ui2d>
 80164de:	2d09      	cmp	r5, #9
 80164e0:	4682      	mov	sl, r0
 80164e2:	468b      	mov	fp, r1
 80164e4:	dc13      	bgt.n	801650e <_strtod_l+0x3d6>
 80164e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f43f ae5e 	beq.w	80161aa <_strtod_l+0x72>
 80164ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164f0:	dd78      	ble.n	80165e4 <_strtod_l+0x4ac>
 80164f2:	2b16      	cmp	r3, #22
 80164f4:	dc5f      	bgt.n	80165b6 <_strtod_l+0x47e>
 80164f6:	4974      	ldr	r1, [pc, #464]	@ (80166c8 <_strtod_l+0x590>)
 80164f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80164fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016500:	4652      	mov	r2, sl
 8016502:	465b      	mov	r3, fp
 8016504:	f7ea f8a0 	bl	8000648 <__aeabi_dmul>
 8016508:	4682      	mov	sl, r0
 801650a:	468b      	mov	fp, r1
 801650c:	e64d      	b.n	80161aa <_strtod_l+0x72>
 801650e:	4b6e      	ldr	r3, [pc, #440]	@ (80166c8 <_strtod_l+0x590>)
 8016510:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016514:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016518:	f7ea f896 	bl	8000648 <__aeabi_dmul>
 801651c:	4682      	mov	sl, r0
 801651e:	9808      	ldr	r0, [sp, #32]
 8016520:	468b      	mov	fp, r1
 8016522:	f7ea f817 	bl	8000554 <__aeabi_ui2d>
 8016526:	4602      	mov	r2, r0
 8016528:	460b      	mov	r3, r1
 801652a:	4650      	mov	r0, sl
 801652c:	4659      	mov	r1, fp
 801652e:	f7e9 fed5 	bl	80002dc <__adddf3>
 8016532:	2d0f      	cmp	r5, #15
 8016534:	4682      	mov	sl, r0
 8016536:	468b      	mov	fp, r1
 8016538:	ddd5      	ble.n	80164e6 <_strtod_l+0x3ae>
 801653a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801653c:	1b2c      	subs	r4, r5, r4
 801653e:	441c      	add	r4, r3
 8016540:	2c00      	cmp	r4, #0
 8016542:	f340 8096 	ble.w	8016672 <_strtod_l+0x53a>
 8016546:	f014 030f 	ands.w	r3, r4, #15
 801654a:	d00a      	beq.n	8016562 <_strtod_l+0x42a>
 801654c:	495e      	ldr	r1, [pc, #376]	@ (80166c8 <_strtod_l+0x590>)
 801654e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016552:	4652      	mov	r2, sl
 8016554:	465b      	mov	r3, fp
 8016556:	e9d1 0100 	ldrd	r0, r1, [r1]
 801655a:	f7ea f875 	bl	8000648 <__aeabi_dmul>
 801655e:	4682      	mov	sl, r0
 8016560:	468b      	mov	fp, r1
 8016562:	f034 040f 	bics.w	r4, r4, #15
 8016566:	d073      	beq.n	8016650 <_strtod_l+0x518>
 8016568:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801656c:	dd48      	ble.n	8016600 <_strtod_l+0x4c8>
 801656e:	2400      	movs	r4, #0
 8016570:	46a0      	mov	r8, r4
 8016572:	940a      	str	r4, [sp, #40]	@ 0x28
 8016574:	46a1      	mov	r9, r4
 8016576:	9a05      	ldr	r2, [sp, #20]
 8016578:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80166d0 <_strtod_l+0x598>
 801657c:	2322      	movs	r3, #34	@ 0x22
 801657e:	6013      	str	r3, [r2, #0]
 8016580:	f04f 0a00 	mov.w	sl, #0
 8016584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016586:	2b00      	cmp	r3, #0
 8016588:	f43f ae0f 	beq.w	80161aa <_strtod_l+0x72>
 801658c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801658e:	9805      	ldr	r0, [sp, #20]
 8016590:	f7ff f940 	bl	8015814 <_Bfree>
 8016594:	9805      	ldr	r0, [sp, #20]
 8016596:	4649      	mov	r1, r9
 8016598:	f7ff f93c 	bl	8015814 <_Bfree>
 801659c:	9805      	ldr	r0, [sp, #20]
 801659e:	4641      	mov	r1, r8
 80165a0:	f7ff f938 	bl	8015814 <_Bfree>
 80165a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80165a6:	9805      	ldr	r0, [sp, #20]
 80165a8:	f7ff f934 	bl	8015814 <_Bfree>
 80165ac:	9805      	ldr	r0, [sp, #20]
 80165ae:	4621      	mov	r1, r4
 80165b0:	f7ff f930 	bl	8015814 <_Bfree>
 80165b4:	e5f9      	b.n	80161aa <_strtod_l+0x72>
 80165b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80165b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80165bc:	4293      	cmp	r3, r2
 80165be:	dbbc      	blt.n	801653a <_strtod_l+0x402>
 80165c0:	4c41      	ldr	r4, [pc, #260]	@ (80166c8 <_strtod_l+0x590>)
 80165c2:	f1c5 050f 	rsb	r5, r5, #15
 80165c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80165ca:	4652      	mov	r2, sl
 80165cc:	465b      	mov	r3, fp
 80165ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165d2:	f7ea f839 	bl	8000648 <__aeabi_dmul>
 80165d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165d8:	1b5d      	subs	r5, r3, r5
 80165da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80165de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80165e2:	e78f      	b.n	8016504 <_strtod_l+0x3cc>
 80165e4:	3316      	adds	r3, #22
 80165e6:	dba8      	blt.n	801653a <_strtod_l+0x402>
 80165e8:	4b37      	ldr	r3, [pc, #220]	@ (80166c8 <_strtod_l+0x590>)
 80165ea:	eba9 0808 	sub.w	r8, r9, r8
 80165ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80165f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80165f6:	4650      	mov	r0, sl
 80165f8:	4659      	mov	r1, fp
 80165fa:	f7ea f94f 	bl	800089c <__aeabi_ddiv>
 80165fe:	e783      	b.n	8016508 <_strtod_l+0x3d0>
 8016600:	4b32      	ldr	r3, [pc, #200]	@ (80166cc <_strtod_l+0x594>)
 8016602:	9308      	str	r3, [sp, #32]
 8016604:	2300      	movs	r3, #0
 8016606:	1124      	asrs	r4, r4, #4
 8016608:	4650      	mov	r0, sl
 801660a:	4659      	mov	r1, fp
 801660c:	461e      	mov	r6, r3
 801660e:	2c01      	cmp	r4, #1
 8016610:	dc21      	bgt.n	8016656 <_strtod_l+0x51e>
 8016612:	b10b      	cbz	r3, 8016618 <_strtod_l+0x4e0>
 8016614:	4682      	mov	sl, r0
 8016616:	468b      	mov	fp, r1
 8016618:	492c      	ldr	r1, [pc, #176]	@ (80166cc <_strtod_l+0x594>)
 801661a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801661e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016622:	4652      	mov	r2, sl
 8016624:	465b      	mov	r3, fp
 8016626:	e9d1 0100 	ldrd	r0, r1, [r1]
 801662a:	f7ea f80d 	bl	8000648 <__aeabi_dmul>
 801662e:	4b28      	ldr	r3, [pc, #160]	@ (80166d0 <_strtod_l+0x598>)
 8016630:	460a      	mov	r2, r1
 8016632:	400b      	ands	r3, r1
 8016634:	4927      	ldr	r1, [pc, #156]	@ (80166d4 <_strtod_l+0x59c>)
 8016636:	428b      	cmp	r3, r1
 8016638:	4682      	mov	sl, r0
 801663a:	d898      	bhi.n	801656e <_strtod_l+0x436>
 801663c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016640:	428b      	cmp	r3, r1
 8016642:	bf86      	itte	hi
 8016644:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80166d8 <_strtod_l+0x5a0>
 8016648:	f04f 3aff 	movhi.w	sl, #4294967295
 801664c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016650:	2300      	movs	r3, #0
 8016652:	9308      	str	r3, [sp, #32]
 8016654:	e07a      	b.n	801674c <_strtod_l+0x614>
 8016656:	07e2      	lsls	r2, r4, #31
 8016658:	d505      	bpl.n	8016666 <_strtod_l+0x52e>
 801665a:	9b08      	ldr	r3, [sp, #32]
 801665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016660:	f7e9 fff2 	bl	8000648 <__aeabi_dmul>
 8016664:	2301      	movs	r3, #1
 8016666:	9a08      	ldr	r2, [sp, #32]
 8016668:	3208      	adds	r2, #8
 801666a:	3601      	adds	r6, #1
 801666c:	1064      	asrs	r4, r4, #1
 801666e:	9208      	str	r2, [sp, #32]
 8016670:	e7cd      	b.n	801660e <_strtod_l+0x4d6>
 8016672:	d0ed      	beq.n	8016650 <_strtod_l+0x518>
 8016674:	4264      	negs	r4, r4
 8016676:	f014 020f 	ands.w	r2, r4, #15
 801667a:	d00a      	beq.n	8016692 <_strtod_l+0x55a>
 801667c:	4b12      	ldr	r3, [pc, #72]	@ (80166c8 <_strtod_l+0x590>)
 801667e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016682:	4650      	mov	r0, sl
 8016684:	4659      	mov	r1, fp
 8016686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801668a:	f7ea f907 	bl	800089c <__aeabi_ddiv>
 801668e:	4682      	mov	sl, r0
 8016690:	468b      	mov	fp, r1
 8016692:	1124      	asrs	r4, r4, #4
 8016694:	d0dc      	beq.n	8016650 <_strtod_l+0x518>
 8016696:	2c1f      	cmp	r4, #31
 8016698:	dd20      	ble.n	80166dc <_strtod_l+0x5a4>
 801669a:	2400      	movs	r4, #0
 801669c:	46a0      	mov	r8, r4
 801669e:	940a      	str	r4, [sp, #40]	@ 0x28
 80166a0:	46a1      	mov	r9, r4
 80166a2:	9a05      	ldr	r2, [sp, #20]
 80166a4:	2322      	movs	r3, #34	@ 0x22
 80166a6:	f04f 0a00 	mov.w	sl, #0
 80166aa:	f04f 0b00 	mov.w	fp, #0
 80166ae:	6013      	str	r3, [r2, #0]
 80166b0:	e768      	b.n	8016584 <_strtod_l+0x44c>
 80166b2:	bf00      	nop
 80166b4:	08019029 	.word	0x08019029
 80166b8:	0801923c 	.word	0x0801923c
 80166bc:	08019021 	.word	0x08019021
 80166c0:	08019058 	.word	0x08019058
 80166c4:	0801901b 	.word	0x0801901b
 80166c8:	08019170 	.word	0x08019170
 80166cc:	08019148 	.word	0x08019148
 80166d0:	7ff00000 	.word	0x7ff00000
 80166d4:	7ca00000 	.word	0x7ca00000
 80166d8:	7fefffff 	.word	0x7fefffff
 80166dc:	f014 0310 	ands.w	r3, r4, #16
 80166e0:	bf18      	it	ne
 80166e2:	236a      	movne	r3, #106	@ 0x6a
 80166e4:	4ea9      	ldr	r6, [pc, #676]	@ (801698c <_strtod_l+0x854>)
 80166e6:	9308      	str	r3, [sp, #32]
 80166e8:	4650      	mov	r0, sl
 80166ea:	4659      	mov	r1, fp
 80166ec:	2300      	movs	r3, #0
 80166ee:	07e2      	lsls	r2, r4, #31
 80166f0:	d504      	bpl.n	80166fc <_strtod_l+0x5c4>
 80166f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80166f6:	f7e9 ffa7 	bl	8000648 <__aeabi_dmul>
 80166fa:	2301      	movs	r3, #1
 80166fc:	1064      	asrs	r4, r4, #1
 80166fe:	f106 0608 	add.w	r6, r6, #8
 8016702:	d1f4      	bne.n	80166ee <_strtod_l+0x5b6>
 8016704:	b10b      	cbz	r3, 801670a <_strtod_l+0x5d2>
 8016706:	4682      	mov	sl, r0
 8016708:	468b      	mov	fp, r1
 801670a:	9b08      	ldr	r3, [sp, #32]
 801670c:	b1b3      	cbz	r3, 801673c <_strtod_l+0x604>
 801670e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016712:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016716:	2b00      	cmp	r3, #0
 8016718:	4659      	mov	r1, fp
 801671a:	dd0f      	ble.n	801673c <_strtod_l+0x604>
 801671c:	2b1f      	cmp	r3, #31
 801671e:	dd55      	ble.n	80167cc <_strtod_l+0x694>
 8016720:	2b34      	cmp	r3, #52	@ 0x34
 8016722:	bfde      	ittt	le
 8016724:	f04f 33ff 	movle.w	r3, #4294967295
 8016728:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801672c:	4093      	lslle	r3, r2
 801672e:	f04f 0a00 	mov.w	sl, #0
 8016732:	bfcc      	ite	gt
 8016734:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016738:	ea03 0b01 	andle.w	fp, r3, r1
 801673c:	2200      	movs	r2, #0
 801673e:	2300      	movs	r3, #0
 8016740:	4650      	mov	r0, sl
 8016742:	4659      	mov	r1, fp
 8016744:	f7ea f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 8016748:	2800      	cmp	r0, #0
 801674a:	d1a6      	bne.n	801669a <_strtod_l+0x562>
 801674c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801674e:	9300      	str	r3, [sp, #0]
 8016750:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016752:	9805      	ldr	r0, [sp, #20]
 8016754:	462b      	mov	r3, r5
 8016756:	463a      	mov	r2, r7
 8016758:	f7ff f8c4 	bl	80158e4 <__s2b>
 801675c:	900a      	str	r0, [sp, #40]	@ 0x28
 801675e:	2800      	cmp	r0, #0
 8016760:	f43f af05 	beq.w	801656e <_strtod_l+0x436>
 8016764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016766:	2a00      	cmp	r2, #0
 8016768:	eba9 0308 	sub.w	r3, r9, r8
 801676c:	bfa8      	it	ge
 801676e:	2300      	movge	r3, #0
 8016770:	9312      	str	r3, [sp, #72]	@ 0x48
 8016772:	2400      	movs	r4, #0
 8016774:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016778:	9316      	str	r3, [sp, #88]	@ 0x58
 801677a:	46a0      	mov	r8, r4
 801677c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801677e:	9805      	ldr	r0, [sp, #20]
 8016780:	6859      	ldr	r1, [r3, #4]
 8016782:	f7ff f807 	bl	8015794 <_Balloc>
 8016786:	4681      	mov	r9, r0
 8016788:	2800      	cmp	r0, #0
 801678a:	f43f aef4 	beq.w	8016576 <_strtod_l+0x43e>
 801678e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016790:	691a      	ldr	r2, [r3, #16]
 8016792:	3202      	adds	r2, #2
 8016794:	f103 010c 	add.w	r1, r3, #12
 8016798:	0092      	lsls	r2, r2, #2
 801679a:	300c      	adds	r0, #12
 801679c:	f7fe f94f 	bl	8014a3e <memcpy>
 80167a0:	ec4b ab10 	vmov	d0, sl, fp
 80167a4:	9805      	ldr	r0, [sp, #20]
 80167a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80167a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80167aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80167ae:	f7ff fbd5 	bl	8015f5c <__d2b>
 80167b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80167b4:	2800      	cmp	r0, #0
 80167b6:	f43f aede 	beq.w	8016576 <_strtod_l+0x43e>
 80167ba:	9805      	ldr	r0, [sp, #20]
 80167bc:	2101      	movs	r1, #1
 80167be:	f7ff f927 	bl	8015a10 <__i2b>
 80167c2:	4680      	mov	r8, r0
 80167c4:	b948      	cbnz	r0, 80167da <_strtod_l+0x6a2>
 80167c6:	f04f 0800 	mov.w	r8, #0
 80167ca:	e6d4      	b.n	8016576 <_strtod_l+0x43e>
 80167cc:	f04f 32ff 	mov.w	r2, #4294967295
 80167d0:	fa02 f303 	lsl.w	r3, r2, r3
 80167d4:	ea03 0a0a 	and.w	sl, r3, sl
 80167d8:	e7b0      	b.n	801673c <_strtod_l+0x604>
 80167da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80167dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80167de:	2d00      	cmp	r5, #0
 80167e0:	bfab      	itete	ge
 80167e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80167e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80167e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80167e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80167ea:	bfac      	ite	ge
 80167ec:	18ef      	addge	r7, r5, r3
 80167ee:	1b5e      	sublt	r6, r3, r5
 80167f0:	9b08      	ldr	r3, [sp, #32]
 80167f2:	1aed      	subs	r5, r5, r3
 80167f4:	4415      	add	r5, r2
 80167f6:	4b66      	ldr	r3, [pc, #408]	@ (8016990 <_strtod_l+0x858>)
 80167f8:	3d01      	subs	r5, #1
 80167fa:	429d      	cmp	r5, r3
 80167fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016800:	da50      	bge.n	80168a4 <_strtod_l+0x76c>
 8016802:	1b5b      	subs	r3, r3, r5
 8016804:	2b1f      	cmp	r3, #31
 8016806:	eba2 0203 	sub.w	r2, r2, r3
 801680a:	f04f 0101 	mov.w	r1, #1
 801680e:	dc3d      	bgt.n	801688c <_strtod_l+0x754>
 8016810:	fa01 f303 	lsl.w	r3, r1, r3
 8016814:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016816:	2300      	movs	r3, #0
 8016818:	9310      	str	r3, [sp, #64]	@ 0x40
 801681a:	18bd      	adds	r5, r7, r2
 801681c:	9b08      	ldr	r3, [sp, #32]
 801681e:	42af      	cmp	r7, r5
 8016820:	4416      	add	r6, r2
 8016822:	441e      	add	r6, r3
 8016824:	463b      	mov	r3, r7
 8016826:	bfa8      	it	ge
 8016828:	462b      	movge	r3, r5
 801682a:	42b3      	cmp	r3, r6
 801682c:	bfa8      	it	ge
 801682e:	4633      	movge	r3, r6
 8016830:	2b00      	cmp	r3, #0
 8016832:	bfc2      	ittt	gt
 8016834:	1aed      	subgt	r5, r5, r3
 8016836:	1af6      	subgt	r6, r6, r3
 8016838:	1aff      	subgt	r7, r7, r3
 801683a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801683c:	2b00      	cmp	r3, #0
 801683e:	dd16      	ble.n	801686e <_strtod_l+0x736>
 8016840:	4641      	mov	r1, r8
 8016842:	9805      	ldr	r0, [sp, #20]
 8016844:	461a      	mov	r2, r3
 8016846:	f7ff f9a3 	bl	8015b90 <__pow5mult>
 801684a:	4680      	mov	r8, r0
 801684c:	2800      	cmp	r0, #0
 801684e:	d0ba      	beq.n	80167c6 <_strtod_l+0x68e>
 8016850:	4601      	mov	r1, r0
 8016852:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016854:	9805      	ldr	r0, [sp, #20]
 8016856:	f7ff f8f1 	bl	8015a3c <__multiply>
 801685a:	900e      	str	r0, [sp, #56]	@ 0x38
 801685c:	2800      	cmp	r0, #0
 801685e:	f43f ae8a 	beq.w	8016576 <_strtod_l+0x43e>
 8016862:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016864:	9805      	ldr	r0, [sp, #20]
 8016866:	f7fe ffd5 	bl	8015814 <_Bfree>
 801686a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801686c:	931a      	str	r3, [sp, #104]	@ 0x68
 801686e:	2d00      	cmp	r5, #0
 8016870:	dc1d      	bgt.n	80168ae <_strtod_l+0x776>
 8016872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016874:	2b00      	cmp	r3, #0
 8016876:	dd23      	ble.n	80168c0 <_strtod_l+0x788>
 8016878:	4649      	mov	r1, r9
 801687a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801687c:	9805      	ldr	r0, [sp, #20]
 801687e:	f7ff f987 	bl	8015b90 <__pow5mult>
 8016882:	4681      	mov	r9, r0
 8016884:	b9e0      	cbnz	r0, 80168c0 <_strtod_l+0x788>
 8016886:	f04f 0900 	mov.w	r9, #0
 801688a:	e674      	b.n	8016576 <_strtod_l+0x43e>
 801688c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016890:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016894:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016898:	35e2      	adds	r5, #226	@ 0xe2
 801689a:	fa01 f305 	lsl.w	r3, r1, r5
 801689e:	9310      	str	r3, [sp, #64]	@ 0x40
 80168a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80168a2:	e7ba      	b.n	801681a <_strtod_l+0x6e2>
 80168a4:	2300      	movs	r3, #0
 80168a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80168a8:	2301      	movs	r3, #1
 80168aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80168ac:	e7b5      	b.n	801681a <_strtod_l+0x6e2>
 80168ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80168b0:	9805      	ldr	r0, [sp, #20]
 80168b2:	462a      	mov	r2, r5
 80168b4:	f7ff f9c6 	bl	8015c44 <__lshift>
 80168b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80168ba:	2800      	cmp	r0, #0
 80168bc:	d1d9      	bne.n	8016872 <_strtod_l+0x73a>
 80168be:	e65a      	b.n	8016576 <_strtod_l+0x43e>
 80168c0:	2e00      	cmp	r6, #0
 80168c2:	dd07      	ble.n	80168d4 <_strtod_l+0x79c>
 80168c4:	4649      	mov	r1, r9
 80168c6:	9805      	ldr	r0, [sp, #20]
 80168c8:	4632      	mov	r2, r6
 80168ca:	f7ff f9bb 	bl	8015c44 <__lshift>
 80168ce:	4681      	mov	r9, r0
 80168d0:	2800      	cmp	r0, #0
 80168d2:	d0d8      	beq.n	8016886 <_strtod_l+0x74e>
 80168d4:	2f00      	cmp	r7, #0
 80168d6:	dd08      	ble.n	80168ea <_strtod_l+0x7b2>
 80168d8:	4641      	mov	r1, r8
 80168da:	9805      	ldr	r0, [sp, #20]
 80168dc:	463a      	mov	r2, r7
 80168de:	f7ff f9b1 	bl	8015c44 <__lshift>
 80168e2:	4680      	mov	r8, r0
 80168e4:	2800      	cmp	r0, #0
 80168e6:	f43f ae46 	beq.w	8016576 <_strtod_l+0x43e>
 80168ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80168ec:	9805      	ldr	r0, [sp, #20]
 80168ee:	464a      	mov	r2, r9
 80168f0:	f7ff fa30 	bl	8015d54 <__mdiff>
 80168f4:	4604      	mov	r4, r0
 80168f6:	2800      	cmp	r0, #0
 80168f8:	f43f ae3d 	beq.w	8016576 <_strtod_l+0x43e>
 80168fc:	68c3      	ldr	r3, [r0, #12]
 80168fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016900:	2300      	movs	r3, #0
 8016902:	60c3      	str	r3, [r0, #12]
 8016904:	4641      	mov	r1, r8
 8016906:	f7ff fa09 	bl	8015d1c <__mcmp>
 801690a:	2800      	cmp	r0, #0
 801690c:	da46      	bge.n	801699c <_strtod_l+0x864>
 801690e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016910:	ea53 030a 	orrs.w	r3, r3, sl
 8016914:	d16c      	bne.n	80169f0 <_strtod_l+0x8b8>
 8016916:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801691a:	2b00      	cmp	r3, #0
 801691c:	d168      	bne.n	80169f0 <_strtod_l+0x8b8>
 801691e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016922:	0d1b      	lsrs	r3, r3, #20
 8016924:	051b      	lsls	r3, r3, #20
 8016926:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801692a:	d961      	bls.n	80169f0 <_strtod_l+0x8b8>
 801692c:	6963      	ldr	r3, [r4, #20]
 801692e:	b913      	cbnz	r3, 8016936 <_strtod_l+0x7fe>
 8016930:	6923      	ldr	r3, [r4, #16]
 8016932:	2b01      	cmp	r3, #1
 8016934:	dd5c      	ble.n	80169f0 <_strtod_l+0x8b8>
 8016936:	4621      	mov	r1, r4
 8016938:	2201      	movs	r2, #1
 801693a:	9805      	ldr	r0, [sp, #20]
 801693c:	f7ff f982 	bl	8015c44 <__lshift>
 8016940:	4641      	mov	r1, r8
 8016942:	4604      	mov	r4, r0
 8016944:	f7ff f9ea 	bl	8015d1c <__mcmp>
 8016948:	2800      	cmp	r0, #0
 801694a:	dd51      	ble.n	80169f0 <_strtod_l+0x8b8>
 801694c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016950:	9a08      	ldr	r2, [sp, #32]
 8016952:	0d1b      	lsrs	r3, r3, #20
 8016954:	051b      	lsls	r3, r3, #20
 8016956:	2a00      	cmp	r2, #0
 8016958:	d06b      	beq.n	8016a32 <_strtod_l+0x8fa>
 801695a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801695e:	d868      	bhi.n	8016a32 <_strtod_l+0x8fa>
 8016960:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016964:	f67f ae9d 	bls.w	80166a2 <_strtod_l+0x56a>
 8016968:	4b0a      	ldr	r3, [pc, #40]	@ (8016994 <_strtod_l+0x85c>)
 801696a:	4650      	mov	r0, sl
 801696c:	4659      	mov	r1, fp
 801696e:	2200      	movs	r2, #0
 8016970:	f7e9 fe6a 	bl	8000648 <__aeabi_dmul>
 8016974:	4b08      	ldr	r3, [pc, #32]	@ (8016998 <_strtod_l+0x860>)
 8016976:	400b      	ands	r3, r1
 8016978:	4682      	mov	sl, r0
 801697a:	468b      	mov	fp, r1
 801697c:	2b00      	cmp	r3, #0
 801697e:	f47f ae05 	bne.w	801658c <_strtod_l+0x454>
 8016982:	9a05      	ldr	r2, [sp, #20]
 8016984:	2322      	movs	r3, #34	@ 0x22
 8016986:	6013      	str	r3, [r2, #0]
 8016988:	e600      	b.n	801658c <_strtod_l+0x454>
 801698a:	bf00      	nop
 801698c:	08019268 	.word	0x08019268
 8016990:	fffffc02 	.word	0xfffffc02
 8016994:	39500000 	.word	0x39500000
 8016998:	7ff00000 	.word	0x7ff00000
 801699c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80169a0:	d165      	bne.n	8016a6e <_strtod_l+0x936>
 80169a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80169a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169a8:	b35a      	cbz	r2, 8016a02 <_strtod_l+0x8ca>
 80169aa:	4a9f      	ldr	r2, [pc, #636]	@ (8016c28 <_strtod_l+0xaf0>)
 80169ac:	4293      	cmp	r3, r2
 80169ae:	d12b      	bne.n	8016a08 <_strtod_l+0x8d0>
 80169b0:	9b08      	ldr	r3, [sp, #32]
 80169b2:	4651      	mov	r1, sl
 80169b4:	b303      	cbz	r3, 80169f8 <_strtod_l+0x8c0>
 80169b6:	4b9d      	ldr	r3, [pc, #628]	@ (8016c2c <_strtod_l+0xaf4>)
 80169b8:	465a      	mov	r2, fp
 80169ba:	4013      	ands	r3, r2
 80169bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80169c0:	f04f 32ff 	mov.w	r2, #4294967295
 80169c4:	d81b      	bhi.n	80169fe <_strtod_l+0x8c6>
 80169c6:	0d1b      	lsrs	r3, r3, #20
 80169c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80169cc:	fa02 f303 	lsl.w	r3, r2, r3
 80169d0:	4299      	cmp	r1, r3
 80169d2:	d119      	bne.n	8016a08 <_strtod_l+0x8d0>
 80169d4:	4b96      	ldr	r3, [pc, #600]	@ (8016c30 <_strtod_l+0xaf8>)
 80169d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80169d8:	429a      	cmp	r2, r3
 80169da:	d102      	bne.n	80169e2 <_strtod_l+0x8aa>
 80169dc:	3101      	adds	r1, #1
 80169de:	f43f adca 	beq.w	8016576 <_strtod_l+0x43e>
 80169e2:	4b92      	ldr	r3, [pc, #584]	@ (8016c2c <_strtod_l+0xaf4>)
 80169e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80169e6:	401a      	ands	r2, r3
 80169e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80169ec:	f04f 0a00 	mov.w	sl, #0
 80169f0:	9b08      	ldr	r3, [sp, #32]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d1b8      	bne.n	8016968 <_strtod_l+0x830>
 80169f6:	e5c9      	b.n	801658c <_strtod_l+0x454>
 80169f8:	f04f 33ff 	mov.w	r3, #4294967295
 80169fc:	e7e8      	b.n	80169d0 <_strtod_l+0x898>
 80169fe:	4613      	mov	r3, r2
 8016a00:	e7e6      	b.n	80169d0 <_strtod_l+0x898>
 8016a02:	ea53 030a 	orrs.w	r3, r3, sl
 8016a06:	d0a1      	beq.n	801694c <_strtod_l+0x814>
 8016a08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016a0a:	b1db      	cbz	r3, 8016a44 <_strtod_l+0x90c>
 8016a0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016a0e:	4213      	tst	r3, r2
 8016a10:	d0ee      	beq.n	80169f0 <_strtod_l+0x8b8>
 8016a12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a14:	9a08      	ldr	r2, [sp, #32]
 8016a16:	4650      	mov	r0, sl
 8016a18:	4659      	mov	r1, fp
 8016a1a:	b1bb      	cbz	r3, 8016a4c <_strtod_l+0x914>
 8016a1c:	f7ff fb6c 	bl	80160f8 <sulp>
 8016a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016a24:	ec53 2b10 	vmov	r2, r3, d0
 8016a28:	f7e9 fc58 	bl	80002dc <__adddf3>
 8016a2c:	4682      	mov	sl, r0
 8016a2e:	468b      	mov	fp, r1
 8016a30:	e7de      	b.n	80169f0 <_strtod_l+0x8b8>
 8016a32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016a36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016a3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016a3e:	f04f 3aff 	mov.w	sl, #4294967295
 8016a42:	e7d5      	b.n	80169f0 <_strtod_l+0x8b8>
 8016a44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016a46:	ea13 0f0a 	tst.w	r3, sl
 8016a4a:	e7e1      	b.n	8016a10 <_strtod_l+0x8d8>
 8016a4c:	f7ff fb54 	bl	80160f8 <sulp>
 8016a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016a54:	ec53 2b10 	vmov	r2, r3, d0
 8016a58:	f7e9 fc3e 	bl	80002d8 <__aeabi_dsub>
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	2300      	movs	r3, #0
 8016a60:	4682      	mov	sl, r0
 8016a62:	468b      	mov	fp, r1
 8016a64:	f7ea f858 	bl	8000b18 <__aeabi_dcmpeq>
 8016a68:	2800      	cmp	r0, #0
 8016a6a:	d0c1      	beq.n	80169f0 <_strtod_l+0x8b8>
 8016a6c:	e619      	b.n	80166a2 <_strtod_l+0x56a>
 8016a6e:	4641      	mov	r1, r8
 8016a70:	4620      	mov	r0, r4
 8016a72:	f7ff facb 	bl	801600c <__ratio>
 8016a76:	ec57 6b10 	vmov	r6, r7, d0
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016a80:	4630      	mov	r0, r6
 8016a82:	4639      	mov	r1, r7
 8016a84:	f7ea f85c 	bl	8000b40 <__aeabi_dcmple>
 8016a88:	2800      	cmp	r0, #0
 8016a8a:	d06f      	beq.n	8016b6c <_strtod_l+0xa34>
 8016a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d17a      	bne.n	8016b88 <_strtod_l+0xa50>
 8016a92:	f1ba 0f00 	cmp.w	sl, #0
 8016a96:	d158      	bne.n	8016b4a <_strtod_l+0xa12>
 8016a98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d15a      	bne.n	8016b58 <_strtod_l+0xa20>
 8016aa2:	4b64      	ldr	r3, [pc, #400]	@ (8016c34 <_strtod_l+0xafc>)
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	4630      	mov	r0, r6
 8016aa8:	4639      	mov	r1, r7
 8016aaa:	f7ea f83f 	bl	8000b2c <__aeabi_dcmplt>
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	d159      	bne.n	8016b66 <_strtod_l+0xa2e>
 8016ab2:	4630      	mov	r0, r6
 8016ab4:	4639      	mov	r1, r7
 8016ab6:	4b60      	ldr	r3, [pc, #384]	@ (8016c38 <_strtod_l+0xb00>)
 8016ab8:	2200      	movs	r2, #0
 8016aba:	f7e9 fdc5 	bl	8000648 <__aeabi_dmul>
 8016abe:	4606      	mov	r6, r0
 8016ac0:	460f      	mov	r7, r1
 8016ac2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016ac6:	9606      	str	r6, [sp, #24]
 8016ac8:	9307      	str	r3, [sp, #28]
 8016aca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016ace:	4d57      	ldr	r5, [pc, #348]	@ (8016c2c <_strtod_l+0xaf4>)
 8016ad0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ad6:	401d      	ands	r5, r3
 8016ad8:	4b58      	ldr	r3, [pc, #352]	@ (8016c3c <_strtod_l+0xb04>)
 8016ada:	429d      	cmp	r5, r3
 8016adc:	f040 80b2 	bne.w	8016c44 <_strtod_l+0xb0c>
 8016ae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ae2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016ae6:	ec4b ab10 	vmov	d0, sl, fp
 8016aea:	f7ff f9c7 	bl	8015e7c <__ulp>
 8016aee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016af2:	ec51 0b10 	vmov	r0, r1, d0
 8016af6:	f7e9 fda7 	bl	8000648 <__aeabi_dmul>
 8016afa:	4652      	mov	r2, sl
 8016afc:	465b      	mov	r3, fp
 8016afe:	f7e9 fbed 	bl	80002dc <__adddf3>
 8016b02:	460b      	mov	r3, r1
 8016b04:	4949      	ldr	r1, [pc, #292]	@ (8016c2c <_strtod_l+0xaf4>)
 8016b06:	4a4e      	ldr	r2, [pc, #312]	@ (8016c40 <_strtod_l+0xb08>)
 8016b08:	4019      	ands	r1, r3
 8016b0a:	4291      	cmp	r1, r2
 8016b0c:	4682      	mov	sl, r0
 8016b0e:	d942      	bls.n	8016b96 <_strtod_l+0xa5e>
 8016b10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016b12:	4b47      	ldr	r3, [pc, #284]	@ (8016c30 <_strtod_l+0xaf8>)
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d103      	bne.n	8016b20 <_strtod_l+0x9e8>
 8016b18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b1a:	3301      	adds	r3, #1
 8016b1c:	f43f ad2b 	beq.w	8016576 <_strtod_l+0x43e>
 8016b20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016c30 <_strtod_l+0xaf8>
 8016b24:	f04f 3aff 	mov.w	sl, #4294967295
 8016b28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016b2a:	9805      	ldr	r0, [sp, #20]
 8016b2c:	f7fe fe72 	bl	8015814 <_Bfree>
 8016b30:	9805      	ldr	r0, [sp, #20]
 8016b32:	4649      	mov	r1, r9
 8016b34:	f7fe fe6e 	bl	8015814 <_Bfree>
 8016b38:	9805      	ldr	r0, [sp, #20]
 8016b3a:	4641      	mov	r1, r8
 8016b3c:	f7fe fe6a 	bl	8015814 <_Bfree>
 8016b40:	9805      	ldr	r0, [sp, #20]
 8016b42:	4621      	mov	r1, r4
 8016b44:	f7fe fe66 	bl	8015814 <_Bfree>
 8016b48:	e618      	b.n	801677c <_strtod_l+0x644>
 8016b4a:	f1ba 0f01 	cmp.w	sl, #1
 8016b4e:	d103      	bne.n	8016b58 <_strtod_l+0xa20>
 8016b50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	f43f ada5 	beq.w	80166a2 <_strtod_l+0x56a>
 8016b58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8016c08 <_strtod_l+0xad0>
 8016b5c:	4f35      	ldr	r7, [pc, #212]	@ (8016c34 <_strtod_l+0xafc>)
 8016b5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016b62:	2600      	movs	r6, #0
 8016b64:	e7b1      	b.n	8016aca <_strtod_l+0x992>
 8016b66:	4f34      	ldr	r7, [pc, #208]	@ (8016c38 <_strtod_l+0xb00>)
 8016b68:	2600      	movs	r6, #0
 8016b6a:	e7aa      	b.n	8016ac2 <_strtod_l+0x98a>
 8016b6c:	4b32      	ldr	r3, [pc, #200]	@ (8016c38 <_strtod_l+0xb00>)
 8016b6e:	4630      	mov	r0, r6
 8016b70:	4639      	mov	r1, r7
 8016b72:	2200      	movs	r2, #0
 8016b74:	f7e9 fd68 	bl	8000648 <__aeabi_dmul>
 8016b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016b7a:	4606      	mov	r6, r0
 8016b7c:	460f      	mov	r7, r1
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d09f      	beq.n	8016ac2 <_strtod_l+0x98a>
 8016b82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016b86:	e7a0      	b.n	8016aca <_strtod_l+0x992>
 8016b88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016c10 <_strtod_l+0xad8>
 8016b8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016b90:	ec57 6b17 	vmov	r6, r7, d7
 8016b94:	e799      	b.n	8016aca <_strtod_l+0x992>
 8016b96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016b9a:	9b08      	ldr	r3, [sp, #32]
 8016b9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d1c1      	bne.n	8016b28 <_strtod_l+0x9f0>
 8016ba4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016ba8:	0d1b      	lsrs	r3, r3, #20
 8016baa:	051b      	lsls	r3, r3, #20
 8016bac:	429d      	cmp	r5, r3
 8016bae:	d1bb      	bne.n	8016b28 <_strtod_l+0x9f0>
 8016bb0:	4630      	mov	r0, r6
 8016bb2:	4639      	mov	r1, r7
 8016bb4:	f7ea f8a8 	bl	8000d08 <__aeabi_d2lz>
 8016bb8:	f7e9 fd18 	bl	80005ec <__aeabi_l2d>
 8016bbc:	4602      	mov	r2, r0
 8016bbe:	460b      	mov	r3, r1
 8016bc0:	4630      	mov	r0, r6
 8016bc2:	4639      	mov	r1, r7
 8016bc4:	f7e9 fb88 	bl	80002d8 <__aeabi_dsub>
 8016bc8:	460b      	mov	r3, r1
 8016bca:	4602      	mov	r2, r0
 8016bcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016bd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8016bd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016bd6:	ea46 060a 	orr.w	r6, r6, sl
 8016bda:	431e      	orrs	r6, r3
 8016bdc:	d06f      	beq.n	8016cbe <_strtod_l+0xb86>
 8016bde:	a30e      	add	r3, pc, #56	@ (adr r3, 8016c18 <_strtod_l+0xae0>)
 8016be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be4:	f7e9 ffa2 	bl	8000b2c <__aeabi_dcmplt>
 8016be8:	2800      	cmp	r0, #0
 8016bea:	f47f accf 	bne.w	801658c <_strtod_l+0x454>
 8016bee:	a30c      	add	r3, pc, #48	@ (adr r3, 8016c20 <_strtod_l+0xae8>)
 8016bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016bf8:	f7e9 ffb6 	bl	8000b68 <__aeabi_dcmpgt>
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	d093      	beq.n	8016b28 <_strtod_l+0x9f0>
 8016c00:	e4c4      	b.n	801658c <_strtod_l+0x454>
 8016c02:	bf00      	nop
 8016c04:	f3af 8000 	nop.w
 8016c08:	00000000 	.word	0x00000000
 8016c0c:	bff00000 	.word	0xbff00000
 8016c10:	00000000 	.word	0x00000000
 8016c14:	3ff00000 	.word	0x3ff00000
 8016c18:	94a03595 	.word	0x94a03595
 8016c1c:	3fdfffff 	.word	0x3fdfffff
 8016c20:	35afe535 	.word	0x35afe535
 8016c24:	3fe00000 	.word	0x3fe00000
 8016c28:	000fffff 	.word	0x000fffff
 8016c2c:	7ff00000 	.word	0x7ff00000
 8016c30:	7fefffff 	.word	0x7fefffff
 8016c34:	3ff00000 	.word	0x3ff00000
 8016c38:	3fe00000 	.word	0x3fe00000
 8016c3c:	7fe00000 	.word	0x7fe00000
 8016c40:	7c9fffff 	.word	0x7c9fffff
 8016c44:	9b08      	ldr	r3, [sp, #32]
 8016c46:	b323      	cbz	r3, 8016c92 <_strtod_l+0xb5a>
 8016c48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016c4c:	d821      	bhi.n	8016c92 <_strtod_l+0xb5a>
 8016c4e:	a328      	add	r3, pc, #160	@ (adr r3, 8016cf0 <_strtod_l+0xbb8>)
 8016c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c54:	4630      	mov	r0, r6
 8016c56:	4639      	mov	r1, r7
 8016c58:	f7e9 ff72 	bl	8000b40 <__aeabi_dcmple>
 8016c5c:	b1a0      	cbz	r0, 8016c88 <_strtod_l+0xb50>
 8016c5e:	4639      	mov	r1, r7
 8016c60:	4630      	mov	r0, r6
 8016c62:	f7e9 ffc9 	bl	8000bf8 <__aeabi_d2uiz>
 8016c66:	2801      	cmp	r0, #1
 8016c68:	bf38      	it	cc
 8016c6a:	2001      	movcc	r0, #1
 8016c6c:	f7e9 fc72 	bl	8000554 <__aeabi_ui2d>
 8016c70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c72:	4606      	mov	r6, r0
 8016c74:	460f      	mov	r7, r1
 8016c76:	b9fb      	cbnz	r3, 8016cb8 <_strtod_l+0xb80>
 8016c78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016c7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8016c7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8016c80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8016c84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016c88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016c8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016c8e:	1b5b      	subs	r3, r3, r5
 8016c90:	9311      	str	r3, [sp, #68]	@ 0x44
 8016c92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016c96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016c9a:	f7ff f8ef 	bl	8015e7c <__ulp>
 8016c9e:	4650      	mov	r0, sl
 8016ca0:	ec53 2b10 	vmov	r2, r3, d0
 8016ca4:	4659      	mov	r1, fp
 8016ca6:	f7e9 fccf 	bl	8000648 <__aeabi_dmul>
 8016caa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016cae:	f7e9 fb15 	bl	80002dc <__adddf3>
 8016cb2:	4682      	mov	sl, r0
 8016cb4:	468b      	mov	fp, r1
 8016cb6:	e770      	b.n	8016b9a <_strtod_l+0xa62>
 8016cb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8016cbc:	e7e0      	b.n	8016c80 <_strtod_l+0xb48>
 8016cbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8016cf8 <_strtod_l+0xbc0>)
 8016cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc4:	f7e9 ff32 	bl	8000b2c <__aeabi_dcmplt>
 8016cc8:	e798      	b.n	8016bfc <_strtod_l+0xac4>
 8016cca:	2300      	movs	r3, #0
 8016ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016cce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016cd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016cd2:	6013      	str	r3, [r2, #0]
 8016cd4:	f7ff ba6d 	b.w	80161b2 <_strtod_l+0x7a>
 8016cd8:	2a65      	cmp	r2, #101	@ 0x65
 8016cda:	f43f ab66 	beq.w	80163aa <_strtod_l+0x272>
 8016cde:	2a45      	cmp	r2, #69	@ 0x45
 8016ce0:	f43f ab63 	beq.w	80163aa <_strtod_l+0x272>
 8016ce4:	2301      	movs	r3, #1
 8016ce6:	f7ff bb9e 	b.w	8016426 <_strtod_l+0x2ee>
 8016cea:	bf00      	nop
 8016cec:	f3af 8000 	nop.w
 8016cf0:	ffc00000 	.word	0xffc00000
 8016cf4:	41dfffff 	.word	0x41dfffff
 8016cf8:	94a03595 	.word	0x94a03595
 8016cfc:	3fcfffff 	.word	0x3fcfffff

08016d00 <_strtod_r>:
 8016d00:	4b01      	ldr	r3, [pc, #4]	@ (8016d08 <_strtod_r+0x8>)
 8016d02:	f7ff ba19 	b.w	8016138 <_strtod_l>
 8016d06:	bf00      	nop
 8016d08:	200000e0 	.word	0x200000e0

08016d0c <_strtol_l.constprop.0>:
 8016d0c:	2b24      	cmp	r3, #36	@ 0x24
 8016d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d12:	4686      	mov	lr, r0
 8016d14:	4690      	mov	r8, r2
 8016d16:	d801      	bhi.n	8016d1c <_strtol_l.constprop.0+0x10>
 8016d18:	2b01      	cmp	r3, #1
 8016d1a:	d106      	bne.n	8016d2a <_strtol_l.constprop.0+0x1e>
 8016d1c:	f7fd fe62 	bl	80149e4 <__errno>
 8016d20:	2316      	movs	r3, #22
 8016d22:	6003      	str	r3, [r0, #0]
 8016d24:	2000      	movs	r0, #0
 8016d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d2a:	4834      	ldr	r0, [pc, #208]	@ (8016dfc <_strtol_l.constprop.0+0xf0>)
 8016d2c:	460d      	mov	r5, r1
 8016d2e:	462a      	mov	r2, r5
 8016d30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d34:	5d06      	ldrb	r6, [r0, r4]
 8016d36:	f016 0608 	ands.w	r6, r6, #8
 8016d3a:	d1f8      	bne.n	8016d2e <_strtol_l.constprop.0+0x22>
 8016d3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8016d3e:	d12d      	bne.n	8016d9c <_strtol_l.constprop.0+0x90>
 8016d40:	782c      	ldrb	r4, [r5, #0]
 8016d42:	2601      	movs	r6, #1
 8016d44:	1c95      	adds	r5, r2, #2
 8016d46:	f033 0210 	bics.w	r2, r3, #16
 8016d4a:	d109      	bne.n	8016d60 <_strtol_l.constprop.0+0x54>
 8016d4c:	2c30      	cmp	r4, #48	@ 0x30
 8016d4e:	d12a      	bne.n	8016da6 <_strtol_l.constprop.0+0x9a>
 8016d50:	782a      	ldrb	r2, [r5, #0]
 8016d52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016d56:	2a58      	cmp	r2, #88	@ 0x58
 8016d58:	d125      	bne.n	8016da6 <_strtol_l.constprop.0+0x9a>
 8016d5a:	786c      	ldrb	r4, [r5, #1]
 8016d5c:	2310      	movs	r3, #16
 8016d5e:	3502      	adds	r5, #2
 8016d60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016d64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016d68:	2200      	movs	r2, #0
 8016d6a:	fbbc f9f3 	udiv	r9, ip, r3
 8016d6e:	4610      	mov	r0, r2
 8016d70:	fb03 ca19 	mls	sl, r3, r9, ip
 8016d74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016d78:	2f09      	cmp	r7, #9
 8016d7a:	d81b      	bhi.n	8016db4 <_strtol_l.constprop.0+0xa8>
 8016d7c:	463c      	mov	r4, r7
 8016d7e:	42a3      	cmp	r3, r4
 8016d80:	dd27      	ble.n	8016dd2 <_strtol_l.constprop.0+0xc6>
 8016d82:	1c57      	adds	r7, r2, #1
 8016d84:	d007      	beq.n	8016d96 <_strtol_l.constprop.0+0x8a>
 8016d86:	4581      	cmp	r9, r0
 8016d88:	d320      	bcc.n	8016dcc <_strtol_l.constprop.0+0xc0>
 8016d8a:	d101      	bne.n	8016d90 <_strtol_l.constprop.0+0x84>
 8016d8c:	45a2      	cmp	sl, r4
 8016d8e:	db1d      	blt.n	8016dcc <_strtol_l.constprop.0+0xc0>
 8016d90:	fb00 4003 	mla	r0, r0, r3, r4
 8016d94:	2201      	movs	r2, #1
 8016d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d9a:	e7eb      	b.n	8016d74 <_strtol_l.constprop.0+0x68>
 8016d9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8016d9e:	bf04      	itt	eq
 8016da0:	782c      	ldrbeq	r4, [r5, #0]
 8016da2:	1c95      	addeq	r5, r2, #2
 8016da4:	e7cf      	b.n	8016d46 <_strtol_l.constprop.0+0x3a>
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d1da      	bne.n	8016d60 <_strtol_l.constprop.0+0x54>
 8016daa:	2c30      	cmp	r4, #48	@ 0x30
 8016dac:	bf0c      	ite	eq
 8016dae:	2308      	moveq	r3, #8
 8016db0:	230a      	movne	r3, #10
 8016db2:	e7d5      	b.n	8016d60 <_strtol_l.constprop.0+0x54>
 8016db4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016db8:	2f19      	cmp	r7, #25
 8016dba:	d801      	bhi.n	8016dc0 <_strtol_l.constprop.0+0xb4>
 8016dbc:	3c37      	subs	r4, #55	@ 0x37
 8016dbe:	e7de      	b.n	8016d7e <_strtol_l.constprop.0+0x72>
 8016dc0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016dc4:	2f19      	cmp	r7, #25
 8016dc6:	d804      	bhi.n	8016dd2 <_strtol_l.constprop.0+0xc6>
 8016dc8:	3c57      	subs	r4, #87	@ 0x57
 8016dca:	e7d8      	b.n	8016d7e <_strtol_l.constprop.0+0x72>
 8016dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8016dd0:	e7e1      	b.n	8016d96 <_strtol_l.constprop.0+0x8a>
 8016dd2:	1c53      	adds	r3, r2, #1
 8016dd4:	d108      	bne.n	8016de8 <_strtol_l.constprop.0+0xdc>
 8016dd6:	2322      	movs	r3, #34	@ 0x22
 8016dd8:	f8ce 3000 	str.w	r3, [lr]
 8016ddc:	4660      	mov	r0, ip
 8016dde:	f1b8 0f00 	cmp.w	r8, #0
 8016de2:	d0a0      	beq.n	8016d26 <_strtol_l.constprop.0+0x1a>
 8016de4:	1e69      	subs	r1, r5, #1
 8016de6:	e006      	b.n	8016df6 <_strtol_l.constprop.0+0xea>
 8016de8:	b106      	cbz	r6, 8016dec <_strtol_l.constprop.0+0xe0>
 8016dea:	4240      	negs	r0, r0
 8016dec:	f1b8 0f00 	cmp.w	r8, #0
 8016df0:	d099      	beq.n	8016d26 <_strtol_l.constprop.0+0x1a>
 8016df2:	2a00      	cmp	r2, #0
 8016df4:	d1f6      	bne.n	8016de4 <_strtol_l.constprop.0+0xd8>
 8016df6:	f8c8 1000 	str.w	r1, [r8]
 8016dfa:	e794      	b.n	8016d26 <_strtol_l.constprop.0+0x1a>
 8016dfc:	08019291 	.word	0x08019291

08016e00 <_strtol_r>:
 8016e00:	f7ff bf84 	b.w	8016d0c <_strtol_l.constprop.0>

08016e04 <__ssputs_r>:
 8016e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e08:	688e      	ldr	r6, [r1, #8]
 8016e0a:	461f      	mov	r7, r3
 8016e0c:	42be      	cmp	r6, r7
 8016e0e:	680b      	ldr	r3, [r1, #0]
 8016e10:	4682      	mov	sl, r0
 8016e12:	460c      	mov	r4, r1
 8016e14:	4690      	mov	r8, r2
 8016e16:	d82d      	bhi.n	8016e74 <__ssputs_r+0x70>
 8016e18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016e1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016e20:	d026      	beq.n	8016e70 <__ssputs_r+0x6c>
 8016e22:	6965      	ldr	r5, [r4, #20]
 8016e24:	6909      	ldr	r1, [r1, #16]
 8016e26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e2a:	eba3 0901 	sub.w	r9, r3, r1
 8016e2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016e32:	1c7b      	adds	r3, r7, #1
 8016e34:	444b      	add	r3, r9
 8016e36:	106d      	asrs	r5, r5, #1
 8016e38:	429d      	cmp	r5, r3
 8016e3a:	bf38      	it	cc
 8016e3c:	461d      	movcc	r5, r3
 8016e3e:	0553      	lsls	r3, r2, #21
 8016e40:	d527      	bpl.n	8016e92 <__ssputs_r+0x8e>
 8016e42:	4629      	mov	r1, r5
 8016e44:	f7fc fcbc 	bl	80137c0 <_malloc_r>
 8016e48:	4606      	mov	r6, r0
 8016e4a:	b360      	cbz	r0, 8016ea6 <__ssputs_r+0xa2>
 8016e4c:	6921      	ldr	r1, [r4, #16]
 8016e4e:	464a      	mov	r2, r9
 8016e50:	f7fd fdf5 	bl	8014a3e <memcpy>
 8016e54:	89a3      	ldrh	r3, [r4, #12]
 8016e56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e5e:	81a3      	strh	r3, [r4, #12]
 8016e60:	6126      	str	r6, [r4, #16]
 8016e62:	6165      	str	r5, [r4, #20]
 8016e64:	444e      	add	r6, r9
 8016e66:	eba5 0509 	sub.w	r5, r5, r9
 8016e6a:	6026      	str	r6, [r4, #0]
 8016e6c:	60a5      	str	r5, [r4, #8]
 8016e6e:	463e      	mov	r6, r7
 8016e70:	42be      	cmp	r6, r7
 8016e72:	d900      	bls.n	8016e76 <__ssputs_r+0x72>
 8016e74:	463e      	mov	r6, r7
 8016e76:	6820      	ldr	r0, [r4, #0]
 8016e78:	4632      	mov	r2, r6
 8016e7a:	4641      	mov	r1, r8
 8016e7c:	f7fd fcdf 	bl	801483e <memmove>
 8016e80:	68a3      	ldr	r3, [r4, #8]
 8016e82:	1b9b      	subs	r3, r3, r6
 8016e84:	60a3      	str	r3, [r4, #8]
 8016e86:	6823      	ldr	r3, [r4, #0]
 8016e88:	4433      	add	r3, r6
 8016e8a:	6023      	str	r3, [r4, #0]
 8016e8c:	2000      	movs	r0, #0
 8016e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e92:	462a      	mov	r2, r5
 8016e94:	f000 ff0b 	bl	8017cae <_realloc_r>
 8016e98:	4606      	mov	r6, r0
 8016e9a:	2800      	cmp	r0, #0
 8016e9c:	d1e0      	bne.n	8016e60 <__ssputs_r+0x5c>
 8016e9e:	6921      	ldr	r1, [r4, #16]
 8016ea0:	4650      	mov	r0, sl
 8016ea2:	f7fe fc2d 	bl	8015700 <_free_r>
 8016ea6:	230c      	movs	r3, #12
 8016ea8:	f8ca 3000 	str.w	r3, [sl]
 8016eac:	89a3      	ldrh	r3, [r4, #12]
 8016eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016eb2:	81a3      	strh	r3, [r4, #12]
 8016eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8016eb8:	e7e9      	b.n	8016e8e <__ssputs_r+0x8a>
	...

08016ebc <_svfiprintf_r>:
 8016ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec0:	4698      	mov	r8, r3
 8016ec2:	898b      	ldrh	r3, [r1, #12]
 8016ec4:	061b      	lsls	r3, r3, #24
 8016ec6:	b09d      	sub	sp, #116	@ 0x74
 8016ec8:	4607      	mov	r7, r0
 8016eca:	460d      	mov	r5, r1
 8016ecc:	4614      	mov	r4, r2
 8016ece:	d510      	bpl.n	8016ef2 <_svfiprintf_r+0x36>
 8016ed0:	690b      	ldr	r3, [r1, #16]
 8016ed2:	b973      	cbnz	r3, 8016ef2 <_svfiprintf_r+0x36>
 8016ed4:	2140      	movs	r1, #64	@ 0x40
 8016ed6:	f7fc fc73 	bl	80137c0 <_malloc_r>
 8016eda:	6028      	str	r0, [r5, #0]
 8016edc:	6128      	str	r0, [r5, #16]
 8016ede:	b930      	cbnz	r0, 8016eee <_svfiprintf_r+0x32>
 8016ee0:	230c      	movs	r3, #12
 8016ee2:	603b      	str	r3, [r7, #0]
 8016ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ee8:	b01d      	add	sp, #116	@ 0x74
 8016eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eee:	2340      	movs	r3, #64	@ 0x40
 8016ef0:	616b      	str	r3, [r5, #20]
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ef6:	2320      	movs	r3, #32
 8016ef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f00:	2330      	movs	r3, #48	@ 0x30
 8016f02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80170a0 <_svfiprintf_r+0x1e4>
 8016f06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016f0a:	f04f 0901 	mov.w	r9, #1
 8016f0e:	4623      	mov	r3, r4
 8016f10:	469a      	mov	sl, r3
 8016f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f16:	b10a      	cbz	r2, 8016f1c <_svfiprintf_r+0x60>
 8016f18:	2a25      	cmp	r2, #37	@ 0x25
 8016f1a:	d1f9      	bne.n	8016f10 <_svfiprintf_r+0x54>
 8016f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8016f20:	d00b      	beq.n	8016f3a <_svfiprintf_r+0x7e>
 8016f22:	465b      	mov	r3, fp
 8016f24:	4622      	mov	r2, r4
 8016f26:	4629      	mov	r1, r5
 8016f28:	4638      	mov	r0, r7
 8016f2a:	f7ff ff6b 	bl	8016e04 <__ssputs_r>
 8016f2e:	3001      	adds	r0, #1
 8016f30:	f000 80a7 	beq.w	8017082 <_svfiprintf_r+0x1c6>
 8016f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f36:	445a      	add	r2, fp
 8016f38:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	f000 809f 	beq.w	8017082 <_svfiprintf_r+0x1c6>
 8016f44:	2300      	movs	r3, #0
 8016f46:	f04f 32ff 	mov.w	r2, #4294967295
 8016f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f4e:	f10a 0a01 	add.w	sl, sl, #1
 8016f52:	9304      	str	r3, [sp, #16]
 8016f54:	9307      	str	r3, [sp, #28]
 8016f56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016f5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8016f5c:	4654      	mov	r4, sl
 8016f5e:	2205      	movs	r2, #5
 8016f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f64:	484e      	ldr	r0, [pc, #312]	@ (80170a0 <_svfiprintf_r+0x1e4>)
 8016f66:	f7e9 f95b 	bl	8000220 <memchr>
 8016f6a:	9a04      	ldr	r2, [sp, #16]
 8016f6c:	b9d8      	cbnz	r0, 8016fa6 <_svfiprintf_r+0xea>
 8016f6e:	06d0      	lsls	r0, r2, #27
 8016f70:	bf44      	itt	mi
 8016f72:	2320      	movmi	r3, #32
 8016f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016f78:	0711      	lsls	r1, r2, #28
 8016f7a:	bf44      	itt	mi
 8016f7c:	232b      	movmi	r3, #43	@ 0x2b
 8016f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016f82:	f89a 3000 	ldrb.w	r3, [sl]
 8016f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f88:	d015      	beq.n	8016fb6 <_svfiprintf_r+0xfa>
 8016f8a:	9a07      	ldr	r2, [sp, #28]
 8016f8c:	4654      	mov	r4, sl
 8016f8e:	2000      	movs	r0, #0
 8016f90:	f04f 0c0a 	mov.w	ip, #10
 8016f94:	4621      	mov	r1, r4
 8016f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f9a:	3b30      	subs	r3, #48	@ 0x30
 8016f9c:	2b09      	cmp	r3, #9
 8016f9e:	d94b      	bls.n	8017038 <_svfiprintf_r+0x17c>
 8016fa0:	b1b0      	cbz	r0, 8016fd0 <_svfiprintf_r+0x114>
 8016fa2:	9207      	str	r2, [sp, #28]
 8016fa4:	e014      	b.n	8016fd0 <_svfiprintf_r+0x114>
 8016fa6:	eba0 0308 	sub.w	r3, r0, r8
 8016faa:	fa09 f303 	lsl.w	r3, r9, r3
 8016fae:	4313      	orrs	r3, r2
 8016fb0:	9304      	str	r3, [sp, #16]
 8016fb2:	46a2      	mov	sl, r4
 8016fb4:	e7d2      	b.n	8016f5c <_svfiprintf_r+0xa0>
 8016fb6:	9b03      	ldr	r3, [sp, #12]
 8016fb8:	1d19      	adds	r1, r3, #4
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	9103      	str	r1, [sp, #12]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	bfbb      	ittet	lt
 8016fc2:	425b      	neglt	r3, r3
 8016fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8016fc8:	9307      	strge	r3, [sp, #28]
 8016fca:	9307      	strlt	r3, [sp, #28]
 8016fcc:	bfb8      	it	lt
 8016fce:	9204      	strlt	r2, [sp, #16]
 8016fd0:	7823      	ldrb	r3, [r4, #0]
 8016fd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8016fd4:	d10a      	bne.n	8016fec <_svfiprintf_r+0x130>
 8016fd6:	7863      	ldrb	r3, [r4, #1]
 8016fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8016fda:	d132      	bne.n	8017042 <_svfiprintf_r+0x186>
 8016fdc:	9b03      	ldr	r3, [sp, #12]
 8016fde:	1d1a      	adds	r2, r3, #4
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	9203      	str	r2, [sp, #12]
 8016fe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016fe8:	3402      	adds	r4, #2
 8016fea:	9305      	str	r3, [sp, #20]
 8016fec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80170b0 <_svfiprintf_r+0x1f4>
 8016ff0:	7821      	ldrb	r1, [r4, #0]
 8016ff2:	2203      	movs	r2, #3
 8016ff4:	4650      	mov	r0, sl
 8016ff6:	f7e9 f913 	bl	8000220 <memchr>
 8016ffa:	b138      	cbz	r0, 801700c <_svfiprintf_r+0x150>
 8016ffc:	9b04      	ldr	r3, [sp, #16]
 8016ffe:	eba0 000a 	sub.w	r0, r0, sl
 8017002:	2240      	movs	r2, #64	@ 0x40
 8017004:	4082      	lsls	r2, r0
 8017006:	4313      	orrs	r3, r2
 8017008:	3401      	adds	r4, #1
 801700a:	9304      	str	r3, [sp, #16]
 801700c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017010:	4824      	ldr	r0, [pc, #144]	@ (80170a4 <_svfiprintf_r+0x1e8>)
 8017012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017016:	2206      	movs	r2, #6
 8017018:	f7e9 f902 	bl	8000220 <memchr>
 801701c:	2800      	cmp	r0, #0
 801701e:	d036      	beq.n	801708e <_svfiprintf_r+0x1d2>
 8017020:	4b21      	ldr	r3, [pc, #132]	@ (80170a8 <_svfiprintf_r+0x1ec>)
 8017022:	bb1b      	cbnz	r3, 801706c <_svfiprintf_r+0x1b0>
 8017024:	9b03      	ldr	r3, [sp, #12]
 8017026:	3307      	adds	r3, #7
 8017028:	f023 0307 	bic.w	r3, r3, #7
 801702c:	3308      	adds	r3, #8
 801702e:	9303      	str	r3, [sp, #12]
 8017030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017032:	4433      	add	r3, r6
 8017034:	9309      	str	r3, [sp, #36]	@ 0x24
 8017036:	e76a      	b.n	8016f0e <_svfiprintf_r+0x52>
 8017038:	fb0c 3202 	mla	r2, ip, r2, r3
 801703c:	460c      	mov	r4, r1
 801703e:	2001      	movs	r0, #1
 8017040:	e7a8      	b.n	8016f94 <_svfiprintf_r+0xd8>
 8017042:	2300      	movs	r3, #0
 8017044:	3401      	adds	r4, #1
 8017046:	9305      	str	r3, [sp, #20]
 8017048:	4619      	mov	r1, r3
 801704a:	f04f 0c0a 	mov.w	ip, #10
 801704e:	4620      	mov	r0, r4
 8017050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017054:	3a30      	subs	r2, #48	@ 0x30
 8017056:	2a09      	cmp	r2, #9
 8017058:	d903      	bls.n	8017062 <_svfiprintf_r+0x1a6>
 801705a:	2b00      	cmp	r3, #0
 801705c:	d0c6      	beq.n	8016fec <_svfiprintf_r+0x130>
 801705e:	9105      	str	r1, [sp, #20]
 8017060:	e7c4      	b.n	8016fec <_svfiprintf_r+0x130>
 8017062:	fb0c 2101 	mla	r1, ip, r1, r2
 8017066:	4604      	mov	r4, r0
 8017068:	2301      	movs	r3, #1
 801706a:	e7f0      	b.n	801704e <_svfiprintf_r+0x192>
 801706c:	ab03      	add	r3, sp, #12
 801706e:	9300      	str	r3, [sp, #0]
 8017070:	462a      	mov	r2, r5
 8017072:	4b0e      	ldr	r3, [pc, #56]	@ (80170ac <_svfiprintf_r+0x1f0>)
 8017074:	a904      	add	r1, sp, #16
 8017076:	4638      	mov	r0, r7
 8017078:	f7fc fcce 	bl	8013a18 <_printf_float>
 801707c:	1c42      	adds	r2, r0, #1
 801707e:	4606      	mov	r6, r0
 8017080:	d1d6      	bne.n	8017030 <_svfiprintf_r+0x174>
 8017082:	89ab      	ldrh	r3, [r5, #12]
 8017084:	065b      	lsls	r3, r3, #25
 8017086:	f53f af2d 	bmi.w	8016ee4 <_svfiprintf_r+0x28>
 801708a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801708c:	e72c      	b.n	8016ee8 <_svfiprintf_r+0x2c>
 801708e:	ab03      	add	r3, sp, #12
 8017090:	9300      	str	r3, [sp, #0]
 8017092:	462a      	mov	r2, r5
 8017094:	4b05      	ldr	r3, [pc, #20]	@ (80170ac <_svfiprintf_r+0x1f0>)
 8017096:	a904      	add	r1, sp, #16
 8017098:	4638      	mov	r0, r7
 801709a:	f7fc ff55 	bl	8013f48 <_printf_i>
 801709e:	e7ed      	b.n	801707c <_svfiprintf_r+0x1c0>
 80170a0:	08019391 	.word	0x08019391
 80170a4:	0801939b 	.word	0x0801939b
 80170a8:	08013a19 	.word	0x08013a19
 80170ac:	08016e05 	.word	0x08016e05
 80170b0:	08019397 	.word	0x08019397

080170b4 <__sfputc_r>:
 80170b4:	6893      	ldr	r3, [r2, #8]
 80170b6:	3b01      	subs	r3, #1
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	b410      	push	{r4}
 80170bc:	6093      	str	r3, [r2, #8]
 80170be:	da08      	bge.n	80170d2 <__sfputc_r+0x1e>
 80170c0:	6994      	ldr	r4, [r2, #24]
 80170c2:	42a3      	cmp	r3, r4
 80170c4:	db01      	blt.n	80170ca <__sfputc_r+0x16>
 80170c6:	290a      	cmp	r1, #10
 80170c8:	d103      	bne.n	80170d2 <__sfputc_r+0x1e>
 80170ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170ce:	f000 b9df 	b.w	8017490 <__swbuf_r>
 80170d2:	6813      	ldr	r3, [r2, #0]
 80170d4:	1c58      	adds	r0, r3, #1
 80170d6:	6010      	str	r0, [r2, #0]
 80170d8:	7019      	strb	r1, [r3, #0]
 80170da:	4608      	mov	r0, r1
 80170dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170e0:	4770      	bx	lr

080170e2 <__sfputs_r>:
 80170e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170e4:	4606      	mov	r6, r0
 80170e6:	460f      	mov	r7, r1
 80170e8:	4614      	mov	r4, r2
 80170ea:	18d5      	adds	r5, r2, r3
 80170ec:	42ac      	cmp	r4, r5
 80170ee:	d101      	bne.n	80170f4 <__sfputs_r+0x12>
 80170f0:	2000      	movs	r0, #0
 80170f2:	e007      	b.n	8017104 <__sfputs_r+0x22>
 80170f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170f8:	463a      	mov	r2, r7
 80170fa:	4630      	mov	r0, r6
 80170fc:	f7ff ffda 	bl	80170b4 <__sfputc_r>
 8017100:	1c43      	adds	r3, r0, #1
 8017102:	d1f3      	bne.n	80170ec <__sfputs_r+0xa>
 8017104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017108 <_vfiprintf_r>:
 8017108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801710c:	460d      	mov	r5, r1
 801710e:	b09d      	sub	sp, #116	@ 0x74
 8017110:	4614      	mov	r4, r2
 8017112:	4698      	mov	r8, r3
 8017114:	4606      	mov	r6, r0
 8017116:	b118      	cbz	r0, 8017120 <_vfiprintf_r+0x18>
 8017118:	6a03      	ldr	r3, [r0, #32]
 801711a:	b90b      	cbnz	r3, 8017120 <_vfiprintf_r+0x18>
 801711c:	f7fd fad4 	bl	80146c8 <__sinit>
 8017120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017122:	07d9      	lsls	r1, r3, #31
 8017124:	d405      	bmi.n	8017132 <_vfiprintf_r+0x2a>
 8017126:	89ab      	ldrh	r3, [r5, #12]
 8017128:	059a      	lsls	r2, r3, #22
 801712a:	d402      	bmi.n	8017132 <_vfiprintf_r+0x2a>
 801712c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801712e:	f7fd fc84 	bl	8014a3a <__retarget_lock_acquire_recursive>
 8017132:	89ab      	ldrh	r3, [r5, #12]
 8017134:	071b      	lsls	r3, r3, #28
 8017136:	d501      	bpl.n	801713c <_vfiprintf_r+0x34>
 8017138:	692b      	ldr	r3, [r5, #16]
 801713a:	b99b      	cbnz	r3, 8017164 <_vfiprintf_r+0x5c>
 801713c:	4629      	mov	r1, r5
 801713e:	4630      	mov	r0, r6
 8017140:	f000 f9e4 	bl	801750c <__swsetup_r>
 8017144:	b170      	cbz	r0, 8017164 <_vfiprintf_r+0x5c>
 8017146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017148:	07dc      	lsls	r4, r3, #31
 801714a:	d504      	bpl.n	8017156 <_vfiprintf_r+0x4e>
 801714c:	f04f 30ff 	mov.w	r0, #4294967295
 8017150:	b01d      	add	sp, #116	@ 0x74
 8017152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017156:	89ab      	ldrh	r3, [r5, #12]
 8017158:	0598      	lsls	r0, r3, #22
 801715a:	d4f7      	bmi.n	801714c <_vfiprintf_r+0x44>
 801715c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801715e:	f7fd fc6d 	bl	8014a3c <__retarget_lock_release_recursive>
 8017162:	e7f3      	b.n	801714c <_vfiprintf_r+0x44>
 8017164:	2300      	movs	r3, #0
 8017166:	9309      	str	r3, [sp, #36]	@ 0x24
 8017168:	2320      	movs	r3, #32
 801716a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801716e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017172:	2330      	movs	r3, #48	@ 0x30
 8017174:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017324 <_vfiprintf_r+0x21c>
 8017178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801717c:	f04f 0901 	mov.w	r9, #1
 8017180:	4623      	mov	r3, r4
 8017182:	469a      	mov	sl, r3
 8017184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017188:	b10a      	cbz	r2, 801718e <_vfiprintf_r+0x86>
 801718a:	2a25      	cmp	r2, #37	@ 0x25
 801718c:	d1f9      	bne.n	8017182 <_vfiprintf_r+0x7a>
 801718e:	ebba 0b04 	subs.w	fp, sl, r4
 8017192:	d00b      	beq.n	80171ac <_vfiprintf_r+0xa4>
 8017194:	465b      	mov	r3, fp
 8017196:	4622      	mov	r2, r4
 8017198:	4629      	mov	r1, r5
 801719a:	4630      	mov	r0, r6
 801719c:	f7ff ffa1 	bl	80170e2 <__sfputs_r>
 80171a0:	3001      	adds	r0, #1
 80171a2:	f000 80a7 	beq.w	80172f4 <_vfiprintf_r+0x1ec>
 80171a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171a8:	445a      	add	r2, fp
 80171aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80171ac:	f89a 3000 	ldrb.w	r3, [sl]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	f000 809f 	beq.w	80172f4 <_vfiprintf_r+0x1ec>
 80171b6:	2300      	movs	r3, #0
 80171b8:	f04f 32ff 	mov.w	r2, #4294967295
 80171bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171c0:	f10a 0a01 	add.w	sl, sl, #1
 80171c4:	9304      	str	r3, [sp, #16]
 80171c6:	9307      	str	r3, [sp, #28]
 80171c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80171cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80171ce:	4654      	mov	r4, sl
 80171d0:	2205      	movs	r2, #5
 80171d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171d6:	4853      	ldr	r0, [pc, #332]	@ (8017324 <_vfiprintf_r+0x21c>)
 80171d8:	f7e9 f822 	bl	8000220 <memchr>
 80171dc:	9a04      	ldr	r2, [sp, #16]
 80171de:	b9d8      	cbnz	r0, 8017218 <_vfiprintf_r+0x110>
 80171e0:	06d1      	lsls	r1, r2, #27
 80171e2:	bf44      	itt	mi
 80171e4:	2320      	movmi	r3, #32
 80171e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171ea:	0713      	lsls	r3, r2, #28
 80171ec:	bf44      	itt	mi
 80171ee:	232b      	movmi	r3, #43	@ 0x2b
 80171f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171f4:	f89a 3000 	ldrb.w	r3, [sl]
 80171f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80171fa:	d015      	beq.n	8017228 <_vfiprintf_r+0x120>
 80171fc:	9a07      	ldr	r2, [sp, #28]
 80171fe:	4654      	mov	r4, sl
 8017200:	2000      	movs	r0, #0
 8017202:	f04f 0c0a 	mov.w	ip, #10
 8017206:	4621      	mov	r1, r4
 8017208:	f811 3b01 	ldrb.w	r3, [r1], #1
 801720c:	3b30      	subs	r3, #48	@ 0x30
 801720e:	2b09      	cmp	r3, #9
 8017210:	d94b      	bls.n	80172aa <_vfiprintf_r+0x1a2>
 8017212:	b1b0      	cbz	r0, 8017242 <_vfiprintf_r+0x13a>
 8017214:	9207      	str	r2, [sp, #28]
 8017216:	e014      	b.n	8017242 <_vfiprintf_r+0x13a>
 8017218:	eba0 0308 	sub.w	r3, r0, r8
 801721c:	fa09 f303 	lsl.w	r3, r9, r3
 8017220:	4313      	orrs	r3, r2
 8017222:	9304      	str	r3, [sp, #16]
 8017224:	46a2      	mov	sl, r4
 8017226:	e7d2      	b.n	80171ce <_vfiprintf_r+0xc6>
 8017228:	9b03      	ldr	r3, [sp, #12]
 801722a:	1d19      	adds	r1, r3, #4
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	9103      	str	r1, [sp, #12]
 8017230:	2b00      	cmp	r3, #0
 8017232:	bfbb      	ittet	lt
 8017234:	425b      	neglt	r3, r3
 8017236:	f042 0202 	orrlt.w	r2, r2, #2
 801723a:	9307      	strge	r3, [sp, #28]
 801723c:	9307      	strlt	r3, [sp, #28]
 801723e:	bfb8      	it	lt
 8017240:	9204      	strlt	r2, [sp, #16]
 8017242:	7823      	ldrb	r3, [r4, #0]
 8017244:	2b2e      	cmp	r3, #46	@ 0x2e
 8017246:	d10a      	bne.n	801725e <_vfiprintf_r+0x156>
 8017248:	7863      	ldrb	r3, [r4, #1]
 801724a:	2b2a      	cmp	r3, #42	@ 0x2a
 801724c:	d132      	bne.n	80172b4 <_vfiprintf_r+0x1ac>
 801724e:	9b03      	ldr	r3, [sp, #12]
 8017250:	1d1a      	adds	r2, r3, #4
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	9203      	str	r2, [sp, #12]
 8017256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801725a:	3402      	adds	r4, #2
 801725c:	9305      	str	r3, [sp, #20]
 801725e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017334 <_vfiprintf_r+0x22c>
 8017262:	7821      	ldrb	r1, [r4, #0]
 8017264:	2203      	movs	r2, #3
 8017266:	4650      	mov	r0, sl
 8017268:	f7e8 ffda 	bl	8000220 <memchr>
 801726c:	b138      	cbz	r0, 801727e <_vfiprintf_r+0x176>
 801726e:	9b04      	ldr	r3, [sp, #16]
 8017270:	eba0 000a 	sub.w	r0, r0, sl
 8017274:	2240      	movs	r2, #64	@ 0x40
 8017276:	4082      	lsls	r2, r0
 8017278:	4313      	orrs	r3, r2
 801727a:	3401      	adds	r4, #1
 801727c:	9304      	str	r3, [sp, #16]
 801727e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017282:	4829      	ldr	r0, [pc, #164]	@ (8017328 <_vfiprintf_r+0x220>)
 8017284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017288:	2206      	movs	r2, #6
 801728a:	f7e8 ffc9 	bl	8000220 <memchr>
 801728e:	2800      	cmp	r0, #0
 8017290:	d03f      	beq.n	8017312 <_vfiprintf_r+0x20a>
 8017292:	4b26      	ldr	r3, [pc, #152]	@ (801732c <_vfiprintf_r+0x224>)
 8017294:	bb1b      	cbnz	r3, 80172de <_vfiprintf_r+0x1d6>
 8017296:	9b03      	ldr	r3, [sp, #12]
 8017298:	3307      	adds	r3, #7
 801729a:	f023 0307 	bic.w	r3, r3, #7
 801729e:	3308      	adds	r3, #8
 80172a0:	9303      	str	r3, [sp, #12]
 80172a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172a4:	443b      	add	r3, r7
 80172a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80172a8:	e76a      	b.n	8017180 <_vfiprintf_r+0x78>
 80172aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80172ae:	460c      	mov	r4, r1
 80172b0:	2001      	movs	r0, #1
 80172b2:	e7a8      	b.n	8017206 <_vfiprintf_r+0xfe>
 80172b4:	2300      	movs	r3, #0
 80172b6:	3401      	adds	r4, #1
 80172b8:	9305      	str	r3, [sp, #20]
 80172ba:	4619      	mov	r1, r3
 80172bc:	f04f 0c0a 	mov.w	ip, #10
 80172c0:	4620      	mov	r0, r4
 80172c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172c6:	3a30      	subs	r2, #48	@ 0x30
 80172c8:	2a09      	cmp	r2, #9
 80172ca:	d903      	bls.n	80172d4 <_vfiprintf_r+0x1cc>
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d0c6      	beq.n	801725e <_vfiprintf_r+0x156>
 80172d0:	9105      	str	r1, [sp, #20]
 80172d2:	e7c4      	b.n	801725e <_vfiprintf_r+0x156>
 80172d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80172d8:	4604      	mov	r4, r0
 80172da:	2301      	movs	r3, #1
 80172dc:	e7f0      	b.n	80172c0 <_vfiprintf_r+0x1b8>
 80172de:	ab03      	add	r3, sp, #12
 80172e0:	9300      	str	r3, [sp, #0]
 80172e2:	462a      	mov	r2, r5
 80172e4:	4b12      	ldr	r3, [pc, #72]	@ (8017330 <_vfiprintf_r+0x228>)
 80172e6:	a904      	add	r1, sp, #16
 80172e8:	4630      	mov	r0, r6
 80172ea:	f7fc fb95 	bl	8013a18 <_printf_float>
 80172ee:	4607      	mov	r7, r0
 80172f0:	1c78      	adds	r0, r7, #1
 80172f2:	d1d6      	bne.n	80172a2 <_vfiprintf_r+0x19a>
 80172f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172f6:	07d9      	lsls	r1, r3, #31
 80172f8:	d405      	bmi.n	8017306 <_vfiprintf_r+0x1fe>
 80172fa:	89ab      	ldrh	r3, [r5, #12]
 80172fc:	059a      	lsls	r2, r3, #22
 80172fe:	d402      	bmi.n	8017306 <_vfiprintf_r+0x1fe>
 8017300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017302:	f7fd fb9b 	bl	8014a3c <__retarget_lock_release_recursive>
 8017306:	89ab      	ldrh	r3, [r5, #12]
 8017308:	065b      	lsls	r3, r3, #25
 801730a:	f53f af1f 	bmi.w	801714c <_vfiprintf_r+0x44>
 801730e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017310:	e71e      	b.n	8017150 <_vfiprintf_r+0x48>
 8017312:	ab03      	add	r3, sp, #12
 8017314:	9300      	str	r3, [sp, #0]
 8017316:	462a      	mov	r2, r5
 8017318:	4b05      	ldr	r3, [pc, #20]	@ (8017330 <_vfiprintf_r+0x228>)
 801731a:	a904      	add	r1, sp, #16
 801731c:	4630      	mov	r0, r6
 801731e:	f7fc fe13 	bl	8013f48 <_printf_i>
 8017322:	e7e4      	b.n	80172ee <_vfiprintf_r+0x1e6>
 8017324:	08019391 	.word	0x08019391
 8017328:	0801939b 	.word	0x0801939b
 801732c:	08013a19 	.word	0x08013a19
 8017330:	080170e3 	.word	0x080170e3
 8017334:	08019397 	.word	0x08019397

08017338 <__sflush_r>:
 8017338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017340:	0716      	lsls	r6, r2, #28
 8017342:	4605      	mov	r5, r0
 8017344:	460c      	mov	r4, r1
 8017346:	d454      	bmi.n	80173f2 <__sflush_r+0xba>
 8017348:	684b      	ldr	r3, [r1, #4]
 801734a:	2b00      	cmp	r3, #0
 801734c:	dc02      	bgt.n	8017354 <__sflush_r+0x1c>
 801734e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017350:	2b00      	cmp	r3, #0
 8017352:	dd48      	ble.n	80173e6 <__sflush_r+0xae>
 8017354:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017356:	2e00      	cmp	r6, #0
 8017358:	d045      	beq.n	80173e6 <__sflush_r+0xae>
 801735a:	2300      	movs	r3, #0
 801735c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017360:	682f      	ldr	r7, [r5, #0]
 8017362:	6a21      	ldr	r1, [r4, #32]
 8017364:	602b      	str	r3, [r5, #0]
 8017366:	d030      	beq.n	80173ca <__sflush_r+0x92>
 8017368:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801736a:	89a3      	ldrh	r3, [r4, #12]
 801736c:	0759      	lsls	r1, r3, #29
 801736e:	d505      	bpl.n	801737c <__sflush_r+0x44>
 8017370:	6863      	ldr	r3, [r4, #4]
 8017372:	1ad2      	subs	r2, r2, r3
 8017374:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017376:	b10b      	cbz	r3, 801737c <__sflush_r+0x44>
 8017378:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801737a:	1ad2      	subs	r2, r2, r3
 801737c:	2300      	movs	r3, #0
 801737e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017380:	6a21      	ldr	r1, [r4, #32]
 8017382:	4628      	mov	r0, r5
 8017384:	47b0      	blx	r6
 8017386:	1c43      	adds	r3, r0, #1
 8017388:	89a3      	ldrh	r3, [r4, #12]
 801738a:	d106      	bne.n	801739a <__sflush_r+0x62>
 801738c:	6829      	ldr	r1, [r5, #0]
 801738e:	291d      	cmp	r1, #29
 8017390:	d82b      	bhi.n	80173ea <__sflush_r+0xb2>
 8017392:	4a2a      	ldr	r2, [pc, #168]	@ (801743c <__sflush_r+0x104>)
 8017394:	410a      	asrs	r2, r1
 8017396:	07d6      	lsls	r6, r2, #31
 8017398:	d427      	bmi.n	80173ea <__sflush_r+0xb2>
 801739a:	2200      	movs	r2, #0
 801739c:	6062      	str	r2, [r4, #4]
 801739e:	04d9      	lsls	r1, r3, #19
 80173a0:	6922      	ldr	r2, [r4, #16]
 80173a2:	6022      	str	r2, [r4, #0]
 80173a4:	d504      	bpl.n	80173b0 <__sflush_r+0x78>
 80173a6:	1c42      	adds	r2, r0, #1
 80173a8:	d101      	bne.n	80173ae <__sflush_r+0x76>
 80173aa:	682b      	ldr	r3, [r5, #0]
 80173ac:	b903      	cbnz	r3, 80173b0 <__sflush_r+0x78>
 80173ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80173b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80173b2:	602f      	str	r7, [r5, #0]
 80173b4:	b1b9      	cbz	r1, 80173e6 <__sflush_r+0xae>
 80173b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80173ba:	4299      	cmp	r1, r3
 80173bc:	d002      	beq.n	80173c4 <__sflush_r+0x8c>
 80173be:	4628      	mov	r0, r5
 80173c0:	f7fe f99e 	bl	8015700 <_free_r>
 80173c4:	2300      	movs	r3, #0
 80173c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80173c8:	e00d      	b.n	80173e6 <__sflush_r+0xae>
 80173ca:	2301      	movs	r3, #1
 80173cc:	4628      	mov	r0, r5
 80173ce:	47b0      	blx	r6
 80173d0:	4602      	mov	r2, r0
 80173d2:	1c50      	adds	r0, r2, #1
 80173d4:	d1c9      	bne.n	801736a <__sflush_r+0x32>
 80173d6:	682b      	ldr	r3, [r5, #0]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d0c6      	beq.n	801736a <__sflush_r+0x32>
 80173dc:	2b1d      	cmp	r3, #29
 80173de:	d001      	beq.n	80173e4 <__sflush_r+0xac>
 80173e0:	2b16      	cmp	r3, #22
 80173e2:	d11e      	bne.n	8017422 <__sflush_r+0xea>
 80173e4:	602f      	str	r7, [r5, #0]
 80173e6:	2000      	movs	r0, #0
 80173e8:	e022      	b.n	8017430 <__sflush_r+0xf8>
 80173ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173ee:	b21b      	sxth	r3, r3
 80173f0:	e01b      	b.n	801742a <__sflush_r+0xf2>
 80173f2:	690f      	ldr	r7, [r1, #16]
 80173f4:	2f00      	cmp	r7, #0
 80173f6:	d0f6      	beq.n	80173e6 <__sflush_r+0xae>
 80173f8:	0793      	lsls	r3, r2, #30
 80173fa:	680e      	ldr	r6, [r1, #0]
 80173fc:	bf08      	it	eq
 80173fe:	694b      	ldreq	r3, [r1, #20]
 8017400:	600f      	str	r7, [r1, #0]
 8017402:	bf18      	it	ne
 8017404:	2300      	movne	r3, #0
 8017406:	eba6 0807 	sub.w	r8, r6, r7
 801740a:	608b      	str	r3, [r1, #8]
 801740c:	f1b8 0f00 	cmp.w	r8, #0
 8017410:	dde9      	ble.n	80173e6 <__sflush_r+0xae>
 8017412:	6a21      	ldr	r1, [r4, #32]
 8017414:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017416:	4643      	mov	r3, r8
 8017418:	463a      	mov	r2, r7
 801741a:	4628      	mov	r0, r5
 801741c:	47b0      	blx	r6
 801741e:	2800      	cmp	r0, #0
 8017420:	dc08      	bgt.n	8017434 <__sflush_r+0xfc>
 8017422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801742a:	81a3      	strh	r3, [r4, #12]
 801742c:	f04f 30ff 	mov.w	r0, #4294967295
 8017430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017434:	4407      	add	r7, r0
 8017436:	eba8 0800 	sub.w	r8, r8, r0
 801743a:	e7e7      	b.n	801740c <__sflush_r+0xd4>
 801743c:	dfbffffe 	.word	0xdfbffffe

08017440 <_fflush_r>:
 8017440:	b538      	push	{r3, r4, r5, lr}
 8017442:	690b      	ldr	r3, [r1, #16]
 8017444:	4605      	mov	r5, r0
 8017446:	460c      	mov	r4, r1
 8017448:	b913      	cbnz	r3, 8017450 <_fflush_r+0x10>
 801744a:	2500      	movs	r5, #0
 801744c:	4628      	mov	r0, r5
 801744e:	bd38      	pop	{r3, r4, r5, pc}
 8017450:	b118      	cbz	r0, 801745a <_fflush_r+0x1a>
 8017452:	6a03      	ldr	r3, [r0, #32]
 8017454:	b90b      	cbnz	r3, 801745a <_fflush_r+0x1a>
 8017456:	f7fd f937 	bl	80146c8 <__sinit>
 801745a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d0f3      	beq.n	801744a <_fflush_r+0xa>
 8017462:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017464:	07d0      	lsls	r0, r2, #31
 8017466:	d404      	bmi.n	8017472 <_fflush_r+0x32>
 8017468:	0599      	lsls	r1, r3, #22
 801746a:	d402      	bmi.n	8017472 <_fflush_r+0x32>
 801746c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801746e:	f7fd fae4 	bl	8014a3a <__retarget_lock_acquire_recursive>
 8017472:	4628      	mov	r0, r5
 8017474:	4621      	mov	r1, r4
 8017476:	f7ff ff5f 	bl	8017338 <__sflush_r>
 801747a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801747c:	07da      	lsls	r2, r3, #31
 801747e:	4605      	mov	r5, r0
 8017480:	d4e4      	bmi.n	801744c <_fflush_r+0xc>
 8017482:	89a3      	ldrh	r3, [r4, #12]
 8017484:	059b      	lsls	r3, r3, #22
 8017486:	d4e1      	bmi.n	801744c <_fflush_r+0xc>
 8017488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801748a:	f7fd fad7 	bl	8014a3c <__retarget_lock_release_recursive>
 801748e:	e7dd      	b.n	801744c <_fflush_r+0xc>

08017490 <__swbuf_r>:
 8017490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017492:	460e      	mov	r6, r1
 8017494:	4614      	mov	r4, r2
 8017496:	4605      	mov	r5, r0
 8017498:	b118      	cbz	r0, 80174a2 <__swbuf_r+0x12>
 801749a:	6a03      	ldr	r3, [r0, #32]
 801749c:	b90b      	cbnz	r3, 80174a2 <__swbuf_r+0x12>
 801749e:	f7fd f913 	bl	80146c8 <__sinit>
 80174a2:	69a3      	ldr	r3, [r4, #24]
 80174a4:	60a3      	str	r3, [r4, #8]
 80174a6:	89a3      	ldrh	r3, [r4, #12]
 80174a8:	071a      	lsls	r2, r3, #28
 80174aa:	d501      	bpl.n	80174b0 <__swbuf_r+0x20>
 80174ac:	6923      	ldr	r3, [r4, #16]
 80174ae:	b943      	cbnz	r3, 80174c2 <__swbuf_r+0x32>
 80174b0:	4621      	mov	r1, r4
 80174b2:	4628      	mov	r0, r5
 80174b4:	f000 f82a 	bl	801750c <__swsetup_r>
 80174b8:	b118      	cbz	r0, 80174c2 <__swbuf_r+0x32>
 80174ba:	f04f 37ff 	mov.w	r7, #4294967295
 80174be:	4638      	mov	r0, r7
 80174c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174c2:	6823      	ldr	r3, [r4, #0]
 80174c4:	6922      	ldr	r2, [r4, #16]
 80174c6:	1a98      	subs	r0, r3, r2
 80174c8:	6963      	ldr	r3, [r4, #20]
 80174ca:	b2f6      	uxtb	r6, r6
 80174cc:	4283      	cmp	r3, r0
 80174ce:	4637      	mov	r7, r6
 80174d0:	dc05      	bgt.n	80174de <__swbuf_r+0x4e>
 80174d2:	4621      	mov	r1, r4
 80174d4:	4628      	mov	r0, r5
 80174d6:	f7ff ffb3 	bl	8017440 <_fflush_r>
 80174da:	2800      	cmp	r0, #0
 80174dc:	d1ed      	bne.n	80174ba <__swbuf_r+0x2a>
 80174de:	68a3      	ldr	r3, [r4, #8]
 80174e0:	3b01      	subs	r3, #1
 80174e2:	60a3      	str	r3, [r4, #8]
 80174e4:	6823      	ldr	r3, [r4, #0]
 80174e6:	1c5a      	adds	r2, r3, #1
 80174e8:	6022      	str	r2, [r4, #0]
 80174ea:	701e      	strb	r6, [r3, #0]
 80174ec:	6962      	ldr	r2, [r4, #20]
 80174ee:	1c43      	adds	r3, r0, #1
 80174f0:	429a      	cmp	r2, r3
 80174f2:	d004      	beq.n	80174fe <__swbuf_r+0x6e>
 80174f4:	89a3      	ldrh	r3, [r4, #12]
 80174f6:	07db      	lsls	r3, r3, #31
 80174f8:	d5e1      	bpl.n	80174be <__swbuf_r+0x2e>
 80174fa:	2e0a      	cmp	r6, #10
 80174fc:	d1df      	bne.n	80174be <__swbuf_r+0x2e>
 80174fe:	4621      	mov	r1, r4
 8017500:	4628      	mov	r0, r5
 8017502:	f7ff ff9d 	bl	8017440 <_fflush_r>
 8017506:	2800      	cmp	r0, #0
 8017508:	d0d9      	beq.n	80174be <__swbuf_r+0x2e>
 801750a:	e7d6      	b.n	80174ba <__swbuf_r+0x2a>

0801750c <__swsetup_r>:
 801750c:	b538      	push	{r3, r4, r5, lr}
 801750e:	4b29      	ldr	r3, [pc, #164]	@ (80175b4 <__swsetup_r+0xa8>)
 8017510:	4605      	mov	r5, r0
 8017512:	6818      	ldr	r0, [r3, #0]
 8017514:	460c      	mov	r4, r1
 8017516:	b118      	cbz	r0, 8017520 <__swsetup_r+0x14>
 8017518:	6a03      	ldr	r3, [r0, #32]
 801751a:	b90b      	cbnz	r3, 8017520 <__swsetup_r+0x14>
 801751c:	f7fd f8d4 	bl	80146c8 <__sinit>
 8017520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017524:	0719      	lsls	r1, r3, #28
 8017526:	d422      	bmi.n	801756e <__swsetup_r+0x62>
 8017528:	06da      	lsls	r2, r3, #27
 801752a:	d407      	bmi.n	801753c <__swsetup_r+0x30>
 801752c:	2209      	movs	r2, #9
 801752e:	602a      	str	r2, [r5, #0]
 8017530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017534:	81a3      	strh	r3, [r4, #12]
 8017536:	f04f 30ff 	mov.w	r0, #4294967295
 801753a:	e033      	b.n	80175a4 <__swsetup_r+0x98>
 801753c:	0758      	lsls	r0, r3, #29
 801753e:	d512      	bpl.n	8017566 <__swsetup_r+0x5a>
 8017540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017542:	b141      	cbz	r1, 8017556 <__swsetup_r+0x4a>
 8017544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017548:	4299      	cmp	r1, r3
 801754a:	d002      	beq.n	8017552 <__swsetup_r+0x46>
 801754c:	4628      	mov	r0, r5
 801754e:	f7fe f8d7 	bl	8015700 <_free_r>
 8017552:	2300      	movs	r3, #0
 8017554:	6363      	str	r3, [r4, #52]	@ 0x34
 8017556:	89a3      	ldrh	r3, [r4, #12]
 8017558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801755c:	81a3      	strh	r3, [r4, #12]
 801755e:	2300      	movs	r3, #0
 8017560:	6063      	str	r3, [r4, #4]
 8017562:	6923      	ldr	r3, [r4, #16]
 8017564:	6023      	str	r3, [r4, #0]
 8017566:	89a3      	ldrh	r3, [r4, #12]
 8017568:	f043 0308 	orr.w	r3, r3, #8
 801756c:	81a3      	strh	r3, [r4, #12]
 801756e:	6923      	ldr	r3, [r4, #16]
 8017570:	b94b      	cbnz	r3, 8017586 <__swsetup_r+0x7a>
 8017572:	89a3      	ldrh	r3, [r4, #12]
 8017574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801757c:	d003      	beq.n	8017586 <__swsetup_r+0x7a>
 801757e:	4621      	mov	r1, r4
 8017580:	4628      	mov	r0, r5
 8017582:	f000 fbf5 	bl	8017d70 <__smakebuf_r>
 8017586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801758a:	f013 0201 	ands.w	r2, r3, #1
 801758e:	d00a      	beq.n	80175a6 <__swsetup_r+0x9a>
 8017590:	2200      	movs	r2, #0
 8017592:	60a2      	str	r2, [r4, #8]
 8017594:	6962      	ldr	r2, [r4, #20]
 8017596:	4252      	negs	r2, r2
 8017598:	61a2      	str	r2, [r4, #24]
 801759a:	6922      	ldr	r2, [r4, #16]
 801759c:	b942      	cbnz	r2, 80175b0 <__swsetup_r+0xa4>
 801759e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80175a2:	d1c5      	bne.n	8017530 <__swsetup_r+0x24>
 80175a4:	bd38      	pop	{r3, r4, r5, pc}
 80175a6:	0799      	lsls	r1, r3, #30
 80175a8:	bf58      	it	pl
 80175aa:	6962      	ldrpl	r2, [r4, #20]
 80175ac:	60a2      	str	r2, [r4, #8]
 80175ae:	e7f4      	b.n	801759a <__swsetup_r+0x8e>
 80175b0:	2000      	movs	r0, #0
 80175b2:	e7f7      	b.n	80175a4 <__swsetup_r+0x98>
 80175b4:	20000090 	.word	0x20000090

080175b8 <strncmp>:
 80175b8:	b510      	push	{r4, lr}
 80175ba:	b16a      	cbz	r2, 80175d8 <strncmp+0x20>
 80175bc:	3901      	subs	r1, #1
 80175be:	1884      	adds	r4, r0, r2
 80175c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80175c8:	429a      	cmp	r2, r3
 80175ca:	d103      	bne.n	80175d4 <strncmp+0x1c>
 80175cc:	42a0      	cmp	r0, r4
 80175ce:	d001      	beq.n	80175d4 <strncmp+0x1c>
 80175d0:	2a00      	cmp	r2, #0
 80175d2:	d1f5      	bne.n	80175c0 <strncmp+0x8>
 80175d4:	1ad0      	subs	r0, r2, r3
 80175d6:	bd10      	pop	{r4, pc}
 80175d8:	4610      	mov	r0, r2
 80175da:	e7fc      	b.n	80175d6 <strncmp+0x1e>
 80175dc:	0000      	movs	r0, r0
	...

080175e0 <nan>:
 80175e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80175e8 <nan+0x8>
 80175e4:	4770      	bx	lr
 80175e6:	bf00      	nop
 80175e8:	00000000 	.word	0x00000000
 80175ec:	7ff80000 	.word	0x7ff80000

080175f0 <_calloc_r>:
 80175f0:	b570      	push	{r4, r5, r6, lr}
 80175f2:	fba1 5402 	umull	r5, r4, r1, r2
 80175f6:	b93c      	cbnz	r4, 8017608 <_calloc_r+0x18>
 80175f8:	4629      	mov	r1, r5
 80175fa:	f7fc f8e1 	bl	80137c0 <_malloc_r>
 80175fe:	4606      	mov	r6, r0
 8017600:	b928      	cbnz	r0, 801760e <_calloc_r+0x1e>
 8017602:	2600      	movs	r6, #0
 8017604:	4630      	mov	r0, r6
 8017606:	bd70      	pop	{r4, r5, r6, pc}
 8017608:	220c      	movs	r2, #12
 801760a:	6002      	str	r2, [r0, #0]
 801760c:	e7f9      	b.n	8017602 <_calloc_r+0x12>
 801760e:	462a      	mov	r2, r5
 8017610:	4621      	mov	r1, r4
 8017612:	f7fd f92e 	bl	8014872 <memset>
 8017616:	e7f5      	b.n	8017604 <_calloc_r+0x14>

08017618 <rshift>:
 8017618:	6903      	ldr	r3, [r0, #16]
 801761a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801761e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017622:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017626:	f100 0414 	add.w	r4, r0, #20
 801762a:	dd45      	ble.n	80176b8 <rshift+0xa0>
 801762c:	f011 011f 	ands.w	r1, r1, #31
 8017630:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017634:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017638:	d10c      	bne.n	8017654 <rshift+0x3c>
 801763a:	f100 0710 	add.w	r7, r0, #16
 801763e:	4629      	mov	r1, r5
 8017640:	42b1      	cmp	r1, r6
 8017642:	d334      	bcc.n	80176ae <rshift+0x96>
 8017644:	1a9b      	subs	r3, r3, r2
 8017646:	009b      	lsls	r3, r3, #2
 8017648:	1eea      	subs	r2, r5, #3
 801764a:	4296      	cmp	r6, r2
 801764c:	bf38      	it	cc
 801764e:	2300      	movcc	r3, #0
 8017650:	4423      	add	r3, r4
 8017652:	e015      	b.n	8017680 <rshift+0x68>
 8017654:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017658:	f1c1 0820 	rsb	r8, r1, #32
 801765c:	40cf      	lsrs	r7, r1
 801765e:	f105 0e04 	add.w	lr, r5, #4
 8017662:	46a1      	mov	r9, r4
 8017664:	4576      	cmp	r6, lr
 8017666:	46f4      	mov	ip, lr
 8017668:	d815      	bhi.n	8017696 <rshift+0x7e>
 801766a:	1a9a      	subs	r2, r3, r2
 801766c:	0092      	lsls	r2, r2, #2
 801766e:	3a04      	subs	r2, #4
 8017670:	3501      	adds	r5, #1
 8017672:	42ae      	cmp	r6, r5
 8017674:	bf38      	it	cc
 8017676:	2200      	movcc	r2, #0
 8017678:	18a3      	adds	r3, r4, r2
 801767a:	50a7      	str	r7, [r4, r2]
 801767c:	b107      	cbz	r7, 8017680 <rshift+0x68>
 801767e:	3304      	adds	r3, #4
 8017680:	1b1a      	subs	r2, r3, r4
 8017682:	42a3      	cmp	r3, r4
 8017684:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017688:	bf08      	it	eq
 801768a:	2300      	moveq	r3, #0
 801768c:	6102      	str	r2, [r0, #16]
 801768e:	bf08      	it	eq
 8017690:	6143      	streq	r3, [r0, #20]
 8017692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017696:	f8dc c000 	ldr.w	ip, [ip]
 801769a:	fa0c fc08 	lsl.w	ip, ip, r8
 801769e:	ea4c 0707 	orr.w	r7, ip, r7
 80176a2:	f849 7b04 	str.w	r7, [r9], #4
 80176a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80176aa:	40cf      	lsrs	r7, r1
 80176ac:	e7da      	b.n	8017664 <rshift+0x4c>
 80176ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80176b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80176b6:	e7c3      	b.n	8017640 <rshift+0x28>
 80176b8:	4623      	mov	r3, r4
 80176ba:	e7e1      	b.n	8017680 <rshift+0x68>

080176bc <__hexdig_fun>:
 80176bc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80176c0:	2b09      	cmp	r3, #9
 80176c2:	d802      	bhi.n	80176ca <__hexdig_fun+0xe>
 80176c4:	3820      	subs	r0, #32
 80176c6:	b2c0      	uxtb	r0, r0
 80176c8:	4770      	bx	lr
 80176ca:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80176ce:	2b05      	cmp	r3, #5
 80176d0:	d801      	bhi.n	80176d6 <__hexdig_fun+0x1a>
 80176d2:	3847      	subs	r0, #71	@ 0x47
 80176d4:	e7f7      	b.n	80176c6 <__hexdig_fun+0xa>
 80176d6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80176da:	2b05      	cmp	r3, #5
 80176dc:	d801      	bhi.n	80176e2 <__hexdig_fun+0x26>
 80176de:	3827      	subs	r0, #39	@ 0x27
 80176e0:	e7f1      	b.n	80176c6 <__hexdig_fun+0xa>
 80176e2:	2000      	movs	r0, #0
 80176e4:	4770      	bx	lr
	...

080176e8 <__gethex>:
 80176e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ec:	b085      	sub	sp, #20
 80176ee:	468a      	mov	sl, r1
 80176f0:	9302      	str	r3, [sp, #8]
 80176f2:	680b      	ldr	r3, [r1, #0]
 80176f4:	9001      	str	r0, [sp, #4]
 80176f6:	4690      	mov	r8, r2
 80176f8:	1c9c      	adds	r4, r3, #2
 80176fa:	46a1      	mov	r9, r4
 80176fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017700:	2830      	cmp	r0, #48	@ 0x30
 8017702:	d0fa      	beq.n	80176fa <__gethex+0x12>
 8017704:	eba9 0303 	sub.w	r3, r9, r3
 8017708:	f1a3 0b02 	sub.w	fp, r3, #2
 801770c:	f7ff ffd6 	bl	80176bc <__hexdig_fun>
 8017710:	4605      	mov	r5, r0
 8017712:	2800      	cmp	r0, #0
 8017714:	d168      	bne.n	80177e8 <__gethex+0x100>
 8017716:	49a0      	ldr	r1, [pc, #640]	@ (8017998 <__gethex+0x2b0>)
 8017718:	2201      	movs	r2, #1
 801771a:	4648      	mov	r0, r9
 801771c:	f7ff ff4c 	bl	80175b8 <strncmp>
 8017720:	4607      	mov	r7, r0
 8017722:	2800      	cmp	r0, #0
 8017724:	d167      	bne.n	80177f6 <__gethex+0x10e>
 8017726:	f899 0001 	ldrb.w	r0, [r9, #1]
 801772a:	4626      	mov	r6, r4
 801772c:	f7ff ffc6 	bl	80176bc <__hexdig_fun>
 8017730:	2800      	cmp	r0, #0
 8017732:	d062      	beq.n	80177fa <__gethex+0x112>
 8017734:	4623      	mov	r3, r4
 8017736:	7818      	ldrb	r0, [r3, #0]
 8017738:	2830      	cmp	r0, #48	@ 0x30
 801773a:	4699      	mov	r9, r3
 801773c:	f103 0301 	add.w	r3, r3, #1
 8017740:	d0f9      	beq.n	8017736 <__gethex+0x4e>
 8017742:	f7ff ffbb 	bl	80176bc <__hexdig_fun>
 8017746:	fab0 f580 	clz	r5, r0
 801774a:	096d      	lsrs	r5, r5, #5
 801774c:	f04f 0b01 	mov.w	fp, #1
 8017750:	464a      	mov	r2, r9
 8017752:	4616      	mov	r6, r2
 8017754:	3201      	adds	r2, #1
 8017756:	7830      	ldrb	r0, [r6, #0]
 8017758:	f7ff ffb0 	bl	80176bc <__hexdig_fun>
 801775c:	2800      	cmp	r0, #0
 801775e:	d1f8      	bne.n	8017752 <__gethex+0x6a>
 8017760:	498d      	ldr	r1, [pc, #564]	@ (8017998 <__gethex+0x2b0>)
 8017762:	2201      	movs	r2, #1
 8017764:	4630      	mov	r0, r6
 8017766:	f7ff ff27 	bl	80175b8 <strncmp>
 801776a:	2800      	cmp	r0, #0
 801776c:	d13f      	bne.n	80177ee <__gethex+0x106>
 801776e:	b944      	cbnz	r4, 8017782 <__gethex+0x9a>
 8017770:	1c74      	adds	r4, r6, #1
 8017772:	4622      	mov	r2, r4
 8017774:	4616      	mov	r6, r2
 8017776:	3201      	adds	r2, #1
 8017778:	7830      	ldrb	r0, [r6, #0]
 801777a:	f7ff ff9f 	bl	80176bc <__hexdig_fun>
 801777e:	2800      	cmp	r0, #0
 8017780:	d1f8      	bne.n	8017774 <__gethex+0x8c>
 8017782:	1ba4      	subs	r4, r4, r6
 8017784:	00a7      	lsls	r7, r4, #2
 8017786:	7833      	ldrb	r3, [r6, #0]
 8017788:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801778c:	2b50      	cmp	r3, #80	@ 0x50
 801778e:	d13e      	bne.n	801780e <__gethex+0x126>
 8017790:	7873      	ldrb	r3, [r6, #1]
 8017792:	2b2b      	cmp	r3, #43	@ 0x2b
 8017794:	d033      	beq.n	80177fe <__gethex+0x116>
 8017796:	2b2d      	cmp	r3, #45	@ 0x2d
 8017798:	d034      	beq.n	8017804 <__gethex+0x11c>
 801779a:	1c71      	adds	r1, r6, #1
 801779c:	2400      	movs	r4, #0
 801779e:	7808      	ldrb	r0, [r1, #0]
 80177a0:	f7ff ff8c 	bl	80176bc <__hexdig_fun>
 80177a4:	1e43      	subs	r3, r0, #1
 80177a6:	b2db      	uxtb	r3, r3
 80177a8:	2b18      	cmp	r3, #24
 80177aa:	d830      	bhi.n	801780e <__gethex+0x126>
 80177ac:	f1a0 0210 	sub.w	r2, r0, #16
 80177b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80177b4:	f7ff ff82 	bl	80176bc <__hexdig_fun>
 80177b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80177bc:	fa5f fc8c 	uxtb.w	ip, ip
 80177c0:	f1bc 0f18 	cmp.w	ip, #24
 80177c4:	f04f 030a 	mov.w	r3, #10
 80177c8:	d91e      	bls.n	8017808 <__gethex+0x120>
 80177ca:	b104      	cbz	r4, 80177ce <__gethex+0xe6>
 80177cc:	4252      	negs	r2, r2
 80177ce:	4417      	add	r7, r2
 80177d0:	f8ca 1000 	str.w	r1, [sl]
 80177d4:	b1ed      	cbz	r5, 8017812 <__gethex+0x12a>
 80177d6:	f1bb 0f00 	cmp.w	fp, #0
 80177da:	bf0c      	ite	eq
 80177dc:	2506      	moveq	r5, #6
 80177de:	2500      	movne	r5, #0
 80177e0:	4628      	mov	r0, r5
 80177e2:	b005      	add	sp, #20
 80177e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177e8:	2500      	movs	r5, #0
 80177ea:	462c      	mov	r4, r5
 80177ec:	e7b0      	b.n	8017750 <__gethex+0x68>
 80177ee:	2c00      	cmp	r4, #0
 80177f0:	d1c7      	bne.n	8017782 <__gethex+0x9a>
 80177f2:	4627      	mov	r7, r4
 80177f4:	e7c7      	b.n	8017786 <__gethex+0x9e>
 80177f6:	464e      	mov	r6, r9
 80177f8:	462f      	mov	r7, r5
 80177fa:	2501      	movs	r5, #1
 80177fc:	e7c3      	b.n	8017786 <__gethex+0x9e>
 80177fe:	2400      	movs	r4, #0
 8017800:	1cb1      	adds	r1, r6, #2
 8017802:	e7cc      	b.n	801779e <__gethex+0xb6>
 8017804:	2401      	movs	r4, #1
 8017806:	e7fb      	b.n	8017800 <__gethex+0x118>
 8017808:	fb03 0002 	mla	r0, r3, r2, r0
 801780c:	e7ce      	b.n	80177ac <__gethex+0xc4>
 801780e:	4631      	mov	r1, r6
 8017810:	e7de      	b.n	80177d0 <__gethex+0xe8>
 8017812:	eba6 0309 	sub.w	r3, r6, r9
 8017816:	3b01      	subs	r3, #1
 8017818:	4629      	mov	r1, r5
 801781a:	2b07      	cmp	r3, #7
 801781c:	dc0a      	bgt.n	8017834 <__gethex+0x14c>
 801781e:	9801      	ldr	r0, [sp, #4]
 8017820:	f7fd ffb8 	bl	8015794 <_Balloc>
 8017824:	4604      	mov	r4, r0
 8017826:	b940      	cbnz	r0, 801783a <__gethex+0x152>
 8017828:	4b5c      	ldr	r3, [pc, #368]	@ (801799c <__gethex+0x2b4>)
 801782a:	4602      	mov	r2, r0
 801782c:	21e4      	movs	r1, #228	@ 0xe4
 801782e:	485c      	ldr	r0, [pc, #368]	@ (80179a0 <__gethex+0x2b8>)
 8017830:	f7fb ff64 	bl	80136fc <__assert_func>
 8017834:	3101      	adds	r1, #1
 8017836:	105b      	asrs	r3, r3, #1
 8017838:	e7ef      	b.n	801781a <__gethex+0x132>
 801783a:	f100 0a14 	add.w	sl, r0, #20
 801783e:	2300      	movs	r3, #0
 8017840:	4655      	mov	r5, sl
 8017842:	469b      	mov	fp, r3
 8017844:	45b1      	cmp	r9, r6
 8017846:	d337      	bcc.n	80178b8 <__gethex+0x1d0>
 8017848:	f845 bb04 	str.w	fp, [r5], #4
 801784c:	eba5 050a 	sub.w	r5, r5, sl
 8017850:	10ad      	asrs	r5, r5, #2
 8017852:	6125      	str	r5, [r4, #16]
 8017854:	4658      	mov	r0, fp
 8017856:	f7fe f88f 	bl	8015978 <__hi0bits>
 801785a:	016d      	lsls	r5, r5, #5
 801785c:	f8d8 6000 	ldr.w	r6, [r8]
 8017860:	1a2d      	subs	r5, r5, r0
 8017862:	42b5      	cmp	r5, r6
 8017864:	dd54      	ble.n	8017910 <__gethex+0x228>
 8017866:	1bad      	subs	r5, r5, r6
 8017868:	4629      	mov	r1, r5
 801786a:	4620      	mov	r0, r4
 801786c:	f7fe fc23 	bl	80160b6 <__any_on>
 8017870:	4681      	mov	r9, r0
 8017872:	b178      	cbz	r0, 8017894 <__gethex+0x1ac>
 8017874:	1e6b      	subs	r3, r5, #1
 8017876:	1159      	asrs	r1, r3, #5
 8017878:	f003 021f 	and.w	r2, r3, #31
 801787c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017880:	f04f 0901 	mov.w	r9, #1
 8017884:	fa09 f202 	lsl.w	r2, r9, r2
 8017888:	420a      	tst	r2, r1
 801788a:	d003      	beq.n	8017894 <__gethex+0x1ac>
 801788c:	454b      	cmp	r3, r9
 801788e:	dc36      	bgt.n	80178fe <__gethex+0x216>
 8017890:	f04f 0902 	mov.w	r9, #2
 8017894:	4629      	mov	r1, r5
 8017896:	4620      	mov	r0, r4
 8017898:	f7ff febe 	bl	8017618 <rshift>
 801789c:	442f      	add	r7, r5
 801789e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80178a2:	42bb      	cmp	r3, r7
 80178a4:	da42      	bge.n	801792c <__gethex+0x244>
 80178a6:	9801      	ldr	r0, [sp, #4]
 80178a8:	4621      	mov	r1, r4
 80178aa:	f7fd ffb3 	bl	8015814 <_Bfree>
 80178ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80178b0:	2300      	movs	r3, #0
 80178b2:	6013      	str	r3, [r2, #0]
 80178b4:	25a3      	movs	r5, #163	@ 0xa3
 80178b6:	e793      	b.n	80177e0 <__gethex+0xf8>
 80178b8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80178bc:	2a2e      	cmp	r2, #46	@ 0x2e
 80178be:	d012      	beq.n	80178e6 <__gethex+0x1fe>
 80178c0:	2b20      	cmp	r3, #32
 80178c2:	d104      	bne.n	80178ce <__gethex+0x1e6>
 80178c4:	f845 bb04 	str.w	fp, [r5], #4
 80178c8:	f04f 0b00 	mov.w	fp, #0
 80178cc:	465b      	mov	r3, fp
 80178ce:	7830      	ldrb	r0, [r6, #0]
 80178d0:	9303      	str	r3, [sp, #12]
 80178d2:	f7ff fef3 	bl	80176bc <__hexdig_fun>
 80178d6:	9b03      	ldr	r3, [sp, #12]
 80178d8:	f000 000f 	and.w	r0, r0, #15
 80178dc:	4098      	lsls	r0, r3
 80178de:	ea4b 0b00 	orr.w	fp, fp, r0
 80178e2:	3304      	adds	r3, #4
 80178e4:	e7ae      	b.n	8017844 <__gethex+0x15c>
 80178e6:	45b1      	cmp	r9, r6
 80178e8:	d8ea      	bhi.n	80178c0 <__gethex+0x1d8>
 80178ea:	492b      	ldr	r1, [pc, #172]	@ (8017998 <__gethex+0x2b0>)
 80178ec:	9303      	str	r3, [sp, #12]
 80178ee:	2201      	movs	r2, #1
 80178f0:	4630      	mov	r0, r6
 80178f2:	f7ff fe61 	bl	80175b8 <strncmp>
 80178f6:	9b03      	ldr	r3, [sp, #12]
 80178f8:	2800      	cmp	r0, #0
 80178fa:	d1e1      	bne.n	80178c0 <__gethex+0x1d8>
 80178fc:	e7a2      	b.n	8017844 <__gethex+0x15c>
 80178fe:	1ea9      	subs	r1, r5, #2
 8017900:	4620      	mov	r0, r4
 8017902:	f7fe fbd8 	bl	80160b6 <__any_on>
 8017906:	2800      	cmp	r0, #0
 8017908:	d0c2      	beq.n	8017890 <__gethex+0x1a8>
 801790a:	f04f 0903 	mov.w	r9, #3
 801790e:	e7c1      	b.n	8017894 <__gethex+0x1ac>
 8017910:	da09      	bge.n	8017926 <__gethex+0x23e>
 8017912:	1b75      	subs	r5, r6, r5
 8017914:	4621      	mov	r1, r4
 8017916:	9801      	ldr	r0, [sp, #4]
 8017918:	462a      	mov	r2, r5
 801791a:	f7fe f993 	bl	8015c44 <__lshift>
 801791e:	1b7f      	subs	r7, r7, r5
 8017920:	4604      	mov	r4, r0
 8017922:	f100 0a14 	add.w	sl, r0, #20
 8017926:	f04f 0900 	mov.w	r9, #0
 801792a:	e7b8      	b.n	801789e <__gethex+0x1b6>
 801792c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017930:	42bd      	cmp	r5, r7
 8017932:	dd6f      	ble.n	8017a14 <__gethex+0x32c>
 8017934:	1bed      	subs	r5, r5, r7
 8017936:	42ae      	cmp	r6, r5
 8017938:	dc34      	bgt.n	80179a4 <__gethex+0x2bc>
 801793a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801793e:	2b02      	cmp	r3, #2
 8017940:	d022      	beq.n	8017988 <__gethex+0x2a0>
 8017942:	2b03      	cmp	r3, #3
 8017944:	d024      	beq.n	8017990 <__gethex+0x2a8>
 8017946:	2b01      	cmp	r3, #1
 8017948:	d115      	bne.n	8017976 <__gethex+0x28e>
 801794a:	42ae      	cmp	r6, r5
 801794c:	d113      	bne.n	8017976 <__gethex+0x28e>
 801794e:	2e01      	cmp	r6, #1
 8017950:	d10b      	bne.n	801796a <__gethex+0x282>
 8017952:	9a02      	ldr	r2, [sp, #8]
 8017954:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017958:	6013      	str	r3, [r2, #0]
 801795a:	2301      	movs	r3, #1
 801795c:	6123      	str	r3, [r4, #16]
 801795e:	f8ca 3000 	str.w	r3, [sl]
 8017962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017964:	2562      	movs	r5, #98	@ 0x62
 8017966:	601c      	str	r4, [r3, #0]
 8017968:	e73a      	b.n	80177e0 <__gethex+0xf8>
 801796a:	1e71      	subs	r1, r6, #1
 801796c:	4620      	mov	r0, r4
 801796e:	f7fe fba2 	bl	80160b6 <__any_on>
 8017972:	2800      	cmp	r0, #0
 8017974:	d1ed      	bne.n	8017952 <__gethex+0x26a>
 8017976:	9801      	ldr	r0, [sp, #4]
 8017978:	4621      	mov	r1, r4
 801797a:	f7fd ff4b 	bl	8015814 <_Bfree>
 801797e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017980:	2300      	movs	r3, #0
 8017982:	6013      	str	r3, [r2, #0]
 8017984:	2550      	movs	r5, #80	@ 0x50
 8017986:	e72b      	b.n	80177e0 <__gethex+0xf8>
 8017988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801798a:	2b00      	cmp	r3, #0
 801798c:	d1f3      	bne.n	8017976 <__gethex+0x28e>
 801798e:	e7e0      	b.n	8017952 <__gethex+0x26a>
 8017990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017992:	2b00      	cmp	r3, #0
 8017994:	d1dd      	bne.n	8017952 <__gethex+0x26a>
 8017996:	e7ee      	b.n	8017976 <__gethex+0x28e>
 8017998:	08019238 	.word	0x08019238
 801799c:	080190d1 	.word	0x080190d1
 80179a0:	080193aa 	.word	0x080193aa
 80179a4:	1e6f      	subs	r7, r5, #1
 80179a6:	f1b9 0f00 	cmp.w	r9, #0
 80179aa:	d130      	bne.n	8017a0e <__gethex+0x326>
 80179ac:	b127      	cbz	r7, 80179b8 <__gethex+0x2d0>
 80179ae:	4639      	mov	r1, r7
 80179b0:	4620      	mov	r0, r4
 80179b2:	f7fe fb80 	bl	80160b6 <__any_on>
 80179b6:	4681      	mov	r9, r0
 80179b8:	117a      	asrs	r2, r7, #5
 80179ba:	2301      	movs	r3, #1
 80179bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80179c0:	f007 071f 	and.w	r7, r7, #31
 80179c4:	40bb      	lsls	r3, r7
 80179c6:	4213      	tst	r3, r2
 80179c8:	4629      	mov	r1, r5
 80179ca:	4620      	mov	r0, r4
 80179cc:	bf18      	it	ne
 80179ce:	f049 0902 	orrne.w	r9, r9, #2
 80179d2:	f7ff fe21 	bl	8017618 <rshift>
 80179d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80179da:	1b76      	subs	r6, r6, r5
 80179dc:	2502      	movs	r5, #2
 80179de:	f1b9 0f00 	cmp.w	r9, #0
 80179e2:	d047      	beq.n	8017a74 <__gethex+0x38c>
 80179e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80179e8:	2b02      	cmp	r3, #2
 80179ea:	d015      	beq.n	8017a18 <__gethex+0x330>
 80179ec:	2b03      	cmp	r3, #3
 80179ee:	d017      	beq.n	8017a20 <__gethex+0x338>
 80179f0:	2b01      	cmp	r3, #1
 80179f2:	d109      	bne.n	8017a08 <__gethex+0x320>
 80179f4:	f019 0f02 	tst.w	r9, #2
 80179f8:	d006      	beq.n	8017a08 <__gethex+0x320>
 80179fa:	f8da 3000 	ldr.w	r3, [sl]
 80179fe:	ea49 0903 	orr.w	r9, r9, r3
 8017a02:	f019 0f01 	tst.w	r9, #1
 8017a06:	d10e      	bne.n	8017a26 <__gethex+0x33e>
 8017a08:	f045 0510 	orr.w	r5, r5, #16
 8017a0c:	e032      	b.n	8017a74 <__gethex+0x38c>
 8017a0e:	f04f 0901 	mov.w	r9, #1
 8017a12:	e7d1      	b.n	80179b8 <__gethex+0x2d0>
 8017a14:	2501      	movs	r5, #1
 8017a16:	e7e2      	b.n	80179de <__gethex+0x2f6>
 8017a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a1a:	f1c3 0301 	rsb	r3, r3, #1
 8017a1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d0f0      	beq.n	8017a08 <__gethex+0x320>
 8017a26:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017a2a:	f104 0314 	add.w	r3, r4, #20
 8017a2e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017a32:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017a36:	f04f 0c00 	mov.w	ip, #0
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a40:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017a44:	d01b      	beq.n	8017a7e <__gethex+0x396>
 8017a46:	3201      	adds	r2, #1
 8017a48:	6002      	str	r2, [r0, #0]
 8017a4a:	2d02      	cmp	r5, #2
 8017a4c:	f104 0314 	add.w	r3, r4, #20
 8017a50:	d13c      	bne.n	8017acc <__gethex+0x3e4>
 8017a52:	f8d8 2000 	ldr.w	r2, [r8]
 8017a56:	3a01      	subs	r2, #1
 8017a58:	42b2      	cmp	r2, r6
 8017a5a:	d109      	bne.n	8017a70 <__gethex+0x388>
 8017a5c:	1171      	asrs	r1, r6, #5
 8017a5e:	2201      	movs	r2, #1
 8017a60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017a64:	f006 061f 	and.w	r6, r6, #31
 8017a68:	fa02 f606 	lsl.w	r6, r2, r6
 8017a6c:	421e      	tst	r6, r3
 8017a6e:	d13a      	bne.n	8017ae6 <__gethex+0x3fe>
 8017a70:	f045 0520 	orr.w	r5, r5, #32
 8017a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a76:	601c      	str	r4, [r3, #0]
 8017a78:	9b02      	ldr	r3, [sp, #8]
 8017a7a:	601f      	str	r7, [r3, #0]
 8017a7c:	e6b0      	b.n	80177e0 <__gethex+0xf8>
 8017a7e:	4299      	cmp	r1, r3
 8017a80:	f843 cc04 	str.w	ip, [r3, #-4]
 8017a84:	d8d9      	bhi.n	8017a3a <__gethex+0x352>
 8017a86:	68a3      	ldr	r3, [r4, #8]
 8017a88:	459b      	cmp	fp, r3
 8017a8a:	db17      	blt.n	8017abc <__gethex+0x3d4>
 8017a8c:	6861      	ldr	r1, [r4, #4]
 8017a8e:	9801      	ldr	r0, [sp, #4]
 8017a90:	3101      	adds	r1, #1
 8017a92:	f7fd fe7f 	bl	8015794 <_Balloc>
 8017a96:	4681      	mov	r9, r0
 8017a98:	b918      	cbnz	r0, 8017aa2 <__gethex+0x3ba>
 8017a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8017b04 <__gethex+0x41c>)
 8017a9c:	4602      	mov	r2, r0
 8017a9e:	2184      	movs	r1, #132	@ 0x84
 8017aa0:	e6c5      	b.n	801782e <__gethex+0x146>
 8017aa2:	6922      	ldr	r2, [r4, #16]
 8017aa4:	3202      	adds	r2, #2
 8017aa6:	f104 010c 	add.w	r1, r4, #12
 8017aaa:	0092      	lsls	r2, r2, #2
 8017aac:	300c      	adds	r0, #12
 8017aae:	f7fc ffc6 	bl	8014a3e <memcpy>
 8017ab2:	4621      	mov	r1, r4
 8017ab4:	9801      	ldr	r0, [sp, #4]
 8017ab6:	f7fd fead 	bl	8015814 <_Bfree>
 8017aba:	464c      	mov	r4, r9
 8017abc:	6923      	ldr	r3, [r4, #16]
 8017abe:	1c5a      	adds	r2, r3, #1
 8017ac0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017ac4:	6122      	str	r2, [r4, #16]
 8017ac6:	2201      	movs	r2, #1
 8017ac8:	615a      	str	r2, [r3, #20]
 8017aca:	e7be      	b.n	8017a4a <__gethex+0x362>
 8017acc:	6922      	ldr	r2, [r4, #16]
 8017ace:	455a      	cmp	r2, fp
 8017ad0:	dd0b      	ble.n	8017aea <__gethex+0x402>
 8017ad2:	2101      	movs	r1, #1
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	f7ff fd9f 	bl	8017618 <rshift>
 8017ada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ade:	3701      	adds	r7, #1
 8017ae0:	42bb      	cmp	r3, r7
 8017ae2:	f6ff aee0 	blt.w	80178a6 <__gethex+0x1be>
 8017ae6:	2501      	movs	r5, #1
 8017ae8:	e7c2      	b.n	8017a70 <__gethex+0x388>
 8017aea:	f016 061f 	ands.w	r6, r6, #31
 8017aee:	d0fa      	beq.n	8017ae6 <__gethex+0x3fe>
 8017af0:	4453      	add	r3, sl
 8017af2:	f1c6 0620 	rsb	r6, r6, #32
 8017af6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017afa:	f7fd ff3d 	bl	8015978 <__hi0bits>
 8017afe:	42b0      	cmp	r0, r6
 8017b00:	dbe7      	blt.n	8017ad2 <__gethex+0x3ea>
 8017b02:	e7f0      	b.n	8017ae6 <__gethex+0x3fe>
 8017b04:	080190d1 	.word	0x080190d1

08017b08 <L_shift>:
 8017b08:	f1c2 0208 	rsb	r2, r2, #8
 8017b0c:	0092      	lsls	r2, r2, #2
 8017b0e:	b570      	push	{r4, r5, r6, lr}
 8017b10:	f1c2 0620 	rsb	r6, r2, #32
 8017b14:	6843      	ldr	r3, [r0, #4]
 8017b16:	6804      	ldr	r4, [r0, #0]
 8017b18:	fa03 f506 	lsl.w	r5, r3, r6
 8017b1c:	432c      	orrs	r4, r5
 8017b1e:	40d3      	lsrs	r3, r2
 8017b20:	6004      	str	r4, [r0, #0]
 8017b22:	f840 3f04 	str.w	r3, [r0, #4]!
 8017b26:	4288      	cmp	r0, r1
 8017b28:	d3f4      	bcc.n	8017b14 <L_shift+0xc>
 8017b2a:	bd70      	pop	{r4, r5, r6, pc}

08017b2c <__match>:
 8017b2c:	b530      	push	{r4, r5, lr}
 8017b2e:	6803      	ldr	r3, [r0, #0]
 8017b30:	3301      	adds	r3, #1
 8017b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b36:	b914      	cbnz	r4, 8017b3e <__match+0x12>
 8017b38:	6003      	str	r3, [r0, #0]
 8017b3a:	2001      	movs	r0, #1
 8017b3c:	bd30      	pop	{r4, r5, pc}
 8017b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b42:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017b46:	2d19      	cmp	r5, #25
 8017b48:	bf98      	it	ls
 8017b4a:	3220      	addls	r2, #32
 8017b4c:	42a2      	cmp	r2, r4
 8017b4e:	d0f0      	beq.n	8017b32 <__match+0x6>
 8017b50:	2000      	movs	r0, #0
 8017b52:	e7f3      	b.n	8017b3c <__match+0x10>

08017b54 <__hexnan>:
 8017b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b58:	680b      	ldr	r3, [r1, #0]
 8017b5a:	6801      	ldr	r1, [r0, #0]
 8017b5c:	115e      	asrs	r6, r3, #5
 8017b5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017b62:	f013 031f 	ands.w	r3, r3, #31
 8017b66:	b087      	sub	sp, #28
 8017b68:	bf18      	it	ne
 8017b6a:	3604      	addne	r6, #4
 8017b6c:	2500      	movs	r5, #0
 8017b6e:	1f37      	subs	r7, r6, #4
 8017b70:	4682      	mov	sl, r0
 8017b72:	4690      	mov	r8, r2
 8017b74:	9301      	str	r3, [sp, #4]
 8017b76:	f846 5c04 	str.w	r5, [r6, #-4]
 8017b7a:	46b9      	mov	r9, r7
 8017b7c:	463c      	mov	r4, r7
 8017b7e:	9502      	str	r5, [sp, #8]
 8017b80:	46ab      	mov	fp, r5
 8017b82:	784a      	ldrb	r2, [r1, #1]
 8017b84:	1c4b      	adds	r3, r1, #1
 8017b86:	9303      	str	r3, [sp, #12]
 8017b88:	b342      	cbz	r2, 8017bdc <__hexnan+0x88>
 8017b8a:	4610      	mov	r0, r2
 8017b8c:	9105      	str	r1, [sp, #20]
 8017b8e:	9204      	str	r2, [sp, #16]
 8017b90:	f7ff fd94 	bl	80176bc <__hexdig_fun>
 8017b94:	2800      	cmp	r0, #0
 8017b96:	d151      	bne.n	8017c3c <__hexnan+0xe8>
 8017b98:	9a04      	ldr	r2, [sp, #16]
 8017b9a:	9905      	ldr	r1, [sp, #20]
 8017b9c:	2a20      	cmp	r2, #32
 8017b9e:	d818      	bhi.n	8017bd2 <__hexnan+0x7e>
 8017ba0:	9b02      	ldr	r3, [sp, #8]
 8017ba2:	459b      	cmp	fp, r3
 8017ba4:	dd13      	ble.n	8017bce <__hexnan+0x7a>
 8017ba6:	454c      	cmp	r4, r9
 8017ba8:	d206      	bcs.n	8017bb8 <__hexnan+0x64>
 8017baa:	2d07      	cmp	r5, #7
 8017bac:	dc04      	bgt.n	8017bb8 <__hexnan+0x64>
 8017bae:	462a      	mov	r2, r5
 8017bb0:	4649      	mov	r1, r9
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f7ff ffa8 	bl	8017b08 <L_shift>
 8017bb8:	4544      	cmp	r4, r8
 8017bba:	d952      	bls.n	8017c62 <__hexnan+0x10e>
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	f1a4 0904 	sub.w	r9, r4, #4
 8017bc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8017bc6:	f8cd b008 	str.w	fp, [sp, #8]
 8017bca:	464c      	mov	r4, r9
 8017bcc:	461d      	mov	r5, r3
 8017bce:	9903      	ldr	r1, [sp, #12]
 8017bd0:	e7d7      	b.n	8017b82 <__hexnan+0x2e>
 8017bd2:	2a29      	cmp	r2, #41	@ 0x29
 8017bd4:	d157      	bne.n	8017c86 <__hexnan+0x132>
 8017bd6:	3102      	adds	r1, #2
 8017bd8:	f8ca 1000 	str.w	r1, [sl]
 8017bdc:	f1bb 0f00 	cmp.w	fp, #0
 8017be0:	d051      	beq.n	8017c86 <__hexnan+0x132>
 8017be2:	454c      	cmp	r4, r9
 8017be4:	d206      	bcs.n	8017bf4 <__hexnan+0xa0>
 8017be6:	2d07      	cmp	r5, #7
 8017be8:	dc04      	bgt.n	8017bf4 <__hexnan+0xa0>
 8017bea:	462a      	mov	r2, r5
 8017bec:	4649      	mov	r1, r9
 8017bee:	4620      	mov	r0, r4
 8017bf0:	f7ff ff8a 	bl	8017b08 <L_shift>
 8017bf4:	4544      	cmp	r4, r8
 8017bf6:	d936      	bls.n	8017c66 <__hexnan+0x112>
 8017bf8:	f1a8 0204 	sub.w	r2, r8, #4
 8017bfc:	4623      	mov	r3, r4
 8017bfe:	f853 1b04 	ldr.w	r1, [r3], #4
 8017c02:	f842 1f04 	str.w	r1, [r2, #4]!
 8017c06:	429f      	cmp	r7, r3
 8017c08:	d2f9      	bcs.n	8017bfe <__hexnan+0xaa>
 8017c0a:	1b3b      	subs	r3, r7, r4
 8017c0c:	f023 0303 	bic.w	r3, r3, #3
 8017c10:	3304      	adds	r3, #4
 8017c12:	3401      	adds	r4, #1
 8017c14:	3e03      	subs	r6, #3
 8017c16:	42b4      	cmp	r4, r6
 8017c18:	bf88      	it	hi
 8017c1a:	2304      	movhi	r3, #4
 8017c1c:	4443      	add	r3, r8
 8017c1e:	2200      	movs	r2, #0
 8017c20:	f843 2b04 	str.w	r2, [r3], #4
 8017c24:	429f      	cmp	r7, r3
 8017c26:	d2fb      	bcs.n	8017c20 <__hexnan+0xcc>
 8017c28:	683b      	ldr	r3, [r7, #0]
 8017c2a:	b91b      	cbnz	r3, 8017c34 <__hexnan+0xe0>
 8017c2c:	4547      	cmp	r7, r8
 8017c2e:	d128      	bne.n	8017c82 <__hexnan+0x12e>
 8017c30:	2301      	movs	r3, #1
 8017c32:	603b      	str	r3, [r7, #0]
 8017c34:	2005      	movs	r0, #5
 8017c36:	b007      	add	sp, #28
 8017c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c3c:	3501      	adds	r5, #1
 8017c3e:	2d08      	cmp	r5, #8
 8017c40:	f10b 0b01 	add.w	fp, fp, #1
 8017c44:	dd06      	ble.n	8017c54 <__hexnan+0x100>
 8017c46:	4544      	cmp	r4, r8
 8017c48:	d9c1      	bls.n	8017bce <__hexnan+0x7a>
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8017c50:	2501      	movs	r5, #1
 8017c52:	3c04      	subs	r4, #4
 8017c54:	6822      	ldr	r2, [r4, #0]
 8017c56:	f000 000f 	and.w	r0, r0, #15
 8017c5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017c5e:	6020      	str	r0, [r4, #0]
 8017c60:	e7b5      	b.n	8017bce <__hexnan+0x7a>
 8017c62:	2508      	movs	r5, #8
 8017c64:	e7b3      	b.n	8017bce <__hexnan+0x7a>
 8017c66:	9b01      	ldr	r3, [sp, #4]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d0dd      	beq.n	8017c28 <__hexnan+0xd4>
 8017c6c:	f1c3 0320 	rsb	r3, r3, #32
 8017c70:	f04f 32ff 	mov.w	r2, #4294967295
 8017c74:	40da      	lsrs	r2, r3
 8017c76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017c7a:	4013      	ands	r3, r2
 8017c7c:	f846 3c04 	str.w	r3, [r6, #-4]
 8017c80:	e7d2      	b.n	8017c28 <__hexnan+0xd4>
 8017c82:	3f04      	subs	r7, #4
 8017c84:	e7d0      	b.n	8017c28 <__hexnan+0xd4>
 8017c86:	2004      	movs	r0, #4
 8017c88:	e7d5      	b.n	8017c36 <__hexnan+0xe2>

08017c8a <__ascii_mbtowc>:
 8017c8a:	b082      	sub	sp, #8
 8017c8c:	b901      	cbnz	r1, 8017c90 <__ascii_mbtowc+0x6>
 8017c8e:	a901      	add	r1, sp, #4
 8017c90:	b142      	cbz	r2, 8017ca4 <__ascii_mbtowc+0x1a>
 8017c92:	b14b      	cbz	r3, 8017ca8 <__ascii_mbtowc+0x1e>
 8017c94:	7813      	ldrb	r3, [r2, #0]
 8017c96:	600b      	str	r3, [r1, #0]
 8017c98:	7812      	ldrb	r2, [r2, #0]
 8017c9a:	1e10      	subs	r0, r2, #0
 8017c9c:	bf18      	it	ne
 8017c9e:	2001      	movne	r0, #1
 8017ca0:	b002      	add	sp, #8
 8017ca2:	4770      	bx	lr
 8017ca4:	4610      	mov	r0, r2
 8017ca6:	e7fb      	b.n	8017ca0 <__ascii_mbtowc+0x16>
 8017ca8:	f06f 0001 	mvn.w	r0, #1
 8017cac:	e7f8      	b.n	8017ca0 <__ascii_mbtowc+0x16>

08017cae <_realloc_r>:
 8017cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb2:	4680      	mov	r8, r0
 8017cb4:	4615      	mov	r5, r2
 8017cb6:	460c      	mov	r4, r1
 8017cb8:	b921      	cbnz	r1, 8017cc4 <_realloc_r+0x16>
 8017cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cbe:	4611      	mov	r1, r2
 8017cc0:	f7fb bd7e 	b.w	80137c0 <_malloc_r>
 8017cc4:	b92a      	cbnz	r2, 8017cd2 <_realloc_r+0x24>
 8017cc6:	f7fd fd1b 	bl	8015700 <_free_r>
 8017cca:	2400      	movs	r4, #0
 8017ccc:	4620      	mov	r0, r4
 8017cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cd2:	f000 f8ab 	bl	8017e2c <_malloc_usable_size_r>
 8017cd6:	4285      	cmp	r5, r0
 8017cd8:	4606      	mov	r6, r0
 8017cda:	d802      	bhi.n	8017ce2 <_realloc_r+0x34>
 8017cdc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017ce0:	d8f4      	bhi.n	8017ccc <_realloc_r+0x1e>
 8017ce2:	4629      	mov	r1, r5
 8017ce4:	4640      	mov	r0, r8
 8017ce6:	f7fb fd6b 	bl	80137c0 <_malloc_r>
 8017cea:	4607      	mov	r7, r0
 8017cec:	2800      	cmp	r0, #0
 8017cee:	d0ec      	beq.n	8017cca <_realloc_r+0x1c>
 8017cf0:	42b5      	cmp	r5, r6
 8017cf2:	462a      	mov	r2, r5
 8017cf4:	4621      	mov	r1, r4
 8017cf6:	bf28      	it	cs
 8017cf8:	4632      	movcs	r2, r6
 8017cfa:	f7fc fea0 	bl	8014a3e <memcpy>
 8017cfe:	4621      	mov	r1, r4
 8017d00:	4640      	mov	r0, r8
 8017d02:	f7fd fcfd 	bl	8015700 <_free_r>
 8017d06:	463c      	mov	r4, r7
 8017d08:	e7e0      	b.n	8017ccc <_realloc_r+0x1e>

08017d0a <__ascii_wctomb>:
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	4608      	mov	r0, r1
 8017d0e:	b141      	cbz	r1, 8017d22 <__ascii_wctomb+0x18>
 8017d10:	2aff      	cmp	r2, #255	@ 0xff
 8017d12:	d904      	bls.n	8017d1e <__ascii_wctomb+0x14>
 8017d14:	228a      	movs	r2, #138	@ 0x8a
 8017d16:	601a      	str	r2, [r3, #0]
 8017d18:	f04f 30ff 	mov.w	r0, #4294967295
 8017d1c:	4770      	bx	lr
 8017d1e:	700a      	strb	r2, [r1, #0]
 8017d20:	2001      	movs	r0, #1
 8017d22:	4770      	bx	lr

08017d24 <__swhatbuf_r>:
 8017d24:	b570      	push	{r4, r5, r6, lr}
 8017d26:	460c      	mov	r4, r1
 8017d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d2c:	2900      	cmp	r1, #0
 8017d2e:	b096      	sub	sp, #88	@ 0x58
 8017d30:	4615      	mov	r5, r2
 8017d32:	461e      	mov	r6, r3
 8017d34:	da0d      	bge.n	8017d52 <__swhatbuf_r+0x2e>
 8017d36:	89a3      	ldrh	r3, [r4, #12]
 8017d38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017d3c:	f04f 0100 	mov.w	r1, #0
 8017d40:	bf14      	ite	ne
 8017d42:	2340      	movne	r3, #64	@ 0x40
 8017d44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017d48:	2000      	movs	r0, #0
 8017d4a:	6031      	str	r1, [r6, #0]
 8017d4c:	602b      	str	r3, [r5, #0]
 8017d4e:	b016      	add	sp, #88	@ 0x58
 8017d50:	bd70      	pop	{r4, r5, r6, pc}
 8017d52:	466a      	mov	r2, sp
 8017d54:	f000 f848 	bl	8017de8 <_fstat_r>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	dbec      	blt.n	8017d36 <__swhatbuf_r+0x12>
 8017d5c:	9901      	ldr	r1, [sp, #4]
 8017d5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017d62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017d66:	4259      	negs	r1, r3
 8017d68:	4159      	adcs	r1, r3
 8017d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017d6e:	e7eb      	b.n	8017d48 <__swhatbuf_r+0x24>

08017d70 <__smakebuf_r>:
 8017d70:	898b      	ldrh	r3, [r1, #12]
 8017d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d74:	079d      	lsls	r5, r3, #30
 8017d76:	4606      	mov	r6, r0
 8017d78:	460c      	mov	r4, r1
 8017d7a:	d507      	bpl.n	8017d8c <__smakebuf_r+0x1c>
 8017d7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017d80:	6023      	str	r3, [r4, #0]
 8017d82:	6123      	str	r3, [r4, #16]
 8017d84:	2301      	movs	r3, #1
 8017d86:	6163      	str	r3, [r4, #20]
 8017d88:	b003      	add	sp, #12
 8017d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d8c:	ab01      	add	r3, sp, #4
 8017d8e:	466a      	mov	r2, sp
 8017d90:	f7ff ffc8 	bl	8017d24 <__swhatbuf_r>
 8017d94:	9f00      	ldr	r7, [sp, #0]
 8017d96:	4605      	mov	r5, r0
 8017d98:	4639      	mov	r1, r7
 8017d9a:	4630      	mov	r0, r6
 8017d9c:	f7fb fd10 	bl	80137c0 <_malloc_r>
 8017da0:	b948      	cbnz	r0, 8017db6 <__smakebuf_r+0x46>
 8017da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017da6:	059a      	lsls	r2, r3, #22
 8017da8:	d4ee      	bmi.n	8017d88 <__smakebuf_r+0x18>
 8017daa:	f023 0303 	bic.w	r3, r3, #3
 8017dae:	f043 0302 	orr.w	r3, r3, #2
 8017db2:	81a3      	strh	r3, [r4, #12]
 8017db4:	e7e2      	b.n	8017d7c <__smakebuf_r+0xc>
 8017db6:	89a3      	ldrh	r3, [r4, #12]
 8017db8:	6020      	str	r0, [r4, #0]
 8017dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017dbe:	81a3      	strh	r3, [r4, #12]
 8017dc0:	9b01      	ldr	r3, [sp, #4]
 8017dc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017dc6:	b15b      	cbz	r3, 8017de0 <__smakebuf_r+0x70>
 8017dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017dcc:	4630      	mov	r0, r6
 8017dce:	f000 f81d 	bl	8017e0c <_isatty_r>
 8017dd2:	b128      	cbz	r0, 8017de0 <__smakebuf_r+0x70>
 8017dd4:	89a3      	ldrh	r3, [r4, #12]
 8017dd6:	f023 0303 	bic.w	r3, r3, #3
 8017dda:	f043 0301 	orr.w	r3, r3, #1
 8017dde:	81a3      	strh	r3, [r4, #12]
 8017de0:	89a3      	ldrh	r3, [r4, #12]
 8017de2:	431d      	orrs	r5, r3
 8017de4:	81a5      	strh	r5, [r4, #12]
 8017de6:	e7cf      	b.n	8017d88 <__smakebuf_r+0x18>

08017de8 <_fstat_r>:
 8017de8:	b538      	push	{r3, r4, r5, lr}
 8017dea:	4d07      	ldr	r5, [pc, #28]	@ (8017e08 <_fstat_r+0x20>)
 8017dec:	2300      	movs	r3, #0
 8017dee:	4604      	mov	r4, r0
 8017df0:	4608      	mov	r0, r1
 8017df2:	4611      	mov	r1, r2
 8017df4:	602b      	str	r3, [r5, #0]
 8017df6:	f7f1 f94d 	bl	8009094 <_fstat>
 8017dfa:	1c43      	adds	r3, r0, #1
 8017dfc:	d102      	bne.n	8017e04 <_fstat_r+0x1c>
 8017dfe:	682b      	ldr	r3, [r5, #0]
 8017e00:	b103      	cbz	r3, 8017e04 <_fstat_r+0x1c>
 8017e02:	6023      	str	r3, [r4, #0]
 8017e04:	bd38      	pop	{r3, r4, r5, pc}
 8017e06:	bf00      	nop
 8017e08:	20000b8c 	.word	0x20000b8c

08017e0c <_isatty_r>:
 8017e0c:	b538      	push	{r3, r4, r5, lr}
 8017e0e:	4d06      	ldr	r5, [pc, #24]	@ (8017e28 <_isatty_r+0x1c>)
 8017e10:	2300      	movs	r3, #0
 8017e12:	4604      	mov	r4, r0
 8017e14:	4608      	mov	r0, r1
 8017e16:	602b      	str	r3, [r5, #0]
 8017e18:	f7f1 f94c 	bl	80090b4 <_isatty>
 8017e1c:	1c43      	adds	r3, r0, #1
 8017e1e:	d102      	bne.n	8017e26 <_isatty_r+0x1a>
 8017e20:	682b      	ldr	r3, [r5, #0]
 8017e22:	b103      	cbz	r3, 8017e26 <_isatty_r+0x1a>
 8017e24:	6023      	str	r3, [r4, #0]
 8017e26:	bd38      	pop	{r3, r4, r5, pc}
 8017e28:	20000b8c 	.word	0x20000b8c

08017e2c <_malloc_usable_size_r>:
 8017e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e30:	1f18      	subs	r0, r3, #4
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	bfbc      	itt	lt
 8017e36:	580b      	ldrlt	r3, [r1, r0]
 8017e38:	18c0      	addlt	r0, r0, r3
 8017e3a:	4770      	bx	lr

08017e3c <_init>:
 8017e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e3e:	bf00      	nop
 8017e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e42:	bc08      	pop	{r3}
 8017e44:	469e      	mov	lr, r3
 8017e46:	4770      	bx	lr

08017e48 <_fini>:
 8017e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e4a:	bf00      	nop
 8017e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e4e:	bc08      	pop	{r3}
 8017e50:	469e      	mov	lr, r3
 8017e52:	4770      	bx	lr
