
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017df4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  08017fd8  08017fd8  00018fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801958c  0801958c  0001b24c  2**0
                  CONTENTS
  4 .ARM          00000008  0801958c  0801958c  0001a58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019594  08019594  0001b24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08019594  08019594  0001a594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080195a4  080195a4  0001a5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  080195b4  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000250  08019800  0001b250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  08019800  0001bb00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b24c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004883a  00000000  00000000  0001b27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008c3c  00000000  00000000  00063ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a70  00000000  00000000  0006c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002128  00000000  00000000  0006f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003400c  00000000  00000000  00071290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038961  00000000  00000000  000a529c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129a3b  00000000  00000000  000ddbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00207638  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cc6c  00000000  00000000  002076c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0021432c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000037  00000000  00000000  00214388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017fbc 	.word	0x08017fbc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	08017fbc 	.word	0x08017fbc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	08018a04 	.word	0x08018a04

08001054 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	08018a04 	.word	0x08018a04

08001074 <_ZN15Adafruit_SensorD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe9 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001082:	2108      	movs	r1, #8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f012 fbd0 	bl	801382a <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ffb9 	bl	8001034 <_ZN15Adafruit_SensorC1Ev>
 80010c2:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	609a      	str	r2, [r3, #8]
  _address = address;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	715a      	strb	r2, [r3, #5]
}
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	080189e8 	.word	0x080189e8

080010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	4613      	mov	r3, r2
 80010f0:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 fa5c 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2206      	movs	r2, #6
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f013 fc76 	bl	80149f2 <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	83fb      	strh	r3, [r7, #30]
 800110a:	8bfb      	ldrh	r3, [r7, #30]
 800110c:	83bb      	strh	r3, [r7, #28]
 800110e:	8bbb      	ldrh	r3, [r7, #28]
 8001110:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 8001112:	f107 0214 	add.w	r2, r7, #20
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	2306      	movs	r3, #6
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f000 fa05 	bl	800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8001120:	7d3b      	ldrb	r3, [r7, #20]
 8001122:	b21a      	sxth	r2, r3
 8001124:	7d7b      	ldrb	r3, [r7, #21]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800112e:	7dbb      	ldrb	r3, [r7, #22]
 8001130:	b21a      	sxth	r2, r3
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 800113c:	7e3b      	ldrb	r3, [r7, #24]
 800113e:	b21a      	sxth	r2, r3
 8001140:	7e7b      	ldrb	r3, [r7, #25]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3b08      	subs	r3, #8
 800114e:	2b26      	cmp	r3, #38	@ 0x26
 8001150:	f200 8152 	bhi.w	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001154:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001379 	.word	0x08001379
 8001160:	080013f9 	.word	0x080013f9
 8001164:	080013f9 	.word	0x080013f9
 8001168:	080013f9 	.word	0x080013f9
 800116c:	080013f9 	.word	0x080013f9
 8001170:	080013f9 	.word	0x080013f9
 8001174:	080011f9 	.word	0x080011f9
 8001178:	080013f9 	.word	0x080013f9
 800117c:	080013f9 	.word	0x080013f9
 8001180:	080013f9 	.word	0x080013f9
 8001184:	080013f9 	.word	0x080013f9
 8001188:	080013f9 	.word	0x080013f9
 800118c:	08001279 	.word	0x08001279
 8001190:	080013f9 	.word	0x080013f9
 8001194:	080013f9 	.word	0x080013f9
 8001198:	080013f9 	.word	0x080013f9
 800119c:	080013f9 	.word	0x080013f9
 80011a0:	080013f9 	.word	0x080013f9
 80011a4:	080012f9 	.word	0x080012f9
 80011a8:	080013f9 	.word	0x080013f9
 80011ac:	080013f9 	.word	0x080013f9
 80011b0:	080013f9 	.word	0x080013f9
 80011b4:	080013f9 	.word	0x080013f9
 80011b8:	080013f9 	.word	0x080013f9
 80011bc:	080013f9 	.word	0x080013f9
 80011c0:	080013f9 	.word	0x080013f9
 80011c4:	080013f9 	.word	0x080013f9
 80011c8:	080013f9 	.word	0x080013f9
 80011cc:	080013f9 	.word	0x080013f9
 80011d0:	080013f9 	.word	0x080013f9
 80011d4:	080013f9 	.word	0x080013f9
 80011d8:	080013f9 	.word	0x080013f9
 80011dc:	08001379 	.word	0x08001379
 80011e0:	080013f9 	.word	0x080013f9
 80011e4:	080013f9 	.word	0x080013f9
 80011e8:	080013f9 	.word	0x080013f9
 80011ec:	080013f9 	.word	0x080013f9
 80011f0:	080013f9 	.word	0x080013f9
 80011f4:	08001379 	.word	0x08001379
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 80011f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9b9 	bl	8000574 <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b7f      	ldr	r3, [pc, #508]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001208:	f7ff fb48 	bl	800089c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4614      	mov	r4, r2
 8001212:	461d      	mov	r5, r3
 8001214:	2100      	movs	r1, #0
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f9d9 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800121c:	4603      	mov	r3, r0
 800121e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 8001222:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9a4 	bl	8000574 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b74      	ldr	r3, [pc, #464]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001232:	f7ff fb33 	bl	800089c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4614      	mov	r4, r2
 800123c:	461d      	mov	r5, r3
 800123e:	2101      	movs	r1, #1
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f9c4 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001246:	4603      	mov	r3, r0
 8001248:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 800124c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f98f 	bl	8000574 <__aeabi_i2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b6a      	ldr	r3, [pc, #424]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800125c:	f7ff fb1e 	bl	800089c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	2102      	movs	r1, #2
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f9af 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001270:	4603      	mov	r3, r0
 8001272:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001276:	e0bf      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001278:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f979 	bl	8000574 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b60      	ldr	r3, [pc, #384]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001288:	f7ff fb08 	bl	800089c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	2100      	movs	r1, #0
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f999 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800129c:	4603      	mov	r3, r0
 800129e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f964 	bl	8000574 <__aeabi_i2d>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b55      	ldr	r3, [pc, #340]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012b2:	f7ff faf3 	bl	800089c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f984 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012c6:	4603      	mov	r3, r0
 80012c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f94f 	bl	8000574 <__aeabi_i2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012dc:	f7ff fade 	bl	800089c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	2102      	movs	r1, #2
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f96f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012f0:	4603      	mov	r3, r0
 80012f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80012f6:	e07f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 80012f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f939 	bl	8000574 <__aeabi_i2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	461d      	mov	r5, r3
 8001314:	2100      	movs	r1, #0
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f959 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800131c:	4603      	mov	r3, r0
 800131e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 8001322:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f924 	bl	8000574 <__aeabi_i2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b35      	ldr	r3, [pc, #212]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001332:	f7ff fab3 	bl	800089c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	2101      	movs	r1, #1
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f944 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001346:	4603      	mov	r3, r0
 8001348:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 800134c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f90f 	bl	8000574 <__aeabi_i2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800135c:	f7ff fa9e 	bl	800089c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	2102      	movs	r1, #2
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f92f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001370:	4603      	mov	r3, r0
 8001372:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001376:	e03f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001378:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8f9 	bl	8000574 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001388:	f7ff fa88 	bl	800089c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	2100      	movs	r1, #0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 f919 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800139c:	4603      	mov	r3, r0
 800139e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8e4 	bl	8000574 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013b2:	f7ff fa73 	bl	800089c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	2101      	movs	r1, #1
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f904 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013c6:	4603      	mov	r3, r0
 80013c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8cf 	bl	8000574 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013dc:	f7ff fa5e 	bl	800089c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	2102      	movs	r1, #2
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f8ef 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013f0:	4603      	mov	r3, r0
 80013f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80013f6:	bf00      	nop
  }

  return xyz;
 80013f8:	bf00      	nop
}
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bdb0      	pop	{r4, r5, r7, pc}
 8001402:	bf00      	nop
 8001404:	40300000 	.word	0x40300000
 8001408:	408c2000 	.word	0x408c2000
 800140c:	40590000 	.word	0x40590000

08001410 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 800141a:	2228      	movs	r2, #40	@ 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f013 fae7 	bl	80149f2 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	220b      	movs	r2, #11
 8001428:	4911      	ldr	r1, [pc, #68]	@ (8001470 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 800142a:	4618      	mov	r0, r3
 800142c:	f013 fae9 	bl	8014a02 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2203      	movs	r2, #3
 8001448:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
  sensor->max_value   = 0.0F;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001464:	621a      	str	r2, [r3, #32]
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08017fd8 	.word	0x08017fd8
 8001474:	3c23d70a 	.word	0x3c23d70a

08001478 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f013 fab3 	bl	80149f2 <memset>

  event->version   = sizeof(sensors_event_t);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2224      	movs	r2, #36	@ 0x24
 8001490:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2203      	movs	r2, #3
 800149e:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014a0:	f009 f94c 	bl	800a73c <HAL_GetTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	221a      	movs	r2, #26
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe15 	bl	80010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f853 	bl	800156a <_ZN3imu6VectorILh3EE1xEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbb3 	bl	8000c38 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f84f 	bl	8001580 <_ZN3imu6VectorILh3EE1yEv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fba4 	bl	8000c38 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f84c 	bl	8001598 <_ZN3imu6VectorILh3EE1zEv>
 8001500:	4603      	mov	r3, r0
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	61da      	str	r2, [r3, #28]

  return true;
 8001514:	2401      	movs	r4, #1
}
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f81a 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 8001520:	4623      	mov	r3, r4
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	@ 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	461a      	mov	r2, r3
 8001536:	460b      	mov	r3, r1
 8001538:	72fb      	strb	r3, [r7, #11]
 800153a:	4613      	mov	r3, r2
 800153c:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800153e:	7aba      	ldrb	r2, [r7, #10]
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f89b 	bl	8001680 <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    {
    }
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3308      	adds	r3, #8
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3310      	adds	r3, #16
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2218      	movs	r2, #24
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f013 fa17 	bl	80149f2 <memset>
    }
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
    }
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_ZN15Adafruit_BNO055D1Ev+0x20>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd29 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	080189e8 	.word	0x080189e8

08001610 <_ZN15Adafruit_BNO055D0Ev>:
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
 800161e:	2110      	movs	r1, #16
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f012 f902 	bl	801382a <_ZdlPvj>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <_ZN3imu10QuaternionC1Ev+0x4c>)
 8001640:	e9c1 2300 	strd	r2, r3, [r1]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	3ff00000 	.word	0x3ff00000

08001680 <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	b29a      	uxth	r2, r3
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	b29b      	uxth	r3, r3
 8001698:	2164      	movs	r1, #100	@ 0x64
 800169a:	9102      	str	r1, [sp, #8]
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2152      	movs	r1, #82	@ 0x52
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016a8:	f00a fbf8 	bl	800be9c <HAL_I2C_Mem_Read>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016b0:	bf00      	nop
 80016b2:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016b4:	f00a fead 	bl	800c412 <HAL_I2C_GetState>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f4      	bne.n	80016b2 <I2C_n_byte_receive+0x32>

  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000320 	.word	0x20000320

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10f      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016f2:	2229      	movs	r2, #41	@ 0x29
 80016f4:	2137      	movs	r1, #55	@ 0x37
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80016f8:	f7ff fcd8 	bl	80010ac <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016fe:	f7ff ff97 	bl	8001630 <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001704:	f7ff ff54 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d105      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001718:	4806      	ldr	r0, [pc, #24]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800171a:	f7ff ff1b 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001720:	f7ff ff64 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000026c 	.word	0x2000026c
 8001730:	20000280 	.word	0x20000280
 8001734:	200002a0 	.word	0x200002a0

08001738 <_GLOBAL__sub_I_bno>:
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffc9 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001746:	bd80      	pop	{r7, pc}

08001748 <_GLOBAL__sub_D_bno>:
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
 800174c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ffc1 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001756:	bd80      	pop	{r7, pc}

08001758 <alert_regulator>:
 */
extern "C" {
#include <alert_reg.h>

void alert_regulator()
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <as50_readAngle>:

	return (parity & 0x1);
}

void as50_readAngle(uint16_t * data, uint32_t timeout)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af02      	add	r7, sp, #8
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177c:	f00a f9ac 	bl	800bad8 <HAL_GPIO_WritePin>
	  if (HAL_SPI_TransmitReceive(&_ENCODER_SPI, (uint8_t*)&read_angle_register, (uint8_t*)data, 1, timeout) == HAL_OK)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4910      	ldr	r1, [pc, #64]	@ (80017cc <as50_readAngle+0x64>)
 800178a:	4811      	ldr	r0, [pc, #68]	@ (80017d0 <as50_readAngle+0x68>)
 800178c:	f00d f91c 	bl	800e9c8 <HAL_SPI_TransmitReceive>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10e      	bne.n	80017b4 <as50_readAngle+0x4c>
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800179c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a0:	f00a f99a 	bl	800bad8 <HAL_GPIO_WritePin>
		  *data &= _ENCODER_READMASK;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	801a      	strh	r2, [r3, #0]
	  }
	  else
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
	  }
}
 80017b2:	e006      	b.n	80017c2 <as50_readAngle+0x5a>
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017be:	f00a f98b 	bl	800bad8 <HAL_GPIO_WritePin>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000820 	.word	0x20000820

080017d4 <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
int at24_isConnected(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 80017d8:	2364      	movs	r3, #100	@ 0x64
 80017da:	2202      	movs	r2, #2
 80017dc:	21a0      	movs	r1, #160	@ 0xa0
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <at24_isConnected+0x20>)
 80017e0:	f00a fc76 	bl	800c0d0 <HAL_I2C_IsDeviceReady>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <at24_isConnected+0x1a>
    return true;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <at24_isConnected+0x1c>
  else
    return false;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000320 	.word	0x20000320

080017f8 <at24_write>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
int at24_write(uint16_t address, uint8_t *data, uint8_t len, uint32_t timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af04      	add	r7, sp, #16
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4603      	mov	r3, r0
 8001804:	81fb      	strh	r3, [r7, #14]
 8001806:	4613      	mov	r3, r2
 8001808:	737b      	strb	r3, [r7, #13]
  if (at24_lock == 1)
 800180a:	4b2b      	ldr	r3, [pc, #172]	@ (80018b8 <at24_write+0xc0>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <at24_write+0x1e>
    return false;
 8001812:	2300      	movs	r3, #0
 8001814:	e04b      	b.n	80018ae <at24_write+0xb6>

  at24_lock = 1;
 8001816:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <at24_write+0xc0>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 800181c:	f008 ff8e 	bl	800a73c <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]
  while (1)
  {
	#if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
	#endif
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	b29b      	uxth	r3, r3
 800182a:	f1c3 0320 	rsb	r3, r3, #32
 800182e:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 8001830:	7b7b      	ldrb	r3, [r7, #13]
 8001832:	b29b      	uxth	r3, r3
 8001834:	8afa      	ldrh	r2, [r7, #22]
 8001836:	429a      	cmp	r2, r3
 8001838:	d901      	bls.n	800183e <at24_write+0x46>
      w = len;
 800183a:	7b7b      	ldrb	r3, [r7, #13]
 800183c:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 800183e:	89fa      	ldrh	r2, [r7, #14]
 8001840:	2364      	movs	r3, #100	@ 0x64
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	8afb      	ldrh	r3, [r7, #22]
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2302      	movs	r3, #2
 800184e:	21a0      	movs	r1, #160	@ 0xa0
 8001850:	481a      	ldr	r0, [pc, #104]	@ (80018bc <at24_write+0xc4>)
 8001852:	f00a fa0f 	bl	800bc74 <HAL_I2C_Mem_Write>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d124      	bne.n	80018a6 <at24_write+0xae>
    #endif
    {
      at24_delay(1);
 800185c:	2001      	movs	r0, #1
 800185e:	f008 ff79 	bl	800a754 <HAL_Delay>
      len -= w;
 8001862:	8afb      	ldrh	r3, [r7, #22]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	7b7a      	ldrb	r2, [r7, #13]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	737b      	strb	r3, [r7, #13]
      data += w;
 800186c:	8afb      	ldrh	r3, [r7, #22]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4413      	add	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
      address += w;
 8001874:	89fa      	ldrh	r2, [r7, #14]
 8001876:	8afb      	ldrh	r3, [r7, #22]
 8001878:	4413      	add	r3, r2
 800187a:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 800187c:	7b7b      	ldrb	r3, [r7, #13]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d104      	bne.n	800188c <at24_write+0x94>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
        #endif
        at24_lock = 0;
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <at24_write+0xc0>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
        return true;
 8001888:	2301      	movs	r3, #1
 800188a:	e010      	b.n	80018ae <at24_write+0xb6>
      }
      if (HAL_GetTick() - startTime >= timeout)
 800188c:	f008 ff56 	bl	800a73c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8c2      	bhi.n	8001822 <at24_write+0x2a>
      {
        at24_lock = 0;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <at24_write+0xc0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
        return false;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e003      	b.n	80018ae <at24_write+0xb6>
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
      #endif
      at24_lock = 0;
 80018a6:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <at24_write+0xc0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
      return false;
 80018ac:	2300      	movs	r3, #0
    }
  }
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200002b8 	.word	0x200002b8
 80018bc:	20000320 	.word	0x20000320

080018c0 <at24_read>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
int at24_read(uint16_t address, uint8_t *data, uint8_t len, uint32_t timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4603      	mov	r3, r0
 80018cc:	81fb      	strh	r3, [r7, #14]
 80018ce:	4613      	mov	r3, r2
 80018d0:	737b      	strb	r3, [r7, #13]
	at24_delay(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f008 ff3e 	bl	800a754 <HAL_Delay>
  #if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
  #endif
  if (at24_lock == 1)
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <at24_read+0x68>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <at24_read+0x24>
    return false;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e01c      	b.n	800191e <at24_read+0x5e>
  at24_lock = 1;
 80018e4:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <at24_read+0x68>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 80018ea:	7b7b      	ldrb	r3, [r7, #13]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	89f9      	ldrh	r1, [r7, #14]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	9202      	str	r2, [sp, #8]
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2302      	movs	r3, #2
 80018fc:	460a      	mov	r2, r1
 80018fe:	21a0      	movs	r1, #160	@ 0xa0
 8001900:	480a      	ldr	r0, [pc, #40]	@ (800192c <at24_read+0x6c>)
 8001902:	f00a facb 	bl	800be9c <HAL_I2C_Mem_Read>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d104      	bne.n	8001916 <at24_read+0x56>
  #endif
  {
    at24_lock = 0;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <at24_read+0x68>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
    return true;
 8001912:	2301      	movs	r3, #1
 8001914:	e003      	b.n	800191e <at24_read+0x5e>
  }
  else
  {
    at24_lock = 0;
 8001916:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <at24_read+0x68>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    return false;
 800191c:	2300      	movs	r3, #0
  }
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200002b8 	.word	0x200002b8
 800192c:	20000320 	.word	0x20000320

08001930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <MX_DMA_Init+0x60>)
 8001938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800193a:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <MX_DMA_Init+0x60>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6493      	str	r3, [r2, #72]	@ 0x48
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <MX_DMA_Init+0x60>)
 8001944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_DMA_Init+0x60>)
 8001950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001952:	4a0f      	ldr	r2, [pc, #60]	@ (8001990 <MX_DMA_Init+0x60>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6493      	str	r3, [r2, #72]	@ 0x48
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <MX_DMA_Init+0x60>)
 800195c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	200b      	movs	r0, #11
 800196c:	f008 ffef 	bl	800a94e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001970:	200b      	movs	r0, #11
 8001972:	f009 f806 	bl	800a982 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	200c      	movs	r0, #12
 800197c:	f008 ffe7 	bl	800a94e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001980:	200c      	movs	r0, #12
 8001982:	f008 fffe 	bl	800a982 <HAL_NVIC_EnableIRQ>

}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000

08001994 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 800199a:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <MX_FDCAN1_Init+0x8c>)
 800199c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800199e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80019aa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019c6:	2204      	movs	r2, #4
 80019c8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80019ca:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019d2:	221d      	movs	r2, #29
 80019d4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019d8:	220a      	movs	r2, #10
 80019da:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019de:	2204      	movs	r2, #4
 80019e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019f0:	2202      	movs	r2, #2
 80019f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 80019fc:	2203      	movs	r2, #3
 80019fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_FDCAN1_Init+0x88>)
 8001a08:	f009 fa5e 	bl	800aec8 <HAL_FDCAN_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001a12:	f000 fc12 	bl	800223a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002bc 	.word	0x200002bc
 8001a20:	40006400 	.word	0x40006400

08001a24 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b09e      	sub	sp, #120	@ 0x78
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2254      	movs	r2, #84	@ 0x54
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f012 ffd4 	bl	80149f2 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <HAL_FDCAN_MspInit+0xac>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d138      	bne.n	8001ac6 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001a5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00c fb41 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a70:	f000 fbe3 	bl	800223a <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a74:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <HAL_FDCAN_MspInit+0xb0>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a78:	4a16      	ldr	r2, [pc, #88]	@ (8001ad4 <HAL_FDCAN_MspInit+0xb0>)
 8001a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a80:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <HAL_FDCAN_MspInit+0xb0>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_FDCAN_MspInit+0xb0>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a90:	4a10      	ldr	r2, [pc, #64]	@ (8001ad4 <HAL_FDCAN_MspInit+0xb0>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <HAL_FDCAN_MspInit+0xb0>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aa4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001aa8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ab6:	2309      	movs	r3, #9
 8001ab8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <HAL_FDCAN_MspInit+0xb4>)
 8001ac2:	f009 fe87 	bl	800b7d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3778      	adds	r7, #120	@ 0x78
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40006400 	.word	0x40006400
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000400 	.word	0x48000400

08001adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af2:	4b4a      	ldr	r3, [pc, #296]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	4a49      	ldr	r2, [pc, #292]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001af8:	f043 0320 	orr.w	r3, r3, #32
 8001afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afe:	4b47      	ldr	r3, [pc, #284]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f003 0320 	and.w	r3, r3, #32
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	4b44      	ldr	r3, [pc, #272]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	4a43      	ldr	r2, [pc, #268]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b16:	4b41      	ldr	r3, [pc, #260]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	4a3d      	ldr	r2, [pc, #244]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3a:	4b38      	ldr	r3, [pc, #224]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	4a37      	ldr	r2, [pc, #220]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b46:	4b35      	ldr	r3, [pc, #212]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	4a31      	ldr	r2, [pc, #196]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <MX_GPIO_Init+0x140>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f649 3110 	movw	r1, #39696	@ 0x9b10
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b74:	f009 ffb0 	bl	800bad8 <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2120      	movs	r1, #32
 8001b7c:	4828      	ldr	r0, [pc, #160]	@ (8001c20 <MX_GPIO_Init+0x144>)
 8001b7e:	f009 ffab 	bl	800bad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2104      	movs	r1, #4
 8001b86:	4827      	ldr	r0, [pc, #156]	@ (8001c24 <MX_GPIO_Init+0x148>)
 8001b88:	f009 ffa6 	bl	800bad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b90:	2303      	movs	r3, #3
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4820      	ldr	r0, [pc, #128]	@ (8001c20 <MX_GPIO_Init+0x144>)
 8001ba0:	f009 fe18 	bl	800b7d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	481a      	ldr	r0, [pc, #104]	@ (8001c20 <MX_GPIO_Init+0x144>)
 8001bb8:	f009 fe0c 	bl	800b7d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8001bbc:	f649 3310 	movw	r3, #39696	@ 0x9b10
 8001bc0:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd8:	f009 fdfc 	bl	800b7d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480b      	ldr	r0, [pc, #44]	@ (8001c20 <MX_GPIO_Init+0x144>)
 8001bf4:	f009 fdee 	bl	800b7d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_GPIO_Init+0x148>)
 8001c10:	f009 fde0 	bl	800b7d4 <HAL_GPIO_Init>

}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	@ 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	48000800 	.word	0x48000800
 8001c24:	48000c00 	.word	0x48000c00

08001c28 <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <MX_I2C4_Init+0x78>)
 8001c30:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca4 <MX_I2C4_Init+0x7c>)
 8001c36:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c44:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001c62:	480e      	ldr	r0, [pc, #56]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c64:	f009 ff6a 	bl	800bb3c <HAL_I2C_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001c6e:	f000 fae4 	bl	800223a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c72:	2100      	movs	r1, #0
 8001c74:	4809      	ldr	r0, [pc, #36]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c76:	f00b fbbf 	bl	800d3f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001c80:	f000 fadb 	bl	800223a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001c84:	2100      	movs	r1, #0
 8001c86:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_I2C4_Init+0x74>)
 8001c88:	f00b fc01 	bl	800d48e <HAL_I2CEx_ConfigDigitalFilter>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001c92:	f000 fad2 	bl	800223a <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000320 	.word	0x20000320
 8001ca0:	40008400 	.word	0x40008400
 8001ca4:	00702991 	.word	0x00702991

08001ca8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0a0      	sub	sp, #128	@ 0x80
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	2254      	movs	r2, #84	@ 0x54
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f012 fe92 	bl	80149f2 <memset>
  if(i2cHandle->Instance==I2C4)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e4c <HAL_I2C_MspInit+0x1a4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	f040 80b5 	bne.w	8001e44 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001cda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00c f9ff 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001cf4:	f000 faa1 	bl	800223a <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf8:	4b55      	ldr	r3, [pc, #340]	@ (8001e50 <HAL_I2C_MspInit+0x1a8>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfc:	4a54      	ldr	r2, [pc, #336]	@ (8001e50 <HAL_I2C_MspInit+0x1a8>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d04:	4b52      	ldr	r3, [pc, #328]	@ (8001e50 <HAL_I2C_MspInit+0x1a8>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	4b4f      	ldr	r3, [pc, #316]	@ (8001e50 <HAL_I2C_MspInit+0x1a8>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d14:	4a4e      	ldr	r2, [pc, #312]	@ (8001e50 <HAL_I2C_MspInit+0x1a8>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e50 <HAL_I2C_MspInit+0x1a8>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d28:	2340      	movs	r3, #64	@ 0x40
 8001d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d40:	4619      	mov	r1, r3
 8001d42:	4844      	ldr	r0, [pc, #272]	@ (8001e54 <HAL_I2C_MspInit+0x1ac>)
 8001d44:	f009 fd46 	bl	800b7d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d60:	4619      	mov	r1, r3
 8001d62:	483d      	ldr	r0, [pc, #244]	@ (8001e58 <HAL_I2C_MspInit+0x1b0>)
 8001d64:	f009 fd36 	bl	800b7d4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d68:	4b39      	ldr	r3, [pc, #228]	@ (8001e50 <HAL_I2C_MspInit+0x1a8>)
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6c:	4a38      	ldr	r2, [pc, #224]	@ (8001e50 <HAL_I2C_MspInit+0x1a8>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001d74:	4b36      	ldr	r3, [pc, #216]	@ (8001e50 <HAL_I2C_MspInit+0x1a8>)
 8001d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 8001d80:	4b36      	ldr	r3, [pc, #216]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001d82:	4a37      	ldr	r2, [pc, #220]	@ (8001e60 <HAL_I2C_MspInit+0x1b8>)
 8001d84:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8001d86:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001d88:	2216      	movs	r2, #22
 8001d8a:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8c:	4b33      	ldr	r3, [pc, #204]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d92:	4b32      	ldr	r3, [pc, #200]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d98:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001d9a:	2280      	movs	r2, #128	@ 0x80
 8001d9c:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001daa:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001db0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001db6:	4829      	ldr	r0, [pc, #164]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001db8:	f008 fdfe 	bl	800a9b8 <HAL_DMA_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8001dc2:	f000 fa3a 	bl	800223a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a24      	ldr	r2, [pc, #144]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001dca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dcc:	4a23      	ldr	r2, [pc, #140]	@ (8001e5c <HAL_I2C_MspInit+0x1b4>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001dd4:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <HAL_I2C_MspInit+0x1c0>)
 8001dd6:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001dd8:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001dda:	2217      	movs	r2, #23
 8001ddc:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001de0:	2210      	movs	r2, #16
 8001de2:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001dec:	2280      	movs	r2, #128	@ 0x80
 8001dee:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001e08:	4816      	ldr	r0, [pc, #88]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001e0a:	f008 fdd5 	bl	800a9b8 <HAL_DMA_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8001e14:	f000 fa11 	bl	800223a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001e1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e1e:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_I2C_MspInit+0x1bc>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2052      	movs	r0, #82	@ 0x52
 8001e2a:	f008 fd90 	bl	800a94e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001e2e:	2052      	movs	r0, #82	@ 0x52
 8001e30:	f008 fda7 	bl	800a982 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	2053      	movs	r0, #83	@ 0x53
 8001e3a:	f008 fd88 	bl	800a94e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001e3e:	2053      	movs	r0, #83	@ 0x53
 8001e40:	f008 fd9f 	bl	800a982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001e44:	bf00      	nop
 8001e46:	3780      	adds	r7, #128	@ 0x80
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40008400 	.word	0x40008400
 8001e50:	40021000 	.word	0x40021000
 8001e54:	48000800 	.word	0x48000800
 8001e58:	48000400 	.word	0x48000400
 8001e5c:	20000374 	.word	0x20000374
 8001e60:	40020008 	.word	0x40020008
 8001e64:	200003d4 	.word	0x200003d4
 8001e68:	4002001c 	.word	0x4002001c

08001e6c <motor_config_assembler>:
	  domain_id_selector(jconf);
#endif
}

void motor_config_assembler(motor_config * mc, joint_config * jc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	if (JOINT_N == 1)
	{
		mc->motor_type = 17;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2211      	movs	r2, #17
 8001e7a:	701a      	strb	r2, [r3, #0]
	else if (JOINT_N == 6)
	{
		mc->motor_type = 14;
	}

	switch(mc->motor_type)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e82:	2b17      	cmp	r3, #23
 8001e84:	d019      	beq.n	8001eba <motor_config_assembler+0x4e>
 8001e86:	2b17      	cmp	r3, #23
 8001e88:	dc20      	bgt.n	8001ecc <motor_config_assembler+0x60>
 8001e8a:	2b0e      	cmp	r3, #14
 8001e8c:	d002      	beq.n	8001e94 <motor_config_assembler+0x28>
 8001e8e:	2b11      	cmp	r3, #17
 8001e90:	d00a      	beq.n	8001ea8 <motor_config_assembler+0x3c>
 8001e92:	e01b      	b.n	8001ecc <motor_config_assembler+0x60>
	{
	case 14:
		mc->max_irun_scaler = 8;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2208      	movs	r2, #8
 8001e98:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 0.5;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001ea0:	605a      	str	r2, [r3, #4]
		mc->init_irun = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	725a      	strb	r2, [r3, #9]
	case 17:
		mc->max_irun_scaler = 12;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	220c      	movs	r2, #12
 8001eac:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 3.9;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <motor_config_assembler+0x78>)
 8001eb2:	605a      	str	r2, [r3, #4]
		mc->init_irun = 2;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	725a      	strb	r2, [r3, #9]
	case 23:
		mc->max_irun_scaler = 31;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 10.2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <motor_config_assembler+0x7c>)
 8001ec4:	605a      	str	r2, [r3, #4]
		mc->init_irun = 4;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	725a      	strb	r2, [r3, #9]
	}
	mc->direction = jc->direction;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	729a      	strb	r2, [r3, #10]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	4079999a 	.word	0x4079999a
 8001ee8:	41233333 	.word	0x41233333

08001eec <joint_config_assembler>:


void joint_config_assembler(joint_config * jconf, joint_config_address * jc_a)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
	if (JOINT_N == 1)
	{
		jconf->motor_gear_ratio = 50;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <joint_config_assembler+0x8c>)
 8001efa:	60da      	str	r2, [r3, #12]
		jconf->joint_gear_ratio = 3;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f7c <joint_config_assembler+0x90>)
 8001f00:	609a      	str	r2, [r3, #8]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f08:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001f80 <joint_config_assembler+0x94>
 8001f0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1e:	ee17 2a90 	vmov	r2, s15
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	605a      	str	r2, [r3, #4]
		jconf->direction = -1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	22ff      	movs	r2, #255	@ 0xff
 8001f2a:	705a      	strb	r2, [r3, #1]
		jconf->lower_limit_ticks = 0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
		jconf->upper_limit_ticks = 0;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
		jconf->lower_limit_ticks = 0;
		jconf->upper_limit_ticks = 0;
	}

	//TODO!!!!!!!!!!!!!!!!!!!!!!!!! from config read
	jconf->lower_limit_enc = 0.0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
	jconf->upper_limit_enc = 0.0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
	jconf->zero_enc = 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
	//TODO!!!!!!!!!!!!!!!!!!!!!!!!!

	jc_a->address_of_upper_limit_enc = 0x00;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	801a      	strh	r2, [r3, #0]
	jc_a->address_of_lower_limit_enc = jc_a->address_of_upper_limit_enc + sizeof(jconf->upper_limit_enc);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	805a      	strh	r2, [r3, #2]
	jc_a->address_of_zero_enc = jc_a->address_of_lower_limit_enc + sizeof(jconf->lower_limit_enc);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	885b      	ldrh	r3, [r3, #2]
 8001f64:	3304      	adds	r3, #4
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	809a      	strh	r2, [r3, #4]

}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	42480000 	.word	0x42480000
 8001f7c:	40400000 	.word	0x40400000
 8001f80:	47480000 	.word	0x47480000

08001f84 <joint_config_write>:




void joint_config_write(joint_config * jc, joint_config_address * jc_a)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	int timeout = 100;
 8001f8e:	2364      	movs	r3, #100	@ 0x64
 8001f90:	60fb      	str	r3, [r7, #12]
	if (at24_isConnected())
 8001f92:	f7ff fc1f 	bl	80017d4 <at24_isConnected>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d025      	beq.n	8001fe8 <joint_config_write+0x64>
	{
		at24_write(&jc_a->address_of_upper_limit_enc, &jc->upper_limit_enc, sizeof(&jc->upper_limit_enc), timeout);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b298      	uxth	r0, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f103 0118 	add.w	r1, r3, #24
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	f7ff fc25 	bl	80017f8 <at24_write>
		os_delay(1);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f008 fbd0 	bl	800a754 <HAL_Delay>
		at24_write(&jc_a->address_of_lower_limit_enc, &jc->lower_limit_enc, sizeof(&jc->lower_limit_enc), timeout);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	b298      	uxth	r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f103 011c 	add.w	r1, r3, #28
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	f7ff fc18 	bl	80017f8 <at24_write>
		os_delay(1);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f008 fbc3 	bl	800a754 <HAL_Delay>
		at24_write(&jc_a->address_of_zero_enc, &jc->zero_enc, sizeof(&jc->zero_enc), timeout);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	b298      	uxth	r0, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f103 0120 	add.w	r1, r3, #32
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	f7ff fc0b 	bl	80017f8 <at24_write>
		os_delay(1);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f008 fbb6 	bl	800a754 <HAL_Delay>
	}
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <joint_config_read>:

void joint_config_read(joint_config * jc, joint_config_address * jc_a)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
	int timeout = 100;
 8001ffa:	2364      	movs	r3, #100	@ 0x64
 8001ffc:	60fb      	str	r3, [r7, #12]
	if (at24_isConnected())
 8001ffe:	f7ff fbe9 	bl	80017d4 <at24_isConnected>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d025      	beq.n	8002054 <joint_config_read+0x64>
		{
		at24_read(&jc_a->address_of_upper_limit_enc, &jc->upper_limit_enc, sizeof(&jc->upper_limit_enc), timeout);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b298      	uxth	r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f103 0118 	add.w	r1, r3, #24
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2204      	movs	r2, #4
 8002016:	f7ff fc53 	bl	80018c0 <at24_read>
		os_delay(1);
 800201a:	2001      	movs	r0, #1
 800201c:	f008 fb9a 	bl	800a754 <HAL_Delay>
		at24_read(&jc_a->address_of_lower_limit_enc, &jc->lower_limit_enc, sizeof(&jc->lower_limit_enc), timeout);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	3302      	adds	r3, #2
 8002024:	b298      	uxth	r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f103 011c 	add.w	r1, r3, #28
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2204      	movs	r2, #4
 8002030:	f7ff fc46 	bl	80018c0 <at24_read>
		os_delay(1);
 8002034:	2001      	movs	r0, #1
 8002036:	f008 fb8d 	bl	800a754 <HAL_Delay>
		at24_read(&jc_a->address_of_zero_enc, &jc->zero_enc, sizeof(&jc->zero_enc), timeout);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	3304      	adds	r3, #4
 800203e:	b298      	uxth	r0, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0120 	add.w	r1, r3, #32
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2204      	movs	r2, #4
 800204a:	f7ff fc39 	bl	80018c0 <at24_read>
		os_delay(1);
 800204e:	2001      	movs	r0, #1
 8002050:	f008 fb80 	bl	800a754 <HAL_Delay>
		}
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <js_init>:
extern "C" {
#include <jsm.h>

extern joint_state js;

void js_init(){
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
	js.fail = 0;
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <js_init+0x34>)
 8002062:	2200      	movs	r2, #0
 8002064:	70da      	strb	r2, [r3, #3]
	js.move = 0;
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <js_init+0x34>)
 8002068:	2200      	movs	r2, #0
 800206a:	709a      	strb	r2, [r3, #2]
	js.pos = 0;
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <js_init+0x34>)
 800206e:	2200      	movs	r2, #0
 8002070:	705a      	strb	r2, [r3, #1]
	js.stop = 0;
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <js_init+0x34>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
	js.in_lower_limit = 0;
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <js_init+0x34>)
 800207a:	2200      	movs	r2, #0
 800207c:	715a      	strb	r2, [r3, #5]
	js.in_upper_limit = 0;
 800207e:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <js_init+0x34>)
 8002080:	2200      	movs	r2, #0
 8002082:	711a      	strb	r2, [r3, #4]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	2000046c 	.word	0x2000046c

08002094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b094      	sub	sp, #80	@ 0x50
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800209a:	f008 faea 	bl	800a672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800209e:	f000 f881 	bl	80021a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a2:	f7ff fd1b 	bl	8001adc <MX_GPIO_Init>
  MX_DMA_Init();
 80020a6:	f7ff fc43 	bl	8001930 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80020aa:	f7ff fc73 	bl	8001994 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 80020ae:	f7ff fdbb 	bl	8001c28 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 80020b2:	f008 f979 	bl	800a3a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80020b6:	f007 fa63 	bl	8009580 <MX_SPI1_Init>
  MX_SPI3_Init();
 80020ba:	f007 fa9f 	bl	80095fc <MX_SPI3_Init>
  MX_TIM8_Init();
 80020be:	f007 fcc1 	bl	8009a44 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  cyphal_can_starter(&hfdcan1);
 80020c2:	4833      	ldr	r0, [pc, #204]	@ (8002190 <main+0xfc>)
 80020c4:	f005 fa2c 	bl	8007520 <cyphal_can_starter>
  setup_cyphal(&hfdcan1);
 80020c8:	4831      	ldr	r0, [pc, #196]	@ (8002190 <main+0xfc>)
 80020ca:	f005 f985 	bl	80073d8 <setup_cyphal>
  HAL_Delay(10);
 80020ce:	200a      	movs	r0, #10
 80020d0:	f008 fb40 	bl	800a754 <HAL_Delay>
  joint_config_assembler(&jc, &jc_a);
 80020d4:	492f      	ldr	r1, [pc, #188]	@ (8002194 <main+0x100>)
 80020d6:	4830      	ldr	r0, [pc, #192]	@ (8002198 <main+0x104>)
 80020d8:	f7ff ff08 	bl	8001eec <joint_config_assembler>
  motor_config_assembler(&mc, &jc);
 80020dc:	492e      	ldr	r1, [pc, #184]	@ (8002198 <main+0x104>)
 80020de:	482f      	ldr	r0, [pc, #188]	@ (800219c <main+0x108>)
 80020e0:	f7ff fec4 	bl	8001e6c <motor_config_assembler>
  joint_config_read(&jc, &jc_a);
 80020e4:	492b      	ldr	r1, [pc, #172]	@ (8002194 <main+0x100>)
 80020e6:	482c      	ldr	r0, [pc, #176]	@ (8002198 <main+0x104>)
 80020e8:	f7ff ff82 	bl	8001ff0 <joint_config_read>
  HAL_Delay(10);
 80020ec:	200a      	movs	r0, #10
 80020ee:	f008 fb31 	bl	800a754 <HAL_Delay>
  tmc5160_init(&mc);
 80020f2:	482a      	ldr	r0, [pc, #168]	@ (800219c <main+0x108>)
 80020f4:	f007 ffa4 	bl	800a040 <tmc5160_init>
  js_init();
 80020f8:	f7ff ffb0 	bl	800205c <js_init>
  HAL_Delay(10);
 80020fc:	200a      	movs	r0, #10
 80020fe:	f008 fb29 	bl	800a754 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t msg[10];
  int i = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	643b      	str	r3, [r7, #64]	@ 0x40


  HAL_StatusTypeDef rv;


  uint32_t last_hbeat = HAL_GetTick();
 8002106:	f008 fb19 	bl	800a73c <HAL_GetTick>
 800210a:	64f8      	str	r0, [r7, #76]	@ 0x4c
  uint32_t last_js = HAL_GetTick();
 800210c:	f008 fb16 	bl	800a73c <HAL_GetTick>
 8002110:	64b8      	str	r0, [r7, #72]	@ 0x48
  uint32_t last_AR = HAL_GetTick();
 8002112:	f008 fb13 	bl	800a73c <HAL_GetTick>
 8002116:	6478      	str	r0, [r7, #68]	@ 0x44

  vec_4ax linear = {0};
 8002118:	f107 0320 	add.w	r3, r7, #32
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
  vec_4ax quat = {0};
 8002126:	f107 0310 	add.w	r3, r7, #16
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
  vec_4ax gyro = {0};
 8002134:	463b      	mov	r3, r7
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  //rv = HAL_I2C_IsDeviceReady(&hi2c4, 0x29, 1, 10);
  //IMU_setup();

  while (1)
  {
      uint32_t now = HAL_GetTick();
 8002140:	f008 fafc 	bl	800a73c <HAL_GetTick>
 8002144:	63f8      	str	r0, [r7, #60]	@ 0x3c
      if ( (now - last_hbeat) >= 1000) {
 8002146:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002150:	d303      	bcc.n	800215a <main+0xc6>
          last_hbeat = now;
 8002152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002154:	64fb      	str	r3, [r7, #76]	@ 0x4c
          heartbeat();
 8002156:	f005 f90f 	bl	8007378 <heartbeat>
      	  //imu_get_gyro(&gyro);
          //sprintf(msg,"%d\n\0", q[1]);
          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
      }
      if ( (now - last_AR) >= 500) {
 800215a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800215c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002164:	d303      	bcc.n	800216e <main+0xda>
    	  last_AR = now;
 8002166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002168:	647b      	str	r3, [r7, #68]	@ 0x44
    	  alert_regulator();
 800216a:	f7ff faf5 	bl	8001758 <alert_regulator>
      }
      if ( (now - last_js) >= 100) {
 800216e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b63      	cmp	r3, #99	@ 0x63
 8002176:	d908      	bls.n	800218a <main+0xf6>
    	  last_js = now;
 8002178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217a:	64bb      	str	r3, [r7, #72]	@ 0x48
    	  send_JS(&jc);
 800217c:	4806      	ldr	r0, [pc, #24]	@ (8002198 <main+0x104>)
 800217e:	f005 f8b9 	bl	80072f4 <send_JS>
    	  as50_readAngle(&enc_angle, 100);
 8002182:	2164      	movs	r1, #100	@ 0x64
 8002184:	4806      	ldr	r0, [pc, #24]	@ (80021a0 <main+0x10c>)
 8002186:	f7ff faef 	bl	8001768 <as50_readAngle>
      }
      cyphal_loop();
 800218a:	f005 f9bb 	bl	8007504 <cyphal_loop>
  {
 800218e:	e7d7      	b.n	8002140 <main+0xac>
 8002190:	200002bc 	.word	0x200002bc
 8002194:	20000464 	.word	0x20000464
 8002198:	20000440 	.word	0x20000440
 800219c:	20000434 	.word	0x20000434
 80021a0:	20000472 	.word	0x20000472

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b094      	sub	sp, #80	@ 0x50
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0318 	add.w	r3, r7, #24
 80021ae:	2238      	movs	r2, #56	@ 0x38
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f012 fc1d 	bl	80149f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f00b f9ae 	bl	800d528 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d6:	2302      	movs	r3, #2
 80021d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021da:	2303      	movs	r3, #3
 80021dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80021de:	2301      	movs	r3, #1
 80021e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80021e2:	2328      	movs	r3, #40	@ 0x28
 80021e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e6:	2302      	movs	r3, #2
 80021e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021ea:	2302      	movs	r3, #2
 80021ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021ee:	2302      	movs	r3, #2
 80021f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00b fa4a 	bl	800d690 <HAL_RCC_OscConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002202:	f000 f81a 	bl	800223a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002206:	230f      	movs	r3, #15
 8002208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800220a:	2303      	movs	r3, #3
 800220c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800221c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2104      	movs	r1, #4
 8002222:	4618      	mov	r0, r3
 8002224:	f00b fd46 	bl	800dcb4 <HAL_RCC_ClockConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800222e:	f000 f804 	bl	800223a <Error_Handler>
  }
}
 8002232:	bf00      	nop
 8002234:	3750      	adds	r7, #80	@ 0x50
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800223e:	b672      	cpsid	i
}
 8002240:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002242:	bf00      	nop
 8002244:	e7fd      	b.n	8002242 <Error_Handler+0x8>

08002246 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d019      	beq.n	80022d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3308      	adds	r3, #8
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf0c      	ite	eq
 80022be:	2301      	moveq	r3, #1
 80022c0:	2300      	movne	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
        }
    }
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	2203      	movs	r2, #3
 8002322:	4798      	blx	r3
    }
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ffd4 	bl	8002308 <_ZNSt14_Function_baseD1Ev>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_ZNSt8functionIFvvEED1Ev>:
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ffc7 	bl	8002308 <_ZNSt14_Function_baseD1Ev>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	4618      	mov	r0, r3
 8002396:	f005 f9e1 	bl	800775c <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3310      	adds	r3, #16
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f005 fa06 	bl	80077b2 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>:

class AbstractAllocator {
protected:
    UtilityConfig& utilities;
public:
    AbstractAllocator(size_t size, UtilityConfig& utilities): utilities(utilities) {};
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	4a06      	ldr	r2, [pc, #24]	@ (80023d8 <_ZN17AbstractAllocatorC1EjR13UtilityConfig+0x28>)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	08018ad4 	.word	0x08018ad4

080023dc <_Z7alloc_fP14CanardInstancej>:
#include <cyphal/definitions.h>
#include <libcanard/canard.h>

extern std::unique_ptr<AbstractAllocator> _alloc_ptr;

inline void* alloc_f (CanardInstance* ins, size_t amount) {
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 80023e6:	480d      	ldr	r0, [pc, #52]	@ (800241c <_Z7alloc_fP14CanardInstancej+0x40>)
 80023e8:	f005 fa0e 	bl	8007808 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f083 0301 	eor.w	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <_Z7alloc_fP14CanardInstancej+0x22>
        #ifdef __linux__
        std::cerr << "Tried to allocate canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f011 fa5d 	bl	80138b8 <exit>
    }
    return _alloc_ptr->allocate(ins, amount);
 80023fe:	4807      	ldr	r0, [pc, #28]	@ (800241c <_Z7alloc_fP14CanardInstancej+0x40>)
 8002400:	f005 fa13 	bl	800782a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8002404:	4603      	mov	r3, r0
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	6814      	ldr	r4, [r2, #0]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4618      	mov	r0, r3
 8002410:	47a0      	blx	r4
 8002412:	4603      	mov	r3, r0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	200009ac 	.word	0x200009ac

08002420 <_Z6free_fP14CanardInstancePv>:
inline void free_f (CanardInstance* ins, void* pointer) {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
    if (!_alloc_ptr) {
 800242a:	480d      	ldr	r0, [pc, #52]	@ (8002460 <_Z6free_fP14CanardInstancePv+0x40>)
 800242c:	f005 f9ec 	bl	8007808 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8002430:	4603      	mov	r3, r0
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <_Z6free_fP14CanardInstancePv+0x22>
        #ifdef __linux__
        std::cerr << "Tried to free (?) canard memory before creating provider&allocator!" << std::endl;
        #endif
        exit(1);
 800243c:	2001      	movs	r0, #1
 800243e:	f011 fa3b 	bl	80138b8 <exit>
    }
    return _alloc_ptr->free(ins, pointer);
 8002442:	4807      	ldr	r0, [pc, #28]	@ (8002460 <_Z6free_fP14CanardInstancePv+0x40>)
 8002444:	f005 f9f1 	bl	800782a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>
 8002448:	4603      	mov	r3, r0
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	3204      	adds	r2, #4
 800244e:	6814      	ldr	r4, [r2, #0]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	47a0      	blx	r4
 8002458:	bf00      	nop
}
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}
 8002460:	200009ac 	.word	0x200009ac

08002464 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>:
    CanardInstance canard;
    UtilityConfig& utilities;

    AbstractCANProvider() = delete;
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, UtilityConfig& utilities) : AbstractCANProvider(canard_mtu, wire_mtu, 200, utilities) {};
    AbstractCANProvider(size_t canard_mtu, size_t wire_mtu, size_t queue_len, UtilityConfig& utilities) :
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
        CANARD_MTU(canard_mtu),
        WIRE_MTU(wire_mtu),
        queue(canardTxInit(queue_len, CANARD_MTU)),
        utilities(utilities)
 8002472:	4a0c      	ldr	r2, [pc, #48]	@ (80024a4 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig+0x40>)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	601a      	str	r2, [r3, #0]
        CANARD_MTU(canard_mtu),
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	605a      	str	r2, [r3, #4]
        WIRE_MTU(wire_mtu),
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
        queue(canardTxInit(queue_len, CANARD_MTU)),
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	330c      	adds	r3, #12
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f010 ff06 	bl	80132a0 <canardTxInit>
        utilities(utilities)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	63da      	str	r2, [r3, #60]	@ 0x3c
    {};
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	08018c98 	.word	0x08018c98

080024a8 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>:
private:
    const CanardNodeID node_id;
    UtilityConfig& utilities;
    std::unique_ptr<AbstractCANProvider> provider;
public:
    CyphalInterface(CanardNodeID node_id, UtilityConfig& config, AbstractCANProvider* provider) :
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	460b      	mov	r3, r1
 80024b6:	72fb      	strb	r3, [r7, #11]
		node_id(node_id), utilities(config), provider(provider) {};
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	7afa      	ldrb	r2, [r7, #11]
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3308      	adds	r3, #8
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f005 f9c9 	bl	8007862 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>:
class G4CAN : public AbstractCANProvider {
public:
    typedef FDCAN_HandleTypeDef* Handler;
private:
    FDCAN_HandleTypeDef* handler;
    G4CAN(Handler handler, size_t queue_len, UtilityConfig& utilities):
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
        AbstractCANProvider(CANARD_MTU_CAN_FD, 72, queue_len, utilities), handler(handler) {};
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2248      	movs	r2, #72	@ 0x48
 80024f4:	2140      	movs	r1, #64	@ 0x40
 80024f6:	f7ff ffb5 	bl	8002464 <_ZN19AbstractCANProviderC1EjjjR13UtilityConfig>
 80024fa:	4a05      	ldr	r2, [pc, #20]	@ (8002510 <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig+0x34>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	641a      	str	r2, [r3, #64]	@ 0x40
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	08018c74 	.word	0x08018c74

08002514 <_ZN15SystemAllocatorC1EjR13UtilityConfig>:
#include <cyphal/allocators/allocator.h>

class SystemAllocator : public AbstractAllocator {
public:
	// TODO: do something with size value?
	explicit SystemAllocator(size_t size, UtilityConfig& utilities): AbstractAllocator(size, utilities) {};
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff42 	bl	80023b0 <_ZN17AbstractAllocatorC1EjR13UtilityConfig>
 800252c:	4a03      	ldr	r2, [pc, #12]	@ (800253c <_ZN15SystemAllocatorC1EjR13UtilityConfig+0x28>)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	08018b58 	.word	0x08018b58

08002540 <_ZSt8isfinitef>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	ed87 0a01 	vstr	s0, [r7, #4]
 800254a:	edd7 7a01 	vldr	s15, [r7, #4]
 800254e:	eef0 7ae7 	vabs.f32	s15, s15
 8002552:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002584 <_ZSt8isfinitef+0x44>
 8002556:	eef4 7a47 	vcmp.f32	s15, s14
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	bf8c      	ite	hi
 8002560:	2301      	movhi	r3, #1
 8002562:	2300      	movls	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f083 0301 	eor.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	7f7fffff 	.word	0x7f7fffff

08002588 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d201      	bcs.n	800259e <nunavutChooseMin+0x16>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	e000      	b.n	80025a0 <nunavutChooseMin+0x18>
 800259e:	683b      	ldr	r3, [r7, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	6978      	ldr	r0, [r7, #20]
 80025c2:	f7ff ffe1 	bl	8002588 <nunavutChooseMin>
 80025c6:	4602      	mov	r2, r0
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80025ce:	6939      	ldr	r1, [r7, #16]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ffd9 	bl	8002588 <nunavutChooseMin>
 80025d6:	4603      	mov	r3, r0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b092      	sub	sp, #72	@ 0x48
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 80025ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d145      	bne.n	8002684 <nunavutCopyBits+0xa4>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d140      	bne.n	8002684 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	08db      	lsrs	r3, r3, #3
 8002606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8002608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800260a:	08db      	lsrs	r3, r3, #3
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	4413      	add	r3, r2
 8002610:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4413      	add	r3, r2
 800261a:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 800261c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800261e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002620:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002622:	f012 f9cc 	bl	80149be <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8002632:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 808a 	beq.w	8002750 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 800263c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800263e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002640:	4413      	add	r3, r2
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8002644:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002648:	4413      	add	r3, r2
 800264a:	62bb      	str	r3, [r7, #40]	@ 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 800264c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002650:	2201      	movs	r2, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 800265e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002666:	43db      	mvns	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4013      	ands	r3, r2
 800266c:	b2da      	uxtb	r2, r3
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	7819      	ldrb	r1, [r3, #0]
 8002672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002676:	400b      	ands	r3, r1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4313      	orrs	r3, r2
 800267c:	b2da      	uxtb	r2, r3
 800267e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002680:	701a      	strb	r2, [r3, #0]
        }
    }
 8002682:	e065      	b.n	8002750 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 800268c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800268e:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 8002694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 800269c:	e053      	b.n	8002746 <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 800269e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 80026a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 80026b2:	7dfa      	ldrb	r2, [r7, #23]
 80026b4:	7dbb      	ldrb	r3, [r7, #22]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d901      	bls.n	80026be <nunavutCopyBits+0xde>
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	e000      	b.n	80026c0 <nunavutCopyBits+0xe0>
 80026be:	7dbb      	ldrb	r3, [r7, #22]
 80026c0:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 80026c2:	7d7b      	ldrb	r3, [r7, #21]
 80026c4:	f1c3 0008 	rsb	r0, r3, #8
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7ff ff5a 	bl	8002588 <nunavutChooseMin>
 80026d4:	4603      	mov	r3, r0
 80026d6:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 80026d8:	7d3b      	ldrb	r3, [r7, #20]
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	7dbb      	ldrb	r3, [r7, #22]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 80026ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	6a3a      	ldr	r2, [r7, #32]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	fa42 f303 	asr.w	r3, r2, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	7dbb      	ldrb	r3, [r7, #22]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8002708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	43db      	mvns	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	4013      	ands	r3, r2
 800271a:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 800271c:	7cba      	ldrb	r2, [r7, #18]
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	4013      	ands	r3, r2
 8002722:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8002724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	7c79      	ldrb	r1, [r7, #17]
 800272e:	7c3a      	ldrb	r2, [r7, #16]
 8002730:	430a      	orrs	r2, r1
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
            src_off += size;
 8002736:	7d3b      	ldrb	r3, [r7, #20]
 8002738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800273a:	4413      	add	r3, r2
 800273c:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 800273e:	7d3b      	ldrb	r3, [r7, #20]
 8002740:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002742:	4413      	add	r3, r2
 8002744:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274a:	429a      	cmp	r2, r3
 800274c:	d8a7      	bhi.n	800269e <nunavutCopyBits+0xbe>
        }

    }
}
 800274e:	e000      	b.n	8002752 <nunavutCopyBits+0x172>
    }
 8002750:	bf00      	nop
}
 8002752:	bf00      	nop
 8002754:	3748      	adds	r7, #72	@ 0x48
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b088      	sub	sp, #32
 800275e:	af02      	add	r7, sp, #8
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	603b      	str	r3, [r7, #0]


    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8002768:	6a3a      	ldr	r2, [r7, #32]
 800276a:	6839      	ldr	r1, [r7, #0]
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff1d 	bl	80025ac <nunavutSaturateBufferFragmentBitLength>
 8002772:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	08db      	lsrs	r3, r3, #3
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	18d0      	adds	r0, r2, r3
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	3307      	adds	r3, #7
 8002780:	08da      	lsrs	r2, r3, #3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	08db      	lsrs	r3, r3, #3
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	461a      	mov	r2, r3
 800278a:	2100      	movs	r1, #0
 800278c:	f012 f931 	bl	80149f2 <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	2100      	movs	r1, #0
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff ff20 	bl	80025e0 <nunavutCopyBits>
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	00da      	lsls	r2, r3, #3
 80027b8:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	440b      	add	r3, r1
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d202      	bcs.n	80027ca <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80027c4:	f06f 0302 	mvn.w	r3, #2
 80027c8:	e010      	b.n	80027ec <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 80027ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80027ce:	2140      	movs	r1, #64	@ 0x40
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fed9 	bl	8002588 <nunavutChooseMin>
 80027d6:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 80027d8:	2300      	movs	r3, #0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f107 0320 	add.w	r3, r7, #32
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fefb 	bl	80025e0 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <nunavutGetU16>:

static inline uint16_t nunavutGetU16(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 16U));
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	2110      	movs	r1, #16
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff febe 	bl	8002588 <nunavutChooseMin>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68b8      	ldr	r0, [r7, #8]
 8002814:	f7ff feca 	bl	80025ac <nunavutSaturateBufferFragmentBitLength>
 8002818:	6178      	str	r0, [r7, #20]

    uint16_t val = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	827b      	strh	r3, [r7, #18]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 800281e:	f107 0012 	add.w	r0, r7, #18
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	2100      	movs	r1, #0
 800282c:	f7ff fed8 	bl	80025e0 <nunavutCopyBits>
    return val;
 8002830:	8a7b      	ldrh	r3, [r7, #18]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <nunavutGetU32>:

static inline uint32_t nunavutGetU32(const uint8_t* const buf,
                                     const size_t buf_size_bytes,
                                     const size_t off_bits,
                                     const uint8_t len_bits)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b088      	sub	sp, #32
 800283e:	af02      	add	r7, sp, #8
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	70fb      	strb	r3, [r7, #3]

    const size_t bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, nunavutChooseMin(len_bits, 32U));
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	2120      	movs	r1, #32
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fe9b 	bl	8002588 <nunavutChooseMin>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68b8      	ldr	r0, [r7, #8]
 800285a:	f7ff fea7 	bl	80025ac <nunavutSaturateBufferFragmentBitLength>
 800285e:	6178      	str	r0, [r7, #20]

    uint32_t val = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
    nunavutCopyBits(&val, 0U, bits, buf, off_bits);
 8002864:	f107 0010 	add.w	r0, r7, #16
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	2100      	movs	r1, #0
 8002872:	f7ff feb5 	bl	80025e0 <nunavutCopyBits>
    return val;
 8002876:	693b      	ldr	r3, [r7, #16]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <nunavutFloat16Pack>:
              "The target platform does not support IEEE754 floating point operations.");
static_assert(32U == (sizeof(float) * 8U), "Unsupported floating point model");

/// Converts a single-precision float into the binary representation of the value as a half-precision IEEE754 value.
static inline uint16_t nunavutFloat16Pack(const float value)
{
 8002880:	b480      	push	{r7}
 8002882:	b08b      	sub	sp, #44	@ 0x2c
 8002884:	af00      	add	r7, sp, #0
 8002886:	ed87 0a01 	vstr	s0, [r7, #4]
        uint32_t bits;
        float real;
    } Float32Bits;

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    const uint32_t round_mask = ~(uint32_t) 0x0FFFU;
 800288a:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <nunavutFloat16Pack+0xb8>)
 800288c:	623b      	str	r3, [r7, #32]
    Float32Bits    f32inf;  // NOSONAR
    Float32Bits    f16inf;  // NOSONAR
    Float32Bits    magic;   // NOSONAR
    Float32Bits    in;      // NOSONAR
    f32inf.bits = ((uint32_t) 255U) << 23U;
 800288e:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8002892:	61bb      	str	r3, [r7, #24]
    f16inf.bits = ((uint32_t) 31U) << 23U;
 8002894:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 8002898:	617b      	str	r3, [r7, #20]
    magic.bits = ((uint32_t) 15U) << 23U;
 800289a:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 800289e:	613b      	str	r3, [r7, #16]
    in.real = value;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60fb      	str	r3, [r7, #12]
    const uint32_t sign = in.bits & (((uint32_t) 1U) << 31U);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028aa:	61fb      	str	r3, [r7, #28]
    in.bits ^= sign;
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4053      	eors	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
    uint16_t out = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (in.bits >= f32inf.bits)
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d313      	bcc.n	80028e8 <nunavutFloat16Pack+0x68>
    {
        if ((in.bits & 0x7FFFFFUL) != 0)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <nunavutFloat16Pack+0x52>
        {
            out = 0x7E00U;
 80028ca:	f44f 43fc 	mov.w	r3, #32256	@ 0x7e00
 80028ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80028d0:	e025      	b.n	800291e <nunavutFloat16Pack+0x9e>
        }
        else
        {
            out = (in.bits > f32inf.bits) ? (uint16_t) 0x7FFFU : (uint16_t) 0x7C00U;
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d902      	bls.n	80028e0 <nunavutFloat16Pack+0x60>
 80028da:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80028de:	e001      	b.n	80028e4 <nunavutFloat16Pack+0x64>
 80028e0:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 80028e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80028e6:	e01a      	b.n	800291e <nunavutFloat16Pack+0x9e>
        }
    }
    else
    {
        in.bits &= round_mask;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80028ee:	f023 030f 	bic.w	r3, r3, #15
 80028f2:	60fb      	str	r3, [r7, #12]
        in.real *= magic.real;
 80028f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80028f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	edc7 7a03 	vstr	s15, [r7, #12]
        in.bits -= round_mask;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800290a:	60fb      	str	r3, [r7, #12]
        if (in.bits > f16inf.bits)
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	d901      	bls.n	8002918 <nunavutFloat16Pack+0x98>
        {
            in.bits = f16inf.bits;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	60fb      	str	r3, [r7, #12]
        }
        out = (uint16_t)(in.bits >> 13U);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	0b5b      	lsrs	r3, r3, #13
 800291c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    out |= (uint16_t)(sign >> 16U);
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	b29a      	uxth	r2, r3
 8002924:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002926:	4313      	orrs	r3, r2
 8002928:	84fb      	strh	r3, [r7, #38]	@ 0x26
    return out;
 800292a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 800292c:	4618      	mov	r0, r3
 800292e:	372c      	adds	r7, #44	@ 0x2c
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	fffff000 	.word	0xfffff000

0800293c <nunavutFloat16Unpack>:

static inline float nunavutFloat16Unpack(const uint16_t value)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]

    // The no-lint statements suppress the warning about the use of union. This is required for low-level bit access.
    Float32Bits magic;    // NOSONAR
    Float32Bits inf_nan;  // NOSONAR
    Float32Bits out;      // NOSONAR
    magic.bits = ((uint32_t) 0xEFU) << 23U;
 8002946:	f04f 43ef 	mov.w	r3, #2004877312	@ 0x77800000
 800294a:	617b      	str	r3, [r7, #20]
    inf_nan.bits = ((uint32_t) 0x8FU) << 23U;
 800294c:	f04f 438f 	mov.w	r3, #1199570944	@ 0x47800000
 8002950:	613b      	str	r3, [r7, #16]
    out.bits = ((uint32_t)(value & 0x7FFFU)) << 13U;
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	035a      	lsls	r2, r3, #13
 8002956:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <nunavutFloat16Unpack+0x6c>)
 8002958:	4013      	ands	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
    out.real *= magic.real;
 800295c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002960:	edd7 7a05 	vldr	s15, [r7, #20]
 8002964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002968:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.real >= inf_nan.real)
 800296c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002970:	edd7 7a04 	vldr	s15, [r7, #16]
 8002974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	db03      	blt.n	8002986 <nunavutFloat16Unpack+0x4a>
    {
        out.bits |= ((uint32_t) 0xFFU) << 23U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
 8002984:	60fb      	str	r3, [r7, #12]
    }
    out.bits |= ((uint32_t)(value & 0x8000U)) << 16U;
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	041b      	lsls	r3, r3, #16
 800298c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
    return out.real;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	ee07 3a90 	vmov	s15, r3
}
 800299a:	eeb0 0a67 	vmov.f32	s0, s15
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	0fffe000 	.word	0x0fffe000

080029ac <nunavutGetF16>:

static inline float nunavutGetF16(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
    return nunavutFloat16Unpack(nunavutGetU16(buf, buf_size_bytes, off_bits, 16U));
 80029b8:	2310      	movs	r3, #16
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7ff ff18 	bl	80027f4 <nunavutGetU16>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ffb8 	bl	800293c <nunavutFloat16Unpack>
 80029cc:	eef0 7a40 	vmov.f32	s15, s0
}
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <nunavutGetF32>:

static inline float nunavutGetF32(
    const uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
    // clear. In the future we may add a more generic conversion that is platform-invariant.
    union  // NOSONAR
    {
        uint32_t in;
        float fl;
    } const tmp = {nunavutGetU32(buf, buf_size_bytes, off_bits, 32U)};
 80029e6:	2320      	movs	r3, #32
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7ff ff24 	bl	800283a <nunavutGetU32>
 80029f2:	4603      	mov	r3, r0
 80029f4:	617b      	str	r3, [r7, #20]
    return tmp.fl;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	ee07 3a90 	vmov	s15, r3
}
 80029fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b08c      	sub	sp, #48	@ 0x30
 8002a0a:	af04      	add	r7, sp, #16
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <uavcan_node_Health_1_0_serialize_+0x1e>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <uavcan_node_Health_1_0_serialize_+0x1e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002a24:	f06f 0301 	mvn.w	r3, #1
 8002a28:	e048      	b.n	8002abc <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	2b07      	cmp	r3, #7
 8002a36:	d802      	bhi.n	8002a3e <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002a38:	f06f 0302 	mvn.w	r3, #2
 8002a3c:	e03e      	b.n	8002abc <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8002a48:	7efb      	ldrb	r3, [r7, #27]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d901      	bls.n	8002a52 <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4413      	add	r3, r2
 8002a5a:	7efa      	ldrb	r2, [r7, #27]
 8002a5c:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3302      	adds	r3, #2
 8002a62:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d021      	beq.n	8002ab2 <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f1c3 0308 	rsb	r3, r3, #8
 8002a7c:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	6979      	ldr	r1, [r7, #20]
 8002a92:	68b8      	ldr	r0, [r7, #8]
 8002a94:	f7ff fe88 	bl	80027a8 <nunavutSetUxx>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002a9c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	da02      	bge.n	8002aaa <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002aa4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002aa8:	e008      	b.n	8002abc <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <uavcan_node_Health_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_deserialize_(
    uavcan_node_Health_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <uavcan_node_Health_1_0_deserialize_+0x26>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <uavcan_node_Health_1_0_deserialize_+0x26>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <uavcan_node_Health_1_0_deserialize_+0x2c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <uavcan_node_Health_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002aea:	f06f 0301 	mvn.w	r3, #1
 8002aee:	e030      	b.n	8002b52 <uavcan_node_Health_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <uavcan_node_Health_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <uavcan_node_Health_1_0_deserialize_+0x98>)
 8002af8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]



    // saturated uint2 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 2U) <= capacity_bits)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d30a      	bcc.n	8002b2a <uavcan_node_Health_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 3U;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	08db      	lsrs	r3, r3, #3
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e002      	b.n	8002b30 <uavcan_node_Health_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 2U;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3302      	adds	r3, #2
 8002b34:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3307      	adds	r3, #7
 8002b3a:	f023 0307 	bic.w	r3, r3, #7
 8002b3e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002b40:	69b9      	ldr	r1, [r7, #24]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff fd20 	bl	8002588 <nunavutChooseMin>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	08018a20 	.word	0x08018a20

08002b60 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	@ 0x30
 8002b64:	af04      	add	r7, sp, #16
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <uavcan_node_Mode_1_0_serialize_+0x1e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b7e:	f06f 0301 	mvn.w	r3, #1
 8002b82:	e048      	b.n	8002c16 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	2b07      	cmp	r3, #7
 8002b90:	d802      	bhi.n	8002b98 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002b92:	f06f 0302 	mvn.w	r3, #2
 8002b96:	e03e      	b.n	8002c16 <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8002ba2:	7efb      	ldrb	r3, [r7, #27]
 8002ba4:	2b07      	cmp	r3, #7
 8002ba6:	d901      	bls.n	8002bac <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8002ba8:	2307      	movs	r3, #7
 8002baa:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	08db      	lsrs	r3, r3, #3
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	7efa      	ldrb	r2, [r7, #27]
 8002bb6:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3303      	adds	r3, #3
 8002bbc:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d021      	beq.n	8002c0c <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f1c3 0308 	rsb	r3, r3, #8
 8002bd6:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9cd 2300 	strd	r2, r3, [sp]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	6979      	ldr	r1, [r7, #20]
 8002bec:	68b8      	ldr	r0, [r7, #8]
 8002bee:	f7ff fddb 	bl	80027a8 <nunavutSetUxx>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002bf6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da02      	bge.n	8002c04 <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 8002bfe:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002c02:	e008      	b.n	8002c16 <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	08da      	lsrs	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <uavcan_node_Mode_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_deserialize_(
    uavcan_node_Mode_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <uavcan_node_Mode_1_0_deserialize_+0x26>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <uavcan_node_Mode_1_0_deserialize_+0x2c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <uavcan_node_Mode_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002c46:	f06f 0301 	mvn.w	r3, #1
 8002c4a:	e030      	b.n	8002cae <uavcan_node_Mode_1_0_deserialize_+0x8e>
    }
    if (buffer == NULL)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <uavcan_node_Mode_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <uavcan_node_Mode_1_0_deserialize_+0x98>)
 8002c54:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]



    // saturated uint3 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 3U) <= capacity_bits)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3303      	adds	r3, #3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d30a      	bcc.n	8002c86 <uavcan_node_Mode_1_0_deserialize_+0x66>
    {
        out_obj->value = buffer[offset_bits / 8U] & 7U;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	08db      	lsrs	r3, r3, #3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e002      	b.n	8002c8c <uavcan_node_Mode_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
    }
    offset_bits += 3U;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3303      	adds	r3, #3
 8002c90:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3307      	adds	r3, #7
 8002c96:	f023 0307 	bic.w	r3, r3, #7
 8002c9a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002c9c:	69b9      	ldr	r1, [r7, #24]
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7ff fc72 	bl	8002588 <nunavutChooseMin>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	08018a20 	.word	0x08018a20

08002cbc <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	@ 0x38
 8002cc0:	af04      	add	r7, sp, #16
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002cda:	f06f 0301 	mvn.w	r3, #1
 8002cde:	e0cf      	b.n	8002e80 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	2b37      	cmp	r3, #55	@ 0x37
 8002cec:	d802      	bhi.n	8002cf4 <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002cee:	f06f 0302 	mvn.w	r3, #2
 8002cf2:	e0c5      	b.n	8002e80 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	08db      	lsrs	r3, r3, #3
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	4413      	add	r3, r2
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	3320      	adds	r3, #32
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d021      	beq.n	8002d5a <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f1c3 0308 	rsb	r3, r3, #8
 8002d24:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002d26:	7ffb      	ldrb	r3, [r7, #31]
 8002d28:	9302      	str	r3, [sp, #8]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9cd 2300 	strd	r2, r3, [sp]
 8002d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d38:	6a39      	ldr	r1, [r7, #32]
 8002d3a:	68b8      	ldr	r0, [r7, #8]
 8002d3c:	f7ff fd34 	bl	80027a8 <nunavutSetUxx>
 8002d40:	4603      	mov	r3, r0
 8002d42:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8002d44:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	da02      	bge.n	8002d52 <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8002d4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002d50:	e096      	b.n	8002e80 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
 8002d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d56:	4413      	add	r3, r2
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f107 0214 	add.w	r2, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7ff fe49 	bl	8002a06 <uavcan_node_Health_1_0_serialize_>
 8002d74:	4603      	mov	r3, r0
 8002d76:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8002d78:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	da02      	bge.n	8002d86 <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8002d80:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d84:	e07c      	b.n	8002e80 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8c:	4413      	add	r3, r2
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d021      	beq.n	8002dde <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f1c3 0308 	rsb	r3, r3, #8
 8002da8:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8002daa:	7f3b      	ldrb	r3, [r7, #28]
 8002dac:	9302      	str	r3, [sp, #8]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9cd 2300 	strd	r2, r3, [sp]
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	68b8      	ldr	r0, [r7, #8]
 8002dc0:	f7ff fcf2 	bl	80027a8 <nunavutSetUxx>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8002dc8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da02      	bge.n	8002dd6 <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8002dd0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dd4:	e054      	b.n	8002e80 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8002dd6:	7f3b      	ldrb	r3, [r7, #28]
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dda:	4413      	add	r3, r2
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8002dde:	2301      	movs	r3, #1
 8002de0:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4413      	add	r3, r2
 8002dee:	f107 0210 	add.w	r2, r7, #16
 8002df2:	4619      	mov	r1, r3
 8002df4:	f7ff feb4 	bl	8002b60 <uavcan_node_Mode_1_0_serialize_>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8002dfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da02      	bge.n	8002e0a <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8002e04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002e08:	e03a      	b.n	8002e80 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e10:	4413      	add	r3, r2
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	7992      	ldrb	r2, [r2, #6]
 8002e20:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	3308      	adds	r3, #8
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d021      	beq.n	8002e76 <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f1c3 0308 	rsb	r3, r3, #8
 8002e40:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8002e42:	7e7b      	ldrb	r3, [r7, #25]
 8002e44:	9302      	str	r3, [sp, #8]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e54:	6a39      	ldr	r1, [r7, #32]
 8002e56:	68b8      	ldr	r0, [r7, #8]
 8002e58:	f7ff fca6 	bl	80027a8 <nunavutSetUxx>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8002e60:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	da02      	bge.n	8002e6e <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8002e68:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e6c:	e008      	b.n	8002e80 <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8002e6e:	7e7b      	ldrb	r3, [r7, #25]
 8002e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e72:	4413      	add	r3, r2
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3728      	adds	r7, #40	@ 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <uavcan_node_Heartbeat_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_deserialize_(
    uavcan_node_Heartbeat_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d006      	beq.n	8002eae <uavcan_node_Heartbeat_1_0_deserialize_+0x26>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <uavcan_node_Heartbeat_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002eae:	f06f 0301 	mvn.w	r3, #1
 8002eb2:	e089      	b.n	8002fc8 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
    }
    if (buffer == NULL)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <uavcan_node_Heartbeat_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8002eba:	4b45      	ldr	r3, [pc, #276]	@ (8002fd0 <uavcan_node_Heartbeat_1_0_deserialize_+0x148>)
 8002ebc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]



    // saturated uint32 uptime
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->uptime = nunavutGetU32(&buffer[0], capacity_bytes, offset_bits, 32);
 8002ece:	2320      	movs	r3, #32
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ed4:	68b8      	ldr	r0, [r7, #8]
 8002ed6:	f7ff fcb0 	bl	800283a <nunavutGetU32>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	601a      	str	r2, [r3, #0]
    offset_bits += 32U;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3320      	adds	r3, #32
 8002ee4:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3307      	adds	r3, #7
 8002eea:	f023 0307 	bic.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Health.1.0 health
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fb46 	bl	8002588 <nunavutChooseMin>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1d18      	adds	r0, r3, #4
            &out_obj->health, &buffer[offset_bits / 8U], &_size_bytes2_);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_node_Health_1_0_deserialize_(
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f107 0214 	add.w	r2, r7, #20
 8002f14:	4619      	mov	r1, r3
 8002f16:	f7ff fdd5 	bl	8002ac4 <uavcan_node_Health_1_0_deserialize_>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	76fb      	strb	r3, [r7, #27]
        if (_err5_ < 0)
 8002f1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	da02      	bge.n	8002f2c <uavcan_node_Heartbeat_1_0_deserialize_+0xa4>
        {
            return _err5_;
 8002f26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f2a:	e04d      	b.n	8002fc8 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	4413      	add	r3, r2
 8002f34:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3307      	adds	r3, #7
 8002f3a:	f023 0307 	bic.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]

    // uavcan.node.Mode.1.0 mode
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	08db      	lsrs	r3, r3, #3
 8002f44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fb1e 	bl	8002588 <nunavutChooseMin>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1d58      	adds	r0, r3, #5
            &out_obj->mode, &buffer[offset_bits / 8U], &_size_bytes3_);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_node_Mode_1_0_deserialize_(
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f107 0210 	add.w	r2, r7, #16
 8002f64:	4619      	mov	r1, r3
 8002f66:	f7ff fe5b 	bl	8002c20 <uavcan_node_Mode_1_0_deserialize_>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	76bb      	strb	r3, [r7, #26]
        if (_err6_ < 0)
 8002f6e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da02      	bge.n	8002f7c <uavcan_node_Heartbeat_1_0_deserialize_+0xf4>
        {
            return _err6_;
 8002f76:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002f7a:	e025      	b.n	8002fc8 <uavcan_node_Heartbeat_1_0_deserialize_+0x140>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	4413      	add	r3, r2
 8002f84:	61fb      	str	r3, [r7, #28]



    // saturated uint8 vendor_specific_status_code
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    if ((offset_bits + 8U) <= capacity_bits)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3308      	adds	r3, #8
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d307      	bcc.n	8002fa0 <uavcan_node_Heartbeat_1_0_deserialize_+0x118>
    {
        out_obj->vendor_specific_status_code = buffer[offset_bits / 8U] & 255U;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	08db      	lsrs	r3, r3, #3
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	4413      	add	r3, r2
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	719a      	strb	r2, [r3, #6]
 8002f9e:	e002      	b.n	8002fa6 <uavcan_node_Heartbeat_1_0_deserialize_+0x11e>
    }
    else
    {
        out_obj->vendor_specific_status_code = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	719a      	strb	r2, [r3, #6]
    }
    offset_bits += 8U;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3308      	adds	r3, #8
 8002faa:	61fb      	str	r3, [r7, #28]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	3307      	adds	r3, #7
 8002fb0:	f023 0307 	bic.w	r3, r3, #7
 8002fb4:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8002fb6:	6a39      	ldr	r1, [r7, #32]
 8002fb8:	69f8      	ldr	r0, [r7, #28]
 8002fba:	f7ff fae5 	bl	8002588 <nunavutChooseMin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	08da      	lsrs	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3728      	adds	r7, #40	@ 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	08018a20 	.word	0x08018a20

08002fd4 <uavcan_si_unit_angle_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_serialize_(
    const uavcan_si_unit_angle_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	@ 0x30
 8002fd8:	af04      	add	r7, sp, #16
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002ff2:	f06f 0301 	mvn.w	r3, #1
 8002ff6:	e041      	b.n	800307c <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	2b1f      	cmp	r3, #31
 8003004:	d802      	bhi.n	800300c <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003006:	f06f 0302 	mvn.w	r3, #2
 800300a:	e037      	b.n	800307c <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian, 4U);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	08db      	lsrs	r3, r3, #3
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	4413      	add	r3, r2
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3320      	adds	r3, #32
 8003022:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	2b00      	cmp	r3, #0
 800302c:	d021      	beq.n	8003072 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f1c3 0308 	rsb	r3, r3, #8
 800303c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	9302      	str	r3, [sp, #8]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9cd 2300 	strd	r2, r3, [sp]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	69b9      	ldr	r1, [r7, #24]
 8003052:	68b8      	ldr	r0, [r7, #8]
 8003054:	f7ff fba8 	bl	80027a8 <nunavutSetUxx>
 8003058:	4603      	mov	r3, r0
 800305a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800305c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003060:	2b00      	cmp	r3, #0
 8003062:	da02      	bge.n	800306a <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8003064:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003068:	e008      	b.n	800307c <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	4413      	add	r3, r2
 8003070:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_deserialize_(
    uavcan_si_unit_angle_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x26>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80030aa:	f06f 0301 	mvn.w	r3, #1
 80030ae:	e027      	b.n	8003100 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80030b6:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <uavcan_si_unit_angle_Scalar_1_0_deserialize_+0x84>)
 80030b8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]



    // saturated float32 radian
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	69f9      	ldr	r1, [r7, #28]
 80030ce:	68b8      	ldr	r0, [r7, #8]
 80030d0:	f7ff fc83 	bl	80029da <nunavutGetF32>
 80030d4:	eef0 7a40 	vmov.f32	s15, s0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3320      	adds	r3, #32
 80030e2:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3307      	adds	r3, #7
 80030e8:	f023 0307 	bic.w	r3, r3, #7
 80030ec:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	6978      	ldr	r0, [r7, #20]
 80030f2:	f7ff fa49 	bl	8002588 <nunavutChooseMin>
 80030f6:	4603      	mov	r3, r0
 80030f8:	08da      	lsrs	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	08018a20 	.word	0x08018a20

0800310c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_acceleration_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08c      	sub	sp, #48	@ 0x30
 8003110:	af04      	add	r7, sp, #16
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800312a:	f06f 0301 	mvn.w	r3, #1
 800312e:	e041      	b.n	80031b4 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	2b1f      	cmp	r3, #31
 800313c:	d802      	bhi.n	8003144 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800313e:	f06f 0302 	mvn.w	r3, #2
 8003142:	e037      	b.n	80031b4 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second_per_second, 4U);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	08db      	lsrs	r3, r3, #3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	4413      	add	r3, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3320      	adds	r3, #32
 800315a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	2b00      	cmp	r3, #0
 8003164:	d021      	beq.n	80031aa <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f1c3 0308 	rsb	r3, r3, #8
 8003174:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	9302      	str	r3, [sp, #8]
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9cd 2300 	strd	r2, r3, [sp]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	69b9      	ldr	r1, [r7, #24]
 800318a:	68b8      	ldr	r0, [r7, #8]
 800318c:	f7ff fb0c 	bl	80027a8 <nunavutSetUxx>
 8003190:	4603      	mov	r3, r0
 8003192:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003194:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003198:	2b00      	cmp	r3, #0
 800319a:	da02      	bge.n	80031a2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 800319c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031a0:	e008      	b.n	80031b4 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	08da      	lsrs	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_acceleration_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d006      	beq.n	80031e2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x26>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80031e2:	f06f 0301 	mvn.w	r3, #1
 80031e6:	e027      	b.n	8003238 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80031ee:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_+0x84>)
 80031f0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	69f9      	ldr	r1, [r7, #28]
 8003206:	68b8      	ldr	r0, [r7, #8]
 8003208:	f7ff fbe7 	bl	80029da <nunavutGetF32>
 800320c:	eef0 7a40 	vmov.f32	s15, s0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3320      	adds	r3, #32
 800321a:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3307      	adds	r3, #7
 8003220:	f023 0307 	bic.w	r3, r3, #7
 8003224:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	6978      	ldr	r0, [r7, #20]
 800322a:	f7ff f9ad 	bl	8002588 <nunavutChooseMin>
 800322e:	4603      	mov	r3, r0
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	08018a20 	.word	0x08018a20

08003244 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	@ 0x30
 8003248:	af04      	add	r7, sp, #16
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003262:	f06f 0301 	mvn.w	r3, #1
 8003266:	e041      	b.n	80032ec <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	2b1f      	cmp	r3, #31
 8003274:	d802      	bhi.n	800327c <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003276:	f06f 0302 	mvn.w	r3, #2
 800327a:	e037      	b.n	80032ec <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second, 4U);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	08db      	lsrs	r3, r3, #3
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	4413      	add	r3, r2
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3320      	adds	r3, #32
 8003292:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	2b00      	cmp	r3, #0
 800329c:	d021      	beq.n	80032e2 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f1c3 0308 	rsb	r3, r3, #8
 80032ac:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9cd 2300 	strd	r2, r3, [sp]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	69b9      	ldr	r1, [r7, #24]
 80032c2:	68b8      	ldr	r0, [r7, #8]
 80032c4:	f7ff fa70 	bl	80027a8 <nunavutSetUxx>
 80032c8:	4603      	mov	r3, r0
 80032ca:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80032cc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da02      	bge.n	80032da <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 80032d4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80032d8:	e008      	b.n	80032ec <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	4413      	add	r3, r2
 80032e0:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
    uavcan_si_unit_angular_velocity_Scalar_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x26>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800331a:	f06f 0301 	mvn.w	r3, #1
 800331e:	e027      	b.n	8003370 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x7c>
    }
    if (buffer == NULL)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003326:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_+0x84>)
 8003328:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]



    // saturated float32 radian_per_second
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    out_obj->radian_per_second = nunavutGetF32(&buffer[0], capacity_bytes, offset_bits);
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	69f9      	ldr	r1, [r7, #28]
 800333e:	68b8      	ldr	r0, [r7, #8]
 8003340:	f7ff fb4b 	bl	80029da <nunavutGetF32>
 8003344:	eef0 7a40 	vmov.f32	s15, s0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	edc3 7a00 	vstr	s15, [r3]
    offset_bits += 32U;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3320      	adds	r3, #32
 8003352:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3307      	adds	r3, #7
 8003358:	f023 0307 	bic.w	r3, r3, #7
 800335c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800335e:	69b9      	ldr	r1, [r7, #24]
 8003360:	6978      	ldr	r0, [r7, #20]
 8003362:	f7ff f911 	bl	8002588 <nunavutChooseMin>
 8003366:	4603      	mov	r3, r0
 8003368:	08da      	lsrs	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	08018a20 	.word	0x08018a20

0800337c <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_(
    const reg_udral_physics_kinematics_rotation_Planar_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b090      	sub	sp, #64	@ 0x40
 8003380:	af04      	add	r7, sp, #16
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800339a:	f06f 0301 	mvn.w	r3, #1
 800339e:	e0e4      	b.n	800356a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if ((8U * (size_t) capacity_bytes) < 96UL)
 80033a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	2b5f      	cmp	r3, #95	@ 0x5f
 80033ac:	d802      	bhi.n	80033b4 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80033ae:	f06f 0302 	mvn.w	r3, #2
 80033b2:	e0da      	b.n	800356a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angle.Scalar.1.0 angular_position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 4UL;  // Nested object (max) size, in bytes.
 80033b8:	2304      	movs	r3, #4
 80033ba:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 80033bc:	68f8      	ldr	r0, [r7, #12]
            &obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes0_);
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	4413      	add	r3, r2
 80033c6:	f107 0218 	add.w	r2, r7, #24
 80033ca:	4619      	mov	r1, r3
 80033cc:	f7ff fe02 	bl	8002fd4 <uavcan_si_unit_angle_Scalar_1_0_serialize_>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (_err0_ < 0)
 80033d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da02      	bge.n	80033e4 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x68>
        {
            return _err0_;
 80033de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033e2:	e0c2      	b.n	800356a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 32ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ea:	4413      	add	r3, r2
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80033ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d025      	beq.n	8003444 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xc8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80033f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f1c3 0308 	rsb	r3, r3, #8
 8003406:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800340a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800340e:	9302      	str	r3, [sp, #8]
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9cd 2300 	strd	r2, r3, [sp]
 800341c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800341e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003420:	68b8      	ldr	r0, [r7, #8]
 8003422:	f7ff f9c1 	bl	80027a8 <nunavutSetUxx>
 8003426:	4603      	mov	r3, r0
 8003428:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (_err1_ < 0)
 800342c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003430:	2b00      	cmp	r3, #0
 8003432:	da02      	bge.n	800343a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xbe>
        {
            return _err1_;
 8003434:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003438:	e097      	b.n	800356a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad0_;
 800343a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800343e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003440:	4413      	add	r3, r2
 8003442:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 4UL;  // Nested object (max) size, in bytes.
 8003444:	2304      	movs	r3, #4
 8003446:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1d18      	adds	r0, r3, #4
            &obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes1_);
 800344c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344e:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	4413      	add	r3, r2
 8003454:	f107 0214 	add.w	r2, r7, #20
 8003458:	4619      	mov	r1, r3
 800345a:	f7ff fef3 	bl	8003244 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (_err2_ < 0)
 8003464:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8003468:	2b00      	cmp	r3, #0
 800346a:	da02      	bge.n	8003472 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xf6>
        {
            return _err2_;
 800346c:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8003470:	e07b      	b.n	800356a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 32ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003478:	4413      	add	r3, r2
 800347a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	2b00      	cmp	r3, #0
 8003484:	d025      	beq.n	80034d2 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x156>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8003486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f1c3 0308 	rsb	r3, r3, #8
 8003494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8003498:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800349c:	9302      	str	r3, [sp, #8]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9cd 2300 	strd	r2, r3, [sp]
 80034aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ae:	68b8      	ldr	r0, [r7, #8]
 80034b0:	f7ff f97a 	bl	80027a8 <nunavutSetUxx>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err3_ < 0)
 80034ba:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da02      	bge.n	80034c8 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x14c>
        {
            return _err3_;
 80034c2:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80034c6:	e050      	b.n	800356a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad1_;
 80034c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ce:	4413      	add	r3, r2
 80034d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 4UL;  // Nested object (max) size, in bytes.
 80034d2:	2304      	movs	r3, #4
 80034d4:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f103 0008 	add.w	r0, r3, #8
            &obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes2_);
 80034dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034de:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	4413      	add	r3, r2
 80034e4:	f107 0210 	add.w	r2, r7, #16
 80034e8:	4619      	mov	r1, r3
 80034ea:	f7ff fe0f 	bl	800310c <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err4_ < 0)
 80034f4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da02      	bge.n	8003502 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x186>
        {
            return _err4_;
 80034fc:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003500:	e033      	b.n	800356a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 32ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003508:	4413      	add	r3, r2
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800350c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	2b00      	cmp	r3, #0
 8003514:	d024      	beq.n	8003560 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8003516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f1c3 0308 	rsb	r3, r3, #8
 8003524:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8003528:	f897 3020 	ldrb.w	r3, [r7, #32]
 800352c:	9302      	str	r3, [sp, #8]
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9cd 2300 	strd	r2, r3, [sp]
 800353a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800353c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800353e:	68b8      	ldr	r0, [r7, #8]
 8003540:	f7ff f932 	bl	80027a8 <nunavutSetUxx>
 8003544:	4603      	mov	r3, r0
 8003546:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 8003548:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800354c:	2b00      	cmp	r3, #0
 800354e:	da02      	bge.n	8003556 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1da>
        {
            return _err5_;
 8003550:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003554:	e009      	b.n	800356a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad2_;
 8003556:	f897 3020 	ldrb.w	r3, [r7, #32]
 800355a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800355c:	4413      	add	r3, r2
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003562:	08da      	lsrs	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3730      	adds	r7, #48	@ 0x30
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_(
    reg_udral_physics_kinematics_rotation_Planar_0_1* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08c      	sub	sp, #48	@ 0x30
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d006      	beq.n	800359a <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x26>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800359a:	f06f 0301 	mvn.w	r3, #1
 800359e:	e090      	b.n	80036c2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
    }
    if (buffer == NULL)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80035a6:	4b49      	ldr	r3, [pc, #292]	@ (80036cc <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x158>)
 80035a8:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80035b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t offset_bits = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angle.Scalar.1.0 angular_position
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	08db      	lsrs	r3, r3, #3
 80035be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe ffe1 	bl	8002588 <nunavutChooseMin>
 80035c6:	4602      	mov	r2, r0
 80035c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80035ce:	68f8      	ldr	r0, [r7, #12]
            &out_obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes3_);
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	08db      	lsrs	r3, r3, #3
        const int8_t _err6_ = uavcan_si_unit_angle_Scalar_1_0_deserialize_(
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	4413      	add	r3, r2
 80035d8:	f107 021c 	add.w	r2, r7, #28
 80035dc:	4619      	mov	r1, r3
 80035de:	f7ff fd51 	bl	8003084 <uavcan_si_unit_angle_Scalar_1_0_deserialize_>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (_err6_ < 0)
 80035e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da02      	bge.n	80035f6 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x82>
        {
            return _err6_;
 80035f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80035f4:	e065      	b.n	80036c2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fc:	4413      	add	r3, r2
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	3307      	adds	r3, #7
 8003604:	f023 0307 	bic.w	r3, r3, #7
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes4_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	08db      	lsrs	r3, r3, #3
 800360e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe ffb9 	bl	8002588 <nunavutChooseMin>
 8003616:	4602      	mov	r2, r0
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1d18      	adds	r0, r3, #4
            &out_obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes4_);
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	08db      	lsrs	r3, r3, #3
        const int8_t _err7_ = uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_(
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	4413      	add	r3, r2
 800362a:	f107 0218 	add.w	r2, r7, #24
 800362e:	4619      	mov	r1, r3
 8003630:	f7ff fe60 	bl	80032f4 <uavcan_si_unit_angular_velocity_Scalar_1_0_deserialize_>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err7_ < 0)
 800363a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800363e:	2b00      	cmp	r3, #0
 8003640:	da02      	bge.n	8003648 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0xd4>
        {
            return _err7_;
 8003642:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003646:	e03c      	b.n	80036c2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested serialized representation.
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364e:	4413      	add	r3, r2
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	3307      	adds	r3, #7
 8003656:	f023 0307 	bic.w	r3, r3, #7
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24

    // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes5_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	08db      	lsrs	r3, r3, #3
 8003660:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe ff90 	bl	8002588 <nunavutChooseMin>
 8003668:	4602      	mov	r2, r0
 800366a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f103 0008 	add.w	r0, r3, #8
            &out_obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes5_);
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	08db      	lsrs	r3, r3, #3
        const int8_t _err8_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_(
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4413      	add	r3, r2
 800367e:	f107 0214 	add.w	r2, r7, #20
 8003682:	4619      	mov	r1, r3
 8003684:	f7ff fd9a 	bl	80031bc <uavcan_si_unit_angular_acceleration_Scalar_1_0_deserialize_>
 8003688:	4603      	mov	r3, r0
 800368a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err8_ < 0)
 800368e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003692:	2b00      	cmp	r3, #0
 8003694:	da02      	bge.n	800369c <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x128>
        {
            return _err8_;
 8003696:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800369a:	e012      	b.n	80036c2 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_+0x14e>
        }
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested serialized representation.
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a2:	4413      	add	r3, r2
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	3307      	adds	r3, #7
 80036aa:	f023 0307 	bic.w	r3, r3, #7
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80036b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036b4:	f7fe ff68 	bl	8002588 <nunavutChooseMin>
 80036b8:	4603      	mov	r3, r0
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3730      	adds	r7, #48	@ 0x30
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	08018a20 	.word	0x08018a20

080036d0 <uavcan_register_Name_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Name_1_0_deserialize_(
    uavcan_register_Name_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <uavcan_register_Name_1_0_deserialize_+0x26>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <uavcan_register_Name_1_0_deserialize_+0x26>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <uavcan_register_Name_1_0_deserialize_+0x2c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <uavcan_register_Name_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80036f6:	f06f 0301 	mvn.w	r3, #1
 80036fa:	e04a      	b.n	8003792 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <uavcan_register_Name_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003702:	4b26      	ldr	r3, [pc, #152]	@ (800379c <uavcan_register_Name_1_0_deserialize_+0xcc>)
 8003704:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=255] name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3308      	adds	r3, #8
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	429a      	cmp	r2, r3
 800371e:	d309      	bcc.n	8003734 <uavcan_register_Name_1_0_deserialize_+0x64>
    {
        out_obj->name.count = buffer[offset_bits / 8U] & 255U;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	08db      	lsrs	r3, r3, #3
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	4413      	add	r3, r2
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003732:	e003      	b.n	800373c <uavcan_register_Name_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->name.count = 0U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3308      	adds	r3, #8
 8003740:	617b      	str	r3, [r7, #20]
    if (out_obj->name.count > 255U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003748:	2bff      	cmp	r3, #255	@ 0xff
 800374a:	d902      	bls.n	8003752 <uavcan_register_Name_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800374c:	f06f 0309 	mvn.w	r3, #9
 8003750:	e01f      	b.n	8003792 <uavcan_register_Name_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->name.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->name.count * 8U);
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	f7fe fff9 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->name.count * 8U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4413      	add	r3, r2
 8003774:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	3307      	adds	r3, #7
 800377a:	f023 0307 	bic.w	r3, r3, #7
 800377e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003780:	69b9      	ldr	r1, [r7, #24]
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7fe ff00 	bl	8002588 <nunavutChooseMin>
 8003788:	4603      	mov	r3, r0
 800378a:	08da      	lsrs	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	08018a20 	.word	0x08018a20

080037a0 <uavcan_primitive_array_Bit_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_serialize_(
    const uavcan_primitive_array_Bit_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	@ 0x30
 80037a4:	af04      	add	r7, sp, #16
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <uavcan_primitive_array_Bit_1_0_serialize_+0x1e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d102      	bne.n	80037c4 <uavcan_primitive_array_Bit_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80037be:	f06f 0301 	mvn.w	r3, #1
 80037c2:	e05e      	b.n	8003882 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80037d2:	d202      	bcs.n	80037da <uavcan_primitive_array_Bit_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80037d4:	f06f 0302 	mvn.w	r3, #2
 80037d8:	e053      	b.n	8003882 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]


    {   // saturated bool[<=2048] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 2048)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037e8:	d902      	bls.n	80037f0 <uavcan_primitive_array_Bit_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80037ea:	f06f 0309 	mvn.w	r3, #9
 80037ee:	e048      	b.n	8003882 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	08db      	lsrs	r3, r3, #3
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	4413      	add	r3, r2
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80037fe:	8812      	ldrh	r2, [r2, #0]
 8003800:	b292      	uxth	r2, r2
 8003802:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	3310      	adds	r3, #16
 8003808:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count, &obj->value.bitpacked[0], 0U);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2100      	movs	r1, #0
 8003814:	9100      	str	r1, [sp, #0]
 8003816:	69f9      	ldr	r1, [r7, #28]
 8003818:	68b8      	ldr	r0, [r7, #8]
 800381a:	f7fe fee1 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	2b00      	cmp	r3, #0
 8003832:	d021      	beq.n	8003878 <uavcan_primitive_array_Bit_1_0_serialize_+0xd8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f1c3 0308 	rsb	r3, r3, #8
 8003842:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	e9cd 2300 	strd	r2, r3, [sp]
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	69b9      	ldr	r1, [r7, #24]
 8003858:	68b8      	ldr	r0, [r7, #8]
 800385a:	f7fe ffa5 	bl	80027a8 <nunavutSetUxx>
 800385e:	4603      	mov	r3, r0
 8003860:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003862:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003866:	2b00      	cmp	r3, #0
 8003868:	da02      	bge.n	8003870 <uavcan_primitive_array_Bit_1_0_serialize_+0xd0>
        {
            return _err0_;
 800386a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800386e:	e008      	b.n	8003882 <uavcan_primitive_array_Bit_1_0_serialize_+0xe2>
        }
        offset_bits += _pad0_;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	08da      	lsrs	r2, r3, #3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <uavcan_primitive_array_Bit_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Bit_1_0_deserialize_(
    uavcan_primitive_array_Bit_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	@ 0x28
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d006      	beq.n	80038b2 <uavcan_primitive_array_Bit_1_0_deserialize_+0x26>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <uavcan_primitive_array_Bit_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80038b2:	f06f 0301 	mvn.w	r3, #1
 80038b6:	e041      	b.n	800393c <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    if (buffer == NULL)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <uavcan_primitive_array_Bit_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80038be:	4b21      	ldr	r3, [pc, #132]	@ (8003944 <uavcan_primitive_array_Bit_1_0_deserialize_+0xb8>)
 80038c0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]


    // saturated bool[<=2048] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 80038d2:	2310      	movs	r3, #16
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	69f9      	ldr	r1, [r7, #28]
 80038d8:	68b8      	ldr	r0, [r7, #8]
 80038da:	f7fe ff8b 	bl	80027f4 <nunavutGetU16>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3310      	adds	r3, #16
 80038ec:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 2048U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f8:	d902      	bls.n	8003900 <uavcan_primitive_array_Bit_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80038fa:	f06f 0309 	mvn.w	r3, #9
 80038fe:	e01d      	b.n	800393c <uavcan_primitive_array_Bit_1_0_deserialize_+0xb0>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.bitpacked[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count);
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	f7fe ff23 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4413      	add	r3, r2
 800391e:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	3307      	adds	r3, #7
 8003924:	f023 0307 	bic.w	r3, r3, #7
 8003928:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800392a:	69b9      	ldr	r1, [r7, #24]
 800392c:	6978      	ldr	r0, [r7, #20]
 800392e:	f7fe fe2b 	bl	8002588 <nunavutChooseMin>
 8003932:	4603      	mov	r3, r0
 8003934:	08da      	lsrs	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	08018a20 	.word	0x08018a20

08003948 <uavcan_primitive_array_Integer16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_serialize_(
    const uavcan_primitive_array_Integer16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	@ 0x30
 800394c:	af04      	add	r7, sp, #16
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <uavcan_primitive_array_Integer16_1_0_serialize_+0x1e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <uavcan_primitive_array_Integer16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003966:	f06f 0301 	mvn.w	r3, #1
 800396a:	e05f      	b.n	8003a2c <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	f640 0207 	movw	r2, #2055	@ 0x807
 800397a:	4293      	cmp	r3, r2
 800397c:	d802      	bhi.n	8003984 <uavcan_primitive_array_Integer16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800397e:	f06f 0302 	mvn.w	r3, #2
 8003982:	e053      	b.n	8003a2c <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]


    {   // saturated int16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800398e:	2b80      	cmp	r3, #128	@ 0x80
 8003990:	d902      	bls.n	8003998 <uavcan_primitive_array_Integer16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003992:	f06f 0309 	mvn.w	r3, #9
 8003996:	e049      	b.n	8003a2c <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	08db      	lsrs	r3, r3, #3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	4413      	add	r3, r2
 80039a6:	b2ca      	uxtb	r2, r1
 80039a8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3308      	adds	r3, #8
 80039ae:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039b6:	011a      	lsls	r2, r3, #4
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2100      	movs	r1, #0
 80039bc:	9100      	str	r1, [sp, #0]
 80039be:	69f9      	ldr	r1, [r7, #28]
 80039c0:	68b8      	ldr	r0, [r7, #8]
 80039c2:	f7fe fe0d 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d021      	beq.n	8003a22 <uavcan_primitive_array_Integer16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f1c3 0308 	rsb	r3, r3, #8
 80039ec:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	9302      	str	r3, [sp, #8]
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9cd 2300 	strd	r2, r3, [sp]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	69b9      	ldr	r1, [r7, #24]
 8003a02:	68b8      	ldr	r0, [r7, #8]
 8003a04:	f7fe fed0 	bl	80027a8 <nunavutSetUxx>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003a0c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da02      	bge.n	8003a1a <uavcan_primitive_array_Integer16_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003a14:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a18:	e008      	b.n	8003a2c <uavcan_primitive_array_Integer16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	08da      	lsrs	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <uavcan_primitive_array_Integer16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer16_1_0_deserialize_(
    uavcan_primitive_array_Integer16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	@ 0x28
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d006      	beq.n	8003a5a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x26>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003a5a:	f06f 0301 	mvn.w	r3, #1
 8003a5e:	e04a      	b.n	8003af6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <uavcan_primitive_array_Integer16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003a66:	4b26      	ldr	r3, [pc, #152]	@ (8003b00 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xcc>)
 8003a68:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]


    // saturated int16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d309      	bcc.n	8003a98 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003a96:	e003      	b.n	8003aa0 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003aac:	2b80      	cmp	r3, #128	@ 0x80
 8003aae:	d902      	bls.n	8003ab6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ab0:	f06f 0309 	mvn.w	r3, #9
 8003ab4:	e01f      	b.n	8003af6 <uavcan_primitive_array_Integer16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	f7fe fe47 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3307      	adds	r3, #7
 8003ade:	f023 0307 	bic.w	r3, r3, #7
 8003ae2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	6978      	ldr	r0, [r7, #20]
 8003ae8:	f7fe fd4e 	bl	8002588 <nunavutChooseMin>
 8003aec:	4603      	mov	r3, r0
 8003aee:	08da      	lsrs	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	08018a20 	.word	0x08018a20

08003b04 <uavcan_primitive_array_Integer32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_serialize_(
    const uavcan_primitive_array_Integer32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08c      	sub	sp, #48	@ 0x30
 8003b08:	af04      	add	r7, sp, #16
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <uavcan_primitive_array_Integer32_1_0_serialize_+0x1e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <uavcan_primitive_array_Integer32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003b22:	f06f 0301 	mvn.w	r3, #1
 8003b26:	e05f      	b.n	8003be8 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	f640 0207 	movw	r2, #2055	@ 0x807
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d802      	bhi.n	8003b40 <uavcan_primitive_array_Integer32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003b3a:	f06f 0302 	mvn.w	r3, #2
 8003b3e:	e053      	b.n	8003be8 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]


    {   // saturated int32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b4a:	2b40      	cmp	r3, #64	@ 0x40
 8003b4c:	d902      	bls.n	8003b54 <uavcan_primitive_array_Integer32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003b4e:	f06f 0309 	mvn.w	r3, #9
 8003b52:	e049      	b.n	8003be8 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	08db      	lsrs	r3, r3, #3
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4413      	add	r3, r2
 8003b62:	b2ca      	uxtb	r2, r1
 8003b64:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2100      	movs	r1, #0
 8003b78:	9100      	str	r1, [sp, #0]
 8003b7a:	69f9      	ldr	r1, [r7, #28]
 8003b7c:	68b8      	ldr	r0, [r7, #8]
 8003b7e:	f7fe fd2f 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b88:	015b      	lsls	r3, r3, #5
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d021      	beq.n	8003bde <uavcan_primitive_array_Integer32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f1c3 0308 	rsb	r3, r3, #8
 8003ba8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	9302      	str	r3, [sp, #8]
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9cd 2300 	strd	r2, r3, [sp]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	68b8      	ldr	r0, [r7, #8]
 8003bc0:	f7fe fdf2 	bl	80027a8 <nunavutSetUxx>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003bc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da02      	bge.n	8003bd6 <uavcan_primitive_array_Integer32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003bd0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bd4:	e008      	b.n	8003be8 <uavcan_primitive_array_Integer32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	4413      	add	r3, r2
 8003bdc:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	08da      	lsrs	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <uavcan_primitive_array_Integer32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer32_1_0_deserialize_(
    uavcan_primitive_array_Integer32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	@ 0x28
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d006      	beq.n	8003c16 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x26>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003c16:	f06f 0301 	mvn.w	r3, #1
 8003c1a:	e04a      	b.n	8003cb2 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003c22:	4b26      	ldr	r3, [pc, #152]	@ (8003cbc <uavcan_primitive_array_Integer32_1_0_deserialize_+0xcc>)
 8003c24:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]


    // saturated int32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	3308      	adds	r3, #8
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d309      	bcc.n	8003c54 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	08db      	lsrs	r3, r3, #3
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	4413      	add	r3, r2
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003c52:	e003      	b.n	8003c5c <uavcan_primitive_array_Integer32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c68:	2b40      	cmp	r3, #64	@ 0x40
 8003c6a:	d902      	bls.n	8003c72 <uavcan_primitive_array_Integer32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003c6c:	f06f 0309 	mvn.w	r3, #9
 8003c70:	e01f      	b.n	8003cb2 <uavcan_primitive_array_Integer32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c7a:	015b      	lsls	r3, r3, #5
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	f7fe fd69 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c8e:	015b      	lsls	r3, r3, #5
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4413      	add	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3307      	adds	r3, #7
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003ca0:	69b9      	ldr	r1, [r7, #24]
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	f7fe fc70 	bl	8002588 <nunavutChooseMin>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	08da      	lsrs	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	08018a20 	.word	0x08018a20

08003cc0 <uavcan_primitive_array_Integer64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_serialize_(
    const uavcan_primitive_array_Integer64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08c      	sub	sp, #48	@ 0x30
 8003cc4:	af04      	add	r7, sp, #16
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <uavcan_primitive_array_Integer64_1_0_serialize_+0x1e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <uavcan_primitive_array_Integer64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003cde:	f06f 0301 	mvn.w	r3, #1
 8003ce2:	e05f      	b.n	8003da4 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f640 0207 	movw	r2, #2055	@ 0x807
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d802      	bhi.n	8003cfc <uavcan_primitive_array_Integer64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003cf6:	f06f 0302 	mvn.w	r3, #2
 8003cfa:	e053      	b.n	8003da4 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]


    {   // saturated int64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d902      	bls.n	8003d10 <uavcan_primitive_array_Integer64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003d0a:	f06f 0309 	mvn.w	r3, #9
 8003d0e:	e049      	b.n	8003da4 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	08db      	lsrs	r3, r3, #3
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	b2ca      	uxtb	r2, r1
 8003d20:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3308      	adds	r3, #8
 8003d26:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d2e:	019a      	lsls	r2, r3, #6
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2100      	movs	r1, #0
 8003d34:	9100      	str	r1, [sp, #0]
 8003d36:	69f9      	ldr	r1, [r7, #28]
 8003d38:	68b8      	ldr	r0, [r7, #8]
 8003d3a:	f7fe fc51 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d021      	beq.n	8003d9a <uavcan_primitive_array_Integer64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f1c3 0308 	rsb	r3, r3, #8
 8003d64:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	9302      	str	r3, [sp, #8]
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	e9cd 2300 	strd	r2, r3, [sp]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	68b8      	ldr	r0, [r7, #8]
 8003d7c:	f7fe fd14 	bl	80027a8 <nunavutSetUxx>
 8003d80:	4603      	mov	r3, r0
 8003d82:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003d84:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	da02      	bge.n	8003d92 <uavcan_primitive_array_Integer64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8003d8c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d90:	e008      	b.n	8003da4 <uavcan_primitive_array_Integer64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	08da      	lsrs	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <uavcan_primitive_array_Integer64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer64_1_0_deserialize_(
    uavcan_primitive_array_Integer64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	@ 0x28
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d006      	beq.n	8003dd2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x26>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003dd2:	f06f 0301 	mvn.w	r3, #1
 8003dd6:	e04a      	b.n	8003e6e <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003dde:	4b26      	ldr	r3, [pc, #152]	@ (8003e78 <uavcan_primitive_array_Integer64_1_0_deserialize_+0xcc>)
 8003de0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]


    // saturated int64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3308      	adds	r3, #8
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d309      	bcc.n	8003e10 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	08db      	lsrs	r3, r3, #3
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	4413      	add	r3, r2
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003e0e:	e003      	b.n	8003e18 <uavcan_primitive_array_Integer64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d902      	bls.n	8003e2e <uavcan_primitive_array_Integer64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003e28:	f06f 0309 	mvn.w	r3, #9
 8003e2c:	e01f      	b.n	8003e6e <uavcan_primitive_array_Integer64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e36:	019b      	lsls	r3, r3, #6
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	f7fe fc8b 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003e4a:	019b      	lsls	r3, r3, #6
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	3307      	adds	r3, #7
 8003e56:	f023 0307 	bic.w	r3, r3, #7
 8003e5a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003e5c:	69b9      	ldr	r1, [r7, #24]
 8003e5e:	6978      	ldr	r0, [r7, #20]
 8003e60:	f7fe fb92 	bl	8002588 <nunavutChooseMin>
 8003e64:	4603      	mov	r3, r0
 8003e66:	08da      	lsrs	r2, r3, #3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	08018a20 	.word	0x08018a20

08003e7c <uavcan_primitive_array_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_serialize_(
    const uavcan_primitive_array_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	@ 0x30
 8003e80:	af04      	add	r7, sp, #16
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <uavcan_primitive_array_Integer8_1_0_serialize_+0x1e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <uavcan_primitive_array_Integer8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003e9a:	f06f 0301 	mvn.w	r3, #1
 8003e9e:	e060      	b.n	8003f62 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8003eae:	d202      	bcs.n	8003eb6 <uavcan_primitive_array_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8003eb0:	f06f 0302 	mvn.w	r3, #2
 8003eb4:	e055      	b.n	8003f62 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]


    {   // saturated int8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec4:	d902      	bls.n	8003ecc <uavcan_primitive_array_Integer8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003ec6:	f06f 0309 	mvn.w	r3, #9
 8003eca:	e04a      	b.n	8003f62 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	08db      	lsrs	r3, r3, #3
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003eda:	8812      	ldrh	r2, [r2, #0]
 8003edc:	b292      	uxth	r2, r2
 8003ede:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	3310      	adds	r3, #16
 8003ee4:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003eec:	00da      	lsls	r2, r3, #3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	9100      	str	r1, [sp, #0]
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	68b8      	ldr	r0, [r7, #8]
 8003ef8:	f7fe fb72 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d021      	beq.n	8003f58 <uavcan_primitive_array_Integer8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f1c3 0308 	rsb	r3, r3, #8
 8003f22:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	9302      	str	r3, [sp, #8]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9cd 2300 	strd	r2, r3, [sp]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	69b9      	ldr	r1, [r7, #24]
 8003f38:	68b8      	ldr	r0, [r7, #8]
 8003f3a:	f7fe fc35 	bl	80027a8 <nunavutSetUxx>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8003f42:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da02      	bge.n	8003f50 <uavcan_primitive_array_Integer8_1_0_serialize_+0xd4>
        {
            return _err0_;
 8003f4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f4e:	e008      	b.n	8003f62 <uavcan_primitive_array_Integer8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	08da      	lsrs	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <uavcan_primitive_array_Integer8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Integer8_1_0_deserialize_(
    uavcan_primitive_array_Integer8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	@ 0x28
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x26>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003f92:	f06f 0301 	mvn.w	r3, #1
 8003f96:	e043      	b.n	8004020 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003f9e:	4b22      	ldr	r3, [pc, #136]	@ (8004028 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xbc>)
 8003fa0:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]


    // saturated int8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	69f9      	ldr	r1, [r7, #28]
 8003fb8:	68b8      	ldr	r0, [r7, #8]
 8003fba:	f7fe fc1b 	bl	80027f4 <nunavutGetU16>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3310      	adds	r3, #16
 8003fcc:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd8:	d902      	bls.n	8003fe0 <uavcan_primitive_array_Integer8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8003fda:	f06f 0309 	mvn.w	r3, #9
 8003fde:	e01f      	b.n	8004020 <uavcan_primitive_array_Integer8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	f7fe fbb2 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4413      	add	r3, r2
 8004002:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3307      	adds	r3, #7
 8004008:	f023 0307 	bic.w	r3, r3, #7
 800400c:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	6978      	ldr	r0, [r7, #20]
 8004012:	f7fe fab9 	bl	8002588 <nunavutChooseMin>
 8004016:	4603      	mov	r3, r0
 8004018:	08da      	lsrs	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	08018a20 	.word	0x08018a20

0800402c <uavcan_primitive_array_Natural16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_serialize_(
    const uavcan_primitive_array_Natural16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	@ 0x30
 8004030:	af04      	add	r7, sp, #16
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <uavcan_primitive_array_Natural16_1_0_serialize_+0x1e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <uavcan_primitive_array_Natural16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800404a:	f06f 0301 	mvn.w	r3, #1
 800404e:	e05f      	b.n	8004110 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	f640 0207 	movw	r2, #2055	@ 0x807
 800405e:	4293      	cmp	r3, r2
 8004060:	d802      	bhi.n	8004068 <uavcan_primitive_array_Natural16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004062:	f06f 0302 	mvn.w	r3, #2
 8004066:	e053      	b.n	8004110 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]


    {   // saturated uint16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004072:	2b80      	cmp	r3, #128	@ 0x80
 8004074:	d902      	bls.n	800407c <uavcan_primitive_array_Natural16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004076:	f06f 0309 	mvn.w	r3, #9
 800407a:	e049      	b.n	8004110 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	08db      	lsrs	r3, r3, #3
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	4413      	add	r3, r2
 800408a:	b2ca      	uxtb	r2, r1
 800408c:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3308      	adds	r3, #8
 8004092:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 16UL, &obj->value.elements[0], 0U);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800409a:	011a      	lsls	r2, r3, #4
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2100      	movs	r1, #0
 80040a0:	9100      	str	r1, [sp, #0]
 80040a2:	69f9      	ldr	r1, [r7, #28]
 80040a4:	68b8      	ldr	r0, [r7, #8]
 80040a6:	f7fe fa9b 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 16UL;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d021      	beq.n	8004106 <uavcan_primitive_array_Natural16_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f1c3 0308 	rsb	r3, r3, #8
 80040d0:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	9302      	str	r3, [sp, #8]
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	e9cd 2300 	strd	r2, r3, [sp]
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	69b9      	ldr	r1, [r7, #24]
 80040e6:	68b8      	ldr	r0, [r7, #8]
 80040e8:	f7fe fb5e 	bl	80027a8 <nunavutSetUxx>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80040f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da02      	bge.n	80040fe <uavcan_primitive_array_Natural16_1_0_serialize_+0xd2>
        {
            return _err0_;
 80040f8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80040fc:	e008      	b.n	8004110 <uavcan_primitive_array_Natural16_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	08da      	lsrs	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <uavcan_primitive_array_Natural16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural16_1_0_deserialize_(
    uavcan_primitive_array_Natural16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	@ 0x28
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d006      	beq.n	800413e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x26>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800413e:	f06f 0301 	mvn.w	r3, #1
 8004142:	e04a      	b.n	80041da <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <uavcan_primitive_array_Natural16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <uavcan_primitive_array_Natural16_1_0_deserialize_+0xcc>)
 800414c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]


    // saturated uint16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3308      	adds	r3, #8
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	429a      	cmp	r2, r3
 8004166:	d309      	bcc.n	800417c <uavcan_primitive_array_Natural16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	08db      	lsrs	r3, r3, #3
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	4413      	add	r3, r2
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800417a:	e003      	b.n	8004184 <uavcan_primitive_array_Natural16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3308      	adds	r3, #8
 8004188:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 128U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004190:	2b80      	cmp	r3, #128	@ 0x80
 8004192:	d902      	bls.n	800419a <uavcan_primitive_array_Natural16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004194:	f06f 0309 	mvn.w	r3, #9
 8004198:	e01f      	b.n	80041da <uavcan_primitive_array_Natural16_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 16U);
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	f7fe fad5 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 16U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4413      	add	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3307      	adds	r3, #7
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	6978      	ldr	r0, [r7, #20]
 80041cc:	f7fe f9dc 	bl	8002588 <nunavutChooseMin>
 80041d0:	4603      	mov	r3, r0
 80041d2:	08da      	lsrs	r2, r3, #3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	08018a20 	.word	0x08018a20

080041e8 <uavcan_primitive_array_Natural32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_serialize_(
    const uavcan_primitive_array_Natural32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08c      	sub	sp, #48	@ 0x30
 80041ec:	af04      	add	r7, sp, #16
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <uavcan_primitive_array_Natural32_1_0_serialize_+0x1e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d102      	bne.n	800420c <uavcan_primitive_array_Natural32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004206:	f06f 0301 	mvn.w	r3, #1
 800420a:	e05f      	b.n	80042cc <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	f640 0207 	movw	r2, #2055	@ 0x807
 800421a:	4293      	cmp	r3, r2
 800421c:	d802      	bhi.n	8004224 <uavcan_primitive_array_Natural32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800421e:	f06f 0302 	mvn.w	r3, #2
 8004222:	e053      	b.n	80042cc <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	61fb      	str	r3, [r7, #28]


    {   // saturated uint32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800422e:	2b40      	cmp	r3, #64	@ 0x40
 8004230:	d902      	bls.n	8004238 <uavcan_primitive_array_Natural32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004232:	f06f 0309 	mvn.w	r3, #9
 8004236:	e049      	b.n	80042cc <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	08db      	lsrs	r3, r3, #3
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	4413      	add	r3, r2
 8004246:	b2ca      	uxtb	r2, r1
 8004248:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3308      	adds	r3, #8
 800424e:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2100      	movs	r1, #0
 800425c:	9100      	str	r1, [sp, #0]
 800425e:	69f9      	ldr	r1, [r7, #28]
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f7fe f9bd 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800426c:	015b      	lsls	r3, r3, #5
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b00      	cmp	r3, #0
 800427c:	d021      	beq.n	80042c2 <uavcan_primitive_array_Natural32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f1c3 0308 	rsb	r3, r3, #8
 800428c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	9302      	str	r3, [sp, #8]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9cd 2300 	strd	r2, r3, [sp]
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	69b9      	ldr	r1, [r7, #24]
 80042a2:	68b8      	ldr	r0, [r7, #8]
 80042a4:	f7fe fa80 	bl	80027a8 <nunavutSetUxx>
 80042a8:	4603      	mov	r3, r0
 80042aa:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 80042ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	da02      	bge.n	80042ba <uavcan_primitive_array_Natural32_1_0_serialize_+0xd2>
        {
            return _err0_;
 80042b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80042b8:	e008      	b.n	80042cc <uavcan_primitive_array_Natural32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	08da      	lsrs	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <uavcan_primitive_array_Natural32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural32_1_0_deserialize_(
    uavcan_primitive_array_Natural32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d006      	beq.n	80042fa <uavcan_primitive_array_Natural32_1_0_deserialize_+0x26>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80042fa:	f06f 0301 	mvn.w	r3, #1
 80042fe:	e04a      	b.n	8004396 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <uavcan_primitive_array_Natural32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004306:	4b26      	ldr	r3, [pc, #152]	@ (80043a0 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xcc>)
 8004308:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]


    // saturated uint32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3308      	adds	r3, #8
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	429a      	cmp	r2, r3
 8004322:	d309      	bcc.n	8004338 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	08db      	lsrs	r3, r3, #3
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	4413      	add	r3, r2
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004336:	e003      	b.n	8004340 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3308      	adds	r3, #8
 8004344:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	d902      	bls.n	8004356 <uavcan_primitive_array_Natural32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004350:	f06f 0309 	mvn.w	r3, #9
 8004354:	e01f      	b.n	8004396 <uavcan_primitive_array_Natural32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800435e:	015b      	lsls	r3, r3, #5
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	f7fe f9f7 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004372:	015b      	lsls	r3, r3, #5
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4413      	add	r3, r2
 8004378:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	3307      	adds	r3, #7
 800437e:	f023 0307 	bic.w	r3, r3, #7
 8004382:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004384:	69b9      	ldr	r1, [r7, #24]
 8004386:	6978      	ldr	r0, [r7, #20]
 8004388:	f7fe f8fe 	bl	8002588 <nunavutChooseMin>
 800438c:	4603      	mov	r3, r0
 800438e:	08da      	lsrs	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	08018a20 	.word	0x08018a20

080043a4 <uavcan_primitive_array_Natural64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_serialize_(
    const uavcan_primitive_array_Natural64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08c      	sub	sp, #48	@ 0x30
 80043a8:	af04      	add	r7, sp, #16
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <uavcan_primitive_array_Natural64_1_0_serialize_+0x1e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <uavcan_primitive_array_Natural64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80043c2:	f06f 0301 	mvn.w	r3, #1
 80043c6:	e05f      	b.n	8004488 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	f640 0207 	movw	r2, #2055	@ 0x807
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d802      	bhi.n	80043e0 <uavcan_primitive_array_Natural64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80043da:	f06f 0302 	mvn.w	r3, #2
 80043de:	e053      	b.n	8004488 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]


    {   // saturated uint64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d902      	bls.n	80043f4 <uavcan_primitive_array_Natural64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80043ee:	f06f 0309 	mvn.w	r3, #9
 80043f2:	e049      	b.n	8004488 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	08db      	lsrs	r3, r3, #3
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4413      	add	r3, r2
 8004402:	b2ca      	uxtb	r2, r1
 8004404:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3308      	adds	r3, #8
 800440a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004412:	019a      	lsls	r2, r3, #6
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2100      	movs	r1, #0
 8004418:	9100      	str	r1, [sp, #0]
 800441a:	69f9      	ldr	r1, [r7, #28]
 800441c:	68b8      	ldr	r0, [r7, #8]
 800441e:	f7fe f8df 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	2b00      	cmp	r3, #0
 8004438:	d021      	beq.n	800447e <uavcan_primitive_array_Natural64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f1c3 0308 	rsb	r3, r3, #8
 8004448:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	9302      	str	r3, [sp, #8]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	e9cd 2300 	strd	r2, r3, [sp]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	69b9      	ldr	r1, [r7, #24]
 800445e:	68b8      	ldr	r0, [r7, #8]
 8004460:	f7fe f9a2 	bl	80027a8 <nunavutSetUxx>
 8004464:	4603      	mov	r3, r0
 8004466:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004468:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800446c:	2b00      	cmp	r3, #0
 800446e:	da02      	bge.n	8004476 <uavcan_primitive_array_Natural64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004470:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004474:	e008      	b.n	8004488 <uavcan_primitive_array_Natural64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	08da      	lsrs	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <uavcan_primitive_array_Natural64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural64_1_0_deserialize_(
    uavcan_primitive_array_Natural64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	@ 0x28
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d006      	beq.n	80044b6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x26>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <uavcan_primitive_array_Natural64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80044b6:	f06f 0301 	mvn.w	r3, #1
 80044ba:	e04a      	b.n	8004552 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 80044c2:	4b26      	ldr	r3, [pc, #152]	@ (800455c <uavcan_primitive_array_Natural64_1_0_deserialize_+0xcc>)
 80044c4:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]


    // saturated uint64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	3308      	adds	r3, #8
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d309      	bcc.n	80044f4 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	08db      	lsrs	r3, r3, #3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4413      	add	r3, r2
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80044f2:	e003      	b.n	80044fc <uavcan_primitive_array_Natural64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	3308      	adds	r3, #8
 8004500:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004508:	2b20      	cmp	r3, #32
 800450a:	d902      	bls.n	8004512 <uavcan_primitive_array_Natural64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800450c:	f06f 0309 	mvn.w	r3, #9
 8004510:	e01f      	b.n	8004552 <uavcan_primitive_array_Natural64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800451a:	019b      	lsls	r3, r3, #6
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	f7fe f919 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800452e:	019b      	lsls	r3, r3, #6
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	3307      	adds	r3, #7
 800453a:	f023 0307 	bic.w	r3, r3, #7
 800453e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004540:	69b9      	ldr	r1, [r7, #24]
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	f7fe f820 	bl	8002588 <nunavutChooseMin>
 8004548:	4603      	mov	r3, r0
 800454a:	08da      	lsrs	r2, r3, #3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	08018a20 	.word	0x08018a20

08004560 <uavcan_primitive_array_Natural8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_serialize_(
    const uavcan_primitive_array_Natural8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08c      	sub	sp, #48	@ 0x30
 8004564:	af04      	add	r7, sp, #16
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <uavcan_primitive_array_Natural8_1_0_serialize_+0x1e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <uavcan_primitive_array_Natural8_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800457e:	f06f 0301 	mvn.w	r3, #1
 8004582:	e060      	b.n	8004646 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8004592:	d202      	bcs.n	800459a <uavcan_primitive_array_Natural8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004594:	f06f 0302 	mvn.w	r3, #2
 8004598:	e055      	b.n	8004646 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80045a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045a8:	d902      	bls.n	80045b0 <uavcan_primitive_array_Natural8_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80045aa:	f06f 0309 	mvn.w	r3, #9
 80045ae:	e04a      	b.n	8004646 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	08db      	lsrs	r3, r3, #3
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	4413      	add	r3, r2
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80045be:	8812      	ldrh	r2, [r2, #0]
 80045c0:	b292      	uxth	r2, r2
 80045c2:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	3310      	adds	r3, #16
 80045c8:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80045d0:	00da      	lsls	r2, r3, #3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2100      	movs	r1, #0
 80045d6:	9100      	str	r1, [sp, #0]
 80045d8:	69f9      	ldr	r1, [r7, #28]
 80045da:	68b8      	ldr	r0, [r7, #8]
 80045dc:	f7fe f800 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d021      	beq.n	800463c <uavcan_primitive_array_Natural8_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f1c3 0308 	rsb	r3, r3, #8
 8004606:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	9302      	str	r3, [sp, #8]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9cd 2300 	strd	r2, r3, [sp]
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	69b9      	ldr	r1, [r7, #24]
 800461c:	68b8      	ldr	r0, [r7, #8]
 800461e:	f7fe f8c3 	bl	80027a8 <nunavutSetUxx>
 8004622:	4603      	mov	r3, r0
 8004624:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004626:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800462a:	2b00      	cmp	r3, #0
 800462c:	da02      	bge.n	8004634 <uavcan_primitive_array_Natural8_1_0_serialize_+0xd4>
        {
            return _err0_;
 800462e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004632:	e008      	b.n	8004646 <uavcan_primitive_array_Natural8_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	08da      	lsrs	r2, r3, #3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <uavcan_primitive_array_Natural8_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Natural8_1_0_deserialize_(
    uavcan_primitive_array_Natural8_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	@ 0x28
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d006      	beq.n	8004676 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x26>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <uavcan_primitive_array_Natural8_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004676:	f06f 0301 	mvn.w	r3, #1
 800467a:	e043      	b.n	8004704 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004682:	4b22      	ldr	r3, [pc, #136]	@ (800470c <uavcan_primitive_array_Natural8_1_0_deserialize_+0xbc>)
 8004684:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004696:	2310      	movs	r3, #16
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	69f9      	ldr	r1, [r7, #28]
 800469c:	68b8      	ldr	r0, [r7, #8]
 800469e:	f7fe f8a9 	bl	80027f4 <nunavutGetU16>
 80046a2:	4603      	mov	r3, r0
 80046a4:	461a      	mov	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3310      	adds	r3, #16
 80046b0:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80046b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046bc:	d902      	bls.n	80046c4 <uavcan_primitive_array_Natural8_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80046be:	f06f 0309 	mvn.w	r3, #9
 80046c2:	e01f      	b.n	8004704 <uavcan_primitive_array_Natural8_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	f7fe f840 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4413      	add	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3307      	adds	r3, #7
 80046ec:	f023 0307 	bic.w	r3, r3, #7
 80046f0:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 80046f2:	69b9      	ldr	r1, [r7, #24]
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f7fd ff47 	bl	8002588 <nunavutChooseMin>
 80046fa:	4603      	mov	r3, r0
 80046fc:	08da      	lsrs	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	08018a20 	.word	0x08018a20

08004710 <uavcan_primitive_array_Real16_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_serialize_(
    const uavcan_primitive_array_Real16_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08e      	sub	sp, #56	@ 0x38
 8004714:	af04      	add	r7, sp, #16
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <uavcan_primitive_array_Real16_1_0_serialize_+0x1e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <uavcan_primitive_array_Real16_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800472e:	f06f 0301 	mvn.w	r3, #1
 8004732:	e08b      	b.n	800484c <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	f640 0207 	movw	r2, #2055	@ 0x807
 8004742:	4293      	cmp	r3, r2
 8004744:	d802      	bhi.n	800474c <uavcan_primitive_array_Real16_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004746:	f06f 0302 	mvn.w	r3, #2
 800474a:	e07f      	b.n	800484c <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24


    {   // saturated float16[<=128] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 128)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004756:	2b80      	cmp	r3, #128	@ 0x80
 8004758:	d902      	bls.n	8004760 <uavcan_primitive_array_Real16_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800475a:	f06f 0309 	mvn.w	r3, #9
 800475e:	e075      	b.n	800484c <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	4413      	add	r3, r2
 800476e:	b2ca      	uxtb	r2, r1
 8004770:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	3308      	adds	r3, #8
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
 800477c:	e034      	b.n	80047e8 <uavcan_primitive_array_Real16_1_0_serialize_+0xd8>
        {
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
            float _sat0_ = obj->value.elements[_index0_];
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	61fb      	str	r3, [r7, #28]
            if (isfinite(_sat0_))
 800478a:	ed97 0a07 	vldr	s0, [r7, #28]
 800478e:	f7fd fed7 	bl	8002540 <_ZSt8isfinitef>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d015      	beq.n	80047c4 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
            {
                if (_sat0_ < ((float) -65504.0))
 8004798:	edd7 7a07 	vldr	s15, [r7, #28]
 800479c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004854 <uavcan_primitive_array_Real16_1_0_serialize_+0x144>
 80047a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a8:	d501      	bpl.n	80047ae <uavcan_primitive_array_Real16_1_0_serialize_+0x9e>
                {
                    _sat0_ = ((float) -65504.0);
 80047aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004858 <uavcan_primitive_array_Real16_1_0_serialize_+0x148>)
 80047ac:	61fb      	str	r3, [r7, #28]
                }
                if (_sat0_ > ((float) 65504.0))
 80047ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80047b2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800485c <uavcan_primitive_array_Real16_1_0_serialize_+0x14c>
 80047b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047be:	dd01      	ble.n	80047c4 <uavcan_primitive_array_Real16_1_0_serialize_+0xb4>
                {
                    _sat0_ = ((float) 65504.0);
 80047c0:	4b27      	ldr	r3, [pc, #156]	@ (8004860 <uavcan_primitive_array_Real16_1_0_serialize_+0x150>)
 80047c2:	61fb      	str	r3, [r7, #28]
                }
            }
            const uint16_t _half0_ = nunavutFloat16Pack(_sat0_);
 80047c4:	ed97 0a07 	vldr	s0, [r7, #28]
 80047c8:	f7fe f85a 	bl	8002880 <nunavutFloat16Pack>
 80047cc:	4603      	mov	r3, r0
 80047ce:	82bb      	strh	r3, [r7, #20]
            (void) memmove(&buffer[offset_bits / 8U], &_half0_, 2U);
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	08db      	lsrs	r3, r3, #3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	4413      	add	r3, r2
 80047d8:	8aba      	ldrh	r2, [r7, #20]
 80047da:	801a      	strh	r2, [r3, #0]
            offset_bits += 16U;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	3310      	adds	r3, #16
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
        for (size_t _index0_ = 0U; _index0_ < obj->value.count; ++_index0_)
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	3301      	adds	r3, #1
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047ee:	6a3a      	ldr	r2, [r7, #32]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3c4      	bcc.n	800477e <uavcan_primitive_array_Real16_1_0_serialize_+0x6e>
        }
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d021      	beq.n	8004842 <uavcan_primitive_array_Real16_1_0_serialize_+0x132>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f1c3 0308 	rsb	r3, r3, #8
 800480c:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	9302      	str	r3, [sp, #8]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9cd 2300 	strd	r2, r3, [sp]
 800481e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004820:	69b9      	ldr	r1, [r7, #24]
 8004822:	68b8      	ldr	r0, [r7, #8]
 8004824:	f7fd ffc0 	bl	80027a8 <nunavutSetUxx>
 8004828:	4603      	mov	r3, r0
 800482a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800482c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004830:	2b00      	cmp	r3, #0
 8004832:	da02      	bge.n	800483a <uavcan_primitive_array_Real16_1_0_serialize_+0x12a>
        {
            return _err0_;
 8004834:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004838:	e008      	b.n	800484c <uavcan_primitive_array_Real16_1_0_serialize_+0x13c>
        }
        offset_bits += _pad0_;
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483e:	4413      	add	r3, r2
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	08da      	lsrs	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3728      	adds	r7, #40	@ 0x28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	c77fe000 	.word	0xc77fe000
 8004858:	c77fe000 	.word	0xc77fe000
 800485c:	477fe000 	.word	0x477fe000
 8004860:	477fe000 	.word	0x477fe000

08004864 <uavcan_primitive_array_Real16_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real16_1_0_deserialize_(
    uavcan_primitive_array_Real16_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d006      	beq.n	800488a <uavcan_primitive_array_Real16_1_0_deserialize_+0x26>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <uavcan_primitive_array_Real16_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800488a:	f06f 0301 	mvn.w	r3, #1
 800488e:	e054      	b.n	800493a <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    if (buffer == NULL)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <uavcan_primitive_array_Real16_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004896:	4b2b      	ldr	r3, [pc, #172]	@ (8004944 <uavcan_primitive_array_Real16_1_0_deserialize_+0xe0>)
 8004898:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	617b      	str	r3, [r7, #20]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	613b      	str	r3, [r7, #16]
    size_t offset_bits = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]


    // saturated float16[<=128] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3308      	adds	r3, #8
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d309      	bcc.n	80048c8 <uavcan_primitive_array_Real16_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	08db      	lsrs	r3, r3, #3
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	4413      	add	r3, r2
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 80048c6:	e003      	b.n	80048d0 <uavcan_primitive_array_Real16_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    }
    offset_bits += 8U;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	3308      	adds	r3, #8
 80048d4:	61fb      	str	r3, [r7, #28]
    if (out_obj->value.count > 128U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048dc:	2b80      	cmp	r3, #128	@ 0x80
 80048de:	d902      	bls.n	80048e6 <uavcan_primitive_array_Real16_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80048e0:	f06f 0309 	mvn.w	r3, #9
 80048e4:	e029      	b.n	800493a <uavcan_primitive_array_Real16_1_0_deserialize_+0xd6>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	e012      	b.n	8004912 <uavcan_primitive_array_Real16_1_0_deserialize_+0xae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        out_obj->value.elements[_index1_] = nunavutGetF16(&buffer[0], capacity_bytes, offset_bits);
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	6979      	ldr	r1, [r7, #20]
 80048f0:	68b8      	ldr	r0, [r7, #8]
 80048f2:	f7fe f85b 	bl	80029ac <nunavutGetF16>
 80048f6:	eef0 7a40 	vmov.f32	s15, s0
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	edc3 7a00 	vstr	s15, [r3]
        offset_bits += 16U;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3310      	adds	r3, #16
 800490a:	61fb      	str	r3, [r7, #28]
    for (size_t _index1_ = 0U; _index1_ < out_obj->value.count; ++_index1_)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	3301      	adds	r3, #1
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	429a      	cmp	r2, r3
 800491c:	d3e6      	bcc.n	80048ec <uavcan_primitive_array_Real16_1_0_deserialize_+0x88>
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3307      	adds	r3, #7
 8004922:	f023 0307 	bic.w	r3, r3, #7
 8004926:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004928:	6939      	ldr	r1, [r7, #16]
 800492a:	69f8      	ldr	r0, [r7, #28]
 800492c:	f7fd fe2c 	bl	8002588 <nunavutChooseMin>
 8004930:	4603      	mov	r3, r0
 8004932:	08da      	lsrs	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	08018a20 	.word	0x08018a20

08004948 <uavcan_primitive_array_Real32_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_serialize_(
    const uavcan_primitive_array_Real32_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08c      	sub	sp, #48	@ 0x30
 800494c:	af04      	add	r7, sp, #16
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <uavcan_primitive_array_Real32_1_0_serialize_+0x1e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <uavcan_primitive_array_Real32_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004966:	f06f 0301 	mvn.w	r3, #1
 800496a:	e05f      	b.n	8004a2c <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	f640 0207 	movw	r2, #2055	@ 0x807
 800497a:	4293      	cmp	r3, r2
 800497c:	d802      	bhi.n	8004984 <uavcan_primitive_array_Real32_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800497e:	f06f 0302 	mvn.w	r3, #2
 8004982:	e053      	b.n	8004a2c <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	61fb      	str	r3, [r7, #28]


    {   // saturated float32[<=64] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 64)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800498e:	2b40      	cmp	r3, #64	@ 0x40
 8004990:	d902      	bls.n	8004998 <uavcan_primitive_array_Real32_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004992:	f06f 0309 	mvn.w	r3, #9
 8004996:	e049      	b.n	8004a2c <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	08db      	lsrs	r3, r3, #3
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	4413      	add	r3, r2
 80049a6:	b2ca      	uxtb	r2, r1
 80049a8:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3308      	adds	r3, #8
 80049ae:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 32UL, &obj->value.elements[0], 0U);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2100      	movs	r1, #0
 80049bc:	9100      	str	r1, [sp, #0]
 80049be:	69f9      	ldr	r1, [r7, #28]
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f7fd fe0d 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 32UL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80049cc:	015b      	lsls	r3, r3, #5
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d021      	beq.n	8004a22 <uavcan_primitive_array_Real32_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f1c3 0308 	rsb	r3, r3, #8
 80049ec:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	9302      	str	r3, [sp, #8]
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	e9cd 2300 	strd	r2, r3, [sp]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	69b9      	ldr	r1, [r7, #24]
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f7fd fed0 	bl	80027a8 <nunavutSetUxx>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004a0c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da02      	bge.n	8004a1a <uavcan_primitive_array_Real32_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004a14:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004a18:	e008      	b.n	8004a2c <uavcan_primitive_array_Real32_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	4413      	add	r3, r2
 8004a20:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	08da      	lsrs	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <uavcan_primitive_array_Real32_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real32_1_0_deserialize_(
    uavcan_primitive_array_Real32_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	@ 0x28
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d006      	beq.n	8004a5a <uavcan_primitive_array_Real32_1_0_deserialize_+0x26>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <uavcan_primitive_array_Real32_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004a5a:	f06f 0301 	mvn.w	r3, #1
 8004a5e:	e04a      	b.n	8004af6 <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <uavcan_primitive_array_Real32_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004a66:	4b26      	ldr	r3, [pc, #152]	@ (8004b00 <uavcan_primitive_array_Real32_1_0_deserialize_+0xcc>)
 8004a68:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]


    // saturated float32[<=64] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d309      	bcc.n	8004a98 <uavcan_primitive_array_Real32_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004a96:	e003      	b.n	8004aa0 <uavcan_primitive_array_Real32_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 64U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004aac:	2b40      	cmp	r3, #64	@ 0x40
 8004aae:	d902      	bls.n	8004ab6 <uavcan_primitive_array_Real32_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004ab0:	f06f 0309 	mvn.w	r3, #9
 8004ab4:	e01f      	b.n	8004af6 <uavcan_primitive_array_Real32_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 32U);
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004abe:	015b      	lsls	r3, r3, #5
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	f7fd fe47 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 32U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004ad2:	015b      	lsls	r3, r3, #5
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3307      	adds	r3, #7
 8004ade:	f023 0307 	bic.w	r3, r3, #7
 8004ae2:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	6978      	ldr	r0, [r7, #20]
 8004ae8:	f7fd fd4e 	bl	8002588 <nunavutChooseMin>
 8004aec:	4603      	mov	r3, r0
 8004aee:	08da      	lsrs	r2, r3, #3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	08018a20 	.word	0x08018a20

08004b04 <uavcan_primitive_array_Real64_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_serialize_(
    const uavcan_primitive_array_Real64_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	@ 0x30
 8004b08:	af04      	add	r7, sp, #16
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <uavcan_primitive_array_Real64_1_0_serialize_+0x1e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <uavcan_primitive_array_Real64_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004b22:	f06f 0301 	mvn.w	r3, #1
 8004b26:	e05f      	b.n	8004be8 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2056UL)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	f640 0207 	movw	r2, #2055	@ 0x807
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d802      	bhi.n	8004b40 <uavcan_primitive_array_Real64_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004b3a:	f06f 0302 	mvn.w	r3, #2
 8004b3e:	e053      	b.n	8004be8 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]


    {   // saturated float64[<=32] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 32)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d902      	bls.n	8004b54 <uavcan_primitive_array_Real64_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004b4e:	f06f 0309 	mvn.w	r3, #9
 8004b52:	e049      	b.n	8004be8 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->value.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	08db      	lsrs	r3, r3, #3
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	4413      	add	r3, r2
 8004b62:	b2ca      	uxtb	r2, r1
 8004b64:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 64UL, &obj->value.elements[0], 0U);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004b72:	019a      	lsls	r2, r3, #6
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2100      	movs	r1, #0
 8004b78:	9100      	str	r1, [sp, #0]
 8004b7a:	69f9      	ldr	r1, [r7, #28]
 8004b7c:	68b8      	ldr	r0, [r7, #8]
 8004b7e:	f7fd fd2f 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 64UL;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d021      	beq.n	8004bde <uavcan_primitive_array_Real64_1_0_serialize_+0xda>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f1c3 0308 	rsb	r3, r3, #8
 8004ba8:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	9302      	str	r3, [sp, #8]
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9cd 2300 	strd	r2, r3, [sp]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	69b9      	ldr	r1, [r7, #24]
 8004bbe:	68b8      	ldr	r0, [r7, #8]
 8004bc0:	f7fd fdf2 	bl	80027a8 <nunavutSetUxx>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004bc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	da02      	bge.n	8004bd6 <uavcan_primitive_array_Real64_1_0_serialize_+0xd2>
        {
            return _err0_;
 8004bd0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004bd4:	e008      	b.n	8004be8 <uavcan_primitive_array_Real64_1_0_serialize_+0xe4>
        }
        offset_bits += _pad0_;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2056ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	08da      	lsrs	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	@ 0x28
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004c16:	f06f 0301 	mvn.w	r3, #1
 8004c1a:	e04a      	b.n	8004cb2 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    if (buffer == NULL)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004c22:	4b26      	ldr	r3, [pc, #152]	@ (8004cbc <uavcan_primitive_array_Real64_1_0_deserialize_+0xcc>)
 8004c24:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]


    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	3308      	adds	r3, #8
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d309      	bcc.n	8004c54 <uavcan_primitive_array_Real64_1_0_deserialize_+0x64>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	08db      	lsrs	r3, r3, #3
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	4413      	add	r3, r2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004c52:	e003      	b.n	8004c5c <uavcan_primitive_array_Real64_1_0_deserialize_+0x6c>
    }
    else
    {
        out_obj->value.count = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d902      	bls.n	8004c72 <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004c6c:	f06f 0309 	mvn.w	r3, #9
 8004c70:	e01f      	b.n	8004cb2 <uavcan_primitive_array_Real64_1_0_deserialize_+0xc2>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004c7a:	019b      	lsls	r3, r3, #6
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	f7fd fd69 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004c8e:	019b      	lsls	r3, r3, #6
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4413      	add	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3307      	adds	r3, #7
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004ca0:	69b9      	ldr	r1, [r7, #24]
 8004ca2:	6978      	ldr	r0, [r7, #20]
 8004ca4:	f7fd fc70 	bl	8002588 <nunavutChooseMin>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	08da      	lsrs	r2, r3, #3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	08018a20 	.word	0x08018a20

08004cc0 <uavcan_primitive_Empty_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_serialize_(
    const uavcan_primitive_Empty_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <uavcan_primitive_Empty_1_0_serialize_+0x1e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <uavcan_primitive_Empty_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004cde:	f06f 0301 	mvn.w	r3, #1
 8004ce2:	e003      	b.n	8004cec <uavcan_primitive_Empty_1_0_serialize_+0x2c>
    }

    *inout_buffer_size_bytes = 0U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <uavcan_primitive_Empty_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Empty_1_0_deserialize_(
    uavcan_primitive_Empty_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d009      	beq.n	8004d1e <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <uavcan_primitive_Empty_1_0_deserialize_+0x26>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <uavcan_primitive_Empty_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004d1e:	f06f 0301 	mvn.w	r3, #1
 8004d22:	e008      	b.n	8004d36 <uavcan_primitive_Empty_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <uavcan_primitive_Empty_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004d2a:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <uavcan_primitive_Empty_1_0_deserialize_+0x4c>)
 8004d2c:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	08018a20 	.word	0x08018a20

08004d48 <uavcan_primitive_String_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_serialize_(
    const uavcan_primitive_String_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08c      	sub	sp, #48	@ 0x30
 8004d4c:	af04      	add	r7, sp, #16
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <uavcan_primitive_String_1_0_serialize_+0x1e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <uavcan_primitive_String_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004d66:	f06f 0301 	mvn.w	r3, #1
 8004d6a:	e060      	b.n	8004e2e <uavcan_primitive_String_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8004d7a:	d202      	bcs.n	8004d82 <uavcan_primitive_String_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004d7c:	f06f 0302 	mvn.w	r3, #2
 8004d80:	e055      	b.n	8004e2e <uavcan_primitive_String_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d90:	d902      	bls.n	8004d98 <uavcan_primitive_String_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004d92:	f06f 0309 	mvn.w	r3, #9
 8004d96:	e04a      	b.n	8004e2e <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	08db      	lsrs	r3, r3, #3
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	4413      	add	r3, r2
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8004da6:	8812      	ldrh	r2, [r2, #0]
 8004da8:	b292      	uxth	r2, r2
 8004daa:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	3310      	adds	r3, #16
 8004db0:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004db8:	00da      	lsls	r2, r3, #3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	9100      	str	r1, [sp, #0]
 8004dc0:	69f9      	ldr	r1, [r7, #28]
 8004dc2:	68b8      	ldr	r0, [r7, #8]
 8004dc4:	f7fd fc0c 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d021      	beq.n	8004e24 <uavcan_primitive_String_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f1c3 0308 	rsb	r3, r3, #8
 8004dee:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
 8004df2:	9302      	str	r3, [sp, #8]
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9cd 2300 	strd	r2, r3, [sp]
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	69b9      	ldr	r1, [r7, #24]
 8004e04:	68b8      	ldr	r0, [r7, #8]
 8004e06:	f7fd fccf 	bl	80027a8 <nunavutSetUxx>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004e0e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da02      	bge.n	8004e1c <uavcan_primitive_String_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004e16:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004e1a:	e008      	b.n	8004e2e <uavcan_primitive_String_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	08da      	lsrs	r2, r3, #3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <uavcan_primitive_String_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_String_1_0_deserialize_(
    uavcan_primitive_String_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	@ 0x28
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d006      	beq.n	8004e5e <uavcan_primitive_String_1_0_deserialize_+0x26>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <uavcan_primitive_String_1_0_deserialize_+0x2c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <uavcan_primitive_String_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004e5e:	f06f 0301 	mvn.w	r3, #1
 8004e62:	e043      	b.n	8004eec <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <uavcan_primitive_String_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8004e6a:	4b22      	ldr	r3, [pc, #136]	@ (8004ef4 <uavcan_primitive_String_1_0_deserialize_+0xbc>)
 8004e6c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 8004e7e:	2310      	movs	r3, #16
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	69f9      	ldr	r1, [r7, #28]
 8004e84:	68b8      	ldr	r0, [r7, #8]
 8004e86:	f7fd fcb5 	bl	80027f4 <nunavutGetU16>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3310      	adds	r3, #16
 8004e98:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea4:	d902      	bls.n	8004eac <uavcan_primitive_String_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004ea6:	f06f 0309 	mvn.w	r3, #9
 8004eaa:	e01f      	b.n	8004eec <uavcan_primitive_String_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	f7fd fc4c 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4413      	add	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3307      	adds	r3, #7
 8004ed4:	f023 0307 	bic.w	r3, r3, #7
 8004ed8:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8004eda:	69b9      	ldr	r1, [r7, #24]
 8004edc:	6978      	ldr	r0, [r7, #20]
 8004ede:	f7fd fb53 	bl	8002588 <nunavutChooseMin>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	08da      	lsrs	r2, r3, #3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	08018a20 	.word	0x08018a20

08004ef8 <uavcan_primitive_Unstructured_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_serialize_(
    const uavcan_primitive_Unstructured_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	@ 0x30
 8004efc:	af04      	add	r7, sp, #16
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <uavcan_primitive_Unstructured_1_0_serialize_+0x1e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <uavcan_primitive_Unstructured_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8004f16:	f06f 0301 	mvn.w	r3, #1
 8004f1a:	e060      	b.n	8004fde <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 2064UL)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8004f2a:	d202      	bcs.n	8004f32 <uavcan_primitive_Unstructured_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8004f2c:	f06f 0302 	mvn.w	r3, #2
 8004f30:	e055      	b.n	8004fde <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]


    {   // saturated uint8[<=256] value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        if (obj->value.count > 256)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f40:	d902      	bls.n	8004f48 <uavcan_primitive_Unstructured_1_0_serialize_+0x50>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8004f42:	f06f 0309 	mvn.w	r3, #9
 8004f46:	e04a      	b.n	8004fde <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        // Array length prefix: truncated uint16
        (void) memmove(&buffer[offset_bits / 8U], &obj->value.count, 2U);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	08db      	lsrs	r3, r3, #3
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	4413      	add	r3, r2
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8004f56:	8812      	ldrh	r2, [r2, #0]
 8004f58:	b292      	uxth	r2, r2
 8004f5a:	801a      	strh	r2, [r3, #0]
        offset_bits += 16U;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	3310      	adds	r3, #16
 8004f60:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->value.count * 8U, &obj->value.elements[0], 0U);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f68:	00da      	lsls	r2, r3, #3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	9100      	str	r1, [sp, #0]
 8004f70:	69f9      	ldr	r1, [r7, #28]
 8004f72:	68b8      	ldr	r0, [r7, #8]
 8004f74:	f7fd fb34 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->value.count * 8U;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d021      	beq.n	8004fd4 <uavcan_primitive_Unstructured_1_0_serialize_+0xdc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f1c3 0308 	rsb	r3, r3, #8
 8004f9e:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	9302      	str	r3, [sp, #8]
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9cd 2300 	strd	r2, r3, [sp]
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	69b9      	ldr	r1, [r7, #24]
 8004fb4:	68b8      	ldr	r0, [r7, #8]
 8004fb6:	f7fd fbf7 	bl	80027a8 <nunavutSetUxx>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8004fbe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da02      	bge.n	8004fcc <uavcan_primitive_Unstructured_1_0_serialize_+0xd4>
        {
            return _err0_;
 8004fc6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004fca:	e008      	b.n	8004fde <uavcan_primitive_Unstructured_1_0_serialize_+0xe6>
        }
        offset_bits += _pad0_;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	61fb      	str	r3, [r7, #28]

    NUNAVUT_ASSERT(offset_bits >= 16ULL);
    NUNAVUT_ASSERT(offset_bits <= 2064ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	08da      	lsrs	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <uavcan_primitive_Unstructured_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_Unstructured_1_0_deserialize_(
    uavcan_primitive_Unstructured_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	@ 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d006      	beq.n	800500e <uavcan_primitive_Unstructured_1_0_deserialize_+0x26>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <uavcan_primitive_Unstructured_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800500e:	f06f 0301 	mvn.w	r3, #1
 8005012:	e043      	b.n	800509c <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    if (buffer == NULL)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <uavcan_primitive_Unstructured_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800501a:	4b22      	ldr	r3, [pc, #136]	@ (80050a4 <uavcan_primitive_Unstructured_1_0_deserialize_+0xbc>)
 800501c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]


    // saturated uint8[<=256] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    // Array length prefix: truncated uint16
    out_obj->value.count = nunavutGetU16(&buffer[0], capacity_bytes, offset_bits, 16);
 800502e:	2310      	movs	r3, #16
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	69f9      	ldr	r1, [r7, #28]
 8005034:	68b8      	ldr	r0, [r7, #8]
 8005036:	f7fd fbdd 	bl	80027f4 <nunavutGetU16>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    offset_bits += 16U;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3310      	adds	r3, #16
 8005048:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 256U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005054:	d902      	bls.n	800505c <uavcan_primitive_Unstructured_1_0_deserialize_+0x74>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8005056:	f06f 0309 	mvn.w	r3, #9
 800505a:	e01f      	b.n	800509c <uavcan_primitive_Unstructured_1_0_deserialize_+0xb4>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 8U);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	f7fd fb74 	bl	800275a <nunavutGetBits>
    offset_bits += out_obj->value.count * 8U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4413      	add	r3, r2
 800507e:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	3307      	adds	r3, #7
 8005084:	f023 0307 	bic.w	r3, r3, #7
 8005088:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 800508a:	69b9      	ldr	r1, [r7, #24]
 800508c:	6978      	ldr	r0, [r7, #20]
 800508e:	f7fd fa7b 	bl	8002588 <nunavutChooseMin>
 8005092:	4603      	mov	r3, r0
 8005094:	08da      	lsrs	r2, r3, #3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3720      	adds	r7, #32
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	08018a20 	.word	0x08018a20

080050a8 <uavcan_register_Value_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_serialize_(
    const uavcan_register_Value_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b09e      	sub	sp, #120	@ 0x78
 80050ac:	af04      	add	r7, sp, #16
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <uavcan_register_Value_1_0_serialize_+0x1e>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <uavcan_register_Value_1_0_serialize_+0x1e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d102      	bne.n	80050cc <uavcan_register_Value_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80050c6:	f06f 0301 	mvn.w	r3, #1
 80050ca:	e248      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	663b      	str	r3, [r7, #96]	@ 0x60
    if ((8U * (size_t) capacity_bytes) < 2072UL)
 80050d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	f640 0217 	movw	r2, #2071	@ 0x817
 80050da:	4293      	cmp	r3, r2
 80050dc:	d802      	bhi.n	80050e4 <uavcan_register_Value_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80050de:	f06f 0302 	mvn.w	r3, #2
 80050e2:	e23c      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	667b      	str	r3, [r7, #100]	@ 0x64

    {   // Union tag field: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->_tag_);  // C std, 6.3.1.3 Signed and unsigned integers
 80050e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ea:	08db      	lsrs	r3, r3, #3
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4413      	add	r3, r2
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	f892 2208 	ldrb.w	r2, [r2, #520]	@ 0x208
 80050f6:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80050f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050fa:	3308      	adds	r3, #8
 80050fc:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    if (0U == obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005104:	2b00      	cmp	r3, #0
 8005106:	d11b      	bne.n	8005140 <uavcan_register_Value_1_0_serialize_+0x98>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 0ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 0UL;  // Nested object (max) size, in bytes.
 8005108:	2300      	movs	r3, #0
 800510a:	64bb      	str	r3, [r7, #72]	@ 0x48
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 800510c:	68f8      	ldr	r0, [r7, #12]
            &obj->empty, &buffer[offset_bits / 8U], &_size_bytes0_);
 800510e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005110:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_primitive_Empty_1_0_serialize_(
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	4413      	add	r3, r2
 8005116:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800511a:	4619      	mov	r1, r3
 800511c:	f7ff fdd0 	bl	8004cc0 <uavcan_primitive_Empty_1_0_serialize_>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
        if (_err0_ < 0)
 8005126:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 800512a:	2b00      	cmp	r3, #0
 800512c:	da02      	bge.n	8005134 <uavcan_register_Value_1_0_serialize_+0x8c>
        {
            return _err0_;
 800512e:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8005132:	e214      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 0ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8005134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800513a:	4413      	add	r3, r2
 800513c:	667b      	str	r3, [r7, #100]	@ 0x64
 800513e:	e1de      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (1U == obj->_tag_)  // uavcan.primitive.String.1.0 string
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005146:	2b01      	cmp	r3, #1
 8005148:	d11c      	bne.n	8005184 <uavcan_register_Value_1_0_serialize_+0xdc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 258UL;  // Nested object (max) size, in bytes.
 800514a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800514e:	647b      	str	r3, [r7, #68]	@ 0x44
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8005150:	68f8      	ldr	r0, [r7, #12]
            &obj->_string, &buffer[offset_bits / 8U], &_size_bytes1_);
 8005152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005154:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_primitive_String_1_0_serialize_(
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	4413      	add	r3, r2
 800515a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800515e:	4619      	mov	r1, r3
 8005160:	f7ff fdf2 	bl	8004d48 <uavcan_primitive_String_1_0_serialize_>
 8005164:	4603      	mov	r3, r0
 8005166:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        if (_err1_ < 0)
 800516a:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 800516e:	2b00      	cmp	r3, #0
 8005170:	da02      	bge.n	8005178 <uavcan_register_Value_1_0_serialize_+0xd0>
        {
            return _err1_;
 8005172:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 8005176:	e1f2      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8005178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800517e:	4413      	add	r3, r2
 8005180:	667b      	str	r3, [r7, #100]	@ 0x64
 8005182:	e1bc      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (2U == obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800518a:	2b02      	cmp	r3, #2
 800518c:	d11c      	bne.n	80051c8 <uavcan_register_Value_1_0_serialize_+0x120>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 258UL;  // Nested object (max) size, in bytes.
 800518e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005192:	643b      	str	r3, [r7, #64]	@ 0x40
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 8005194:	68f8      	ldr	r0, [r7, #12]
            &obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes2_);
 8005196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005198:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_primitive_Unstructured_1_0_serialize_(
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80051a2:	4619      	mov	r1, r3
 80051a4:	f7ff fea8 	bl	8004ef8 <uavcan_primitive_Unstructured_1_0_serialize_>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if (_err2_ < 0)
 80051ae:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	da02      	bge.n	80051bc <uavcan_register_Value_1_0_serialize_+0x114>
        {
            return _err2_;
 80051b6:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80051ba:	e1d0      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80051bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051c2:	4413      	add	r3, r2
 80051c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80051c6:	e19a      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (3U == obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d11c      	bne.n	800520c <uavcan_register_Value_1_0_serialize_+0x164>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes3_ = 258UL;  // Nested object (max) size, in bytes.
 80051d2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80051d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes3_) <= capacity_bytes);
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 80051d8:	68f8      	ldr	r0, [r7, #12]
            &obj->bit, &buffer[offset_bits / 8U], &_size_bytes3_);
 80051da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051dc:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_primitive_array_Bit_1_0_serialize_(
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4413      	add	r3, r2
 80051e2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80051e6:	4619      	mov	r1, r3
 80051e8:	f7fe fada 	bl	80037a0 <uavcan_primitive_array_Bit_1_0_serialize_>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        if (_err3_ < 0)
 80051f2:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	da02      	bge.n	8005200 <uavcan_register_Value_1_0_serialize_+0x158>
        {
            return _err3_;
 80051fa:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 80051fe:	e1ae      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes3_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested object.
 8005200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005206:	4413      	add	r3, r2
 8005208:	667b      	str	r3, [r7, #100]	@ 0x64
 800520a:	e178      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (4U == obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005212:	2b04      	cmp	r3, #4
 8005214:	d11c      	bne.n	8005250 <uavcan_register_Value_1_0_serialize_+0x1a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 257UL;  // Nested object (max) size, in bytes.
 8005216:	f240 1301 	movw	r3, #257	@ 0x101
 800521a:	63bb      	str	r3, [r7, #56]	@ 0x38
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 800521c:	68f8      	ldr	r0, [r7, #12]
            &obj->integer64, &buffer[offset_bits / 8U], &_size_bytes4_);
 800521e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005220:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_primitive_array_Integer64_1_0_serialize_(
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	4413      	add	r3, r2
 8005226:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800522a:	4619      	mov	r1, r3
 800522c:	f7fe fd48 	bl	8003cc0 <uavcan_primitive_array_Integer64_1_0_serialize_>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
        if (_err4_ < 0)
 8005236:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 800523a:	2b00      	cmp	r3, #0
 800523c:	da02      	bge.n	8005244 <uavcan_register_Value_1_0_serialize_+0x19c>
        {
            return _err4_;
 800523e:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8005242:	e18c      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800524a:	4413      	add	r3, r2
 800524c:	667b      	str	r3, [r7, #100]	@ 0x64
 800524e:	e156      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (5U == obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005256:	2b05      	cmp	r3, #5
 8005258:	d11c      	bne.n	8005294 <uavcan_register_Value_1_0_serialize_+0x1ec>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 257UL;  // Nested object (max) size, in bytes.
 800525a:	f240 1301 	movw	r3, #257	@ 0x101
 800525e:	637b      	str	r3, [r7, #52]	@ 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8005260:	68f8      	ldr	r0, [r7, #12]
            &obj->integer32, &buffer[offset_bits / 8U], &_size_bytes5_);
 8005262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005264:	08db      	lsrs	r3, r3, #3
        int8_t _err5_ = uavcan_primitive_array_Integer32_1_0_serialize_(
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4413      	add	r3, r2
 800526a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800526e:	4619      	mov	r1, r3
 8005270:	f7fe fc48 	bl	8003b04 <uavcan_primitive_array_Integer32_1_0_serialize_>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (_err5_ < 0)
 800527a:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 800527e:	2b00      	cmp	r3, #0
 8005280:	da02      	bge.n	8005288 <uavcan_register_Value_1_0_serialize_+0x1e0>
        {
            return _err5_;
 8005282:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8005286:	e16a      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8005288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800528e:	4413      	add	r3, r2
 8005290:	667b      	str	r3, [r7, #100]	@ 0x64
 8005292:	e134      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (6U == obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800529a:	2b06      	cmp	r3, #6
 800529c:	d11c      	bne.n	80052d8 <uavcan_register_Value_1_0_serialize_+0x230>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes6_ = 257UL;  // Nested object (max) size, in bytes.
 800529e:	f240 1301 	movw	r3, #257	@ 0x101
 80052a2:	633b      	str	r3, [r7, #48]	@ 0x30
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes6_) <= capacity_bytes);
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 80052a4:	68f8      	ldr	r0, [r7, #12]
            &obj->integer16, &buffer[offset_bits / 8U], &_size_bytes6_);
 80052a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052a8:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_primitive_array_Integer16_1_0_serialize_(
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4413      	add	r3, r2
 80052ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80052b2:	4619      	mov	r1, r3
 80052b4:	f7fe fb48 	bl	8003948 <uavcan_primitive_array_Integer16_1_0_serialize_>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if (_err6_ < 0)
 80052be:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	da02      	bge.n	80052cc <uavcan_register_Value_1_0_serialize_+0x224>
        {
            return _err6_;
 80052c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80052ca:	e148      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes6_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes6_ * 8U;  // Advance by the size of the nested object.
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052d2:	4413      	add	r3, r2
 80052d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80052d6:	e112      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (7U == obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80052de:	2b07      	cmp	r3, #7
 80052e0:	d11c      	bne.n	800531c <uavcan_register_Value_1_0_serialize_+0x274>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes7_ = 258UL;  // Nested object (max) size, in bytes.
 80052e2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes7_) <= capacity_bytes);
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 80052e8:	68f8      	ldr	r0, [r7, #12]
            &obj->integer8, &buffer[offset_bits / 8U], &_size_bytes7_);
 80052ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ec:	08db      	lsrs	r3, r3, #3
        int8_t _err7_ = uavcan_primitive_array_Integer8_1_0_serialize_(
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	4413      	add	r3, r2
 80052f2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80052f6:	4619      	mov	r1, r3
 80052f8:	f7fe fdc0 	bl	8003e7c <uavcan_primitive_array_Integer8_1_0_serialize_>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        if (_err7_ < 0)
 8005302:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8005306:	2b00      	cmp	r3, #0
 8005308:	da02      	bge.n	8005310 <uavcan_register_Value_1_0_serialize_+0x268>
        {
            return _err7_;
 800530a:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 800530e:	e126      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes7_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes7_ * 8U;  // Advance by the size of the nested object.
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005316:	4413      	add	r3, r2
 8005318:	667b      	str	r3, [r7, #100]	@ 0x64
 800531a:	e0f0      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (8U == obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005322:	2b08      	cmp	r3, #8
 8005324:	d11c      	bne.n	8005360 <uavcan_register_Value_1_0_serialize_+0x2b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes8_ = 257UL;  // Nested object (max) size, in bytes.
 8005326:	f240 1301 	movw	r3, #257	@ 0x101
 800532a:	62bb      	str	r3, [r7, #40]	@ 0x28
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes8_) <= capacity_bytes);
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 800532c:	68f8      	ldr	r0, [r7, #12]
            &obj->natural64, &buffer[offset_bits / 8U], &_size_bytes8_);
 800532e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005330:	08db      	lsrs	r3, r3, #3
        int8_t _err8_ = uavcan_primitive_array_Natural64_1_0_serialize_(
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4413      	add	r3, r2
 8005336:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800533a:	4619      	mov	r1, r3
 800533c:	f7ff f832 	bl	80043a4 <uavcan_primitive_array_Natural64_1_0_serialize_>
 8005340:	4603      	mov	r3, r0
 8005342:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
        if (_err8_ < 0)
 8005346:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 800534a:	2b00      	cmp	r3, #0
 800534c:	da02      	bge.n	8005354 <uavcan_register_Value_1_0_serialize_+0x2ac>
        {
            return _err8_;
 800534e:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 8005352:	e104      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes8_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes8_ * 8U;  // Advance by the size of the nested object.
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800535a:	4413      	add	r3, r2
 800535c:	667b      	str	r3, [r7, #100]	@ 0x64
 800535e:	e0ce      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (9U == obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005366:	2b09      	cmp	r3, #9
 8005368:	d11c      	bne.n	80053a4 <uavcan_register_Value_1_0_serialize_+0x2fc>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes9_ = 257UL;  // Nested object (max) size, in bytes.
 800536a:	f240 1301 	movw	r3, #257	@ 0x101
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes9_) <= capacity_bytes);
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8005370:	68f8      	ldr	r0, [r7, #12]
            &obj->natural32, &buffer[offset_bits / 8U], &_size_bytes9_);
 8005372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005374:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_primitive_array_Natural32_1_0_serialize_(
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	4413      	add	r3, r2
 800537a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800537e:	4619      	mov	r1, r3
 8005380:	f7fe ff32 	bl	80041e8 <uavcan_primitive_array_Natural32_1_0_serialize_>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
        if (_err9_ < 0)
 800538a:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 800538e:	2b00      	cmp	r3, #0
 8005390:	da02      	bge.n	8005398 <uavcan_register_Value_1_0_serialize_+0x2f0>
        {
            return _err9_;
 8005392:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 8005396:	e0e2      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes9_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes9_ * 8U;  // Advance by the size of the nested object.
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800539e:	4413      	add	r3, r2
 80053a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80053a2:	e0ac      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (10U == obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80053aa:	2b0a      	cmp	r3, #10
 80053ac:	d11c      	bne.n	80053e8 <uavcan_register_Value_1_0_serialize_+0x340>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes10_ = 257UL;  // Nested object (max) size, in bytes.
 80053ae:	f240 1301 	movw	r3, #257	@ 0x101
 80053b2:	623b      	str	r3, [r7, #32]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes10_) <= capacity_bytes);
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 80053b4:	68f8      	ldr	r0, [r7, #12]
            &obj->natural16, &buffer[offset_bits / 8U], &_size_bytes10_);
 80053b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053b8:	08db      	lsrs	r3, r3, #3
        int8_t _err10_ = uavcan_primitive_array_Natural16_1_0_serialize_(
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	4413      	add	r3, r2
 80053be:	f107 0220 	add.w	r2, r7, #32
 80053c2:	4619      	mov	r1, r3
 80053c4:	f7fe fe32 	bl	800402c <uavcan_primitive_array_Natural16_1_0_serialize_>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        if (_err10_ < 0)
 80053ce:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	da02      	bge.n	80053dc <uavcan_register_Value_1_0_serialize_+0x334>
        {
            return _err10_;
 80053d6:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 80053da:	e0c0      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes10_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes10_ * 8U;  // Advance by the size of the nested object.
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80053e2:	4413      	add	r3, r2
 80053e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80053e6:	e08a      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (11U == obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80053ee:	2b0b      	cmp	r3, #11
 80053f0:	d11c      	bne.n	800542c <uavcan_register_Value_1_0_serialize_+0x384>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2064ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes11_ = 258UL;  // Nested object (max) size, in bytes.
 80053f2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80053f6:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes11_) <= capacity_bytes);
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 80053f8:	68f8      	ldr	r0, [r7, #12]
            &obj->natural8, &buffer[offset_bits / 8U], &_size_bytes11_);
 80053fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053fc:	08db      	lsrs	r3, r3, #3
        int8_t _err11_ = uavcan_primitive_array_Natural8_1_0_serialize_(
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	4413      	add	r3, r2
 8005402:	f107 021c 	add.w	r2, r7, #28
 8005406:	4619      	mov	r1, r3
 8005408:	f7ff f8aa 	bl	8004560 <uavcan_primitive_array_Natural8_1_0_serialize_>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (_err11_ < 0)
 8005412:	f997 305c 	ldrsb.w	r3, [r7, #92]	@ 0x5c
 8005416:	2b00      	cmp	r3, #0
 8005418:	da02      	bge.n	8005420 <uavcan_register_Value_1_0_serialize_+0x378>
        {
            return _err11_;
 800541a:	f997 305c 	ldrsb.w	r3, [r7, #92]	@ 0x5c
 800541e:	e09e      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) >= 16ULL);
        NUNAVUT_ASSERT((_size_bytes11_ * 8U) <= 2064ULL);
        offset_bits += _size_bytes11_ * 8U;  // Advance by the size of the nested object.
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005426:	4413      	add	r3, r2
 8005428:	667b      	str	r3, [r7, #100]	@ 0x64
 800542a:	e068      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (12U == obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005432:	2b0c      	cmp	r3, #12
 8005434:	d11c      	bne.n	8005470 <uavcan_register_Value_1_0_serialize_+0x3c8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes12_ = 257UL;  // Nested object (max) size, in bytes.
 8005436:	f240 1301 	movw	r3, #257	@ 0x101
 800543a:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes12_) <= capacity_bytes);
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 800543c:	68f8      	ldr	r0, [r7, #12]
            &obj->real64, &buffer[offset_bits / 8U], &_size_bytes12_);
 800543e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005440:	08db      	lsrs	r3, r3, #3
        int8_t _err12_ = uavcan_primitive_array_Real64_1_0_serialize_(
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4413      	add	r3, r2
 8005446:	f107 0218 	add.w	r2, r7, #24
 800544a:	4619      	mov	r1, r3
 800544c:	f7ff fb5a 	bl	8004b04 <uavcan_primitive_array_Real64_1_0_serialize_>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        if (_err12_ < 0)
 8005456:	f997 305d 	ldrsb.w	r3, [r7, #93]	@ 0x5d
 800545a:	2b00      	cmp	r3, #0
 800545c:	da02      	bge.n	8005464 <uavcan_register_Value_1_0_serialize_+0x3bc>
        {
            return _err12_;
 800545e:	f997 305d 	ldrsb.w	r3, [r7, #93]	@ 0x5d
 8005462:	e07c      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes12_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes12_ * 8U;  // Advance by the size of the nested object.
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800546a:	4413      	add	r3, r2
 800546c:	667b      	str	r3, [r7, #100]	@ 0x64
 800546e:	e046      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (13U == obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005476:	2b0d      	cmp	r3, #13
 8005478:	d11c      	bne.n	80054b4 <uavcan_register_Value_1_0_serialize_+0x40c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes13_ = 257UL;  // Nested object (max) size, in bytes.
 800547a:	f240 1301 	movw	r3, #257	@ 0x101
 800547e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes13_) <= capacity_bytes);
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8005480:	68f8      	ldr	r0, [r7, #12]
            &obj->real32, &buffer[offset_bits / 8U], &_size_bytes13_);
 8005482:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005484:	08db      	lsrs	r3, r3, #3
        int8_t _err13_ = uavcan_primitive_array_Real32_1_0_serialize_(
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	4413      	add	r3, r2
 800548a:	f107 0214 	add.w	r2, r7, #20
 800548e:	4619      	mov	r1, r3
 8005490:	f7ff fa5a 	bl	8004948 <uavcan_primitive_array_Real32_1_0_serialize_>
 8005494:	4603      	mov	r3, r0
 8005496:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        if (_err13_ < 0)
 800549a:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da02      	bge.n	80054a8 <uavcan_register_Value_1_0_serialize_+0x400>
        {
            return _err13_;
 80054a2:	f997 305e 	ldrsb.w	r3, [r7, #94]	@ 0x5e
 80054a6:	e05a      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes13_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes13_ * 8U;  // Advance by the size of the nested object.
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054ae:	4413      	add	r3, r2
 80054b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80054b2:	e024      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else if (14U == obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80054ba:	2b0e      	cmp	r3, #14
 80054bc:	d11c      	bne.n	80054f8 <uavcan_register_Value_1_0_serialize_+0x450>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2056ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes14_ = 257UL;  // Nested object (max) size, in bytes.
 80054be:	f240 1301 	movw	r3, #257	@ 0x101
 80054c2:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes14_) <= capacity_bytes);
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80054c4:	68f8      	ldr	r0, [r7, #12]
            &obj->real16, &buffer[offset_bits / 8U], &_size_bytes14_);
 80054c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054c8:	08db      	lsrs	r3, r3, #3
        int8_t _err14_ = uavcan_primitive_array_Real16_1_0_serialize_(
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4413      	add	r3, r2
 80054ce:	f107 0210 	add.w	r2, r7, #16
 80054d2:	4619      	mov	r1, r3
 80054d4:	f7ff f91c 	bl	8004710 <uavcan_primitive_array_Real16_1_0_serialize_>
 80054d8:	4603      	mov	r3, r0
 80054da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        if (_err14_ < 0)
 80054de:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da02      	bge.n	80054ec <uavcan_register_Value_1_0_serialize_+0x444>
        {
            return _err14_;
 80054e6:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 80054ea:	e038      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes14_ * 8U) <= 2056ULL);
        offset_bits += _size_bytes14_ * 8U;  // Advance by the size of the nested object.
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054f2:	4413      	add	r3, r2
 80054f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80054f6:	e002      	b.n	80054fe <uavcan_register_Value_1_0_serialize_+0x456>
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 80054f8:	f06f 030a 	mvn.w	r3, #10
 80054fc:	e02f      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
    }

    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80054fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	2b00      	cmp	r3, #0
 8005506:	d025      	beq.n	8005554 <uavcan_register_Value_1_0_serialize_+0x4ac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f1c3 0308 	rsb	r3, r3, #8
 8005516:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err15_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800551a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800551e:	9302      	str	r3, [sp, #8]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9cd 2300 	strd	r2, r3, [sp]
 800552c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800552e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005530:	68b8      	ldr	r0, [r7, #8]
 8005532:	f7fd f939 	bl	80027a8 <nunavutSetUxx>
 8005536:	4603      	mov	r3, r0
 8005538:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        if (_err15_ < 0)
 800553c:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8005540:	2b00      	cmp	r3, #0
 8005542:	da02      	bge.n	800554a <uavcan_register_Value_1_0_serialize_+0x4a2>
        {
            return _err15_;
 8005544:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8005548:	e009      	b.n	800555e <uavcan_register_Value_1_0_serialize_+0x4b6>
        }
        offset_bits += _pad0_;
 800554a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800554e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005550:	4413      	add	r3, r2
 8005552:	667b      	str	r3, [r7, #100]	@ 0x64

    NUNAVUT_ASSERT(offset_bits >= 8ULL);
    NUNAVUT_ASSERT(offset_bits <= 2072ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005556:	08da      	lsrs	r2, r3, #3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3768      	adds	r7, #104	@ 0x68
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <uavcan_register_Value_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Value_1_0_deserialize_(
    uavcan_register_Value_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b09a      	sub	sp, #104	@ 0x68
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <uavcan_register_Value_1_0_deserialize_+0x26>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <uavcan_register_Value_1_0_deserialize_+0x26>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <uavcan_register_Value_1_0_deserialize_+0x2c>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <uavcan_register_Value_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800558e:	f06f 0301 	mvn.w	r3, #1
 8005592:	e29b      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
    }
    if (buffer == NULL)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <uavcan_register_Value_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 800559a:	4bb0      	ldr	r3, [pc, #704]	@ (800585c <uavcan_register_Value_1_0_deserialize_+0x2f4>)
 800559c:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	663b      	str	r3, [r7, #96]	@ 0x60
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 80055a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    size_t offset_bits = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	667b      	str	r3, [r7, #100]	@ 0x64

    // Union tag field: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 80055ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055b0:	3308      	adds	r3, #8
 80055b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d308      	bcc.n	80055ca <uavcan_register_Value_1_0_deserialize_+0x62>
    {
        out_obj->_tag_ = buffer[offset_bits / 8U] & 255U;
 80055b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ba:	08db      	lsrs	r3, r3, #3
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	4413      	add	r3, r2
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 80055c8:	e003      	b.n	80055d2 <uavcan_register_Value_1_0_deserialize_+0x6a>
    }
    else
    {
        out_obj->_tag_ = 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
    }
    offset_bits += 8U;
 80055d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055d4:	3308      	adds	r3, #8
 80055d6:	667b      	str	r3, [r7, #100]	@ 0x64

    if (0U == out_obj->_tag_)  // uavcan.primitive.Empty.1.0 empty
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d123      	bne.n	800562a <uavcan_register_Value_1_0_deserialize_+0xc2>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes15_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80055e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fc ffcd 	bl	8002588 <nunavutChooseMin>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	64bb      	str	r3, [r7, #72]	@ 0x48
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 80055f6:	68f8      	ldr	r0, [r7, #12]
                &out_obj->empty, &buffer[offset_bits / 8U], &_size_bytes15_);
 80055f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055fa:	08db      	lsrs	r3, r3, #3
            const int8_t _err16_ = uavcan_primitive_Empty_1_0_deserialize_(
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	4413      	add	r3, r2
 8005600:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8005604:	4619      	mov	r1, r3
 8005606:	f7ff fb77 	bl	8004cf8 <uavcan_primitive_Empty_1_0_deserialize_>
 800560a:	4603      	mov	r3, r0
 800560c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
            if (_err16_ < 0)
 8005610:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8005614:	2b00      	cmp	r3, #0
 8005616:	da02      	bge.n	800561e <uavcan_register_Value_1_0_deserialize_+0xb6>
            {
                return _err16_;
 8005618:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800561c:	e256      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes15_ * 8U;  // Advance by the size of the nested serialized representation.
 800561e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005624:	4413      	add	r3, r2
 8005626:	667b      	str	r3, [r7, #100]	@ 0x64
 8005628:	e242      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (1U == out_obj->_tag_)  // uavcan.primitive.String.1.0 string
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005630:	2b01      	cmp	r3, #1
 8005632:	d123      	bne.n	800567c <uavcan_register_Value_1_0_deserialize_+0x114>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes16_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800563a:	4618      	mov	r0, r3
 800563c:	f7fc ffa4 	bl	8002588 <nunavutChooseMin>
 8005640:	4602      	mov	r2, r0
 8005642:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	647b      	str	r3, [r7, #68]	@ 0x44
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 8005648:	68f8      	ldr	r0, [r7, #12]
                &out_obj->_string, &buffer[offset_bits / 8U], &_size_bytes16_);
 800564a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800564c:	08db      	lsrs	r3, r3, #3
            const int8_t _err17_ = uavcan_primitive_String_1_0_deserialize_(
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4413      	add	r3, r2
 8005652:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8005656:	4619      	mov	r1, r3
 8005658:	f7ff fbee 	bl	8004e38 <uavcan_primitive_String_1_0_deserialize_>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
            if (_err17_ < 0)
 8005662:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8005666:	2b00      	cmp	r3, #0
 8005668:	da02      	bge.n	8005670 <uavcan_register_Value_1_0_deserialize_+0x108>
            {
                return _err17_;
 800566a:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 800566e:	e22d      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes16_ * 8U;  // Advance by the size of the nested serialized representation.
 8005670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005676:	4413      	add	r3, r2
 8005678:	667b      	str	r3, [r7, #100]	@ 0x64
 800567a:	e219      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (2U == out_obj->_tag_)  // uavcan.primitive.Unstructured.1.0 unstructured
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005682:	2b02      	cmp	r3, #2
 8005684:	d123      	bne.n	80056ce <uavcan_register_Value_1_0_deserialize_+0x166>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes17_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005686:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005688:	08db      	lsrs	r3, r3, #3
 800568a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800568c:	4618      	mov	r0, r3
 800568e:	f7fc ff7b 	bl	8002588 <nunavutChooseMin>
 8005692:	4602      	mov	r2, r0
 8005694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	643b      	str	r3, [r7, #64]	@ 0x40
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 800569a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->unstructured, &buffer[offset_bits / 8U], &_size_bytes17_);
 800569c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800569e:	08db      	lsrs	r3, r3, #3
            const int8_t _err18_ = uavcan_primitive_Unstructured_1_0_deserialize_(
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	4413      	add	r3, r2
 80056a4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80056a8:	4619      	mov	r1, r3
 80056aa:	f7ff fc9d 	bl	8004fe8 <uavcan_primitive_Unstructured_1_0_deserialize_>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if (_err18_ < 0)
 80056b4:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	da02      	bge.n	80056c2 <uavcan_register_Value_1_0_deserialize_+0x15a>
            {
                return _err18_;
 80056bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80056c0:	e204      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes17_ * 8U;  // Advance by the size of the nested serialized representation.
 80056c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80056c8:	4413      	add	r3, r2
 80056ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80056cc:	e1f0      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (3U == out_obj->_tag_)  // uavcan.primitive.array.Bit.1.0 bit
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d123      	bne.n	8005720 <uavcan_register_Value_1_0_deserialize_+0x1b8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes18_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80056d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056da:	08db      	lsrs	r3, r3, #3
 80056dc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fc ff52 	bl	8002588 <nunavutChooseMin>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 80056ec:	68f8      	ldr	r0, [r7, #12]
                &out_obj->bit, &buffer[offset_bits / 8U], &_size_bytes18_);
 80056ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056f0:	08db      	lsrs	r3, r3, #3
            const int8_t _err19_ = uavcan_primitive_array_Bit_1_0_deserialize_(
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	4413      	add	r3, r2
 80056f6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80056fa:	4619      	mov	r1, r3
 80056fc:	f7fe f8c6 	bl	800388c <uavcan_primitive_array_Bit_1_0_deserialize_>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
            if (_err19_ < 0)
 8005706:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 800570a:	2b00      	cmp	r3, #0
 800570c:	da02      	bge.n	8005714 <uavcan_register_Value_1_0_deserialize_+0x1ac>
            {
                return _err19_;
 800570e:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8005712:	e1db      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes18_ * 8U;  // Advance by the size of the nested serialized representation.
 8005714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800571a:	4413      	add	r3, r2
 800571c:	667b      	str	r3, [r7, #100]	@ 0x64
 800571e:	e1c7      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (4U == out_obj->_tag_)  // uavcan.primitive.array.Integer64.1.0 integer64
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005726:	2b04      	cmp	r3, #4
 8005728:	d123      	bne.n	8005772 <uavcan_register_Value_1_0_deserialize_+0x20a>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes19_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800572a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800572c:	08db      	lsrs	r3, r3, #3
 800572e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005730:	4618      	mov	r0, r3
 8005732:	f7fc ff29 	bl	8002588 <nunavutChooseMin>
 8005736:	4602      	mov	r2, r0
 8005738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	63bb      	str	r3, [r7, #56]	@ 0x38
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 800573e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer64, &buffer[offset_bits / 8U], &_size_bytes19_);
 8005740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005742:	08db      	lsrs	r3, r3, #3
            const int8_t _err20_ = uavcan_primitive_array_Integer64_1_0_deserialize_(
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	4413      	add	r3, r2
 8005748:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800574c:	4619      	mov	r1, r3
 800574e:	f7fe fb2d 	bl	8003dac <uavcan_primitive_array_Integer64_1_0_deserialize_>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
            if (_err20_ < 0)
 8005758:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 800575c:	2b00      	cmp	r3, #0
 800575e:	da02      	bge.n	8005766 <uavcan_register_Value_1_0_deserialize_+0x1fe>
            {
                return _err20_;
 8005760:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8005764:	e1b2      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes19_ * 8U;  // Advance by the size of the nested serialized representation.
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800576c:	4413      	add	r3, r2
 800576e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005770:	e19e      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (5U == out_obj->_tag_)  // uavcan.primitive.array.Integer32.1.0 integer32
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005778:	2b05      	cmp	r3, #5
 800577a:	d123      	bne.n	80057c4 <uavcan_register_Value_1_0_deserialize_+0x25c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes20_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800577c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800577e:	08db      	lsrs	r3, r3, #3
 8005780:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005782:	4618      	mov	r0, r3
 8005784:	f7fc ff00 	bl	8002588 <nunavutChooseMin>
 8005788:	4602      	mov	r2, r0
 800578a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	637b      	str	r3, [r7, #52]	@ 0x34
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8005790:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer32, &buffer[offset_bits / 8U], &_size_bytes20_);
 8005792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005794:	08db      	lsrs	r3, r3, #3
            const int8_t _err21_ = uavcan_primitive_array_Integer32_1_0_deserialize_(
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4413      	add	r3, r2
 800579a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800579e:	4619      	mov	r1, r3
 80057a0:	f7fe fa26 	bl	8003bf0 <uavcan_primitive_array_Integer32_1_0_deserialize_>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (_err21_ < 0)
 80057aa:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	da02      	bge.n	80057b8 <uavcan_register_Value_1_0_deserialize_+0x250>
            {
                return _err21_;
 80057b2:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80057b6:	e189      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes20_ * 8U;  // Advance by the size of the nested serialized representation.
 80057b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80057be:	4413      	add	r3, r2
 80057c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80057c2:	e175      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (6U == out_obj->_tag_)  // uavcan.primitive.array.Integer16.1.0 integer16
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d123      	bne.n	8005816 <uavcan_register_Value_1_0_deserialize_+0x2ae>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes21_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80057ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057d0:	08db      	lsrs	r3, r3, #3
 80057d2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fc fed7 	bl	8002588 <nunavutChooseMin>
 80057da:	4602      	mov	r2, r0
 80057dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	633b      	str	r3, [r7, #48]	@ 0x30
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 80057e2:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer16, &buffer[offset_bits / 8U], &_size_bytes21_);
 80057e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057e6:	08db      	lsrs	r3, r3, #3
            const int8_t _err22_ = uavcan_primitive_array_Integer16_1_0_deserialize_(
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4413      	add	r3, r2
 80057ec:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80057f0:	4619      	mov	r1, r3
 80057f2:	f7fe f91f 	bl	8003a34 <uavcan_primitive_array_Integer16_1_0_deserialize_>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            if (_err22_ < 0)
 80057fc:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8005800:	2b00      	cmp	r3, #0
 8005802:	da02      	bge.n	800580a <uavcan_register_Value_1_0_deserialize_+0x2a2>
            {
                return _err22_;
 8005804:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8005808:	e160      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes21_ * 8U;  // Advance by the size of the nested serialized representation.
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005810:	4413      	add	r3, r2
 8005812:	667b      	str	r3, [r7, #100]	@ 0x64
 8005814:	e14c      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (7U == out_obj->_tag_)  // uavcan.primitive.array.Integer8.1.0 integer8
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800581c:	2b07      	cmp	r3, #7
 800581e:	d125      	bne.n	800586c <uavcan_register_Value_1_0_deserialize_+0x304>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes22_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005822:	08db      	lsrs	r3, r3, #3
 8005824:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005826:	4618      	mov	r0, r3
 8005828:	f7fc feae 	bl	8002588 <nunavutChooseMin>
 800582c:	4602      	mov	r2, r0
 800582e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	62fb      	str	r3, [r7, #44]	@ 0x2c
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 8005834:	68f8      	ldr	r0, [r7, #12]
                &out_obj->integer8, &buffer[offset_bits / 8U], &_size_bytes22_);
 8005836:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005838:	08db      	lsrs	r3, r3, #3
            const int8_t _err23_ = uavcan_primitive_array_Integer8_1_0_deserialize_(
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4413      	add	r3, r2
 800583e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005842:	4619      	mov	r1, r3
 8005844:	f7fe fb92 	bl	8003f6c <uavcan_primitive_array_Integer8_1_0_deserialize_>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            if (_err23_ < 0)
 800584e:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 8005852:	2b00      	cmp	r3, #0
 8005854:	da04      	bge.n	8005860 <uavcan_register_Value_1_0_deserialize_+0x2f8>
            {
                return _err23_;
 8005856:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 800585a:	e137      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
 800585c:	08018a20 	.word	0x08018a20
            }
            offset_bits += _size_bytes22_ * 8U;  // Advance by the size of the nested serialized representation.
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005866:	4413      	add	r3, r2
 8005868:	667b      	str	r3, [r7, #100]	@ 0x64
 800586a:	e121      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (8U == out_obj->_tag_)  // uavcan.primitive.array.Natural64.1.0 natural64
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005872:	2b08      	cmp	r3, #8
 8005874:	d123      	bne.n	80058be <uavcan_register_Value_1_0_deserialize_+0x356>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes23_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005878:	08db      	lsrs	r3, r3, #3
 800587a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800587c:	4618      	mov	r0, r3
 800587e:	f7fc fe83 	bl	8002588 <nunavutChooseMin>
 8005882:	4602      	mov	r2, r0
 8005884:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 800588a:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural64, &buffer[offset_bits / 8U], &_size_bytes23_);
 800588c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800588e:	08db      	lsrs	r3, r3, #3
            const int8_t _err24_ = uavcan_primitive_array_Natural64_1_0_deserialize_(
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	4413      	add	r3, r2
 8005894:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005898:	4619      	mov	r1, r3
 800589a:	f7fe fdf9 	bl	8004490 <uavcan_primitive_array_Natural64_1_0_deserialize_>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            if (_err24_ < 0)
 80058a4:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da02      	bge.n	80058b2 <uavcan_register_Value_1_0_deserialize_+0x34a>
            {
                return _err24_;
 80058ac:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 80058b0:	e10c      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes23_ * 8U;  // Advance by the size of the nested serialized representation.
 80058b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80058b8:	4413      	add	r3, r2
 80058ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80058bc:	e0f8      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (9U == out_obj->_tag_)  // uavcan.primitive.array.Natural32.1.0 natural32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80058c4:	2b09      	cmp	r3, #9
 80058c6:	d123      	bne.n	8005910 <uavcan_register_Value_1_0_deserialize_+0x3a8>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes24_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80058c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fc fe5a 	bl	8002588 <nunavutChooseMin>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 80058dc:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural32, &buffer[offset_bits / 8U], &_size_bytes24_);
 80058de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e0:	08db      	lsrs	r3, r3, #3
            const int8_t _err25_ = uavcan_primitive_array_Natural32_1_0_deserialize_(
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	4413      	add	r3, r2
 80058e6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80058ea:	4619      	mov	r1, r3
 80058ec:	f7fe fcf2 	bl	80042d4 <uavcan_primitive_array_Natural32_1_0_deserialize_>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
            if (_err25_ < 0)
 80058f6:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da02      	bge.n	8005904 <uavcan_register_Value_1_0_deserialize_+0x39c>
            {
                return _err25_;
 80058fe:	f997 3056 	ldrsb.w	r3, [r7, #86]	@ 0x56
 8005902:	e0e3      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes24_ * 8U;  // Advance by the size of the nested serialized representation.
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800590a:	4413      	add	r3, r2
 800590c:	667b      	str	r3, [r7, #100]	@ 0x64
 800590e:	e0cf      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (10U == out_obj->_tag_)  // uavcan.primitive.array.Natural16.1.0 natural16
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005916:	2b0a      	cmp	r3, #10
 8005918:	d123      	bne.n	8005962 <uavcan_register_Value_1_0_deserialize_+0x3fa>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes25_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800591a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800591c:	08db      	lsrs	r3, r3, #3
 800591e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005920:	4618      	mov	r0, r3
 8005922:	f7fc fe31 	bl	8002588 <nunavutChooseMin>
 8005926:	4602      	mov	r2, r0
 8005928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	623b      	str	r3, [r7, #32]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 800592e:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural16, &buffer[offset_bits / 8U], &_size_bytes25_);
 8005930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005932:	08db      	lsrs	r3, r3, #3
            const int8_t _err26_ = uavcan_primitive_array_Natural16_1_0_deserialize_(
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	4413      	add	r3, r2
 8005938:	f107 0220 	add.w	r2, r7, #32
 800593c:	4619      	mov	r1, r3
 800593e:	f7fe fbeb 	bl	8004118 <uavcan_primitive_array_Natural16_1_0_deserialize_>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            if (_err26_ < 0)
 8005948:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800594c:	2b00      	cmp	r3, #0
 800594e:	da02      	bge.n	8005956 <uavcan_register_Value_1_0_deserialize_+0x3ee>
            {
                return _err26_;
 8005950:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005954:	e0ba      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes25_ * 8U;  // Advance by the size of the nested serialized representation.
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800595c:	4413      	add	r3, r2
 800595e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005960:	e0a6      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (11U == out_obj->_tag_)  // uavcan.primitive.array.Natural8.1.0 natural8
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005968:	2b0b      	cmp	r3, #11
 800596a:	d123      	bne.n	80059b4 <uavcan_register_Value_1_0_deserialize_+0x44c>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes26_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 800596c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800596e:	08db      	lsrs	r3, r3, #3
 8005970:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005972:	4618      	mov	r0, r3
 8005974:	f7fc fe08 	bl	8002588 <nunavutChooseMin>
 8005978:	4602      	mov	r2, r0
 800597a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	61fb      	str	r3, [r7, #28]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005980:	68f8      	ldr	r0, [r7, #12]
                &out_obj->natural8, &buffer[offset_bits / 8U], &_size_bytes26_);
 8005982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005984:	08db      	lsrs	r3, r3, #3
            const int8_t _err27_ = uavcan_primitive_array_Natural8_1_0_deserialize_(
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4413      	add	r3, r2
 800598a:	f107 021c 	add.w	r2, r7, #28
 800598e:	4619      	mov	r1, r3
 8005990:	f7fe fe5e 	bl	8004650 <uavcan_primitive_array_Natural8_1_0_deserialize_>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            if (_err27_ < 0)
 800599a:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da02      	bge.n	80059a8 <uavcan_register_Value_1_0_deserialize_+0x440>
            {
                return _err27_;
 80059a2:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 80059a6:	e091      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes26_ * 8U;  // Advance by the size of the nested serialized representation.
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80059ae:	4413      	add	r3, r2
 80059b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80059b2:	e07d      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (12U == out_obj->_tag_)  // uavcan.primitive.array.Real64.1.0 real64
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80059ba:	2b0c      	cmp	r3, #12
 80059bc:	d123      	bne.n	8005a06 <uavcan_register_Value_1_0_deserialize_+0x49e>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes27_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 80059be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fc fddf 	bl	8002588 <nunavutChooseMin>
 80059ca:	4602      	mov	r2, r0
 80059cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80059d2:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real64, &buffer[offset_bits / 8U], &_size_bytes27_);
 80059d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059d6:	08db      	lsrs	r3, r3, #3
            const int8_t _err28_ = uavcan_primitive_array_Real64_1_0_deserialize_(
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	4413      	add	r3, r2
 80059dc:	f107 0218 	add.w	r2, r7, #24
 80059e0:	4619      	mov	r1, r3
 80059e2:	f7ff f905 	bl	8004bf0 <uavcan_primitive_array_Real64_1_0_deserialize_>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
            if (_err28_ < 0)
 80059ec:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	da02      	bge.n	80059fa <uavcan_register_Value_1_0_deserialize_+0x492>
            {
                return _err28_;
 80059f4:	f997 3059 	ldrsb.w	r3, [r7, #89]	@ 0x59
 80059f8:	e068      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes27_ * 8U;  // Advance by the size of the nested serialized representation.
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a00:	4413      	add	r3, r2
 8005a02:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a04:	e054      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (13U == out_obj->_tag_)  // uavcan.primitive.array.Real32.1.0 real32
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005a0c:	2b0d      	cmp	r3, #13
 8005a0e:	d123      	bne.n	8005a58 <uavcan_register_Value_1_0_deserialize_+0x4f0>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes28_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005a10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a12:	08db      	lsrs	r3, r3, #3
 8005a14:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fc fdb6 	bl	8002588 <nunavutChooseMin>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8005a24:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real32, &buffer[offset_bits / 8U], &_size_bytes28_);
 8005a26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a28:	08db      	lsrs	r3, r3, #3
            const int8_t _err29_ = uavcan_primitive_array_Real32_1_0_deserialize_(
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f107 0214 	add.w	r2, r7, #20
 8005a32:	4619      	mov	r1, r3
 8005a34:	f7fe fffe 	bl	8004a34 <uavcan_primitive_array_Real32_1_0_deserialize_>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
            if (_err29_ < 0)
 8005a3e:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da02      	bge.n	8005a4c <uavcan_register_Value_1_0_deserialize_+0x4e4>
            {
                return _err29_;
 8005a46:	f997 305a 	ldrsb.w	r3, [r7, #90]	@ 0x5a
 8005a4a:	e03f      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes28_ * 8U;  // Advance by the size of the nested serialized representation.
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a52:	4413      	add	r3, r2
 8005a54:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a56:	e02b      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else if (14U == out_obj->_tag_)  // uavcan.primitive.array.Real16.1.0 real16
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8005a5e:	2b0e      	cmp	r3, #14
 8005a60:	d123      	bne.n	8005aaa <uavcan_register_Value_1_0_deserialize_+0x542>
    {
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        {
            size_t _size_bytes29_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005a62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a64:	08db      	lsrs	r3, r3, #3
 8005a66:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fc fd8d 	bl	8002588 <nunavutChooseMin>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
            NUNAVUT_ASSERT(offset_bits % 8U == 0U);
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005a76:	68f8      	ldr	r0, [r7, #12]
                &out_obj->real16, &buffer[offset_bits / 8U], &_size_bytes29_);
 8005a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a7a:	08db      	lsrs	r3, r3, #3
            const int8_t _err30_ = uavcan_primitive_array_Real16_1_0_deserialize_(
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f107 0210 	add.w	r2, r7, #16
 8005a84:	4619      	mov	r1, r3
 8005a86:	f7fe feed 	bl	8004864 <uavcan_primitive_array_Real16_1_0_deserialize_>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
            if (_err30_ < 0)
 8005a90:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	da02      	bge.n	8005a9e <uavcan_register_Value_1_0_deserialize_+0x536>
            {
                return _err30_;
 8005a98:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 8005a9c:	e016      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
            }
            offset_bits += _size_bytes29_ * 8U;  // Advance by the size of the nested serialized representation.
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005aa4:	4413      	add	r3, r2
 8005aa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005aa8:	e002      	b.n	8005ab0 <uavcan_register_Value_1_0_deserialize_+0x548>
        }
    }
    else
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_UNION_TAG;
 8005aaa:	f06f 030a 	mvn.w	r3, #10
 8005aae:	e00d      	b.n	8005acc <uavcan_register_Value_1_0_deserialize_+0x564>
    }

    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ab2:	3307      	adds	r3, #7
 8005ab4:	f023 0307 	bic.w	r3, r3, #7
 8005ab8:	667b      	str	r3, [r7, #100]	@ 0x64
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005aba:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8005abc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8005abe:	f7fc fd63 	bl	8002588 <nunavutChooseMin>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	08da      	lsrs	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3768      	adds	r7, #104	@ 0x68
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_time_SynchronizedTimestamp_1_0_serialize_(
    const uavcan_time_SynchronizedTimestamp_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08c      	sub	sp, #48	@ 0x30
 8005ad8:	af04      	add	r7, sp, #16
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x1e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005af2:	f06f 0301 	mvn.w	r3, #1
 8005af6:	e043      	b.n	8005b80 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	2b37      	cmp	r3, #55	@ 0x37
 8005b04:	d802      	bhi.n	8005b0c <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005b06:	f06f 0302 	mvn.w	r3, #2
 8005b0a:	e039      	b.n	8005b80 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61fb      	str	r3, [r7, #28]


    {   // truncated uint56 microsecond
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        (void) memmove(&buffer[offset_bits / 8U], &obj->microsecond, 7U);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	08db      	lsrs	r3, r3, #3
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	4413      	add	r3, r2
 8005b18:	68f9      	ldr	r1, [r7, #12]
 8005b1a:	2207      	movs	r2, #7
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f00e ff4e 	bl	80149be <memmove>
        offset_bits += 56U;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	3338      	adds	r3, #56	@ 0x38
 8005b26:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d021      	beq.n	8005b76 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xa2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	f1c3 0308 	rsb	r3, r3, #8
 8005b40:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	9302      	str	r3, [sp, #8]
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	e9cd 2300 	strd	r2, r3, [sp]
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	69b9      	ldr	r1, [r7, #24]
 8005b56:	68b8      	ldr	r0, [r7, #8]
 8005b58:	f7fc fe26 	bl	80027a8 <nunavutSetUxx>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005b60:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	da02      	bge.n	8005b6e <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0x9a>
        {
            return _err0_;
 8005b68:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005b6c:	e008      	b.n	8005b80 <uavcan_time_SynchronizedTimestamp_1_0_serialize_+0xac>
        }
        offset_bits += _pad0_;
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	08da      	lsrs	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <uavcan_register_Access_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Request_1_0_deserialize_(
    uavcan_register_Access_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	@ 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <uavcan_register_Access_Request_1_0_deserialize_+0x26>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <uavcan_register_Access_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005bae:	f06f 0301 	mvn.w	r3, #1
 8005bb2:	e065      	b.n	8005c80 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
    }
    if (buffer == NULL)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <uavcan_register_Access_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005bba:	4b33      	ldr	r3, [pc, #204]	@ (8005c88 <uavcan_register_Access_Request_1_0_deserialize_+0x100>)
 8005bbc:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	623b      	str	r3, [r7, #32]
    size_t offset_bits = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Name.1.0 name
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes2_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	08db      	lsrs	r3, r3, #3
 8005bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fc fcd7 	bl	8002588 <nunavutChooseMin>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	1a9b      	subs	r3, r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005be2:	68f8      	ldr	r0, [r7, #12]
            &out_obj->name, &buffer[offset_bits / 8U], &_size_bytes2_);
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	08db      	lsrs	r3, r3, #3
        const int8_t _err4_ = uavcan_register_Name_1_0_deserialize_(
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	4413      	add	r3, r2
 8005bec:	f107 0214 	add.w	r2, r7, #20
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f7fd fd6d 	bl	80036d0 <uavcan_register_Name_1_0_deserialize_>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	76fb      	strb	r3, [r7, #27]
        if (_err4_ < 0)
 8005bfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da02      	bge.n	8005c08 <uavcan_register_Access_Request_1_0_deserialize_+0x80>
        {
            return _err4_;
 8005c02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005c06:	e03b      	b.n	8005c80 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested serialized representation.
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	4413      	add	r3, r2
 8005c10:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	3307      	adds	r3, #7
 8005c16:	f023 0307 	bic.w	r3, r3, #7
 8005c1a:	61fb      	str	r3, [r7, #28]

    // uavcan.register.Value.1.0 value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    {
        size_t _size_bytes3_ = (size_t)(capacity_bytes - nunavutChooseMin((offset_bits / 8U), capacity_bytes));
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	08db      	lsrs	r3, r3, #3
 8005c20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fc fcb0 	bl	8002588 <nunavutChooseMin>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 7084 	add.w	r0, r3, #264	@ 0x108
            &out_obj->value, &buffer[offset_bits / 8U], &_size_bytes3_);
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	08db      	lsrs	r3, r3, #3
        const int8_t _err5_ = uavcan_register_Value_1_0_deserialize_(
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f107 0210 	add.w	r2, r7, #16
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7ff fc90 	bl	8005568 <uavcan_register_Value_1_0_deserialize_>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	76bb      	strb	r3, [r7, #26]
        if (_err5_ < 0)
 8005c4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da02      	bge.n	8005c5a <uavcan_register_Access_Request_1_0_deserialize_+0xd2>
        {
            return _err5_;
 8005c54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005c58:	e012      	b.n	8005c80 <uavcan_register_Access_Request_1_0_deserialize_+0xf8>
        }
        offset_bits += _size_bytes3_ * 8U;  // Advance by the size of the nested serialized representation.
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	61fb      	str	r3, [r7, #28]
    }


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3307      	adds	r3, #7
 8005c68:	f023 0307 	bic.w	r3, r3, #7
 8005c6c:	61fb      	str	r3, [r7, #28]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8005c6e:	6a39      	ldr	r1, [r7, #32]
 8005c70:	69f8      	ldr	r0, [r7, #28]
 8005c72:	f7fc fc89 	bl	8002588 <nunavutChooseMin>
 8005c76:	4603      	mov	r3, r0
 8005c78:	08da      	lsrs	r2, r3, #3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);

    return NUNAVUT_SUCCESS;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3728      	adds	r7, #40	@ 0x28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	08018a20 	.word	0x08018a20

08005c8c <uavcan_register_Access_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_register_Access_Response_1_0_serialize_(
    const uavcan_register_Access_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08e      	sub	sp, #56	@ 0x38
 8005c90:	af04      	add	r7, sp, #16
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <uavcan_register_Access_Response_1_0_serialize_+0x1e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <uavcan_register_Access_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005caa:	f06f 0301 	mvn.w	r3, #1
 8005cae:	e0f0      	b.n	8005e92 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 2136UL)
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	f640 0257 	movw	r2, #2135	@ 0x857
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d802      	bhi.n	8005cc8 <uavcan_register_Access_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005cc2:	f06f 0302 	mvn.w	r3, #2
 8005cc6:	e0e4      	b.n	8005e92 <uavcan_register_Access_Response_1_0_serialize_+0x206>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.time.SynchronizedTimestamp.1.0 timestamp
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 56ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes4_ = 7UL;  // Nested object (max) size, in bytes.
 8005ccc:	2307      	movs	r3, #7
 8005cce:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes4_) <= capacity_bytes);
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8005cd0:	68f8      	ldr	r0, [r7, #12]
            &obj->timestamp, &buffer[offset_bits / 8U], &_size_bytes4_);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	08db      	lsrs	r3, r3, #3
        int8_t _err6_ = uavcan_time_SynchronizedTimestamp_1_0_serialize_(
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f107 0214 	add.w	r2, r7, #20
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f7ff fef8 	bl	8005ad4 <uavcan_time_SynchronizedTimestamp_1_0_serialize_>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	77fb      	strb	r3, [r7, #31]
        if (_err6_ < 0)
 8005ce8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	da02      	bge.n	8005cf6 <uavcan_register_Access_Response_1_0_serialize_+0x6a>
        {
            return _err6_;
 8005cf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005cf4:	e0cd      	b.n	8005e92 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes4_ * 8U) == 56ULL);
        offset_bits += _size_bytes4_ * 8U;  // Advance by the size of the nested object.
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfc:	4413      	add	r3, r2
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24


    {   // saturated bool mutable
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        buffer[offset_bits / 8U] = obj->_mutable ? 1U : 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	7a1b      	ldrb	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <uavcan_register_Access_Response_1_0_serialize_+0x80>
 8005d08:	2101      	movs	r1, #1
 8005d0a:	e000      	b.n	8005d0e <uavcan_register_Access_Response_1_0_serialize_+0x82>
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	08db      	lsrs	r3, r3, #3
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4413      	add	r3, r2
 8005d16:	460a      	mov	r2, r1
 8005d18:	701a      	strb	r2, [r3, #0]
        offset_bits += 1U;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24



    {   // saturated bool persistent
        NUNAVUT_ASSERT((offset_bits + 1ULL) <= (capacity_bytes * 8U));
        if (obj->persistent)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	7a5b      	ldrb	r3, [r3, #9]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d013      	beq.n	8005d50 <uavcan_register_Access_Response_1_0_serialize_+0xc4>
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] | (1U << (offset_bits % 8U)));
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	08db      	lsrs	r3, r3, #3
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	4413      	add	r3, r2
 8005d30:	7819      	ldrb	r1, [r3, #0]
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	2201      	movs	r2, #1
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	08db      	lsrs	r3, r3, #3
 8005d44:	68b8      	ldr	r0, [r7, #8]
 8005d46:	4403      	add	r3, r0
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	e014      	b.n	8005d7a <uavcan_register_Access_Response_1_0_serialize_+0xee>
        }
        else
        {
            buffer[offset_bits / 8U] = (uint8_t)(buffer[offset_bits / 8U] & ~(1U << (offset_bits % 8U)));
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	08db      	lsrs	r3, r3, #3
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	4413      	add	r3, r2
 8005d58:	7819      	ldrb	r1, [r3, #0]
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	2201      	movs	r2, #1
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	08db      	lsrs	r3, r3, #3
 8005d70:	68b8      	ldr	r0, [r7, #8]
 8005d72:	4403      	add	r3, r0
 8005d74:	400a      	ands	r2, r1
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
        }
        offset_bits += 1U;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24



    {   // void6
        NUNAVUT_ASSERT((offset_bits + 6ULL) <= (capacity_bytes * 8U));
        const int8_t _err7_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, 6U);  // Optimize?
 8005d80:	2306      	movs	r3, #6
 8005d82:	9302      	str	r3, [sp, #8]
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	e9cd 2300 	strd	r2, r3, [sp]
 8005d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d92:	6a39      	ldr	r1, [r7, #32]
 8005d94:	68b8      	ldr	r0, [r7, #8]
 8005d96:	f7fc fd07 	bl	80027a8 <nunavutSetUxx>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	77bb      	strb	r3, [r7, #30]
        if (_err7_ < 0)
 8005d9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da02      	bge.n	8005dac <uavcan_register_Access_Response_1_0_serialize_+0x120>
        {
            return _err7_;
 8005da6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005daa:	e072      	b.n	8005e92 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += 6UL;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	3306      	adds	r3, #6
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d021      	beq.n	8005e00 <uavcan_register_Access_Response_1_0_serialize_+0x174>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f1c3 0308 	rsb	r3, r3, #8
 8005dca:	777b      	strb	r3, [r7, #29]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err8_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8005dcc:	7f7b      	ldrb	r3, [r7, #29]
 8005dce:	9302      	str	r3, [sp, #8]
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	e9cd 2300 	strd	r2, r3, [sp]
 8005ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dde:	6a39      	ldr	r1, [r7, #32]
 8005de0:	68b8      	ldr	r0, [r7, #8]
 8005de2:	f7fc fce1 	bl	80027a8 <nunavutSetUxx>
 8005de6:	4603      	mov	r3, r0
 8005de8:	773b      	strb	r3, [r7, #28]
        if (_err8_ < 0)
 8005dea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da02      	bge.n	8005df8 <uavcan_register_Access_Response_1_0_serialize_+0x16c>
        {
            return _err8_;
 8005df2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005df6:	e04c      	b.n	8005e92 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad2_;
 8005df8:	7f7b      	ldrb	r3, [r7, #29]
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dfc:	4413      	add	r3, r2
 8005dfe:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.register.Value.1.0 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2072ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes5_ = 259UL;  // Nested object (max) size, in bytes.
 8005e00:	f240 1303 	movw	r3, #259	@ 0x103
 8005e04:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes5_) <= capacity_bytes);
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f103 0010 	add.w	r0, r3, #16
            &obj->value, &buffer[offset_bits / 8U], &_size_bytes5_);
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	08db      	lsrs	r3, r3, #3
        int8_t _err9_ = uavcan_register_Value_1_0_serialize_(
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	4413      	add	r3, r2
 8005e14:	f107 0210 	add.w	r2, r7, #16
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f7ff f945 	bl	80050a8 <uavcan_register_Value_1_0_serialize_>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	76fb      	strb	r3, [r7, #27]
        if (_err9_ < 0)
 8005e22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	da02      	bge.n	8005e30 <uavcan_register_Access_Response_1_0_serialize_+0x1a4>
        {
            return _err9_;
 8005e2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e2e:	e030      	b.n	8005e92 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) >= 8ULL);
        NUNAVUT_ASSERT((_size_bytes5_ * 8U) <= 2072ULL);
        offset_bits += _size_bytes5_ * 8U;  // Advance by the size of the nested object.
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e36:	4413      	add	r3, r2
 8005e38:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d021      	beq.n	8005e88 <uavcan_register_Access_Response_1_0_serialize_+0x1fc>
    {
        const uint8_t _pad3_ = (uint8_t)(8U - offset_bits % 8U);
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f1c3 0308 	rsb	r3, r3, #8
 8005e52:	76bb      	strb	r3, [r7, #26]
        NUNAVUT_ASSERT(_pad3_ > 0);
        const int8_t _err10_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad3_);  // Optimize?
 8005e54:	7ebb      	ldrb	r3, [r7, #26]
 8005e56:	9302      	str	r3, [sp, #8]
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	e9cd 2300 	strd	r2, r3, [sp]
 8005e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e66:	6a39      	ldr	r1, [r7, #32]
 8005e68:	68b8      	ldr	r0, [r7, #8]
 8005e6a:	f7fc fc9d 	bl	80027a8 <nunavutSetUxx>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	767b      	strb	r3, [r7, #25]
        if (_err10_ < 0)
 8005e72:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	da02      	bge.n	8005e80 <uavcan_register_Access_Response_1_0_serialize_+0x1f4>
        {
            return _err10_;
 8005e7a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005e7e:	e008      	b.n	8005e92 <uavcan_register_Access_Response_1_0_serialize_+0x206>
        }
        offset_bits += _pad3_;
 8005e80:	7ebb      	ldrb	r3, [r7, #26]
 8005e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e84:	4413      	add	r3, r2
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24

    NUNAVUT_ASSERT(offset_bits >= 72ULL);
    NUNAVUT_ASSERT(offset_bits <= 2136ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	08da      	lsrs	r2, r3, #3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3728      	adds	r7, #40	@ 0x28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b08c      	sub	sp, #48	@ 0x30
 8005e9e:	af04      	add	r7, sp, #16
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <uavcan_node_Version_1_0_serialize_+0x1e>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <uavcan_node_Version_1_0_serialize_+0x1e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <uavcan_node_Version_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005eb8:	f06f 0301 	mvn.w	r3, #1
 8005ebc:	e04b      	b.n	8005f56 <uavcan_node_Version_1_0_serialize_+0xbc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	2b0f      	cmp	r3, #15
 8005eca:	d802      	bhi.n	8005ed2 <uavcan_node_Version_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005ecc:	f06f 0302 	mvn.w	r3, #2
 8005ed0:	e041      	b.n	8005f56 <uavcan_node_Version_1_0_serialize_+0xbc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	08db      	lsrs	r3, r3, #3
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	61fb      	str	r3, [r7, #28]

    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	08db      	lsrs	r3, r3, #3
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	7852      	ldrb	r2, [r2, #1]
 8005ef6:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	3308      	adds	r3, #8
 8005efc:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d021      	beq.n	8005f4c <uavcan_node_Version_1_0_serialize_+0xb2>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f1c3 0308 	rsb	r3, r3, #8
 8005f16:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	9302      	str	r3, [sp, #8]
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9cd 2300 	strd	r2, r3, [sp]
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	69b9      	ldr	r1, [r7, #24]
 8005f2c:	68b8      	ldr	r0, [r7, #8]
 8005f2e:	f7fc fc3b 	bl	80027a8 <nunavutSetUxx>
 8005f32:	4603      	mov	r3, r0
 8005f34:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8005f36:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da02      	bge.n	8005f44 <uavcan_node_Version_1_0_serialize_+0xaa>
        {
            return _err0_;
 8005f3e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005f42:	e008      	b.n	8005f56 <uavcan_node_Version_1_0_serialize_+0xbc>
        }
        offset_bits += _pad0_;
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 16ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	08da      	lsrs	r2, r3, #3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d006      	beq.n	8005f86 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005f86:	f06f 0301 	mvn.w	r3, #1
 8005f8a:	e008      	b.n	8005f9e <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8005f92:	4b06      	ldr	r3, [pc, #24]	@ (8005fac <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8005f94:	60bb      	str	r3, [r7, #8]
    }

    *inout_buffer_size_bytes = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	08018a20 	.word	0x08018a20

08005fb0 <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b090      	sub	sp, #64	@ 0x40
 8005fb4:	af04      	add	r7, sp, #16
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8005fce:	f06f 0301 	mvn.w	r3, #1
 8005fd2:	e16b      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	f640 12c7 	movw	r2, #2503	@ 0x9c7
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d802      	bhi.n	8005fec <uavcan_node_GetInfo_Response_1_0_serialize_+0x3c>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8005fe6:	f06f 0302 	mvn.w	r3, #2
 8005fea:	e15f      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005ff4:	68f8      	ldr	r0, [r7, #12]
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 8005ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff8:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f107 0218 	add.w	r2, r7, #24
 8006002:	4619      	mov	r1, r3
 8006004:	f7ff ff49 	bl	8005e9a <uavcan_node_Version_1_0_serialize_>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (_err0_ < 0)
 800600e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006012:	2b00      	cmp	r3, #0
 8006014:	da02      	bge.n	800601c <uavcan_node_GetInfo_Response_1_0_serialize_+0x6c>
        {
            return _err0_;
 8006016:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800601a:	e147      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006022:	4413      	add	r3, r2
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8006026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	2b00      	cmp	r3, #0
 800602e:	d025      	beq.n	800607c <uavcan_node_GetInfo_Response_1_0_serialize_+0xcc>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8006030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f1c3 0308 	rsb	r3, r3, #8
 800603e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8006042:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006046:	9302      	str	r3, [sp, #8]
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	e9cd 2300 	strd	r2, r3, [sp]
 8006054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006058:	68b8      	ldr	r0, [r7, #8]
 800605a:	f7fc fba5 	bl	80027a8 <nunavutSetUxx>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (_err1_ < 0)
 8006064:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006068:	2b00      	cmp	r3, #0
 800606a:	da02      	bge.n	8006072 <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
        {
            return _err1_;
 800606c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006070:	e11c      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad0_;
 8006072:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006078:	4413      	add	r3, r2
 800607a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 800607c:	2302      	movs	r3, #2
 800607e:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	4413      	add	r3, r2
 800608c:	f107 0214 	add.w	r2, r7, #20
 8006090:	4619      	mov	r1, r3
 8006092:	f7ff ff02 	bl	8005e9a <uavcan_node_Version_1_0_serialize_>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (_err2_ < 0)
 800609c:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	da02      	bge.n	80060aa <uavcan_node_GetInfo_Response_1_0_serialize_+0xfa>
        {
            return _err2_;
 80060a4:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80060a8:	e100      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060b0:	4413      	add	r3, r2
 80060b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d025      	beq.n	800610a <uavcan_node_GetInfo_Response_1_0_serialize_+0x15a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 80060be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f1c3 0308 	rsb	r3, r3, #8
 80060cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 80060d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060d4:	9302      	str	r3, [sp, #8]
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	e9cd 2300 	strd	r2, r3, [sp]
 80060e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060e6:	68b8      	ldr	r0, [r7, #8]
 80060e8:	f7fc fb5e 	bl	80027a8 <nunavutSetUxx>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err3_ < 0)
 80060f2:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	da02      	bge.n	8006100 <uavcan_node_GetInfo_Response_1_0_serialize_+0x150>
        {
            return _err3_;
 80060fa:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80060fe:	e0d5      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad1_;
 8006100:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006106:	4413      	add	r3, r2
 8006108:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 800610a:	2302      	movs	r3, #2
 800610c:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4413      	add	r3, r2
 800611a:	f107 0210 	add.w	r2, r7, #16
 800611e:	4619      	mov	r1, r3
 8006120:	f7ff febb 	bl	8005e9a <uavcan_node_Version_1_0_serialize_>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err4_ < 0)
 800612a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800612e:	2b00      	cmp	r3, #0
 8006130:	da02      	bge.n	8006138 <uavcan_node_GetInfo_Response_1_0_serialize_+0x188>
        {
            return _err4_;
 8006132:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006136:	e0b9      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800613e:	4413      	add	r3, r2
 8006140:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 8006142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006144:	08db      	lsrs	r3, r3, #3
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	18d0      	adds	r0, r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3308      	adds	r3, #8
 800614e:	2208      	movs	r2, #8
 8006150:	4619      	mov	r1, r3
 8006152:	f00e fc34 	bl	80149be <memmove>
        offset_bits += 64U;
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	3340      	adds	r3, #64	@ 0x40
 800615a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3310      	adds	r3, #16
 8006160:	2200      	movs	r2, #0
 8006162:	9200      	str	r2, [sp, #0]
 8006164:	2280      	movs	r2, #128	@ 0x80
 8006166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006168:	68b8      	ldr	r0, [r7, #8]
 800616a:	f7fc fa39 	bl	80025e0 <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	3380      	adds	r3, #128	@ 0x80
 8006172:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
        if (obj->name.count > 50)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006178:	2b32      	cmp	r3, #50	@ 0x32
 800617a:	d902      	bls.n	8006182 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1d2>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800617c:	f06f 0309 	mvn.w	r3, #9
 8006180:	e094      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006188:	08db      	lsrs	r3, r3, #3
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	b2ca      	uxtb	r2, r1
 8006190:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8006192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006194:	3308      	adds	r3, #8
 8006196:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619c:	00da      	lsls	r2, r3, #3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3320      	adds	r3, #32
 80061a2:	2100      	movs	r1, #0
 80061a4:	9100      	str	r1, [sp, #0]
 80061a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061a8:	68b8      	ldr	r0, [r7, #8]
 80061aa:	f7fc fa19 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061b6:	4413      	add	r3, r2
 80061b8:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
        if (obj->software_image_crc.count > 1)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d902      	bls.n	80061c8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x218>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80061c2:	f06f 0309 	mvn.w	r3, #9
 80061c6:	e071      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80061cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ce:	08db      	lsrs	r3, r3, #3
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	4413      	add	r3, r2
 80061d4:	b2ca      	uxtb	r2, r1
 80061d6:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	3308      	adds	r3, #8
 80061dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e2:	019a      	lsls	r2, r3, #6
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3358      	adds	r3, #88	@ 0x58
 80061e8:	2100      	movs	r1, #0
 80061ea:	9100      	str	r1, [sp, #0]
 80061ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061ee:	68b8      	ldr	r0, [r7, #8]
 80061f0:	f7fc f9f6 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f8:	019b      	lsls	r3, r3, #6
 80061fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061fc:	4413      	add	r3, r2
 80061fe:	62fb      	str	r3, [r7, #44]	@ 0x2c


    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
        if (obj->certificate_of_authenticity.count > 222)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006206:	2bde      	cmp	r3, #222	@ 0xde
 8006208:	d902      	bls.n	8006210 <uavcan_node_GetInfo_Response_1_0_serialize_+0x260>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800620a:	f06f 0309 	mvn.w	r3, #9
 800620e:	e04d      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8d3 1148 	ldr.w	r1, [r3, #328]	@ 0x148
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	08db      	lsrs	r3, r3, #3
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	b2ca      	uxtb	r2, r1
 8006220:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8006222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006224:	3308      	adds	r3, #8
 8006226:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800622e:	00da      	lsls	r2, r3, #3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3368      	adds	r3, #104	@ 0x68
 8006234:	2100      	movs	r1, #0
 8006236:	9100      	str	r1, [sp, #0]
 8006238:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800623a:	68b8      	ldr	r0, [r7, #8]
 800623c:	f7fc f9d0 	bl	80025e0 <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624a:	4413      	add	r3, r2
 800624c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	2b00      	cmp	r3, #0
 8006256:	d024      	beq.n	80062a2 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2f2>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8006258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f1c3 0308 	rsb	r3, r3, #8
 8006266:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 800626a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800626e:	9302      	str	r3, [sp, #8]
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	e9cd 2300 	strd	r2, r3, [sp]
 800627c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800627e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006280:	68b8      	ldr	r0, [r7, #8]
 8006282:	f7fc fa91 	bl	80027a8 <nunavutSetUxx>
 8006286:	4603      	mov	r3, r0
 8006288:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 800628a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800628e:	2b00      	cmp	r3, #0
 8006290:	da02      	bge.n	8006298 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2e8>
        {
            return _err5_;
 8006292:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006296:	e009      	b.n	80062ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x2fc>
        }
        offset_bits += _pad2_;
 8006298:	f897 3020 	ldrb.w	r3, [r7, #32]
 800629c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800629e:	4413      	add	r3, r2
 80062a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    NUNAVUT_ASSERT(offset_bits >= 264ULL);
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80062a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a4:	08da      	lsrs	r2, r3, #3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3730      	adds	r7, #48	@ 0x30
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 faff 	bl	80078c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
      { }
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	f7fb ffa3 	bl	800223a <Error_Handler>
 80062f4:	bf00      	nop
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <micros_64>:
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 80062f8:	b5b0      	push	{r4, r5, r7, lr}
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	f004 fa1e 	bl	800a73c <HAL_GetTick>
 8006300:	4603      	mov	r3, r0
 8006302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	2200      	movs	r2, #0
 800630c:	461c      	mov	r4, r3
 800630e:	4615      	mov	r5, r2
 8006310:	4622      	mov	r2, r4
 8006312:	462b      	mov	r3, r5
 8006314:	4610      	mov	r0, r2
 8006316:	4619      	mov	r1, r3
 8006318:	bdb0      	pop	{r4, r5, r7, pc}

0800631a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	1d1a      	adds	r2, r3, #4
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	3304      	adds	r3, #4
 8006334:	4619      	mov	r1, r3
 8006336:	4610      	mov	r0, r2
 8006338:	f001 fb36 	bl	80079a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	4611      	mov	r1, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff ffdf 	bl	800631a <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff ff9f 	bl	80062b4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
UtilityConfig utilities(micros_64, error_handler);

class HBeatReader: public AbstractSubscription<HBeat> {
public:
    HBeatReader(InterfacePtr interface): AbstractSubscription<HBeat>(interface,
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
        uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_
    ) {};
 800638a:	687c      	ldr	r4, [r7, #4]
 800638c:	f107 0308 	add.w	r3, r7, #8
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff ffd7 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8006398:	f107 0308 	add.w	r3, r7, #8
 800639c:	f641 5255 	movw	r2, #7509	@ 0x1d55
 80063a0:	4619      	mov	r1, r3
 80063a2:	4620      	mov	r0, r4
 80063a4:	f001 fb17 	bl	80079d6 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff ffda 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 80063b2:	4a04      	ldr	r2, [pc, #16]	@ (80063c4 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd90      	pop	{r4, r7, pc}
 80063c2:	bf00      	nop
 80063c4:	08018aa8 	.word	0x08018aa8

080063c8 <_ZN11HBeatReader7handlerERK25uavcan_node_Heartbeat_1_0P16CanardRxTransfer>:
    void handler(const uavcan_node_Heartbeat_1_0& hbeat, CanardRxTransfer* transfer) override {}
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	bf00      	nop
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>:

HBeatReader* h_reader;

class JSReader: public AbstractSubscription<JS_msg> {
public:
	JSReader(InterfacePtr interface): AbstractSubscription<JS_msg>(interface,
 80063e0:	b590      	push	{r4, r7, lr}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
        // Тут параметры - port_id, transfer kind или только port_id
		JS_SUB_PORT_ID
    ) {};
 80063ea:	687c      	ldr	r4, [r7, #4]
 80063ec:	f107 0308 	add.w	r3, r7, #8
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff ffa7 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80063f8:	f107 0308 	add.w	r3, r7, #8
 80063fc:	f240 4261 	movw	r2, #1121	@ 0x461
 8006400:	4619      	mov	r1, r3
 8006402:	4620      	mov	r0, r4
 8006404:	f001 fb05 	bl	8007a12 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>
 8006408:	f107 0308 	add.w	r3, r7, #8
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff ffaa 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006412:	4a04      	ldr	r2, [pc, #16]	@ (8006424 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	bd90      	pop	{r4, r7, pc}
 8006422:	bf00      	nop
 8006424:	08018a88 	.word	0x08018a88

08006428 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer>:
    void handler(const reg_udral_physics_kinematics_rotation_Planar_0_1& js_in, CanardRxTransfer* transfer) override
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
    {

    	vel = js_in.angular_velocity.radian_per_second;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4a25      	ldr	r2, [pc, #148]	@ (80064d0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0xa8>)
 800643a:	6013      	str	r3, [r2, #0]
    	pos = js_in.angular_position.radian;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a24      	ldr	r2, [pc, #144]	@ (80064d4 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0xac>)
 8006442:	6013      	str	r3, [r2, #0]
//    		tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
//    	}

    	//New version POS-VEL control

    	if(js_in.angular_velocity.radian_per_second)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	edd3 7a01 	vldr	s15, [r3, #4]
 800644a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800644e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006452:	d020      	beq.n	8006496 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0x6e>
    	{
        	tmc5160_velocity(rad_to_steps(js_in.angular_velocity.radian_per_second, jc.full_steps));
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	edd3 7a01 	vldr	s15, [r3, #4]
 800645a:	4b1f      	ldr	r3, [pc, #124]	@ (80064d8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0xb0>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	4618      	mov	r0, r3
 8006460:	eeb0 0a67 	vmov.f32	s0, s15
 8006464:	f004 f8b0 	bl	800a5c8 <rad_to_steps>
 8006468:	4603      	mov	r3, r0
 800646a:	4618      	mov	r0, r3
 800646c:	f003 fcb4 	bl	8009dd8 <tmc5160_velocity>
        	tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	edd3 7a00 	vldr	s15, [r3]
 8006476:	4b18      	ldr	r3, [pc, #96]	@ (80064d8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0xb0>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	eeb0 0a67 	vmov.f32	s0, s15
 8006480:	f004 f8a2 	bl	800a5c8 <rad_to_steps>
 8006484:	4603      	mov	r3, r0
 8006486:	4618      	mov	r0, r3
 8006488:	f003 fb98 	bl	8009bbc <tmc5160_position>
    		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800648c:	2104      	movs	r1, #4
 800648e:	4813      	ldr	r0, [pc, #76]	@ (80064dc <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0xb4>)
 8006490:	f005 fb3a 	bl	800bb08 <HAL_GPIO_TogglePin>
    	{
			tmc5160_velocity(rad_to_steps(10000, jc.full_steps));
			tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
    	}

    }
 8006494:	e018      	b.n	80064c8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0xa0>
			tmc5160_velocity(rad_to_steps(10000, jc.full_steps));
 8006496:	4b10      	ldr	r3, [pc, #64]	@ (80064d8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0xb0>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	4618      	mov	r0, r3
 800649c:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80064e0 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0xb8>
 80064a0:	f004 f892 	bl	800a5c8 <rad_to_steps>
 80064a4:	4603      	mov	r3, r0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f003 fc96 	bl	8009dd8 <tmc5160_velocity>
			tmc5160_position(rad_to_steps(js_in.angular_position.radian, jc.full_steps));
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	edd3 7a00 	vldr	s15, [r3]
 80064b2:	4b09      	ldr	r3, [pc, #36]	@ (80064d8 <_ZN8JSReader7handlerERK48reg_udral_physics_kinematics_rotation_Planar_0_1P16CanardRxTransfer+0xb0>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	4618      	mov	r0, r3
 80064b8:	eeb0 0a67 	vmov.f32	s0, s15
 80064bc:	f004 f884 	bl	800a5c8 <rad_to_steps>
 80064c0:	4603      	mov	r3, r0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f003 fb7a 	bl	8009bbc <tmc5160_position>
    }
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20000474 	.word	0x20000474
 80064d4:	20000478 	.word	0x20000478
 80064d8:	20000440 	.word	0x20000440
 80064dc:	48000c00 	.word	0x48000c00
 80064e0:	461c4000 	.word	0x461c4000

080064e4 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>:
RegisterListReader* reg_list_service;


class NodeInfoReader : public AbstractSubscription<NodeInfoRequest> {
public:
    NodeInfoReader(InterfacePtr interface): AbstractSubscription<NodeInfoRequest>(
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 80064ee:	687c      	ldr	r4, [r7, #4]
 80064f0:	f107 0308 	add.w	r3, r7, #8
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff ff25 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80064fc:	f107 0108 	add.w	r1, r7, #8
 8006500:	2302      	movs	r3, #2
 8006502:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8006506:	4620      	mov	r0, r4
 8006508:	f001 fab2 	bl	8007a70 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 800650c:	f107 0308 	add.w	r3, r7, #8
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff ff28 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006516:	4a04      	ldr	r2, [pc, #16]	@ (8006528 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	bd90      	pop	{r4, r7, pc}
 8006526:	bf00      	nop
 8006528:	08018a68 	.word	0x08018a68

0800652c <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer>:
NodeInfoReader* nireader;

void NodeInfoReader::handler(
    const uavcan_node_GetInfo_Request_1_0& object,
    CanardRxTransfer* transfer
) {
 800652c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006530:	b0e7      	sub	sp, #412	@ 0x19c
 8006532:	af06      	add	r7, sp, #24
 8006534:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006538:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800653c:	6018      	str	r0, [r3, #0]
 800653e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006542:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8006546:	6019      	str	r1, [r3, #0]
 8006548:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800654c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8006550:	601a      	str	r2, [r3, #0]
        &node_info_response,
        node_info_buf,
        transfer,
        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_
    );
}
 8006552:	466b      	mov	r3, sp
 8006554:	461e      	mov	r6, r3
    NodeInfoResponse::Type node_info_response = {
 8006556:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800655a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800655e:	4618      	mov	r0, r3
 8006560:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8006564:	461a      	mov	r2, r3
 8006566:	2100      	movs	r1, #0
 8006568:	f00e fa43 	bl	80149f2 <memset>
 800656c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006570:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800657c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006580:	2201      	movs	r2, #1
 8006582:	709a      	strb	r2, [r3, #2]
 8006584:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006588:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800658c:	2201      	movs	r2, #1
 800658e:	715a      	strb	r2, [r3, #5]
    node_info_response.certificate_of_authenticity.count = 0;
 8006590:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006594:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006598:	2200      	movs	r2, #0
 800659a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    node_info_response.software_image_crc.count = 0;
 800659e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80065a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80065a6:	2200      	movs	r2, #0
 80065a8:	661a      	str	r2, [r3, #96]	@ 0x60
    size_t name_len = 8;
 80065aa:	2308      	movs	r3, #8
 80065ac:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    char joint_name[name_len];
 80065b0:	f8d7 117c 	ldr.w	r1, [r7, #380]	@ 0x17c
 80065b4:	460b      	mov	r3, r1
 80065b6:	3b01      	subs	r3, #1
 80065b8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80065bc:	2300      	movs	r3, #0
 80065be:	4688      	mov	r8, r1
 80065c0:	4699      	mov	r9, r3
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065d6:	2300      	movs	r3, #0
 80065d8:	460c      	mov	r4, r1
 80065da:	461d      	mov	r5, r3
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	00eb      	lsls	r3, r5, #3
 80065e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ea:	00e2      	lsls	r2, r4, #3
 80065ec:	1dcb      	adds	r3, r1, #7
 80065ee:	08db      	lsrs	r3, r3, #3
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	ebad 0d03 	sub.w	sp, sp, r3
 80065f6:	ab06      	add	r3, sp, #24
 80065f8:	3300      	adds	r3, #0
 80065fa:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    std::sprintf(joint_name,"joint_%d", JOINT_N);
 80065fe:	2201      	movs	r2, #1
 8006600:	4939      	ldr	r1, [pc, #228]	@ (80066e8 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1bc>)
 8006602:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8006606:	f00e f967 	bl	80148d8 <siprintf>
    memcpy(node_info_response.name.elements, joint_name, name_len);
 800660a:	f107 0320 	add.w	r3, r7, #32
 800660e:	3320      	adds	r3, #32
 8006610:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8006614:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8006618:	4618      	mov	r0, r3
 800661a:	f00e fad0 	bl	8014bbe <memcpy>
    node_info_response.name.count = name_len;
 800661e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006622:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006626:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800662a:	655a      	str	r2, [r3, #84]	@ 0x54
    uint32_t word0 = 1;
 800662c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006630:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]
    uint32_t word1 = 2;
 8006638:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800663c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006640:	2202      	movs	r2, #2
 8006642:	601a      	str	r2, [r3, #0]
    uint32_t word2 = 3;
 8006644:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006648:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800664c:	2203      	movs	r2, #3
 800664e:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id, &word0, 4);
 8006650:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006654:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800665e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006662:	611a      	str	r2, [r3, #16]
    memcpy(node_info_response.unique_id + 4, &word1, 4);
 8006664:	f107 0320 	add.w	r3, r7, #32
 8006668:	3310      	adds	r3, #16
 800666a:	3304      	adds	r3, #4
 800666c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8006670:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	601a      	str	r2, [r3, #0]
    memcpy(node_info_response.unique_id + 8, &word2, 4);
 8006678:	f107 0320 	add.w	r3, r7, #32
 800667c:	3310      	adds	r3, #16
 800667e:	3308      	adds	r3, #8
 8006680:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8006684:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	601a      	str	r2, [r3, #0]
    node_info_response.unique_id[0] = JOINT_N;
 800668c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8006690:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006694:	2201      	movs	r2, #1
 8006696:	741a      	strb	r2, [r3, #16]
    interface->send_response<NodeInfoResponse>(
 8006698:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800669c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 fa14 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80066ac:	4604      	mov	r4, r0
 80066ae:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80066b2:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80066b6:	f107 0020 	add.w	r0, r7, #32
 80066ba:	2304      	movs	r3, #4
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	4a0b      	ldr	r2, [pc, #44]	@ (80066ec <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c0>)
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066c8:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	680b      	ldr	r3, [r1, #0]
 80066d0:	4a07      	ldr	r2, [pc, #28]	@ (80066f0 <_ZN14NodeInfoReader7handlerERK31uavcan_node_GetInfo_Request_1_0P16CanardRxTransfer+0x1c4>)
 80066d2:	4601      	mov	r1, r0
 80066d4:	4620      	mov	r0, r4
 80066d6:	f001 fa09 	bl	8007aec <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
 80066da:	46b5      	mov	sp, r6
}
 80066dc:	bf00      	nop
 80066de:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 80066e2:	46bd      	mov	sp, r7
 80066e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066e8:	08018a18 	.word	0x08018a18
 80066ec:	000f4240 	.word	0x000f4240
 80066f0:	2000050c 	.word	0x2000050c

080066f4 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>:



class RegisterAccessReader : public AbstractSubscription<RegisterAccessRequest> {
public:
    RegisterAccessReader(InterfacePtr interface): AbstractSubscription<RegisterAccessRequest>(
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
        interface,
        uavcan_register_Access_1_0_FIXED_PORT_ID_,
        CanardTransferKindRequest
    ) {};
 80066fe:	687c      	ldr	r4, [r7, #4]
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fe1d 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800670c:	f107 0108 	add.w	r1, r7, #8
 8006710:	2302      	movs	r3, #2
 8006712:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8006716:	4620      	mov	r0, r4
 8006718:	f001 fa32 	bl	8007b80 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fe20 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8006726:	4a04      	ldr	r2, [pc, #16]	@ (8006738 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE+0x44>)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	bd90      	pop	{r4, r7, pc}
 8006736:	bf00      	nop
 8006738:	08018a48 	.word	0x08018a48

0800673c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer>:
uint8_t type_reg_name[TYPE_REG_NAME_LEN + 1] = "type"; //UINT8 _tag_ == 11

void RegisterAccessReader::handler(
    const uavcan_register_Access_Request_1_0& register_access_request,
    CanardRxTransfer* transfer
) {
 800673c:	b590      	push	{r4, r7, lr}
 800673e:	f2ad 5d84 	subw	sp, sp, #1412	@ 0x584
 8006742:	af06      	add	r7, sp, #24
 8006744:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006748:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 800674c:	6018      	str	r0, [r3, #0]
 800674e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006752:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006756:	6019      	str	r1, [r3, #0]
 8006758:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800675c:	f2a3 5364 	subw	r3, r3, #1380	@ 0x564
 8006760:	601a      	str	r2, [r3, #0]
    static uint8_t register_access_response_buf[RegisterAccessResponse::buffer_size];
    RegisterAccessResponse::Type register_access_response = {};
 8006762:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006766:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800676a:	4618      	mov	r0, r3
 800676c:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8006770:	461a      	mov	r2, r3
 8006772:	2100      	movs	r1, #0
 8006774:	f00e f93d 	bl	80149f2 <memset>

    register_access_response.timestamp.microsecond = micros_64();
 8006778:	f7ff fdbe 	bl	80062f8 <micros_64>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006784:	f5a1 710e 	sub.w	r1, r1, #568	@ 0x238
 8006788:	e9c1 2300 	strd	r2, r3, [r1]
    uavcan_register_Value_1_0 value = {};
 800678c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006790:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006794:	4618      	mov	r0, r3
 8006796:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800679a:	461a      	mov	r2, r3
 800679c:	2100      	movs	r1, #0
 800679e:	f00e f928 	bl	80149f2 <memset>
    uint64_t tv = 0; //PZDC!!!! temp value...
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80067ae:	e9c1 2300 	strd	r2, r3, [r1]
    int32_t js_pos_v = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
    if (memcmp(register_access_request.name.name.elements, test_reg_name, TEST_REG_NAME_LEN) == 0)
 80067b8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067bc:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2204      	movs	r2, #4
 80067c4:	49c2      	ldr	r1, [pc, #776]	@ (8006ad0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x394>)
 80067c6:	4618      	mov	r0, r3
 80067c8:	f00e f8e9 	bl	801499e <memcmp>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d15c      	bne.n	800688c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x150>
    {
        if (register_access_request.value._tag_ == 4) {
 80067d2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067d6:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d113      	bne.n	800680c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xd0>
        	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80067e4:	2104      	movs	r1, #4
 80067e6:	48bb      	ldr	r0, [pc, #748]	@ (8006ad4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 80067e8:	f005 f98e 	bl	800bb08 <HAL_GPIO_TogglePin>
//            if (register_access_request.value.integer64.value.elements[0] != 0)
//            {
            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
 80067ec:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80067f0:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 80067fa:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80067fe:	e9c1 2300 	strd	r2, r3, [r1]
            	tmc5160_move(tv);
 8006802:	f8d7 3560 	ldr.w	r3, [r7, #1376]	@ 0x560
 8006806:	4618      	mov	r0, r3
 8006808:	f003 fa0a 	bl	8009c20 <tmc5160_move>
//            	tv = register_access_request.value.integer64.value.elements[0];  //PZDC!!!
//            	tmc5160_move(0);
//            }
        }

        register_access_response.persistent = true;
 800680c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006810:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006814:	2201      	movs	r2, #1
 8006816:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006818:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800681c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006820:	2201      	movs	r2, #1
 8006822:	721a      	strb	r2, [r3, #8]
        value._tag_ = 4;
 8006824:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006828:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800682c:	2204      	movs	r2, #4
 800682e:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer64_1_0 result = {};
 8006832:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006836:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800683a:	4618      	mov	r0, r3
 800683c:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8006840:	461a      	mov	r2, r3
 8006842:	2100      	movs	r1, #0
 8006844:	f00e f8d5 	bl	80149f2 <memset>
        result.value.elements[0] = tv; //PZDC!!!
 8006848:	f507 63ac 	add.w	r3, r7, #1376	@ 0x560
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006854:	f5a1 61ab 	sub.w	r1, r1, #1368	@ 0x558
 8006858:	e9c1 2300 	strd	r2, r3, [r1]
        result.value.count = 1;
 800685c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006860:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006864:	2201      	movs	r2, #1
 8006866:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer64 = result;
 800686a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800686e:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006872:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006876:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800687a:	4610      	mov	r0, r2
 800687c:	4619      	mov	r1, r3
 800687e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8006882:	461a      	mov	r2, r3
 8006884:	f00e f99b 	bl	8014bbe <memcpy>
 8006888:	f000 bcf7 	b.w	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else if (memcmp(register_access_request.name.name.elements, move_reg_name, MOVE_REG_NAME_LEN) == 0) {
 800688c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006890:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2204      	movs	r2, #4
 8006898:	498f      	ldr	r1, [pc, #572]	@ (8006ad8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x39c>)
 800689a:	4618      	mov	r0, r3
 800689c:	f00e f87f 	bl	801499e <memcmp>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d168      	bne.n	8006978 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x23c>

    	int32_t pos = register_access_request.value.integer32.value.elements[0];
 80068a6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80068aa:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80068b4:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
    	int32_t rv;
    	if (pos > jc.upper_limit_ticks && pos < jc.lower_limit_ticks)
 80068b8:	4b88      	ldr	r3, [pc, #544]	@ (8006adc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a0>)
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 80068c0:	429a      	cmp	r2, r3
 80068c2:	dd0e      	ble.n	80068e2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1a6>
 80068c4:	4b85      	ldr	r3, [pc, #532]	@ (8006adc <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a0>)
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 80068cc:	429a      	cmp	r2, r3
 80068ce:	da08      	bge.n	80068e2 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1a6>
    	{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80068d0:	2201      	movs	r2, #1
 80068d2:	2104      	movs	r1, #4
 80068d4:	487f      	ldr	r0, [pc, #508]	@ (8006ad4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 80068d6:	f005 f8ff 	bl	800bad8 <HAL_GPIO_WritePin>
    		rv = 1;
 80068da:	2301      	movs	r3, #1
 80068dc:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 80068e0:	e009      	b.n	80068f6 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x1ba>
    	}
    	else
    	{
    		tmc5160_move(pos);
 80068e2:	f8d7 0558 	ldr.w	r0, [r7, #1368]	@ 0x558
 80068e6:	f003 f99b 	bl	8009c20 <tmc5160_move>
    		js.move = 1;
 80068ea:	4b7d      	ldr	r3, [pc, #500]	@ (8006ae0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a4>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	709a      	strb	r2, [r3, #2]
    		rv = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
    	}

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80068f6:	2104      	movs	r1, #4
 80068f8:	4876      	ldr	r0, [pc, #472]	@ (8006ad4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 80068fa:	f005 f905 	bl	800bb08 <HAL_GPIO_TogglePin>

		//response
        register_access_response.persistent = true;
 80068fe:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006902:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006906:	2201      	movs	r2, #1
 8006908:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 800690a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800690e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006912:	2201      	movs	r2, #1
 8006914:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 8006916:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800691a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800691e:	2209      	movs	r2, #9
 8006920:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 8006924:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006928:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800692c:	4618      	mov	r0, r3
 800692e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006932:	461a      	mov	r2, r3
 8006934:	2100      	movs	r1, #0
 8006936:	f00e f85c 	bl	80149f2 <memset>
        result.value.elements[0] = tv;
 800693a:	f8d7 2560 	ldr.w	r2, [r7, #1376]	@ 0x560
 800693e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006942:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006946:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006948:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800694c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006950:	2201      	movs	r2, #1
 8006952:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer32 = result;
 8006956:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800695a:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800695e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006962:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006966:	4610      	mov	r0, r2
 8006968:	4619      	mov	r1, r3
 800696a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800696e:	461a      	mov	r2, r3
 8006970:	f00e f925 	bl	8014bbe <memcpy>
 8006974:	f000 bc81 	b.w	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else if (memcmp(register_access_request.name.name.elements, pos_reg_name, POS_REG_NAME_LEN) == 0) {
 8006978:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800697c:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2203      	movs	r2, #3
 8006984:	4957      	ldr	r1, [pc, #348]	@ (8006ae4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3a8>)
 8006986:	4618      	mov	r0, r3
 8006988:	f00e f809 	bl	801499e <memcmp>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d150      	bne.n	8006a34 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x2f8>

		tmc5160_set_default_vel();
 8006992:	f003 f9bd 	bl	8009d10 <tmc5160_set_default_vel>
		tmc5160_position(register_access_request.value.integer32.value.elements[0]);
 8006996:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800699a:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80069a4:	4618      	mov	r0, r3
 80069a6:	f003 f909 	bl	8009bbc <tmc5160_position>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80069aa:	2104      	movs	r1, #4
 80069ac:	4849      	ldr	r0, [pc, #292]	@ (8006ad4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 80069ae:	f005 f8ab 	bl	800bb08 <HAL_GPIO_TogglePin>
		js_pos_v = tmc5160_position_read();
 80069b2:	f003 fab7 	bl	8009f24 <tmc5160_position_read>
 80069b6:	f8c7 055c 	str.w	r0, [r7, #1372]	@ 0x55c
		//response
        register_access_response.persistent = true;
 80069ba:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069be:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80069c2:	2201      	movs	r2, #1
 80069c4:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80069c6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069ca:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80069ce:	2201      	movs	r2, #1
 80069d0:	721a      	strb	r2, [r3, #8]
        value._tag_ = 9;
 80069d2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069d6:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80069da:	2209      	movs	r2, #9
 80069dc:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer32_1_0 result = {};
 80069e0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069e4:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80069e8:	4618      	mov	r0, r3
 80069ea:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80069ee:	461a      	mov	r2, r3
 80069f0:	2100      	movs	r1, #0
 80069f2:	f00d fffe 	bl	80149f2 <memset>
        result.value.elements[0] = js_pos_v;
 80069f6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80069fa:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80069fe:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
 8006a02:	601a      	str	r2, [r3, #0]
        result.value.count = 1;
 8006a04:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a08:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer32 = result;
 8006a12:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a16:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006a1a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a1e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006a22:	4610      	mov	r0, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f00e f8c7 	bl	8014bbe <memcpy>
 8006a30:	f000 bc23 	b.w	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else if (memcmp(register_access_request.name.name.elements, get_pos_reg_name, GET_POS_REG_NAME_LEN) == 0) {
 8006a34:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a38:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2207      	movs	r2, #7
 8006a40:	4929      	ldr	r1, [pc, #164]	@ (8006ae8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3ac>)
 8006a42:	4618      	mov	r0, r3
 8006a44:	f00d ffab 	bl	801499e <memcmp>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d150      	bne.n	8006af0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b4>
		//js_pos_v = enc_angle;
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006a4e:	2104      	movs	r1, #4
 8006a50:	4820      	ldr	r0, [pc, #128]	@ (8006ad4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x398>)
 8006a52:	f005 f859 	bl	800bb08 <HAL_GPIO_TogglePin>
		//tv = 0;
		//response
        register_access_response.persistent = true;
 8006a56:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a5a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006a5e:	2201      	movs	r2, #1
 8006a60:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006a62:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a66:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	721a      	strb	r2, [r3, #8]
        value._tag_ = 10;
 8006a6e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a72:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006a76:	220a      	movs	r2, #10
 8006a78:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural16_1_0 result = {};
 8006a7c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a80:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006a84:	4618      	mov	r0, r3
 8006a86:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	f00d ffb0 	bl	80149f2 <memset>
        result.value.elements[0] = enc_angle;
 8006a92:	4b16      	ldr	r3, [pc, #88]	@ (8006aec <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x3b0>)
 8006a94:	881a      	ldrh	r2, [r3, #0]
 8006a96:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a9a:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006a9e:	801a      	strh	r2, [r3, #0]
        result.value.count = 1;
 8006aa0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006aa4:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural16 = result;
 8006aae:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ab2:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006ab6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006aba:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006abe:	4610      	mov	r0, r2
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f00e f879 	bl	8014bbe <memcpy>
 8006acc:	e3d5      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
 8006ace:	bf00      	nop
 8006ad0:	20000004 	.word	0x20000004
 8006ad4:	48000c00 	.word	0x48000c00
 8006ad8:	20000010 	.word	0x20000010
 8006adc:	20000440 	.word	0x20000440
 8006ae0:	2000046c 	.word	0x2000046c
 8006ae4:	20000018 	.word	0x20000018
 8006ae8:	20000020 	.word	0x20000020
 8006aec:	20000472 	.word	0x20000472
    }
    else if (memcmp(register_access_request.name.name.elements, dir_reg_name, DIR_REG_NAME_LEN) == 0) {
 8006af0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006af4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2203      	movs	r2, #3
 8006afc:	49c7      	ldr	r1, [pc, #796]	@ (8006e1c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e0>)
 8006afe:	4618      	mov	r0, r3
 8006b00:	f00d ff4d 	bl	801499e <memcmp>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d156      	bne.n	8006bb8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x47c>
		tmc5160_set_motor_direction(register_access_request.value.integer8.value.elements[0]);
 8006b0a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b0e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f993 3108 	ldrsb.w	r3, [r3, #264]	@ 0x108
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f003 fb9f 	bl	800a25c <tmc5160_set_motor_direction>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006b1e:	2104      	movs	r1, #4
 8006b20:	48bf      	ldr	r0, [pc, #764]	@ (8006e20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8006b22:	f004 fff1 	bl	800bb08 <HAL_GPIO_TogglePin>
		tv = 0;
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006b32:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006b36:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b3a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006b3e:	2201      	movs	r2, #1
 8006b40:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006b42:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b46:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006b4e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b52:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006b56:	220b      	movs	r2, #11
 8006b58:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006b5c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b60:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006b64:	4618      	mov	r0, r3
 8006b66:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	f00d ff40 	bl	80149f2 <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 8006b72:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b76:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f993 2108 	ldrsb.w	r2, [r3, #264]	@ 0x108
 8006b80:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b84:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006b88:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006b8a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b8e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006b92:	2201      	movs	r2, #1
 8006b94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer8 = result;
 8006b98:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b9c:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006ba0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ba4:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4619      	mov	r1, r3
 8006bac:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f00e f804 	bl	8014bbe <memcpy>
 8006bb6:	e360      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    	}
    else if (memcmp(register_access_request.name.name.elements, arm_reg_name, ARM_REG_NAME_LEN) == 0) {
 8006bb8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006bbc:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	4997      	ldr	r1, [pc, #604]	@ (8006e24 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e8>)
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f00d fee9 	bl	801499e <memcmp>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d15a      	bne.n	8006c88 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x54c>
		if(register_access_request.value.integer8.value.elements[0])
 8006bd2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006bd6:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f993 3108 	ldrsb.w	r3, [r3, #264]	@ 0x108
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4ae>
		{
			tmc5160_arm();
 8006be4:	f003 fba2 	bl	800a32c <tmc5160_arm>
 8006be8:	e001      	b.n	8006bee <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x4b2>
		}
		else
		{
			tmc5160_disarm();
 8006bea:	f003 fb93 	bl	800a314 <tmc5160_disarm>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006bee:	2104      	movs	r1, #4
 8006bf0:	488b      	ldr	r0, [pc, #556]	@ (8006e20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8006bf2:	f004 ff89 	bl	800bb08 <HAL_GPIO_TogglePin>
		tv = 0;
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006c02:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006c06:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c0a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006c0e:	2201      	movs	r2, #1
 8006c10:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006c12:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c16:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006c1e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c22:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006c26:	220b      	movs	r2, #11
 8006c28:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Integer8_1_0 result = {};
 8006c2c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c30:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006c34:	4618      	mov	r0, r3
 8006c36:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	f00d fed8 	bl	80149f2 <memset>
        result.value.elements[0] = register_access_request.value.integer8.value.elements[0];
 8006c42:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c46:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f993 2108 	ldrsb.w	r2, [r3, #264]	@ 0x108
 8006c50:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c54:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006c58:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006c5a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c5e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006c62:	2201      	movs	r2, #1
 8006c64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.integer8 = result;
 8006c68:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c6c:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006c70:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c74:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006c80:	461a      	mov	r2, r3
 8006c82:	f00d ff9c 	bl	8014bbe <memcpy>
 8006c86:	e2f8      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    	}
    else if (memcmp(register_access_request.name.name.elements, calib_reg_name, CALIB_REG_NAME_LEN) == 0) {
 8006c88:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c8c:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2205      	movs	r2, #5
 8006c94:	4964      	ldr	r1, [pc, #400]	@ (8006e28 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6ec>)
 8006c96:	4618      	mov	r0, r3
 8006c98:	f00d fe81 	bl	801499e <memcmp>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d14f      	bne.n	8006d42 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x606>
		//ENABLE CALIB
    	calib_move(&jc);
 8006ca2:	4862      	ldr	r0, [pc, #392]	@ (8006e2c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006ca4:	f000 fcfc 	bl	80076a0 <calib_move>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006ca8:	2104      	movs	r1, #4
 8006caa:	485d      	ldr	r0, [pc, #372]	@ (8006e20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8006cac:	f004 ff2c 	bl	800bb08 <HAL_GPIO_TogglePin>
		tv = 0;
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006cbc:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8006cc0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006cc4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006cc8:	2201      	movs	r2, #1
 8006cca:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8006ccc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006cd0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 8006cd8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006cdc:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006ce0:	220b      	movs	r2, #11
 8006ce2:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8006ce6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006cea:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	f00d fe7b 	bl	80149f2 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 8006cfc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d00:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f893 2310 	ldrb.w	r2, [r3, #784]	@ 0x310
 8006d0a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d0e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006d12:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8006d14:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d18:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural8 = result;
 8006d22:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d26:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006d2a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d2e:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006d32:	4610      	mov	r0, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f00d ff3f 	bl	8014bbe <memcpy>
 8006d40:	e29b      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    	}
	else if (memcmp(register_access_request.name.name.elements, upper_lim_reg_name, UPPER_LIM_REG_NAME_LEN) == 0) {
 8006d42:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d46:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2209      	movs	r2, #9
 8006d4e:	4938      	ldr	r1, [pc, #224]	@ (8006e30 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f4>)
 8006d50:	4618      	mov	r0, r3
 8006d52:	f00d fe24 	bl	801499e <memcmp>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d16d      	bne.n	8006e38 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6fc>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006d5c:	2104      	movs	r1, #4
 8006d5e:	4830      	ldr	r0, [pc, #192]	@ (8006e20 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6e4>)
 8006d60:	f004 fed2 	bl	800bb08 <HAL_GPIO_TogglePin>
		jc.upper_limit_enc = register_access_request.value.integer32.value.elements[0];
 8006d64:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d68:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e2c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006d7c:	edc3 7a06 	vstr	s15, [r3, #24]
		joint_config_write(&jc, &jc_a);
 8006d80:	492c      	ldr	r1, [pc, #176]	@ (8006e34 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f8>)
 8006d82:	482a      	ldr	r0, [pc, #168]	@ (8006e2c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x6f0>)
 8006d84:	f7fb f8fe 	bl	8001f84 <joint_config_write>
		tv = 0;
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006d94:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 8006d98:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d9c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006da0:	2201      	movs	r2, #1
 8006da2:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006da4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006da8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006dac:	2201      	movs	r2, #1
 8006dae:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006db0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006db4:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006db8:	2209      	movs	r2, #9
 8006dba:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006dbe:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006dc2:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2100      	movs	r1, #0
 8006dd0:	f00d fe0f 	bl	80149f2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006dd4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006dd8:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8006de2:	461a      	mov	r2, r3
 8006de4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006de8:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006dec:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006dee:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006df2:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006df6:	2201      	movs	r2, #1
 8006df8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 8006dfc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e00:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006e04:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e08:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4619      	mov	r1, r3
 8006e10:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006e14:	461a      	mov	r2, r3
 8006e16:	f00d fed2 	bl	8014bbe <memcpy>
 8006e1a:	e22e      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
 8006e1c:	2000001c 	.word	0x2000001c
 8006e20:	48000c00 	.word	0x48000c00
 8006e24:	2000000c 	.word	0x2000000c
 8006e28:	20000028 	.word	0x20000028
 8006e2c:	20000440 	.word	0x20000440
 8006e30:	20000030 	.word	0x20000030
 8006e34:	20000464 	.word	0x20000464
	}
	else if (memcmp(register_access_request.name.name.elements, lower_lim_reg_name, LOWER_LIM_REG_NAME_LEN) == 0) {
 8006e38:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e3c:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2209      	movs	r2, #9
 8006e44:	49d0      	ldr	r1, [pc, #832]	@ (8007188 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa4c>)
 8006e46:	4618      	mov	r0, r3
 8006e48:	f00d fda9 	bl	801499e <memcmp>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d15f      	bne.n	8006f12 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x7d6>
		//SET UPPER LIMIT FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006e52:	2104      	movs	r1, #4
 8006e54:	48cd      	ldr	r0, [pc, #820]	@ (800718c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 8006e56:	f004 fe57 	bl	800bb08 <HAL_GPIO_TogglePin>
		jc.lower_limit_enc = register_access_request.value.integer32.value.elements[0];
 8006e5a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e5e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e68:	ee07 3a90 	vmov	s15, r3
 8006e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e70:	4bc7      	ldr	r3, [pc, #796]	@ (8007190 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006e72:	edc3 7a07 	vstr	s15, [r3, #28]
		joint_config_write(&jc, &jc_a);
 8006e76:	49c7      	ldr	r1, [pc, #796]	@ (8007194 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa58>)
 8006e78:	48c5      	ldr	r0, [pc, #788]	@ (8007190 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006e7a:	f7fb f883 	bl	8001f84 <joint_config_write>
		tv = 0;
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006e8a:	e9c1 2300 	strd	r2, r3, [r1]
		register_access_response.persistent = true;
 8006e8e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e92:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006e96:	2201      	movs	r2, #1
 8006e98:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006e9a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e9e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006ea6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006eaa:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006eae:	2209      	movs	r2, #9
 8006eb0:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 8006eb4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006eb8:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	f00d fd94 	bl	80149f2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006eca:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ece:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ede:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006ee2:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 8006ee4:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ee8:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006eec:	2201      	movs	r2, #1
 8006eee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 8006ef2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006ef6:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006efa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006efe:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006f02:	4610      	mov	r0, r2
 8006f04:	4619      	mov	r1, r3
 8006f06:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f00d fe57 	bl	8014bbe <memcpy>
 8006f10:	e1b3      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
	}
	else if (memcmp(register_access_request.name.name.elements, set_zero_reg_name, SET_ZERO_REG_NAME_LEN) == 0) {
 8006f12:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f16:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	499e      	ldr	r1, [pc, #632]	@ (8007198 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa5c>)
 8006f20:	4618      	mov	r0, r3
 8006f22:	f00d fd3c 	bl	801499e <memcmp>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d15d      	bne.n	8006fe8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x8ac>
		tmc5160_set_zero();
 8006f2c:	f003 f9ca 	bl	800a2c4 <tmc5160_set_zero>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8006f30:	2104      	movs	r1, #4
 8006f32:	4896      	ldr	r0, [pc, #600]	@ (800718c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 8006f34:	f004 fde8 	bl	800bb08 <HAL_GPIO_TogglePin>
		jc.zero_enc = enc_angle;
 8006f38:	4b98      	ldr	r3, [pc, #608]	@ (800719c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa60>)
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4b94      	ldr	r3, [pc, #592]	@ (8007190 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006f40:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 8006f42:	4994      	ldr	r1, [pc, #592]	@ (8007194 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa58>)
 8006f44:	4892      	ldr	r0, [pc, #584]	@ (8007190 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8006f46:	f7fb f81d 	bl	8001f84 <joint_config_write>
		tv = 0;
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8006f56:	e9c1 2300 	strd	r2, r3, [r1]
		//response
		register_access_response.persistent = true;
 8006f5a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f5e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006f62:	2201      	movs	r2, #1
 8006f64:	725a      	strb	r2, [r3, #9]
		register_access_response._mutable = true;
 8006f66:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f6a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006f6e:	2201      	movs	r2, #1
 8006f70:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 8006f72:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f76:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8006f7a:	2209      	movs	r2, #9
 8006f7c:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Real64_1_0 result = {};
 8006f80:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f84:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8006f8e:	461a      	mov	r2, r3
 8006f90:	2100      	movs	r1, #0
 8006f92:	f00d fd2e 	bl	80149f2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8006f96:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f9a:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7f9 fad5 	bl	8000554 <__aeabi_ui2d>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006fb2:	f5a1 61ab 	sub.w	r1, r1, #1368	@ 0x558
 8006fb6:	e9c1 2300 	strd	r2, r3, [r1]
		result.value.count = 1;
 8006fba:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006fbe:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.real64 = result;
 8006fc8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006fcc:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8006fd0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006fd4:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4619      	mov	r1, r3
 8006fdc:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f00d fdec 	bl	8014bbe <memcpy>
 8006fe6:	e148      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
	}
    else if (memcmp(register_access_request.name.name.elements, set_enc_value_zero_reg_name, SET_ENC_VALUE_ZERO_REG_NAME_LEN) == 0) {
 8006fe8:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006fec:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2212      	movs	r2, #18
 8006ff4:	496a      	ldr	r1, [pc, #424]	@ (80071a0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa64>)
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f00d fcd1 	bl	801499e <memcmp>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d163      	bne.n	80070ca <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0x98e>
		//SET ENCODER ZERO TODO
		jc.zero_enc = register_access_request.value.integer32.value.elements[0];
 8007002:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007006:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007010:	461a      	mov	r2, r3
 8007012:	4b5f      	ldr	r3, [pc, #380]	@ (8007190 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 8007014:	621a      	str	r2, [r3, #32]
		joint_config_write(&jc, &jc_a);
 8007016:	495f      	ldr	r1, [pc, #380]	@ (8007194 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa58>)
 8007018:	485d      	ldr	r0, [pc, #372]	@ (8007190 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa54>)
 800701a:	f7fa ffb3 	bl	8001f84 <joint_config_write>
		tv = 0;
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800702a:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800702e:	2104      	movs	r1, #4
 8007030:	4856      	ldr	r0, [pc, #344]	@ (800718c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 8007032:	f004 fd69 	bl	800bb08 <HAL_GPIO_TogglePin>
		tv = 0;
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8007042:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 8007046:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800704a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800704e:	2201      	movs	r2, #1
 8007050:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8007052:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007056:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800705a:	2201      	movs	r2, #1
 800705c:	721a      	strb	r2, [r3, #8]
		value._tag_ = 9;
 800705e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007062:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8007066:	2209      	movs	r2, #9
 8007068:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		uavcan_primitive_array_Integer32_1_0 result = {};
 800706c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007070:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007074:	4618      	mov	r0, r3
 8007076:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800707a:	461a      	mov	r2, r3
 800707c:	2100      	movs	r1, #0
 800707e:	f00d fcb8 	bl	80149f2 <memset>
		result.value.elements[0] = register_access_request.value._tag_;
 8007082:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007086:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f893 3310 	ldrb.w	r3, [r3, #784]	@ 0x310
 8007090:	461a      	mov	r2, r3
 8007092:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007096:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800709a:	601a      	str	r2, [r3, #0]
		result.value.count = 1;
 800709c:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80070a0:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80070a4:	2201      	movs	r2, #1
 80070a6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		value.integer32 = result;
 80070aa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80070ae:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 80070b2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80070b6:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 80070ba:	4610      	mov	r0, r2
 80070bc:	4619      	mov	r1, r3
 80070be:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80070c2:	461a      	mov	r2, r3
 80070c4:	f00d fd7b 	bl	8014bbe <memcpy>
 80070c8:	e0d7      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else if (memcmp(register_access_request.name.name.elements, name_reg_name, NAME_REG_NAME_LEN) == 0) {
 80070ca:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80070ce:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2204      	movs	r2, #4
 80070d6:	4933      	ldr	r1, [pc, #204]	@ (80071a4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa68>)
 80070d8:	4618      	mov	r0, r3
 80070da:	f00d fc60 	bl	801499e <memcmp>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d163      	bne.n	80071ac <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa70>
		//SET NAME FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80070e4:	2104      	movs	r1, #4
 80070e6:	4829      	ldr	r0, [pc, #164]	@ (800718c <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa50>)
 80070e8:	f004 fd0e 	bl	800bb08 <HAL_GPIO_TogglePin>
		tv = 0;
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80070f8:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 80070fc:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007100:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8007104:	2201      	movs	r2, #1
 8007106:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 8007108:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800710c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8007110:	2201      	movs	r2, #1
 8007112:	721a      	strb	r2, [r3, #8]
        value._tag_ = 1;
 8007114:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007118:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_String_1_0 result = {};
 8007122:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007126:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800712a:	4618      	mov	r0, r3
 800712c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007130:	461a      	mov	r2, r3
 8007132:	2100      	movs	r1, #0
 8007134:	f00d fc5d 	bl	80149f2 <memset>

        char mystring[4] = "xyz";
 8007138:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800713c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8007140:	4a19      	ldr	r2, [pc, #100]	@ (80071a8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xa6c>)
 8007142:	601a      	str	r2, [r3, #0]
        memcpy(result.value.elements, mystring, 4);
 8007144:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007148:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007152:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007156:	601a      	str	r2, [r3, #0]
        result.value.count = 3;
 8007158:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800715c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007160:	2203      	movs	r2, #3
 8007162:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value._string = result;
 8007166:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800716a:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 800716e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007172:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007176:	4610      	mov	r0, r2
 8007178:	4619      	mov	r1, r3
 800717a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800717e:	461a      	mov	r2, r3
 8007180:	f00d fd1d 	bl	8014bbe <memcpy>
 8007184:	e079      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
 8007186:	bf00      	nop
 8007188:	2000003c 	.word	0x2000003c
 800718c:	48000c00 	.word	0x48000c00
 8007190:	20000440 	.word	0x20000440
 8007194:	20000464 	.word	0x20000464
 8007198:	2000005c 	.word	0x2000005c
 800719c:	20000472 	.word	0x20000472
 80071a0:	20000048 	.word	0x20000048
 80071a4:	20000068 	.word	0x20000068
 80071a8:	007a7978 	.word	0x007a7978
    }
    else if (memcmp(register_access_request.name.name.elements, type_reg_name, TYPE_REG_NAME_LEN) == 0) {
 80071ac:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80071b0:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2204      	movs	r2, #4
 80071b8:	494a      	ldr	r1, [pc, #296]	@ (80072e4 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xba8>)
 80071ba:	4618      	mov	r0, r3
 80071bc:	f00d fbef 	bl	801499e <memcmp>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d14c      	bne.n	8007260 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb24>
		//SET TYPE OF MOTOR FOR JOINT
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80071c6:	2104      	movs	r1, #4
 80071c8:	4847      	ldr	r0, [pc, #284]	@ (80072e8 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbac>)
 80071ca:	f004 fc9d 	bl	800bb08 <HAL_GPIO_TogglePin>
		tv = 0;
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80071da:	e9c1 2300 	strd	r2, r3, [r1]
		//response
        register_access_response.persistent = true;
 80071de:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80071e2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80071e6:	2201      	movs	r2, #1
 80071e8:	725a      	strb	r2, [r3, #9]
        register_access_response._mutable = true;
 80071ea:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80071ee:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80071f2:	2201      	movs	r2, #1
 80071f4:	721a      	strb	r2, [r3, #8]
        value._tag_ = 11;
 80071f6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80071fa:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80071fe:	220b      	movs	r2, #11
 8007200:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        uavcan_primitive_array_Natural8_1_0 result = {};
 8007204:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007208:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800720c:	4618      	mov	r0, r3
 800720e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007212:	461a      	mov	r2, r3
 8007214:	2100      	movs	r1, #0
 8007216:	f00d fbec 	bl	80149f2 <memset>
        result.value.elements[0] = register_access_request.value._tag_;
 800721a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800721e:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f893 2310 	ldrb.w	r2, [r3, #784]	@ 0x310
 8007228:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800722c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007230:	701a      	strb	r2, [r3, #0]
        result.value.count = 1;
 8007232:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007236:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 800723a:	2201      	movs	r2, #1
 800723c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        value.natural8 = result;
 8007240:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007244:	f5a3 6289 	sub.w	r2, r3, #1096	@ 0x448
 8007248:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800724c:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8007250:	4610      	mov	r0, r2
 8007252:	4619      	mov	r1, r3
 8007254:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007258:	461a      	mov	r2, r3
 800725a:	f00d fcb0 	bl	8014bbe <memcpy>
 800725e:	e00c      	b.n	800727a <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xb3e>
    }
    else {
        value._tag_ = 0;
 8007260:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007264:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
        value.empty = (uavcan_primitive_Empty_1_0){};
 800726e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007272:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
    }
    register_access_response.value = value;
 800727a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800727e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8007282:	f507 62ad 	add.w	r2, r7, #1384	@ 0x568
 8007286:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800728a:	3310      	adds	r3, #16
 800728c:	4611      	mov	r1, r2
 800728e:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8007292:	4618      	mov	r0, r3
 8007294:	f00d fc93 	bl	8014bbe <memcpy>

    interface->send_response<RegisterAccessResponse>(
 8007298:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800729c:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fc14 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80072ac:	4604      	mov	r4, r0
 80072ae:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80072b2:	f2a3 5164 	subw	r1, r3, #1380	@ 0x564
 80072b6:	f507 704c 	add.w	r0, r7, #816	@ 0x330
 80072ba:	2304      	movs	r3, #4
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	4a0b      	ldr	r2, [pc, #44]	@ (80072ec <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbb0>)
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072c8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	680b      	ldr	r3, [r1, #0]
 80072d0:	4a07      	ldr	r2, [pc, #28]	@ (80072f0 <_ZN20RegisterAccessReader7handlerERK34uavcan_register_Access_Request_1_0P16CanardRxTransfer+0xbb4>)
 80072d2:	4601      	mov	r1, r0
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 fc85 	bl	8007be4 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>
        &register_access_response,
        register_access_response_buf,
        transfer,
        uavcan_register_Access_1_0_FIXED_PORT_ID_
    );
}
 80072da:	bf00      	nop
 80072dc:	f207 576c 	addw	r7, r7, #1388	@ 0x56c
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd90      	pop	{r4, r7, pc}
 80072e4:	20000070 	.word	0x20000070
 80072e8:	48000c00 	.word	0x48000c00
 80072ec:	000f4240 	.word	0x000f4240
 80072f0:	2000064c 	.word	0x2000064c

080072f4 <send_JS>:
//}




void send_JS(joint_config * jc) {             //float* pos, float* vel, float* eff
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08c      	sub	sp, #48	@ 0x30
 80072f8:	af06      	add	r7, sp, #24
 80072fa:	6078      	str	r0, [r7, #4]
//	pos.radian = steps_to_rads(tmc5160_position_read(), jc->full_steps);
//	uavcan_si_unit_angular_velocity_Scalar_1_0 vel;
//	vel.radian_per_second = steps_to_rads(tmc5160_velocity_read(), jc->full_steps);
	reg_udral_physics_kinematics_rotation_Planar_0_1 js_msg =
	{
			.angular_position = steps_to_rads(tmc5160_position_read(), jc->full_steps),
 80072fc:	f002 fe12 	bl	8009f24 <tmc5160_position_read>
 8007300:	4602      	mov	r2, r0
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f003 f929 	bl	800a560 <steps_to_rads>
 800730e:	eef0 7a40 	vmov.f32	s15, s0
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
			.angular_acceleration = eff_in
	};
 8007312:	edc7 7a03 	vstr	s15, [r7, #12]
			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
 8007316:	f002 fe3f 	bl	8009f98 <tmc5160_velocity_read>
 800731a:	4602      	mov	r2, r0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4619      	mov	r1, r3
 8007322:	4610      	mov	r0, r2
 8007324:	f003 f91c 	bl	800a560 <steps_to_rads>
 8007328:	eef0 7a40 	vmov.f32	s15, s0
	};
 800732c:	edc7 7a04 	vstr	s15, [r7, #16]
 8007330:	4b0c      	ldr	r3, [pc, #48]	@ (8007364 <send_JS+0x70>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	617b      	str	r3, [r7, #20]
    interface->send_msg<JS_msg>(
 8007336:	480c      	ldr	r0, [pc, #48]	@ (8007368 <send_JS+0x74>)
 8007338:	f000 fbcc 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800733c:	f107 010c 	add.w	r1, r7, #12
 8007340:	2304      	movs	r3, #4
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	4a09      	ldr	r2, [pc, #36]	@ (800736c <send_JS+0x78>)
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800734e:	4b08      	ldr	r3, [pc, #32]	@ (8007370 <send_JS+0x7c>)
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 8007356:	4a07      	ldr	r2, [pc, #28]	@ (8007374 <send_JS+0x80>)
 8007358:	f000 fc8d 	bl	8007c76 <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&js_msg,
		js_buffer,
		AGENT_JS_SUB_PORT,
		&int_transfer_id
	);
}
 800735c:	bf00      	nop
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	2000047c 	.word	0x2000047c
 8007368:	200004d8 	.word	0x200004d8
 800736c:	000f4240 	.word	0x000f4240
 8007370:	20000764 	.word	0x20000764
 8007374:	20000758 	.word	0x20000758

08007378 <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 800737e:	463b      	mov	r3, r7
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 8007386:	4b0f      	ldr	r3, [pc, #60]	@ (80073c4 <heartbeat+0x4c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 800738c:	480e      	ldr	r0, [pc, #56]	@ (80073c8 <heartbeat+0x50>)
 800738e:	f000 fba1 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8007392:	4639      	mov	r1, r7
 8007394:	2304      	movs	r3, #4
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	4a0c      	ldr	r2, [pc, #48]	@ (80073cc <heartbeat+0x54>)
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073a2:	4b0b      	ldr	r3, [pc, #44]	@ (80073d0 <heartbeat+0x58>)
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	f641 5355 	movw	r3, #7509	@ 0x1d55
 80073aa:	4a0a      	ldr	r2, [pc, #40]	@ (80073d4 <heartbeat+0x5c>)
 80073ac:	f000 fc82 	bl	8007cb4 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 80073b0:	4b04      	ldr	r3, [pc, #16]	@ (80073c4 <heartbeat+0x4c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	4a03      	ldr	r2, [pc, #12]	@ (80073c4 <heartbeat+0x4c>)
 80073b8:	6013      	str	r3, [r2, #0]
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000770 	.word	0x20000770
 80073c8:	200004d8 	.word	0x200004d8
 80073cc:	000f4240 	.word	0x000f4240
 80073d0:	2000076f 	.word	0x2000076f
 80073d4:	20000768 	.word	0x20000768

080073d8 <setup_cyphal>:

void setup_cyphal(FDCAN_HandleTypeDef* handler) {
 80073d8:	b590      	push	{r4, r7, lr}
 80073da:	b08f      	sub	sp, #60	@ 0x3c
 80073dc:	af02      	add	r7, sp, #8
 80073de:	6078      	str	r0, [r7, #4]
	interface = std::shared_ptr<CyphalInterface>(
 80073e0:	4b41      	ldr	r3, [pc, #260]	@ (80074e8 <setup_cyphal+0x110>)
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	2101      	movs	r1, #1
 80073ec:	483f      	ldr	r0, [pc, #252]	@ (80074ec <setup_cyphal+0x114>)
 80073ee:	f000 fc80 	bl	8007cf2 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>
 80073f2:	4602      	mov	r2, r0
 80073f4:	f107 0308 	add.w	r3, r7, #8
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fca2 	bl	8007d44 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>
		         // memory location, node_id, fdcan handler, messages memory pool, utils ref
		CyphalInterface::create_bss<G4CAN, SystemAllocator>(buffer, JOINT_N, handler, 400, utilities)
	);
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	4619      	mov	r1, r3
 8007406:	483a      	ldr	r0, [pc, #232]	@ (80074f0 <setup_cyphal+0x118>)
 8007408:	f000 fcab 	bl	8007d62 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>
	interface = std::shared_ptr<CyphalInterface>(
 800740c:	f107 0308 	add.w	r3, r7, #8
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe ffa8 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	h_reader = new HBeatReader(interface);
 8007416:	f44f 700e 	mov.w	r0, #568	@ 0x238
 800741a:	f00c fa08 	bl	801382e <_Znwj>
 800741e:	4603      	mov	r3, r0
 8007420:	461c      	mov	r4, r3
 8007422:	f107 0310 	add.w	r3, r7, #16
 8007426:	4932      	ldr	r1, [pc, #200]	@ (80074f0 <setup_cyphal+0x118>)
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe ff8c 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 800742e:	f107 0310 	add.w	r3, r7, #16
 8007432:	4619      	mov	r1, r3
 8007434:	4620      	mov	r0, r4
 8007436:	f7fe ffa3 	bl	8006380 <_ZN11HBeatReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800743a:	4b2e      	ldr	r3, [pc, #184]	@ (80074f4 <setup_cyphal+0x11c>)
 800743c:	601c      	str	r4, [r3, #0]
 800743e:	f107 0310 	add.w	r3, r7, #16
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe ff8f 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	js_reader = new JSReader(interface);
 8007448:	f44f 700e 	mov.w	r0, #568	@ 0x238
 800744c:	f00c f9ef 	bl	801382e <_Znwj>
 8007450:	4603      	mov	r3, r0
 8007452:	461c      	mov	r4, r3
 8007454:	f107 0318 	add.w	r3, r7, #24
 8007458:	4925      	ldr	r1, [pc, #148]	@ (80074f0 <setup_cyphal+0x118>)
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe ff73 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007460:	f107 0318 	add.w	r3, r7, #24
 8007464:	4619      	mov	r1, r3
 8007466:	4620      	mov	r0, r4
 8007468:	f7fe ffba 	bl	80063e0 <_ZN8JSReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800746c:	4b22      	ldr	r3, [pc, #136]	@ (80074f8 <setup_cyphal+0x120>)
 800746e:	601c      	str	r4, [r3, #0]
 8007470:	f107 0318 	add.w	r3, r7, #24
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe ff76 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	reg_access_service = new RegisterAccessReader(interface);
 800747a:	f44f 700e 	mov.w	r0, #568	@ 0x238
 800747e:	f00c f9d6 	bl	801382e <_Znwj>
 8007482:	4603      	mov	r3, r0
 8007484:	461c      	mov	r4, r3
 8007486:	f107 0320 	add.w	r3, r7, #32
 800748a:	4919      	ldr	r1, [pc, #100]	@ (80074f0 <setup_cyphal+0x118>)
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe ff5a 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007492:	f107 0320 	add.w	r3, r7, #32
 8007496:	4619      	mov	r1, r3
 8007498:	4620      	mov	r0, r4
 800749a:	f7ff f92b 	bl	80066f4 <_ZN20RegisterAccessReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 800749e:	4b17      	ldr	r3, [pc, #92]	@ (80074fc <setup_cyphal+0x124>)
 80074a0:	601c      	str	r4, [r3, #0]
 80074a2:	f107 0320 	add.w	r3, r7, #32
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe ff5d 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
	nireader = new NodeInfoReader(interface);
 80074ac:	f44f 700e 	mov.w	r0, #568	@ 0x238
 80074b0:	f00c f9bd 	bl	801382e <_Znwj>
 80074b4:	4603      	mov	r3, r0
 80074b6:	461c      	mov	r4, r3
 80074b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074bc:	490c      	ldr	r1, [pc, #48]	@ (80074f0 <setup_cyphal+0x118>)
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe ff41 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80074c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074c8:	4619      	mov	r1, r3
 80074ca:	4620      	mov	r0, r4
 80074cc:	f7ff f80a 	bl	80064e4 <_ZN14NodeInfoReaderC1ESt10shared_ptrI15CyphalInterfaceE>
 80074d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <setup_cyphal+0x128>)
 80074d2:	601c      	str	r4, [r3, #0]
 80074d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe ff44 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80074de:	bf00      	nop
 80074e0:	3734      	adds	r7, #52	@ 0x34
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd90      	pop	{r4, r7, pc}
 80074e6:	bf00      	nop
 80074e8:	200004e0 	.word	0x200004e0
 80074ec:	20000480 	.word	0x20000480
 80074f0:	200004d8 	.word	0x200004d8
 80074f4:	20000500 	.word	0x20000500
 80074f8:	20000504 	.word	0x20000504
 80074fc:	20000648 	.word	0x20000648
 8007500:	20000508 	.word	0x20000508

08007504 <cyphal_loop>:

void cyphal_loop() {
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
    interface->loop();
 8007508:	4804      	ldr	r0, [pc, #16]	@ (800751c <cyphal_loop+0x18>)
 800750a:	f000 fae3 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800750e:	4603      	mov	r3, r0
 8007510:	4618      	mov	r0, r3
 8007512:	f009 fbcb 	bl	8010cac <_ZN15CyphalInterface4loopEv>
}
 8007516:	bf00      	nop
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	200004d8 	.word	0x200004d8

08007520 <cyphal_can_starter>:

void cyphal_can_starter(FDCAN_HandleTypeDef* hfdcan)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08c      	sub	sp, #48	@ 0x30
 8007524:	af02      	add	r7, sp, #8
 8007526:	6078      	str	r0, [r7, #4]

	CanardFilter cyphal_filter_for_node_id = canardMakeFilterForServices(JOINT_N);
 8007528:	f107 0320 	add.w	r3, r7, #32
 800752c:	2101      	movs	r1, #1
 800752e:	4618      	mov	r0, r3
 8007530:	f00c f92e 	bl	8013790 <canardMakeFilterForServices>
	CanardFilter cyphal_filter_for_JS = canardMakeFilterForSubject(JS_SUB_PORT_ID);//JS_SUB_PORT_ID //1121
 8007534:	f107 0318 	add.w	r3, r7, #24
 8007538:	f240 4161 	movw	r1, #1121	@ 0x461
 800753c:	4618      	mov	r0, r3
 800753e:	f00c f907 	bl	8013750 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_for_HB = canardMakeFilterForSubject(7509);//JS_SUB_PORT_ID
 8007542:	f107 0310 	add.w	r3, r7, #16
 8007546:	f641 5155 	movw	r1, #7509	@ 0x1d55
 800754a:	4618      	mov	r0, r3
 800754c:	f00c f900 	bl	8013750 <canardMakeFilterForSubject>
	CanardFilter cyphal_filter_consolidated = canardConsolidateFilters(&cyphal_filter_for_node_id, &cyphal_filter_for_JS);
 8007550:	f107 0308 	add.w	r3, r7, #8
 8007554:	f107 0218 	add.w	r2, r7, #24
 8007558:	f107 0120 	add.w	r1, r7, #32
 800755c:	4618      	mov	r0, r3
 800755e:	f00c f939 	bl	80137d4 <canardConsolidateFilters>

	static FDCAN_FilterTypeDef sFilterConfig;
	static FDCAN_FilterTypeDef hbFilterConfig;
	static FDCAN_FilterTypeDef niFilterConfig;

	niFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8007562:	4b4c      	ldr	r3, [pc, #304]	@ (8007694 <cyphal_can_starter+0x174>)
 8007564:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007568:	601a      	str	r2, [r3, #0]
	niFilterConfig.FilterIndex = 0;
 800756a:	4b4a      	ldr	r3, [pc, #296]	@ (8007694 <cyphal_can_starter+0x174>)
 800756c:	2200      	movs	r2, #0
 800756e:	605a      	str	r2, [r3, #4]
	niFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007570:	4b48      	ldr	r3, [pc, #288]	@ (8007694 <cyphal_can_starter+0x174>)
 8007572:	2202      	movs	r2, #2
 8007574:	609a      	str	r2, [r3, #8]
	niFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007576:	4b47      	ldr	r3, [pc, #284]	@ (8007694 <cyphal_can_starter+0x174>)
 8007578:	2201      	movs	r2, #1
 800757a:	60da      	str	r2, [r3, #12]
	niFilterConfig.FilterID1 =  cyphal_filter_for_node_id.extended_can_id;
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	4a45      	ldr	r2, [pc, #276]	@ (8007694 <cyphal_can_starter+0x174>)
 8007580:	6113      	str	r3, [r2, #16]
	niFilterConfig.FilterID2 =  cyphal_filter_for_node_id.extended_mask;
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	4a43      	ldr	r2, [pc, #268]	@ (8007694 <cyphal_can_starter+0x174>)
 8007586:	6153      	str	r3, [r2, #20]

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8007588:	4b43      	ldr	r3, [pc, #268]	@ (8007698 <cyphal_can_starter+0x178>)
 800758a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800758e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 1;
 8007590:	4b41      	ldr	r3, [pc, #260]	@ (8007698 <cyphal_can_starter+0x178>)
 8007592:	2201      	movs	r2, #1
 8007594:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007596:	4b40      	ldr	r3, [pc, #256]	@ (8007698 <cyphal_can_starter+0x178>)
 8007598:	2202      	movs	r2, #2
 800759a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800759c:	4b3e      	ldr	r3, [pc, #248]	@ (8007698 <cyphal_can_starter+0x178>)
 800759e:	2201      	movs	r2, #1
 80075a0:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 =  cyphal_filter_for_JS.extended_can_id;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007698 <cyphal_can_starter+0x178>)
 80075a6:	6113      	str	r3, [r2, #16]
	sFilterConfig.FilterID2 =  cyphal_filter_for_JS.extended_mask;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	4a3b      	ldr	r2, [pc, #236]	@ (8007698 <cyphal_can_starter+0x178>)
 80075ac:	6153      	str	r3, [r2, #20]

	hbFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80075ae:	4b3b      	ldr	r3, [pc, #236]	@ (800769c <cyphal_can_starter+0x17c>)
 80075b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80075b4:	601a      	str	r2, [r3, #0]
	hbFilterConfig.FilterIndex = 2;
 80075b6:	4b39      	ldr	r3, [pc, #228]	@ (800769c <cyphal_can_starter+0x17c>)
 80075b8:	2202      	movs	r2, #2
 80075ba:	605a      	str	r2, [r3, #4]
	hbFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80075bc:	4b37      	ldr	r3, [pc, #220]	@ (800769c <cyphal_can_starter+0x17c>)
 80075be:	2202      	movs	r2, #2
 80075c0:	609a      	str	r2, [r3, #8]
	hbFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80075c2:	4b36      	ldr	r3, [pc, #216]	@ (800769c <cyphal_can_starter+0x17c>)
 80075c4:	2201      	movs	r2, #1
 80075c6:	60da      	str	r2, [r3, #12]
	hbFilterConfig.FilterID1 =  cyphal_filter_for_HB.extended_can_id;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	4a34      	ldr	r2, [pc, #208]	@ (800769c <cyphal_can_starter+0x17c>)
 80075cc:	6113      	str	r3, [r2, #16]
	hbFilterConfig.FilterID2 =  cyphal_filter_for_HB.extended_mask;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	4a32      	ldr	r2, [pc, #200]	@ (800769c <cyphal_can_starter+0x17c>)
 80075d2:	6153      	str	r3, [r2, #20]



	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT) != HAL_OK)
 80075d4:	2302      	movs	r3, #2
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2302      	movs	r3, #2
 80075da:	2202      	movs	r2, #2
 80075dc:	2102      	movs	r1, #2
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f003 fe26 	bl	800b230 <HAL_FDCAN_ConfigGlobalFilter>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf14      	ite	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	2300      	moveq	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <cyphal_can_starter+0xd8>
	{
	  Error_Handler();
 80075f4:	f7fa fe21 	bl	800223a <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &niFilterConfig) != HAL_OK) {
 80075f8:	4926      	ldr	r1, [pc, #152]	@ (8007694 <cyphal_can_starter+0x174>)
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f003 fdbe 	bl	800b17c <HAL_FDCAN_ConfigFilter>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	bf14      	ite	ne
 8007606:	2301      	movne	r3, #1
 8007608:	2300      	moveq	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <cyphal_can_starter+0xf4>
	  Error_Handler();
 8007610:	f7fa fe13 	bl	800223a <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK) {
 8007614:	4920      	ldr	r1, [pc, #128]	@ (8007698 <cyphal_can_starter+0x178>)
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f003 fdb0 	bl	800b17c <HAL_FDCAN_ConfigFilter>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	bf14      	ite	ne
 8007622:	2301      	movne	r3, #1
 8007624:	2300      	moveq	r3, #0
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <cyphal_can_starter+0x110>
	  Error_Handler();
 800762c:	f7fa fe05 	bl	800223a <Error_Handler>
	}
	if (HAL_FDCAN_ConfigFilter(hfdcan, &hbFilterConfig) != HAL_OK) {
 8007630:	491a      	ldr	r1, [pc, #104]	@ (800769c <cyphal_can_starter+0x17c>)
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f003 fda2 	bl	800b17c <HAL_FDCAN_ConfigFilter>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	bf14      	ite	ne
 800763e:	2301      	movne	r3, #1
 8007640:	2300      	moveq	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <cyphal_can_starter+0x12c>
	  Error_Handler();
 8007648:	f7fa fdf7 	bl	800223a <Error_Handler>
	}

	if (HAL_FDCAN_ConfigTxDelayCompensation(hfdcan, 5, 0) != HAL_OK) {
 800764c:	2200      	movs	r2, #0
 800764e:	2105      	movs	r1, #5
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f003 fe1e 	bl	800b292 <HAL_FDCAN_ConfigTxDelayCompensation>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	bf14      	ite	ne
 800765c:	2301      	movne	r3, #1
 800765e:	2300      	moveq	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <cyphal_can_starter+0x14a>
	  Error_Handler();
 8007666:	f7fa fde8 	bl	800223a <Error_Handler>
	}
	if (HAL_FDCAN_EnableTxDelayCompensation(hfdcan) != HAL_OK) {
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f003 fe33 	bl	800b2d6 <HAL_FDCAN_EnableTxDelayCompensation>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	bf14      	ite	ne
 8007676:	2301      	movne	r3, #1
 8007678:	2300      	moveq	r3, #0
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <cyphal_can_starter+0x164>
	  Error_Handler();
 8007680:	f7fa fddb 	bl	800223a <Error_Handler>
//	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
//	{
//	  Error_Handler();
//	}

	HAL_FDCAN_Start(hfdcan);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f003 fe47 	bl	800b318 <HAL_FDCAN_Start>
}
 800768a:	bf00      	nop
 800768c:	3728      	adds	r7, #40	@ 0x28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200007a4 	.word	0x200007a4
 8007698:	20000774 	.word	0x20000774
 800769c:	2000078c 	.word	0x2000078c

080076a0 <calib_move>:


void calib_move(joint_config * jc)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	int8_t Kp = 100;
 80076a8:	2364      	movs	r3, #100	@ 0x64
 80076aa:	74fb      	strb	r3, [r7, #19]
	uint32_t epsilon = 10;
 80076ac:	230a      	movs	r3, #10
 80076ae:	60fb      	str	r3, [r7, #12]
	uint32_t deviation = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	617b      	str	r3, [r7, #20]
	deviation = jc->zero_enc - enc_angle;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	4a15      	ldr	r2, [pc, #84]	@ (8007710 <calib_move+0x70>)
 80076ba:	8812      	ldrh	r2, [r2, #0]
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	617b      	str	r3, [r7, #20]
	while(deviation > epsilon)
 80076c0:	e01a      	b.n	80076f8 <calib_move+0x58>
	{
		as50_readAngle(&enc_angle, 100);
 80076c2:	2164      	movs	r1, #100	@ 0x64
 80076c4:	4812      	ldr	r0, [pc, #72]	@ (8007710 <calib_move+0x70>)
 80076c6:	f7fa f84f 	bl	8001768 <as50_readAngle>
		deviation = jc->direction * (jc->zero_enc - enc_angle);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80076d0:	4619      	mov	r1, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007710 <calib_move+0x70>)
 80076d8:	8812      	ldrh	r2, [r2, #0]
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	617b      	str	r3, [r7, #20]
		tmc5160_move(deviation * Kp);
 80076e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	fb02 f303 	mul.w	r3, r2, r3
 80076ec:	4618      	mov	r0, r3
 80076ee:	f002 fa97 	bl	8009c20 <tmc5160_move>
		HAL_Delay(1);
 80076f2:	2001      	movs	r0, #1
 80076f4:	f003 f82e 	bl	800a754 <HAL_Delay>
	while(deviation > epsilon)
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d8e0      	bhi.n	80076c2 <calib_move+0x22>
	}
	tmc5160_stop();
 8007700:	f002 fe20 	bl	800a344 <tmc5160_stop>
	tmc5160_set_zero();
 8007704:	f002 fdde 	bl	800a2c4 <tmc5160_set_zero>
}
 8007708:	bf00      	nop
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20000472 	.word	0x20000472

08007714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
      { delete this; }
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3304      	adds	r3, #4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
 800772e:	bf00      	nop
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	461a      	mov	r2, r3
 8007742:	2300      	movs	r3, #0
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	6053      	str	r3, [r2, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	609a      	str	r2, [r3, #8]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	461a      	mov	r2, r3
 800776a:	2300      	movs	r3, #0
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	6053      	str	r3, [r2, #4]
 8007770:	6093      	str	r3, [r2, #8]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff ffde 	bl	8007736 <_ZNSt14_Function_baseC1Ev>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 8007780:	6838      	ldr	r0, [r7, #0]
 8007782:	f000 fb21 	bl	8007dc8 <_ZNKSt8functionIFyvEEcvbEv>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00d      	beq.n	80077a8 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	2202      	movs	r2, #2
 8007796:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	609a      	str	r2, [r3, #8]
	  }
      }
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	461a      	mov	r2, r3
 80077c0:	2300      	movs	r3, #0
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	6053      	str	r3, [r2, #4]
 80077c6:	6093      	str	r3, [r2, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff ffb3 	bl	8007736 <_ZNSt14_Function_baseC1Ev>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 80077d6:	6838      	ldr	r0, [r7, #0]
 80077d8:	f000 fb06 	bl	8007de8 <_ZNKSt8functionIFvvEEcvbEv>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00d      	beq.n	80077fe <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	2202      	movs	r2, #2
 80077ec:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	609a      	str	r2, [r3, #8]
      }
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>:
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      _GLIBCXX23_CONSTEXPR
      explicit operator bool() const noexcept
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 faf9 	bl	8007e08 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	bf14      	ite	ne
 800781c:	2301      	movne	r3, #1
 800781e:	2300      	moveq	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
	return get();
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fae8 	bl	8007e08 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>
 8007838:	4603      	mov	r3, r0
      }
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	4611      	mov	r1, r2
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fae5 	bl	8007e22 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ffe6 	bl	8007842 <_ZNSt15__uniq_ptr_dataI19AbstractCANProviderSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8007880:	b590      	push	{r4, r7, lr}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fadd 	bl	8007e4a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8007890:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00c      	beq.n	80078b4 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fae2 	bl	8007e64 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>
 80078a0:	4604      	mov	r4, r0
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 faeb 	bl	8007e7e <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>
 80078a8:	4603      	mov	r3, r0
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4619      	mov	r1, r3
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 faf0 	bl	8007e94 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>
	__ptr = pointer();
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
      }
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd90      	pop	{r4, r7, pc}

080078c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fa fccf 	bl	800227c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	461a      	mov	r2, r3
 80078f6:	2300      	movs	r3, #0
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	6053      	str	r3, [r2, #4]
 80078fc:	6093      	str	r3, [r2, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff ff18 	bl	8007736 <_ZNSt14_Function_baseC1Ev>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 800790c:	6838      	ldr	r0, [r7, #0]
 800790e:	f000 fad2 	bl	8007eb6 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00e      	beq.n	8007936 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8007918:	687c      	ldr	r4, [r7, #4]
 800791a:	6838      	ldr	r0, [r7, #0]
 800791c:	f000 fadb 	bl	8007ed6 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007920:	4603      	mov	r3, r0
 8007922:	4619      	mov	r1, r3
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fae1 	bl	8007eec <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a04      	ldr	r2, [pc, #16]	@ (8007940 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 800792e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a04      	ldr	r2, [pc, #16]	@ (8007944 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8007934:	609a      	str	r2, [r3, #8]
	    }
	}
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	bd90      	pop	{r4, r7, pc}
 8007940:	08007f11 	.word	0x08007f11
 8007944:	08007f35 	.word	0x08007f35

08007948 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	461a      	mov	r2, r3
 8007956:	2300      	movs	r3, #0
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	6053      	str	r3, [r2, #4]
 800795c:	6093      	str	r3, [r2, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff fee8 	bl	8007736 <_ZNSt14_Function_baseC1Ev>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800796c:	6838      	ldr	r0, [r7, #0]
 800796e:	f000 fb00 	bl	8007f72 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00e      	beq.n	8007996 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8007978:	687c      	ldr	r4, [r7, #4]
 800797a:	6838      	ldr	r0, [r7, #0]
 800797c:	f000 fb09 	bl	8007f92 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007980:	4603      	mov	r3, r0
 8007982:	4619      	mov	r1, r3
 8007984:	4620      	mov	r0, r4
 8007986:	f000 fb0f 	bl	8007fa8 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a04      	ldr	r2, [pc, #16]	@ (80079a0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 800798e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a04      	ldr	r2, [pc, #16]	@ (80079a4 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 8007994:	609a      	str	r2, [r3, #8]
	}
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bd90      	pop	{r4, r7, pc}
 80079a0:	08007fcd 	.word	0x08007fcd
 80079a4:	08007feb 	.word	0x08007feb

080079a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fa fc49 	bl	800225e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt>:
        interface->subscribe(port_id, T::extent, kind, &sub);
    }

    virtual void handler(const Type&, CanardRxTransfer*) = 0;
public:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b086      	sub	sp, #24
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	4613      	mov	r3, r2
 80079e2:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 80079e4:	f107 0310 	add.w	r3, r7, #16
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fcab 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	f107 0110 	add.w	r1, r7, #16
 80079f6:	2300      	movs	r3, #0
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 fb15 	bl	8008028 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 80079fe:	f107 0310 	add.w	r3, r7, #16
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe fcaf 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt>:
    AbstractSubscription(InterfacePtr interface, CanardPortID port_id)
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b086      	sub	sp, #24
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	80fb      	strh	r3, [r7, #6]
        : AbstractSubscription(interface, port_id, CanardTransferKindMessage) {};
 8007a20:	f107 0310 	add.w	r3, r7, #16
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fc8d 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
 8007a2c:	88fa      	ldrh	r2, [r7, #6]
 8007a2e:	f107 0110 	add.w	r1, r7, #16
 8007a32:	2300      	movs	r3, #0
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 fb29 	bl	800808c <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>
 8007a3a:	f107 0310 	add.w	r3, r7, #16
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fc91 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <_ZN9IListenerIP16CanardRxTransferEC1Ev>:
#pragma once

template <typename T>
class IListener {
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	4a04      	ldr	r2, [pc, #16]	@ (8007a6c <_ZN9IListenerIP16CanardRxTransferEC1Ev+0x1c>)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	08018ac8 	.word	0x08018ac8

08007a70 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	460b      	mov	r3, r1
 8007a80:	80fb      	strh	r3, [r7, #6]
 8007a82:	4613      	mov	r3, r2
 8007a84:	717b      	strb	r3, [r7, #5]
        InterfacePtr interface,
        CanardPortID port_id,
        CanardTransferKind kind
    ): interface(interface), kind(kind) {
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff ffe1 	bl	8007a50 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007a8e:	4a10      	ldr	r2, [pc, #64]	@ (8007ad0 <_ZN20AbstractSubscriptionI15NodeInfoRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	797a      	ldrb	r2, [r7, #5]
 8007a98:	711a      	strb	r2, [r3, #4]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f00c ffa4 	bl	80149f2 <memset>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fc47 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007ab8:	797a      	ldrb	r2, [r7, #5]
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	4619      	mov	r1, r3
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 fb16 	bl	80080f0 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>
    };
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	08018a78 	.word	0x08018a78

08007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
	return _M_get();
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fb25 	bl	800812c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8007ae2:	4603      	mov	r3, r0
      }
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::send_response(
 8007aec:	b5b0      	push	{r4, r5, r7, lr}
 8007aee:	b08c      	sub	sp, #48	@ 0x30
 8007af0:	af04      	add	r7, sp, #16
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]
    CanardRxTransfer *transfer,
    CanardPortID port,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007afa:	f240 1339 	movw	r3, #313	@ 0x139
 8007afe:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007b00:	f107 031c 	add.w	r3, r7, #28
 8007b04:	461a      	mov	r2, r3
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	68b8      	ldr	r0, [r7, #8]
 8007b0a:	f7fe fa51 	bl	8005fb0 <uavcan_node_GetInfo_Response_1_0_serialize_>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	09db      	lsrs	r3, r3, #7
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <_ZNK15CyphalInterface13send_responseI16NodeInfoResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	3310      	adds	r3, #16
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fb0f 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
    }
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007b26:	f107 0314 	add.w	r3, r7, #20
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	809a      	strh	r2, [r3, #4]
 8007b30:	2301      	movs	r3, #1
 8007b32:	757b      	strb	r3, [r7, #21]
 8007b34:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007b38:	753b      	strb	r3, [r7, #20]
 8007b3a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007b3c:	82fb      	strh	r3, [r7, #22]
            .priority = priority,
            .transfer_kind = CanardTransferKindResponse,
            .port_id = port,
            .remote_node_id = transfer->metadata.remote_node_id,
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007b42:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007b48:	767b      	strb	r3, [r7, #25]
    };
    push(
        utilities.micros_64() + timeout_delta,
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fb0e 	bl	8008170 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007b54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b58:	1884      	adds	r4, r0, r2
 8007b5a:	eb41 0503 	adc.w	r5, r1, r3
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	9202      	str	r2, [sp, #8]
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	f107 0314 	add.w	r3, r7, #20
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	462b      	mov	r3, r5
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f009 f82d 	bl	8010bd0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
        &cyphal_transfer_metadata,
        cyphal_buf_size,
        buffer
    );
}
 8007b76:	bf00      	nop
 8007b78:	3720      	adds	r7, #32
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b80 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	460b      	mov	r3, r1
 8007b90:	80fb      	strh	r3, [r7, #6]
 8007b92:	4613      	mov	r3, r2
 8007b94:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff59 	bl	8007a50 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8007b9e:	4a10      	ldr	r2, [pc, #64]	@ (8007be0 <_ZN20AbstractSubscriptionI21RegisterAccessRequestEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	797a      	ldrb	r2, [r7, #5]
 8007ba8:	711a      	strb	r2, [r3, #4]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3308      	adds	r3, #8
 8007bae:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f00c ff1c 	bl	80149f2 <memset>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fbbf 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8007bc8:	797a      	ldrb	r2, [r7, #5]
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fae7 	bl	80081a2 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>
    };
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	08018a58 	.word	0x08018a58

08007be4 <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority>:
inline void CyphalInterface::send_response(
 8007be4:	b5b0      	push	{r4, r5, r7, lr}
 8007be6:	b08c      	sub	sp, #48	@ 0x30
 8007be8:	af04      	add	r7, sp, #16
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8007bf2:	f240 130b 	movw	r3, #267	@ 0x10b
 8007bf6:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8007bf8:	f107 031c 	add.w	r3, r7, #28
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	68b8      	ldr	r0, [r7, #8]
 8007c02:	f7fe f843 	bl	8005c8c <uavcan_register_Access_Response_1_0_serialize_>
 8007c06:	4603      	mov	r3, r0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	09db      	lsrs	r3, r3, #7
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <_ZNK15CyphalInterface13send_responseI22RegisterAccessResponseEEvPNT_4TypeEPhP16CanardRxTransferty14CanardPriority+0x3a>
        utilities.error_handler();
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	3310      	adds	r3, #16
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fa93 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007c1e:	f107 0314 	add.w	r3, r7, #20
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	809a      	strh	r2, [r3, #4]
 8007c28:	2301      	movs	r3, #1
 8007c2a:	757b      	strb	r3, [r7, #21]
 8007c2c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007c30:	753b      	strb	r3, [r7, #20]
 8007c32:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007c34:	82fb      	strh	r3, [r7, #22]
            .remote_node_id = transfer->metadata.remote_node_id,
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	791b      	ldrb	r3, [r3, #4]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007c3a:	763b      	strb	r3, [r7, #24]
            .transfer_id = transfer->metadata.transfer_id,
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	795b      	ldrb	r3, [r3, #5]
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8007c40:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fa92 	bl	8008170 <_ZNKSt8functionIFyvEEclEv>
    push(
 8007c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c50:	1884      	adds	r4, r0, r2
 8007c52:	eb41 0503 	adc.w	r5, r1, r3
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	9202      	str	r2, [sp, #8]
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	f107 0314 	add.w	r3, r7, #20
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	4622      	mov	r2, r4
 8007c66:	462b      	mov	r3, r5
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f008 ffb1 	bl	8010bd0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
}
 8007c6e:	bf00      	nop
 8007c70:	3720      	adds	r7, #32
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bdb0      	pop	{r4, r5, r7, pc}

08007c76 <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b08a      	sub	sp, #40	@ 0x28
 8007c7a:	af06      	add	r7, sp, #24
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 8007c84:	8879      	ldrh	r1, [r7, #2]
 8007c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c8e:	23ff      	movs	r3, #255	@ 0xff
 8007c90:	9303      	str	r3, [sp, #12]
 8007c92:	2300      	movs	r3, #0
 8007c94:	9302      	str	r3, [sp, #8]
 8007c96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	68b9      	ldr	r1, [r7, #8]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fa9a 	bl	80081e0 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	@ 0x28
 8007cb8:	af06      	add	r7, sp, #24
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 8007cc2:	8879      	ldrh	r1, [r7, #2]
 8007cc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ccc:	23ff      	movs	r3, #255	@ 0xff
 8007cce:	9303      	str	r3, [sp, #12]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9302      	str	r3, [sp, #8]
 8007cd4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fac5 	bl	8008274 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 8007cea:	bf00      	nop
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <_ZN15CyphalInterface10create_bssI5G4CAN15SystemAllocatorJEEEPS_PSt4bytehNT_7HandlerEjDpOT1_R13UtilityConfig>:
    template <typename Provider, class Allocator, class... Args> static CyphalInterface* create_bss(
 8007cf2:	b590      	push	{r4, r7, lr}
 8007cf4:	b08b      	sub	sp, #44	@ 0x2c
 8007cf6:	af02      	add	r7, sp, #8
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	72fb      	strb	r3, [r7, #11]
        typename Provider::Handler handler,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& config
    ) {
        std::byte** inout_buffer = &buffer;
 8007d02:	f107 030c 	add.w	r3, r7, #12
 8007d06:	61fb      	str	r3, [r7, #28]
        AbstractCANProvider* provider  = Provider::template create_bss<Allocator>(inout_buffer, handler, node_id, queue_len, args..., config);
 8007d08:	7afa      	ldrb	r2, [r7, #11]
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	69f8      	ldr	r0, [r7, #28]
 8007d14:	f000 faf8 	bl	8008308 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>
 8007d18:	61b8      	str	r0, [r7, #24]

        std::byte* interface_ptr = *inout_buffer;
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	617b      	str	r3, [r7, #20]
        auto interface = new (interface_ptr) CyphalInterface(node_id, config, provider);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	4619      	mov	r1, r3
 8007d24:	200c      	movs	r0, #12
 8007d26:	f7fa fa8e 	bl	8002246 <_ZnwjPv>
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	7af9      	ldrb	r1, [r7, #11]
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d32:	4620      	mov	r0, r4
 8007d34:	f7fa fbb8 	bl	80024a8 <_ZN15CyphalInterfaceC1EhR13UtilityConfigP19AbstractCANProvider>
 8007d38:	613c      	str	r4, [r7, #16]

        return interface;
 8007d3a:	693b      	ldr	r3, [r7, #16]
    }
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3724      	adds	r7, #36	@ 0x24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd90      	pop	{r4, r7, pc}

08007d44 <_ZNSt10shared_ptrI15CyphalInterfaceEC1IS0_vEEPT_>:
       *  @post   use_count() == 1 && get() == __p
       *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
       */
      template<typename _Yp, typename = _Constructible<_Yp*>>
	explicit
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fb26 	bl	80083a4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <_ZNSt10shared_ptrI15CyphalInterfaceEaSEOS1_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8007d62:	b590      	push	{r4, r7, lr}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8007d6c:	687c      	ldr	r4, [r7, #4]
 8007d6e:	6838      	ldr	r0, [r7, #0]
 8007d70:	f000 fb30 	bl	80083d4 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>
 8007d74:	4603      	mov	r3, r0
 8007d76:	4619      	mov	r1, r3
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fb36 	bl	80083ea <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8007d7e:	687b      	ldr	r3, [r7, #4]
      }
 8007d80:	4618      	mov	r0, r3
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd90      	pop	{r4, r7, pc}

08007d88 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
      { }
 8007d90:	4a04      	ldr	r2, [pc, #16]	@ (8007da4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	08018aec 	.word	0x08018aec

08007da8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
      { }
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff ffe9 	bl	8007d88 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007db6:	210c      	movs	r1, #12
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f00b fd36 	bl	801382a <_ZdlPvj>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fa faab 	bl	800232e <_ZNKSt14_Function_base8_M_emptyEv>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f083 0301 	eor.w	r3, r3, #1
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fa fa9b 	bl	800232e <_ZNKSt14_Function_base8_M_emptyEv>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f083 0301 	eor.w	r3, r3, #1
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fb08 	bl	8008428 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8007e22:	b590      	push	{r4, r7, lr}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fb08 	bl	8008444 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8007e34:	683c      	ldr	r4, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f807 	bl	8007e4a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	601c      	str	r4, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4618      	mov	r0, r3
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd90      	pop	{r4, r7, pc}

08007e4a <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fb02 	bl	800845e <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fb02 	bl	8008478 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>
 8007e74:	4603      	mov	r3, r0
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <_ZSt4moveIRP19AbstractCANProviderEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_>:
      operator()(_Tp* __ptr) const
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <_ZNKSt14default_deleteI19AbstractCANProviderEclEPS0_+0x1a>
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	3218      	adds	r2, #24
 8007ea8:	6812      	ldr	r2, [r2, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	4790      	blx	r2
      }
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bf14      	ite	ne
 8007ec4:	2301      	movne	r3, #1
 8007ec6:	2300      	moveq	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007ef6:	6838      	ldr	r0, [r7, #0]
 8007ef8:	f7ff ffed 	bl	8007ed6 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007efc:	4603      	mov	r3, r0
 8007efe:	4622      	mov	r2, r4
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fac5 	bl	8008492 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd90      	pop	{r4, r7, pc}

08007f10 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fad2 	bl	80084c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fade 	bl	80084e2 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
      }
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007f34:	b590      	push	{r4, r7, lr}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d109      	bne.n	8007f5c <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007f48:	68b8      	ldr	r0, [r7, #8]
 8007f4a:	f000 faba 	bl	80084c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8007f4e:	4604      	mov	r4, r0
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fad9 	bl	8008508 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8007f56:	4603      	mov	r3, r0
 8007f58:	601c      	str	r4, [r3, #0]
	    break;
 8007f5a:	e005      	b.n	8007f68 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 fadc 	bl	8008520 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8007f68:	2300      	movs	r3, #0
      }
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd90      	pop	{r4, r7, pc}

08007f72 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	bf14      	ite	ne
 8007f80:	2301      	movne	r3, #1
 8007f82:	2300      	moveq	r3, #0
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8007fa8:	b590      	push	{r4, r7, lr}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8007fb2:	6838      	ldr	r0, [r7, #0]
 8007fb4:	f7ff ffed 	bl	8007f92 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4622      	mov	r2, r4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fae8 	bl	8008594 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd90      	pop	{r4, r7, pc}

08007fcc <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 faf5 	bl	80085c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fb01 	bl	80085e4 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8007fe2:	bf00      	nop
      }
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007fea:	b590      	push	{r4, r7, lr}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d109      	bne.n	8008012 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007ffe:	68b8      	ldr	r0, [r7, #8]
 8008000:	f000 fae0 	bl	80085c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8008004:	4604      	mov	r4, r0
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fafc 	bl	8008604 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 800800c:	4603      	mov	r3, r0
 800800e:	601c      	str	r4, [r3, #0]
	    break;
 8008010:	e005      	b.n	800801e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	461a      	mov	r2, r3
 8008016:	68b9      	ldr	r1, [r7, #8]
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 faff 	bl	800861c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800801e:	2300      	movs	r3, #0
      }
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	bd90      	pop	{r4, r7, pc}

08008028 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4611      	mov	r1, r2
 8008034:	461a      	mov	r2, r3
 8008036:	460b      	mov	r3, r1
 8008038:	80fb      	strh	r3, [r7, #6]
 800803a:	4613      	mov	r3, r2
 800803c:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff fd05 	bl	8007a50 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 8008046:	4a10      	ldr	r2, [pc, #64]	@ (8008088 <_ZN20AbstractSubscriptionI5HBeatEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	797a      	ldrb	r2, [r7, #5]
 8008050:	711a      	strb	r2, [r3, #4]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3308      	adds	r3, #8
 8008056:	f44f 720a 	mov.w	r2, #552	@ 0x228
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f00c fcc8 	bl	80149f2 <memset>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe f96b 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 8008070:	797a      	ldrb	r2, [r7, #5]
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	4619      	mov	r1, r3
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 fb0a 	bl	8008690 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>
    };
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	08018ab8 	.word	0x08018ab8

0800808c <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind>:
    AbstractSubscription(
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4611      	mov	r1, r2
 8008098:	461a      	mov	r2, r3
 800809a:	460b      	mov	r3, r1
 800809c:	80fb      	strh	r3, [r7, #6]
 800809e:	4613      	mov	r3, r2
 80080a0:	717b      	strb	r3, [r7, #5]
    ): interface(interface), kind(kind) {
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff fcd3 	bl	8007a50 <_ZN9IListenerIP16CanardRxTransferEC1Ev>
 80080aa:	4a10      	ldr	r2, [pc, #64]	@ (80080ec <_ZN20AbstractSubscriptionI6JS_msgEC1ESt10shared_ptrI15CyphalInterfaceEt18CanardTransferKind+0x60>)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	797a      	ldrb	r2, [r7, #5]
 80080b4:	711a      	strb	r2, [r3, #4]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3308      	adds	r3, #8
 80080ba:	f44f 720a 	mov.w	r2, #552	@ 0x228
 80080be:	2100      	movs	r1, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f00c fc96 	bl	80149f2 <memset>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe f939 	bl	8006346 <_ZNSt10shared_ptrI15CyphalInterfaceEC1ERKS1_>
        subscribe(port_id, kind);
 80080d4:	797a      	ldrb	r2, [r7, #5]
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	4619      	mov	r1, r3
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 faf6 	bl	80086cc <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>
    };
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	08018a98 	.word	0x08018a98

080080f0 <_ZN20AbstractSubscriptionI15NodeInfoRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af02      	add	r7, sp, #8
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	807b      	strh	r3, [r7, #2]
 80080fc:	4613      	mov	r3, r2
 80080fe:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff fce1 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3308      	adds	r3, #8
 8008116:	787a      	ldrb	r2, [r7, #1]
 8008118:	8879      	ldrh	r1, [r7, #2]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	4613      	mov	r3, r2
 800811e:	2200      	movs	r2, #0
 8008120:	f008 fd90 	bl	8010c44 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fae7 	bl	8008708 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800813a:	4603      	mov	r3, r0
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4618      	mov	r0, r3
 8008150:	f7fa f8ed 	bl	800232e <_ZNKSt14_Function_base8_M_emptyEv>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 800815a:	f00b fb79 	bl	8013850 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	bf00      	nop
      }
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4618      	mov	r0, r3
 800817c:	f7fa f8d7 	bl	800232e <_ZNKSt14_Function_base8_M_emptyEv>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 8008186:	f00b fb63 	bl	8013850 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
      }
 8008198:	4610      	mov	r0, r2
 800819a:	4619      	mov	r1, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af02      	add	r7, sp, #8
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	460b      	mov	r3, r1
 80081ac:	807b      	strh	r3, [r7, #2]
 80081ae:	4613      	mov	r3, r2
 80081b0:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff fc88 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3308      	adds	r3, #8
 80081c8:	787a      	ldrb	r2, [r7, #1]
 80081ca:	8879      	ldrh	r1, [r7, #2]
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	4613      	mov	r3, r2
 80081d0:	f240 2203 	movw	r2, #515	@ 0x203
 80081d4:	f008 fd36 	bl	8010c44 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 80081e0:	b5b0      	push	{r4, r5, r7, lr}
 80081e2:	b08c      	sub	sp, #48	@ 0x30
 80081e4:	af04      	add	r7, sp, #16
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80081ee:	230c      	movs	r3, #12
 80081f0:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80081f2:	f107 031c 	add.w	r3, r7, #28
 80081f6:	461a      	mov	r2, r3
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	68b8      	ldr	r0, [r7, #8]
 80081fc:	f7fb f8be 	bl	800337c <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>
 8008200:	4603      	mov	r3, r0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	09db      	lsrs	r3, r3, #7
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	3310      	adds	r3, #16
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff ff96 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8008218:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800821c:	753b      	strb	r3, [r7, #20]
 800821e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008222:	757b      	strb	r3, [r7, #21]
 8008224:	887b      	ldrh	r3, [r7, #2]
 8008226:	82fb      	strh	r3, [r7, #22]
 8008228:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800822c:	763b      	strb	r3, [r7, #24]
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff ff99 	bl	8008170 <_ZNKSt8functionIFyvEEclEv>
    push(
 800823e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008242:	1884      	adds	r4, r0, r2
 8008244:	eb41 0503 	adc.w	r5, r1, r3
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	9202      	str	r2, [sp, #8]
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	f107 0314 	add.w	r3, r7, #20
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	4622      	mov	r2, r4
 8008258:	462b      	mov	r3, r5
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f008 fcb8 	bl	8010bd0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8008260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	3301      	adds	r3, #1
 8008266:	b2da      	uxtb	r2, r3
 8008268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826a:	701a      	strb	r2, [r3, #0]
}
 800826c:	bf00      	nop
 800826e:	3720      	adds	r7, #32
 8008270:	46bd      	mov	sp, r7
 8008272:	bdb0      	pop	{r4, r5, r7, pc}

08008274 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 8008274:	b5b0      	push	{r4, r5, r7, lr}
 8008276:	b08c      	sub	sp, #48	@ 0x30
 8008278:	af04      	add	r7, sp, #16
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 8008282:	2307      	movs	r3, #7
 8008284:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 8008286:	f107 031c 	add.w	r3, r7, #28
 800828a:	461a      	mov	r2, r3
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	68b8      	ldr	r0, [r7, #8]
 8008290:	f7fa fd14 	bl	8002cbc <uavcan_node_Heartbeat_1_0_serialize_>
 8008294:	4603      	mov	r3, r0
 8008296:	b2db      	uxtb	r3, r3
 8008298:	09db      	lsrs	r3, r3, #7
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	3310      	adds	r3, #16
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff ff4c 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80082ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80082b0:	753b      	strb	r3, [r7, #20]
 80082b2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80082b6:	757b      	strb	r3, [r7, #21]
 80082b8:	887b      	ldrh	r3, [r7, #2]
 80082ba:	82fb      	strh	r3, [r7, #22]
 80082bc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80082c0:	763b      	strb	r3, [r7, #24]
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff ff4f 	bl	8008170 <_ZNKSt8functionIFyvEEclEv>
    push(
 80082d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082d6:	1884      	adds	r4, r0, r2
 80082d8:	eb41 0503 	adc.w	r5, r1, r3
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	9202      	str	r2, [sp, #8]
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	f107 0314 	add.w	r3, r7, #20
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4622      	mov	r2, r4
 80082ec:	462b      	mov	r3, r5
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f008 fc6e 	bl	8010bd0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	3301      	adds	r3, #1
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fe:	701a      	strb	r2, [r3, #0]
}
 8008300:	bf00      	nop
 8008302:	3720      	adds	r7, #32
 8008304:	46bd      	mov	sp, r7
 8008306:	bdb0      	pop	{r4, r5, r7, pc}

08008308 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig>:
public:
    
    template <class T, class... Args> static G4CAN* create_bss(
 8008308:	b590      	push	{r4, r7, lr}
 800830a:	b089      	sub	sp, #36	@ 0x24
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	4613      	mov	r3, r2
 8008316:	71fb      	strb	r3, [r7, #7]
        CanardNodeID node_id,
        size_t queue_len,
        Args&&... args,
        UtilityConfig& utilities
    ) {
        std::byte* allocator_loc = *inout_buffer;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	61fb      	str	r3, [r7, #28]
        auto allocator_ptr = new (allocator_loc) T(queue_len * sizeof(CanardTxQueueItem) * 2.5, args..., utilities);
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	4619      	mov	r1, r3
 8008322:	2008      	movs	r0, #8
 8008324:	f7f9 ff8f 	bl	8002246 <_ZnwjPv>
 8008328:	4604      	mov	r4, r0
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	4413      	add	r3, r2
 8008332:	011b      	lsls	r3, r3, #4
 8008334:	4618      	mov	r0, r3
 8008336:	f7f8 f90d 	bl	8000554 <__aeabi_ui2d>
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	4b18      	ldr	r3, [pc, #96]	@ (80083a0 <_ZN5G4CAN10create_bssI15SystemAllocatorJEEEPS_PPSt4byteP19FDCAN_HandleTypeDefhjDpOT0_R13UtilityConfig+0x98>)
 8008340:	f7f8 f982 	bl	8000648 <__aeabi_dmul>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	4610      	mov	r0, r2
 800834a:	4619      	mov	r1, r3
 800834c:	f7f8 fc54 	bl	8000bf8 <__aeabi_d2uiz>
 8008350:	4603      	mov	r3, r0
 8008352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008354:	4619      	mov	r1, r3
 8008356:	4620      	mov	r0, r4
 8008358:	f7fa f8dc 	bl	8002514 <_ZN15SystemAllocatorC1EjR13UtilityConfig>
 800835c:	61bc      	str	r4, [r7, #24]
    
        std::byte* provider_loc = allocator_loc + sizeof(T);
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	3308      	adds	r3, #8
 8008362:	617b      	str	r3, [r7, #20]
        auto ptr = new (provider_loc) G4CAN(handler, queue_len, utilities);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	4619      	mov	r1, r3
 8008368:	2044      	movs	r0, #68	@ 0x44
 800836a:	f7f9 ff6c 	bl	8002246 <_ZnwjPv>
 800836e:	4604      	mov	r4, r0
 8008370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	4620      	mov	r0, r4
 8008378:	f7fa f8b0 	bl	80024dc <_ZN5G4CANC1EP19FDCAN_HandleTypeDefjR13UtilityConfig>
 800837c:	613c      	str	r4, [r7, #16]
    
        ptr->setup<T>(allocator_ptr, node_id);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	79fa      	ldrb	r2, [r7, #7]
 8008382:	69b9      	ldr	r1, [r7, #24]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f9cb 	bl	8008720 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>

        *inout_buffer = provider_loc + sizeof(G4CAN);
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	601a      	str	r2, [r3, #0]
        return ptr;
 8008394:	693b      	ldr	r3, [r7, #16]
    }
 8008396:	4618      	mov	r0, r3
 8008398:	3724      	adds	r7, #36	@ 0x24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd90      	pop	{r4, r7, pc}
 800839e:	bf00      	nop
 80083a0:	40040000 	.word	0x40040000

080083a4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEEPT_>:
	__shared_ptr(_Yp* __p)
 80083a4:	b590      	push	{r4, r7, lr}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4622      	mov	r2, r4
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 f9f3 	bl	80087a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f9fe 	bl	80087c6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd90      	pop	{r4, r7, pc}

080083d4 <_ZSt4moveIRSt10shared_ptrI15CyphalInterfaceEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 80083f4:	6838      	ldr	r0, [r7, #0]
 80083f6:	f000 f9f1 	bl	80087dc <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 80083fa:	4602      	mov	r2, r0
 80083fc:	f107 0308 	add.w	r3, r7, #8
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f000 f9f5 	bl	80087f2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8008408:	f107 0308 	add.w	r3, r7, #8
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fa0d 	bl	800882e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8008414:	f107 0308 	add.w	r3, r7, #8
 8008418:	4618      	mov	r0, r3
 800841a:	f7fd ff4b 	bl	80062b4 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800841e:	687b      	ldr	r3, [r7, #4]
      }
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <_ZNKSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fa12 	bl	800885c <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008438:	4603      	mov	r3, r0
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <_ZNSt5tupleIJP19AbstractCANProviderSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fa11 	bl	8008876 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fa14 	bl	8008896 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800846e:	4603      	mov	r3, r0
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <_ZNSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fa13 	bl	80088ae <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008488:	4603      	mov	r3, r0
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008492:	b590      	push	{r4, r7, lr}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7f9 ff1c 	bl	80022dc <_ZNSt9_Any_data9_M_accessEv>
 80084a4:	4603      	mov	r3, r0
 80084a6:	4619      	mov	r1, r3
 80084a8:	2004      	movs	r0, #4
 80084aa:	f7f9 fecc 	bl	8002246 <_ZnwjPv>
 80084ae:	4604      	mov	r4, r0
 80084b0:	68b8      	ldr	r0, [r7, #8]
 80084b2:	f7ff fd10 	bl	8007ed6 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80084b6:	4603      	mov	r3, r0
 80084b8:	6023      	str	r3, [r4, #0]
	  }
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd90      	pop	{r4, r7, pc}

080084c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f9fb 	bl	80088c6 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 80084d0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fa03 	bl	80088de <_ZSt11__addressofIKPFyvEEPT_RS3_>
 80084d8:	4603      	mov	r3, r0
	}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80084e2:	b590      	push	{r4, r7, lr}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa02 	bl	80088f4 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80084f0:	4603      	mov	r3, r0
 80084f2:	4619      	mov	r1, r3
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 fa08 	bl	800890a <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 80084fe:	4610      	mov	r0, r2
 8008500:	4619      	mov	r1, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	bd90      	pop	{r4, r7, pc}

08008508 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access() noexcept
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7f9 fee3 	bl	80022dc <_ZNSt9_Any_data9_M_accessEv>
 8008516:	4603      	mov	r3, r0
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008520:	b590      	push	{r4, r7, lr}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4613      	mov	r3, r2
 800852c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2b03      	cmp	r3, #3
 8008532:	d82a      	bhi.n	800858a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8008534:	a201      	add	r2, pc, #4	@ (adr r2, 800853c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8008536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853a:	bf00      	nop
 800853c:	0800854d 	.word	0x0800854d
 8008540:	0800855b 	.word	0x0800855b
 8008544:	0800856f 	.word	0x0800856f
 8008548:	08008581 	.word	0x08008581
	      __dest._M_access<const type_info*>() = nullptr;
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f9ee 	bl	800892e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8008552:	4603      	mov	r3, r0
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
	      break;
 8008558:	e017      	b.n	800858a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800855a:	68b8      	ldr	r0, [r7, #8]
 800855c:	f7ff ffb1 	bl	80084c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8008560:	4604      	mov	r4, r0
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f7ff ffd0 	bl	8008508 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8008568:	4603      	mov	r3, r0
 800856a:	601c      	str	r4, [r3, #0]
	      break;
 800856c:	e00d      	b.n	800858a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800856e:	68b8      	ldr	r0, [r7, #8]
 8008570:	f7ff ffa7 	bl	80084c2 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8008574:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8008576:	4619      	mov	r1, r3
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 f9e4 	bl	8008946 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800857e:	e004      	b.n	800858a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8008580:	4621      	mov	r1, r4
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f9f1 	bl	800896a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8008588:	bf00      	nop
	  return false;
 800858a:	2300      	movs	r3, #0
	}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	bd90      	pop	{r4, r7, pc}

08008594 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008594:	b590      	push	{r4, r7, lr}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7f9 fe9b 	bl	80022dc <_ZNSt9_Any_data9_M_accessEv>
 80085a6:	4603      	mov	r3, r0
 80085a8:	4619      	mov	r1, r3
 80085aa:	2004      	movs	r0, #4
 80085ac:	f7f9 fe4b 	bl	8002246 <_ZnwjPv>
 80085b0:	4604      	mov	r4, r0
 80085b2:	68b8      	ldr	r0, [r7, #8]
 80085b4:	f7ff fced 	bl	8007f92 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80085b8:	4603      	mov	r3, r0
 80085ba:	6023      	str	r3, [r4, #0]
	  }
 80085bc:	bf00      	nop
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd90      	pop	{r4, r7, pc}

080085c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9d8 	bl	8008982 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 80085d2:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f9e0 	bl	800899a <_ZSt11__addressofIKPFvvEEPT_RS3_>
 80085da:	4603      	mov	r3, r0
	}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80085e4:	b590      	push	{r4, r7, lr}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f9df 	bl	80089b0 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80085f2:	4603      	mov	r3, r0
 80085f4:	4619      	mov	r1, r3
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 f9e5 	bl	80089c6 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	bd90      	pop	{r4, r7, pc}

08008604 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access() noexcept
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7f9 fe65 	bl	80022dc <_ZNSt9_Any_data9_M_accessEv>
 8008612:	4603      	mov	r3, r0
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	2b03      	cmp	r3, #3
 800862e:	d82a      	bhi.n	8008686 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8008630:	a201      	add	r2, pc, #4	@ (adr r2, 8008638 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	08008649 	.word	0x08008649
 800863c:	08008657 	.word	0x08008657
 8008640:	0800866b 	.word	0x0800866b
 8008644:	0800867d 	.word	0x0800867d
	      __dest._M_access<const type_info*>() = nullptr;
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f970 	bl	800892e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800864e:	4603      	mov	r3, r0
 8008650:	2200      	movs	r2, #0
 8008652:	601a      	str	r2, [r3, #0]
	      break;
 8008654:	e017      	b.n	8008686 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8008656:	68b8      	ldr	r0, [r7, #8]
 8008658:	f7ff ffb4 	bl	80085c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800865c:	4604      	mov	r4, r0
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff ffd0 	bl	8008604 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8008664:	4603      	mov	r3, r0
 8008666:	601c      	str	r4, [r3, #0]
	      break;
 8008668:	e00d      	b.n	8008686 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800866a:	68b8      	ldr	r0, [r7, #8]
 800866c:	f7ff ffaa 	bl	80085c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8008670:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8008672:	4619      	mov	r1, r3
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 f9b5 	bl	80089e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800867a:	e004      	b.n	8008686 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800867c:	4621      	mov	r1, r4
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f9c2 	bl	8008a08 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8008684:	bf00      	nop
	  return false;
 8008686:	2300      	movs	r3, #0
	}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	bd90      	pop	{r4, r7, pc}

08008690 <_ZN20AbstractSubscriptionI5HBeatE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af02      	add	r7, sp, #8
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	807b      	strh	r3, [r7, #2]
 800869c:	4613      	mov	r3, r2
 800869e:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff fa11 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3308      	adds	r3, #8
 80086b6:	787a      	ldrb	r2, [r7, #1]
 80086b8:	8879      	ldrh	r1, [r7, #2]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	220c      	movs	r2, #12
 80086c0:	f008 fac0 	bl	8010c44 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <_ZN20AbstractSubscriptionI6JS_msgE9subscribeEt18CanardTransferKind>:
    void subscribe(CanardPortID port_id, CanardTransferKind kind) {
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	807b      	strh	r3, [r7, #2]
 80086d8:	4613      	mov	r3, r2
 80086da:	707b      	strb	r3, [r7, #1]
        sub.user_reference = reinterpret_cast<void*>(this);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	629a      	str	r2, [r3, #40]	@ 0x28
        interface->subscribe(port_id, T::extent, kind, &sub);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff f9f3 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3308      	adds	r3, #8
 80086f2:	787a      	ldrb	r2, [r7, #1]
 80086f4:	8879      	ldrh	r1, [r7, #2]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4613      	mov	r3, r2
 80086fa:	220c      	movs	r2, #12
 80086fc:	f008 faa2 	bl	8010c44 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>
    }
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h>:

    template <class T>
    void setup(T* ptr, CanardNodeID node_id) {
 8008720:	b5b0      	push	{r4, r5, r7, lr}
 8008722:	b08e      	sub	sp, #56	@ 0x38
 8008724:	af00      	add	r7, sp, #0
 8008726:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008728:	62b9      	str	r1, [r7, #40]	@ 0x28
 800872a:	4613      	mov	r3, r2
 800872c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        using namespace std::placeholders;

        if (_alloc_ptr) {
 8008730:	481a      	ldr	r0, [pc, #104]	@ (800879c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 8008732:	f7ff f869 	bl	8007808 <_ZNKSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEcvbEv>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x28>
#ifdef __linux__
            std::cerr << "Tried to call setup in provider twice!" << std::endl;
#endif
            utilities.error_handler();
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008740:	3310      	adds	r3, #16
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fcfe 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
        }
        _alloc_ptr = std::unique_ptr<T>(ptr);
 8008748:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800874c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f976 	bl	8008a40 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8008754:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008758:	4619      	mov	r1, r3
 800875a:	4810      	ldr	r0, [pc, #64]	@ (800879c <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x7c>)
 800875c:	f000 f9a1 	bl	8008aa2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>
 8008760:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008764:	4618      	mov	r0, r3
 8008766:	f000 f97a 	bl	8008a5e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>

        canard = canardInit(alloc_f, free_f);
 800876a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 800876c:	463b      	mov	r3, r7
 800876e:	4a0c      	ldr	r2, [pc, #48]	@ (80087a0 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x80>)
 8008770:	490c      	ldr	r1, [pc, #48]	@ (80087a4 <_ZN19AbstractCANProvider5setupI15SystemAllocatorEEvPT_h+0x84>)
 8008772:	4618      	mov	r0, r3
 8008774:	f00a fd56 	bl	8013224 <canardInit>
 8008778:	3420      	adds	r4, #32
 800877a:	463d      	mov	r5, r7
 800877c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800877e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008780:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008784:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        canard.node_id = node_id;
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800878e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8008792:	bf00      	nop
 8008794:	3738      	adds	r7, #56	@ 0x38
 8008796:	46bd      	mov	sp, r7
 8008798:	bdb0      	pop	{r4, r5, r7, pc}
 800879a:	bf00      	nop
 800879c:	200009ac 	.word	0x200009ac
 80087a0:	08002421 	.word	0x08002421
 80087a4:	080023dd 	.word	0x080023dd

080087a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 80087b4:	68b9      	ldr	r1, [r7, #8]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f9a4 	bl	8008b04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>
	{ }
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
	{ }
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <_ZSt4moveIRSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4618      	mov	r0, r3
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3304      	adds	r3, #4
 8008808:	4618      	mov	r0, r3
 800880a:	f7fd fd61 	bl	80062d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	1d1a      	adds	r2, r3, #4
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	3304      	adds	r3, #4
 8008816:	4619      	mov	r1, r3
 8008818:	4610      	mov	r0, r2
 800881a:	f000 f98b 	bl	8008b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
      }
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f000 f98d 	bl	8008b5e <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	1d1a      	adds	r2, r3, #4
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	3304      	adds	r3, #4
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f000 f970 	bl	8008b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f998 	bl	8008b9c <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800886c:	4603      	mov	r3, r0
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f998 	bl	8008bb4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f9a0 	bl	8008bcc <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f9a2 	bl	8008be8 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>
 80088a4:	4603      	mov	r3, r0
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <_ZSt3getILj1EJP19AbstractCANProviderSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f9a3 	bl	8008c02 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80088bc:	4603      	mov	r3, r0
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const noexcept
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7f9 fd0f 	bl	80022f2 <_ZNKSt9_Any_data9_M_accessEv>
 80088d4:	4603      	mov	r3, r0
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	7138      	strb	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008914:	6838      	ldr	r0, [r7, #0]
 8008916:	f7ff ffed 	bl	80088f4 <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800891a:	4603      	mov	r3, r0
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4798      	blx	r3
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4610      	mov	r0, r2
 8008926:	4619      	mov	r1, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7f9 fcd0 	bl	80022dc <_ZNSt9_Any_data9_M_accessEv>
 800893c:	4603      	mov	r3, r0
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8008946:	b590      	push	{r4, r7, lr}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008950:	6838      	ldr	r0, [r7, #0]
 8008952:	f000 f962 	bl	8008c1a <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008956:	4603      	mov	r3, r0
 8008958:	4622      	mov	r2, r4
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f967 	bl	8008c30 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8008962:	bf00      	nop
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	bd90      	pop	{r4, r7, pc}

0800896a <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f974 	bl	8008c62 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const noexcept
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7f9 fcb1 	bl	80022f2 <_ZNKSt9_Any_data9_M_accessEv>
 8008990:	4603      	mov	r3, r0
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	7138      	strb	r0, [r7, #4]
 80089ce:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80089d0:	6838      	ldr	r0, [r7, #0]
 80089d2:	f7ff ffed 	bl	80089b0 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80089d6:	4603      	mov	r3, r0
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4798      	blx	r3
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80089e4:	b590      	push	{r4, r7, lr}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80089ee:	6838      	ldr	r0, [r7, #0]
 80089f0:	f000 f943 	bl	8008c7a <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80089f4:	4603      	mov	r3, r0
 80089f6:	4622      	mov	r2, r4
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f948 	bl	8008c90 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd90      	pop	{r4, r7, pc}

08008a08 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f955 	bl	8008cc2 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8008a18:	bf00      	nop
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 f952 	bl	8008cda <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff ffe6 	bl	8008a20 <_ZNSt15__uniq_ptr_dataI15SystemAllocatorSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8008a5e:	b590      	push	{r4, r7, lr}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f94a 	bl	8008d02 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008a6e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00c      	beq.n	8008a92 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f94f 	bl	8008d1c <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8008a7e:	4604      	mov	r4, r0
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 f958 	bl	8008d36 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8008a86:	4603      	mov	r3, r0
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 f95d 	bl	8008d4c <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>
	__ptr = pointer();
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]
      }
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd90      	pop	{r4, r7, pc}

08008aa2 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EEaSI15SystemAllocatorS1_IS5_EEENSt9enable_ifIXsrSt6__and_IJS8_IJSt14is_convertibleINS_IT_T0_E7pointerEPS0_ESt6__not_ISt8is_arrayISA_EEEESt13is_assignableIRS2_OSB_EEE5valueERS3_E4typeEOSC_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 8008aac:	6838      	ldr	r0, [r7, #0]
 8008aae:	f000 f972 	bl	8008d96 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f959 	bl	8008d6e <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 8008abc:	6838      	ldr	r0, [r7, #0]
 8008abe:	f000 f92d 	bl	8008d1c <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f980 	bl	8008dca <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008aca:	4602      	mov	r2, r0
 8008acc:	f107 030c 	add.w	r3, r7, #12
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 f984 	bl	8008de0 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f969 	bl	8008db0 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
	  return *this;
 8008ade:	687b      	ldr	r3, [r7, #4]
	}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <_ZN15CyphalInterfaceD1Ev>:
class CyphalInterface {
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3308      	adds	r3, #8
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fec3 	bl	8007880 <_ZNSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EED1Ev>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IP15CyphalInterfaceEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8008b04:	b590      	push	{r4, r7, lr}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8008b14:	2010      	movs	r0, #16
 8008b16:	f00a fe8a 	bl	801382e <_Znwj>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	461c      	mov	r4, r3
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 f969 	bl	8008df8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	601c      	str	r4, [r3, #0]
	}
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd90      	pop	{r4, r7, pc}

08008b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	601a      	str	r2, [r3, #0]
      }
 8008b52:	bf00      	nop
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <_ZSt4swapIP15CyphalInterfaceENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f95b 	bl	8008e24 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8008b74:	6838      	ldr	r0, [r7, #0]
 8008b76:	f000 f955 	bl	8008e24 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8008b82:	f107 030c 	add.w	r3, r7, #12
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f94c 	bl	8008e24 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	601a      	str	r2, [r3, #0]
    }
 8008b94:	bf00      	nop
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f948 	bl	8008e3a <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008baa:	4603      	mov	r3, r0
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEEC1Ev>:
      _Tuple_impl()
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f949 	bl	8008e54 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EEC1Ev>:
      constexpr _Head_base()
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 f939 	bl	8008e6a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <_ZSt12__get_helperILj1ESt14default_deleteI19AbstractCANProviderEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f938 	bl	8008e80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>
 8008c10:	4603      	mov	r3, r0
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f7f9 fb4d 	bl	80022dc <_ZNSt9_Any_data9_M_accessEv>
 8008c42:	4603      	mov	r3, r0
 8008c44:	4619      	mov	r1, r3
 8008c46:	2004      	movs	r0, #4
 8008c48:	f7f9 fafd 	bl	8002246 <_ZnwjPv>
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	68b8      	ldr	r0, [r7, #8]
 8008c50:	f7ff ffe3 	bl	8008c1a <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008c54:	4603      	mov	r3, r0
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6023      	str	r3, [r4, #0]
	  }
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd90      	pop	{r4, r7, pc}

08008c62 <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access() noexcept
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b082      	sub	sp, #8
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7f9 fb36 	bl	80022dc <_ZNSt9_Any_data9_M_accessEv>
 8008c70:	4603      	mov	r3, r0
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008c90:	b590      	push	{r4, r7, lr}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7f9 fb1d 	bl	80022dc <_ZNSt9_Any_data9_M_accessEv>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	2004      	movs	r0, #4
 8008ca8:	f7f9 facd 	bl	8002246 <_ZnwjPv>
 8008cac:	4604      	mov	r4, r0
 8008cae:	68b8      	ldr	r0, [r7, #8]
 8008cb0:	f7ff ffe3 	bl	8008c7a <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6023      	str	r3, [r4, #0]
	  }
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd90      	pop	{r4, r7, pc}

08008cc2 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access() noexcept
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7f9 fb06 	bl	80022dc <_ZNSt9_Any_data9_M_accessEv>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8008cda:	b590      	push	{r4, r7, lr}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	6039      	str	r1, [r7, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f8d6 	bl	8008e98 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8008cec:	683c      	ldr	r4, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f807 	bl	8008d02 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	601c      	str	r4, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd90      	pop	{r4, r7, pc}

08008d02 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f8d0 	bl	8008eb2 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008d12:	4603      	mov	r3, r0
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 f8d0 	bl	8008ecc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <_ZSt4moveIRP15SystemAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <_ZNKSt14default_deleteI15SystemAllocatorEclEPS0_+0x1a>
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	320c      	adds	r2, #12
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	4618      	mov	r0, r3
 8008d64:	4790      	blx	r2
      }
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 8008d6e:	b590      	push	{r4, r7, lr}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8008d78:	687c      	ldr	r4, [r7, #4]
 8008d7a:	463b      	mov	r3, r7
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f8b2 	bl	8008ee6 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8008d82:	4603      	mov	r3, r0
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4619      	mov	r1, r3
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 f8b7 	bl	8008efc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>
      }
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd90      	pop	{r4, r7, pc}

08008d96 <_ZNSt10unique_ptrI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 f8cb 	bl	8008f3c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>
 8008da6:	4603      	mov	r3, r0
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f8d3 	bl	8008f66 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <_ZSt7forwardISt14default_deleteI15SystemAllocatorEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <_ZNSt14default_deleteI17AbstractAllocatorEC1I15SystemAllocatorvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 f8bb 	bl	8008f80 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8008e0a:	4a05      	ldr	r2, [pc, #20]	@ (8008e20 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EEC1ES1_+0x28>)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	60da      	str	r2, [r3, #12]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	08018a2c 	.word	0x08018a2c

08008e24 <_ZSt4moveIRP15CyphalInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 f8b1 	bl	8008fac <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EEC1Ev>:
      constexpr _Head_base()
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4618      	mov	r0, r3
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI19AbstractCANProviderEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f89a 	bl	8008fc2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <_ZNSt5tupleIJP15SystemAllocatorSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f898 	bl	8008fd8 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <_ZSt3getILj0EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 f89b 	bl	8008ff8 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f89a 	bl	8009010 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008edc:	4603      	mov	r3, r0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8008efc:	b590      	push	{r4, r7, lr}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f88e 	bl	8009028 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8008f12:	683c      	ldr	r4, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f887 	bl	8009028 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d007      	beq.n	8008f34 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f81e 	bl	8008f66 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	68f9      	ldr	r1, [r7, #12]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f887 	bl	8009042 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
      }
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd90      	pop	{r4, r7, pc}

08008f3c <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fedc 	bl	8008d02 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff fed6 	bl	8008d02 <_ZNSt15__uniq_ptr_implI15SystemAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]
	return __p;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
      }
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f877 	bl	8009064 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8008f76:	4603      	mov	r3, r0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8008f88:	4a07      	ldr	r2, [pc, #28]	@ (8008fa8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	605a      	str	r2, [r3, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	609a      	str	r2, [r3, #8]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	08018aec 	.word	0x08018aec

08008fac <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <_ZNSt10_Head_baseILj1ESt14default_deleteI19AbstractCANProviderELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008fc2:	b480      	push	{r7}
 8008fc4:	b083      	sub	sp, #12
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f84b 	bl	800907c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f853 	bl	8009094 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <_ZSt12__get_helperILj0EP15SystemAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f855 	bl	80090b0 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8009006:	4603      	mov	r3, r0
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <_ZSt3getILj1EJP15SystemAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f856 	bl	80090ca <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800901e:	4603      	mov	r3, r0
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 f855 	bl	80090e2 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009038:	4603      	mov	r3, r0
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d004      	beq.n	800905c <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	320c      	adds	r2, #12
 8009056:	6812      	ldr	r2, [r2, #0]
 8009058:	4618      	mov	r0, r3
 800905a:	4790      	blx	r2
      }
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f845 	bl	80090fc <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8009072:	4603      	mov	r3, r0
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEEC1Ev>:
      _Tuple_impl()
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f845 	bl	8009114 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EEC1Ev>:
      constexpr _Head_base()
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <_ZNSt11_Tuple_implILj0EJP15SystemAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f835 	bl	800912a <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>
 80090c0:	4603      	mov	r3, r0
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <_ZSt12__get_helperILj1ESt14default_deleteI15SystemAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f834 	bl	8009140 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>
 80090d8:	4603      	mov	r3, r0
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f833 	bl	8009158 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80090f2:	4603      	mov	r3, r0
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f833 	bl	8009170 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 800910a:	4603      	mov	r3, r0
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EEC1Ev>:
      constexpr _Head_base()
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4618      	mov	r0, r3
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <_ZNSt10_Head_baseILj0EP15SystemAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4618      	mov	r0, r3
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI15SystemAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f81d 	bl	8009188 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>
 800914e:	4603      	mov	r3, r0
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f81c 	bl	800919e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8009166:	4603      	mov	r3, r0
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f81d 	bl	80091b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 800917e:	4603      	mov	r3, r0
 8009180:	4618      	mov	r0, r3
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <_ZNSt10_Head_baseILj1ESt14default_deleteI15SystemAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 f810 	bl	80091ce <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 80091ae:	4603      	mov	r3, r0
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	4a05      	ldr	r2, [pc, #20]	@ (8009204 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe fdc7 	bl	8007d88 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	08018a2c 	.word	0x08018a2c

08009208 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff ffe7 	bl	80091e4 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009216:	2110      	movs	r1, #16
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f00a fb06 	bl	801382a <_ZdlPvj>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4618      	mov	r0, r3
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3310      	adds	r3, #16
 8009234:	4618      	mov	r0, r3
 8009236:	f7f9 f898 	bl	800236a <_ZNSt8functionIFvvEED1Ev>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	f7f9 f887 	bl	8002350 <_ZNSt8functionIFyvEED1Ev>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <_Z41__static_initialization_and_destruction_0ii>:

}
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	@ 0x28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d122      	bne.n	80092a2 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009262:	4293      	cmp	r3, r2
 8009264:	d11d      	bne.n	80092a2 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8009266:	f107 0308 	add.w	r3, r7, #8
 800926a:	4917      	ldr	r1, [pc, #92]	@ (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe fb3b 	bl	80078e8 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8009272:	f107 0318 	add.w	r3, r7, #24
 8009276:	4915      	ldr	r1, [pc, #84]	@ (80092cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fb65 	bl	8007948 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 800927e:	f107 0218 	add.w	r2, r7, #24
 8009282:	f107 0308 	add.w	r3, r7, #8
 8009286:	4619      	mov	r1, r3
 8009288:	4811      	ldr	r0, [pc, #68]	@ (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800928a:	f7f9 f87b 	bl	8002384 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 800928e:	f107 0318 	add.w	r3, r7, #24
 8009292:	4618      	mov	r0, r3
 8009294:	f7f9 f869 	bl	800236a <_ZNSt8functionIFvvEED1Ev>
 8009298:	f107 0308 	add.w	r3, r7, #8
 800929c:	4618      	mov	r0, r3
 800929e:	f7f9 f857 	bl	8002350 <_ZNSt8functionIFyvEED1Ev>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <_Z41__static_initialization_and_destruction_0ii+0x72>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d105      	bne.n	80092be <_Z41__static_initialization_and_destruction_0ii+0x72>
 80092b2:	4807      	ldr	r0, [pc, #28]	@ (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80092b4:	f7ff ffb8 	bl	8009228 <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 80092b8:	4806      	ldr	r0, [pc, #24]	@ (80092d4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80092ba:	f7fd f854 	bl	8006366 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80092be:	bf00      	nop
 80092c0:	3728      	adds	r7, #40	@ 0x28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	080062f9 	.word	0x080062f9
 80092cc:	080062ed 	.word	0x080062ed
 80092d0:	200004e0 	.word	0x200004e0
 80092d4:	200004d8 	.word	0x200004d8

080092d8 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80092d8:	b590      	push	{r4, r7, lr}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68dc      	ldr	r4, [r3, #12]
 80092e4:	2c00      	cmp	r4, #0
 80092e6:	d006      	beq.n	80092f6 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7ff fbfd 	bl	8008ae8 <_ZN15CyphalInterfaceD1Ev>
 80092ee:	210c      	movs	r1, #12
 80092f0:	4620      	mov	r0, r4
 80092f2:	f00a fa9a 	bl	801382a <_ZdlPvj>
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd90      	pop	{r4, r7, pc}

080092fe <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
      { delete this; }
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff ff7b 	bl	8009208 <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <_ZNSt15_Sp_counted_ptrIP15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8009324:	2300      	movs	r3, #0
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <_ZN20AbstractSubscriptionI21RegisterAccessRequestE6acceptEP16CanardRxTransfer>:
                break;
        }

        return out;
    }
    void accept(CanardRxTransfer* transfer) {
 8009332:	b580      	push	{r7, lr}
 8009334:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 8009338:	af00      	add	r7, sp, #0
 800933a:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800933e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8009342:	6018      	str	r0, [r3, #0]
 8009344:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8009348:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 800934c:	6019      	str	r1, [r3, #0]
        Type object;
        interface->deserialize_transfer<T>(&object, transfer);
 800934e:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8009352:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe fbb9 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009362:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8009366:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 800936a:	f107 0108 	add.w	r1, r7, #8
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	f000 f874 	bl	800945c <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8009374:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8009378:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3304      	adds	r3, #4
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 8009388:	f5a2 7248 	sub.w	r2, r2, #800	@ 0x320
 800938c:	f107 0108 	add.w	r1, r7, #8
 8009390:	f507 7048 	add.w	r0, r7, #800	@ 0x320
 8009394:	f5a0 7047 	sub.w	r0, r0, #796	@ 0x31c
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	4798      	blx	r3
    }
 800939e:	bf00      	nop
 80093a0:	f507 7748 	add.w	r7, r7, #800	@ 0x320
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <_ZN20AbstractSubscriptionI15NodeInfoRequestE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe fb8b 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80093be:	f107 030c 	add.w	r3, r7, #12
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	4619      	mov	r1, r3
 80093c6:	f000 f86a 	bl	800949e <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3304      	adds	r3, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f107 010c 	add.w	r1, r7, #12
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	4798      	blx	r3
    }
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <_ZN20AbstractSubscriptionI6JS_msgE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fe fb6d 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80093fa:	f107 030c 	add.w	r3, r7, #12
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	4619      	mov	r1, r3
 8009402:	f000 f86c 	bl	80094de <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3304      	adds	r3, #4
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f107 010c 	add.w	r1, r7, #12
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	4798      	blx	r3
    }
 8009418:	bf00      	nop
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <_ZN20AbstractSubscriptionI5HBeatE6acceptEP16CanardRxTransfer>:
    void accept(CanardRxTransfer* transfer) {
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
        interface->deserialize_transfer<T>(&object, transfer);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe fb4f 	bl	8007ad4 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009436:	f107 0308 	add.w	r3, r7, #8
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	4619      	mov	r1, r3
 800943e:	f000 f86e 	bl	800951e <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>
        handler(object, transfer);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3304      	adds	r3, #4
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f107 0108 	add.w	r1, r7, #8
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
    }
 8009454:	bf00      	nop
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer>:
        timeout_delta
    );
}

template <typename TypeAlias>
inline void CyphalInterface::deserialize_transfer(
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
    typename TypeAlias::Type *obj,
    CanardRxTransfer* transfer
) const {
    size_t inout_buf_size = TypeAlias::extent;
 8009468:	f240 2303 	movw	r3, #515	@ 0x203
 800946c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	f107 0214 	add.w	r2, r7, #20
 8009476:	4619      	mov	r1, r3
 8009478:	68b8      	ldr	r0, [r7, #8]
 800947a:	f7fc fb85 	bl	8005b88 <uavcan_register_Access_Request_1_0_deserialize_>
 800947e:	4603      	mov	r3, r0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	09db      	lsrs	r3, r3, #7
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d005      	beq.n	8009496 <_ZNK15CyphalInterface20deserialize_transferI21RegisterAccessRequestEEvPNT_4TypeEP16CanardRxTransfer+0x3a>
        utilities.error_handler();
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	3310      	adds	r3, #16
 8009490:	4618      	mov	r0, r3
 8009492:	f7fe fe57 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8009496:	bf00      	nop
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 800949e:	b580      	push	{r7, lr}
 80094a0:	b086      	sub	sp, #24
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	60f8      	str	r0, [r7, #12]
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 80094aa:	2300      	movs	r3, #0
 80094ac:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	f107 0214 	add.w	r2, r7, #20
 80094b6:	4619      	mov	r1, r3
 80094b8:	68b8      	ldr	r0, [r7, #8]
 80094ba:	f7fc fd51 	bl	8005f60 <uavcan_node_GetInfo_Request_1_0_deserialize_>
 80094be:	4603      	mov	r3, r0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	09db      	lsrs	r3, r3, #7
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d005      	beq.n	80094d6 <_ZNK15CyphalInterface20deserialize_transferI15NodeInfoRequestEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	3310      	adds	r3, #16
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fe37 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
}
 80094d6:	bf00      	nop
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 80094ea:	230c      	movs	r3, #12
 80094ec:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	f107 0214 	add.w	r2, r7, #20
 80094f6:	4619      	mov	r1, r3
 80094f8:	68b8      	ldr	r0, [r7, #8]
 80094fa:	f7fa f83b 	bl	8003574 <reg_udral_physics_kinematics_rotation_Planar_0_1_deserialize_>
 80094fe:	4603      	mov	r3, r0
 8009500:	b2db      	uxtb	r3, r3
 8009502:	09db      	lsrs	r3, r3, #7
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <_ZNK15CyphalInterface20deserialize_transferI6JS_msgEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	3310      	adds	r3, #16
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe fe17 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
}
 8009516:	bf00      	nop
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer>:
inline void CyphalInterface::deserialize_transfer(
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
    size_t inout_buf_size = TypeAlias::extent;
 800952a:	230c      	movs	r3, #12
 800952c:	617b      	str	r3, [r7, #20]
    if(TypeAlias::deserializer(obj, (uint8_t *) transfer->payload, &inout_buf_size) < 0 ) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	f107 0214 	add.w	r2, r7, #20
 8009536:	4619      	mov	r1, r3
 8009538:	68b8      	ldr	r0, [r7, #8]
 800953a:	f7f9 fca5 	bl	8002e88 <uavcan_node_Heartbeat_1_0_deserialize_>
 800953e:	4603      	mov	r3, r0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	09db      	lsrs	r3, r3, #7
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d005      	beq.n	8009556 <_ZNK15CyphalInterface20deserialize_transferI5HBeatEEvPNT_4TypeEP16CanardRxTransfer+0x38>
        utilities.error_handler();
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	3310      	adds	r3, #16
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe fdf7 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
}
 8009556:	bf00      	nop
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <_GLOBAL__sub_I_buffer>:
 800955e:	b580      	push	{r7, lr}
 8009560:	af00      	add	r7, sp, #0
 8009562:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009566:	2001      	movs	r0, #1
 8009568:	f7ff fe70 	bl	800924c <_Z41__static_initialization_and_destruction_0ii>
 800956c:	bd80      	pop	{r7, pc}

0800956e <_GLOBAL__sub_D_buffer>:
 800956e:	b580      	push	{r7, lr}
 8009570:	af00      	add	r7, sp, #0
 8009572:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009576:	2000      	movs	r0, #0
 8009578:	f7ff fe68 	bl	800924c <_Z41__static_initialization_and_destruction_0ii>
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009584:	4b1b      	ldr	r3, [pc, #108]	@ (80095f4 <MX_SPI1_Init+0x74>)
 8009586:	4a1c      	ldr	r2, [pc, #112]	@ (80095f8 <MX_SPI1_Init+0x78>)
 8009588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800958a:	4b1a      	ldr	r3, [pc, #104]	@ (80095f4 <MX_SPI1_Init+0x74>)
 800958c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009592:	4b18      	ldr	r3, [pc, #96]	@ (80095f4 <MX_SPI1_Init+0x74>)
 8009594:	2200      	movs	r2, #0
 8009596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009598:	4b16      	ldr	r3, [pc, #88]	@ (80095f4 <MX_SPI1_Init+0x74>)
 800959a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800959e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80095a0:	4b14      	ldr	r3, [pc, #80]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095a2:	2202      	movs	r2, #2
 80095a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80095a6:	4b13      	ldr	r3, [pc, #76]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095a8:	2201      	movs	r2, #1
 80095aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80095ac:	4b11      	ldr	r3, [pc, #68]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80095b4:	4b0f      	ldr	r3, [pc, #60]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095b6:	2220      	movs	r2, #32
 80095b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80095ba:	4b0e      	ldr	r3, [pc, #56]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095bc:	2200      	movs	r2, #0
 80095be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80095c0:	4b0c      	ldr	r3, [pc, #48]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095c6:	4b0b      	ldr	r3, [pc, #44]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80095cc:	4b09      	ldr	r3, [pc, #36]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095ce:	2207      	movs	r2, #7
 80095d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80095d2:	4b08      	ldr	r3, [pc, #32]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80095d8:	4b06      	ldr	r3, [pc, #24]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095da:	2200      	movs	r2, #0
 80095dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80095de:	4805      	ldr	r0, [pc, #20]	@ (80095f4 <MX_SPI1_Init+0x74>)
 80095e0:	f004 ffd2 	bl	800e588 <HAL_SPI_Init>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80095ea:	f7f8 fe26 	bl	800223a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80095ee:	bf00      	nop
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	200007bc 	.word	0x200007bc
 80095f8:	40013000 	.word	0x40013000

080095fc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009600:	4b1b      	ldr	r3, [pc, #108]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009602:	4a1c      	ldr	r2, [pc, #112]	@ (8009674 <MX_SPI3_Init+0x78>)
 8009604:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009606:	4b1a      	ldr	r3, [pc, #104]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009608:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800960c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800960e:	4b18      	ldr	r3, [pc, #96]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009610:	2200      	movs	r2, #0
 8009612:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8009614:	4b16      	ldr	r3, [pc, #88]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009616:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800961a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800961c:	4b14      	ldr	r3, [pc, #80]	@ (8009670 <MX_SPI3_Init+0x74>)
 800961e:	2200      	movs	r2, #0
 8009620:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009622:	4b13      	ldr	r3, [pc, #76]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009624:	2201      	movs	r2, #1
 8009626:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009628:	4b11      	ldr	r3, [pc, #68]	@ (8009670 <MX_SPI3_Init+0x74>)
 800962a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800962e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009630:	4b0f      	ldr	r3, [pc, #60]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009632:	2218      	movs	r2, #24
 8009634:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009636:	4b0e      	ldr	r3, [pc, #56]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009638:	2200      	movs	r2, #0
 800963a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800963c:	4b0c      	ldr	r3, [pc, #48]	@ (8009670 <MX_SPI3_Init+0x74>)
 800963e:	2200      	movs	r2, #0
 8009640:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009642:	4b0b      	ldr	r3, [pc, #44]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009644:	2200      	movs	r2, #0
 8009646:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8009648:	4b09      	ldr	r3, [pc, #36]	@ (8009670 <MX_SPI3_Init+0x74>)
 800964a:	2207      	movs	r2, #7
 800964c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800964e:	4b08      	ldr	r3, [pc, #32]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009650:	2200      	movs	r2, #0
 8009652:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009654:	4b06      	ldr	r3, [pc, #24]	@ (8009670 <MX_SPI3_Init+0x74>)
 8009656:	2200      	movs	r2, #0
 8009658:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800965a:	4805      	ldr	r0, [pc, #20]	@ (8009670 <MX_SPI3_Init+0x74>)
 800965c:	f004 ff94 	bl	800e588 <HAL_SPI_Init>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8009666:	f7f8 fde8 	bl	800223a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800966a:	bf00      	nop
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000820 	.word	0x20000820
 8009674:	40003c00 	.word	0x40003c00

08009678 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08c      	sub	sp, #48	@ 0x30
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009680:	f107 031c 	add.w	r3, r7, #28
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	605a      	str	r2, [r3, #4]
 800968a:	609a      	str	r2, [r3, #8]
 800968c:	60da      	str	r2, [r3, #12]
 800968e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a33      	ldr	r2, [pc, #204]	@ (8009764 <HAL_SPI_MspInit+0xec>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d131      	bne.n	80096fe <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800969a:	4b33      	ldr	r3, [pc, #204]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 800969c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800969e:	4a32      	ldr	r2, [pc, #200]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 80096a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80096a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80096a6:	4b30      	ldr	r3, [pc, #192]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 80096a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80096ae:	61bb      	str	r3, [r7, #24]
 80096b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096b2:	4b2d      	ldr	r3, [pc, #180]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 80096b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096b6:	4a2c      	ldr	r2, [pc, #176]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 80096b8:	f043 0301 	orr.w	r3, r3, #1
 80096bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096be:	4b2a      	ldr	r3, [pc, #168]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 80096c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80096ca:	23e0      	movs	r3, #224	@ 0xe0
 80096cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ce:	2302      	movs	r3, #2
 80096d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096d6:	2300      	movs	r3, #0
 80096d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80096da:	2305      	movs	r3, #5
 80096dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096de:	f107 031c 	add.w	r3, r7, #28
 80096e2:	4619      	mov	r1, r3
 80096e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80096e8:	f002 f874 	bl	800b7d4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80096ec:	2200      	movs	r2, #0
 80096ee:	2100      	movs	r1, #0
 80096f0:	2023      	movs	r0, #35	@ 0x23
 80096f2:	f001 f92c 	bl	800a94e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80096f6:	2023      	movs	r0, #35	@ 0x23
 80096f8:	f001 f943 	bl	800a982 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80096fc:	e02d      	b.n	800975a <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a1a      	ldr	r2, [pc, #104]	@ (800976c <HAL_SPI_MspInit+0xf4>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d128      	bne.n	800975a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009708:	4b17      	ldr	r3, [pc, #92]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 800970a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800970c:	4a16      	ldr	r2, [pc, #88]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 800970e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009712:	6593      	str	r3, [r2, #88]	@ 0x58
 8009714:	4b14      	ldr	r3, [pc, #80]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 8009716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800971c:	613b      	str	r3, [r7, #16]
 800971e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009720:	4b11      	ldr	r3, [pc, #68]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 8009722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009724:	4a10      	ldr	r2, [pc, #64]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 8009726:	f043 0304 	orr.w	r3, r3, #4
 800972a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800972c:	4b0e      	ldr	r3, [pc, #56]	@ (8009768 <HAL_SPI_MspInit+0xf0>)
 800972e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009738:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800973c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800973e:	2302      	movs	r3, #2
 8009740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009742:	2300      	movs	r3, #0
 8009744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009746:	2300      	movs	r3, #0
 8009748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800974a:	2306      	movs	r3, #6
 800974c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800974e:	f107 031c 	add.w	r3, r7, #28
 8009752:	4619      	mov	r1, r3
 8009754:	4806      	ldr	r0, [pc, #24]	@ (8009770 <HAL_SPI_MspInit+0xf8>)
 8009756:	f002 f83d 	bl	800b7d4 <HAL_GPIO_Init>
}
 800975a:	bf00      	nop
 800975c:	3730      	adds	r7, #48	@ 0x30
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	40013000 	.word	0x40013000
 8009768:	40021000 	.word	0x40021000
 800976c:	40003c00 	.word	0x40003c00
 8009770:	48000800 	.word	0x48000800

08009774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800977a:	4b0f      	ldr	r3, [pc, #60]	@ (80097b8 <HAL_MspInit+0x44>)
 800977c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800977e:	4a0e      	ldr	r2, [pc, #56]	@ (80097b8 <HAL_MspInit+0x44>)
 8009780:	f043 0301 	orr.w	r3, r3, #1
 8009784:	6613      	str	r3, [r2, #96]	@ 0x60
 8009786:	4b0c      	ldr	r3, [pc, #48]	@ (80097b8 <HAL_MspInit+0x44>)
 8009788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	607b      	str	r3, [r7, #4]
 8009790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009792:	4b09      	ldr	r3, [pc, #36]	@ (80097b8 <HAL_MspInit+0x44>)
 8009794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009796:	4a08      	ldr	r2, [pc, #32]	@ (80097b8 <HAL_MspInit+0x44>)
 8009798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800979c:	6593      	str	r3, [r2, #88]	@ 0x58
 800979e:	4b06      	ldr	r3, [pc, #24]	@ (80097b8 <HAL_MspInit+0x44>)
 80097a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80097aa:	f003 ff61 	bl	800d670 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80097ae:	bf00      	nop
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	40021000 	.word	0x40021000

080097bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <NMI_Handler+0x4>

080097c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80097c4:	b480      	push	{r7}
 80097c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80097c8:	bf00      	nop
 80097ca:	e7fd      	b.n	80097c8 <HardFault_Handler+0x4>

080097cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80097cc:	b480      	push	{r7}
 80097ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80097d0:	bf00      	nop
 80097d2:	e7fd      	b.n	80097d0 <MemManage_Handler+0x4>

080097d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80097d4:	b480      	push	{r7}
 80097d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <BusFault_Handler+0x4>

080097dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80097e0:	bf00      	nop
 80097e2:	e7fd      	b.n	80097e0 <UsageFault_Handler+0x4>

080097e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80097e8:	bf00      	nop
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80097f2:	b480      	push	{r7}
 80097f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80097f6:	bf00      	nop
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009800:	b480      	push	{r7}
 8009802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009812:	f000 ff81 	bl	800a718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009816:	bf00      	nop
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8009820:	4802      	ldr	r0, [pc, #8]	@ (800982c <DMA1_Channel1_IRQHandler+0x10>)
 8009822:	f001 fa31 	bl	800ac88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009826:	bf00      	nop
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000374 	.word	0x20000374

08009830 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8009834:	4802      	ldr	r0, [pc, #8]	@ (8009840 <DMA1_Channel2_IRQHandler+0x10>)
 8009836:	f001 fa27 	bl	800ac88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800983a:	bf00      	nop
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	200003d4 	.word	0x200003d4

08009844 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009848:	4802      	ldr	r0, [pc, #8]	@ (8009854 <SPI1_IRQHandler+0x10>)
 800984a:	f005 fadf 	bl	800ee0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800984e:	bf00      	nop
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	200007bc 	.word	0x200007bc

08009858 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800985c:	4802      	ldr	r0, [pc, #8]	@ (8009868 <USART2_IRQHandler+0x10>)
 800985e:	f005 ff8d 	bl	800f77c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009862:	bf00      	nop
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	200008d4 	.word	0x200008d4

0800986c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8009870:	4802      	ldr	r0, [pc, #8]	@ (800987c <I2C4_EV_IRQHandler+0x10>)
 8009872:	f002 fd19 	bl	800c2a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8009876:	bf00      	nop
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20000320 	.word	0x20000320

08009880 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8009884:	4802      	ldr	r0, [pc, #8]	@ (8009890 <I2C4_ER_IRQHandler+0x10>)
 8009886:	f002 fd29 	bl	800c2dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800988a:	bf00      	nop
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000320 	.word	0x20000320

08009894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
  return 1;
 8009898:	2301      	movs	r3, #1
}
 800989a:	4618      	mov	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <_kill>:

int _kill(int pid, int sig)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80098ae:	f00b f959 	bl	8014b64 <__errno>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2216      	movs	r2, #22
 80098b6:	601a      	str	r2, [r3, #0]
  return -1;
 80098b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <_exit>:

void _exit (int status)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80098cc:	f04f 31ff 	mov.w	r1, #4294967295
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff ffe7 	bl	80098a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80098d6:	bf00      	nop
 80098d8:	e7fd      	b.n	80098d6 <_exit+0x12>

080098da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b086      	sub	sp, #24
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	e00a      	b.n	8009902 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80098ec:	f3af 8000 	nop.w
 80098f0:	4601      	mov	r1, r0
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	60ba      	str	r2, [r7, #8]
 80098f8:	b2ca      	uxtb	r2, r1
 80098fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	3301      	adds	r3, #1
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	dbf0      	blt.n	80098ec <_read+0x12>
  }

  return len;
 800990a:	687b      	ldr	r3, [r7, #4]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009920:	2300      	movs	r3, #0
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	e009      	b.n	800993a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	60ba      	str	r2, [r7, #8]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	4618      	mov	r0, r3
 8009930:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	3301      	adds	r3, #1
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	429a      	cmp	r2, r3
 8009940:	dbf1      	blt.n	8009926 <_write+0x12>
  }
  return len;
 8009942:	687b      	ldr	r3, [r7, #4]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <_close>:

int _close(int file)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009974:	605a      	str	r2, [r3, #4]
  return 0;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <_isatty>:

int _isatty(int file)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800998c:	2301      	movs	r3, #1
}
 800998e:	4618      	mov	r0, r3
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800999a:	b480      	push	{r7}
 800999c:	b085      	sub	sp, #20
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80099bc:	4a14      	ldr	r2, [pc, #80]	@ (8009a10 <_sbrk+0x5c>)
 80099be:	4b15      	ldr	r3, [pc, #84]	@ (8009a14 <_sbrk+0x60>)
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80099c8:	4b13      	ldr	r3, [pc, #76]	@ (8009a18 <_sbrk+0x64>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d102      	bne.n	80099d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80099d0:	4b11      	ldr	r3, [pc, #68]	@ (8009a18 <_sbrk+0x64>)
 80099d2:	4a12      	ldr	r2, [pc, #72]	@ (8009a1c <_sbrk+0x68>)
 80099d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80099d6:	4b10      	ldr	r3, [pc, #64]	@ (8009a18 <_sbrk+0x64>)
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4413      	add	r3, r2
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d207      	bcs.n	80099f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80099e4:	f00b f8be 	bl	8014b64 <__errno>
 80099e8:	4603      	mov	r3, r0
 80099ea:	220c      	movs	r2, #12
 80099ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80099ee:	f04f 33ff 	mov.w	r3, #4294967295
 80099f2:	e009      	b.n	8009a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80099f4:	4b08      	ldr	r3, [pc, #32]	@ (8009a18 <_sbrk+0x64>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80099fa:	4b07      	ldr	r3, [pc, #28]	@ (8009a18 <_sbrk+0x64>)
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4413      	add	r3, r2
 8009a02:	4a05      	ldr	r2, [pc, #20]	@ (8009a18 <_sbrk+0x64>)
 8009a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009a06:	68fb      	ldr	r3, [r7, #12]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20020000 	.word	0x20020000
 8009a14:	00000400 	.word	0x00000400
 8009a18:	20000884 	.word	0x20000884
 8009a1c:	20000b00 	.word	0x20000b00

08009a20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009a20:	b480      	push	{r7}
 8009a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <SystemInit+0x20>)
 8009a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a2a:	4a05      	ldr	r2, [pc, #20]	@ (8009a40 <SystemInit+0x20>)
 8009a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009a34:	bf00      	nop
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	e000ed00 	.word	0xe000ed00

08009a44 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08c      	sub	sp, #48	@ 0x30
 8009a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009a4a:	f107 030c 	add.w	r3, r7, #12
 8009a4e:	2224      	movs	r2, #36	@ 0x24
 8009a50:	2100      	movs	r1, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f00a ffcd 	bl	80149f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a58:	463b      	mov	r3, r7
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	605a      	str	r2, [r3, #4]
 8009a60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009a62:	4b23      	ldr	r3, [pc, #140]	@ (8009af0 <MX_TIM8_Init+0xac>)
 8009a64:	4a23      	ldr	r2, [pc, #140]	@ (8009af4 <MX_TIM8_Init+0xb0>)
 8009a66:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009a68:	4b21      	ldr	r3, [pc, #132]	@ (8009af0 <MX_TIM8_Init+0xac>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a6e:	4b20      	ldr	r3, [pc, #128]	@ (8009af0 <MX_TIM8_Init+0xac>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009a74:	4b1e      	ldr	r3, [pc, #120]	@ (8009af0 <MX_TIM8_Init+0xac>)
 8009a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a7a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8009af0 <MX_TIM8_Init+0xac>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009a82:	4b1b      	ldr	r3, [pc, #108]	@ (8009af0 <MX_TIM8_Init+0xac>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a88:	4b19      	ldr	r3, [pc, #100]	@ (8009af0 <MX_TIM8_Init+0xac>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009a92:	2300      	movs	r3, #0
 8009a94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009a96:	2301      	movs	r3, #1
 8009a98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8009ab2:	f107 030c 	add.w	r3, r7, #12
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	480d      	ldr	r0, [pc, #52]	@ (8009af0 <MX_TIM8_Init+0xac>)
 8009aba:	f005 fc1f 	bl	800f2fc <HAL_TIM_Encoder_Init>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8009ac4:	f7f8 fbb9 	bl	800223a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009acc:	2300      	movs	r3, #0
 8009ace:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4805      	ldr	r0, [pc, #20]	@ (8009af0 <MX_TIM8_Init+0xac>)
 8009ada:	f005 fd69 	bl	800f5b0 <HAL_TIMEx_MasterConfigSynchronization>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8009ae4:	f7f8 fba9 	bl	800223a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009ae8:	bf00      	nop
 8009aea:	3730      	adds	r7, #48	@ 0x30
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20000888 	.word	0x20000888
 8009af4:	40013400 	.word	0x40013400

08009af8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	@ 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b00:	f107 0314 	add.w	r3, r7, #20
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	605a      	str	r2, [r3, #4]
 8009b0a:	609a      	str	r2, [r3, #8]
 8009b0c:	60da      	str	r2, [r3, #12]
 8009b0e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a25      	ldr	r2, [pc, #148]	@ (8009bac <HAL_TIM_Encoder_MspInit+0xb4>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d143      	bne.n	8009ba2 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009b1a:	4b25      	ldr	r3, [pc, #148]	@ (8009bb0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b1e:	4a24      	ldr	r2, [pc, #144]	@ (8009bb0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009b24:	6613      	str	r3, [r2, #96]	@ 0x60
 8009b26:	4b22      	ldr	r3, [pc, #136]	@ (8009bb0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b2e:	613b      	str	r3, [r7, #16]
 8009b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b32:	4b1f      	ldr	r3, [pc, #124]	@ (8009bb0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b36:	4a1e      	ldr	r2, [pc, #120]	@ (8009bb0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b38:	f043 0304 	orr.w	r3, r3, #4
 8009b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b42:	f003 0304 	and.w	r3, r3, #4
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b4a:	4b19      	ldr	r3, [pc, #100]	@ (8009bb0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b4e:	4a18      	ldr	r2, [pc, #96]	@ (8009bb0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b50:	f043 0302 	orr.w	r3, r3, #2
 8009b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b56:	4b16      	ldr	r3, [pc, #88]	@ (8009bb0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8009b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	60bb      	str	r3, [r7, #8]
 8009b60:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009b62:	2380      	movs	r3, #128	@ 0x80
 8009b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b66:	2302      	movs	r3, #2
 8009b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009b72:	2304      	movs	r3, #4
 8009b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b76:	f107 0314 	add.w	r3, r7, #20
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	480d      	ldr	r0, [pc, #52]	@ (8009bb4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8009b7e:	f001 fe29 	bl	800b7d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009b82:	2340      	movs	r3, #64	@ 0x40
 8009b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b86:	2302      	movs	r3, #2
 8009b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8009b92:	2305      	movs	r3, #5
 8009b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b96:	f107 0314 	add.w	r3, r7, #20
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4806      	ldr	r0, [pc, #24]	@ (8009bb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8009b9e:	f001 fe19 	bl	800b7d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009ba2:	bf00      	nop
 8009ba4:	3728      	adds	r7, #40	@ 0x28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	40013400 	.word	0x40013400
 8009bb0:	40021000 	.word	0x40021000
 8009bb4:	48000800 	.word	0x48000800
 8009bb8:	48000400 	.word	0x48000400

08009bbc <tmc5160_position>:
#endif

extern motor_config mc;

void tmc5160_position(int32_t position)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	uint8_t WData[5] = {0};
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60bb      	str	r3, [r7, #8]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 1 (position move)
 8009bcc:	23a0      	movs	r3, #160	@ 0xa0
 8009bce:	723b      	strb	r3, [r7, #8]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	727b      	strb	r3, [r7, #9]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	72bb      	strb	r3, [r7, #10]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	72fb      	strb	r3, [r7, #11]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8009be0:	f107 0308 	add.w	r3, r7, #8
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 f947 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xAD; //moving register
 8009bea:	23ad      	movs	r3, #173	@ 0xad
 8009bec:	723b      	strb	r3, [r7, #8]
	WData[1] = (position & 0xFF000000) >> 24; //position in steps
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	0e1b      	lsrs	r3, r3, #24
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	727b      	strb	r3, [r7, #9]
	WData[2] = (position & 0x00FF0000) >> 16;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	141b      	asrs	r3, r3, #16
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	72bb      	strb	r3, [r7, #10]
	WData[3] = (position & 0x0000FF00) >> 8;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	121b      	asrs	r3, r3, #8
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	72fb      	strb	r3, [r7, #11]
	WData[4] = (position & 0x000000FF);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 f931 	bl	8009e78 <tmc5160_write>
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <tmc5160_move>:

void tmc5160_move(int32_t vel)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7f6 fca3 	bl	8000574 <__aeabi_i2d>
 8009c2e:	a336      	add	r3, pc, #216	@ (adr r3, 8009d08 <tmc5160_move+0xe8>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f7f6 fd08 	bl	8000648 <__aeabi_dmul>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4619      	mov	r1, r3
 8009c40:	f7f6 ffb2 	bl	8000ba8 <__aeabi_d2iz>
 8009c44:	4603      	mov	r3, r0
 8009c46:	607b      	str	r3, [r7, #4]
	int32_t v1;
	uint8_t WData[5] = {0};
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	105b      	asrs	r3, r3, #1
 8009c54:	617b      	str	r3, [r7, #20]

	if (vel < 0) //select positive or negative mode depending on vel sign
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	da0f      	bge.n	8009c7c <tmc5160_move+0x5c>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 8009c5c:	23a0      	movs	r3, #160	@ 0xa0
 8009c5e:	733b      	strb	r3, [r7, #12]
 8009c60:	2300      	movs	r3, #0
 8009c62:	737b      	strb	r3, [r7, #13]
 8009c64:	2300      	movs	r3, #0
 8009c66:	73bb      	strb	r3, [r7, #14]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 8009c70:	f107 030c 	add.w	r3, r7, #12
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 f8ff 	bl	8009e78 <tmc5160_write>
 8009c7a:	e00e      	b.n	8009c9a <tmc5160_move+0x7a>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 8009c7c:	23a0      	movs	r3, #160	@ 0xa0
 8009c7e:	733b      	strb	r3, [r7, #12]
 8009c80:	2300      	movs	r3, #0
 8009c82:	737b      	strb	r3, [r7, #13]
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	743b      	strb	r3, [r7, #16]
		  tmc5160_write(WData);
 8009c90:	f107 030c 	add.w	r3, r7, #12
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 f8ef 	bl	8009e78 <tmc5160_write>
	}

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8009c9a:	23a5      	movs	r3, #165	@ 0xa5
 8009c9c:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	0e1b      	lsrs	r3, r3, #24
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	141b      	asrs	r3, r3, #16
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	121b      	asrs	r3, r3, #8
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009cbc:	f107 030c 	add.w	r3, r7, #12
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 f8d9 	bl	8009e78 <tmc5160_write>

	vel = abs(vel);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	bfb8      	it	lt
 8009ccc:	425b      	neglt	r3, r3
 8009cce:	607b      	str	r3, [r7, #4]
	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009cd0:	23a7      	movs	r3, #167	@ 0xa7
 8009cd2:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	0e1b      	lsrs	r3, r3, #24
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	141b      	asrs	r3, r3, #16
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	121b      	asrs	r3, r3, #8
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009cf2:	f107 030c 	add.w	r3, r7, #12
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 f8be 	bl	8009e78 <tmc5160_write>
}
 8009cfc:	bf00      	nop
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	f3af 8000 	nop.w
 8009d08:	77ffebde 	.word	0x77ffebde
 8009d0c:	3ff65e9f 	.word	0x3ff65e9f

08009d10 <tmc5160_set_default_vel>:

void tmc5160_set_default_vel()
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009d16:	2300      	movs	r3, #0
 8009d18:	603b      	str	r3, [r7, #0]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	713b      	strb	r3, [r7, #4]

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 8009d1e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8009d22:	f000 f859 	bl	8009dd8 <tmc5160_velocity>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 8009d26:	23a3      	movs	r3, #163	@ 0xa3
 8009d28:	703b      	strb	r3, [r7, #0]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	707b      	strb	r3, [r7, #1]
 8009d2e:	2300      	movs	r3, #0
 8009d30:	70bb      	strb	r3, [r7, #2]
 8009d32:	2300      	movs	r3, #0
 8009d34:	70fb      	strb	r3, [r7, #3]
 8009d36:	230a      	movs	r3, #10
 8009d38:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 f89b 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 8009d42:	23a4      	movs	r3, #164	@ 0xa4
 8009d44:	703b      	strb	r3, [r7, #0]
 8009d46:	2300      	movs	r3, #0
 8009d48:	707b      	strb	r3, [r7, #1]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	70bb      	strb	r3, [r7, #2]
 8009d4e:	236e      	movs	r3, #110	@ 0x6e
 8009d50:	70fb      	strb	r3, [r7, #3]
 8009d52:	2320      	movs	r3, #32
 8009d54:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009d56:	463b      	mov	r3, r7
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 f88d 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 8009d5e:	23a6      	movs	r3, #166	@ 0xa6
 8009d60:	703b      	strb	r3, [r7, #0]
 8009d62:	2300      	movs	r3, #0
 8009d64:	707b      	strb	r3, [r7, #1]
 8009d66:	2300      	movs	r3, #0
 8009d68:	70bb      	strb	r3, [r7, #2]
 8009d6a:	2323      	movs	r3, #35	@ 0x23
 8009d6c:	70fb      	strb	r3, [r7, #3]
 8009d6e:	2388      	movs	r3, #136	@ 0x88
 8009d70:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009d72:	463b      	mov	r3, r7
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 f87f 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 8009d7a:	23a8      	movs	r3, #168	@ 0xa8
 8009d7c:	703b      	strb	r3, [r7, #0]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	707b      	strb	r3, [r7, #1]
 8009d82:	2300      	movs	r3, #0
 8009d84:	70bb      	strb	r3, [r7, #2]
 8009d86:	2323      	movs	r3, #35	@ 0x23
 8009d88:	70fb      	strb	r3, [r7, #3]
 8009d8a:	2388      	movs	r3, #136	@ 0x88
 8009d8c:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009d8e:	463b      	mov	r3, r7
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 f871 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 8009d96:	23aa      	movs	r3, #170	@ 0xaa
 8009d98:	703b      	strb	r3, [r7, #0]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	707b      	strb	r3, [r7, #1]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	70bb      	strb	r3, [r7, #2]
 8009da2:	236e      	movs	r3, #110	@ 0x6e
 8009da4:	70fb      	strb	r3, [r7, #3]
 8009da6:	2320      	movs	r3, #32
 8009da8:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009daa:	463b      	mov	r3, r7
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 f863 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 8009db2:	23ab      	movs	r3, #171	@ 0xab
 8009db4:	703b      	strb	r3, [r7, #0]
 8009db6:	2300      	movs	r3, #0
 8009db8:	707b      	strb	r3, [r7, #1]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	70bb      	strb	r3, [r7, #2]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	70fb      	strb	r3, [r7, #3]
 8009dc2:	230a      	movs	r3, #10
 8009dc4:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f855 	bl	8009e78 <tmc5160_write>
}
 8009dce:	bf00      	nop
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <tmc5160_velocity>:

void tmc5160_velocity(uint32_t vel)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	vel *= 1.3981013; //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7f6 fbb7 	bl	8000554 <__aeabi_ui2d>
 8009de6:	a322      	add	r3, pc, #136	@ (adr r3, 8009e70 <tmc5160_velocity+0x98>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	f7f6 fc2c 	bl	8000648 <__aeabi_dmul>
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	4610      	mov	r0, r2
 8009df6:	4619      	mov	r1, r3
 8009df8:	f7f6 fefe 	bl	8000bf8 <__aeabi_d2uiz>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	607b      	str	r3, [r7, #4]
	uint32_t v1;
	uint8_t WData[5] = {0};
 8009e00:	2300      	movs	r3, #0
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	2300      	movs	r3, #0
 8009e06:	743b      	strb	r3, [r7, #16]

	v1 = vel >> 1; // >> 1 (to divide by 2)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	085b      	lsrs	r3, r3, #1
 8009e0c:	617b      	str	r3, [r7, #20]

	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 8009e0e:	23a5      	movs	r3, #165	@ 0xa5
 8009e10:	733b      	strb	r3, [r7, #12]
	WData[1] = (v1 & 0xFF000000) >> 24;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	0e1b      	lsrs	r3, r3, #24
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	737b      	strb	r3, [r7, #13]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	0c1b      	lsrs	r3, r3, #16
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	73bb      	strb	r3, [r7, #14]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	0a1b      	lsrs	r3, r3, #8
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	73fb      	strb	r3, [r7, #15]
	WData[4] = (v1 & 0x000000FF);
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009e30:	f107 030c 	add.w	r3, r7, #12
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 f81f 	bl	8009e78 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 8009e3a:	23a7      	movs	r3, #167	@ 0xa7
 8009e3c:	733b      	strb	r3, [r7, #12]
	WData[1] = (vel & 0xFF000000) >> 24;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	0e1b      	lsrs	r3, r3, #24
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	737b      	strb	r3, [r7, #13]
	WData[2] = (vel & 0x00FF0000) >> 16;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	0c1b      	lsrs	r3, r3, #16
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	73bb      	strb	r3, [r7, #14]
	WData[3] = (vel & 0x0000FF00) >> 8;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	0a1b      	lsrs	r3, r3, #8
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	73fb      	strb	r3, [r7, #15]
	WData[4] = (vel & 0x000000FF);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8009e5c:	f107 030c 	add.w	r3, r7, #12
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 f809 	bl	8009e78 <tmc5160_write>

}
 8009e66:	bf00      	nop
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	77ffebde 	.word	0x77ffebde
 8009e74:	3ff65e9f 	.word	0x3ff65e9f

08009e78 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8009e80:	2200      	movs	r2, #0
 8009e82:	2110      	movs	r1, #16
 8009e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009e88:	f001 fe26 	bl	800bad8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 8009e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e90:	2205      	movs	r2, #5
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	4806      	ldr	r0, [pc, #24]	@ (8009eb0 <tmc5160_write+0x38>)
 8009e96:	f004 fc22 	bl	800e6de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	2110      	movs	r1, #16
 8009e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ea2:	f001 fe19 	bl	800bad8 <HAL_GPIO_WritePin>
}
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	200007bc 	.word	0x200007bc

08009eb4 <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2110      	movs	r1, #16
 8009ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ec6:	f001 fe07 	bl	800bad8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009eca:	f04f 33ff 	mov.w	r3, #4294967295
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	2305      	movs	r3, #5
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	6879      	ldr	r1, [r7, #4]
 8009ed6:	4812      	ldr	r0, [pc, #72]	@ (8009f20 <tmc5160_read+0x6c>)
 8009ed8:	f004 fd76 	bl	800e9c8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009edc:	2201      	movs	r2, #1
 8009ede:	2110      	movs	r1, #16
 8009ee0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ee4:	f001 fdf8 	bl	800bad8 <HAL_GPIO_WritePin>
	nop();
 8009ee8:	bf00      	nop
	nop();
 8009eea:	bf00      	nop
	nop();
 8009eec:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 8009eee:	2200      	movs	r2, #0
 8009ef0:	2110      	movs	r1, #16
 8009ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ef6:	f001 fdef 	bl	800bad8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 8009efa:	f04f 33ff 	mov.w	r3, #4294967295
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	2305      	movs	r3, #5
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	4806      	ldr	r0, [pc, #24]	@ (8009f20 <tmc5160_read+0x6c>)
 8009f08:	f004 fd5e 	bl	800e9c8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	2110      	movs	r1, #16
 8009f10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f14:	f001 fde0 	bl	800bad8 <HAL_GPIO_WritePin>
}
 8009f18:	bf00      	nop
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	200007bc 	.word	0x200007bc

08009f24 <tmc5160_position_read>:


int32_t tmc5160_position_read()
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 8009f32:	2300      	movs	r3, #0
 8009f34:	607b      	str	r3, [r7, #4]
 8009f36:	2300      	movs	r3, #0
 8009f38:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 8009f3a:	2321      	movs	r3, #33	@ 0x21
 8009f3c:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 8009f3e:	1d3a      	adds	r2, r7, #4
 8009f40:	f107 030c 	add.w	r3, r7, #12
 8009f44:	4611      	mov	r1, r2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff ffb4 	bl	8009eb4 <tmc5160_read>

	int32_t response = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 8009f50:	797b      	ldrb	r3, [r7, #5]
 8009f52:	461a      	mov	r2, r3
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 8009f60:	79bb      	ldrb	r3, [r7, #6]
 8009f62:	461a      	mov	r2, r3
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	021b      	lsls	r3, r3, #8
 8009f6e:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	461a      	mov	r2, r3
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	021b      	lsls	r3, r3, #8
 8009f7e:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 8009f80:	7a3b      	ldrb	r3, [r7, #8]
 8009f82:	461a      	mov	r2, r3
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	617b      	str	r3, [r7, #20]

	return response;
 8009f8a:	697b      	ldr	r3, [r7, #20]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	0000      	movs	r0, r0
	...

08009f98 <tmc5160_velocity_read>:

int32_t tmc5160_velocity_read()
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60bb      	str	r3, [r7, #8]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	733b      	strb	r3, [r7, #12]
	uint8_t RData[5] = {0};
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	603b      	str	r3, [r7, #0]
 8009faa:	2300      	movs	r3, #0
 8009fac:	713b      	strb	r3, [r7, #4]
	WData[0] = 0x22; //VACTUAL register address
 8009fae:	2322      	movs	r3, #34	@ 0x22
 8009fb0:	723b      	strb	r3, [r7, #8]
	tmc5160_read(WData, RData);
 8009fb2:	463a      	mov	r2, r7
 8009fb4:	f107 0308 	add.w	r3, r7, #8
 8009fb8:	4611      	mov	r1, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7ff ff7a 	bl	8009eb4 <tmc5160_read>

	int32_t response = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	617b      	str	r3, [r7, #20]

    response |= (RData[1] & 0xFF);
 8009fc4:	787b      	ldrb	r3, [r7, #1]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	021b      	lsls	r3, r3, #8
 8009fd2:	617b      	str	r3, [r7, #20]
    response |= (RData[2] & 0xFF);
 8009fd4:	78bb      	ldrb	r3, [r7, #2]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	021b      	lsls	r3, r3, #8
 8009fe2:	617b      	str	r3, [r7, #20]
    response |= (RData[3] & 0xFF);
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	617b      	str	r3, [r7, #20]
    response <<= 8;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	021b      	lsls	r3, r3, #8
 8009ff2:	617b      	str	r3, [r7, #20]
    response |= (RData[4] & 0xFF);
 8009ff4:	793b      	ldrb	r3, [r7, #4]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	617b      	str	r3, [r7, #20]

    int32_t rv = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	613b      	str	r3, [r7, #16]
    rv = sign_extend_bits_to_32(response, 24);
 800a002:	2118      	movs	r1, #24
 800a004:	6978      	ldr	r0, [r7, #20]
 800a006:	f000 fa7b 	bl	800a500 <sign_extend_bits_to_32>
 800a00a:	6138      	str	r0, [r7, #16]

	return (rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 800a00c:	6938      	ldr	r0, [r7, #16]
 800a00e:	f7f6 fab1 	bl	8000574 <__aeabi_i2d>
 800a012:	a309      	add	r3, pc, #36	@ (adr r3, 800a038 <tmc5160_velocity_read+0xa0>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f7f6 fc40 	bl	800089c <__aeabi_ddiv>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4610      	mov	r0, r2
 800a022:	4619      	mov	r1, r3
 800a024:	f7f6 fdc0 	bl	8000ba8 <__aeabi_d2iz>
 800a028:	4603      	mov	r3, r0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	f3af 8000 	nop.w
 800a038:	77ffebde 	.word	0x77ffebde
 800a03c:	3ff65e9f 	.word	0x3ff65e9f

0800a040 <tmc5160_init>:

void tmc5160_init(motor_config * mc)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 800a048:	2200      	movs	r2, #0
 800a04a:	2120      	movs	r1, #32
 800a04c:	4882      	ldr	r0, [pc, #520]	@ (800a258 <tmc5160_init+0x218>)
 800a04e:	f001 fd43 	bl	800bad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 800a052:	2201      	movs	r2, #1
 800a054:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a05c:	f001 fd3c 	bl	800bad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 800a060:	2200      	movs	r2, #0
 800a062:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a066:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a06a:	f001 fd35 	bl	800bad8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800a06e:	2201      	movs	r2, #1
 800a070:	2110      	movs	r1, #16
 800a072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a076:	f001 fd2f 	bl	800bad8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 800a07a:	2200      	movs	r2, #0
 800a07c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a084:	f001 fd28 	bl	800bad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 800a088:	2200      	movs	r2, #0
 800a08a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a08e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a092:	f001 fd21 	bl	800bad8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a096:	2064      	movs	r0, #100	@ 0x64
 800a098:	f000 fb5c 	bl	800a754 <HAL_Delay>

	uint8_t WData[5] = {0};
 800a09c:	2300      	movs	r3, #0
 800a09e:	60bb      	str	r3, [r7, #8]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 800a0a4:	23ec      	movs	r3, #236	@ 0xec
 800a0a6:	723b      	strb	r3, [r7, #8]
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	727b      	strb	r3, [r7, #9]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	72bb      	strb	r3, [r7, #10]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	72fb      	strb	r3, [r7, #11]
 800a0b4:	23c3      	movs	r3, #195	@ 0xc3
 800a0b6:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a0b8:	f107 0308 	add.w	r3, r7, #8
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fedb 	bl	8009e78 <tmc5160_write>

	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = mc->init_irun; WData[4] = mc->init_irun; //  IHOLDDELAY=0,  IRUN=10/31,  IHOLD=02/31
 800a0c2:	2390      	movs	r3, #144	@ 0x90
 800a0c4:	723b      	strb	r3, [r7, #8]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	727b      	strb	r3, [r7, #9]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	72bb      	strb	r3, [r7, #10]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	72fb      	strb	r3, [r7, #11]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff fec6 	bl	8009e78 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 800a0ec:	2391      	movs	r3, #145	@ 0x91
 800a0ee:	723b      	strb	r3, [r7, #8]
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	727b      	strb	r3, [r7, #9]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	72bb      	strb	r3, [r7, #10]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	72fb      	strb	r3, [r7, #11]
 800a0fc:	230a      	movs	r3, #10
 800a0fe:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a100:	f107 0308 	add.w	r3, r7, #8
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff feb7 	bl	8009e78 <tmc5160_write>

	//0xC40C001E default for 0x70 reg
	WData[0] = 0xF0; WData[1] = 0xC4; WData[2] = 0x0D; WData[3] = 0x00; WData[4] = 0x1E; // PWM_CONF PWM_FREQ 35kHz TODO
 800a10a:	23f0      	movs	r3, #240	@ 0xf0
 800a10c:	723b      	strb	r3, [r7, #8]
 800a10e:	23c4      	movs	r3, #196	@ 0xc4
 800a110:	727b      	strb	r3, [r7, #9]
 800a112:	230d      	movs	r3, #13
 800a114:	72bb      	strb	r3, [r7, #10]
 800a116:	2300      	movs	r3, #0
 800a118:	72fb      	strb	r3, [r7, #11]
 800a11a:	231e      	movs	r3, #30
 800a11c:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a11e:	f107 0308 	add.w	r3, r7, #8
 800a122:	4618      	mov	r0, r3
 800a124:	f7ff fea8 	bl	8009e78 <tmc5160_write>

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a128:	2380      	movs	r3, #128	@ 0x80
 800a12a:	723b      	strb	r3, [r7, #8]
 800a12c:	2300      	movs	r3, #0
 800a12e:	727b      	strb	r3, [r7, #9]
 800a130:	2300      	movs	r3, #0
 800a132:	72bb      	strb	r3, [r7, #10]
 800a134:	2300      	movs	r3, #0
 800a136:	72fb      	strb	r3, [r7, #11]
 800a138:	2304      	movs	r3, #4
 800a13a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a13c:	f107 0308 	add.w	r3, r7, #8
 800a140:	4618      	mov	r0, r3
 800a142:	f7ff fe99 	bl	8009e78 <tmc5160_write>

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 800a146:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800a14a:	f7ff fe45 	bl	8009dd8 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 800a14e:	2393      	movs	r3, #147	@ 0x93
 800a150:	723b      	strb	r3, [r7, #8]
 800a152:	2300      	movs	r3, #0
 800a154:	727b      	strb	r3, [r7, #9]
 800a156:	2300      	movs	r3, #0
 800a158:	72bb      	strb	r3, [r7, #10]
 800a15a:	2300      	movs	r3, #0
 800a15c:	72fb      	strb	r3, [r7, #11]
 800a15e:	23c8      	movs	r3, #200	@ 0xc8
 800a160:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a162:	f107 0308 	add.w	r3, r7, #8
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff fe86 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 800a16c:	23a0      	movs	r3, #160	@ 0xa0
 800a16e:	723b      	strb	r3, [r7, #8]
 800a170:	2300      	movs	r3, #0
 800a172:	727b      	strb	r3, [r7, #9]
 800a174:	2300      	movs	r3, #0
 800a176:	72bb      	strb	r3, [r7, #10]
 800a178:	2300      	movs	r3, #0
 800a17a:	72fb      	strb	r3, [r7, #11]
 800a17c:	2300      	movs	r3, #0
 800a17e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a180:	f107 0308 	add.w	r3, r7, #8
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff fe77 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 800a18a:	23a3      	movs	r3, #163	@ 0xa3
 800a18c:	723b      	strb	r3, [r7, #8]
 800a18e:	2300      	movs	r3, #0
 800a190:	727b      	strb	r3, [r7, #9]
 800a192:	2300      	movs	r3, #0
 800a194:	72bb      	strb	r3, [r7, #10]
 800a196:	2300      	movs	r3, #0
 800a198:	72fb      	strb	r3, [r7, #11]
 800a19a:	230a      	movs	r3, #10
 800a19c:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fe68 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // A1 = 10 000 First acceleration
 800a1a8:	23a4      	movs	r3, #164	@ 0xa4
 800a1aa:	723b      	strb	r3, [r7, #8]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	727b      	strb	r3, [r7, #9]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	72bb      	strb	r3, [r7, #10]
 800a1b4:	236e      	movs	r3, #110	@ 0x6e
 800a1b6:	72fb      	strb	r3, [r7, #11]
 800a1b8:	2320      	movs	r3, #32
 800a1ba:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a1bc:	f107 0308 	add.w	r3, r7, #8
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7ff fe59 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // AMAX = 5 000 Acceleration above V1
 800a1c6:	23a6      	movs	r3, #166	@ 0xa6
 800a1c8:	723b      	strb	r3, [r7, #8]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	727b      	strb	r3, [r7, #9]
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	72bb      	strb	r3, [r7, #10]
 800a1d2:	2323      	movs	r3, #35	@ 0x23
 800a1d4:	72fb      	strb	r3, [r7, #11]
 800a1d6:	2388      	movs	r3, #136	@ 0x88
 800a1d8:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a1da:	f107 0308 	add.w	r3, r7, #8
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7ff fe4a 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x23; WData[4] = 0x88; // DMAX = 5 000 Deceleration above V1
 800a1e4:	23a8      	movs	r3, #168	@ 0xa8
 800a1e6:	723b      	strb	r3, [r7, #8]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	727b      	strb	r3, [r7, #9]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	72bb      	strb	r3, [r7, #10]
 800a1f0:	2323      	movs	r3, #35	@ 0x23
 800a1f2:	72fb      	strb	r3, [r7, #11]
 800a1f4:	2388      	movs	r3, #136	@ 0x88
 800a1f6:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a1f8:	f107 0308 	add.w	r3, r7, #8
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff fe3b 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x6e; WData[4] = 0x20; // D1 = 10 000 Deceleration below V1
 800a202:	23aa      	movs	r3, #170	@ 0xaa
 800a204:	723b      	strb	r3, [r7, #8]
 800a206:	2300      	movs	r3, #0
 800a208:	727b      	strb	r3, [r7, #9]
 800a20a:	2300      	movs	r3, #0
 800a20c:	72bb      	strb	r3, [r7, #10]
 800a20e:	236e      	movs	r3, #110	@ 0x6e
 800a210:	72fb      	strb	r3, [r7, #11]
 800a212:	2320      	movs	r3, #32
 800a214:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a216:	f107 0308 	add.w	r3, r7, #8
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7ff fe2c 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // VSTOP = 10 Stop velocity (Near to zero)
 800a220:	23ab      	movs	r3, #171	@ 0xab
 800a222:	723b      	strb	r3, [r7, #8]
 800a224:	2300      	movs	r3, #0
 800a226:	727b      	strb	r3, [r7, #9]
 800a228:	2300      	movs	r3, #0
 800a22a:	72bb      	strb	r3, [r7, #10]
 800a22c:	2300      	movs	r3, #0
 800a22e:	72fb      	strb	r3, [r7, #11]
 800a230:	230a      	movs	r3, #10
 800a232:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800a234:	f107 0308 	add.w	r3, r7, #8
 800a238:	4618      	mov	r0, r3
 800a23a:	f7ff fe1d 	bl	8009e78 <tmc5160_write>

	tmc5160_set_motor_direction(mc->direction);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 f809 	bl	800a25c <tmc5160_set_motor_direction>

	HAL_Delay(100);
 800a24a:	2064      	movs	r0, #100	@ 0x64
 800a24c:	f000 fa82 	bl	800a754 <HAL_Delay>
}
 800a250:	bf00      	nop
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	48000800 	.word	0x48000800

0800a25c <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	71fb      	strb	r3, [r7, #7]
	if(dir <= 0)
 800a266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	dc13      	bgt.n	800a296 <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 800a26e:	2300      	movs	r3, #0
 800a270:	613b      	str	r3, [r7, #16]
 800a272:	2300      	movs	r3, #0
 800a274:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a276:	2380      	movs	r3, #128	@ 0x80
 800a278:	743b      	strb	r3, [r7, #16]
 800a27a:	2300      	movs	r3, #0
 800a27c:	747b      	strb	r3, [r7, #17]
 800a27e:	2300      	movs	r3, #0
 800a280:	74bb      	strb	r3, [r7, #18]
 800a282:	2300      	movs	r3, #0
 800a284:	74fb      	strb	r3, [r7, #19]
 800a286:	2314      	movs	r3, #20
 800a288:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 800a28a:	f107 0310 	add.w	r3, r7, #16
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff fdf2 	bl	8009e78 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 800a294:	e012      	b.n	800a2bc <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 800a296:	2300      	movs	r3, #0
 800a298:	60bb      	str	r3, [r7, #8]
 800a29a:	2300      	movs	r3, #0
 800a29c:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800a29e:	2380      	movs	r3, #128	@ 0x80
 800a2a0:	723b      	strb	r3, [r7, #8]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	727b      	strb	r3, [r7, #9]
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	72bb      	strb	r3, [r7, #10]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	72fb      	strb	r3, [r7, #11]
 800a2ae:	2304      	movs	r3, #4
 800a2b0:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 800a2b2:	f107 0308 	add.w	r3, r7, #8
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff fdde 	bl	8009e78 <tmc5160_write>
}
 800a2bc:	bf00      	nop
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <tmc5160_set_zero>:

void tmc5160_set_zero()
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	603b      	str	r3, [r7, #0]
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	713b      	strb	r3, [r7, #4]
	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x03; // RAMPMODE = 3 (HOLD mode)
 800a2d2:	23a0      	movs	r3, #160	@ 0xa0
 800a2d4:	703b      	strb	r3, [r7, #0]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	707b      	strb	r3, [r7, #1]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	70bb      	strb	r3, [r7, #2]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	70fb      	strb	r3, [r7, #3]
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff fdc5 	bl	8009e78 <tmc5160_write>

	WData[0] = 0xA1; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Set zero
 800a2ee:	23a1      	movs	r3, #161	@ 0xa1
 800a2f0:	703b      	strb	r3, [r7, #0]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	707b      	strb	r3, [r7, #1]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	70bb      	strb	r3, [r7, #2]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	70fb      	strb	r3, [r7, #3]
 800a2fe:	2300      	movs	r3, #0
 800a300:	713b      	strb	r3, [r7, #4]
	tmc5160_write(WData);
 800a302:	463b      	mov	r3, r7
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff fdb7 	bl	8009e78 <tmc5160_write>
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <tmc5160_disarm>:

void tmc5160_disarm()
{
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //DRV SLEEP 0 for power on, 1 for power off
 800a318:	2201      	movs	r2, #1
 800a31a:	2120      	movs	r1, #32
 800a31c:	4802      	ldr	r0, [pc, #8]	@ (800a328 <tmc5160_disarm+0x14>)
 800a31e:	f001 fbdb 	bl	800bad8 <HAL_GPIO_WritePin>
}
 800a322:	bf00      	nop
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	48000800 	.word	0x48000800

0800a32c <tmc5160_arm>:

void tmc5160_arm()
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 800a330:	2200      	movs	r2, #0
 800a332:	2120      	movs	r1, #32
 800a334:	4802      	ldr	r0, [pc, #8]	@ (800a340 <tmc5160_arm+0x14>)
 800a336:	f001 fbcf 	bl	800bad8 <HAL_GPIO_WritePin>
}
 800a33a:	bf00      	nop
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	48000800 	.word	0x48000800

0800a344 <tmc5160_stop>:

void tmc5160_stop()
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800a34a:	2300      	movs	r3, #0
 800a34c:	607b      	str	r3, [r7, #4]
 800a34e:	2300      	movs	r3, #0
 800a350:	723b      	strb	r3, [r7, #8]
	uint32_t pos = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	60fb      	str	r3, [r7, #12]

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; // Start acceleration = 10 (Near start)
 800a356:	23a3      	movs	r3, #163	@ 0xa3
 800a358:	713b      	strb	r3, [r7, #4]
 800a35a:	2300      	movs	r3, #0
 800a35c:	717b      	strb	r3, [r7, #5]
 800a35e:	2300      	movs	r3, #0
 800a360:	71bb      	strb	r3, [r7, #6]
 800a362:	2300      	movs	r3, #0
 800a364:	71fb      	strb	r3, [r7, #7]
 800a366:	2300      	movs	r3, #0
 800a368:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 800a36a:	1d3b      	adds	r3, r7, #4
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff fd83 	bl	8009e78 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00;
 800a372:	23a7      	movs	r3, #167	@ 0xa7
 800a374:	713b      	strb	r3, [r7, #4]
 800a376:	2300      	movs	r3, #0
 800a378:	717b      	strb	r3, [r7, #5]
 800a37a:	2300      	movs	r3, #0
 800a37c:	71bb      	strb	r3, [r7, #6]
 800a37e:	2300      	movs	r3, #0
 800a380:	71fb      	strb	r3, [r7, #7]
 800a382:	2300      	movs	r3, #0
 800a384:	723b      	strb	r3, [r7, #8]
	tmc5160_write(WData);
 800a386:	1d3b      	adds	r3, r7, #4
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff fd75 	bl	8009e78 <tmc5160_write>

	pos = tmc5160_position_read();
 800a38e:	f7ff fdc9 	bl	8009f24 <tmc5160_position_read>
 800a392:	4603      	mov	r3, r0
 800a394:	60fb      	str	r3, [r7, #12]
	tmc5160_position(pos);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff fc0f 	bl	8009bbc <tmc5160_position>
}
 800a39e:	bf00      	nop
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a3ac:	4b22      	ldr	r3, [pc, #136]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3ae:	4a23      	ldr	r2, [pc, #140]	@ (800a43c <MX_USART2_UART_Init+0x94>)
 800a3b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a3b2:	4b21      	ldr	r3, [pc, #132]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a3b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a3ba:	4b1f      	ldr	r3, [pc, #124]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a3c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a3c6:	4b1c      	ldr	r3, [pc, #112]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3ce:	220c      	movs	r2, #12
 800a3d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3d2:	4b19      	ldr	r3, [pc, #100]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3d8:	4b17      	ldr	r3, [pc, #92]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a3de:	4b16      	ldr	r3, [pc, #88]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a3e4:	4b14      	ldr	r3, [pc, #80]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a3ea:	4b13      	ldr	r3, [pc, #76]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a3f0:	4811      	ldr	r0, [pc, #68]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a3f2:	f005 f973 	bl	800f6dc <HAL_UART_Init>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a3fc:	f7f7 ff1d 	bl	800223a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a400:	2100      	movs	r1, #0
 800a402:	480d      	ldr	r0, [pc, #52]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a404:	f006 fab1 	bl	801096a <HAL_UARTEx_SetTxFifoThreshold>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a40e:	f7f7 ff14 	bl	800223a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a412:	2100      	movs	r1, #0
 800a414:	4808      	ldr	r0, [pc, #32]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a416:	f006 fae6 	bl	80109e6 <HAL_UARTEx_SetRxFifoThreshold>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a420:	f7f7 ff0b 	bl	800223a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a424:	4804      	ldr	r0, [pc, #16]	@ (800a438 <MX_USART2_UART_Init+0x90>)
 800a426:	f006 fa67 	bl	80108f8 <HAL_UARTEx_DisableFifoMode>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a430:	f7f7 ff03 	bl	800223a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a434:	bf00      	nop
 800a436:	bd80      	pop	{r7, pc}
 800a438:	200008d4 	.word	0x200008d4
 800a43c:	40004400 	.word	0x40004400

0800a440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b09e      	sub	sp, #120	@ 0x78
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a448:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	609a      	str	r2, [r3, #8]
 800a454:	60da      	str	r2, [r3, #12]
 800a456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a458:	f107 0310 	add.w	r3, r7, #16
 800a45c:	2254      	movs	r2, #84	@ 0x54
 800a45e:	2100      	movs	r1, #0
 800a460:	4618      	mov	r0, r3
 800a462:	f00a fac6 	bl	80149f2 <memset>
  if(uartHandle->Instance==USART2)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a23      	ldr	r2, [pc, #140]	@ (800a4f8 <HAL_UART_MspInit+0xb8>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d13e      	bne.n	800a4ee <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a470:	2302      	movs	r3, #2
 800a472:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a474:	2300      	movs	r3, #0
 800a476:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a478:	f107 0310 	add.w	r3, r7, #16
 800a47c:	4618      	mov	r0, r3
 800a47e:	f003 fe35 	bl	800e0ec <HAL_RCCEx_PeriphCLKConfig>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a488:	f7f7 fed7 	bl	800223a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a48c:	4b1b      	ldr	r3, [pc, #108]	@ (800a4fc <HAL_UART_MspInit+0xbc>)
 800a48e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a490:	4a1a      	ldr	r2, [pc, #104]	@ (800a4fc <HAL_UART_MspInit+0xbc>)
 800a492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a496:	6593      	str	r3, [r2, #88]	@ 0x58
 800a498:	4b18      	ldr	r3, [pc, #96]	@ (800a4fc <HAL_UART_MspInit+0xbc>)
 800a49a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a49c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4a4:	4b15      	ldr	r3, [pc, #84]	@ (800a4fc <HAL_UART_MspInit+0xbc>)
 800a4a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4a8:	4a14      	ldr	r2, [pc, #80]	@ (800a4fc <HAL_UART_MspInit+0xbc>)
 800a4aa:	f043 0301 	orr.w	r3, r3, #1
 800a4ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a4b0:	4b12      	ldr	r3, [pc, #72]	@ (800a4fc <HAL_UART_MspInit+0xbc>)
 800a4b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4b4:	f003 0301 	and.w	r3, r3, #1
 800a4b8:	60bb      	str	r3, [r7, #8]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a4bc:	230c      	movs	r3, #12
 800a4be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a4cc:	2307      	movs	r3, #7
 800a4ce:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a4da:	f001 f97b 	bl	800b7d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	2026      	movs	r0, #38	@ 0x26
 800a4e4:	f000 fa33 	bl	800a94e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a4e8:	2026      	movs	r0, #38	@ 0x26
 800a4ea:	f000 fa4a 	bl	800a982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a4ee:	bf00      	nop
 800a4f0:	3778      	adds	r7, #120	@ 0x78
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	40004400 	.word	0x40004400
 800a4fc:	40021000 	.word	0x40021000

0800a500 <sign_extend_bits_to_32>:

#include "utility.h"


//TODO make sure that is works for less than 24 bit values
int32_t sign_extend_bits_to_32(int32_t x, uint8_t bits) {
 800a500:	b480      	push	{r7}
 800a502:	b087      	sub	sp, #28
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]

	uint32_t sign_mask = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	617b      	str	r3, [r7, #20]
	//getting value of sign bit
	sign_mask = 1u << (bits - 1);
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	3b01      	subs	r3, #1
 800a514:	2201      	movs	r2, #1
 800a516:	fa02 f303 	lsl.w	r3, r2, r3
 800a51a:	617b      	str	r3, [r7, #20]
	uint32_t sign_bit = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	613b      	str	r3, [r7, #16]
	sign_bit = x & sign_mask;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	4013      	ands	r3, r2
 800a526:	613b      	str	r3, [r7, #16]
	if(sign_bit) //if value < 0 therefore sign_bit == 1, fill first 8 bits with 1
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d010      	beq.n	800a550 <sign_extend_bits_to_32+0x50>
	{
		int32_t res = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
		int32_t mask = 0b11111111;
 800a532:	23ff      	movs	r3, #255	@ 0xff
 800a534:	60bb      	str	r3, [r7, #8]
		res |= x;
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	60fb      	str	r3, [r7, #12]
		res |= (mask << (bits));
 800a53e:	78fb      	ldrb	r3, [r7, #3]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	fa02 f303 	lsl.w	r3, r2, r3
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	4313      	orrs	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
		return res;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	e000      	b.n	800a552 <sign_extend_bits_to_32+0x52>
	}
    return x; //else return value itself
 800a550:	687b      	ldr	r3, [r7, #4]
}
 800a552:	4618      	mov	r0, r3
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
	...

0800a560 <steps_to_rads>:
	*value = (((*min_value < *value)? *value : *min_value) > *max_value)? *max_value: *value;
}


float steps_to_rads(int32_t steps, int32_t full_steps)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
	float rads = 0;
 800a56a:	f04f 0300 	mov.w	r3, #0
 800a56e:	60fb      	str	r3, [r7, #12]
	rads = ((float)steps /(float)full_steps) * (M_PI * 2);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	ee07 3a90 	vmov	s15, r3
 800a580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a584:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a588:	ee16 0a90 	vmov	r0, s13
 800a58c:	f7f6 f804 	bl	8000598 <__aeabi_f2d>
 800a590:	a30b      	add	r3, pc, #44	@ (adr r3, 800a5c0 <steps_to_rads+0x60>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f7f6 f857 	bl	8000648 <__aeabi_dmul>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4610      	mov	r0, r2
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	f7f6 fb49 	bl	8000c38 <__aeabi_d2f>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	60fb      	str	r3, [r7, #12]
	return rads;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	ee07 3a90 	vmov	s15, r3
}
 800a5b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	f3af 8000 	nop.w
 800a5c0:	54442d18 	.word	0x54442d18
 800a5c4:	401921fb 	.word	0x401921fb

0800a5c8 <rad_to_steps>:

int32_t rad_to_steps(float rads, int32_t full_steps)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	ed87 0a01 	vstr	s0, [r7, #4]
 800a5d2:	6038      	str	r0, [r7, #0]
	int32_t steps = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	60fb      	str	r3, [r7, #12]
	steps = (int32_t)((full_steps * rads)/(M_PI * 2));
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ea:	ee17 0a90 	vmov	r0, s15
 800a5ee:	f7f5 ffd3 	bl	8000598 <__aeabi_f2d>
 800a5f2:	a309      	add	r3, pc, #36	@ (adr r3, 800a618 <rad_to_steps+0x50>)
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f7f6 f950 	bl	800089c <__aeabi_ddiv>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	4610      	mov	r0, r2
 800a602:	4619      	mov	r1, r3
 800a604:	f7f6 fad0 	bl	8000ba8 <__aeabi_d2iz>
 800a608:	4603      	mov	r3, r0
 800a60a:	60fb      	str	r3, [r7, #12]
	return steps;
 800a60c:	68fb      	ldr	r3, [r7, #12]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	54442d18 	.word	0x54442d18
 800a61c:	401921fb 	.word	0x401921fb

0800a620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a620:	480d      	ldr	r0, [pc, #52]	@ (800a658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a622:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a624:	f7ff f9fc 	bl	8009a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a628:	480c      	ldr	r0, [pc, #48]	@ (800a65c <LoopForever+0x6>)
  ldr r1, =_edata
 800a62a:	490d      	ldr	r1, [pc, #52]	@ (800a660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a62c:	4a0d      	ldr	r2, [pc, #52]	@ (800a664 <LoopForever+0xe>)
  movs r3, #0
 800a62e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800a630:	e002      	b.n	800a638 <LoopCopyDataInit>

0800a632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a636:	3304      	adds	r3, #4

0800a638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a63a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a63c:	d3f9      	bcc.n	800a632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a63e:	4a0a      	ldr	r2, [pc, #40]	@ (800a668 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a640:	4c0a      	ldr	r4, [pc, #40]	@ (800a66c <LoopForever+0x16>)
  movs r3, #0
 800a642:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a644:	e001      	b.n	800a64a <LoopFillZerobss>

0800a646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a648:	3204      	adds	r2, #4

0800a64a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a64a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a64c:	d3fb      	bcc.n	800a646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a64e:	f00a fa8f 	bl	8014b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a652:	f7f7 fd1f 	bl	8002094 <main>

0800a656 <LoopForever>:

LoopForever:
    b LoopForever
 800a656:	e7fe      	b.n	800a656 <LoopForever>
  ldr   r0, =_estack
 800a658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a65c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a660:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 800a664:	080195b4 	.word	0x080195b4
  ldr r2, =_sbss
 800a668:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800a66c:	20000b00 	.word	0x20000b00

0800a670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a670:	e7fe      	b.n	800a670 <ADC1_2_IRQHandler>

0800a672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a67c:	2003      	movs	r0, #3
 800a67e:	f000 f95b 	bl	800a938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a682:	200f      	movs	r0, #15
 800a684:	f000 f80e 	bl	800a6a4 <HAL_InitTick>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	71fb      	strb	r3, [r7, #7]
 800a692:	e001      	b.n	800a698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a694:	f7ff f86e 	bl	8009774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a698:	79fb      	ldrb	r3, [r7, #7]

}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
	...

0800a6a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a6b0:	4b16      	ldr	r3, [pc, #88]	@ (800a70c <HAL_InitTick+0x68>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d022      	beq.n	800a6fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a6b8:	4b15      	ldr	r3, [pc, #84]	@ (800a710 <HAL_InitTick+0x6c>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	4b13      	ldr	r3, [pc, #76]	@ (800a70c <HAL_InitTick+0x68>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a6c4:	fbb1 f3f3 	udiv	r3, r1, r3
 800a6c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f966 	bl	800a99e <HAL_SYSTICK_Config>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10f      	bne.n	800a6f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b0f      	cmp	r3, #15
 800a6dc:	d809      	bhi.n	800a6f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a6de:	2200      	movs	r2, #0
 800a6e0:	6879      	ldr	r1, [r7, #4]
 800a6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e6:	f000 f932 	bl	800a94e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a6ea:	4a0a      	ldr	r2, [pc, #40]	@ (800a714 <HAL_InitTick+0x70>)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	e007      	b.n	800a702 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	73fb      	strb	r3, [r7, #15]
 800a6f6:	e004      	b.n	800a702 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	73fb      	strb	r3, [r7, #15]
 800a6fc:	e001      	b.n	800a702 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a702:	7bfb      	ldrb	r3, [r7, #15]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	20000080 	.word	0x20000080
 800a710:	20000078 	.word	0x20000078
 800a714:	2000007c 	.word	0x2000007c

0800a718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a718:	b480      	push	{r7}
 800a71a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a71c:	4b05      	ldr	r3, [pc, #20]	@ (800a734 <HAL_IncTick+0x1c>)
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	4b05      	ldr	r3, [pc, #20]	@ (800a738 <HAL_IncTick+0x20>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4413      	add	r3, r2
 800a726:	4a03      	ldr	r2, [pc, #12]	@ (800a734 <HAL_IncTick+0x1c>)
 800a728:	6013      	str	r3, [r2, #0]
}
 800a72a:	bf00      	nop
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	20000968 	.word	0x20000968
 800a738:	20000080 	.word	0x20000080

0800a73c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0
  return uwTick;
 800a740:	4b03      	ldr	r3, [pc, #12]	@ (800a750 <HAL_GetTick+0x14>)
 800a742:	681b      	ldr	r3, [r3, #0]
}
 800a744:	4618      	mov	r0, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	20000968 	.word	0x20000968

0800a754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a75c:	f7ff ffee 	bl	800a73c <HAL_GetTick>
 800a760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76c:	d004      	beq.n	800a778 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800a76e:	4b09      	ldr	r3, [pc, #36]	@ (800a794 <HAL_Delay+0x40>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	4413      	add	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a778:	bf00      	nop
 800a77a:	f7ff ffdf 	bl	800a73c <HAL_GetTick>
 800a77e:	4602      	mov	r2, r0
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	429a      	cmp	r2, r3
 800a788:	d8f7      	bhi.n	800a77a <HAL_Delay+0x26>
  {
  }
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	20000080 	.word	0x20000080

0800a798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a7dc <__NVIC_SetPriorityGrouping+0x44>)
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a7c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a7c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a7ca:	4a04      	ldr	r2, [pc, #16]	@ (800a7dc <__NVIC_SetPriorityGrouping+0x44>)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	60d3      	str	r3, [r2, #12]
}
 800a7d0:	bf00      	nop
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	e000ed00 	.word	0xe000ed00

0800a7e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a7e4:	4b04      	ldr	r3, [pc, #16]	@ (800a7f8 <__NVIC_GetPriorityGrouping+0x18>)
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	0a1b      	lsrs	r3, r3, #8
 800a7ea:	f003 0307 	and.w	r3, r3, #7
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	e000ed00 	.word	0xe000ed00

0800a7fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	db0b      	blt.n	800a826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	f003 021f 	and.w	r2, r3, #31
 800a814:	4907      	ldr	r1, [pc, #28]	@ (800a834 <__NVIC_EnableIRQ+0x38>)
 800a816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a81a:	095b      	lsrs	r3, r3, #5
 800a81c:	2001      	movs	r0, #1
 800a81e:	fa00 f202 	lsl.w	r2, r0, r2
 800a822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	e000e100 	.word	0xe000e100

0800a838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	6039      	str	r1, [r7, #0]
 800a842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	db0a      	blt.n	800a862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	490c      	ldr	r1, [pc, #48]	@ (800a884 <__NVIC_SetPriority+0x4c>)
 800a852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a856:	0112      	lsls	r2, r2, #4
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	440b      	add	r3, r1
 800a85c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a860:	e00a      	b.n	800a878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	b2da      	uxtb	r2, r3
 800a866:	4908      	ldr	r1, [pc, #32]	@ (800a888 <__NVIC_SetPriority+0x50>)
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	f003 030f 	and.w	r3, r3, #15
 800a86e:	3b04      	subs	r3, #4
 800a870:	0112      	lsls	r2, r2, #4
 800a872:	b2d2      	uxtb	r2, r2
 800a874:	440b      	add	r3, r1
 800a876:	761a      	strb	r2, [r3, #24]
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	e000e100 	.word	0xe000e100
 800a888:	e000ed00 	.word	0xe000ed00

0800a88c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b089      	sub	sp, #36	@ 0x24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f003 0307 	and.w	r3, r3, #7
 800a89e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	f1c3 0307 	rsb	r3, r3, #7
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	bf28      	it	cs
 800a8aa:	2304      	movcs	r3, #4
 800a8ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	2b06      	cmp	r3, #6
 800a8b4:	d902      	bls.n	800a8bc <NVIC_EncodePriority+0x30>
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	3b03      	subs	r3, #3
 800a8ba:	e000      	b.n	800a8be <NVIC_EncodePriority+0x32>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ca:	43da      	mvns	r2, r3
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	401a      	ands	r2, r3
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a8d4:	f04f 31ff 	mov.w	r1, #4294967295
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	fa01 f303 	lsl.w	r3, r1, r3
 800a8de:	43d9      	mvns	r1, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8e4:	4313      	orrs	r3, r2
         );
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3724      	adds	r7, #36	@ 0x24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a904:	d301      	bcc.n	800a90a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a906:	2301      	movs	r3, #1
 800a908:	e00f      	b.n	800a92a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a90a:	4a0a      	ldr	r2, [pc, #40]	@ (800a934 <SysTick_Config+0x40>)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3b01      	subs	r3, #1
 800a910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a912:	210f      	movs	r1, #15
 800a914:	f04f 30ff 	mov.w	r0, #4294967295
 800a918:	f7ff ff8e 	bl	800a838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a91c:	4b05      	ldr	r3, [pc, #20]	@ (800a934 <SysTick_Config+0x40>)
 800a91e:	2200      	movs	r2, #0
 800a920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a922:	4b04      	ldr	r3, [pc, #16]	@ (800a934 <SysTick_Config+0x40>)
 800a924:	2207      	movs	r2, #7
 800a926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	e000e010 	.word	0xe000e010

0800a938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff ff29 	bl	800a798 <__NVIC_SetPriorityGrouping>
}
 800a946:	bf00      	nop
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b086      	sub	sp, #24
 800a952:	af00      	add	r7, sp, #0
 800a954:	4603      	mov	r3, r0
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	607a      	str	r2, [r7, #4]
 800a95a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a95c:	f7ff ff40 	bl	800a7e0 <__NVIC_GetPriorityGrouping>
 800a960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	68b9      	ldr	r1, [r7, #8]
 800a966:	6978      	ldr	r0, [r7, #20]
 800a968:	f7ff ff90 	bl	800a88c <NVIC_EncodePriority>
 800a96c:	4602      	mov	r2, r0
 800a96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a972:	4611      	mov	r1, r2
 800a974:	4618      	mov	r0, r3
 800a976:	f7ff ff5f 	bl	800a838 <__NVIC_SetPriority>
}
 800a97a:	bf00      	nop
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	4603      	mov	r3, r0
 800a98a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a98c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff ff33 	bl	800a7fc <__NVIC_EnableIRQ>
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff ffa4 	bl	800a8f4 <SysTick_Config>
 800a9ac:	4603      	mov	r3, r0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e08d      	b.n	800aae6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	4b47      	ldr	r3, [pc, #284]	@ (800aaf0 <HAL_DMA_Init+0x138>)
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d80f      	bhi.n	800a9f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	4b45      	ldr	r3, [pc, #276]	@ (800aaf4 <HAL_DMA_Init+0x13c>)
 800a9de:	4413      	add	r3, r2
 800a9e0:	4a45      	ldr	r2, [pc, #276]	@ (800aaf8 <HAL_DMA_Init+0x140>)
 800a9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e6:	091b      	lsrs	r3, r3, #4
 800a9e8:	009a      	lsls	r2, r3, #2
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a42      	ldr	r2, [pc, #264]	@ (800aafc <HAL_DMA_Init+0x144>)
 800a9f2:	641a      	str	r2, [r3, #64]	@ 0x40
 800a9f4:	e00e      	b.n	800aa14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4b40      	ldr	r3, [pc, #256]	@ (800ab00 <HAL_DMA_Init+0x148>)
 800a9fe:	4413      	add	r3, r2
 800aa00:	4a3d      	ldr	r2, [pc, #244]	@ (800aaf8 <HAL_DMA_Init+0x140>)
 800aa02:	fba2 2303 	umull	r2, r3, r2, r3
 800aa06:	091b      	lsrs	r3, r3, #4
 800aa08:	009a      	lsls	r2, r3, #2
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a3c      	ldr	r2, [pc, #240]	@ (800ab04 <HAL_DMA_Init+0x14c>)
 800aa12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2202      	movs	r2, #2
 800aa18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800aa2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800aa38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f9cc 	bl	800ae04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa74:	d102      	bne.n	800aa7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685a      	ldr	r2, [r3, #4]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa84:	b2d2      	uxtb	r2, r2
 800aa86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800aa90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d010      	beq.n	800aabc <HAL_DMA_Init+0x104>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d80c      	bhi.n	800aabc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f9ec 	bl	800ae80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800aab8:	605a      	str	r2, [r3, #4]
 800aaba:	e008      	b.n	800aace <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	40020407 	.word	0x40020407
 800aaf4:	bffdfff8 	.word	0xbffdfff8
 800aaf8:	cccccccd 	.word	0xcccccccd
 800aafc:	40020000 	.word	0x40020000
 800ab00:	bffdfbf8 	.word	0xbffdfbf8
 800ab04:	40020400 	.word	0x40020400

0800ab08 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d005      	beq.n	800ab2c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2204      	movs	r2, #4
 800ab24:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	73fb      	strb	r3, [r7, #15]
 800ab2a:	e037      	b.n	800ab9c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 020e 	bic.w	r2, r2, #14
 800ab3a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab4a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f022 0201 	bic.w	r2, r2, #1
 800ab5a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab60:	f003 021f 	and.w	r2, r3, #31
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab68:	2101      	movs	r1, #1
 800ab6a:	fa01 f202 	lsl.w	r2, r1, r2
 800ab6e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ab78:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00c      	beq.n	800ab9c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab90:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ab9a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800abac:	7bfb      	ldrb	r3, [r7, #15]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d00d      	beq.n	800abee <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2204      	movs	r2, #4
 800abd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	73fb      	strb	r3, [r7, #15]
 800abec:	e047      	b.n	800ac7e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 020e 	bic.w	r2, r2, #14
 800abfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f022 0201 	bic.w	r2, r2, #1
 800ac0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac22:	f003 021f 	and.w	r2, r3, #31
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	fa01 f202 	lsl.w	r2, r1, r2
 800ac30:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ac3a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00c      	beq.n	800ac5e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ac5c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	4798      	blx	r3
    }
  }
  return status;
 800ac7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aca4:	f003 031f 	and.w	r3, r3, #31
 800aca8:	2204      	movs	r2, #4
 800acaa:	409a      	lsls	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4013      	ands	r3, r2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d026      	beq.n	800ad02 <HAL_DMA_IRQHandler+0x7a>
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f003 0304 	and.w	r3, r3, #4
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d021      	beq.n	800ad02 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0320 	and.w	r3, r3, #32
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d107      	bne.n	800acdc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0204 	bic.w	r2, r2, #4
 800acda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ace0:	f003 021f 	and.w	r2, r3, #31
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace8:	2104      	movs	r1, #4
 800acea:	fa01 f202 	lsl.w	r2, r1, r2
 800acee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d071      	beq.n	800addc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ad00:	e06c      	b.n	800addc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad06:	f003 031f 	and.w	r3, r3, #31
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	409a      	lsls	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	4013      	ands	r3, r2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d02e      	beq.n	800ad74 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d029      	beq.n	800ad74 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0320 	and.w	r3, r3, #32
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10b      	bne.n	800ad46 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f022 020a 	bic.w	r2, r2, #10
 800ad3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad4a:	f003 021f 	and.w	r2, r3, #31
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad52:	2102      	movs	r1, #2
 800ad54:	fa01 f202 	lsl.w	r2, r1, r2
 800ad58:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d038      	beq.n	800addc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800ad72:	e033      	b.n	800addc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad78:	f003 031f 	and.w	r3, r3, #31
 800ad7c:	2208      	movs	r2, #8
 800ad7e:	409a      	lsls	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4013      	ands	r3, r2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d02a      	beq.n	800adde <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f003 0308 	and.w	r3, r3, #8
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d025      	beq.n	800adde <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f022 020e 	bic.w	r2, r2, #14
 800ada0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ada6:	f003 021f 	and.w	r2, r3, #31
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adae:	2101      	movs	r1, #1
 800adb0:	fa01 f202 	lsl.w	r2, r1, r2
 800adb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add0:	2b00      	cmp	r3, #0
 800add2:	d004      	beq.n	800adde <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800addc:	bf00      	nop
 800adde:	bf00      	nop
}
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800adf4:	b2db      	uxtb	r3, r3
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	370c      	adds	r7, #12
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
	...

0800ae04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	461a      	mov	r2, r3
 800ae12:	4b16      	ldr	r3, [pc, #88]	@ (800ae6c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d802      	bhi.n	800ae1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ae18:	4b15      	ldr	r3, [pc, #84]	@ (800ae70 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ae1a:	617b      	str	r3, [r7, #20]
 800ae1c:	e001      	b.n	800ae22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800ae1e:	4b15      	ldr	r3, [pc, #84]	@ (800ae74 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ae20:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	3b08      	subs	r3, #8
 800ae2e:	4a12      	ldr	r2, [pc, #72]	@ (800ae78 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ae30:	fba2 2303 	umull	r2, r3, r2, r3
 800ae34:	091b      	lsrs	r3, r3, #4
 800ae36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae3c:	089b      	lsrs	r3, r3, #2
 800ae3e:	009a      	lsls	r2, r3, #2
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	4413      	add	r3, r2
 800ae44:	461a      	mov	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a0b      	ldr	r2, [pc, #44]	@ (800ae7c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ae4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f003 031f 	and.w	r3, r3, #31
 800ae56:	2201      	movs	r2, #1
 800ae58:	409a      	lsls	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ae5e:	bf00      	nop
 800ae60:	371c      	adds	r7, #28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	40020407 	.word	0x40020407
 800ae70:	40020800 	.word	0x40020800
 800ae74:	40020820 	.word	0x40020820
 800ae78:	cccccccd 	.word	0xcccccccd
 800ae7c:	40020880 	.word	0x40020880

0800ae80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4b0b      	ldr	r3, [pc, #44]	@ (800aec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	461a      	mov	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a08      	ldr	r2, [pc, #32]	@ (800aec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800aea2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	f003 031f 	and.w	r3, r3, #31
 800aeac:	2201      	movs	r2, #1
 800aeae:	409a      	lsls	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800aeb4:	bf00      	nop
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	1000823f 	.word	0x1000823f
 800aec4:	40020940 	.word	0x40020940

0800aec8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e147      	b.n	800b16a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d106      	bne.n	800aef4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7f6 fd98 	bl	8001a24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	699a      	ldr	r2, [r3, #24]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f022 0210 	bic.w	r2, r2, #16
 800af02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af04:	f7ff fc1a 	bl	800a73c <HAL_GetTick>
 800af08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800af0a:	e012      	b.n	800af32 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800af0c:	f7ff fc16 	bl	800a73c <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b0a      	cmp	r3, #10
 800af18:	d90b      	bls.n	800af32 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af1e:	f043 0201 	orr.w	r2, r3, #1
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2203      	movs	r2, #3
 800af2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e11b      	b.n	800b16a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	f003 0308 	and.w	r3, r3, #8
 800af3c:	2b08      	cmp	r3, #8
 800af3e:	d0e5      	beq.n	800af0c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 0201 	orr.w	r2, r2, #1
 800af4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af50:	f7ff fbf4 	bl	800a73c <HAL_GetTick>
 800af54:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800af56:	e012      	b.n	800af7e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800af58:	f7ff fbf0 	bl	800a73c <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	2b0a      	cmp	r3, #10
 800af64:	d90b      	bls.n	800af7e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af6a:	f043 0201 	orr.w	r2, r3, #1
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2203      	movs	r2, #3
 800af76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	e0f5      	b.n	800b16a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0e5      	beq.n	800af58 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	699a      	ldr	r2, [r3, #24]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f042 0202 	orr.w	r2, r2, #2
 800af9a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a74      	ldr	r2, [pc, #464]	@ (800b174 <HAL_FDCAN_Init+0x2ac>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d103      	bne.n	800afae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800afa6:	4a74      	ldr	r2, [pc, #464]	@ (800b178 <HAL_FDCAN_Init+0x2b0>)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	7c1b      	ldrb	r3, [r3, #16]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d108      	bne.n	800afc8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	699a      	ldr	r2, [r3, #24]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afc4:	619a      	str	r2, [r3, #24]
 800afc6:	e007      	b.n	800afd8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	699a      	ldr	r2, [r3, #24]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afd6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	7c5b      	ldrb	r3, [r3, #17]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d108      	bne.n	800aff2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	699a      	ldr	r2, [r3, #24]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800afee:	619a      	str	r2, [r3, #24]
 800aff0:	e007      	b.n	800b002 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	699a      	ldr	r2, [r3, #24]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b000:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	7c9b      	ldrb	r3, [r3, #18]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d108      	bne.n	800b01c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	699a      	ldr	r2, [r3, #24]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b018:	619a      	str	r2, [r3, #24]
 800b01a:	e007      	b.n	800b02c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	699a      	ldr	r2, [r3, #24]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b02a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689a      	ldr	r2, [r3, #8]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	699a      	ldr	r2, [r3, #24]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800b050:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f022 0210 	bic.w	r2, r2, #16
 800b060:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d108      	bne.n	800b07c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	699a      	ldr	r2, [r3, #24]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f042 0204 	orr.w	r2, r2, #4
 800b078:	619a      	str	r2, [r3, #24]
 800b07a:	e02c      	b.n	800b0d6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d028      	beq.n	800b0d6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d01c      	beq.n	800b0c6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	699a      	ldr	r2, [r3, #24]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b09a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	691a      	ldr	r2, [r3, #16]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f042 0210 	orr.w	r2, r2, #16
 800b0aa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	2b03      	cmp	r3, #3
 800b0b2:	d110      	bne.n	800b0d6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	699a      	ldr	r2, [r3, #24]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f042 0220 	orr.w	r2, r2, #32
 800b0c2:	619a      	str	r2, [r3, #24]
 800b0c4:	e007      	b.n	800b0d6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	699a      	ldr	r2, [r3, #24]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f042 0220 	orr.w	r2, r2, #32
 800b0d4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b0e6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a1b      	ldr	r3, [r3, #32]
 800b0ec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b0ee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	695b      	ldr	r3, [r3, #20]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b0fe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b100:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b10a:	d115      	bne.n	800b138 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b110:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b116:	3b01      	subs	r3, #1
 800b118:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b11a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b120:	3b01      	subs	r3, #1
 800b122:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b124:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12c:	3b01      	subs	r3, #1
 800b12e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b134:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b136:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fa58 	bl	800b604 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	40006400 	.word	0x40006400
 800b178:	40006500 	.word	0x40006500

0800b17c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b087      	sub	sp, #28
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b18c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d002      	beq.n	800b19a <HAL_FDCAN_ConfigFilter+0x1e>
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d13d      	bne.n	800b216 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d119      	bne.n	800b1d6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b1ae:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800b1b6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	e01d      	b.n	800b212 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	075a      	lsls	r2, r3, #29
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	079a      	lsls	r2, r3, #30
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	00db      	lsls	r3, r3, #3
 800b1fc:	4413      	add	r3, r2
 800b1fe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	3304      	adds	r3, #4
 800b20a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	e006      	b.n	800b224 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b21a:	f043 0202 	orr.w	r2, r3, #2
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
  }
}
 800b224:	4618      	mov	r0, r3
 800b226:	371c      	adds	r7, #28
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b244:	b2db      	uxtb	r3, r3
 800b246:	2b01      	cmp	r3, #1
 800b248:	d116      	bne.n	800b278 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b252:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	011a      	lsls	r2, r3, #4
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	431a      	orrs	r2, r3
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	431a      	orrs	r2, r3
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	431a      	orrs	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	e006      	b.n	800b286 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b27c:	f043 0204 	orr.w	r2, r3, #4
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b284:	2301      	movs	r3, #1
  }
}
 800b286:	4618      	mov	r0, r3
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800b292:	b480      	push	{r7}
 800b294:	b085      	sub	sp, #20
 800b296:	af00      	add	r7, sp, #0
 800b298:	60f8      	str	r0, [r7, #12]
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d108      	bne.n	800b2bc <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	0219      	lsls	r1, r3, #8
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e006      	b.n	800b2ca <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2c0:	f043 0204 	orr.w	r2, r3, #4
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
  }
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d109      	bne.n	800b2fe <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68da      	ldr	r2, [r3, #12]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b2f8:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	e006      	b.n	800b30c <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b302:	f043 0204 	orr.w	r2, r3, #4
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
  }
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b326:	b2db      	uxtb	r3, r3
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d110      	bne.n	800b34e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2202      	movs	r2, #2
 800b330:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	699a      	ldr	r2, [r3, #24]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f022 0201 	bic.w	r2, r2, #1
 800b342:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	e006      	b.n	800b35c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b352:	f043 0204 	orr.w	r2, r3, #4
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
  }
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d12c      	bne.n	800b3da <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d007      	beq.n	800b3a0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b394:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e023      	b.n	800b3e8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b3a8:	0c1b      	lsrs	r3, r3, #16
 800b3aa:	f003 0303 	and.w	r3, r3, #3
 800b3ae:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	68b9      	ldr	r1, [r7, #8]
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f000 f990 	bl	800b6dc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	fa01 f202 	lsl.w	r2, r1, r2
 800b3c8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	409a      	lsls	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e006      	b.n	800b3e8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3de:	f043 0208 	orr.w	r2, r3, #8
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
  }
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b08b      	sub	sp, #44	@ 0x2c
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b404:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800b406:	7efb      	ldrb	r3, [r7, #27]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	f040 80bc 	bne.w	800b586 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b40      	cmp	r3, #64	@ 0x40
 800b412:	d121      	bne.n	800b458 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b41c:	f003 030f 	and.w	r3, r3, #15
 800b420:	2b00      	cmp	r3, #0
 800b422:	d107      	bne.n	800b434 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b428:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	e0af      	b.n	800b594 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b43c:	0a1b      	lsrs	r3, r3, #8
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800b448:	69fa      	ldr	r2, [r7, #28]
 800b44a:	4613      	mov	r3, r2
 800b44c:	00db      	lsls	r3, r3, #3
 800b44e:	4413      	add	r3, r2
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	440b      	add	r3, r1
 800b454:	627b      	str	r3, [r7, #36]	@ 0x24
 800b456:	e020      	b.n	800b49a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b460:	f003 030f 	and.w	r3, r3, #15
 800b464:	2b00      	cmp	r3, #0
 800b466:	d107      	bne.n	800b478 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b46c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	e08d      	b.n	800b594 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b480:	0a1b      	lsrs	r3, r3, #8
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b48c:	69fa      	ldr	r2, [r7, #28]
 800b48e:	4613      	mov	r3, r2
 800b490:	00db      	lsls	r3, r3, #3
 800b492:	4413      	add	r3, r2
 800b494:	00db      	lsls	r3, r3, #3
 800b496:	440b      	add	r3, r1
 800b498:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d107      	bne.n	800b4be <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	0c9b      	lsrs	r3, r3, #18
 800b4b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	e005      	b.n	800b4ca <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800b4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800b50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800b516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	0e1b      	lsrs	r3, r3, #24
 800b51c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800b524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	0fda      	lsrs	r2, r3, #31
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800b52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b530:	3304      	adds	r3, #4
 800b532:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800b534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b536:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800b538:	2300      	movs	r3, #0
 800b53a:	623b      	str	r3, [r7, #32]
 800b53c:	e00a      	b.n	800b554 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	441a      	add	r2, r3
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	440b      	add	r3, r1
 800b54a:	7812      	ldrb	r2, [r2, #0]
 800b54c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	3301      	adds	r3, #1
 800b552:	623b      	str	r3, [r7, #32]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	0c1b      	lsrs	r3, r3, #16
 800b55a:	4a11      	ldr	r2, [pc, #68]	@ (800b5a0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800b55c:	5cd3      	ldrb	r3, [r2, r3]
 800b55e:	461a      	mov	r2, r3
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	4293      	cmp	r3, r2
 800b564:	d3eb      	bcc.n	800b53e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b40      	cmp	r3, #64	@ 0x40
 800b56a:	d105      	bne.n	800b578 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	69fa      	ldr	r2, [r7, #28]
 800b572:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800b576:	e004      	b.n	800b582 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	69fa      	ldr	r2, [r7, #28]
 800b57e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	e006      	b.n	800b594 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b58a:	f043 0208 	orr.w	r2, r3, #8
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
  }
}
 800b594:	4618      	mov	r0, r3
 800b596:	372c      	adds	r7, #44	@ 0x2c
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	08018b18 	.word	0x08018b18

0800b5a4 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b40      	cmp	r3, #64	@ 0x40
 800b5b2:	d107      	bne.n	800b5c4 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5bc:	f003 030f 	and.w	r3, r3, #15
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	e006      	b.n	800b5d2 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5cc:	f003 030f 	and.w	r3, r3, #15
 800b5d0:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800b60c:	4b30      	ldr	r3, [pc, #192]	@ (800b6d0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800b60e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a2f      	ldr	r2, [pc, #188]	@ (800b6d4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d103      	bne.n	800b622 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b620:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a2c      	ldr	r2, [pc, #176]	@ (800b6d8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d103      	bne.n	800b634 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800b632:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b642:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b64a:	041a      	lsls	r2, r3, #16
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	430a      	orrs	r2, r1
 800b652:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b668:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b670:	061a      	lsls	r2, r3, #24
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	430a      	orrs	r2, r1
 800b678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	e005      	b.n	800b6b6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d3f3      	bcc.n	800b6aa <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800b6c2:	bf00      	nop
 800b6c4:	bf00      	nop
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	4000a400 	.word	0x4000a400
 800b6d4:	40006800 	.word	0x40006800
 800b6d8:	40006c00 	.word	0x40006c00

0800b6dc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b089      	sub	sp, #36	@ 0x24
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10a      	bne.n	800b708 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b6fa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b702:	4313      	orrs	r3, r2
 800b704:	61fb      	str	r3, [r7, #28]
 800b706:	e00a      	b.n	800b71e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b710:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b716:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b718:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b71c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b728:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b72e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b734:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b73a:	4313      	orrs	r3, r2
 800b73c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	4613      	mov	r3, r2
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	4413      	add	r3, r2
 800b74a:	00db      	lsls	r3, r3, #3
 800b74c:	440b      	add	r3, r1
 800b74e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	69fa      	ldr	r2, [r7, #28]
 800b754:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	3304      	adds	r3, #4
 800b75a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	3304      	adds	r3, #4
 800b766:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b768:	2300      	movs	r3, #0
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	e020      	b.n	800b7b0 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	3303      	adds	r3, #3
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	4413      	add	r3, r2
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	3302      	adds	r3, #2
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	440b      	add	r3, r1
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b786:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	3301      	adds	r3, #1
 800b78c:	6879      	ldr	r1, [r7, #4]
 800b78e:	440b      	add	r3, r1
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b794:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b796:	6879      	ldr	r1, [r7, #4]
 800b798:	697a      	ldr	r2, [r7, #20]
 800b79a:	440a      	add	r2, r1
 800b79c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b79e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	617b      	str	r3, [r7, #20]
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	0c1b      	lsrs	r3, r3, #16
 800b7b6:	4a06      	ldr	r2, [pc, #24]	@ (800b7d0 <FDCAN_CopyMessageToRAM+0xf4>)
 800b7b8:	5cd3      	ldrb	r3, [r2, r3]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d3d5      	bcc.n	800b76e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800b7c2:	bf00      	nop
 800b7c4:	bf00      	nop
 800b7c6:	3724      	adds	r7, #36	@ 0x24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	08018b18 	.word	0x08018b18

0800b7d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b7e2:	e15a      	b.n	800ba9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	2101      	movs	r1, #1
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f000 814c 	beq.w	800ba94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	f003 0303 	and.w	r3, r3, #3
 800b804:	2b01      	cmp	r3, #1
 800b806:	d005      	beq.n	800b814 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b810:	2b02      	cmp	r3, #2
 800b812:	d130      	bne.n	800b876 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	005b      	lsls	r3, r3, #1
 800b81e:	2203      	movs	r2, #3
 800b820:	fa02 f303 	lsl.w	r3, r2, r3
 800b824:	43db      	mvns	r3, r3
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	4013      	ands	r3, r2
 800b82a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	68da      	ldr	r2, [r3, #12]
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	005b      	lsls	r3, r3, #1
 800b834:	fa02 f303 	lsl.w	r3, r2, r3
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b84a:	2201      	movs	r2, #1
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	fa02 f303 	lsl.w	r3, r2, r3
 800b852:	43db      	mvns	r3, r3
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	4013      	ands	r3, r2
 800b858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	091b      	lsrs	r3, r3, #4
 800b860:	f003 0201 	and.w	r2, r3, #1
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	fa02 f303 	lsl.w	r3, r2, r3
 800b86a:	693a      	ldr	r2, [r7, #16]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f003 0303 	and.w	r3, r3, #3
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d017      	beq.n	800b8b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	2203      	movs	r2, #3
 800b88e:	fa02 f303 	lsl.w	r3, r2, r3
 800b892:	43db      	mvns	r3, r3
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	4013      	ands	r3, r2
 800b898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	689a      	ldr	r2, [r3, #8]
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	693a      	ldr	r2, [r7, #16]
 800b8b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f003 0303 	and.w	r3, r3, #3
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d123      	bne.n	800b906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	08da      	lsrs	r2, r3, #3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	3208      	adds	r2, #8
 800b8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	220f      	movs	r2, #15
 800b8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8da:	43db      	mvns	r3, r3
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	4013      	ands	r3, r2
 800b8e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	691a      	ldr	r2, [r3, #16]
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f003 0307 	and.w	r3, r3, #7
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	08da      	lsrs	r2, r3, #3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	3208      	adds	r2, #8
 800b900:	6939      	ldr	r1, [r7, #16]
 800b902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	005b      	lsls	r3, r3, #1
 800b910:	2203      	movs	r2, #3
 800b912:	fa02 f303 	lsl.w	r3, r2, r3
 800b916:	43db      	mvns	r3, r3
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	4013      	ands	r3, r2
 800b91c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	f003 0203 	and.w	r2, r3, #3
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	fa02 f303 	lsl.w	r3, r2, r3
 800b92e:	693a      	ldr	r2, [r7, #16]
 800b930:	4313      	orrs	r3, r2
 800b932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 80a6 	beq.w	800ba94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b948:	4b5b      	ldr	r3, [pc, #364]	@ (800bab8 <HAL_GPIO_Init+0x2e4>)
 800b94a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b94c:	4a5a      	ldr	r2, [pc, #360]	@ (800bab8 <HAL_GPIO_Init+0x2e4>)
 800b94e:	f043 0301 	orr.w	r3, r3, #1
 800b952:	6613      	str	r3, [r2, #96]	@ 0x60
 800b954:	4b58      	ldr	r3, [pc, #352]	@ (800bab8 <HAL_GPIO_Init+0x2e4>)
 800b956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b958:	f003 0301 	and.w	r3, r3, #1
 800b95c:	60bb      	str	r3, [r7, #8]
 800b95e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b960:	4a56      	ldr	r2, [pc, #344]	@ (800babc <HAL_GPIO_Init+0x2e8>)
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	089b      	lsrs	r3, r3, #2
 800b966:	3302      	adds	r3, #2
 800b968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b96c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f003 0303 	and.w	r3, r3, #3
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	220f      	movs	r2, #15
 800b978:	fa02 f303 	lsl.w	r3, r2, r3
 800b97c:	43db      	mvns	r3, r3
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	4013      	ands	r3, r2
 800b982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b98a:	d01f      	beq.n	800b9cc <HAL_GPIO_Init+0x1f8>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a4c      	ldr	r2, [pc, #304]	@ (800bac0 <HAL_GPIO_Init+0x2ec>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d019      	beq.n	800b9c8 <HAL_GPIO_Init+0x1f4>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a4b      	ldr	r2, [pc, #300]	@ (800bac4 <HAL_GPIO_Init+0x2f0>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d013      	beq.n	800b9c4 <HAL_GPIO_Init+0x1f0>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a4a      	ldr	r2, [pc, #296]	@ (800bac8 <HAL_GPIO_Init+0x2f4>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d00d      	beq.n	800b9c0 <HAL_GPIO_Init+0x1ec>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a49      	ldr	r2, [pc, #292]	@ (800bacc <HAL_GPIO_Init+0x2f8>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d007      	beq.n	800b9bc <HAL_GPIO_Init+0x1e8>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a48      	ldr	r2, [pc, #288]	@ (800bad0 <HAL_GPIO_Init+0x2fc>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d101      	bne.n	800b9b8 <HAL_GPIO_Init+0x1e4>
 800b9b4:	2305      	movs	r3, #5
 800b9b6:	e00a      	b.n	800b9ce <HAL_GPIO_Init+0x1fa>
 800b9b8:	2306      	movs	r3, #6
 800b9ba:	e008      	b.n	800b9ce <HAL_GPIO_Init+0x1fa>
 800b9bc:	2304      	movs	r3, #4
 800b9be:	e006      	b.n	800b9ce <HAL_GPIO_Init+0x1fa>
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	e004      	b.n	800b9ce <HAL_GPIO_Init+0x1fa>
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	e002      	b.n	800b9ce <HAL_GPIO_Init+0x1fa>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e000      	b.n	800b9ce <HAL_GPIO_Init+0x1fa>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	f002 0203 	and.w	r2, r2, #3
 800b9d4:	0092      	lsls	r2, r2, #2
 800b9d6:	4093      	lsls	r3, r2
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b9de:	4937      	ldr	r1, [pc, #220]	@ (800babc <HAL_GPIO_Init+0x2e8>)
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	089b      	lsrs	r3, r3, #2
 800b9e4:	3302      	adds	r3, #2
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b9ec:	4b39      	ldr	r3, [pc, #228]	@ (800bad4 <HAL_GPIO_Init+0x300>)
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	43db      	mvns	r3, r3
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ba10:	4a30      	ldr	r2, [pc, #192]	@ (800bad4 <HAL_GPIO_Init+0x300>)
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ba16:	4b2f      	ldr	r3, [pc, #188]	@ (800bad4 <HAL_GPIO_Init+0x300>)
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	43db      	mvns	r3, r3
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	4013      	ands	r3, r2
 800ba24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800ba32:	693a      	ldr	r2, [r7, #16]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ba3a:	4a26      	ldr	r2, [pc, #152]	@ (800bad4 <HAL_GPIO_Init+0x300>)
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800ba40:	4b24      	ldr	r3, [pc, #144]	@ (800bad4 <HAL_GPIO_Init+0x300>)
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	43db      	mvns	r3, r3
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d003      	beq.n	800ba64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ba64:	4a1b      	ldr	r2, [pc, #108]	@ (800bad4 <HAL_GPIO_Init+0x300>)
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ba6a:	4b1a      	ldr	r3, [pc, #104]	@ (800bad4 <HAL_GPIO_Init+0x300>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	43db      	mvns	r3, r3
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	4013      	ands	r3, r2
 800ba78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ba8e:	4a11      	ldr	r2, [pc, #68]	@ (800bad4 <HAL_GPIO_Init+0x300>)
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	3301      	adds	r3, #1
 800ba98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	fa22 f303 	lsr.w	r3, r2, r3
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f47f ae9d 	bne.w	800b7e4 <HAL_GPIO_Init+0x10>
  }
}
 800baaa:	bf00      	nop
 800baac:	bf00      	nop
 800baae:	371c      	adds	r7, #28
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr
 800bab8:	40021000 	.word	0x40021000
 800babc:	40010000 	.word	0x40010000
 800bac0:	48000400 	.word	0x48000400
 800bac4:	48000800 	.word	0x48000800
 800bac8:	48000c00 	.word	0x48000c00
 800bacc:	48001000 	.word	0x48001000
 800bad0:	48001400 	.word	0x48001400
 800bad4:	40010400 	.word	0x40010400

0800bad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	460b      	mov	r3, r1
 800bae2:	807b      	strh	r3, [r7, #2]
 800bae4:	4613      	mov	r3, r2
 800bae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bae8:	787b      	ldrb	r3, [r7, #1]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800baee:	887a      	ldrh	r2, [r7, #2]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800baf4:	e002      	b.n	800bafc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800baf6:	887a      	ldrh	r2, [r7, #2]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	460b      	mov	r3, r1
 800bb12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bb1a:	887a      	ldrh	r2, [r7, #2]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4013      	ands	r3, r2
 800bb20:	041a      	lsls	r2, r3, #16
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	43d9      	mvns	r1, r3
 800bb26:	887b      	ldrh	r3, [r7, #2]
 800bb28:	400b      	ands	r3, r1
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	619a      	str	r2, [r3, #24]
}
 800bb30:	bf00      	nop
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e08d      	b.n	800bc6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d106      	bne.n	800bb68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f7f6 f8a0 	bl	8001ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2224      	movs	r2, #36	@ 0x24
 800bb6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f022 0201 	bic.w	r2, r2, #1
 800bb7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685a      	ldr	r2, [r3, #4]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800bb8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689a      	ldr	r2, [r3, #8]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bb9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d107      	bne.n	800bbb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	689a      	ldr	r2, [r3, #8]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bbb2:	609a      	str	r2, [r3, #8]
 800bbb4:	e006      	b.n	800bbc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	689a      	ldr	r2, [r3, #8]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800bbc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d108      	bne.n	800bbde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbda:	605a      	str	r2, [r3, #4]
 800bbdc:	e007      	b.n	800bbee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	685a      	ldr	r2, [r3, #4]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bbec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	6812      	ldr	r2, [r2, #0]
 800bbf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bbfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68da      	ldr	r2, [r3, #12]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bc10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691a      	ldr	r2, [r3, #16]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	695b      	ldr	r3, [r3, #20]
 800bc1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	699b      	ldr	r3, [r3, #24]
 800bc22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	430a      	orrs	r2, r1
 800bc2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	69d9      	ldr	r1, [r3, #28]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a1a      	ldr	r2, [r3, #32]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	430a      	orrs	r2, r1
 800bc3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f042 0201 	orr.w	r2, r2, #1
 800bc4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2220      	movs	r2, #32
 800bc56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
	...

0800bc74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af02      	add	r7, sp, #8
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	4611      	mov	r1, r2
 800bc80:	461a      	mov	r2, r3
 800bc82:	4603      	mov	r3, r0
 800bc84:	817b      	strh	r3, [r7, #10]
 800bc86:	460b      	mov	r3, r1
 800bc88:	813b      	strh	r3, [r7, #8]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	f040 80f9 	bne.w	800be8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d002      	beq.n	800bca8 <HAL_I2C_Mem_Write+0x34>
 800bca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d105      	bne.n	800bcb4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e0ed      	b.n	800be90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d101      	bne.n	800bcc2 <HAL_I2C_Mem_Write+0x4e>
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	e0e6      	b.n	800be90 <HAL_I2C_Mem_Write+0x21c>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bcca:	f7fe fd37 	bl	800a73c <HAL_GetTick>
 800bcce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	2319      	movs	r3, #25
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f001 f938 	bl	800cf52 <I2C_WaitOnFlagUntilTimeout>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d001      	beq.n	800bcec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e0d1      	b.n	800be90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2221      	movs	r2, #33	@ 0x21
 800bcf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2240      	movs	r2, #64	@ 0x40
 800bcf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6a3a      	ldr	r2, [r7, #32]
 800bd06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bd0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bd14:	88f8      	ldrh	r0, [r7, #6]
 800bd16:	893a      	ldrh	r2, [r7, #8]
 800bd18:	8979      	ldrh	r1, [r7, #10]
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	9301      	str	r3, [sp, #4]
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	4603      	mov	r3, r0
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 fc7b 	bl	800c620 <I2C_RequestMemoryWrite>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e0a9      	b.n	800be90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	2bff      	cmp	r3, #255	@ 0xff
 800bd44:	d90e      	bls.n	800bd64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	22ff      	movs	r2, #255	@ 0xff
 800bd4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	8979      	ldrh	r1, [r7, #10]
 800bd54:	2300      	movs	r3, #0
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f001 fabb 	bl	800d2d8 <I2C_TransferConfig>
 800bd62:	e00f      	b.n	800bd84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	8979      	ldrh	r1, [r7, #10]
 800bd76:	2300      	movs	r3, #0
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f001 faaa 	bl	800d2d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f001 f93b 	bl	800d004 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e07b      	b.n	800be90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd9c:	781a      	ldrb	r2, [r3, #0]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda8:	1c5a      	adds	r2, r3, #1
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d034      	beq.n	800be3c <HAL_I2C_Mem_Write+0x1c8>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d130      	bne.n	800be3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde0:	2200      	movs	r2, #0
 800bde2:	2180      	movs	r1, #128	@ 0x80
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f001 f8b4 	bl	800cf52 <I2C_WaitOnFlagUntilTimeout>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d001      	beq.n	800bdf4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e04d      	b.n	800be90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	2bff      	cmp	r3, #255	@ 0xff
 800bdfc:	d90e      	bls.n	800be1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	22ff      	movs	r2, #255	@ 0xff
 800be02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	8979      	ldrh	r1, [r7, #10]
 800be0c:	2300      	movs	r3, #0
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f001 fa5f 	bl	800d2d8 <I2C_TransferConfig>
 800be1a:	e00f      	b.n	800be3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be20:	b29a      	uxth	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	8979      	ldrh	r1, [r7, #10]
 800be2e:	2300      	movs	r3, #0
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f001 fa4e 	bl	800d2d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be40:	b29b      	uxth	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	d19e      	bne.n	800bd84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f001 f921 	bl	800d092 <I2C_WaitOnSTOPFlagUntilTimeout>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e01a      	b.n	800be90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2220      	movs	r2, #32
 800be60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6859      	ldr	r1, [r3, #4]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	4b0a      	ldr	r3, [pc, #40]	@ (800be98 <HAL_I2C_Mem_Write+0x224>)
 800be6e:	400b      	ands	r3, r1
 800be70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2220      	movs	r2, #32
 800be76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	e000      	b.n	800be90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800be8e:	2302      	movs	r3, #2
  }
}
 800be90:	4618      	mov	r0, r3
 800be92:	3718      	adds	r7, #24
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	fe00e800 	.word	0xfe00e800

0800be9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b088      	sub	sp, #32
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	4608      	mov	r0, r1
 800bea6:	4611      	mov	r1, r2
 800bea8:	461a      	mov	r2, r3
 800beaa:	4603      	mov	r3, r0
 800beac:	817b      	strh	r3, [r7, #10]
 800beae:	460b      	mov	r3, r1
 800beb0:	813b      	strh	r3, [r7, #8]
 800beb2:	4613      	mov	r3, r2
 800beb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b20      	cmp	r3, #32
 800bec0:	f040 80fd 	bne.w	800c0be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bec4:	6a3b      	ldr	r3, [r7, #32]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <HAL_I2C_Mem_Read+0x34>
 800beca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800becc:	2b00      	cmp	r3, #0
 800bece:	d105      	bne.n	800bedc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bed6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800bed8:	2301      	movs	r3, #1
 800beda:	e0f1      	b.n	800c0c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d101      	bne.n	800beea <HAL_I2C_Mem_Read+0x4e>
 800bee6:	2302      	movs	r3, #2
 800bee8:	e0ea      	b.n	800c0c0 <HAL_I2C_Mem_Read+0x224>
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2201      	movs	r2, #1
 800beee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bef2:	f7fe fc23 	bl	800a73c <HAL_GetTick>
 800bef6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	2319      	movs	r3, #25
 800befe:	2201      	movs	r2, #1
 800bf00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f001 f824 	bl	800cf52 <I2C_WaitOnFlagUntilTimeout>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d001      	beq.n	800bf14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e0d5      	b.n	800c0c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2222      	movs	r2, #34	@ 0x22
 800bf18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2240      	movs	r2, #64	@ 0x40
 800bf20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6a3a      	ldr	r2, [r7, #32]
 800bf2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bf34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bf3c:	88f8      	ldrh	r0, [r7, #6]
 800bf3e:	893a      	ldrh	r2, [r7, #8]
 800bf40:	8979      	ldrh	r1, [r7, #10]
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 fbbb 	bl	800c6c8 <I2C_RequestMemoryRead>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d005      	beq.n	800bf64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	e0ad      	b.n	800c0c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	2bff      	cmp	r3, #255	@ 0xff
 800bf6c:	d90e      	bls.n	800bf8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	22ff      	movs	r2, #255	@ 0xff
 800bf72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	8979      	ldrh	r1, [r7, #10]
 800bf7c:	4b52      	ldr	r3, [pc, #328]	@ (800c0c8 <HAL_I2C_Mem_Read+0x22c>)
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f001 f9a7 	bl	800d2d8 <I2C_TransferConfig>
 800bf8a:	e00f      	b.n	800bfac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	8979      	ldrh	r1, [r7, #10]
 800bf9e:	4b4a      	ldr	r3, [pc, #296]	@ (800c0c8 <HAL_I2C_Mem_Read+0x22c>)
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f001 f996 	bl	800d2d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	2104      	movs	r1, #4
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 ffcb 	bl	800cf52 <I2C_WaitOnFlagUntilTimeout>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e07c      	b.n	800c0c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd0:	b2d2      	uxtb	r2, r2
 800bfd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	3b01      	subs	r3, #1
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d034      	beq.n	800c06c <HAL_I2C_Mem_Read+0x1d0>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c006:	2b00      	cmp	r3, #0
 800c008:	d130      	bne.n	800c06c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c010:	2200      	movs	r2, #0
 800c012:	2180      	movs	r1, #128	@ 0x80
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f000 ff9c 	bl	800cf52 <I2C_WaitOnFlagUntilTimeout>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e04d      	b.n	800c0c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c028:	b29b      	uxth	r3, r3
 800c02a:	2bff      	cmp	r3, #255	@ 0xff
 800c02c:	d90e      	bls.n	800c04c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	22ff      	movs	r2, #255	@ 0xff
 800c032:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	8979      	ldrh	r1, [r7, #10]
 800c03c:	2300      	movs	r3, #0
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f001 f947 	bl	800d2d8 <I2C_TransferConfig>
 800c04a:	e00f      	b.n	800c06c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c050:	b29a      	uxth	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	8979      	ldrh	r1, [r7, #10]
 800c05e:	2300      	movs	r3, #0
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f001 f936 	bl	800d2d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c070:	b29b      	uxth	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d19a      	bne.n	800bfac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f001 f809 	bl	800d092 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e01a      	b.n	800c0c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2220      	movs	r2, #32
 800c090:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6859      	ldr	r1, [r3, #4]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	4b0b      	ldr	r3, [pc, #44]	@ (800c0cc <HAL_I2C_Mem_Read+0x230>)
 800c09e:	400b      	ands	r3, r1
 800c0a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e000      	b.n	800c0c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c0be:	2302      	movs	r3, #2
  }
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	80002400 	.word	0x80002400
 800c0cc:	fe00e800 	.word	0xfe00e800

0800c0d0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b08a      	sub	sp, #40	@ 0x28
 800c0d4:	af02      	add	r7, sp, #8
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	607a      	str	r2, [r7, #4]
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b20      	cmp	r3, #32
 800c0ee:	f040 80d6 	bne.w	800c29e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c0fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c100:	d101      	bne.n	800c106 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800c102:	2302      	movs	r3, #2
 800c104:	e0cc      	b.n	800c2a0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d101      	bne.n	800c114 <HAL_I2C_IsDeviceReady+0x44>
 800c110:	2302      	movs	r3, #2
 800c112:	e0c5      	b.n	800c2a0 <HAL_I2C_IsDeviceReady+0x1d0>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2224      	movs	r2, #36	@ 0x24
 800c120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2200      	movs	r2, #0
 800c128:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d107      	bne.n	800c142 <HAL_I2C_IsDeviceReady+0x72>
 800c132:	897b      	ldrh	r3, [r7, #10]
 800c134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c138:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c13c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c140:	e006      	b.n	800c150 <HAL_I2C_IsDeviceReady+0x80>
 800c142:	897b      	ldrh	r3, [r7, #10]
 800c144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c148:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c14c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	6812      	ldr	r2, [r2, #0]
 800c154:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800c156:	f7fe faf1 	bl	800a73c <HAL_GetTick>
 800c15a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	f003 0320 	and.w	r3, r3, #32
 800c166:	2b20      	cmp	r3, #32
 800c168:	bf0c      	ite	eq
 800c16a:	2301      	moveq	r3, #1
 800c16c:	2300      	movne	r3, #0
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	f003 0310 	and.w	r3, r3, #16
 800c17c:	2b10      	cmp	r3, #16
 800c17e:	bf0c      	ite	eq
 800c180:	2301      	moveq	r3, #1
 800c182:	2300      	movne	r3, #0
 800c184:	b2db      	uxtb	r3, r3
 800c186:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c188:	e034      	b.n	800c1f4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c190:	d01a      	beq.n	800c1c8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c192:	f7fe fad3 	bl	800a73c <HAL_GetTick>
 800c196:	4602      	mov	r2, r0
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d302      	bcc.n	800c1a8 <HAL_I2C_IsDeviceReady+0xd8>
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d10f      	bne.n	800c1c8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2220      	movs	r2, #32
 800c1ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1b4:	f043 0220 	orr.w	r2, r3, #32
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e06b      	b.n	800c2a0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	f003 0320 	and.w	r3, r3, #32
 800c1d2:	2b20      	cmp	r3, #32
 800c1d4:	bf0c      	ite	eq
 800c1d6:	2301      	moveq	r3, #1
 800c1d8:	2300      	movne	r3, #0
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	f003 0310 	and.w	r3, r3, #16
 800c1e8:	2b10      	cmp	r3, #16
 800c1ea:	bf0c      	ite	eq
 800c1ec:	2301      	moveq	r3, #1
 800c1ee:	2300      	movne	r3, #0
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c1f4:	7ffb      	ldrb	r3, [r7, #31]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d102      	bne.n	800c200 <HAL_I2C_IsDeviceReady+0x130>
 800c1fa:	7fbb      	ldrb	r3, [r7, #30]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0c4      	beq.n	800c18a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	f003 0310 	and.w	r3, r3, #16
 800c20a:	2b10      	cmp	r3, #16
 800c20c:	d01a      	beq.n	800c244 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2200      	movs	r2, #0
 800c216:	2120      	movs	r1, #32
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f000 fe9a 	bl	800cf52 <I2C_WaitOnFlagUntilTimeout>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d001      	beq.n	800c228 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	e03b      	b.n	800c2a0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2220      	movs	r2, #32
 800c22e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2220      	movs	r2, #32
 800c234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	e02d      	b.n	800c2a0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2200      	movs	r2, #0
 800c24c:	2120      	movs	r1, #32
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f000 fe7f 	bl	800cf52 <I2C_WaitOnFlagUntilTimeout>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e020      	b.n	800c2a0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2210      	movs	r2, #16
 800c264:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2220      	movs	r2, #32
 800c26c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	3301      	adds	r3, #1
 800c272:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	429a      	cmp	r2, r3
 800c27a:	f63f af56 	bhi.w	800c12a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2220      	movs	r2, #32
 800c282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c28a:	f043 0220 	orr.w	r2, r3, #32
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e000      	b.n	800c2a0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800c29e:	2302      	movs	r3, #2
  }
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3720      	adds	r7, #32
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	68f9      	ldr	r1, [r7, #12]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	4798      	blx	r3
  }
}
 800c2d4:	bf00      	nop
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00f      	beq.n	800c31e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00a      	beq.n	800c31e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c30c:	f043 0201 	orr.w	r2, r3, #1
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c31c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00f      	beq.n	800c348 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00a      	beq.n	800c348 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c336:	f043 0208 	orr.w	r2, r3, #8
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c346:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00f      	beq.n	800c372 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00a      	beq.n	800c372 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c360:	f043 0202 	orr.w	r2, r3, #2
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c370:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c376:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f003 030b 	and.w	r3, r3, #11
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800c382:	68f9      	ldr	r1, [r7, #12]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fc8b 	bl	800cca0 <I2C_ITError>
  }
}
 800c38a:	bf00      	nop
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c392:	b480      	push	{r7}
 800c394:	b083      	sub	sp, #12
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c39a:	bf00      	nop
 800c39c:	370c      	adds	r7, #12
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c3ae:	bf00      	nop
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b083      	sub	sp, #12
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	70fb      	strb	r3, [r7, #3]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c3ca:	bf00      	nop
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b083      	sub	sp, #12
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c3de:	bf00      	nop
 800c3e0:	370c      	adds	r7, #12
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c3ea:	b480      	push	{r7}
 800c3ec:	b083      	sub	sp, #12
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c3f2:	bf00      	nop
 800c3f4:	370c      	adds	r7, #12
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3fe:	b480      	push	{r7}
 800c400:	b083      	sub	sp, #12
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c406:	bf00      	nop
 800c408:	370c      	adds	r7, #12
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800c412:	b480      	push	{r7}
 800c414:	b083      	sub	sp, #12
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c420:	b2db      	uxtb	r3, r3
}
 800c422:	4618      	mov	r0, r3
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b086      	sub	sp, #24
 800c432:	af00      	add	r7, sp, #0
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c43e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d101      	bne.n	800c452 <I2C_Slave_ISR_IT+0x24>
 800c44e:	2302      	movs	r3, #2
 800c450:	e0e2      	b.n	800c618 <I2C_Slave_ISR_IT+0x1ea>
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2201      	movs	r2, #1
 800c456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	f003 0320 	and.w	r3, r3, #32
 800c460:	2b00      	cmp	r3, #0
 800c462:	d009      	beq.n	800c478 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d004      	beq.n	800c478 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c46e:	6939      	ldr	r1, [r7, #16]
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f000 fa5d 	bl	800c930 <I2C_ITSlaveCplt>
 800c476:	e0ca      	b.n	800c60e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	f003 0310 	and.w	r3, r3, #16
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d04b      	beq.n	800c51a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d046      	beq.n	800c51a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c490:	b29b      	uxth	r3, r3
 800c492:	2b00      	cmp	r3, #0
 800c494:	d128      	bne.n	800c4e8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b28      	cmp	r3, #40	@ 0x28
 800c4a0:	d108      	bne.n	800c4b4 <I2C_Slave_ISR_IT+0x86>
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c4a8:	d104      	bne.n	800c4b4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c4aa:	6939      	ldr	r1, [r7, #16]
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f000 fba3 	bl	800cbf8 <I2C_ITListenCplt>
 800c4b2:	e031      	b.n	800c518 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b29      	cmp	r3, #41	@ 0x29
 800c4be:	d10e      	bne.n	800c4de <I2C_Slave_ISR_IT+0xb0>
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c4c6:	d00a      	beq.n	800c4de <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2210      	movs	r2, #16
 800c4ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f000 fcfc 	bl	800cece <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f000 f9ce 	bl	800c878 <I2C_ITSlaveSeqCplt>
 800c4dc:	e01c      	b.n	800c518 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2210      	movs	r2, #16
 800c4e4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c4e6:	e08f      	b.n	800c608 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2210      	movs	r2, #16
 800c4ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4f4:	f043 0204 	orr.w	r2, r3, #4
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <I2C_Slave_ISR_IT+0xdc>
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c508:	d17e      	bne.n	800c608 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c50e:	4619      	mov	r1, r3
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 fbc5 	bl	800cca0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c516:	e077      	b.n	800c608 <I2C_Slave_ISR_IT+0x1da>
 800c518:	e076      	b.n	800c608 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d02f      	beq.n	800c584 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d02a      	beq.n	800c584 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c532:	b29b      	uxth	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d018      	beq.n	800c56a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c542:	b2d2      	uxtb	r2, r2
 800c544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c554:	3b01      	subs	r3, #1
 800c556:	b29a      	uxth	r2, r3
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c560:	b29b      	uxth	r3, r3
 800c562:	3b01      	subs	r3, #1
 800c564:	b29a      	uxth	r2, r3
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c56e:	b29b      	uxth	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	d14b      	bne.n	800c60c <I2C_Slave_ISR_IT+0x1de>
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c57a:	d047      	beq.n	800c60c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f000 f97b 	bl	800c878 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c582:	e043      	b.n	800c60c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	f003 0308 	and.w	r3, r3, #8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d009      	beq.n	800c5a2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c594:	2b00      	cmp	r3, #0
 800c596:	d004      	beq.n	800c5a2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c598:	6939      	ldr	r1, [r7, #16]
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f000 f8e8 	bl	800c770 <I2C_ITAddrCplt>
 800c5a0:	e035      	b.n	800c60e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	f003 0302 	and.w	r3, r3, #2
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d030      	beq.n	800c60e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d02b      	beq.n	800c60e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d018      	beq.n	800c5f2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c4:	781a      	ldrb	r2, [r3, #0]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c5f0:	e00d      	b.n	800c60e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5f8:	d002      	beq.n	800c600 <I2C_Slave_ISR_IT+0x1d2>
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d106      	bne.n	800c60e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f000 f939 	bl	800c878 <I2C_ITSlaveSeqCplt>
 800c606:	e002      	b.n	800c60e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800c608:	bf00      	nop
 800c60a:	e000      	b.n	800c60e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800c60c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3718      	adds	r7, #24
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af02      	add	r7, sp, #8
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	4608      	mov	r0, r1
 800c62a:	4611      	mov	r1, r2
 800c62c:	461a      	mov	r2, r3
 800c62e:	4603      	mov	r3, r0
 800c630:	817b      	strh	r3, [r7, #10]
 800c632:	460b      	mov	r3, r1
 800c634:	813b      	strh	r3, [r7, #8]
 800c636:	4613      	mov	r3, r2
 800c638:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c63a:	88fb      	ldrh	r3, [r7, #6]
 800c63c:	b2da      	uxtb	r2, r3
 800c63e:	8979      	ldrh	r1, [r7, #10]
 800c640:	4b20      	ldr	r3, [pc, #128]	@ (800c6c4 <I2C_RequestMemoryWrite+0xa4>)
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f000 fe45 	bl	800d2d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c64e:	69fa      	ldr	r2, [r7, #28]
 800c650:	69b9      	ldr	r1, [r7, #24]
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f000 fcd6 	bl	800d004 <I2C_WaitOnTXISFlagUntilTimeout>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e02c      	b.n	800c6bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c662:	88fb      	ldrh	r3, [r7, #6]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d105      	bne.n	800c674 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c668:	893b      	ldrh	r3, [r7, #8]
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	629a      	str	r2, [r3, #40]	@ 0x28
 800c672:	e015      	b.n	800c6a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c674:	893b      	ldrh	r3, [r7, #8]
 800c676:	0a1b      	lsrs	r3, r3, #8
 800c678:	b29b      	uxth	r3, r3
 800c67a:	b2da      	uxtb	r2, r3
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c682:	69fa      	ldr	r2, [r7, #28]
 800c684:	69b9      	ldr	r1, [r7, #24]
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f000 fcbc 	bl	800d004 <I2C_WaitOnTXISFlagUntilTimeout>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	e012      	b.n	800c6bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c696:	893b      	ldrh	r3, [r7, #8]
 800c698:	b2da      	uxtb	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2180      	movs	r1, #128	@ 0x80
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f000 fc51 	bl	800cf52 <I2C_WaitOnFlagUntilTimeout>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e000      	b.n	800c6bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	80002000 	.word	0x80002000

0800c6c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af02      	add	r7, sp, #8
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	4608      	mov	r0, r1
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	817b      	strh	r3, [r7, #10]
 800c6da:	460b      	mov	r3, r1
 800c6dc:	813b      	strh	r3, [r7, #8]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c6e2:	88fb      	ldrh	r3, [r7, #6]
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	8979      	ldrh	r1, [r7, #10]
 800c6e8:	4b20      	ldr	r3, [pc, #128]	@ (800c76c <I2C_RequestMemoryRead+0xa4>)
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f000 fdf2 	bl	800d2d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c6f4:	69fa      	ldr	r2, [r7, #28]
 800c6f6:	69b9      	ldr	r1, [r7, #24]
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f000 fc83 	bl	800d004 <I2C_WaitOnTXISFlagUntilTimeout>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e02c      	b.n	800c762 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c708:	88fb      	ldrh	r3, [r7, #6]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d105      	bne.n	800c71a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c70e:	893b      	ldrh	r3, [r7, #8]
 800c710:	b2da      	uxtb	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	629a      	str	r2, [r3, #40]	@ 0x28
 800c718:	e015      	b.n	800c746 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c71a:	893b      	ldrh	r3, [r7, #8]
 800c71c:	0a1b      	lsrs	r3, r3, #8
 800c71e:	b29b      	uxth	r3, r3
 800c720:	b2da      	uxtb	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c728:	69fa      	ldr	r2, [r7, #28]
 800c72a:	69b9      	ldr	r1, [r7, #24]
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f000 fc69 	bl	800d004 <I2C_WaitOnTXISFlagUntilTimeout>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e012      	b.n	800c762 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c73c:	893b      	ldrh	r3, [r7, #8]
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	2200      	movs	r2, #0
 800c74e:	2140      	movs	r1, #64	@ 0x40
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f000 fbfe 	bl	800cf52 <I2C_WaitOnFlagUntilTimeout>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	e000      	b.n	800c762 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	80002000 	.word	0x80002000

0800c770 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c780:	b2db      	uxtb	r3, r3
 800c782:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c786:	2b28      	cmp	r3, #40	@ 0x28
 800c788:	d16a      	bne.n	800c860 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	0c1b      	lsrs	r3, r3, #16
 800c792:	b2db      	uxtb	r3, r3
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	0c1b      	lsrs	r3, r3, #16
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800c7a8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7b6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800c7c4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d138      	bne.n	800c840 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c7ce:	897b      	ldrh	r3, [r7, #10]
 800c7d0:	09db      	lsrs	r3, r3, #7
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	89bb      	ldrh	r3, [r7, #12]
 800c7d6:	4053      	eors	r3, r2
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	f003 0306 	and.w	r3, r3, #6
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d11c      	bne.n	800c81c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c7e2:	897b      	ldrh	r3, [r7, #10]
 800c7e4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7ea:	1c5a      	adds	r2, r3, #1
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d13b      	bne.n	800c870 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2208      	movs	r2, #8
 800c804:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c80e:	89ba      	ldrh	r2, [r7, #12]
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	4619      	mov	r1, r3
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff fdd0 	bl	800c3ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c81a:	e029      	b.n	800c870 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c81c:	893b      	ldrh	r3, [r7, #8]
 800c81e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fd89 	bl	800d33c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c832:	89ba      	ldrh	r2, [r7, #12]
 800c834:	7bfb      	ldrb	r3, [r7, #15]
 800c836:	4619      	mov	r1, r3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7ff fdbe 	bl	800c3ba <HAL_I2C_AddrCallback>
}
 800c83e:	e017      	b.n	800c870 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fd79 	bl	800d33c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c852:	89ba      	ldrh	r2, [r7, #12]
 800c854:	7bfb      	ldrb	r3, [r7, #15]
 800c856:	4619      	mov	r1, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7ff fdae 	bl	800c3ba <HAL_I2C_AddrCallback>
}
 800c85e:	e007      	b.n	800c870 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2208      	movs	r2, #8
 800c866:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800c870:	bf00      	nop
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c896:	2b00      	cmp	r3, #0
 800c898:	d008      	beq.n	800c8ac <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	e00c      	b.n	800c8c6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d007      	beq.n	800c8c6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c8c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b29      	cmp	r3, #41	@ 0x29
 800c8d0:	d112      	bne.n	800c8f8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2228      	movs	r2, #40	@ 0x28
 800c8d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2221      	movs	r2, #33	@ 0x21
 800c8de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fd2a 	bl	800d33c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7ff fd4e 	bl	800c392 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c8f6:	e017      	b.n	800c928 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b2a      	cmp	r3, #42	@ 0x2a
 800c902:	d111      	bne.n	800c928 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2228      	movs	r2, #40	@ 0x28
 800c908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2222      	movs	r2, #34	@ 0x22
 800c910:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c912:	2102      	movs	r1, #2
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fd11 	bl	800d33c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f7ff fd3f 	bl	800c3a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800c928:	bf00      	nop
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c94a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c952:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2220      	movs	r2, #32
 800c95a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c95c:	7afb      	ldrb	r3, [r7, #11]
 800c95e:	2b21      	cmp	r3, #33	@ 0x21
 800c960:	d002      	beq.n	800c968 <I2C_ITSlaveCplt+0x38>
 800c962:	7afb      	ldrb	r3, [r7, #11]
 800c964:	2b29      	cmp	r3, #41	@ 0x29
 800c966:	d108      	bne.n	800c97a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c968:	f248 0101 	movw	r1, #32769	@ 0x8001
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fce5 	bl	800d33c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2221      	movs	r2, #33	@ 0x21
 800c976:	631a      	str	r2, [r3, #48]	@ 0x30
 800c978:	e019      	b.n	800c9ae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	2b22      	cmp	r3, #34	@ 0x22
 800c97e:	d002      	beq.n	800c986 <I2C_ITSlaveCplt+0x56>
 800c980:	7afb      	ldrb	r3, [r7, #11]
 800c982:	2b2a      	cmp	r3, #42	@ 0x2a
 800c984:	d108      	bne.n	800c998 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c986:	f248 0102 	movw	r1, #32770	@ 0x8002
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 fcd6 	bl	800d33c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2222      	movs	r2, #34	@ 0x22
 800c994:	631a      	str	r2, [r3, #48]	@ 0x30
 800c996:	e00a      	b.n	800c9ae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c998:	7afb      	ldrb	r3, [r7, #11]
 800c99a:	2b28      	cmp	r3, #40	@ 0x28
 800c99c:	d107      	bne.n	800c9ae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c99e:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fcca 	bl	800d33c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c9bc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6859      	ldr	r1, [r3, #4]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	4b89      	ldr	r3, [pc, #548]	@ (800cbf0 <I2C_ITSlaveCplt+0x2c0>)
 800c9ca:	400b      	ands	r3, r1
 800c9cc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fa7d 	bl	800cece <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d013      	beq.n	800ca06 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c9ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d01f      	beq.n	800ca36 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ca04:	e017      	b.n	800ca36 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d012      	beq.n	800ca36 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ca1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d006      	beq.n	800ca36 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f003 0304 	and.w	r3, r3, #4
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d020      	beq.n	800ca82 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	f023 0304 	bic.w	r3, r3, #4
 800ca46:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca52:	b2d2      	uxtb	r2, r2
 800ca54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca5a:	1c5a      	adds	r2, r3, #1
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00c      	beq.n	800ca82 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d005      	beq.n	800ca98 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca90:	f043 0204 	orr.w	r2, r3, #4
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	f003 0310 	and.w	r3, r3, #16
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d049      	beq.n	800cb36 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d044      	beq.n	800cb36 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d128      	bne.n	800cb08 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	2b28      	cmp	r3, #40	@ 0x28
 800cac0:	d108      	bne.n	800cad4 <I2C_ITSlaveCplt+0x1a4>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cac8:	d104      	bne.n	800cad4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800caca:	6979      	ldr	r1, [r7, #20]
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 f893 	bl	800cbf8 <I2C_ITListenCplt>
 800cad2:	e030      	b.n	800cb36 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b29      	cmp	r3, #41	@ 0x29
 800cade:	d10e      	bne.n	800cafe <I2C_ITSlaveCplt+0x1ce>
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cae6:	d00a      	beq.n	800cafe <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2210      	movs	r2, #16
 800caee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f9ec 	bl	800cece <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff febe 	bl	800c878 <I2C_ITSlaveSeqCplt>
 800cafc:	e01b      	b.n	800cb36 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2210      	movs	r2, #16
 800cb04:	61da      	str	r2, [r3, #28]
 800cb06:	e016      	b.n	800cb36 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2210      	movs	r2, #16
 800cb0e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb14:	f043 0204 	orr.w	r2, r3, #4
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <I2C_ITSlaveCplt+0x1fa>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb28:	d105      	bne.n	800cb36 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f8b5 	bl	800cca0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d010      	beq.n	800cb6e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f8a4 	bl	800cca0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	2b28      	cmp	r3, #40	@ 0x28
 800cb62:	d141      	bne.n	800cbe8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cb64:	6979      	ldr	r1, [r7, #20]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f846 	bl	800cbf8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cb6c:	e03c      	b.n	800cbe8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cb76:	d014      	beq.n	800cba2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff fe7d 	bl	800c878 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a1c      	ldr	r2, [pc, #112]	@ (800cbf4 <I2C_ITSlaveCplt+0x2c4>)
 800cb82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2220      	movs	r2, #32
 800cb88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff fc1b 	bl	800c3d6 <HAL_I2C_ListenCpltCallback>
}
 800cba0:	e022      	b.n	800cbe8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b22      	cmp	r3, #34	@ 0x22
 800cbac:	d10e      	bne.n	800cbcc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2220      	movs	r2, #32
 800cbb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff fbee 	bl	800c3a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800cbca:	e00d      	b.n	800cbe8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2220      	movs	r2, #32
 800cbd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f7ff fbd5 	bl	800c392 <HAL_I2C_SlaveTxCpltCallback>
}
 800cbe8:	bf00      	nop
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	fe00e800 	.word	0xfe00e800
 800cbf4:	ffff0000 	.word	0xffff0000

0800cbf8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a25      	ldr	r2, [pc, #148]	@ (800cc9c <I2C_ITListenCplt+0xa4>)
 800cc06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2220      	movs	r2, #32
 800cc12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	f003 0304 	and.w	r3, r3, #4
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d022      	beq.n	800cc74 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc38:	b2d2      	uxtb	r2, r2
 800cc3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc40:	1c5a      	adds	r2, r3, #1
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d012      	beq.n	800cc74 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc52:	3b01      	subs	r3, #1
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	3b01      	subs	r3, #1
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc6c:	f043 0204 	orr.w	r2, r3, #4
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cc74:	f248 0103 	movw	r1, #32771	@ 0x8003
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fb5f 	bl	800d33c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2210      	movs	r2, #16
 800cc84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff fba1 	bl	800c3d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	ffff0000 	.word	0xffff0000

0800cca0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccb0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a6d      	ldr	r2, [pc, #436]	@ (800ce74 <I2C_ITError+0x1d4>)
 800ccbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	431a      	orrs	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
 800ccd4:	2b28      	cmp	r3, #40	@ 0x28
 800ccd6:	d005      	beq.n	800cce4 <I2C_ITError+0x44>
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
 800ccda:	2b29      	cmp	r3, #41	@ 0x29
 800ccdc:	d002      	beq.n	800cce4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cce2:	d10b      	bne.n	800ccfc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cce4:	2103      	movs	r1, #3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fb28 	bl	800d33c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2228      	movs	r2, #40	@ 0x28
 800ccf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	4a60      	ldr	r2, [pc, #384]	@ (800ce78 <I2C_ITError+0x1d8>)
 800ccf8:	635a      	str	r2, [r3, #52]	@ 0x34
 800ccfa:	e030      	b.n	800cd5e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ccfc:	f248 0103 	movw	r1, #32771	@ 0x8003
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fb1b 	bl	800d33c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 f8e1 	bl	800cece <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	2b60      	cmp	r3, #96	@ 0x60
 800cd16:	d01f      	beq.n	800cd58 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	f003 0320 	and.w	r3, r3, #32
 800cd2a:	2b20      	cmp	r3, #32
 800cd2c:	d114      	bne.n	800cd58 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	f003 0310 	and.w	r3, r3, #16
 800cd38:	2b10      	cmp	r3, #16
 800cd3a:	d109      	bne.n	800cd50 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2210      	movs	r2, #16
 800cd42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd48:	f043 0204 	orr.w	r2, r3, #4
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2220      	movs	r2, #32
 800cd56:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d039      	beq.n	800cde0 <I2C_ITError+0x140>
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	2b11      	cmp	r3, #17
 800cd70:	d002      	beq.n	800cd78 <I2C_ITError+0xd8>
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	2b21      	cmp	r3, #33	@ 0x21
 800cd76:	d133      	bne.n	800cde0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd86:	d107      	bne.n	800cd98 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cd96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe f822 	bl	800ade6 <HAL_DMA_GetState>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d017      	beq.n	800cdd8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdac:	4a33      	ldr	r2, [pc, #204]	@ (800ce7c <I2C_ITError+0x1dc>)
 800cdae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fd fefc 	bl	800abba <HAL_DMA_Abort_IT>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d04d      	beq.n	800ce64 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cdd6:	e045      	b.n	800ce64 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 f851 	bl	800ce80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cdde:	e041      	b.n	800ce64 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d039      	beq.n	800ce5c <I2C_ITError+0x1bc>
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b12      	cmp	r3, #18
 800cdec:	d002      	beq.n	800cdf4 <I2C_ITError+0x154>
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2b22      	cmp	r3, #34	@ 0x22
 800cdf2:	d133      	bne.n	800ce5c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cdfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce02:	d107      	bne.n	800ce14 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ce12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fd ffe4 	bl	800ade6 <HAL_DMA_GetState>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d017      	beq.n	800ce54 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce28:	4a14      	ldr	r2, [pc, #80]	@ (800ce7c <I2C_ITError+0x1dc>)
 800ce2a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fd febe 	bl	800abba <HAL_DMA_Abort_IT>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d011      	beq.n	800ce68 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce4e:	4610      	mov	r0, r2
 800ce50:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce52:	e009      	b.n	800ce68 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f813 	bl	800ce80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce5a:	e005      	b.n	800ce68 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f80f 	bl	800ce80 <I2C_TreatErrorCallback>
  }
}
 800ce62:	e002      	b.n	800ce6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce64:	bf00      	nop
 800ce66:	e000      	b.n	800ce6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce68:	bf00      	nop
}
 800ce6a:	bf00      	nop
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	ffff0000 	.word	0xffff0000
 800ce78:	0800c42f 	.word	0x0800c42f
 800ce7c:	0800cf17 	.word	0x0800cf17

0800ce80 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b60      	cmp	r3, #96	@ 0x60
 800ce92:	d10e      	bne.n	800ceb2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2220      	movs	r2, #32
 800ce98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff faa7 	bl	800c3fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ceb0:	e009      	b.n	800cec6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff fa92 	bl	800c3ea <HAL_I2C_ErrorCallback>
}
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cece:	b480      	push	{r7}
 800ced0:	b083      	sub	sp, #12
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	f003 0302 	and.w	r3, r3, #2
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d103      	bne.n	800ceec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2200      	movs	r2, #0
 800ceea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	699b      	ldr	r3, [r3, #24]
 800cef2:	f003 0301 	and.w	r3, r3, #1
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d007      	beq.n	800cf0a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	699a      	ldr	r2, [r3, #24]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f042 0201 	orr.w	r2, r2, #1
 800cf08:	619a      	str	r2, [r3, #24]
  }
}
 800cf0a:	bf00      	nop
 800cf0c:	370c      	adds	r7, #12
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b084      	sub	sp, #16
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf22:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf30:	2200      	movs	r2, #0
 800cf32:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d003      	beq.n	800cf44 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf40:	2200      	movs	r2, #0
 800cf42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f7ff ff9b 	bl	800ce80 <I2C_TreatErrorCallback>
}
 800cf4a:	bf00      	nop
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	60f8      	str	r0, [r7, #12]
 800cf5a:	60b9      	str	r1, [r7, #8]
 800cf5c:	603b      	str	r3, [r7, #0]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cf62:	e03b      	b.n	800cfdc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	6839      	ldr	r1, [r7, #0]
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f000 f8d5 	bl	800d118 <I2C_IsErrorOccurred>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800cf74:	2301      	movs	r3, #1
 800cf76:	e041      	b.n	800cffc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d02d      	beq.n	800cfdc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf80:	f7fd fbdc 	bl	800a73c <HAL_GetTick>
 800cf84:	4602      	mov	r2, r0
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d302      	bcc.n	800cf96 <I2C_WaitOnFlagUntilTimeout+0x44>
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d122      	bne.n	800cfdc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	699a      	ldr	r2, [r3, #24]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	68ba      	ldr	r2, [r7, #8]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	bf0c      	ite	eq
 800cfa6:	2301      	moveq	r3, #1
 800cfa8:	2300      	movne	r3, #0
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	461a      	mov	r2, r3
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d113      	bne.n	800cfdc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfb8:	f043 0220 	orr.w	r2, r3, #32
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2220      	movs	r2, #32
 800cfc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e00f      	b.n	800cffc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	699a      	ldr	r2, [r3, #24]
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	bf0c      	ite	eq
 800cfec:	2301      	moveq	r3, #1
 800cfee:	2300      	movne	r3, #0
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	461a      	mov	r2, r3
 800cff4:	79fb      	ldrb	r3, [r7, #7]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d0b4      	beq.n	800cf64 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3710      	adds	r7, #16
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d010:	e033      	b.n	800d07a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	68b9      	ldr	r1, [r7, #8]
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f000 f87e 	bl	800d118 <I2C_IsErrorOccurred>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	e031      	b.n	800d08a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02c:	d025      	beq.n	800d07a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d02e:	f7fd fb85 	bl	800a73c <HAL_GetTick>
 800d032:	4602      	mov	r2, r0
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	68ba      	ldr	r2, [r7, #8]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d302      	bcc.n	800d044 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d11a      	bne.n	800d07a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	f003 0302 	and.w	r3, r3, #2
 800d04e:	2b02      	cmp	r3, #2
 800d050:	d013      	beq.n	800d07a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d056:	f043 0220 	orr.w	r2, r3, #32
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2220      	movs	r2, #32
 800d062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2200      	movs	r2, #0
 800d06a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e007      	b.n	800d08a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	699b      	ldr	r3, [r3, #24]
 800d080:	f003 0302 	and.w	r3, r3, #2
 800d084:	2b02      	cmp	r3, #2
 800d086:	d1c4      	bne.n	800d012 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b084      	sub	sp, #16
 800d096:	af00      	add	r7, sp, #0
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	60b9      	str	r1, [r7, #8]
 800d09c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d09e:	e02f      	b.n	800d100 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	68b9      	ldr	r1, [r7, #8]
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f000 f837 	bl	800d118 <I2C_IsErrorOccurred>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e02d      	b.n	800d110 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0b4:	f7fd fb42 	bl	800a73c <HAL_GetTick>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d302      	bcc.n	800d0ca <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d11a      	bne.n	800d100 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	699b      	ldr	r3, [r3, #24]
 800d0d0:	f003 0320 	and.w	r3, r3, #32
 800d0d4:	2b20      	cmp	r3, #32
 800d0d6:	d013      	beq.n	800d100 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0dc:	f043 0220 	orr.w	r2, r3, #32
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2220      	movs	r2, #32
 800d0e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e007      	b.n	800d110 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	699b      	ldr	r3, [r3, #24]
 800d106:	f003 0320 	and.w	r3, r3, #32
 800d10a:	2b20      	cmp	r3, #32
 800d10c:	d1c8      	bne.n	800d0a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3710      	adds	r7, #16
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08a      	sub	sp, #40	@ 0x28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	f003 0310 	and.w	r3, r3, #16
 800d140:	2b00      	cmp	r3, #0
 800d142:	d068      	beq.n	800d216 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2210      	movs	r2, #16
 800d14a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d14c:	e049      	b.n	800d1e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d154:	d045      	beq.n	800d1e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d156:	f7fd faf1 	bl	800a73c <HAL_GetTick>
 800d15a:	4602      	mov	r2, r0
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	429a      	cmp	r2, r3
 800d164:	d302      	bcc.n	800d16c <I2C_IsErrorOccurred+0x54>
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d13a      	bne.n	800d1e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d176:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d17e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d18a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d18e:	d121      	bne.n	800d1d4 <I2C_IsErrorOccurred+0xbc>
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d196:	d01d      	beq.n	800d1d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d198:	7cfb      	ldrb	r3, [r7, #19]
 800d19a:	2b20      	cmp	r3, #32
 800d19c:	d01a      	beq.n	800d1d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	685a      	ldr	r2, [r3, #4]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d1ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d1ae:	f7fd fac5 	bl	800a73c <HAL_GetTick>
 800d1b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d1b4:	e00e      	b.n	800d1d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d1b6:	f7fd fac1 	bl	800a73c <HAL_GetTick>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	2b19      	cmp	r3, #25
 800d1c2:	d907      	bls.n	800d1d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	f043 0320 	orr.w	r3, r3, #32
 800d1ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800d1d2:	e006      	b.n	800d1e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	f003 0320 	and.w	r3, r3, #32
 800d1de:	2b20      	cmp	r3, #32
 800d1e0:	d1e9      	bne.n	800d1b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	699b      	ldr	r3, [r3, #24]
 800d1e8:	f003 0320 	and.w	r3, r3, #32
 800d1ec:	2b20      	cmp	r3, #32
 800d1ee:	d003      	beq.n	800d1f8 <I2C_IsErrorOccurred+0xe0>
 800d1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d0aa      	beq.n	800d14e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d103      	bne.n	800d208 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2220      	movs	r2, #32
 800d206:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	f043 0304 	orr.w	r3, r3, #4
 800d20e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	699b      	ldr	r3, [r3, #24]
 800d21c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00b      	beq.n	800d240 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	f043 0301 	orr.w	r3, r3, #1
 800d22e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00b      	beq.n	800d262 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d24a:	6a3b      	ldr	r3, [r7, #32]
 800d24c:	f043 0308 	orr.w	r3, r3, #8
 800d250:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d25a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00b      	beq.n	800d284 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	f043 0302 	orr.w	r3, r3, #2
 800d272:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d27c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d27e:	2301      	movs	r3, #1
 800d280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800d284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d01c      	beq.n	800d2c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f7ff fe1e 	bl	800cece <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6859      	ldr	r1, [r3, #4]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d4 <I2C_IsErrorOccurred+0x1bc>)
 800d29e:	400b      	ands	r3, r1
 800d2a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	431a      	orrs	r2, r3
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2220      	movs	r2, #32
 800d2b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800d2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3728      	adds	r7, #40	@ 0x28
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	fe00e800 	.word	0xfe00e800

0800d2d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	607b      	str	r3, [r7, #4]
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	817b      	strh	r3, [r7, #10]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d2ea:	897b      	ldrh	r3, [r7, #10]
 800d2ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d2f0:	7a7b      	ldrb	r3, [r7, #9]
 800d2f2:	041b      	lsls	r3, r3, #16
 800d2f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d2f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d2fe:	6a3b      	ldr	r3, [r7, #32]
 800d300:	4313      	orrs	r3, r2
 800d302:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d306:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	0d5b      	lsrs	r3, r3, #21
 800d312:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800d316:	4b08      	ldr	r3, [pc, #32]	@ (800d338 <I2C_TransferConfig+0x60>)
 800d318:	430b      	orrs	r3, r1
 800d31a:	43db      	mvns	r3, r3
 800d31c:	ea02 0103 	and.w	r1, r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	430a      	orrs	r2, r1
 800d328:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d32a:	bf00      	nop
 800d32c:	371c      	adds	r7, #28
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	03ff63ff 	.word	0x03ff63ff

0800d33c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d348:	2300      	movs	r3, #0
 800d34a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d34c:	887b      	ldrh	r3, [r7, #2]
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00f      	beq.n	800d376 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800d35c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d36a:	2b28      	cmp	r3, #40	@ 0x28
 800d36c:	d003      	beq.n	800d376 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800d374:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d376:	887b      	ldrh	r3, [r7, #2]
 800d378:	f003 0302 	and.w	r3, r3, #2
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00f      	beq.n	800d3a0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800d386:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d394:	2b28      	cmp	r3, #40	@ 0x28
 800d396:	d003      	beq.n	800d3a0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800d39e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d3a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	da03      	bge.n	800d3b0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800d3ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d3b0:	887b      	ldrh	r3, [r7, #2]
 800d3b2:	2b10      	cmp	r3, #16
 800d3b4:	d103      	bne.n	800d3be <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800d3bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d3be:	887b      	ldrh	r3, [r7, #2]
 800d3c0:	2b20      	cmp	r3, #32
 800d3c2:	d103      	bne.n	800d3cc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f043 0320 	orr.w	r3, r3, #32
 800d3ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d3cc:	887b      	ldrh	r3, [r7, #2]
 800d3ce:	2b40      	cmp	r3, #64	@ 0x40
 800d3d0:	d103      	bne.n	800d3da <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3d8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6819      	ldr	r1, [r3, #0]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	43da      	mvns	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	400a      	ands	r2, r1
 800d3ea:	601a      	str	r2, [r3, #0]
}
 800d3ec:	bf00      	nop
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b20      	cmp	r3, #32
 800d40c:	d138      	bne.n	800d480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d414:	2b01      	cmp	r3, #1
 800d416:	d101      	bne.n	800d41c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d418:	2302      	movs	r3, #2
 800d41a:	e032      	b.n	800d482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2201      	movs	r2, #1
 800d420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2224      	movs	r2, #36	@ 0x24
 800d428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f022 0201 	bic.w	r2, r2, #1
 800d43a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d44a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6819      	ldr	r1, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	430a      	orrs	r2, r1
 800d45a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f042 0201 	orr.w	r2, r2, #1
 800d46a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2220      	movs	r2, #32
 800d470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	e000      	b.n	800d482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d480:	2302      	movs	r3, #2
  }
}
 800d482:	4618      	mov	r0, r3
 800d484:	370c      	adds	r7, #12
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d48e:	b480      	push	{r7}
 800d490:	b085      	sub	sp, #20
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	2b20      	cmp	r3, #32
 800d4a2:	d139      	bne.n	800d518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d101      	bne.n	800d4b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d4ae:	2302      	movs	r3, #2
 800d4b0:	e033      	b.n	800d51a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2224      	movs	r2, #36	@ 0x24
 800d4be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f022 0201 	bic.w	r2, r2, #1
 800d4d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d4e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	021b      	lsls	r3, r3, #8
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f042 0201 	orr.w	r2, r2, #1
 800d502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2220      	movs	r2, #32
 800d508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	e000      	b.n	800d51a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d518:	2302      	movs	r3, #2
  }
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3714      	adds	r7, #20
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr
	...

0800d528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d141      	bne.n	800d5ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d536:	4b4b      	ldr	r3, [pc, #300]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d53e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d542:	d131      	bne.n	800d5a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d544:	4b47      	ldr	r3, [pc, #284]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d54a:	4a46      	ldr	r2, [pc, #280]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d54c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d550:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d554:	4b43      	ldr	r3, [pc, #268]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d55c:	4a41      	ldr	r2, [pc, #260]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d55e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d562:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d564:	4b40      	ldr	r3, [pc, #256]	@ (800d668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2232      	movs	r2, #50	@ 0x32
 800d56a:	fb02 f303 	mul.w	r3, r2, r3
 800d56e:	4a3f      	ldr	r2, [pc, #252]	@ (800d66c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d570:	fba2 2303 	umull	r2, r3, r2, r3
 800d574:	0c9b      	lsrs	r3, r3, #18
 800d576:	3301      	adds	r3, #1
 800d578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d57a:	e002      	b.n	800d582 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	3b01      	subs	r3, #1
 800d580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d582:	4b38      	ldr	r3, [pc, #224]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d584:	695b      	ldr	r3, [r3, #20]
 800d586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d58a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d58e:	d102      	bne.n	800d596 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1f2      	bne.n	800d57c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d596:	4b33      	ldr	r3, [pc, #204]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d598:	695b      	ldr	r3, [r3, #20]
 800d59a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d59e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5a2:	d158      	bne.n	800d656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d5a4:	2303      	movs	r3, #3
 800d5a6:	e057      	b.n	800d658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d5a8:	4b2e      	ldr	r3, [pc, #184]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ae:	4a2d      	ldr	r2, [pc, #180]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d5b8:	e04d      	b.n	800d656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5c0:	d141      	bne.n	800d646 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d5c2:	4b28      	ldr	r3, [pc, #160]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d5ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5ce:	d131      	bne.n	800d634 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d5d0:	4b24      	ldr	r3, [pc, #144]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d6:	4a23      	ldr	r2, [pc, #140]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d5e0:	4b20      	ldr	r3, [pc, #128]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d5e8:	4a1e      	ldr	r2, [pc, #120]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d5ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d5f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2232      	movs	r2, #50	@ 0x32
 800d5f6:	fb02 f303 	mul.w	r3, r2, r3
 800d5fa:	4a1c      	ldr	r2, [pc, #112]	@ (800d66c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d600:	0c9b      	lsrs	r3, r3, #18
 800d602:	3301      	adds	r3, #1
 800d604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d606:	e002      	b.n	800d60e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	3b01      	subs	r3, #1
 800d60c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d60e:	4b15      	ldr	r3, [pc, #84]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d61a:	d102      	bne.n	800d622 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1f2      	bne.n	800d608 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d622:	4b10      	ldr	r3, [pc, #64]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d62a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d62e:	d112      	bne.n	800d656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d630:	2303      	movs	r3, #3
 800d632:	e011      	b.n	800d658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d634:	4b0b      	ldr	r3, [pc, #44]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d63a:	4a0a      	ldr	r2, [pc, #40]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d63c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d640:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d644:	e007      	b.n	800d656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d646:	4b07      	ldr	r3, [pc, #28]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d64e:	4a05      	ldr	r2, [pc, #20]	@ (800d664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d650:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d654:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3714      	adds	r7, #20
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr
 800d664:	40007000 	.word	0x40007000
 800d668:	20000078 	.word	0x20000078
 800d66c:	431bde83 	.word	0x431bde83

0800d670 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d670:	b480      	push	{r7}
 800d672:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d674:	4b05      	ldr	r3, [pc, #20]	@ (800d68c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	4a04      	ldr	r2, [pc, #16]	@ (800d68c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d67a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d67e:	6093      	str	r3, [r2, #8]
}
 800d680:	bf00      	nop
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	40007000 	.word	0x40007000

0800d690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b088      	sub	sp, #32
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e2fe      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f003 0301 	and.w	r3, r3, #1
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d075      	beq.n	800d79a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d6ae:	4b97      	ldr	r3, [pc, #604]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	f003 030c 	and.w	r3, r3, #12
 800d6b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d6b8:	4b94      	ldr	r3, [pc, #592]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	f003 0303 	and.w	r3, r3, #3
 800d6c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	2b0c      	cmp	r3, #12
 800d6c6:	d102      	bne.n	800d6ce <HAL_RCC_OscConfig+0x3e>
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	d002      	beq.n	800d6d4 <HAL_RCC_OscConfig+0x44>
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	2b08      	cmp	r3, #8
 800d6d2:	d10b      	bne.n	800d6ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6d4:	4b8d      	ldr	r3, [pc, #564]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d05b      	beq.n	800d798 <HAL_RCC_OscConfig+0x108>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d157      	bne.n	800d798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e2d9      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6f4:	d106      	bne.n	800d704 <HAL_RCC_OscConfig+0x74>
 800d6f6:	4b85      	ldr	r3, [pc, #532]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a84      	ldr	r2, [pc, #528]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d6fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d700:	6013      	str	r3, [r2, #0]
 800d702:	e01d      	b.n	800d740 <HAL_RCC_OscConfig+0xb0>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d70c:	d10c      	bne.n	800d728 <HAL_RCC_OscConfig+0x98>
 800d70e:	4b7f      	ldr	r3, [pc, #508]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a7e      	ldr	r2, [pc, #504]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d718:	6013      	str	r3, [r2, #0]
 800d71a:	4b7c      	ldr	r3, [pc, #496]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a7b      	ldr	r2, [pc, #492]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	e00b      	b.n	800d740 <HAL_RCC_OscConfig+0xb0>
 800d728:	4b78      	ldr	r3, [pc, #480]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a77      	ldr	r2, [pc, #476]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d72e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d732:	6013      	str	r3, [r2, #0]
 800d734:	4b75      	ldr	r3, [pc, #468]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a74      	ldr	r2, [pc, #464]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d73a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d73e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d013      	beq.n	800d770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d748:	f7fc fff8 	bl	800a73c <HAL_GetTick>
 800d74c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d74e:	e008      	b.n	800d762 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d750:	f7fc fff4 	bl	800a73c <HAL_GetTick>
 800d754:	4602      	mov	r2, r0
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	2b64      	cmp	r3, #100	@ 0x64
 800d75c:	d901      	bls.n	800d762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d75e:	2303      	movs	r3, #3
 800d760:	e29e      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d762:	4b6a      	ldr	r3, [pc, #424]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d0f0      	beq.n	800d750 <HAL_RCC_OscConfig+0xc0>
 800d76e:	e014      	b.n	800d79a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d770:	f7fc ffe4 	bl	800a73c <HAL_GetTick>
 800d774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d776:	e008      	b.n	800d78a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d778:	f7fc ffe0 	bl	800a73c <HAL_GetTick>
 800d77c:	4602      	mov	r2, r0
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	2b64      	cmp	r3, #100	@ 0x64
 800d784:	d901      	bls.n	800d78a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d786:	2303      	movs	r3, #3
 800d788:	e28a      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d78a:	4b60      	ldr	r3, [pc, #384]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1f0      	bne.n	800d778 <HAL_RCC_OscConfig+0xe8>
 800d796:	e000      	b.n	800d79a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f003 0302 	and.w	r3, r3, #2
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d075      	beq.n	800d892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d7a6:	4b59      	ldr	r3, [pc, #356]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	f003 030c 	and.w	r3, r3, #12
 800d7ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d7b0:	4b56      	ldr	r3, [pc, #344]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	f003 0303 	and.w	r3, r3, #3
 800d7b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	2b0c      	cmp	r3, #12
 800d7be:	d102      	bne.n	800d7c6 <HAL_RCC_OscConfig+0x136>
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	2b02      	cmp	r3, #2
 800d7c4:	d002      	beq.n	800d7cc <HAL_RCC_OscConfig+0x13c>
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	2b04      	cmp	r3, #4
 800d7ca:	d11f      	bne.n	800d80c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d7cc:	4b4f      	ldr	r3, [pc, #316]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d005      	beq.n	800d7e4 <HAL_RCC_OscConfig+0x154>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e25d      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7e4:	4b49      	ldr	r3, [pc, #292]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	061b      	lsls	r3, r3, #24
 800d7f2:	4946      	ldr	r1, [pc, #280]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d7f8:	4b45      	ldr	r3, [pc, #276]	@ (800d910 <HAL_RCC_OscConfig+0x280>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fc ff51 	bl	800a6a4 <HAL_InitTick>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d043      	beq.n	800d890 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	e249      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d023      	beq.n	800d85c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d814:	4b3d      	ldr	r3, [pc, #244]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a3c      	ldr	r2, [pc, #240]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d81a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d81e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d820:	f7fc ff8c 	bl	800a73c <HAL_GetTick>
 800d824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d826:	e008      	b.n	800d83a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d828:	f7fc ff88 	bl	800a73c <HAL_GetTick>
 800d82c:	4602      	mov	r2, r0
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	2b02      	cmp	r3, #2
 800d834:	d901      	bls.n	800d83a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d836:	2303      	movs	r3, #3
 800d838:	e232      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d83a:	4b34      	ldr	r3, [pc, #208]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d842:	2b00      	cmp	r3, #0
 800d844:	d0f0      	beq.n	800d828 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d846:	4b31      	ldr	r3, [pc, #196]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	061b      	lsls	r3, r3, #24
 800d854:	492d      	ldr	r1, [pc, #180]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d856:	4313      	orrs	r3, r2
 800d858:	604b      	str	r3, [r1, #4]
 800d85a:	e01a      	b.n	800d892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d85c:	4b2b      	ldr	r3, [pc, #172]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a2a      	ldr	r2, [pc, #168]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d862:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d868:	f7fc ff68 	bl	800a73c <HAL_GetTick>
 800d86c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d86e:	e008      	b.n	800d882 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d870:	f7fc ff64 	bl	800a73c <HAL_GetTick>
 800d874:	4602      	mov	r2, r0
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	d901      	bls.n	800d882 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d87e:	2303      	movs	r3, #3
 800d880:	e20e      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d882:	4b22      	ldr	r3, [pc, #136]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d1f0      	bne.n	800d870 <HAL_RCC_OscConfig+0x1e0>
 800d88e:	e000      	b.n	800d892 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d890:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f003 0308 	and.w	r3, r3, #8
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d041      	beq.n	800d922 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	695b      	ldr	r3, [r3, #20]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d01c      	beq.n	800d8e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d8a6:	4b19      	ldr	r3, [pc, #100]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d8a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8ac:	4a17      	ldr	r2, [pc, #92]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d8ae:	f043 0301 	orr.w	r3, r3, #1
 800d8b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8b6:	f7fc ff41 	bl	800a73c <HAL_GetTick>
 800d8ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d8bc:	e008      	b.n	800d8d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8be:	f7fc ff3d 	bl	800a73c <HAL_GetTick>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d901      	bls.n	800d8d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	e1e7      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d8d0:	4b0e      	ldr	r3, [pc, #56]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d8d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8d6:	f003 0302 	and.w	r3, r3, #2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d0ef      	beq.n	800d8be <HAL_RCC_OscConfig+0x22e>
 800d8de:	e020      	b.n	800d922 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d8e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8e6:	4a09      	ldr	r2, [pc, #36]	@ (800d90c <HAL_RCC_OscConfig+0x27c>)
 800d8e8:	f023 0301 	bic.w	r3, r3, #1
 800d8ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8f0:	f7fc ff24 	bl	800a73c <HAL_GetTick>
 800d8f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d8f6:	e00d      	b.n	800d914 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8f8:	f7fc ff20 	bl	800a73c <HAL_GetTick>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	2b02      	cmp	r3, #2
 800d904:	d906      	bls.n	800d914 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d906:	2303      	movs	r3, #3
 800d908:	e1ca      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
 800d90a:	bf00      	nop
 800d90c:	40021000 	.word	0x40021000
 800d910:	2000007c 	.word	0x2000007c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d914:	4b8c      	ldr	r3, [pc, #560]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d91a:	f003 0302 	and.w	r3, r3, #2
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1ea      	bne.n	800d8f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f003 0304 	and.w	r3, r3, #4
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f000 80a6 	beq.w	800da7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d930:	2300      	movs	r3, #0
 800d932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d934:	4b84      	ldr	r3, [pc, #528]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <HAL_RCC_OscConfig+0x2b4>
 800d940:	2301      	movs	r3, #1
 800d942:	e000      	b.n	800d946 <HAL_RCC_OscConfig+0x2b6>
 800d944:	2300      	movs	r3, #0
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00d      	beq.n	800d966 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d94a:	4b7f      	ldr	r3, [pc, #508]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d94c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d94e:	4a7e      	ldr	r2, [pc, #504]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d954:	6593      	str	r3, [r2, #88]	@ 0x58
 800d956:	4b7c      	ldr	r3, [pc, #496]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d95a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d962:	2301      	movs	r3, #1
 800d964:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d966:	4b79      	ldr	r3, [pc, #484]	@ (800db4c <HAL_RCC_OscConfig+0x4bc>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d118      	bne.n	800d9a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d972:	4b76      	ldr	r3, [pc, #472]	@ (800db4c <HAL_RCC_OscConfig+0x4bc>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a75      	ldr	r2, [pc, #468]	@ (800db4c <HAL_RCC_OscConfig+0x4bc>)
 800d978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d97c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d97e:	f7fc fedd 	bl	800a73c <HAL_GetTick>
 800d982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d984:	e008      	b.n	800d998 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d986:	f7fc fed9 	bl	800a73c <HAL_GetTick>
 800d98a:	4602      	mov	r2, r0
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	2b02      	cmp	r3, #2
 800d992:	d901      	bls.n	800d998 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d994:	2303      	movs	r3, #3
 800d996:	e183      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d998:	4b6c      	ldr	r3, [pc, #432]	@ (800db4c <HAL_RCC_OscConfig+0x4bc>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d0f0      	beq.n	800d986 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d108      	bne.n	800d9be <HAL_RCC_OscConfig+0x32e>
 800d9ac:	4b66      	ldr	r3, [pc, #408]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9b2:	4a65      	ldr	r2, [pc, #404]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d9b4:	f043 0301 	orr.w	r3, r3, #1
 800d9b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9bc:	e024      	b.n	800da08 <HAL_RCC_OscConfig+0x378>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	d110      	bne.n	800d9e8 <HAL_RCC_OscConfig+0x358>
 800d9c6:	4b60      	ldr	r3, [pc, #384]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9cc:	4a5e      	ldr	r2, [pc, #376]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d9ce:	f043 0304 	orr.w	r3, r3, #4
 800d9d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9d6:	4b5c      	ldr	r3, [pc, #368]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9dc:	4a5a      	ldr	r2, [pc, #360]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d9de:	f043 0301 	orr.w	r3, r3, #1
 800d9e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9e6:	e00f      	b.n	800da08 <HAL_RCC_OscConfig+0x378>
 800d9e8:	4b57      	ldr	r3, [pc, #348]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9ee:	4a56      	ldr	r2, [pc, #344]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d9f0:	f023 0301 	bic.w	r3, r3, #1
 800d9f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9f8:	4b53      	ldr	r3, [pc, #332]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800d9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9fe:	4a52      	ldr	r2, [pc, #328]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800da00:	f023 0304 	bic.w	r3, r3, #4
 800da04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d016      	beq.n	800da3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da10:	f7fc fe94 	bl	800a73c <HAL_GetTick>
 800da14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da16:	e00a      	b.n	800da2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da18:	f7fc fe90 	bl	800a73c <HAL_GetTick>
 800da1c:	4602      	mov	r2, r0
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da26:	4293      	cmp	r3, r2
 800da28:	d901      	bls.n	800da2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800da2a:	2303      	movs	r3, #3
 800da2c:	e138      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da2e:	4b46      	ldr	r3, [pc, #280]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800da30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da34:	f003 0302 	and.w	r3, r3, #2
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d0ed      	beq.n	800da18 <HAL_RCC_OscConfig+0x388>
 800da3c:	e015      	b.n	800da6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da3e:	f7fc fe7d 	bl	800a73c <HAL_GetTick>
 800da42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da44:	e00a      	b.n	800da5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da46:	f7fc fe79 	bl	800a73c <HAL_GetTick>
 800da4a:	4602      	mov	r2, r0
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da54:	4293      	cmp	r3, r2
 800da56:	d901      	bls.n	800da5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800da58:	2303      	movs	r3, #3
 800da5a:	e121      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da5c:	4b3a      	ldr	r3, [pc, #232]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800da5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da62:	f003 0302 	and.w	r3, r3, #2
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1ed      	bne.n	800da46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800da6a:	7ffb      	ldrb	r3, [r7, #31]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d105      	bne.n	800da7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da70:	4b35      	ldr	r3, [pc, #212]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800da72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da74:	4a34      	ldr	r2, [pc, #208]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800da76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f003 0320 	and.w	r3, r3, #32
 800da84:	2b00      	cmp	r3, #0
 800da86:	d03c      	beq.n	800db02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	699b      	ldr	r3, [r3, #24]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d01c      	beq.n	800daca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800da90:	4b2d      	ldr	r3, [pc, #180]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800da92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da96:	4a2c      	ldr	r2, [pc, #176]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800da98:	f043 0301 	orr.w	r3, r3, #1
 800da9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daa0:	f7fc fe4c 	bl	800a73c <HAL_GetTick>
 800daa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800daa6:	e008      	b.n	800daba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800daa8:	f7fc fe48 	bl	800a73c <HAL_GetTick>
 800daac:	4602      	mov	r2, r0
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	d901      	bls.n	800daba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800dab6:	2303      	movs	r3, #3
 800dab8:	e0f2      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800daba:	4b23      	ldr	r3, [pc, #140]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800dabc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dac0:	f003 0302 	and.w	r3, r3, #2
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d0ef      	beq.n	800daa8 <HAL_RCC_OscConfig+0x418>
 800dac8:	e01b      	b.n	800db02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800daca:	4b1f      	ldr	r3, [pc, #124]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800dacc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dad0:	4a1d      	ldr	r2, [pc, #116]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800dad2:	f023 0301 	bic.w	r3, r3, #1
 800dad6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dada:	f7fc fe2f 	bl	800a73c <HAL_GetTick>
 800dade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dae0:	e008      	b.n	800daf4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dae2:	f7fc fe2b 	bl	800a73c <HAL_GetTick>
 800dae6:	4602      	mov	r2, r0
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	2b02      	cmp	r3, #2
 800daee:	d901      	bls.n	800daf4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e0d5      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800daf4:	4b14      	ldr	r3, [pc, #80]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800daf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dafa:	f003 0302 	and.w	r3, r3, #2
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1ef      	bne.n	800dae2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	69db      	ldr	r3, [r3, #28]
 800db06:	2b00      	cmp	r3, #0
 800db08:	f000 80c9 	beq.w	800dc9e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800db0c:	4b0e      	ldr	r3, [pc, #56]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	f003 030c 	and.w	r3, r3, #12
 800db14:	2b0c      	cmp	r3, #12
 800db16:	f000 8083 	beq.w	800dc20 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	69db      	ldr	r3, [r3, #28]
 800db1e:	2b02      	cmp	r3, #2
 800db20:	d15e      	bne.n	800dbe0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db22:	4b09      	ldr	r3, [pc, #36]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a08      	ldr	r2, [pc, #32]	@ (800db48 <HAL_RCC_OscConfig+0x4b8>)
 800db28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db2e:	f7fc fe05 	bl	800a73c <HAL_GetTick>
 800db32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db34:	e00c      	b.n	800db50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db36:	f7fc fe01 	bl	800a73c <HAL_GetTick>
 800db3a:	4602      	mov	r2, r0
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	1ad3      	subs	r3, r2, r3
 800db40:	2b02      	cmp	r3, #2
 800db42:	d905      	bls.n	800db50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800db44:	2303      	movs	r3, #3
 800db46:	e0ab      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
 800db48:	40021000 	.word	0x40021000
 800db4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db50:	4b55      	ldr	r3, [pc, #340]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1ec      	bne.n	800db36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db5c:	4b52      	ldr	r3, [pc, #328]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800db5e:	68da      	ldr	r2, [r3, #12]
 800db60:	4b52      	ldr	r3, [pc, #328]	@ (800dcac <HAL_RCC_OscConfig+0x61c>)
 800db62:	4013      	ands	r3, r2
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	6a11      	ldr	r1, [r2, #32]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800db6c:	3a01      	subs	r2, #1
 800db6e:	0112      	lsls	r2, r2, #4
 800db70:	4311      	orrs	r1, r2
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800db76:	0212      	lsls	r2, r2, #8
 800db78:	4311      	orrs	r1, r2
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800db7e:	0852      	lsrs	r2, r2, #1
 800db80:	3a01      	subs	r2, #1
 800db82:	0552      	lsls	r2, r2, #21
 800db84:	4311      	orrs	r1, r2
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800db8a:	0852      	lsrs	r2, r2, #1
 800db8c:	3a01      	subs	r2, #1
 800db8e:	0652      	lsls	r2, r2, #25
 800db90:	4311      	orrs	r1, r2
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800db96:	06d2      	lsls	r2, r2, #27
 800db98:	430a      	orrs	r2, r1
 800db9a:	4943      	ldr	r1, [pc, #268]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800db9c:	4313      	orrs	r3, r2
 800db9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dba0:	4b41      	ldr	r3, [pc, #260]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a40      	ldr	r2, [pc, #256]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbaa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800dbac:	4b3e      	ldr	r3, [pc, #248]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	4a3d      	ldr	r2, [pc, #244]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dbb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbb8:	f7fc fdc0 	bl	800a73c <HAL_GetTick>
 800dbbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dbbe:	e008      	b.n	800dbd2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbc0:	f7fc fdbc 	bl	800a73c <HAL_GetTick>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d901      	bls.n	800dbd2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800dbce:	2303      	movs	r3, #3
 800dbd0:	e066      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dbd2:	4b35      	ldr	r3, [pc, #212]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0f0      	beq.n	800dbc0 <HAL_RCC_OscConfig+0x530>
 800dbde:	e05e      	b.n	800dc9e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbe0:	4b31      	ldr	r3, [pc, #196]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4a30      	ldr	r2, [pc, #192]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dbe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dbea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbec:	f7fc fda6 	bl	800a73c <HAL_GetTick>
 800dbf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dbf2:	e008      	b.n	800dc06 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbf4:	f7fc fda2 	bl	800a73c <HAL_GetTick>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	d901      	bls.n	800dc06 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800dc02:	2303      	movs	r3, #3
 800dc04:	e04c      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dc06:	4b28      	ldr	r3, [pc, #160]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1f0      	bne.n	800dbf4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800dc12:	4b25      	ldr	r3, [pc, #148]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dc14:	68da      	ldr	r2, [r3, #12]
 800dc16:	4924      	ldr	r1, [pc, #144]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dc18:	4b25      	ldr	r3, [pc, #148]	@ (800dcb0 <HAL_RCC_OscConfig+0x620>)
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	60cb      	str	r3, [r1, #12]
 800dc1e:	e03e      	b.n	800dc9e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	69db      	ldr	r3, [r3, #28]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d101      	bne.n	800dc2c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	e039      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800dc2c:	4b1e      	ldr	r3, [pc, #120]	@ (800dca8 <HAL_RCC_OscConfig+0x618>)
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f003 0203 	and.w	r2, r3, #3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a1b      	ldr	r3, [r3, #32]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d12c      	bne.n	800dc9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d123      	bne.n	800dc9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d11b      	bne.n	800dc9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d113      	bne.n	800dc9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc7c:	085b      	lsrs	r3, r3, #1
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d109      	bne.n	800dc9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc90:	085b      	lsrs	r3, r3, #1
 800dc92:	3b01      	subs	r3, #1
 800dc94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d001      	beq.n	800dc9e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e000      	b.n	800dca0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3720      	adds	r7, #32
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	40021000 	.word	0x40021000
 800dcac:	019f800c 	.word	0x019f800c
 800dcb0:	feeefffc 	.word	0xfeeefffc

0800dcb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d101      	bne.n	800dccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e11e      	b.n	800df0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dccc:	4b91      	ldr	r3, [pc, #580]	@ (800df14 <HAL_RCC_ClockConfig+0x260>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 030f 	and.w	r3, r3, #15
 800dcd4:	683a      	ldr	r2, [r7, #0]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d910      	bls.n	800dcfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcda:	4b8e      	ldr	r3, [pc, #568]	@ (800df14 <HAL_RCC_ClockConfig+0x260>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f023 020f 	bic.w	r2, r3, #15
 800dce2:	498c      	ldr	r1, [pc, #560]	@ (800df14 <HAL_RCC_ClockConfig+0x260>)
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcea:	4b8a      	ldr	r3, [pc, #552]	@ (800df14 <HAL_RCC_ClockConfig+0x260>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f003 030f 	and.w	r3, r3, #15
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d001      	beq.n	800dcfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e106      	b.n	800df0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f003 0301 	and.w	r3, r3, #1
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d073      	beq.n	800ddf0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	2b03      	cmp	r3, #3
 800dd0e:	d129      	bne.n	800dd64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dd10:	4b81      	ldr	r3, [pc, #516]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d101      	bne.n	800dd20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e0f4      	b.n	800df0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800dd20:	f000 f99e 	bl	800e060 <RCC_GetSysClockFreqFromPLLSource>
 800dd24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	4a7c      	ldr	r2, [pc, #496]	@ (800df1c <HAL_RCC_ClockConfig+0x268>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d93f      	bls.n	800ddae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dd2e:	4b7a      	ldr	r3, [pc, #488]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d009      	beq.n	800dd4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d033      	beq.n	800ddae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d12f      	bne.n	800ddae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dd4e:	4b72      	ldr	r3, [pc, #456]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd56:	4a70      	ldr	r2, [pc, #448]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dd58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800dd5e:	2380      	movs	r3, #128	@ 0x80
 800dd60:	617b      	str	r3, [r7, #20]
 800dd62:	e024      	b.n	800ddae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	2b02      	cmp	r3, #2
 800dd6a:	d107      	bne.n	800dd7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dd6c:	4b6a      	ldr	r3, [pc, #424]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d109      	bne.n	800dd8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e0c6      	b.n	800df0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dd7c:	4b66      	ldr	r3, [pc, #408]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d101      	bne.n	800dd8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e0be      	b.n	800df0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800dd8c:	f000 f8ce 	bl	800df2c <HAL_RCC_GetSysClockFreq>
 800dd90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	4a61      	ldr	r2, [pc, #388]	@ (800df1c <HAL_RCC_ClockConfig+0x268>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d909      	bls.n	800ddae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dd9a:	4b5f      	ldr	r3, [pc, #380]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dda2:	4a5d      	ldr	r2, [pc, #372]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dda4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dda8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ddaa:	2380      	movs	r3, #128	@ 0x80
 800ddac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ddae:	4b5a      	ldr	r3, [pc, #360]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	f023 0203 	bic.w	r2, r3, #3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	4957      	ldr	r1, [pc, #348]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddc0:	f7fc fcbc 	bl	800a73c <HAL_GetTick>
 800ddc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddc6:	e00a      	b.n	800ddde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ddc8:	f7fc fcb8 	bl	800a73c <HAL_GetTick>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d901      	bls.n	800ddde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ddda:	2303      	movs	r3, #3
 800dddc:	e095      	b.n	800df0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddde:	4b4e      	ldr	r3, [pc, #312]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	f003 020c 	and.w	r2, r3, #12
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d1eb      	bne.n	800ddc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f003 0302 	and.w	r3, r3, #2
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d023      	beq.n	800de44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f003 0304 	and.w	r3, r3, #4
 800de04:	2b00      	cmp	r3, #0
 800de06:	d005      	beq.n	800de14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800de08:	4b43      	ldr	r3, [pc, #268]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	4a42      	ldr	r2, [pc, #264]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800de0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800de12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d007      	beq.n	800de30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800de20:	4b3d      	ldr	r3, [pc, #244]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800de28:	4a3b      	ldr	r2, [pc, #236]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800de2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800de2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de30:	4b39      	ldr	r3, [pc, #228]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	4936      	ldr	r1, [pc, #216]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800de3e:	4313      	orrs	r3, r2
 800de40:	608b      	str	r3, [r1, #8]
 800de42:	e008      	b.n	800de56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	2b80      	cmp	r3, #128	@ 0x80
 800de48:	d105      	bne.n	800de56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800de4a:	4b33      	ldr	r3, [pc, #204]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	4a32      	ldr	r2, [pc, #200]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800de50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800de56:	4b2f      	ldr	r3, [pc, #188]	@ (800df14 <HAL_RCC_ClockConfig+0x260>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f003 030f 	and.w	r3, r3, #15
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d21d      	bcs.n	800dea0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de64:	4b2b      	ldr	r3, [pc, #172]	@ (800df14 <HAL_RCC_ClockConfig+0x260>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f023 020f 	bic.w	r2, r3, #15
 800de6c:	4929      	ldr	r1, [pc, #164]	@ (800df14 <HAL_RCC_ClockConfig+0x260>)
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	4313      	orrs	r3, r2
 800de72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800de74:	f7fc fc62 	bl	800a73c <HAL_GetTick>
 800de78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de7a:	e00a      	b.n	800de92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de7c:	f7fc fc5e 	bl	800a73c <HAL_GetTick>
 800de80:	4602      	mov	r2, r0
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d901      	bls.n	800de92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800de8e:	2303      	movs	r3, #3
 800de90:	e03b      	b.n	800df0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de92:	4b20      	ldr	r3, [pc, #128]	@ (800df14 <HAL_RCC_ClockConfig+0x260>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f003 030f 	and.w	r3, r3, #15
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d1ed      	bne.n	800de7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 0304 	and.w	r3, r3, #4
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d008      	beq.n	800debe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800deac:	4b1a      	ldr	r3, [pc, #104]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	4917      	ldr	r1, [pc, #92]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800deba:	4313      	orrs	r3, r2
 800debc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 0308 	and.w	r3, r3, #8
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d009      	beq.n	800dede <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800deca:	4b13      	ldr	r3, [pc, #76]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	00db      	lsls	r3, r3, #3
 800ded8:	490f      	ldr	r1, [pc, #60]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800deda:	4313      	orrs	r3, r2
 800dedc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800dede:	f000 f825 	bl	800df2c <HAL_RCC_GetSysClockFreq>
 800dee2:	4602      	mov	r2, r0
 800dee4:	4b0c      	ldr	r3, [pc, #48]	@ (800df18 <HAL_RCC_ClockConfig+0x264>)
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	091b      	lsrs	r3, r3, #4
 800deea:	f003 030f 	and.w	r3, r3, #15
 800deee:	490c      	ldr	r1, [pc, #48]	@ (800df20 <HAL_RCC_ClockConfig+0x26c>)
 800def0:	5ccb      	ldrb	r3, [r1, r3]
 800def2:	f003 031f 	and.w	r3, r3, #31
 800def6:	fa22 f303 	lsr.w	r3, r2, r3
 800defa:	4a0a      	ldr	r2, [pc, #40]	@ (800df24 <HAL_RCC_ClockConfig+0x270>)
 800defc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800defe:	4b0a      	ldr	r3, [pc, #40]	@ (800df28 <HAL_RCC_ClockConfig+0x274>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4618      	mov	r0, r3
 800df04:	f7fc fbce 	bl	800a6a4 <HAL_InitTick>
 800df08:	4603      	mov	r3, r0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3718      	adds	r7, #24
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	40022000 	.word	0x40022000
 800df18:	40021000 	.word	0x40021000
 800df1c:	04c4b400 	.word	0x04c4b400
 800df20:	08018b00 	.word	0x08018b00
 800df24:	20000078 	.word	0x20000078
 800df28:	2000007c 	.word	0x2000007c

0800df2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b087      	sub	sp, #28
 800df30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800df32:	4b2c      	ldr	r3, [pc, #176]	@ (800dfe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	f003 030c 	and.w	r3, r3, #12
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d102      	bne.n	800df44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800df3e:	4b2a      	ldr	r3, [pc, #168]	@ (800dfe8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df40:	613b      	str	r3, [r7, #16]
 800df42:	e047      	b.n	800dfd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800df44:	4b27      	ldr	r3, [pc, #156]	@ (800dfe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f003 030c 	and.w	r3, r3, #12
 800df4c:	2b08      	cmp	r3, #8
 800df4e:	d102      	bne.n	800df56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800df50:	4b26      	ldr	r3, [pc, #152]	@ (800dfec <HAL_RCC_GetSysClockFreq+0xc0>)
 800df52:	613b      	str	r3, [r7, #16]
 800df54:	e03e      	b.n	800dfd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800df56:	4b23      	ldr	r3, [pc, #140]	@ (800dfe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df58:	689b      	ldr	r3, [r3, #8]
 800df5a:	f003 030c 	and.w	r3, r3, #12
 800df5e:	2b0c      	cmp	r3, #12
 800df60:	d136      	bne.n	800dfd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800df62:	4b20      	ldr	r3, [pc, #128]	@ (800dfe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	f003 0303 	and.w	r3, r3, #3
 800df6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800df6c:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	091b      	lsrs	r3, r3, #4
 800df72:	f003 030f 	and.w	r3, r3, #15
 800df76:	3301      	adds	r3, #1
 800df78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2b03      	cmp	r3, #3
 800df7e:	d10c      	bne.n	800df9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800df80:	4a1a      	ldr	r2, [pc, #104]	@ (800dfec <HAL_RCC_GetSysClockFreq+0xc0>)
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	fbb2 f3f3 	udiv	r3, r2, r3
 800df88:	4a16      	ldr	r2, [pc, #88]	@ (800dfe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df8a:	68d2      	ldr	r2, [r2, #12]
 800df8c:	0a12      	lsrs	r2, r2, #8
 800df8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800df92:	fb02 f303 	mul.w	r3, r2, r3
 800df96:	617b      	str	r3, [r7, #20]
      break;
 800df98:	e00c      	b.n	800dfb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800df9a:	4a13      	ldr	r2, [pc, #76]	@ (800dfe8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa2:	4a10      	ldr	r2, [pc, #64]	@ (800dfe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dfa4:	68d2      	ldr	r2, [r2, #12]
 800dfa6:	0a12      	lsrs	r2, r2, #8
 800dfa8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dfac:	fb02 f303 	mul.w	r3, r2, r3
 800dfb0:	617b      	str	r3, [r7, #20]
      break;
 800dfb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800dfb4:	4b0b      	ldr	r3, [pc, #44]	@ (800dfe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	0e5b      	lsrs	r3, r3, #25
 800dfba:	f003 0303 	and.w	r3, r3, #3
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800dfc4:	697a      	ldr	r2, [r7, #20]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfcc:	613b      	str	r3, [r7, #16]
 800dfce:	e001      	b.n	800dfd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800dfd4:	693b      	ldr	r3, [r7, #16]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	371c      	adds	r7, #28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	40021000 	.word	0x40021000
 800dfe8:	00f42400 	.word	0x00f42400
 800dfec:	007a1200 	.word	0x007a1200

0800dff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dff0:	b480      	push	{r7}
 800dff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dff4:	4b03      	ldr	r3, [pc, #12]	@ (800e004 <HAL_RCC_GetHCLKFreq+0x14>)
 800dff6:	681b      	ldr	r3, [r3, #0]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	20000078 	.word	0x20000078

0800e008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e00c:	f7ff fff0 	bl	800dff0 <HAL_RCC_GetHCLKFreq>
 800e010:	4602      	mov	r2, r0
 800e012:	4b06      	ldr	r3, [pc, #24]	@ (800e02c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	0a1b      	lsrs	r3, r3, #8
 800e018:	f003 0307 	and.w	r3, r3, #7
 800e01c:	4904      	ldr	r1, [pc, #16]	@ (800e030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e01e:	5ccb      	ldrb	r3, [r1, r3]
 800e020:	f003 031f 	and.w	r3, r3, #31
 800e024:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e028:	4618      	mov	r0, r3
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	40021000 	.word	0x40021000
 800e030:	08018b10 	.word	0x08018b10

0800e034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e038:	f7ff ffda 	bl	800dff0 <HAL_RCC_GetHCLKFreq>
 800e03c:	4602      	mov	r2, r0
 800e03e:	4b06      	ldr	r3, [pc, #24]	@ (800e058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	0adb      	lsrs	r3, r3, #11
 800e044:	f003 0307 	and.w	r3, r3, #7
 800e048:	4904      	ldr	r1, [pc, #16]	@ (800e05c <HAL_RCC_GetPCLK2Freq+0x28>)
 800e04a:	5ccb      	ldrb	r3, [r1, r3]
 800e04c:	f003 031f 	and.w	r3, r3, #31
 800e050:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e054:	4618      	mov	r0, r3
 800e056:	bd80      	pop	{r7, pc}
 800e058:	40021000 	.word	0x40021000
 800e05c:	08018b10 	.word	0x08018b10

0800e060 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e060:	b480      	push	{r7}
 800e062:	b087      	sub	sp, #28
 800e064:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e066:	4b1e      	ldr	r3, [pc, #120]	@ (800e0e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	f003 0303 	and.w	r3, r3, #3
 800e06e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e070:	4b1b      	ldr	r3, [pc, #108]	@ (800e0e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	091b      	lsrs	r3, r3, #4
 800e076:	f003 030f 	and.w	r3, r3, #15
 800e07a:	3301      	adds	r3, #1
 800e07c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	2b03      	cmp	r3, #3
 800e082:	d10c      	bne.n	800e09e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e084:	4a17      	ldr	r2, [pc, #92]	@ (800e0e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	fbb2 f3f3 	udiv	r3, r2, r3
 800e08c:	4a14      	ldr	r2, [pc, #80]	@ (800e0e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e08e:	68d2      	ldr	r2, [r2, #12]
 800e090:	0a12      	lsrs	r2, r2, #8
 800e092:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e096:	fb02 f303 	mul.w	r3, r2, r3
 800e09a:	617b      	str	r3, [r7, #20]
    break;
 800e09c:	e00c      	b.n	800e0b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e09e:	4a12      	ldr	r2, [pc, #72]	@ (800e0e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0a6:	4a0e      	ldr	r2, [pc, #56]	@ (800e0e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e0a8:	68d2      	ldr	r2, [r2, #12]
 800e0aa:	0a12      	lsrs	r2, r2, #8
 800e0ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e0b0:	fb02 f303 	mul.w	r3, r2, r3
 800e0b4:	617b      	str	r3, [r7, #20]
    break;
 800e0b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e0b8:	4b09      	ldr	r3, [pc, #36]	@ (800e0e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	0e5b      	lsrs	r3, r3, #25
 800e0be:	f003 0303 	and.w	r3, r3, #3
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	005b      	lsls	r3, r3, #1
 800e0c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e0d2:	687b      	ldr	r3, [r7, #4]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	371c      	adds	r7, #28
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	40021000 	.word	0x40021000
 800e0e4:	007a1200 	.word	0x007a1200
 800e0e8:	00f42400 	.word	0x00f42400

0800e0ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 8098 	beq.w	800e23a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e10a:	2300      	movs	r3, #0
 800e10c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e10e:	4b43      	ldr	r3, [pc, #268]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e116:	2b00      	cmp	r3, #0
 800e118:	d10d      	bne.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e11a:	4b40      	ldr	r3, [pc, #256]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e11c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e11e:	4a3f      	ldr	r2, [pc, #252]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e124:	6593      	str	r3, [r2, #88]	@ 0x58
 800e126:	4b3d      	ldr	r3, [pc, #244]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e12a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e12e:	60bb      	str	r3, [r7, #8]
 800e130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e132:	2301      	movs	r3, #1
 800e134:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e136:	4b3a      	ldr	r3, [pc, #232]	@ (800e220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a39      	ldr	r2, [pc, #228]	@ (800e220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e13c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e142:	f7fc fafb 	bl	800a73c <HAL_GetTick>
 800e146:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e148:	e009      	b.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e14a:	f7fc faf7 	bl	800a73c <HAL_GetTick>
 800e14e:	4602      	mov	r2, r0
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	1ad3      	subs	r3, r2, r3
 800e154:	2b02      	cmp	r3, #2
 800e156:	d902      	bls.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e158:	2303      	movs	r3, #3
 800e15a:	74fb      	strb	r3, [r7, #19]
        break;
 800e15c:	e005      	b.n	800e16a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e15e:	4b30      	ldr	r3, [pc, #192]	@ (800e220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e166:	2b00      	cmp	r3, #0
 800e168:	d0ef      	beq.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e16a:	7cfb      	ldrb	r3, [r7, #19]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d159      	bne.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e170:	4b2a      	ldr	r3, [pc, #168]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e17a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d01e      	beq.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e186:	697a      	ldr	r2, [r7, #20]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d019      	beq.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e18c:	4b23      	ldr	r3, [pc, #140]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e198:	4b20      	ldr	r3, [pc, #128]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e19e:	4a1f      	ldr	r2, [pc, #124]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e1a8:	4b1c      	ldr	r3, [pc, #112]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1ae:	4a1b      	ldr	r2, [pc, #108]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e1b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e1b8:	4a18      	ldr	r2, [pc, #96]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f003 0301 	and.w	r3, r3, #1
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d016      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1ca:	f7fc fab7 	bl	800a73c <HAL_GetTick>
 800e1ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1d0:	e00b      	b.n	800e1ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1d2:	f7fc fab3 	bl	800a73c <HAL_GetTick>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d902      	bls.n	800e1ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	74fb      	strb	r3, [r7, #19]
            break;
 800e1e8:	e006      	b.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1f0:	f003 0302 	and.w	r3, r3, #2
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d0ec      	beq.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e1f8:	7cfb      	ldrb	r3, [r7, #19]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10b      	bne.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e1fe:	4b07      	ldr	r3, [pc, #28]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e20c:	4903      	ldr	r1, [pc, #12]	@ (800e21c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e20e:	4313      	orrs	r3, r2
 800e210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800e214:	e008      	b.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e216:	7cfb      	ldrb	r3, [r7, #19]
 800e218:	74bb      	strb	r3, [r7, #18]
 800e21a:	e005      	b.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e21c:	40021000 	.word	0x40021000
 800e220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e224:	7cfb      	ldrb	r3, [r7, #19]
 800e226:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e228:	7c7b      	ldrb	r3, [r7, #17]
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	d105      	bne.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e22e:	4ba7      	ldr	r3, [pc, #668]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e232:	4aa6      	ldr	r2, [pc, #664]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e238:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f003 0301 	and.w	r3, r3, #1
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00a      	beq.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e246:	4ba1      	ldr	r3, [pc, #644]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e24c:	f023 0203 	bic.w	r2, r3, #3
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	499d      	ldr	r1, [pc, #628]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e256:	4313      	orrs	r3, r2
 800e258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f003 0302 	and.w	r3, r3, #2
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00a      	beq.n	800e27e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e268:	4b98      	ldr	r3, [pc, #608]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e26e:	f023 020c 	bic.w	r2, r3, #12
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	4995      	ldr	r1, [pc, #596]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e278:	4313      	orrs	r3, r2
 800e27a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f003 0304 	and.w	r3, r3, #4
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00a      	beq.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e28a:	4b90      	ldr	r3, [pc, #576]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e290:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	68db      	ldr	r3, [r3, #12]
 800e298:	498c      	ldr	r1, [pc, #560]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e29a:	4313      	orrs	r3, r2
 800e29c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f003 0308 	and.w	r3, r3, #8
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00a      	beq.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e2ac:	4b87      	ldr	r3, [pc, #540]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	691b      	ldr	r3, [r3, #16]
 800e2ba:	4984      	ldr	r1, [pc, #528]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f003 0310 	and.w	r3, r3, #16
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e2ce:	4b7f      	ldr	r3, [pc, #508]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	695b      	ldr	r3, [r3, #20]
 800e2dc:	497b      	ldr	r1, [pc, #492]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f003 0320 	and.w	r3, r3, #32
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00a      	beq.n	800e306 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e2f0:	4b76      	ldr	r3, [pc, #472]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	699b      	ldr	r3, [r3, #24]
 800e2fe:	4973      	ldr	r1, [pc, #460]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e300:	4313      	orrs	r3, r2
 800e302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00a      	beq.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e312:	4b6e      	ldr	r3, [pc, #440]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e318:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	69db      	ldr	r3, [r3, #28]
 800e320:	496a      	ldr	r1, [pc, #424]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e322:	4313      	orrs	r3, r2
 800e324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00a      	beq.n	800e34a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e334:	4b65      	ldr	r3, [pc, #404]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e33a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	4962      	ldr	r1, [pc, #392]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e344:	4313      	orrs	r3, r2
 800e346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00a      	beq.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e356:	4b5d      	ldr	r3, [pc, #372]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e35c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e364:	4959      	ldr	r1, [pc, #356]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e366:	4313      	orrs	r3, r2
 800e368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00a      	beq.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e378:	4b54      	ldr	r3, [pc, #336]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e37a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e37e:	f023 0203 	bic.w	r2, r3, #3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e386:	4951      	ldr	r1, [pc, #324]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e388:	4313      	orrs	r3, r2
 800e38a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00a      	beq.n	800e3b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e39a:	4b4c      	ldr	r3, [pc, #304]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3a8:	4948      	ldr	r1, [pc, #288]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d015      	beq.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e3bc:	4b43      	ldr	r3, [pc, #268]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3ca:	4940      	ldr	r1, [pc, #256]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e3da:	d105      	bne.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e3dc:	4b3b      	ldr	r3, [pc, #236]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	4a3a      	ldr	r2, [pc, #232]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d015      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e3f4:	4b35      	ldr	r3, [pc, #212]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e402:	4932      	ldr	r1, [pc, #200]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e404:	4313      	orrs	r3, r2
 800e406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e40e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e412:	d105      	bne.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e414:	4b2d      	ldr	r3, [pc, #180]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	4a2c      	ldr	r2, [pc, #176]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e41a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e41e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d015      	beq.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e42c:	4b27      	ldr	r3, [pc, #156]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e432:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e43a:	4924      	ldr	r1, [pc, #144]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e43c:	4313      	orrs	r3, r2
 800e43e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e446:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e44a:	d105      	bne.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e44c:	4b1f      	ldr	r3, [pc, #124]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	4a1e      	ldr	r2, [pc, #120]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e456:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d015      	beq.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e464:	4b19      	ldr	r3, [pc, #100]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e46a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e472:	4916      	ldr	r1, [pc, #88]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e474:	4313      	orrs	r3, r2
 800e476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e47e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e482:	d105      	bne.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e484:	4b11      	ldr	r3, [pc, #68]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	4a10      	ldr	r2, [pc, #64]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e48a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e48e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d019      	beq.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e49c:	4b0b      	ldr	r3, [pc, #44]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4aa:	4908      	ldr	r1, [pc, #32]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e4ba:	d109      	bne.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e4bc:	4b03      	ldr	r3, [pc, #12]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	4a02      	ldr	r2, [pc, #8]	@ (800e4cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4c6:	60d3      	str	r3, [r2, #12]
 800e4c8:	e002      	b.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e4ca:	bf00      	nop
 800e4cc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d015      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e4dc:	4b29      	ldr	r3, [pc, #164]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4ea:	4926      	ldr	r1, [pc, #152]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4fa:	d105      	bne.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e4fc:	4b21      	ldr	r3, [pc, #132]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	4a20      	ldr	r2, [pc, #128]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e506:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e510:	2b00      	cmp	r3, #0
 800e512:	d015      	beq.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e514:	4b1b      	ldr	r3, [pc, #108]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e51a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e522:	4918      	ldr	r1, [pc, #96]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e524:	4313      	orrs	r3, r2
 800e526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e52e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e532:	d105      	bne.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e534:	4b13      	ldr	r3, [pc, #76]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	4a12      	ldr	r2, [pc, #72]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e53a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e53e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d015      	beq.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e54c:	4b0d      	ldr	r3, [pc, #52]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e54e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e552:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e55a:	490a      	ldr	r1, [pc, #40]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e55c:	4313      	orrs	r3, r2
 800e55e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e566:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e56a:	d105      	bne.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e56c:	4b05      	ldr	r3, [pc, #20]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	4a04      	ldr	r2, [pc, #16]	@ (800e584 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e576:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e578:	7cbb      	ldrb	r3, [r7, #18]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	40021000 	.word	0x40021000

0800e588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d101      	bne.n	800e59a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	e09d      	b.n	800e6d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d108      	bne.n	800e5b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e5aa:	d009      	beq.n	800e5c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	61da      	str	r2, [r3, #28]
 800e5b2:	e005      	b.n	800e5c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d106      	bne.n	800e5e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7fb f84c 	bl	8009678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2202      	movs	r2, #2
 800e5e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e5f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e600:	d902      	bls.n	800e608 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e602:	2300      	movs	r3, #0
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	e002      	b.n	800e60e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e60c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e616:	d007      	beq.n	800e628 <HAL_SPI_Init+0xa0>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e620:	d002      	beq.n	800e628 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2200      	movs	r2, #0
 800e626:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	689b      	ldr	r3, [r3, #8]
 800e634:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e638:	431a      	orrs	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	691b      	ldr	r3, [r3, #16]
 800e63e:	f003 0302 	and.w	r3, r3, #2
 800e642:	431a      	orrs	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	695b      	ldr	r3, [r3, #20]
 800e648:	f003 0301 	and.w	r3, r3, #1
 800e64c:	431a      	orrs	r2, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	699b      	ldr	r3, [r3, #24]
 800e652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e656:	431a      	orrs	r2, r3
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	69db      	ldr	r3, [r3, #28]
 800e65c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e660:	431a      	orrs	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e66a:	ea42 0103 	orr.w	r1, r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e672:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	430a      	orrs	r2, r1
 800e67c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	0c1b      	lsrs	r3, r3, #16
 800e684:	f003 0204 	and.w	r2, r3, #4
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e68c:	f003 0310 	and.w	r3, r3, #16
 800e690:	431a      	orrs	r2, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e696:	f003 0308 	and.w	r3, r3, #8
 800e69a:	431a      	orrs	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e6a4:	ea42 0103 	orr.w	r1, r2, r3
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	430a      	orrs	r2, r1
 800e6b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	69da      	ldr	r2, [r3, #28]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e6c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b088      	sub	sp, #32
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	60f8      	str	r0, [r7, #12]
 800e6e6:	60b9      	str	r1, [r7, #8]
 800e6e8:	603b      	str	r3, [r7, #0]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d101      	bne.n	800e700 <HAL_SPI_Transmit+0x22>
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	e15f      	b.n	800e9c0 <HAL_SPI_Transmit+0x2e2>
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2201      	movs	r2, #1
 800e704:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e708:	f7fc f818 	bl	800a73c <HAL_GetTick>
 800e70c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e70e:	88fb      	ldrh	r3, [r7, #6]
 800e710:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d002      	beq.n	800e724 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e71e:	2302      	movs	r3, #2
 800e720:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e722:	e148      	b.n	800e9b6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d002      	beq.n	800e730 <HAL_SPI_Transmit+0x52>
 800e72a:	88fb      	ldrh	r3, [r7, #6]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d102      	bne.n	800e736 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e730:	2301      	movs	r3, #1
 800e732:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e734:	e13f      	b.n	800e9b6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2203      	movs	r2, #3
 800e73a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2200      	movs	r2, #0
 800e742:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	88fa      	ldrh	r2, [r7, #6]
 800e74e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	88fa      	ldrh	r2, [r7, #6]
 800e754:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2200      	movs	r2, #0
 800e75a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2200      	movs	r2, #0
 800e760:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e780:	d10f      	bne.n	800e7a2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e790:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7ac:	2b40      	cmp	r3, #64	@ 0x40
 800e7ae:	d007      	beq.n	800e7c0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e7be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e7c8:	d94f      	bls.n	800e86a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d002      	beq.n	800e7d8 <HAL_SPI_Transmit+0xfa>
 800e7d2:	8afb      	ldrh	r3, [r7, #22]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d142      	bne.n	800e85e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7dc:	881a      	ldrh	r2, [r3, #0]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7e8:	1c9a      	adds	r2, r3, #2
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e7fc:	e02f      	b.n	800e85e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	f003 0302 	and.w	r3, r3, #2
 800e808:	2b02      	cmp	r3, #2
 800e80a:	d112      	bne.n	800e832 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e810:	881a      	ldrh	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e81c:	1c9a      	adds	r2, r3, #2
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e826:	b29b      	uxth	r3, r3
 800e828:	3b01      	subs	r3, #1
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e830:	e015      	b.n	800e85e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e832:	f7fb ff83 	bl	800a73c <HAL_GetTick>
 800e836:	4602      	mov	r2, r0
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	683a      	ldr	r2, [r7, #0]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d803      	bhi.n	800e84a <HAL_SPI_Transmit+0x16c>
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e848:	d102      	bne.n	800e850 <HAL_SPI_Transmit+0x172>
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d106      	bne.n	800e85e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800e850:	2303      	movs	r3, #3
 800e852:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2201      	movs	r2, #1
 800e858:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800e85c:	e0ab      	b.n	800e9b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e862:	b29b      	uxth	r3, r3
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1ca      	bne.n	800e7fe <HAL_SPI_Transmit+0x120>
 800e868:	e080      	b.n	800e96c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d002      	beq.n	800e878 <HAL_SPI_Transmit+0x19a>
 800e872:	8afb      	ldrh	r3, [r7, #22]
 800e874:	2b01      	cmp	r3, #1
 800e876:	d174      	bne.n	800e962 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d912      	bls.n	800e8a8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e886:	881a      	ldrh	r2, [r3, #0]
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e892:	1c9a      	adds	r2, r3, #2
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e89c:	b29b      	uxth	r3, r3
 800e89e:	3b02      	subs	r3, #2
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e8a6:	e05c      	b.n	800e962 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	330c      	adds	r3, #12
 800e8b2:	7812      	ldrb	r2, [r2, #0]
 800e8b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8ba:	1c5a      	adds	r2, r3, #1
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e8ce:	e048      	b.n	800e962 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	f003 0302 	and.w	r3, r3, #2
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	d12b      	bne.n	800e936 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d912      	bls.n	800e90e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8ec:	881a      	ldrh	r2, [r3, #0]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8f8:	1c9a      	adds	r2, r3, #2
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e902:	b29b      	uxth	r3, r3
 800e904:	3b02      	subs	r3, #2
 800e906:	b29a      	uxth	r2, r3
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e90c:	e029      	b.n	800e962 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	330c      	adds	r3, #12
 800e918:	7812      	ldrb	r2, [r2, #0]
 800e91a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e920:	1c5a      	adds	r2, r3, #1
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	3b01      	subs	r3, #1
 800e92e:	b29a      	uxth	r2, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e934:	e015      	b.n	800e962 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e936:	f7fb ff01 	bl	800a73c <HAL_GetTick>
 800e93a:	4602      	mov	r2, r0
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	429a      	cmp	r2, r3
 800e944:	d803      	bhi.n	800e94e <HAL_SPI_Transmit+0x270>
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e94c:	d102      	bne.n	800e954 <HAL_SPI_Transmit+0x276>
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d106      	bne.n	800e962 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800e954:	2303      	movs	r3, #3
 800e956:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800e960:	e029      	b.n	800e9b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e966:	b29b      	uxth	r3, r3
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1b1      	bne.n	800e8d0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e96c:	69ba      	ldr	r2, [r7, #24]
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f000 fc7d 	bl	800f270 <SPI_EndRxTxTransaction>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2220      	movs	r2, #32
 800e980:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d10a      	bne.n	800e9a0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e98a:	2300      	movs	r3, #0
 800e98c:	613b      	str	r3, [r7, #16]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	613b      	str	r3, [r7, #16]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	613b      	str	r3, [r7, #16]
 800e99e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d002      	beq.n	800e9ae <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	77fb      	strb	r3, [r7, #31]
 800e9ac:	e003      	b.n	800e9b6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800e9be:	7ffb      	ldrb	r3, [r7, #31]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3720      	adds	r7, #32
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08a      	sub	sp, #40	@ 0x28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d101      	bne.n	800e9ee <HAL_SPI_TransmitReceive+0x26>
 800e9ea:	2302      	movs	r3, #2
 800e9ec:	e20a      	b.n	800ee04 <HAL_SPI_TransmitReceive+0x43c>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e9f6:	f7fb fea1 	bl	800a73c <HAL_GetTick>
 800e9fa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ea02:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ea0a:	887b      	ldrh	r3, [r7, #2]
 800ea0c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800ea0e:	887b      	ldrh	r3, [r7, #2]
 800ea10:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ea12:	7efb      	ldrb	r3, [r7, #27]
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d00e      	beq.n	800ea36 <HAL_SPI_TransmitReceive+0x6e>
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ea1e:	d106      	bne.n	800ea2e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	689b      	ldr	r3, [r3, #8]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d102      	bne.n	800ea2e <HAL_SPI_TransmitReceive+0x66>
 800ea28:	7efb      	ldrb	r3, [r7, #27]
 800ea2a:	2b04      	cmp	r3, #4
 800ea2c:	d003      	beq.n	800ea36 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800ea2e:	2302      	movs	r3, #2
 800ea30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800ea34:	e1e0      	b.n	800edf8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d005      	beq.n	800ea48 <HAL_SPI_TransmitReceive+0x80>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <HAL_SPI_TransmitReceive+0x80>
 800ea42:	887b      	ldrh	r3, [r7, #2]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d103      	bne.n	800ea50 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800ea4e:	e1d3      	b.n	800edf8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	2b04      	cmp	r3, #4
 800ea5a:	d003      	beq.n	800ea64 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2205      	movs	r2, #5
 800ea60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2200      	movs	r2, #0
 800ea68:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	887a      	ldrh	r2, [r7, #2]
 800ea74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	887a      	ldrh	r2, [r7, #2]
 800ea7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	887a      	ldrh	r2, [r7, #2]
 800ea8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	887a      	ldrh	r2, [r7, #2]
 800ea90:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2200      	movs	r2, #0
 800ea96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eaa6:	d802      	bhi.n	800eaae <HAL_SPI_TransmitReceive+0xe6>
 800eaa8:	8a3b      	ldrh	r3, [r7, #16]
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d908      	bls.n	800eac0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	685a      	ldr	r2, [r3, #4]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800eabc:	605a      	str	r2, [r3, #4]
 800eabe:	e007      	b.n	800ead0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	685a      	ldr	r2, [r3, #4]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800eace:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eada:	2b40      	cmp	r3, #64	@ 0x40
 800eadc:	d007      	beq.n	800eaee <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eaec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eaf6:	f240 8081 	bls.w	800ebfc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d002      	beq.n	800eb08 <HAL_SPI_TransmitReceive+0x140>
 800eb02:	8a7b      	ldrh	r3, [r7, #18]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d16d      	bne.n	800ebe4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb0c:	881a      	ldrh	r2, [r3, #0]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb18:	1c9a      	adds	r2, r3, #2
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	3b01      	subs	r3, #1
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb2c:	e05a      	b.n	800ebe4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	f003 0302 	and.w	r3, r3, #2
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	d11b      	bne.n	800eb74 <HAL_SPI_TransmitReceive+0x1ac>
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d016      	beq.n	800eb74 <HAL_SPI_TransmitReceive+0x1ac>
 800eb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d113      	bne.n	800eb74 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb50:	881a      	ldrh	r2, [r3, #0]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb5c:	1c9a      	adds	r2, r3, #2
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eb70:	2300      	movs	r3, #0
 800eb72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	f003 0301 	and.w	r3, r3, #1
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d11c      	bne.n	800ebbc <HAL_SPI_TransmitReceive+0x1f4>
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d016      	beq.n	800ebbc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	68da      	ldr	r2, [r3, #12]
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb98:	b292      	uxth	r2, r2
 800eb9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eba0:	1c9a      	adds	r2, r3, #2
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ebbc:	f7fb fdbe 	bl	800a73c <HAL_GetTick>
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d80b      	bhi.n	800ebe4 <HAL_SPI_TransmitReceive+0x21c>
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd2:	d007      	beq.n	800ebe4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800ebe2:	e109      	b.n	800edf8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d19f      	bne.n	800eb2e <HAL_SPI_TransmitReceive+0x166>
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d199      	bne.n	800eb2e <HAL_SPI_TransmitReceive+0x166>
 800ebfa:	e0e3      	b.n	800edc4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d003      	beq.n	800ec0c <HAL_SPI_TransmitReceive+0x244>
 800ec04:	8a7b      	ldrh	r3, [r7, #18]
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	f040 80cf 	bne.w	800edaa <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d912      	bls.n	800ec3c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec1a:	881a      	ldrh	r2, [r3, #0]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec26:	1c9a      	adds	r2, r3, #2
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	3b02      	subs	r3, #2
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ec3a:	e0b6      	b.n	800edaa <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	330c      	adds	r3, #12
 800ec46:	7812      	ldrb	r2, [r2, #0]
 800ec48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	3b01      	subs	r3, #1
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec62:	e0a2      	b.n	800edaa <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	f003 0302 	and.w	r3, r3, #2
 800ec6e:	2b02      	cmp	r3, #2
 800ec70:	d134      	bne.n	800ecdc <HAL_SPI_TransmitReceive+0x314>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d02f      	beq.n	800ecdc <HAL_SPI_TransmitReceive+0x314>
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d12c      	bne.n	800ecdc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d912      	bls.n	800ecb2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec90:	881a      	ldrh	r2, [r3, #0]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec9c:	1c9a      	adds	r2, r3, #2
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	3b02      	subs	r3, #2
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ecb0:	e012      	b.n	800ecd8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	330c      	adds	r3, #12
 800ecbc:	7812      	ldrb	r2, [r2, #0]
 800ecbe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecc4:	1c5a      	adds	r2, r3, #1
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	f003 0301 	and.w	r3, r3, #1
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d148      	bne.n	800ed7c <HAL_SPI_TransmitReceive+0x3b4>
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d042      	beq.n	800ed7c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d923      	bls.n	800ed4a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68da      	ldr	r2, [r3, #12]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed0c:	b292      	uxth	r2, r2
 800ed0e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed14:	1c9a      	adds	r2, r3, #2
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	3b02      	subs	r3, #2
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d81f      	bhi.n	800ed78 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	685a      	ldr	r2, [r3, #4]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ed46:	605a      	str	r2, [r3, #4]
 800ed48:	e016      	b.n	800ed78 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f103 020c 	add.w	r2, r3, #12
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed56:	7812      	ldrb	r2, [r2, #0]
 800ed58:	b2d2      	uxtb	r2, r2
 800ed5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed60:	1c5a      	adds	r2, r3, #1
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ed7c:	f7fb fcde 	bl	800a73c <HAL_GetTick>
 800ed80:	4602      	mov	r2, r0
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	1ad3      	subs	r3, r2, r3
 800ed86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d803      	bhi.n	800ed94 <HAL_SPI_TransmitReceive+0x3cc>
 800ed8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed92:	d102      	bne.n	800ed9a <HAL_SPI_TransmitReceive+0x3d2>
 800ed94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d107      	bne.n	800edaa <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800ed9a:	2303      	movs	r3, #3
 800ed9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800eda8:	e026      	b.n	800edf8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800edae:	b29b      	uxth	r3, r3
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f47f af57 	bne.w	800ec64 <HAL_SPI_TransmitReceive+0x29c>
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f47f af50 	bne.w	800ec64 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800edc4:	69fa      	ldr	r2, [r7, #28]
 800edc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f000 fa51 	bl	800f270 <SPI_EndRxTxTransaction>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d005      	beq.n	800ede0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800edd4:	2301      	movs	r3, #1
 800edd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2220      	movs	r2, #32
 800edde:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d003      	beq.n	800edf0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800ede8:	2301      	movs	r3, #1
 800edea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800edee:	e003      	b.n	800edf8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2201      	movs	r2, #1
 800edf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800ee00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3728      	adds	r7, #40	@ 0x28
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b088      	sub	sp, #32
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d10e      	bne.n	800ee4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d009      	beq.n	800ee4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d004      	beq.n	800ee4c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	4798      	blx	r3
    return;
 800ee4a:	e0ce      	b.n	800efea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	f003 0302 	and.w	r3, r3, #2
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d009      	beq.n	800ee6a <HAL_SPI_IRQHandler+0x5e>
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d004      	beq.n	800ee6a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	4798      	blx	r3
    return;
 800ee68:	e0bf      	b.n	800efea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	f003 0320 	and.w	r3, r3, #32
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10a      	bne.n	800ee8a <HAL_SPI_IRQHandler+0x7e>
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d105      	bne.n	800ee8a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f000 80b0 	beq.w	800efea <HAL_SPI_IRQHandler+0x1de>
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	f003 0320 	and.w	r3, r3, #32
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f000 80aa 	beq.w	800efea <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d023      	beq.n	800eee8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	2b03      	cmp	r3, #3
 800eeaa:	d011      	beq.n	800eed0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eeb0:	f043 0204 	orr.w	r2, r3, #4
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eeb8:	2300      	movs	r3, #0
 800eeba:	617b      	str	r3, [r7, #20]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	617b      	str	r3, [r7, #20]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	617b      	str	r3, [r7, #20]
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	e00b      	b.n	800eee8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eed0:	2300      	movs	r3, #0
 800eed2:	613b      	str	r3, [r7, #16]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	613b      	str	r3, [r7, #16]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	613b      	str	r3, [r7, #16]
 800eee4:	693b      	ldr	r3, [r7, #16]
        return;
 800eee6:	e080      	b.n	800efea <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	f003 0320 	and.w	r3, r3, #32
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d014      	beq.n	800ef1c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eef6:	f043 0201 	orr.w	r2, r3, #1
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eefe:	2300      	movs	r3, #0
 800ef00:	60fb      	str	r3, [r7, #12]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	60fb      	str	r3, [r7, #12]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00c      	beq.n	800ef40 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef2a:	f043 0208 	orr.w	r2, r3, #8
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ef32:	2300      	movs	r3, #0
 800ef34:	60bb      	str	r3, [r7, #8]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	60bb      	str	r3, [r7, #8]
 800ef3e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d04f      	beq.n	800efe8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ef56:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	f003 0302 	and.w	r3, r3, #2
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d104      	bne.n	800ef74 <HAL_SPI_IRQHandler+0x168>
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	f003 0301 	and.w	r3, r3, #1
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d034      	beq.n	800efde <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	685a      	ldr	r2, [r3, #4]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f022 0203 	bic.w	r2, r2, #3
 800ef82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d011      	beq.n	800efb0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef90:	4a17      	ldr	r2, [pc, #92]	@ (800eff0 <HAL_SPI_IRQHandler+0x1e4>)
 800ef92:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fb fe0e 	bl	800abba <HAL_DMA_Abort_IT>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d005      	beq.n	800efb0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efa8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d016      	beq.n	800efe6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efbc:	4a0c      	ldr	r2, [pc, #48]	@ (800eff0 <HAL_SPI_IRQHandler+0x1e4>)
 800efbe:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fb fdf8 	bl	800abba <HAL_DMA_Abort_IT>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00a      	beq.n	800efe6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efd4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800efdc:	e003      	b.n	800efe6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 f808 	bl	800eff4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800efe4:	e000      	b.n	800efe8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800efe6:	bf00      	nop
    return;
 800efe8:	bf00      	nop
  }
}
 800efea:	3720      	adds	r7, #32
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	0800f009 	.word	0x0800f009

0800eff4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800effc:	bf00      	nop
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f014:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2200      	movs	r2, #0
 800f01a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2200      	movs	r2, #0
 800f022:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f7ff ffe5 	bl	800eff4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f02a:	bf00      	nop
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
	...

0800f034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b088      	sub	sp, #32
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	603b      	str	r3, [r7, #0]
 800f040:	4613      	mov	r3, r2
 800f042:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f044:	f7fb fb7a 	bl	800a73c <HAL_GetTick>
 800f048:	4602      	mov	r2, r0
 800f04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f04c:	1a9b      	subs	r3, r3, r2
 800f04e:	683a      	ldr	r2, [r7, #0]
 800f050:	4413      	add	r3, r2
 800f052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f054:	f7fb fb72 	bl	800a73c <HAL_GetTick>
 800f058:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f05a:	4b39      	ldr	r3, [pc, #228]	@ (800f140 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	015b      	lsls	r3, r3, #5
 800f060:	0d1b      	lsrs	r3, r3, #20
 800f062:	69fa      	ldr	r2, [r7, #28]
 800f064:	fb02 f303 	mul.w	r3, r2, r3
 800f068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f06a:	e054      	b.n	800f116 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f072:	d050      	beq.n	800f116 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f074:	f7fb fb62 	bl	800a73c <HAL_GetTick>
 800f078:	4602      	mov	r2, r0
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	69fa      	ldr	r2, [r7, #28]
 800f080:	429a      	cmp	r2, r3
 800f082:	d902      	bls.n	800f08a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d13d      	bne.n	800f106 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	685a      	ldr	r2, [r3, #4]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f0a2:	d111      	bne.n	800f0c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f0ac:	d004      	beq.n	800f0b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	689b      	ldr	r3, [r3, #8]
 800f0b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0b6:	d107      	bne.n	800f0c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f0c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0d0:	d10f      	bne.n	800f0f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f0f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f102:	2303      	movs	r3, #3
 800f104:	e017      	b.n	800f136 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d101      	bne.n	800f110 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f10c:	2300      	movs	r3, #0
 800f10e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	3b01      	subs	r3, #1
 800f114:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	689a      	ldr	r2, [r3, #8]
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	4013      	ands	r3, r2
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	429a      	cmp	r2, r3
 800f124:	bf0c      	ite	eq
 800f126:	2301      	moveq	r3, #1
 800f128:	2300      	movne	r3, #0
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	461a      	mov	r2, r3
 800f12e:	79fb      	ldrb	r3, [r7, #7]
 800f130:	429a      	cmp	r2, r3
 800f132:	d19b      	bne.n	800f06c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3720      	adds	r7, #32
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	20000078 	.word	0x20000078

0800f144 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b08a      	sub	sp, #40	@ 0x28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
 800f150:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f156:	f7fb faf1 	bl	800a73c <HAL_GetTick>
 800f15a:	4602      	mov	r2, r0
 800f15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15e:	1a9b      	subs	r3, r3, r2
 800f160:	683a      	ldr	r2, [r7, #0]
 800f162:	4413      	add	r3, r2
 800f164:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800f166:	f7fb fae9 	bl	800a73c <HAL_GetTick>
 800f16a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	330c      	adds	r3, #12
 800f172:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f174:	4b3d      	ldr	r3, [pc, #244]	@ (800f26c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	4613      	mov	r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	4413      	add	r3, r2
 800f17e:	00da      	lsls	r2, r3, #3
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	0d1b      	lsrs	r3, r3, #20
 800f184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f186:	fb02 f303 	mul.w	r3, r2, r3
 800f18a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f18c:	e060      	b.n	800f250 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f194:	d107      	bne.n	800f1a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d104      	bne.n	800f1a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f1a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ac:	d050      	beq.n	800f250 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f1ae:	f7fb fac5 	bl	800a73c <HAL_GetTick>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	6a3b      	ldr	r3, [r7, #32]
 800f1b6:	1ad3      	subs	r3, r2, r3
 800f1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d902      	bls.n	800f1c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d13d      	bne.n	800f240 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	685a      	ldr	r2, [r3, #4]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f1d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f1dc:	d111      	bne.n	800f202 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1e6:	d004      	beq.n	800f1f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1f0:	d107      	bne.n	800f202 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f200:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f20a:	d10f      	bne.n	800f22c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f21a:	601a      	str	r2, [r3, #0]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f22a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2201      	movs	r2, #1
 800f230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2200      	movs	r2, #0
 800f238:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f23c:	2303      	movs	r3, #3
 800f23e:	e010      	b.n	800f262 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f246:	2300      	movs	r3, #0
 800f248:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	3b01      	subs	r3, #1
 800f24e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	689a      	ldr	r2, [r3, #8]
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	4013      	ands	r3, r2
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d196      	bne.n	800f18e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f260:	2300      	movs	r3, #0
}
 800f262:	4618      	mov	r0, r3
 800f264:	3728      	adds	r7, #40	@ 0x28
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	20000078 	.word	0x20000078

0800f270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b086      	sub	sp, #24
 800f274:	af02      	add	r7, sp, #8
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	2200      	movs	r2, #0
 800f284:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f7ff ff5b 	bl	800f144 <SPI_WaitFifoStateUntilTimeout>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d007      	beq.n	800f2a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f298:	f043 0220 	orr.w	r2, r3, #32
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f2a0:	2303      	movs	r3, #3
 800f2a2:	e027      	b.n	800f2f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	2180      	movs	r1, #128	@ 0x80
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	f7ff fec0 	bl	800f034 <SPI_WaitFlagStateUntilTimeout>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d007      	beq.n	800f2ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2be:	f043 0220 	orr.w	r2, r3, #32
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f2c6:	2303      	movs	r3, #3
 800f2c8:	e014      	b.n	800f2f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	9300      	str	r3, [sp, #0]
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7ff ff34 	bl	800f144 <SPI_WaitFifoStateUntilTimeout>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d007      	beq.n	800f2f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2e6:	f043 0220 	orr.w	r2, r3, #32
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f2ee:	2303      	movs	r3, #3
 800f2f0:	e000      	b.n	800f2f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f2f2:	2300      	movs	r3, #0
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f30c:	2301      	movs	r3, #1
 800f30e:	e097      	b.n	800f440 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d106      	bne.n	800f32a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7fa fbe7 	bl	8009af8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2202      	movs	r2, #2
 800f32e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	6812      	ldr	r2, [r2, #0]
 800f33c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800f340:	f023 0307 	bic.w	r3, r3, #7
 800f344:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	3304      	adds	r3, #4
 800f34e:	4619      	mov	r1, r3
 800f350:	4610      	mov	r0, r2
 800f352:	f000 f879 	bl	800f448 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	699b      	ldr	r3, [r3, #24]
 800f364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	6a1b      	ldr	r3, [r3, #32]
 800f36c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	697a      	ldr	r2, [r7, #20]
 800f374:	4313      	orrs	r3, r2
 800f376:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f37e:	f023 0303 	bic.w	r3, r3, #3
 800f382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	689a      	ldr	r2, [r3, #8]
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	699b      	ldr	r3, [r3, #24]
 800f38c:	021b      	lsls	r3, r3, #8
 800f38e:	4313      	orrs	r3, r2
 800f390:	693a      	ldr	r2, [r7, #16]
 800f392:	4313      	orrs	r3, r2
 800f394:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800f39c:	f023 030c 	bic.w	r3, r3, #12
 800f3a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f3a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f3ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	68da      	ldr	r2, [r3, #12]
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	69db      	ldr	r3, [r3, #28]
 800f3b6:	021b      	lsls	r3, r3, #8
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	693a      	ldr	r2, [r7, #16]
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	011a      	lsls	r2, r3, #4
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	6a1b      	ldr	r3, [r3, #32]
 800f3ca:	031b      	lsls	r3, r3, #12
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	693a      	ldr	r2, [r7, #16]
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800f3da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800f3e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	685a      	ldr	r2, [r3, #4]
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	011b      	lsls	r3, r3, #4
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	693a      	ldr	r2, [r7, #16]
 800f404:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2201      	movs	r2, #1
 800f412:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2201      	movs	r2, #1
 800f41a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2201      	movs	r2, #1
 800f422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2201      	movs	r2, #1
 800f42a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2201      	movs	r2, #1
 800f432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2201      	movs	r2, #1
 800f43a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f43e:	2300      	movs	r3, #0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3718      	adds	r7, #24
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f448:	b480      	push	{r7}
 800f44a:	b085      	sub	sp, #20
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4a4c      	ldr	r2, [pc, #304]	@ (800f58c <TIM_Base_SetConfig+0x144>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d017      	beq.n	800f490 <TIM_Base_SetConfig+0x48>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f466:	d013      	beq.n	800f490 <TIM_Base_SetConfig+0x48>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4a49      	ldr	r2, [pc, #292]	@ (800f590 <TIM_Base_SetConfig+0x148>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d00f      	beq.n	800f490 <TIM_Base_SetConfig+0x48>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	4a48      	ldr	r2, [pc, #288]	@ (800f594 <TIM_Base_SetConfig+0x14c>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d00b      	beq.n	800f490 <TIM_Base_SetConfig+0x48>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4a47      	ldr	r2, [pc, #284]	@ (800f598 <TIM_Base_SetConfig+0x150>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d007      	beq.n	800f490 <TIM_Base_SetConfig+0x48>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a46      	ldr	r2, [pc, #280]	@ (800f59c <TIM_Base_SetConfig+0x154>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d003      	beq.n	800f490 <TIM_Base_SetConfig+0x48>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a45      	ldr	r2, [pc, #276]	@ (800f5a0 <TIM_Base_SetConfig+0x158>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d108      	bne.n	800f4a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	68fa      	ldr	r2, [r7, #12]
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4a39      	ldr	r2, [pc, #228]	@ (800f58c <TIM_Base_SetConfig+0x144>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d023      	beq.n	800f4f2 <TIM_Base_SetConfig+0xaa>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4b0:	d01f      	beq.n	800f4f2 <TIM_Base_SetConfig+0xaa>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4a36      	ldr	r2, [pc, #216]	@ (800f590 <TIM_Base_SetConfig+0x148>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d01b      	beq.n	800f4f2 <TIM_Base_SetConfig+0xaa>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a35      	ldr	r2, [pc, #212]	@ (800f594 <TIM_Base_SetConfig+0x14c>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d017      	beq.n	800f4f2 <TIM_Base_SetConfig+0xaa>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a34      	ldr	r2, [pc, #208]	@ (800f598 <TIM_Base_SetConfig+0x150>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d013      	beq.n	800f4f2 <TIM_Base_SetConfig+0xaa>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a33      	ldr	r2, [pc, #204]	@ (800f59c <TIM_Base_SetConfig+0x154>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d00f      	beq.n	800f4f2 <TIM_Base_SetConfig+0xaa>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4a33      	ldr	r2, [pc, #204]	@ (800f5a4 <TIM_Base_SetConfig+0x15c>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d00b      	beq.n	800f4f2 <TIM_Base_SetConfig+0xaa>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a32      	ldr	r2, [pc, #200]	@ (800f5a8 <TIM_Base_SetConfig+0x160>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d007      	beq.n	800f4f2 <TIM_Base_SetConfig+0xaa>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a31      	ldr	r2, [pc, #196]	@ (800f5ac <TIM_Base_SetConfig+0x164>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d003      	beq.n	800f4f2 <TIM_Base_SetConfig+0xaa>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a2c      	ldr	r2, [pc, #176]	@ (800f5a0 <TIM_Base_SetConfig+0x158>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d108      	bne.n	800f504 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f4f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	4313      	orrs	r3, r2
 800f502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	695b      	ldr	r3, [r3, #20]
 800f50e:	4313      	orrs	r3, r2
 800f510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	689a      	ldr	r2, [r3, #8]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a18      	ldr	r2, [pc, #96]	@ (800f58c <TIM_Base_SetConfig+0x144>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d013      	beq.n	800f558 <TIM_Base_SetConfig+0x110>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4a1a      	ldr	r2, [pc, #104]	@ (800f59c <TIM_Base_SetConfig+0x154>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d00f      	beq.n	800f558 <TIM_Base_SetConfig+0x110>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a1a      	ldr	r2, [pc, #104]	@ (800f5a4 <TIM_Base_SetConfig+0x15c>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d00b      	beq.n	800f558 <TIM_Base_SetConfig+0x110>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4a19      	ldr	r2, [pc, #100]	@ (800f5a8 <TIM_Base_SetConfig+0x160>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d007      	beq.n	800f558 <TIM_Base_SetConfig+0x110>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a18      	ldr	r2, [pc, #96]	@ (800f5ac <TIM_Base_SetConfig+0x164>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d003      	beq.n	800f558 <TIM_Base_SetConfig+0x110>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4a13      	ldr	r2, [pc, #76]	@ (800f5a0 <TIM_Base_SetConfig+0x158>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d103      	bne.n	800f560 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	691a      	ldr	r2, [r3, #16]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	f003 0301 	and.w	r3, r3, #1
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d105      	bne.n	800f57e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	691b      	ldr	r3, [r3, #16]
 800f576:	f023 0201 	bic.w	r2, r3, #1
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	611a      	str	r2, [r3, #16]
  }
}
 800f57e:	bf00      	nop
 800f580:	3714      	adds	r7, #20
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	40012c00 	.word	0x40012c00
 800f590:	40000400 	.word	0x40000400
 800f594:	40000800 	.word	0x40000800
 800f598:	40000c00 	.word	0x40000c00
 800f59c:	40013400 	.word	0x40013400
 800f5a0:	40015000 	.word	0x40015000
 800f5a4:	40014000 	.word	0x40014000
 800f5a8:	40014400 	.word	0x40014400
 800f5ac:	40014800 	.word	0x40014800

0800f5b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d101      	bne.n	800f5c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f5c4:	2302      	movs	r3, #2
 800f5c6:	e074      	b.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a34      	ldr	r2, [pc, #208]	@ (800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d009      	beq.n	800f606 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4a33      	ldr	r2, [pc, #204]	@ (800f6c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d004      	beq.n	800f606 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a31      	ldr	r2, [pc, #196]	@ (800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d108      	bne.n	800f618 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f60c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	4313      	orrs	r3, r2
 800f616:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f61e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	68fa      	ldr	r2, [r7, #12]
 800f634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a21      	ldr	r2, [pc, #132]	@ (800f6c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d022      	beq.n	800f686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f648:	d01d      	beq.n	800f686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	4a1f      	ldr	r2, [pc, #124]	@ (800f6cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d018      	beq.n	800f686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a1d      	ldr	r2, [pc, #116]	@ (800f6d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d013      	beq.n	800f686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	4a1c      	ldr	r2, [pc, #112]	@ (800f6d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d00e      	beq.n	800f686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a15      	ldr	r2, [pc, #84]	@ (800f6c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d009      	beq.n	800f686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a18      	ldr	r2, [pc, #96]	@ (800f6d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d004      	beq.n	800f686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a11      	ldr	r2, [pc, #68]	@ (800f6c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d10c      	bne.n	800f6a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f68c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	689b      	ldr	r3, [r3, #8]
 800f692:	68ba      	ldr	r2, [r7, #8]
 800f694:	4313      	orrs	r3, r2
 800f696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3714      	adds	r7, #20
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop
 800f6c0:	40012c00 	.word	0x40012c00
 800f6c4:	40013400 	.word	0x40013400
 800f6c8:	40015000 	.word	0x40015000
 800f6cc:	40000400 	.word	0x40000400
 800f6d0:	40000800 	.word	0x40000800
 800f6d4:	40000c00 	.word	0x40000c00
 800f6d8:	40014000 	.word	0x40014000

0800f6dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d101      	bne.n	800f6ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	e042      	b.n	800f774 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d106      	bne.n	800f706 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7fa fe9d 	bl	800a440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2224      	movs	r2, #36	@ 0x24
 800f70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f022 0201 	bic.w	r2, r2, #1
 800f71c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f722:	2b00      	cmp	r3, #0
 800f724:	d002      	beq.n	800f72c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 fe68 	bl	80103fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 fb69 	bl	800fe04 <UART_SetConfig>
 800f732:	4603      	mov	r3, r0
 800f734:	2b01      	cmp	r3, #1
 800f736:	d101      	bne.n	800f73c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f738:	2301      	movs	r3, #1
 800f73a:	e01b      	b.n	800f774 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	685a      	ldr	r2, [r3, #4]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f74a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	689a      	ldr	r2, [r3, #8]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f75a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f042 0201 	orr.w	r2, r2, #1
 800f76a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 fee7 	bl	8010540 <UART_CheckIdleState>
 800f772:	4603      	mov	r3, r0
}
 800f774:	4618      	mov	r0, r3
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b0ba      	sub	sp, #232	@ 0xe8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	69db      	ldr	r3, [r3, #28]
 800f78a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	689b      	ldr	r3, [r3, #8]
 800f79e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f7a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f7a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f7b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d11b      	bne.n	800f7f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7bc:	f003 0320 	and.w	r3, r3, #32
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d015      	beq.n	800f7f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7c8:	f003 0320 	and.w	r3, r3, #32
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d105      	bne.n	800f7dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f7d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d009      	beq.n	800f7f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f000 82e3 	beq.w	800fdac <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	4798      	blx	r3
      }
      return;
 800f7ee:	e2dd      	b.n	800fdac <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f7f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f000 8123 	beq.w	800fa40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f7fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f7fe:	4b8d      	ldr	r3, [pc, #564]	@ (800fa34 <HAL_UART_IRQHandler+0x2b8>)
 800f800:	4013      	ands	r3, r2
 800f802:	2b00      	cmp	r3, #0
 800f804:	d106      	bne.n	800f814 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f806:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f80a:	4b8b      	ldr	r3, [pc, #556]	@ (800fa38 <HAL_UART_IRQHandler+0x2bc>)
 800f80c:	4013      	ands	r3, r2
 800f80e:	2b00      	cmp	r3, #0
 800f810:	f000 8116 	beq.w	800fa40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f818:	f003 0301 	and.w	r3, r3, #1
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d011      	beq.n	800f844 <HAL_UART_IRQHandler+0xc8>
 800f820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00b      	beq.n	800f844 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2201      	movs	r2, #1
 800f832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f83a:	f043 0201 	orr.w	r2, r3, #1
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f848:	f003 0302 	and.w	r3, r3, #2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d011      	beq.n	800f874 <HAL_UART_IRQHandler+0xf8>
 800f850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f854:	f003 0301 	and.w	r3, r3, #1
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d00b      	beq.n	800f874 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2202      	movs	r2, #2
 800f862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f86a:	f043 0204 	orr.w	r2, r3, #4
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f878:	f003 0304 	and.w	r3, r3, #4
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d011      	beq.n	800f8a4 <HAL_UART_IRQHandler+0x128>
 800f880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00b      	beq.n	800f8a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	2204      	movs	r2, #4
 800f892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f89a:	f043 0202 	orr.w	r2, r3, #2
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8a8:	f003 0308 	and.w	r3, r3, #8
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d017      	beq.n	800f8e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8b4:	f003 0320 	and.w	r3, r3, #32
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d105      	bne.n	800f8c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f8bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f8c0:	4b5c      	ldr	r3, [pc, #368]	@ (800fa34 <HAL_UART_IRQHandler+0x2b8>)
 800f8c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d00b      	beq.n	800f8e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2208      	movs	r2, #8
 800f8ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8d6:	f043 0208 	orr.w	r2, r3, #8
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d012      	beq.n	800f912 <HAL_UART_IRQHandler+0x196>
 800f8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00c      	beq.n	800f912 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f908:	f043 0220 	orr.w	r2, r3, #32
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f000 8249 	beq.w	800fdb0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f91e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f922:	f003 0320 	and.w	r3, r3, #32
 800f926:	2b00      	cmp	r3, #0
 800f928:	d013      	beq.n	800f952 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f92a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f92e:	f003 0320 	and.w	r3, r3, #32
 800f932:	2b00      	cmp	r3, #0
 800f934:	d105      	bne.n	800f942 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f93a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d007      	beq.n	800f952 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f946:	2b00      	cmp	r3, #0
 800f948:	d003      	beq.n	800f952 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f958:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	689b      	ldr	r3, [r3, #8]
 800f962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f966:	2b40      	cmp	r3, #64	@ 0x40
 800f968:	d005      	beq.n	800f976 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f96a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f96e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f972:	2b00      	cmp	r3, #0
 800f974:	d054      	beq.n	800fa20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fef9 	bl	801076e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	689b      	ldr	r3, [r3, #8]
 800f982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f986:	2b40      	cmp	r3, #64	@ 0x40
 800f988:	d146      	bne.n	800fa18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	3308      	adds	r3, #8
 800f990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f998:	e853 3f00 	ldrex	r3, [r3]
 800f99c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f9a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	3308      	adds	r3, #8
 800f9b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f9b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f9ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f9c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f9c6:	e841 2300 	strex	r3, r2, [r1]
 800f9ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f9ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d1d9      	bne.n	800f98a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d017      	beq.n	800fa10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9e6:	4a15      	ldr	r2, [pc, #84]	@ (800fa3c <HAL_UART_IRQHandler+0x2c0>)
 800f9e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fb f8e2 	bl	800abba <HAL_DMA_Abort_IT>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d019      	beq.n	800fa30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fa0a:	4610      	mov	r0, r2
 800fa0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa0e:	e00f      	b.n	800fa30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 f9e1 	bl	800fdd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa16:	e00b      	b.n	800fa30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 f9dd 	bl	800fdd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa1e:	e007      	b.n	800fa30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 f9d9 	bl	800fdd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fa2e:	e1bf      	b.n	800fdb0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa30:	bf00      	nop
    return;
 800fa32:	e1bd      	b.n	800fdb0 <HAL_UART_IRQHandler+0x634>
 800fa34:	10000001 	.word	0x10000001
 800fa38:	04000120 	.word	0x04000120
 800fa3c:	0801083b 	.word	0x0801083b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	f040 8153 	bne.w	800fcf0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fa4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa4e:	f003 0310 	and.w	r3, r3, #16
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f000 814c 	beq.w	800fcf0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fa58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa5c:	f003 0310 	and.w	r3, r3, #16
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f000 8145 	beq.w	800fcf0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2210      	movs	r2, #16
 800fa6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa78:	2b40      	cmp	r3, #64	@ 0x40
 800fa7a:	f040 80bb 	bne.w	800fbf4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fa8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	f000 818f 	beq.w	800fdb4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fa9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800faa0:	429a      	cmp	r2, r3
 800faa2:	f080 8187 	bcs.w	800fdb4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800faac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f003 0320 	and.w	r3, r3, #32
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f040 8087 	bne.w	800fbd2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800facc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fadc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fae0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	461a      	mov	r2, r3
 800faea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800faee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800faf2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fafa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fafe:	e841 2300 	strex	r3, r2, [r1]
 800fb02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fb06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1da      	bne.n	800fac4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3308      	adds	r3, #8
 800fb14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fb18:	e853 3f00 	ldrex	r3, [r3]
 800fb1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fb1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb20:	f023 0301 	bic.w	r3, r3, #1
 800fb24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	3308      	adds	r3, #8
 800fb2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fb36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fb3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb3e:	e841 2300 	strex	r3, r2, [r1]
 800fb42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fb44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d1e1      	bne.n	800fb0e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	3308      	adds	r3, #8
 800fb50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb54:	e853 3f00 	ldrex	r3, [r3]
 800fb58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fb5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3308      	adds	r3, #8
 800fb6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fb6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fb70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fb74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fb76:	e841 2300 	strex	r3, r2, [r1]
 800fb7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fb7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1e3      	bne.n	800fb4a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2220      	movs	r2, #32
 800fb86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb98:	e853 3f00 	ldrex	r3, [r3]
 800fb9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fb9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fba0:	f023 0310 	bic.w	r3, r3, #16
 800fba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	461a      	mov	r2, r3
 800fbae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fbb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fbb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fbb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fbba:	e841 2300 	strex	r3, r2, [r1]
 800fbbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fbc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d1e4      	bne.n	800fb90 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fa ff9b 	bl	800ab08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2202      	movs	r2, #2
 800fbd6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	4619      	mov	r1, r3
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 f8fd 	bl	800fdec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fbf2:	e0df      	b.n	800fdb4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	1ad3      	subs	r3, r2, r3
 800fc04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f000 80d1 	beq.w	800fdb8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800fc16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	f000 80cc 	beq.w	800fdb8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc28:	e853 3f00 	ldrex	r3, [r3]
 800fc2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fc42:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc44:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc4a:	e841 2300 	strex	r3, r2, [r1]
 800fc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d1e4      	bne.n	800fc20 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	3308      	adds	r3, #8
 800fc5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc60:	e853 3f00 	ldrex	r3, [r3]
 800fc64:	623b      	str	r3, [r7, #32]
   return(result);
 800fc66:	6a3b      	ldr	r3, [r7, #32]
 800fc68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fc6c:	f023 0301 	bic.w	r3, r3, #1
 800fc70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	3308      	adds	r3, #8
 800fc7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fc7e:	633a      	str	r2, [r7, #48]	@ 0x30
 800fc80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc86:	e841 2300 	strex	r3, r2, [r1]
 800fc8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1e1      	bne.n	800fc56 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2220      	movs	r2, #32
 800fc96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	e853 3f00 	ldrex	r3, [r3]
 800fcb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f023 0310 	bic.w	r3, r3, #16
 800fcba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fcc8:	61fb      	str	r3, [r7, #28]
 800fcca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fccc:	69b9      	ldr	r1, [r7, #24]
 800fcce:	69fa      	ldr	r2, [r7, #28]
 800fcd0:	e841 2300 	strex	r3, r2, [r1]
 800fcd4:	617b      	str	r3, [r7, #20]
   return(result);
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1e4      	bne.n	800fca6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2202      	movs	r2, #2
 800fce0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fce2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fce6:	4619      	mov	r1, r3
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 f87f 	bl	800fdec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fcee:	e063      	b.n	800fdb8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fcf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d00e      	beq.n	800fd1a <HAL_UART_IRQHandler+0x59e>
 800fcfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d008      	beq.n	800fd1a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fd10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 fdd2 	bl	80108bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd18:	e051      	b.n	800fdbe <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fd1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d014      	beq.n	800fd50 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fd26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d105      	bne.n	800fd3e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fd32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d008      	beq.n	800fd50 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d03a      	beq.n	800fdbc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	4798      	blx	r3
    }
    return;
 800fd4e:	e035      	b.n	800fdbc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d009      	beq.n	800fd70 <HAL_UART_IRQHandler+0x5f4>
 800fd5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d003      	beq.n	800fd70 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 fd7c 	bl	8010866 <UART_EndTransmit_IT>
    return;
 800fd6e:	e026      	b.n	800fdbe <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fd70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d009      	beq.n	800fd90 <HAL_UART_IRQHandler+0x614>
 800fd7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d003      	beq.n	800fd90 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 fdab 	bl	80108e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd8e:	e016      	b.n	800fdbe <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fd90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d010      	beq.n	800fdbe <HAL_UART_IRQHandler+0x642>
 800fd9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	da0c      	bge.n	800fdbe <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 fd93 	bl	80108d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fdaa:	e008      	b.n	800fdbe <HAL_UART_IRQHandler+0x642>
      return;
 800fdac:	bf00      	nop
 800fdae:	e006      	b.n	800fdbe <HAL_UART_IRQHandler+0x642>
    return;
 800fdb0:	bf00      	nop
 800fdb2:	e004      	b.n	800fdbe <HAL_UART_IRQHandler+0x642>
      return;
 800fdb4:	bf00      	nop
 800fdb6:	e002      	b.n	800fdbe <HAL_UART_IRQHandler+0x642>
      return;
 800fdb8:	bf00      	nop
 800fdba:	e000      	b.n	800fdbe <HAL_UART_IRQHandler+0x642>
    return;
 800fdbc:	bf00      	nop
  }
}
 800fdbe:	37e8      	adds	r7, #232	@ 0xe8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fdcc:	bf00      	nop
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fde0:	bf00      	nop
 800fde2:	370c      	adds	r7, #12
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr

0800fdec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fdf8:	bf00      	nop
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe08:	b08c      	sub	sp, #48	@ 0x30
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	689a      	ldr	r2, [r3, #8]
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	691b      	ldr	r3, [r3, #16]
 800fe1c:	431a      	orrs	r2, r3
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	695b      	ldr	r3, [r3, #20]
 800fe22:	431a      	orrs	r2, r3
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	69db      	ldr	r3, [r3, #28]
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	4baa      	ldr	r3, [pc, #680]	@ (80100dc <UART_SetConfig+0x2d8>)
 800fe34:	4013      	ands	r3, r2
 800fe36:	697a      	ldr	r2, [r7, #20]
 800fe38:	6812      	ldr	r2, [r2, #0]
 800fe3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe3c:	430b      	orrs	r3, r1
 800fe3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	68da      	ldr	r2, [r3, #12]
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	430a      	orrs	r2, r1
 800fe54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	699b      	ldr	r3, [r3, #24]
 800fe5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	4a9f      	ldr	r2, [pc, #636]	@ (80100e0 <UART_SetConfig+0x2dc>)
 800fe62:	4293      	cmp	r3, r2
 800fe64:	d004      	beq.n	800fe70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	6a1b      	ldr	r3, [r3, #32]
 800fe6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	689b      	ldr	r3, [r3, #8]
 800fe76:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800fe7a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	6812      	ldr	r2, [r2, #0]
 800fe82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe84:	430b      	orrs	r3, r1
 800fe86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe8e:	f023 010f 	bic.w	r1, r3, #15
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	430a      	orrs	r2, r1
 800fe9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a90      	ldr	r2, [pc, #576]	@ (80100e4 <UART_SetConfig+0x2e0>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d125      	bne.n	800fef4 <UART_SetConfig+0xf0>
 800fea8:	4b8f      	ldr	r3, [pc, #572]	@ (80100e8 <UART_SetConfig+0x2e4>)
 800feaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800feae:	f003 0303 	and.w	r3, r3, #3
 800feb2:	2b03      	cmp	r3, #3
 800feb4:	d81a      	bhi.n	800feec <UART_SetConfig+0xe8>
 800feb6:	a201      	add	r2, pc, #4	@ (adr r2, 800febc <UART_SetConfig+0xb8>)
 800feb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800febc:	0800fecd 	.word	0x0800fecd
 800fec0:	0800fedd 	.word	0x0800fedd
 800fec4:	0800fed5 	.word	0x0800fed5
 800fec8:	0800fee5 	.word	0x0800fee5
 800fecc:	2301      	movs	r3, #1
 800fece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fed2:	e116      	b.n	8010102 <UART_SetConfig+0x2fe>
 800fed4:	2302      	movs	r3, #2
 800fed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800feda:	e112      	b.n	8010102 <UART_SetConfig+0x2fe>
 800fedc:	2304      	movs	r3, #4
 800fede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fee2:	e10e      	b.n	8010102 <UART_SetConfig+0x2fe>
 800fee4:	2308      	movs	r3, #8
 800fee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800feea:	e10a      	b.n	8010102 <UART_SetConfig+0x2fe>
 800feec:	2310      	movs	r3, #16
 800feee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fef2:	e106      	b.n	8010102 <UART_SetConfig+0x2fe>
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4a7c      	ldr	r2, [pc, #496]	@ (80100ec <UART_SetConfig+0x2e8>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d138      	bne.n	800ff70 <UART_SetConfig+0x16c>
 800fefe:	4b7a      	ldr	r3, [pc, #488]	@ (80100e8 <UART_SetConfig+0x2e4>)
 800ff00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff04:	f003 030c 	and.w	r3, r3, #12
 800ff08:	2b0c      	cmp	r3, #12
 800ff0a:	d82d      	bhi.n	800ff68 <UART_SetConfig+0x164>
 800ff0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ff14 <UART_SetConfig+0x110>)
 800ff0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff12:	bf00      	nop
 800ff14:	0800ff49 	.word	0x0800ff49
 800ff18:	0800ff69 	.word	0x0800ff69
 800ff1c:	0800ff69 	.word	0x0800ff69
 800ff20:	0800ff69 	.word	0x0800ff69
 800ff24:	0800ff59 	.word	0x0800ff59
 800ff28:	0800ff69 	.word	0x0800ff69
 800ff2c:	0800ff69 	.word	0x0800ff69
 800ff30:	0800ff69 	.word	0x0800ff69
 800ff34:	0800ff51 	.word	0x0800ff51
 800ff38:	0800ff69 	.word	0x0800ff69
 800ff3c:	0800ff69 	.word	0x0800ff69
 800ff40:	0800ff69 	.word	0x0800ff69
 800ff44:	0800ff61 	.word	0x0800ff61
 800ff48:	2300      	movs	r3, #0
 800ff4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff4e:	e0d8      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ff50:	2302      	movs	r3, #2
 800ff52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff56:	e0d4      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ff58:	2304      	movs	r3, #4
 800ff5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff5e:	e0d0      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ff60:	2308      	movs	r3, #8
 800ff62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff66:	e0cc      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ff68:	2310      	movs	r3, #16
 800ff6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ff6e:	e0c8      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4a5e      	ldr	r2, [pc, #376]	@ (80100f0 <UART_SetConfig+0x2ec>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d125      	bne.n	800ffc6 <UART_SetConfig+0x1c2>
 800ff7a:	4b5b      	ldr	r3, [pc, #364]	@ (80100e8 <UART_SetConfig+0x2e4>)
 800ff7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ff84:	2b30      	cmp	r3, #48	@ 0x30
 800ff86:	d016      	beq.n	800ffb6 <UART_SetConfig+0x1b2>
 800ff88:	2b30      	cmp	r3, #48	@ 0x30
 800ff8a:	d818      	bhi.n	800ffbe <UART_SetConfig+0x1ba>
 800ff8c:	2b20      	cmp	r3, #32
 800ff8e:	d00a      	beq.n	800ffa6 <UART_SetConfig+0x1a2>
 800ff90:	2b20      	cmp	r3, #32
 800ff92:	d814      	bhi.n	800ffbe <UART_SetConfig+0x1ba>
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d002      	beq.n	800ff9e <UART_SetConfig+0x19a>
 800ff98:	2b10      	cmp	r3, #16
 800ff9a:	d008      	beq.n	800ffae <UART_SetConfig+0x1aa>
 800ff9c:	e00f      	b.n	800ffbe <UART_SetConfig+0x1ba>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffa4:	e0ad      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ffa6:	2302      	movs	r3, #2
 800ffa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffac:	e0a9      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ffae:	2304      	movs	r3, #4
 800ffb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffb4:	e0a5      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ffb6:	2308      	movs	r3, #8
 800ffb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffbc:	e0a1      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ffbe:	2310      	movs	r3, #16
 800ffc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffc4:	e09d      	b.n	8010102 <UART_SetConfig+0x2fe>
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a4a      	ldr	r2, [pc, #296]	@ (80100f4 <UART_SetConfig+0x2f0>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d125      	bne.n	801001c <UART_SetConfig+0x218>
 800ffd0:	4b45      	ldr	r3, [pc, #276]	@ (80100e8 <UART_SetConfig+0x2e4>)
 800ffd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ffda:	2bc0      	cmp	r3, #192	@ 0xc0
 800ffdc:	d016      	beq.n	801000c <UART_SetConfig+0x208>
 800ffde:	2bc0      	cmp	r3, #192	@ 0xc0
 800ffe0:	d818      	bhi.n	8010014 <UART_SetConfig+0x210>
 800ffe2:	2b80      	cmp	r3, #128	@ 0x80
 800ffe4:	d00a      	beq.n	800fffc <UART_SetConfig+0x1f8>
 800ffe6:	2b80      	cmp	r3, #128	@ 0x80
 800ffe8:	d814      	bhi.n	8010014 <UART_SetConfig+0x210>
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d002      	beq.n	800fff4 <UART_SetConfig+0x1f0>
 800ffee:	2b40      	cmp	r3, #64	@ 0x40
 800fff0:	d008      	beq.n	8010004 <UART_SetConfig+0x200>
 800fff2:	e00f      	b.n	8010014 <UART_SetConfig+0x210>
 800fff4:	2300      	movs	r3, #0
 800fff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fffa:	e082      	b.n	8010102 <UART_SetConfig+0x2fe>
 800fffc:	2302      	movs	r3, #2
 800fffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010002:	e07e      	b.n	8010102 <UART_SetConfig+0x2fe>
 8010004:	2304      	movs	r3, #4
 8010006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801000a:	e07a      	b.n	8010102 <UART_SetConfig+0x2fe>
 801000c:	2308      	movs	r3, #8
 801000e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010012:	e076      	b.n	8010102 <UART_SetConfig+0x2fe>
 8010014:	2310      	movs	r3, #16
 8010016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801001a:	e072      	b.n	8010102 <UART_SetConfig+0x2fe>
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a35      	ldr	r2, [pc, #212]	@ (80100f8 <UART_SetConfig+0x2f4>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d12a      	bne.n	801007c <UART_SetConfig+0x278>
 8010026:	4b30      	ldr	r3, [pc, #192]	@ (80100e8 <UART_SetConfig+0x2e4>)
 8010028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801002c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010030:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010034:	d01a      	beq.n	801006c <UART_SetConfig+0x268>
 8010036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801003a:	d81b      	bhi.n	8010074 <UART_SetConfig+0x270>
 801003c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010040:	d00c      	beq.n	801005c <UART_SetConfig+0x258>
 8010042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010046:	d815      	bhi.n	8010074 <UART_SetConfig+0x270>
 8010048:	2b00      	cmp	r3, #0
 801004a:	d003      	beq.n	8010054 <UART_SetConfig+0x250>
 801004c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010050:	d008      	beq.n	8010064 <UART_SetConfig+0x260>
 8010052:	e00f      	b.n	8010074 <UART_SetConfig+0x270>
 8010054:	2300      	movs	r3, #0
 8010056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801005a:	e052      	b.n	8010102 <UART_SetConfig+0x2fe>
 801005c:	2302      	movs	r3, #2
 801005e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010062:	e04e      	b.n	8010102 <UART_SetConfig+0x2fe>
 8010064:	2304      	movs	r3, #4
 8010066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801006a:	e04a      	b.n	8010102 <UART_SetConfig+0x2fe>
 801006c:	2308      	movs	r3, #8
 801006e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010072:	e046      	b.n	8010102 <UART_SetConfig+0x2fe>
 8010074:	2310      	movs	r3, #16
 8010076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801007a:	e042      	b.n	8010102 <UART_SetConfig+0x2fe>
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4a17      	ldr	r2, [pc, #92]	@ (80100e0 <UART_SetConfig+0x2dc>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d13a      	bne.n	80100fc <UART_SetConfig+0x2f8>
 8010086:	4b18      	ldr	r3, [pc, #96]	@ (80100e8 <UART_SetConfig+0x2e4>)
 8010088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801008c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010090:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010094:	d01a      	beq.n	80100cc <UART_SetConfig+0x2c8>
 8010096:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801009a:	d81b      	bhi.n	80100d4 <UART_SetConfig+0x2d0>
 801009c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80100a0:	d00c      	beq.n	80100bc <UART_SetConfig+0x2b8>
 80100a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80100a6:	d815      	bhi.n	80100d4 <UART_SetConfig+0x2d0>
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d003      	beq.n	80100b4 <UART_SetConfig+0x2b0>
 80100ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80100b0:	d008      	beq.n	80100c4 <UART_SetConfig+0x2c0>
 80100b2:	e00f      	b.n	80100d4 <UART_SetConfig+0x2d0>
 80100b4:	2300      	movs	r3, #0
 80100b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100ba:	e022      	b.n	8010102 <UART_SetConfig+0x2fe>
 80100bc:	2302      	movs	r3, #2
 80100be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100c2:	e01e      	b.n	8010102 <UART_SetConfig+0x2fe>
 80100c4:	2304      	movs	r3, #4
 80100c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100ca:	e01a      	b.n	8010102 <UART_SetConfig+0x2fe>
 80100cc:	2308      	movs	r3, #8
 80100ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100d2:	e016      	b.n	8010102 <UART_SetConfig+0x2fe>
 80100d4:	2310      	movs	r3, #16
 80100d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100da:	e012      	b.n	8010102 <UART_SetConfig+0x2fe>
 80100dc:	cfff69f3 	.word	0xcfff69f3
 80100e0:	40008000 	.word	0x40008000
 80100e4:	40013800 	.word	0x40013800
 80100e8:	40021000 	.word	0x40021000
 80100ec:	40004400 	.word	0x40004400
 80100f0:	40004800 	.word	0x40004800
 80100f4:	40004c00 	.word	0x40004c00
 80100f8:	40005000 	.word	0x40005000
 80100fc:	2310      	movs	r3, #16
 80100fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4aae      	ldr	r2, [pc, #696]	@ (80103c0 <UART_SetConfig+0x5bc>)
 8010108:	4293      	cmp	r3, r2
 801010a:	f040 8097 	bne.w	801023c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801010e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010112:	2b08      	cmp	r3, #8
 8010114:	d823      	bhi.n	801015e <UART_SetConfig+0x35a>
 8010116:	a201      	add	r2, pc, #4	@ (adr r2, 801011c <UART_SetConfig+0x318>)
 8010118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011c:	08010141 	.word	0x08010141
 8010120:	0801015f 	.word	0x0801015f
 8010124:	08010149 	.word	0x08010149
 8010128:	0801015f 	.word	0x0801015f
 801012c:	0801014f 	.word	0x0801014f
 8010130:	0801015f 	.word	0x0801015f
 8010134:	0801015f 	.word	0x0801015f
 8010138:	0801015f 	.word	0x0801015f
 801013c:	08010157 	.word	0x08010157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010140:	f7fd ff62 	bl	800e008 <HAL_RCC_GetPCLK1Freq>
 8010144:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010146:	e010      	b.n	801016a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010148:	4b9e      	ldr	r3, [pc, #632]	@ (80103c4 <UART_SetConfig+0x5c0>)
 801014a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801014c:	e00d      	b.n	801016a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801014e:	f7fd feed 	bl	800df2c <HAL_RCC_GetSysClockFreq>
 8010152:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010154:	e009      	b.n	801016a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801015a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801015c:	e005      	b.n	801016a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801015e:	2300      	movs	r3, #0
 8010160:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010162:	2301      	movs	r3, #1
 8010164:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010168:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801016a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016c:	2b00      	cmp	r3, #0
 801016e:	f000 8130 	beq.w	80103d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010176:	4a94      	ldr	r2, [pc, #592]	@ (80103c8 <UART_SetConfig+0x5c4>)
 8010178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801017c:	461a      	mov	r2, r3
 801017e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010180:	fbb3 f3f2 	udiv	r3, r3, r2
 8010184:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	685a      	ldr	r2, [r3, #4]
 801018a:	4613      	mov	r3, r2
 801018c:	005b      	lsls	r3, r3, #1
 801018e:	4413      	add	r3, r2
 8010190:	69ba      	ldr	r2, [r7, #24]
 8010192:	429a      	cmp	r2, r3
 8010194:	d305      	bcc.n	80101a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801019c:	69ba      	ldr	r2, [r7, #24]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d903      	bls.n	80101aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80101a2:	2301      	movs	r3, #1
 80101a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80101a8:	e113      	b.n	80103d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ac:	2200      	movs	r2, #0
 80101ae:	60bb      	str	r3, [r7, #8]
 80101b0:	60fa      	str	r2, [r7, #12]
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101b6:	4a84      	ldr	r2, [pc, #528]	@ (80103c8 <UART_SetConfig+0x5c4>)
 80101b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101bc:	b29b      	uxth	r3, r3
 80101be:	2200      	movs	r2, #0
 80101c0:	603b      	str	r3, [r7, #0]
 80101c2:	607a      	str	r2, [r7, #4]
 80101c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80101cc:	f7f0 fd84 	bl	8000cd8 <__aeabi_uldivmod>
 80101d0:	4602      	mov	r2, r0
 80101d2:	460b      	mov	r3, r1
 80101d4:	4610      	mov	r0, r2
 80101d6:	4619      	mov	r1, r3
 80101d8:	f04f 0200 	mov.w	r2, #0
 80101dc:	f04f 0300 	mov.w	r3, #0
 80101e0:	020b      	lsls	r3, r1, #8
 80101e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80101e6:	0202      	lsls	r2, r0, #8
 80101e8:	6979      	ldr	r1, [r7, #20]
 80101ea:	6849      	ldr	r1, [r1, #4]
 80101ec:	0849      	lsrs	r1, r1, #1
 80101ee:	2000      	movs	r0, #0
 80101f0:	460c      	mov	r4, r1
 80101f2:	4605      	mov	r5, r0
 80101f4:	eb12 0804 	adds.w	r8, r2, r4
 80101f8:	eb43 0905 	adc.w	r9, r3, r5
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	2200      	movs	r2, #0
 8010202:	469a      	mov	sl, r3
 8010204:	4693      	mov	fp, r2
 8010206:	4652      	mov	r2, sl
 8010208:	465b      	mov	r3, fp
 801020a:	4640      	mov	r0, r8
 801020c:	4649      	mov	r1, r9
 801020e:	f7f0 fd63 	bl	8000cd8 <__aeabi_uldivmod>
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	4613      	mov	r3, r2
 8010218:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801021a:	6a3b      	ldr	r3, [r7, #32]
 801021c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010220:	d308      	bcc.n	8010234 <UART_SetConfig+0x430>
 8010222:	6a3b      	ldr	r3, [r7, #32]
 8010224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010228:	d204      	bcs.n	8010234 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	6a3a      	ldr	r2, [r7, #32]
 8010230:	60da      	str	r2, [r3, #12]
 8010232:	e0ce      	b.n	80103d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010234:	2301      	movs	r3, #1
 8010236:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801023a:	e0ca      	b.n	80103d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	69db      	ldr	r3, [r3, #28]
 8010240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010244:	d166      	bne.n	8010314 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010246:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801024a:	2b08      	cmp	r3, #8
 801024c:	d827      	bhi.n	801029e <UART_SetConfig+0x49a>
 801024e:	a201      	add	r2, pc, #4	@ (adr r2, 8010254 <UART_SetConfig+0x450>)
 8010250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010254:	08010279 	.word	0x08010279
 8010258:	08010281 	.word	0x08010281
 801025c:	08010289 	.word	0x08010289
 8010260:	0801029f 	.word	0x0801029f
 8010264:	0801028f 	.word	0x0801028f
 8010268:	0801029f 	.word	0x0801029f
 801026c:	0801029f 	.word	0x0801029f
 8010270:	0801029f 	.word	0x0801029f
 8010274:	08010297 	.word	0x08010297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010278:	f7fd fec6 	bl	800e008 <HAL_RCC_GetPCLK1Freq>
 801027c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801027e:	e014      	b.n	80102aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010280:	f7fd fed8 	bl	800e034 <HAL_RCC_GetPCLK2Freq>
 8010284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010286:	e010      	b.n	80102aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010288:	4b4e      	ldr	r3, [pc, #312]	@ (80103c4 <UART_SetConfig+0x5c0>)
 801028a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801028c:	e00d      	b.n	80102aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801028e:	f7fd fe4d 	bl	800df2c <HAL_RCC_GetSysClockFreq>
 8010292:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010294:	e009      	b.n	80102aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801029a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801029c:	e005      	b.n	80102aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801029e:	2300      	movs	r3, #0
 80102a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80102a2:	2301      	movs	r3, #1
 80102a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80102a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80102aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	f000 8090 	beq.w	80103d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102b6:	4a44      	ldr	r2, [pc, #272]	@ (80103c8 <UART_SetConfig+0x5c4>)
 80102b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102bc:	461a      	mov	r2, r3
 80102be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80102c4:	005a      	lsls	r2, r3, #1
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	085b      	lsrs	r3, r3, #1
 80102cc:	441a      	add	r2, r3
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102d8:	6a3b      	ldr	r3, [r7, #32]
 80102da:	2b0f      	cmp	r3, #15
 80102dc:	d916      	bls.n	801030c <UART_SetConfig+0x508>
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102e4:	d212      	bcs.n	801030c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80102e6:	6a3b      	ldr	r3, [r7, #32]
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	f023 030f 	bic.w	r3, r3, #15
 80102ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80102f0:	6a3b      	ldr	r3, [r7, #32]
 80102f2:	085b      	lsrs	r3, r3, #1
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	f003 0307 	and.w	r3, r3, #7
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	8bfb      	ldrh	r3, [r7, #30]
 80102fe:	4313      	orrs	r3, r2
 8010300:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	8bfa      	ldrh	r2, [r7, #30]
 8010308:	60da      	str	r2, [r3, #12]
 801030a:	e062      	b.n	80103d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801030c:	2301      	movs	r3, #1
 801030e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010312:	e05e      	b.n	80103d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010314:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010318:	2b08      	cmp	r3, #8
 801031a:	d828      	bhi.n	801036e <UART_SetConfig+0x56a>
 801031c:	a201      	add	r2, pc, #4	@ (adr r2, 8010324 <UART_SetConfig+0x520>)
 801031e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010322:	bf00      	nop
 8010324:	08010349 	.word	0x08010349
 8010328:	08010351 	.word	0x08010351
 801032c:	08010359 	.word	0x08010359
 8010330:	0801036f 	.word	0x0801036f
 8010334:	0801035f 	.word	0x0801035f
 8010338:	0801036f 	.word	0x0801036f
 801033c:	0801036f 	.word	0x0801036f
 8010340:	0801036f 	.word	0x0801036f
 8010344:	08010367 	.word	0x08010367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010348:	f7fd fe5e 	bl	800e008 <HAL_RCC_GetPCLK1Freq>
 801034c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801034e:	e014      	b.n	801037a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010350:	f7fd fe70 	bl	800e034 <HAL_RCC_GetPCLK2Freq>
 8010354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010356:	e010      	b.n	801037a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010358:	4b1a      	ldr	r3, [pc, #104]	@ (80103c4 <UART_SetConfig+0x5c0>)
 801035a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801035c:	e00d      	b.n	801037a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801035e:	f7fd fde5 	bl	800df2c <HAL_RCC_GetSysClockFreq>
 8010362:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010364:	e009      	b.n	801037a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801036a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801036c:	e005      	b.n	801037a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801036e:	2300      	movs	r3, #0
 8010370:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010372:	2301      	movs	r3, #1
 8010374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010378:	bf00      	nop
    }

    if (pclk != 0U)
 801037a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801037c:	2b00      	cmp	r3, #0
 801037e:	d028      	beq.n	80103d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010384:	4a10      	ldr	r2, [pc, #64]	@ (80103c8 <UART_SetConfig+0x5c4>)
 8010386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801038a:	461a      	mov	r2, r3
 801038c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801038e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	085b      	lsrs	r3, r3, #1
 8010398:	441a      	add	r2, r3
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	fbb2 f3f3 	udiv	r3, r2, r3
 80103a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103a4:	6a3b      	ldr	r3, [r7, #32]
 80103a6:	2b0f      	cmp	r3, #15
 80103a8:	d910      	bls.n	80103cc <UART_SetConfig+0x5c8>
 80103aa:	6a3b      	ldr	r3, [r7, #32]
 80103ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103b0:	d20c      	bcs.n	80103cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80103b2:	6a3b      	ldr	r3, [r7, #32]
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	60da      	str	r2, [r3, #12]
 80103bc:	e009      	b.n	80103d2 <UART_SetConfig+0x5ce>
 80103be:	bf00      	nop
 80103c0:	40008000 	.word	0x40008000
 80103c4:	00f42400 	.word	0x00f42400
 80103c8:	08018b28 	.word	0x08018b28
      }
      else
      {
        ret = HAL_ERROR;
 80103cc:	2301      	movs	r3, #1
 80103ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	2201      	movs	r2, #1
 80103d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	2201      	movs	r2, #1
 80103de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	2200      	movs	r2, #0
 80103e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	2200      	movs	r2, #0
 80103ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80103ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3730      	adds	r7, #48	@ 0x30
 80103f6:	46bd      	mov	sp, r7
 80103f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080103fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010408:	f003 0308 	and.w	r3, r3, #8
 801040c:	2b00      	cmp	r3, #0
 801040e:	d00a      	beq.n	8010426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	430a      	orrs	r2, r1
 8010424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801042a:	f003 0301 	and.w	r3, r3, #1
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00a      	beq.n	8010448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	430a      	orrs	r2, r1
 8010446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801044c:	f003 0302 	and.w	r3, r3, #2
 8010450:	2b00      	cmp	r3, #0
 8010452:	d00a      	beq.n	801046a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	430a      	orrs	r2, r1
 8010468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801046e:	f003 0304 	and.w	r3, r3, #4
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00a      	beq.n	801048c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	430a      	orrs	r2, r1
 801048a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010490:	f003 0310 	and.w	r3, r3, #16
 8010494:	2b00      	cmp	r3, #0
 8010496:	d00a      	beq.n	80104ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	430a      	orrs	r2, r1
 80104ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104b2:	f003 0320 	and.w	r3, r3, #32
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00a      	beq.n	80104d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	689b      	ldr	r3, [r3, #8]
 80104c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	430a      	orrs	r2, r1
 80104ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d01a      	beq.n	8010512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	430a      	orrs	r2, r1
 80104f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80104fa:	d10a      	bne.n	8010512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	430a      	orrs	r2, r1
 8010510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00a      	beq.n	8010534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	430a      	orrs	r2, r1
 8010532:	605a      	str	r2, [r3, #4]
  }
}
 8010534:	bf00      	nop
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b098      	sub	sp, #96	@ 0x60
 8010544:	af02      	add	r7, sp, #8
 8010546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2200      	movs	r2, #0
 801054c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010550:	f7fa f8f4 	bl	800a73c <HAL_GetTick>
 8010554:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f003 0308 	and.w	r3, r3, #8
 8010560:	2b08      	cmp	r3, #8
 8010562:	d12f      	bne.n	80105c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010564:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010568:	9300      	str	r3, [sp, #0]
 801056a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801056c:	2200      	movs	r2, #0
 801056e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f88e 	bl	8010694 <UART_WaitOnFlagUntilTimeout>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d022      	beq.n	80105c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010586:	e853 3f00 	ldrex	r3, [r3]
 801058a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801058c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801058e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010592:	653b      	str	r3, [r7, #80]	@ 0x50
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	461a      	mov	r2, r3
 801059a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801059c:	647b      	str	r3, [r7, #68]	@ 0x44
 801059e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80105a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105a4:	e841 2300 	strex	r3, r2, [r1]
 80105a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80105aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1e6      	bne.n	801057e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2220      	movs	r2, #32
 80105b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80105c0:	2303      	movs	r3, #3
 80105c2:	e063      	b.n	801068c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f003 0304 	and.w	r3, r3, #4
 80105ce:	2b04      	cmp	r3, #4
 80105d0:	d149      	bne.n	8010666 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80105d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105da:	2200      	movs	r2, #0
 80105dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f000 f857 	bl	8010694 <UART_WaitOnFlagUntilTimeout>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d03c      	beq.n	8010666 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f4:	e853 3f00 	ldrex	r3, [r3]
 80105f8:	623b      	str	r3, [r7, #32]
   return(result);
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	461a      	mov	r2, r3
 8010608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801060a:	633b      	str	r3, [r7, #48]	@ 0x30
 801060c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010612:	e841 2300 	strex	r3, r2, [r1]
 8010616:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061a:	2b00      	cmp	r3, #0
 801061c:	d1e6      	bne.n	80105ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3308      	adds	r3, #8
 8010624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	e853 3f00 	ldrex	r3, [r3]
 801062c:	60fb      	str	r3, [r7, #12]
   return(result);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f023 0301 	bic.w	r3, r3, #1
 8010634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	3308      	adds	r3, #8
 801063c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801063e:	61fa      	str	r2, [r7, #28]
 8010640:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010642:	69b9      	ldr	r1, [r7, #24]
 8010644:	69fa      	ldr	r2, [r7, #28]
 8010646:	e841 2300 	strex	r3, r2, [r1]
 801064a:	617b      	str	r3, [r7, #20]
   return(result);
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d1e5      	bne.n	801061e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2220      	movs	r2, #32
 8010656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010662:	2303      	movs	r3, #3
 8010664:	e012      	b.n	801068c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2220      	movs	r2, #32
 801066a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2220      	movs	r2, #32
 8010672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2200      	movs	r2, #0
 8010680:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2200      	movs	r2, #0
 8010686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801068a:	2300      	movs	r3, #0
}
 801068c:	4618      	mov	r0, r3
 801068e:	3758      	adds	r7, #88	@ 0x58
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	60b9      	str	r1, [r7, #8]
 801069e:	603b      	str	r3, [r7, #0]
 80106a0:	4613      	mov	r3, r2
 80106a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106a4:	e04f      	b.n	8010746 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ac:	d04b      	beq.n	8010746 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106ae:	f7fa f845 	bl	800a73c <HAL_GetTick>
 80106b2:	4602      	mov	r2, r0
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	1ad3      	subs	r3, r2, r3
 80106b8:	69ba      	ldr	r2, [r7, #24]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d302      	bcc.n	80106c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d101      	bne.n	80106c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80106c4:	2303      	movs	r3, #3
 80106c6:	e04e      	b.n	8010766 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	f003 0304 	and.w	r3, r3, #4
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d037      	beq.n	8010746 <UART_WaitOnFlagUntilTimeout+0xb2>
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	2b80      	cmp	r3, #128	@ 0x80
 80106da:	d034      	beq.n	8010746 <UART_WaitOnFlagUntilTimeout+0xb2>
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	2b40      	cmp	r3, #64	@ 0x40
 80106e0:	d031      	beq.n	8010746 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	69db      	ldr	r3, [r3, #28]
 80106e8:	f003 0308 	and.w	r3, r3, #8
 80106ec:	2b08      	cmp	r3, #8
 80106ee:	d110      	bne.n	8010712 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2208      	movs	r2, #8
 80106f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 f838 	bl	801076e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2208      	movs	r2, #8
 8010702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2200      	movs	r2, #0
 801070a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801070e:	2301      	movs	r3, #1
 8010710:	e029      	b.n	8010766 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	69db      	ldr	r3, [r3, #28]
 8010718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801071c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010720:	d111      	bne.n	8010746 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801072a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f000 f81e 	bl	801076e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2220      	movs	r2, #32
 8010736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2200      	movs	r2, #0
 801073e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010742:	2303      	movs	r3, #3
 8010744:	e00f      	b.n	8010766 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	69da      	ldr	r2, [r3, #28]
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	4013      	ands	r3, r2
 8010750:	68ba      	ldr	r2, [r7, #8]
 8010752:	429a      	cmp	r2, r3
 8010754:	bf0c      	ite	eq
 8010756:	2301      	moveq	r3, #1
 8010758:	2300      	movne	r3, #0
 801075a:	b2db      	uxtb	r3, r3
 801075c:	461a      	mov	r2, r3
 801075e:	79fb      	ldrb	r3, [r7, #7]
 8010760:	429a      	cmp	r2, r3
 8010762:	d0a0      	beq.n	80106a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801076e:	b480      	push	{r7}
 8010770:	b095      	sub	sp, #84	@ 0x54
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801077c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801077e:	e853 3f00 	ldrex	r3, [r3]
 8010782:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	461a      	mov	r2, r3
 8010792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010794:	643b      	str	r3, [r7, #64]	@ 0x40
 8010796:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010798:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801079a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801079c:	e841 2300 	strex	r3, r2, [r1]
 80107a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80107a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d1e6      	bne.n	8010776 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	3308      	adds	r3, #8
 80107ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b0:	6a3b      	ldr	r3, [r7, #32]
 80107b2:	e853 3f00 	ldrex	r3, [r3]
 80107b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80107be:	f023 0301 	bic.w	r3, r3, #1
 80107c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	3308      	adds	r3, #8
 80107ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80107ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80107d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107d4:	e841 2300 	strex	r3, r2, [r1]
 80107d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80107da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d1e3      	bne.n	80107a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d118      	bne.n	801081a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	e853 3f00 	ldrex	r3, [r3]
 80107f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	f023 0310 	bic.w	r3, r3, #16
 80107fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	461a      	mov	r2, r3
 8010804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010806:	61bb      	str	r3, [r7, #24]
 8010808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801080a:	6979      	ldr	r1, [r7, #20]
 801080c:	69ba      	ldr	r2, [r7, #24]
 801080e:	e841 2300 	strex	r3, r2, [r1]
 8010812:	613b      	str	r3, [r7, #16]
   return(result);
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1e6      	bne.n	80107e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2220      	movs	r2, #32
 801081e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801082e:	bf00      	nop
 8010830:	3754      	adds	r7, #84	@ 0x54
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr

0801083a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b084      	sub	sp, #16
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2200      	movs	r2, #0
 801084c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2200      	movs	r2, #0
 8010854:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f7ff fabd 	bl	800fdd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801085e:	bf00      	nop
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010866:	b580      	push	{r7, lr}
 8010868:	b088      	sub	sp, #32
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	e853 3f00 	ldrex	r3, [r3]
 801087a:	60bb      	str	r3, [r7, #8]
   return(result);
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010882:	61fb      	str	r3, [r7, #28]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	461a      	mov	r2, r3
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	61bb      	str	r3, [r7, #24]
 801088e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010890:	6979      	ldr	r1, [r7, #20]
 8010892:	69ba      	ldr	r2, [r7, #24]
 8010894:	e841 2300 	strex	r3, r2, [r1]
 8010898:	613b      	str	r3, [r7, #16]
   return(result);
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d1e6      	bne.n	801086e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2220      	movs	r2, #32
 80108a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7ff fa88 	bl	800fdc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108b4:	bf00      	nop
 80108b6:	3720      	adds	r7, #32
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80108c4:	bf00      	nop
 80108c6:	370c      	adds	r7, #12
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b083      	sub	sp, #12
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80108d8:	bf00      	nop
 80108da:	370c      	adds	r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b083      	sub	sp, #12
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80108ec:	bf00      	nop
 80108ee:	370c      	adds	r7, #12
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010906:	2b01      	cmp	r3, #1
 8010908:	d101      	bne.n	801090e <HAL_UARTEx_DisableFifoMode+0x16>
 801090a:	2302      	movs	r3, #2
 801090c:	e027      	b.n	801095e <HAL_UARTEx_DisableFifoMode+0x66>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2201      	movs	r2, #1
 8010912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2224      	movs	r2, #36	@ 0x24
 801091a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f022 0201 	bic.w	r2, r2, #1
 8010934:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801093c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2200      	movs	r2, #0
 8010942:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2220      	movs	r2, #32
 8010950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2200      	movs	r2, #0
 8010958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3714      	adds	r7, #20
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr

0801096a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b084      	sub	sp, #16
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
 8010972:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801097a:	2b01      	cmp	r3, #1
 801097c:	d101      	bne.n	8010982 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801097e:	2302      	movs	r3, #2
 8010980:	e02d      	b.n	80109de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2201      	movs	r2, #1
 8010986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2224      	movs	r2, #36	@ 0x24
 801098e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f022 0201 	bic.w	r2, r2, #1
 80109a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	430a      	orrs	r2, r1
 80109bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f850 	bl	8010a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2220      	movs	r2, #32
 80109d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b084      	sub	sp, #16
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
 80109ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d101      	bne.n	80109fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80109fa:	2302      	movs	r3, #2
 80109fc:	e02d      	b.n	8010a5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2201      	movs	r2, #1
 8010a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2224      	movs	r2, #36	@ 0x24
 8010a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	681a      	ldr	r2, [r3, #0]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f022 0201 	bic.w	r2, r2, #1
 8010a24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	683a      	ldr	r2, [r7, #0]
 8010a36:	430a      	orrs	r2, r1
 8010a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 f812 	bl	8010a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	68fa      	ldr	r2, [r7, #12]
 8010a46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2220      	movs	r2, #32
 8010a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a58:	2300      	movs	r3, #0
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
	...

08010a64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b085      	sub	sp, #20
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d108      	bne.n	8010a86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2201      	movs	r2, #1
 8010a78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010a84:	e031      	b.n	8010aea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010a86:	2308      	movs	r3, #8
 8010a88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010a8a:	2308      	movs	r3, #8
 8010a8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	689b      	ldr	r3, [r3, #8]
 8010a94:	0e5b      	lsrs	r3, r3, #25
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	f003 0307 	and.w	r3, r3, #7
 8010a9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	689b      	ldr	r3, [r3, #8]
 8010aa4:	0f5b      	lsrs	r3, r3, #29
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	f003 0307 	and.w	r3, r3, #7
 8010aac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010aae:	7bbb      	ldrb	r3, [r7, #14]
 8010ab0:	7b3a      	ldrb	r2, [r7, #12]
 8010ab2:	4911      	ldr	r1, [pc, #68]	@ (8010af8 <UARTEx_SetNbDataToProcess+0x94>)
 8010ab4:	5c8a      	ldrb	r2, [r1, r2]
 8010ab6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010aba:	7b3a      	ldrb	r2, [r7, #12]
 8010abc:	490f      	ldr	r1, [pc, #60]	@ (8010afc <UARTEx_SetNbDataToProcess+0x98>)
 8010abe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010acc:	7bfb      	ldrb	r3, [r7, #15]
 8010ace:	7b7a      	ldrb	r2, [r7, #13]
 8010ad0:	4909      	ldr	r1, [pc, #36]	@ (8010af8 <UARTEx_SetNbDataToProcess+0x94>)
 8010ad2:	5c8a      	ldrb	r2, [r1, r2]
 8010ad4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010ad8:	7b7a      	ldrb	r2, [r7, #13]
 8010ada:	4908      	ldr	r1, [pc, #32]	@ (8010afc <UARTEx_SetNbDataToProcess+0x98>)
 8010adc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ade:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010aea:	bf00      	nop
 8010aec:	3714      	adds	r7, #20
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	08018b40 	.word	0x08018b40
 8010afc:	08018b48 	.word	0x08018b48

08010b00 <_ZN17AbstractAllocatorD1Ev>:
    virtual void* allocate(CanardInstance* ins, size_t amount) = 0;
    virtual void free(CanardInstance* ins, void* pointer) = 0;
    virtual ~AbstractAllocator() {}
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	4a04      	ldr	r2, [pc, #16]	@ (8010b1c <_ZN17AbstractAllocatorD1Ev+0x1c>)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	601a      	str	r2, [r3, #0]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	4618      	mov	r0, r3
 8010b12:	370c      	adds	r7, #12
 8010b14:	46bd      	mov	sp, r7
 8010b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1a:	4770      	bx	lr
 8010b1c:	08018ad4 	.word	0x08018ad4

08010b20 <_ZN17AbstractAllocatorD0Ev>:
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f7ff ffe9 	bl	8010b00 <_ZN17AbstractAllocatorD1Ev>
 8010b2e:	2108      	movs	r1, #8
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f002 fe7a 	bl	801382a <_ZdlPvj>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3708      	adds	r7, #8
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <_ZN15SystemAllocator8allocateEP14CanardInstancej>:
#include <cyphal/allocators/sys/sys_allocator.h>
#include <cstdlib>

void* SystemAllocator::allocate(CanardInstance* const ins, const size_t amount) {
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b086      	sub	sp, #24
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
    (void)ins;
    void* mem;

    CRITICAL_SECTION({ mem = std::malloc(amount); })
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f002 fec5 	bl	80138dc <malloc>
 8010b52:	4603      	mov	r3, r0
 8010b54:	617b      	str	r3, [r7, #20]
    if (mem == nullptr) {
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d105      	bne.n	8010b68 <_ZN15SystemAllocator8allocateEP14CanardInstancej+0x28>
        utilities.error_handler();
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	3310      	adds	r3, #16
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7f7 faee 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
    }
    return mem;
 8010b68:	697b      	ldr	r3, [r7, #20]
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3718      	adds	r7, #24
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}

08010b72 <_ZN15SystemAllocator4freeEP14CanardInstancePv>:

void SystemAllocator::free(CanardInstance* const ins, void* const pointer) {
 8010b72:	b580      	push	{r7, lr}
 8010b74:	b084      	sub	sp, #16
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	60f8      	str	r0, [r7, #12]
 8010b7a:	60b9      	str	r1, [r7, #8]
 8010b7c:	607a      	str	r2, [r7, #4]
    (void)ins;
    CRITICAL_SECTION({ std::free(pointer); })
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f002 feb4 	bl	80138ec <free>
}
 8010b84:	bf00      	nop
 8010b86:	3710      	adds	r7, #16
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <_ZN15SystemAllocatorD1Ev>:
class SystemAllocator : public AbstractAllocator {
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	4a05      	ldr	r2, [pc, #20]	@ (8010bac <_ZN15SystemAllocatorD1Ev+0x20>)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	601a      	str	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7ff ffaf 	bl	8010b00 <_ZN17AbstractAllocatorD1Ev>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3708      	adds	r7, #8
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	08018b58 	.word	0x08018b58

08010bb0 <_ZN15SystemAllocatorD0Ev>:
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7ff ffe7 	bl	8010b8c <_ZN15SystemAllocatorD1Ev>
 8010bbe:	2108      	movs	r1, #8
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f002 fe32 	bl	801382a <_ZdlPvj>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3708      	adds	r7, #8
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 8010bd0:	b590      	push	{r4, r7, lr}
 8010bd2:	b08b      	sub	sp, #44	@ 0x2c
 8010bd4:	af04      	add	r7, sp, #16
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	3308      	adds	r3, #8
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 f876 	bl	8010cd2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010be6:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 8010be8:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	3308      	adds	r3, #8
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f000 f86e 	bl	8010cd2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010bf6:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 8010bf8:	f103 0120 	add.w	r1, r3, #32
 8010bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bfe:	9302      	str	r3, [sp, #8]
 8010c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c02:	9301      	str	r3, [sp, #4]
 8010c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c06:	9300      	str	r3, [sp, #0]
 8010c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f002 fb65 	bl	80132dc <canardTxPush>
 8010c12:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	f113 0f03 	cmn.w	r3, #3
 8010c1a:	d106      	bne.n	8010c2a <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	3310      	adds	r3, #16
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7f7 fa8e 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 8010c28:	e008      	b.n	8010c3c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	da05      	bge.n	8010c3c <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	3310      	adds	r3, #16
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f7 fa84 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8010c3c:	371c      	adds	r7, #28
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd90      	pop	{r4, r7, pc}
	...

08010c44 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription>:
void CyphalInterface::subscribe(
    CanardPortID port_id,
    size_t extent,
    CanardTransferKind kind,
    CanardRxSubscription* subscription
) const {
 8010c44:	b590      	push	{r4, r7, lr}
 8010c46:	b089      	sub	sp, #36	@ 0x24
 8010c48:	af04      	add	r7, sp, #16
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	607a      	str	r2, [r7, #4]
 8010c4e:	461a      	mov	r2, r3
 8010c50:	460b      	mov	r3, r1
 8010c52:	817b      	strh	r3, [r7, #10]
 8010c54:	4613      	mov	r3, r2
 8010c56:	727b      	strb	r3, [r7, #9]
    if (canardRxSubscribe(
            (CanardInstance* const)&provider->canard,
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	3308      	adds	r3, #8
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f000 f838 	bl	8010cd2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010c62:	4603      	mov	r3, r0
    if (canardRxSubscribe(
 8010c64:	f103 0020 	add.w	r0, r3, #32
 8010c68:	897c      	ldrh	r4, [r7, #10]
 8010c6a:	7a79      	ldrb	r1, [r7, #9]
 8010c6c:	6a3b      	ldr	r3, [r7, #32]
 8010c6e:	9302      	str	r3, [sp, #8]
 8010c70:	4a0d      	ldr	r2, [pc, #52]	@ (8010ca8 <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x64>)
 8010c72:	f04f 0300 	mov.w	r3, #0
 8010c76:	e9cd 2300 	strd	r2, r3, [sp]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4622      	mov	r2, r4
 8010c7e:	f002 fc7d 	bl	801357c <canardRxSubscribe>
 8010c82:	4603      	mov	r3, r0
            kind,
            port_id,
            extent,
            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
            subscription
        ) != 1) {
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	bf14      	ite	ne
 8010c88:	2301      	movne	r3, #1
 8010c8a:	2300      	moveq	r3, #0
 8010c8c:	b2db      	uxtb	r3, r3
    if (canardRxSubscribe(
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d005      	beq.n	8010c9e <_ZNK15CyphalInterface9subscribeEtj18CanardTransferKindP20CanardRxSubscription+0x5a>
        utilities.error_handler();
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	3310      	adds	r3, #16
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7f7 fa53 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
    }
}
 8010c9e:	bf00      	nop
 8010ca0:	3714      	adds	r7, #20
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd90      	pop	{r4, r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	001e8480 	.word	0x001e8480

08010cac <_ZN15CyphalInterface4loopEv>:

void CyphalInterface::loop() {
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	3308      	adds	r3, #8
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f000 f80a 	bl	8010cd2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	681a      	ldr	r2, [r3, #0]
 8010cc2:	3208      	adds	r2, #8
 8010cc4:	6812      	ldr	r2, [r2, #0]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	4790      	blx	r2
}
 8010cca:	bf00      	nop
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}

08010cd2 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      operator->() const noexcept
 8010cd2:	b580      	push	{r7, lr}
 8010cd4:	b082      	sub	sp, #8
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
      {
	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
	return get();
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 f805 	bl	8010cea <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 8010ce0:	4603      	mov	r3, r0
      }
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3708      	adds	r7, #8
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b082      	sub	sp, #8
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f000 f805 	bl	8010d04 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f000 f806 	bl	8010d20 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010d14:	4603      	mov	r3, r0
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f000 f805 	bl	8010d3a <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010d30:	4603      	mov	r3, r0
 8010d32:	4618      	mov	r0, r3
 8010d34:	3708      	adds	r7, #8
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}

08010d3a <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010d3a:	b580      	push	{r7, lr}
 8010d3c:	b082      	sub	sp, #8
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 f805 	bl	8010d52 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3708      	adds	r7, #8
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b082      	sub	sp, #8
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f000 f805 	bl	8010d6c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 8010d62:	4603      	mov	r3, r0
 8010d64:	4618      	mov	r0, r3
 8010d66:	3708      	adds	r7, #8
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	4618      	mov	r0, r3
 8010d78:	370c      	adds	r7, #12
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr

08010d82 <_Z16fdcan_dlc_to_lenm>:
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
    FDCAN_DLC_BYTES_64,
};

size_t fdcan_dlc_to_len(uint32_t dlc) {
 8010d82:	b480      	push	{r7}
 8010d84:	b085      	sub	sp, #20
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
    auto dlc_index = (uint8_t)(dlc / 65536);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	0c1b      	lsrs	r3, r3, #16
 8010d8e:	73fb      	strb	r3, [r7, #15]
    if (dlc_index <= 8) {
 8010d90:	7bfb      	ldrb	r3, [r7, #15]
 8010d92:	2b08      	cmp	r3, #8
 8010d94:	d801      	bhi.n	8010d9a <_Z16fdcan_dlc_to_lenm+0x18>
        return dlc_index;
 8010d96:	7bfb      	ldrb	r3, [r7, #15]
 8010d98:	e009      	b.n	8010dae <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    if (dlc_index <= 12) {
 8010d9a:	7bfb      	ldrb	r3, [r7, #15]
 8010d9c:	2b0c      	cmp	r3, #12
 8010d9e:	d803      	bhi.n	8010da8 <_Z16fdcan_dlc_to_lenm+0x26>
        return 8 + 4 * (dlc_index - 8);
 8010da0:	7bfb      	ldrb	r3, [r7, #15]
 8010da2:	3b06      	subs	r3, #6
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	e002      	b.n	8010dae <_Z16fdcan_dlc_to_lenm+0x2c>
    }
    return 32 + 16 * (dlc_index - 13);
 8010da8:	7bfb      	ldrb	r3, [r7, #15]
 8010daa:	3b0b      	subs	r3, #11
 8010dac:	011b      	lsls	r3, r3, #4
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3714      	adds	r7, #20
 8010db2:	46bd      	mov	sp, r7
 8010db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db8:	4770      	bx	lr
	...

08010dbc <_ZL12delay_cyclest>:
       bne     .L3               // 1 + 1-3 такта, в среднем 2(3?)
     *
     * Всего 5 тактов на цикл + 8 в начале.
     */

    uint8_t real_cycles = (cycles - 8) / 5;
 8010dbc:	f1a0 0308 	sub.w	r3, r0, #8
 8010dc0:	4a07      	ldr	r2, [pc, #28]	@ (8010de0 <_ZL12delay_cyclest+0x24>)
 8010dc2:	fb82 1203 	smull	r1, r2, r2, r3
 8010dc6:	17db      	asrs	r3, r3, #31
 8010dc8:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    while (real_cycles--) {
 8010dcc:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8010dd0:	d004      	beq.n	8010ddc <_ZL12delay_cyclest+0x20>
        __asm__("nop");
 8010dd2:	bf00      	nop
    while (real_cycles--) {
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8010dda:	d1fa      	bne.n	8010dd2 <_ZL12delay_cyclest+0x16>
    }
}
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	66666667 	.word	0x66666667

08010de4 <_ZN5G4CAN10len_to_dlcEj>:
#if (defined(STM32G474xx) || defined(STM32_G)) && defined(HAL_FDCAN_MODULE_ENABLED)
#include <cstring>

#include <cyphal/providers/FDCAN_generic.h>

uint32_t G4CAN::len_to_dlc(size_t len) {
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
    return CanardFDCANLengthToDLC[len];
 8010dee:	4a05      	ldr	r2, [pc, #20]	@ (8010e04 <_ZN5G4CAN10len_to_dlcEj+0x20>)
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	370c      	adds	r7, #12
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	08018b68 	.word	0x08018b68

08010e08 <_ZN5G4CAN10dlc_to_lenEm>:

size_t G4CAN::dlc_to_len(uint32_t dlc) {
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
    return fdcan_dlc_to_len(dlc);
 8010e12:	6838      	ldr	r0, [r7, #0]
 8010e14:	f7ff ffb5 	bl	8010d82 <_Z16fdcan_dlc_to_lenm>
 8010e18:	4603      	mov	r3, r0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <_ZN5G4CAN8can_loopEv>:

void G4CAN::can_loop() {
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b086      	sub	sp, #24
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 8010e2a:	e017      	b.n	8010e5c <_ZN5G4CAN8can_loopEv+0x3a>
        CanardFrame frame;
        bool has_read = read_frame(&frame);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	330c      	adds	r3, #12
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f107 0208 	add.w	r2, r7, #8
 8010e38:	4611      	mov	r1, r2
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	4798      	blx	r3
 8010e3e:	4603      	mov	r3, r0
 8010e40:	75fb      	strb	r3, [r7, #23]
        if (!has_read)
 8010e42:	7dfb      	ldrb	r3, [r7, #23]
 8010e44:	f083 0301 	eor.w	r3, r3, #1
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d115      	bne.n	8010e7a <_ZN5G4CAN8can_loopEv+0x58>
            break;
        process_canard_rx(&frame);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f107 0208 	add.w	r2, r7, #8
 8010e54:	4611      	mov	r1, r2
 8010e56:	4618      	mov	r0, r3
 8010e58:	f000 f904 	bl	8011064 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>
    while (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0) != 0) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e60:	2140      	movs	r1, #64	@ 0x40
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fa fb9e 	bl	800b5a4 <HAL_FDCAN_GetRxFifoFillLevel>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	bf14      	ite	ne
 8010e6e:	2301      	movne	r3, #1
 8010e70:	2300      	moveq	r3, #0
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1d9      	bne.n	8010e2c <_ZN5G4CAN8can_loopEv+0xa>
 8010e78:	e000      	b.n	8010e7c <_ZN5G4CAN8can_loopEv+0x5a>
            break;
 8010e7a:	bf00      	nop
    }

    process_canard_tx();
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f000 f944 	bl	801110c <_ZN19AbstractCANProvider17process_canard_txEv>
}
 8010e84:	bf00      	nop
 8010e86:	3718      	adds	r7, #24
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <_ZN5G4CAN10read_frameEP11CanardFrame>:

static uint8_t RxData[64] = {};
bool G4CAN::read_frame(CanardFrame* rxf) {
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b08e      	sub	sp, #56	@ 0x38
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
    uint32_t rx_fifo = -1;
 8010e96:	f04f 33ff 	mov.w	r3, #4294967295
 8010e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO0)) {
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ea0:	2140      	movs	r1, #64	@ 0x40
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fa fb7e 	bl	800b5a4 <HAL_FDCAN_GetRxFifoFillLevel>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	bf14      	ite	ne
 8010eae:	2301      	movne	r3, #1
 8010eb0:	2300      	moveq	r3, #0
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d002      	beq.n	8010ebe <_ZN5G4CAN10read_frameEP11CanardFrame+0x32>
        rx_fifo = FDCAN_RX_FIFO0;
 8010eb8:	2340      	movs	r3, #64	@ 0x40
 8010eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ebc:	e00f      	b.n	8010ede <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
    } else if (HAL_FDCAN_GetRxFifoFillLevel(handler, FDCAN_RX_FIFO1)) {
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ec2:	2141      	movs	r1, #65	@ 0x41
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7fa fb6d 	bl	800b5a4 <HAL_FDCAN_GetRxFifoFillLevel>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	bf14      	ite	ne
 8010ed0:	2301      	movne	r3, #1
 8010ed2:	2300      	moveq	r3, #0
 8010ed4:	b2db      	uxtb	r3, r3
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d001      	beq.n	8010ede <_ZN5G4CAN10read_frameEP11CanardFrame+0x52>
        rx_fifo = FDCAN_RX_FIFO1;
 8010eda:	2341      	movs	r3, #65	@ 0x41
 8010edc:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if (rx_fifo == (uint32_t)-1) {
 8010ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ee4:	d101      	bne.n	8010eea <_ZN5G4CAN10read_frameEP11CanardFrame+0x5e>
        return false;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e02e      	b.n	8010f48 <_ZN5G4CAN10read_frameEP11CanardFrame+0xbc>
    }

    FDCAN_RxHeaderTypeDef RxHeader = {};
 8010eea:	f107 030c 	add.w	r3, r7, #12
 8010eee:	2228      	movs	r2, #40	@ 0x28
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f003 fd7d 	bl	80149f2 <memset>
    if (HAL_FDCAN_GetRxMessage(handler, rx_fifo, &RxHeader, RxData) != HAL_OK) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010efc:	f107 020c 	add.w	r2, r7, #12
 8010f00:	4b13      	ldr	r3, [pc, #76]	@ (8010f50 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010f02:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010f04:	f7fa fa74 	bl	800b3f0 <HAL_FDCAN_GetRxMessage>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	bf14      	ite	ne
 8010f0e:	2301      	movne	r3, #1
 8010f10:	2300      	moveq	r3, #0
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d005      	beq.n	8010f24 <_ZN5G4CAN10read_frameEP11CanardFrame+0x98>
        utilities.error_handler();
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f1c:	3310      	adds	r3, #16
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7f7 f910 	bl	8008144 <_ZNKSt8functionIFvvEEclEv>
    }

    rxf->extended_can_id = RxHeader.Identifier;
 8010f24:	68fa      	ldr	r2, [r7, #12]
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	601a      	str	r2, [r3, #0]
    rxf->payload_size = dlc_to_len(RxHeader.DataLength);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	3304      	adds	r3, #4
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	69ba      	ldr	r2, [r7, #24]
 8010f34:	4611      	mov	r1, r2
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	4798      	blx	r3
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	605a      	str	r2, [r3, #4]
    rxf->payload = (void*)RxData;
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	4a03      	ldr	r2, [pc, #12]	@ (8010f50 <_ZN5G4CAN10read_frameEP11CanardFrame+0xc4>)
 8010f44:	609a      	str	r2, [r3, #8]
    return true;
 8010f46:	2301      	movs	r3, #1
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3738      	adds	r7, #56	@ 0x38
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	2000096c 	.word	0x2000096c

08010f54 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem>:

int G4CAN::write_frame(const CanardTxQueueItem* ti) {
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b08c      	sub	sp, #48	@ 0x30
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = ti->frame.extended_can_id;
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	6a1b      	ldr	r3, [r3, #32]
 8010f62:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8010f64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010f68:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = CanardFDCANLengthToDLC[ti->frame.payload_size];
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f72:	4a2a      	ldr	r2, [pc, #168]	@ (801101c <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xc8>)
 8010f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f78:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8010f7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010f82:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8010f84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010f88:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8010f8a:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.MessageMarker = 0x0;
 8010f90:	2300      	movs	r3, #0
 8010f92:	62bb      	str	r3, [r7, #40]	@ 0x28

    // all mailboxes should be free -
    // https://forum.opencyphal.org/t/uavcan-v0-found-data-transfer-reversal/1476/6
    // "Reduce the number of enqueued frames to 1" - fix to inner priority inversion
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 8010f94:	2300      	movs	r3, #0
 8010f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f98:	e006      	b.n	8010fa8 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x54>
        delay_cycles(ONE_FULL_FRAME_CYCLES);
 8010f9a:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8010f9e:	f7ff ff0d 	bl	8010dbc <_ZL12delay_cyclest>
    for (int i = 0; HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3 && i < 3; i++) {
 8010fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fa fb17 	bl	800b5e0 <HAL_FDCAN_GetTxFifoFreeLevel>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b03      	cmp	r3, #3
 8010fb6:	d004      	beq.n	8010fc2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8010fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fba:	2b02      	cmp	r3, #2
 8010fbc:	dc01      	bgt.n	8010fc2 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x6e>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e000      	b.n	8010fc4 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x70>
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d1e8      	bne.n	8010f9a <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x46>
    } // wait for message to transmit
    if (HAL_FDCAN_GetTxFifoFreeLevel(handler) != 3) {
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fa fb07 	bl	800b5e0 <HAL_FDCAN_GetTxFifoFreeLevel>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	2b03      	cmp	r3, #3
 8010fd6:	bf14      	ite	ne
 8010fd8:	2301      	movne	r3, #1
 8010fda:	2300      	moveq	r3, #0
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d002      	beq.n	8010fe8 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0x94>
        return -1;
 8010fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe6:	e014      	b.n	8011012 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }

    if (HAL_FDCAN_AddMessageToTxFifoQ(handler, &TxHeader, (uint8_t *)ti->frame.payload) != HAL_OK) {
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010ff0:	f107 0308 	add.w	r3, r7, #8
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	f7fa f9b7 	bl	800b368 <HAL_FDCAN_AddMessageToTxFifoQ>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	bf14      	ite	ne
 8011000:	2301      	movne	r3, #1
 8011002:	2300      	moveq	r3, #0
 8011004:	b2db      	uxtb	r3, r3
 8011006:	2b00      	cmp	r3, #0
 8011008:	d002      	beq.n	8011010 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbc>
        return -1;
 801100a:	f04f 33ff 	mov.w	r3, #4294967295
 801100e:	e000      	b.n	8011012 <_ZN5G4CAN11write_frameEPK17CanardTxQueueItem+0xbe>
    }
    return TxHeader.DataLength;
 8011010:	697b      	ldr	r3, [r7, #20]
}
 8011012:	4618      	mov	r0, r3
 8011014:	3730      	adds	r7, #48	@ 0x30
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	08018b68 	.word	0x08018b68

08011020 <_ZN5G4CAND1Ev>:
class G4CAN : public AbstractCANProvider {
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	4a05      	ldr	r2, [pc, #20]	@ (8011040 <_ZN5G4CAND1Ev+0x20>)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	601a      	str	r2, [r3, #0]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4618      	mov	r0, r3
 8011032:	f000 f8b1 	bl	8011198 <_ZN19AbstractCANProviderD1Ev>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	4618      	mov	r0, r3
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	08018c74 	.word	0x08018c74

08011044 <_ZN5G4CAND0Ev>:
 8011044:	b580      	push	{r7, lr}
 8011046:	b082      	sub	sp, #8
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f7ff ffe7 	bl	8011020 <_ZN5G4CAND1Ev>
 8011052:	2144      	movs	r1, #68	@ 0x44
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f002 fbe8 	bl	801382a <_ZdlPvj>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	4618      	mov	r0, r3
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame>:
CanardInstance canard{};

std::unique_ptr<AbstractAllocator> _alloc_ptr;


void AbstractCANProvider::process_canard_rx(CanardFrame* frame) {
 8011064:	b590      	push	{r4, r7, lr}
 8011066:	b091      	sub	sp, #68	@ 0x44
 8011068:	af04      	add	r7, sp, #16
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
    CanardRxTransfer transfer = {.payload = nullptr};
 801106e:	f107 0310 	add.w	r3, r7, #16
 8011072:	2200      	movs	r2, #0
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	605a      	str	r2, [r3, #4]
 8011078:	609a      	str	r2, [r3, #8]
 801107a:	60da      	str	r2, [r3, #12]
 801107c:	611a      	str	r2, [r3, #16]
 801107e:	615a      	str	r2, [r3, #20]
    CanardRxSubscription* subscription = nullptr;
 8011080:	2300      	movs	r3, #0
 8011082:	60fb      	str	r3, [r7, #12]

    const int8_t accept_result = canardRxAccept(
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f103 0420 	add.w	r4, r3, #32
        (CanardInstance* const)&canard,
        utilities.micros_64(),
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    const int8_t accept_result = canardRxAccept(
 801108e:	4618      	mov	r0, r3
 8011090:	f7f7 f86e 	bl	8008170 <_ZNKSt8functionIFyvEEclEv>
 8011094:	4602      	mov	r2, r0
 8011096:	460b      	mov	r3, r1
 8011098:	f107 010c 	add.w	r1, r7, #12
 801109c:	9103      	str	r1, [sp, #12]
 801109e:	f107 0110 	add.w	r1, r7, #16
 80110a2:	9102      	str	r1, [sp, #8]
 80110a4:	2100      	movs	r1, #0
 80110a6:	9101      	str	r1, [sp, #4]
 80110a8:	6839      	ldr	r1, [r7, #0]
 80110aa:	9100      	str	r1, [sp, #0]
 80110ac:	4620      	mov	r0, r4
 80110ae:	f002 f9d5 	bl	801345c <canardRxAccept>
 80110b2:	4603      	mov	r3, r0
 80110b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        frame,
        0,
        &transfer,
        &subscription
    );
    if (accept_result == 1) {
 80110b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d10e      	bne.n	80110de <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x7a>
        IListener<CanardRxTransfer*>* listener = reinterpret_cast<IListener<CanardRxTransfer*>*>(subscription->user_reference);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	6a1b      	ldr	r3, [r3, #32]
 80110c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (listener != nullptr) {
 80110c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d010      	beq.n	80110ee <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
            listener->accept(&transfer);
 80110cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f107 0210 	add.w	r2, r7, #16
 80110d6:	4611      	mov	r1, r2
 80110d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110da:	4798      	blx	r3
 80110dc:	e007      	b.n	80110ee <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0x8a>
        }
    }
    else if (accept_result == 0 || accept_result > 1) {
 80110de:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00e      	beq.n	8011104 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
 80110e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	dc0a      	bgt.n	8011104 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa0>
        // The received frame is either invalid or it's a non-last frame of a multi-frame transfer.
        return;
    }

    if (transfer.payload != nullptr) {
 80110ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d008      	beq.n	8011106 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        canard.memory_free(&canard, transfer.payload);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	3220      	adds	r2, #32
 80110fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80110fe:	4610      	mov	r0, r2
 8011100:	4798      	blx	r3
 8011102:	e000      	b.n	8011106 <_ZN19AbstractCANProvider17process_canard_rxEP11CanardFrame+0xa2>
        return;
 8011104:	bf00      	nop
    }
}
 8011106:	3734      	adds	r7, #52	@ 0x34
 8011108:	46bd      	mov	sp, r7
 801110a:	bd90      	pop	{r4, r7, pc}

0801110c <_ZN19AbstractCANProvider17process_canard_txEv>:

void AbstractCANProvider::process_canard_tx() {
 801110c:	b5b0      	push	{r4, r5, r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
    // Look at top of the TX queue of individual CAN frames
    while (queue.size != 0) {
 8011114:	e036      	b.n	8011184 <_ZN19AbstractCANProvider17process_canard_txEv+0x78>
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	330c      	adds	r3, #12
 801111a:	4618      	mov	r0, r3
 801111c:	f002 f968 	bl	80133f0 <canardTxPeek>
 8011120:	60f8      	str	r0, [r7, #12]

        if (0U == ti->tx_deadline_usec || ti->tx_deadline_usec > utilities.micros_64()) {
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8011128:	4313      	orrs	r3, r2
 801112a:	d00c      	beq.n	8011146 <_ZN19AbstractCANProvider17process_canard_txEv+0x3a>
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011136:	4618      	mov	r0, r3
 8011138:	f7f7 f81a 	bl	8008170 <_ZNKSt8functionIFyvEEclEv>
 801113c:	4602      	mov	r2, r0
 801113e:	460b      	mov	r3, r1
 8011140:	42a2      	cmp	r2, r4
 8011142:	41ab      	sbcs	r3, r5
 8011144:	d201      	bcs.n	801114a <_ZN19AbstractCANProvider17process_canard_txEv+0x3e>
 8011146:	2301      	movs	r3, #1
 8011148:	e000      	b.n	801114c <_ZN19AbstractCANProvider17process_canard_txEv+0x40>
 801114a:	2300      	movs	r3, #0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00a      	beq.n	8011166 <_ZN19AbstractCANProvider17process_canard_txEv+0x5a>
            int written = write_frame(ti);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	3310      	adds	r3, #16
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	68f9      	ldr	r1, [r7, #12]
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	4798      	blx	r3
 801115e:	60b8      	str	r0, [r7, #8]
            if (written < 0) {
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	2b00      	cmp	r3, #0
 8011164:	db13      	blt.n	801118e <_ZN19AbstractCANProvider17process_canard_txEv+0x82>
                break;
            }
        }
        // After the frame is transmitted or if it has timed out while waiting,
        // pop it from the queue and deallocate:
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f103 0520 	add.w	r5, r3, #32
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	330c      	adds	r3, #12
 8011174:	68f9      	ldr	r1, [r7, #12]
 8011176:	4618      	mov	r0, r3
 8011178:	f002 f94f 	bl	801341a <canardTxPop>
 801117c:	4603      	mov	r3, r0
 801117e:	4619      	mov	r1, r3
 8011180:	4628      	mov	r0, r5
 8011182:	47a0      	blx	r4
    while (queue.size != 0) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	695b      	ldr	r3, [r3, #20]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d1c4      	bne.n	8011116 <_ZN19AbstractCANProvider17process_canard_txEv+0xa>
    }
}
 801118c:	e000      	b.n	8011190 <_ZN19AbstractCANProvider17process_canard_txEv+0x84>
                break;
 801118e:	bf00      	nop
}
 8011190:	bf00      	nop
 8011192:	3710      	adds	r7, #16
 8011194:	46bd      	mov	sp, r7
 8011196:	bdb0      	pop	{r4, r5, r7, pc}

08011198 <_ZN19AbstractCANProviderD1Ev>:

AbstractCANProvider::~AbstractCANProvider() {
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	4a04      	ldr	r2, [pc, #16]	@ (80111b4 <_ZN19AbstractCANProviderD1Ev+0x1c>)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	601a      	str	r2, [r3, #0]

}
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	4618      	mov	r0, r3
 80111aa:	370c      	adds	r7, #12
 80111ac:	46bd      	mov	sp, r7
 80111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b2:	4770      	bx	lr
 80111b4:	08018c98 	.word	0x08018c98

080111b8 <_Z41__static_initialization_and_destruction_0ii>:
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d107      	bne.n	80111d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d102      	bne.n	80111d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80111d2:	4803      	ldr	r0, [pc, #12]	@ (80111e0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80111d4:	f000 f806 	bl	80111e4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 80111d8:	bf00      	nop
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	200009ac 	.word	0x200009ac

080111e4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80111e4:	b590      	push	{r4, r7, lr}
 80111e6:	b085      	sub	sp, #20
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7f7 ff1a 	bl	8009028 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 80111f4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d00c      	beq.n	8011218 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f7f7 fdd6 	bl	8008db0 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8011204:	4604      	mov	r4, r0
 8011206:	68f8      	ldr	r0, [r7, #12]
 8011208:	f7f7 fe6d 	bl	8008ee6 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 801120c:	4603      	mov	r3, r0
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4619      	mov	r1, r3
 8011212:	4620      	mov	r0, r4
 8011214:	f7f7 ff15 	bl	8009042 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2200      	movs	r2, #0
 801121c:	601a      	str	r2, [r3, #0]
      }
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	4618      	mov	r0, r3
 8011222:	3714      	adds	r7, #20
 8011224:	46bd      	mov	sp, r7
 8011226:	bd90      	pop	{r4, r7, pc}

08011228 <_GLOBAL__sub_I_queue>:
 8011228:	b580      	push	{r7, lr}
 801122a:	af00      	add	r7, sp, #0
 801122c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011230:	2001      	movs	r0, #1
 8011232:	f7ff ffc1 	bl	80111b8 <_Z41__static_initialization_and_destruction_0ii>
 8011236:	bd80      	pop	{r7, pc}

08011238 <_GLOBAL__sub_D_queue>:
 8011238:	b580      	push	{r7, lr}
 801123a:	af00      	add	r7, sp, #0
 801123c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011240:	2000      	movs	r0, #0
 8011242:	f7ff ffb9 	bl	80111b8 <_Z41__static_initialization_and_destruction_0ii>
 8011246:	bd80      	pop	{r7, pc}

08011248 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8011248:	b480      	push	{r7}
 801124a:	b085      	sub	sp, #20
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	460b      	mov	r3, r1
 8011252:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 8011254:	2300      	movs	r3, #0
 8011256:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 801125c:	e007      	b.n	801126e <cavlFindExtremum+0x26>
    {
        result = c;
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 8011262:	78fb      	ldrb	r3, [r7, #3]
 8011264:	68ba      	ldr	r2, [r7, #8]
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	4413      	add	r3, r2
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d1f4      	bne.n	801125e <cavlFindExtremum+0x16>
    }
    return result;
 8011274:	68fb      	ldr	r3, [r7, #12]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3714      	adds	r7, #20
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr
	...

08011284 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	460b      	mov	r3, r1
 801128e:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d014      	beq.n	80112c0 <cavlPrivateRotate+0x3c>
 8011296:	78fb      	ldrb	r3, [r7, #3]
 8011298:	f083 0301 	eor.w	r3, r3, #1
 801129c:	b2db      	uxtb	r3, r3
 801129e:	687a      	ldr	r2, [r7, #4]
 80112a0:	009b      	lsls	r3, r3, #2
 80112a2:	4413      	add	r3, r2
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00a      	beq.n	80112c0 <cavlPrivateRotate+0x3c>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80112b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112b4:	db04      	blt.n	80112c0 <cavlPrivateRotate+0x3c>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80112bc:	2b01      	cmp	r3, #1
 80112be:	dd05      	ble.n	80112cc <cavlPrivateRotate+0x48>
 80112c0:	4b2a      	ldr	r3, [pc, #168]	@ (801136c <cavlPrivateRotate+0xe8>)
 80112c2:	4a2b      	ldr	r2, [pc, #172]	@ (8011370 <cavlPrivateRotate+0xec>)
 80112c4:	2162      	movs	r1, #98	@ 0x62
 80112c6:	482b      	ldr	r0, [pc, #172]	@ (8011374 <cavlPrivateRotate+0xf0>)
 80112c8:	f002 fad8 	bl	801387c <__assert_func>
    Cavl* const z = x->lr[!r];
 80112cc:	78fb      	ldrb	r3, [r7, #3]
 80112ce:	f083 0301 	eor.w	r3, r3, #1
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	4413      	add	r3, r2
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d00e      	beq.n	8011304 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	6879      	ldr	r1, [r7, #4]
 80112f2:	4299      	cmp	r1, r3
 80112f4:	bf0c      	ite	eq
 80112f6:	2301      	moveq	r3, #1
 80112f8:	2300      	movne	r3, #0
 80112fa:	b2db      	uxtb	r3, r3
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	4413      	add	r3, r2
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	601a      	str	r2, [r3, #0]
    x->up     = z;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	68fa      	ldr	r2, [r7, #12]
 8011310:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 8011312:	78fb      	ldrb	r3, [r7, #3]
 8011314:	78fa      	ldrb	r2, [r7, #3]
 8011316:	f082 0201 	eor.w	r2, r2, #1
 801131a:	b2d2      	uxtb	r2, r2
 801131c:	4610      	mov	r0, r2
 801131e:	68fa      	ldr	r2, [r7, #12]
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	4413      	add	r3, r2
 8011324:	685a      	ldr	r2, [r3, #4]
 8011326:	6879      	ldr	r1, [r7, #4]
 8011328:	0083      	lsls	r3, r0, #2
 801132a:	440b      	add	r3, r1
 801132c:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 801132e:	78fb      	ldrb	r3, [r7, #3]
 8011330:	f083 0301 	eor.w	r3, r3, #1
 8011334:	b2db      	uxtb	r3, r3
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	4413      	add	r3, r2
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d009      	beq.n	8011356 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 8011342:	78fb      	ldrb	r3, [r7, #3]
 8011344:	f083 0301 	eor.w	r3, r3, #1
 8011348:	b2db      	uxtb	r3, r3
 801134a:	687a      	ldr	r2, [r7, #4]
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	4413      	add	r3, r2
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 8011356:	78fb      	ldrb	r3, [r7, #3]
 8011358:	68fa      	ldr	r2, [r7, #12]
 801135a:	009b      	lsls	r3, r3, #2
 801135c:	4413      	add	r3, r2
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	605a      	str	r2, [r3, #4]
}
 8011362:	bf00      	nop
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	08017fe0 	.word	0x08017fe0
 8011370:	08019020 	.word	0x08019020
 8011374:	08018028 	.word	0x08018028

08011378 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b086      	sub	sp, #24
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	460b      	mov	r3, r1
 8011382:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d00a      	beq.n	80113a0 <cavlPrivateAdjustBalance+0x28>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011394:	db04      	blt.n	80113a0 <cavlPrivateAdjustBalance+0x28>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801139c:	2b01      	cmp	r3, #1
 801139e:	dd05      	ble.n	80113ac <cavlPrivateAdjustBalance+0x34>
 80113a0:	4b61      	ldr	r3, [pc, #388]	@ (8011528 <cavlPrivateAdjustBalance+0x1b0>)
 80113a2:	4a62      	ldr	r2, [pc, #392]	@ (801152c <cavlPrivateAdjustBalance+0x1b4>)
 80113a4:	2177      	movs	r1, #119	@ 0x77
 80113a6:	4862      	ldr	r0, [pc, #392]	@ (8011530 <cavlPrivateAdjustBalance+0x1b8>)
 80113a8:	f002 fa68 	bl	801387c <__assert_func>
    Cavl*        out    = x;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	78fa      	ldrb	r2, [r7, #3]
 80113ba:	2a00      	cmp	r2, #0
 80113bc:	d001      	beq.n	80113c2 <cavlPrivateAdjustBalance+0x4a>
 80113be:	2201      	movs	r2, #1
 80113c0:	e000      	b.n	80113c4 <cavlPrivateAdjustBalance+0x4c>
 80113c2:	22ff      	movs	r2, #255	@ 0xff
 80113c4:	4413      	add	r3, r2
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 80113ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113d2:	db04      	blt.n	80113de <cavlPrivateAdjustBalance+0x66>
 80113d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113d8:	2b01      	cmp	r3, #1
 80113da:	f340 809c 	ble.w	8011516 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 80113de:	7cfb      	ldrb	r3, [r7, #19]
 80113e0:	09db      	lsrs	r3, r3, #7
 80113e2:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 80113e4:	7cbb      	ldrb	r3, [r7, #18]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d001      	beq.n	80113ee <cavlPrivateAdjustBalance+0x76>
 80113ea:	2301      	movs	r3, #1
 80113ec:	e001      	b.n	80113f2 <cavlPrivateAdjustBalance+0x7a>
 80113ee:	f04f 33ff 	mov.w	r3, #4294967295
 80113f2:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 80113f4:	7cbb      	ldrb	r3, [r7, #18]
 80113f6:	f083 0301 	eor.w	r3, r3, #1
 80113fa:	b2db      	uxtb	r3, r3
 80113fc:	687a      	ldr	r2, [r7, #4]
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	4413      	add	r3, r2
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d105      	bne.n	8011418 <cavlPrivateAdjustBalance+0xa0>
 801140c:	4b49      	ldr	r3, [pc, #292]	@ (8011534 <cavlPrivateAdjustBalance+0x1bc>)
 801140e:	4a47      	ldr	r2, [pc, #284]	@ (801152c <cavlPrivateAdjustBalance+0x1b4>)
 8011410:	217f      	movs	r1, #127	@ 0x7f
 8011412:	4847      	ldr	r0, [pc, #284]	@ (8011530 <cavlPrivateAdjustBalance+0x1b8>)
 8011414:	f002 fa32 	bl	801387c <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801141e:	461a      	mov	r2, r3
 8011420:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8011424:	fb02 f303 	mul.w	r3, r2, r3
 8011428:	2b00      	cmp	r3, #0
 801142a:	dc1c      	bgt.n	8011466 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8011430:	7cbb      	ldrb	r3, [r7, #18]
 8011432:	4619      	mov	r1, r3
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f7ff ff25 	bl	8011284 <cavlPrivateRotate>
            if (0 == z->bf)
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d109      	bne.n	8011458 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8011444:	7c7b      	ldrb	r3, [r7, #17]
 8011446:	425b      	negs	r3, r3
 8011448:	b2db      	uxtb	r3, r3
 801144a:	b25a      	sxtb	r2, r3
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	7c7a      	ldrb	r2, [r7, #17]
 8011454:	731a      	strb	r2, [r3, #12]
    {
 8011456:	e061      	b.n	801151c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2200      	movs	r2, #0
 8011462:	731a      	strb	r2, [r3, #12]
    {
 8011464:	e05a      	b.n	801151c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 8011466:	7cbb      	ldrb	r3, [r7, #18]
 8011468:	68fa      	ldr	r2, [r7, #12]
 801146a:	009b      	lsls	r3, r3, #2
 801146c:	4413      	add	r3, r2
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d105      	bne.n	8011484 <cavlPrivateAdjustBalance+0x10c>
 8011478:	4b2f      	ldr	r3, [pc, #188]	@ (8011538 <cavlPrivateAdjustBalance+0x1c0>)
 801147a:	4a2c      	ldr	r2, [pc, #176]	@ (801152c <cavlPrivateAdjustBalance+0x1b4>)
 801147c:	2192      	movs	r1, #146	@ 0x92
 801147e:	482c      	ldr	r0, [pc, #176]	@ (8011530 <cavlPrivateAdjustBalance+0x1b8>)
 8011480:	f002 f9fc 	bl	801387c <__assert_func>
            out = y;
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 8011488:	7cbb      	ldrb	r3, [r7, #18]
 801148a:	2b00      	cmp	r3, #0
 801148c:	bf14      	ite	ne
 801148e:	2301      	movne	r3, #1
 8011490:	2300      	moveq	r3, #0
 8011492:	b2db      	uxtb	r3, r3
 8011494:	f083 0301 	eor.w	r3, r3, #1
 8011498:	b2db      	uxtb	r3, r3
 801149a:	f003 0301 	and.w	r3, r3, #1
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	4619      	mov	r1, r3
 80114a2:	68f8      	ldr	r0, [r7, #12]
 80114a4:	f7ff feee 	bl	8011284 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 80114a8:	7cbb      	ldrb	r3, [r7, #18]
 80114aa:	4619      	mov	r1, r3
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f7ff fee9 	bl	8011284 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80114b8:	461a      	mov	r2, r3
 80114ba:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80114be:	fb02 f303 	mul.w	r3, r2, r3
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	da09      	bge.n	80114da <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	7c7a      	ldrb	r2, [r7, #17]
 80114ca:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	2200      	movs	r2, #0
 80114d0:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2200      	movs	r2, #0
 80114d6:	731a      	strb	r2, [r3, #12]
    {
 80114d8:	e020      	b.n	801151c <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80114e0:	461a      	mov	r2, r3
 80114e2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80114e6:	fb02 f303 	mul.w	r3, r2, r3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	dd0c      	ble.n	8011508 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2200      	movs	r2, #0
 80114f2:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	2200      	movs	r2, #0
 80114f8:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 80114fa:	7c7b      	ldrb	r3, [r7, #17]
 80114fc:	425b      	negs	r3, r3
 80114fe:	b2db      	uxtb	r3, r3
 8011500:	b25a      	sxtb	r2, r3
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	731a      	strb	r2, [r3, #12]
    {
 8011506:	e009      	b.n	801151c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	2200      	movs	r2, #0
 8011512:	731a      	strb	r2, [r3, #12]
    {
 8011514:	e002      	b.n	801151c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	7cfa      	ldrb	r2, [r7, #19]
 801151a:	731a      	strb	r2, [r3, #12]
    }
    return out;
 801151c:	697b      	ldr	r3, [r7, #20]
}
 801151e:	4618      	mov	r0, r3
 8011520:	3718      	adds	r7, #24
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	08018054 	.word	0x08018054
 801152c:	08019004 	.word	0x08019004
 8011530:	08018028 	.word	0x08018028
 8011534:	08018084 	.word	0x08018084
 8011538:	08018090 	.word	0x08018090

0801153c <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b086      	sub	sp, #24
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d004      	beq.n	8011554 <cavlPrivateRetraceOnGrowth+0x18>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d005      	beq.n	8011560 <cavlPrivateRetraceOnGrowth+0x24>
 8011554:	4b23      	ldr	r3, [pc, #140]	@ (80115e4 <cavlPrivateRetraceOnGrowth+0xa8>)
 8011556:	4a24      	ldr	r2, [pc, #144]	@ (80115e8 <cavlPrivateRetraceOnGrowth+0xac>)
 8011558:	21b5      	movs	r1, #181	@ 0xb5
 801155a:	4824      	ldr	r0, [pc, #144]	@ (80115ec <cavlPrivateRetraceOnGrowth+0xb0>)
 801155c:	f002 f98e 	bl	801387c <__assert_func>
    Cavl* c = added;      // Child
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 801156a:	e023      	b.n	80115b4 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	689b      	ldr	r3, [r3, #8]
 8011570:	697a      	ldr	r2, [r7, #20]
 8011572:	429a      	cmp	r2, r3
 8011574:	bf0c      	ite	eq
 8011576:	2301      	moveq	r3, #1
 8011578:	2300      	movne	r3, #0
 801157a:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 801157c:	7bfb      	ldrb	r3, [r7, #15]
 801157e:	693a      	ldr	r2, [r7, #16]
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4413      	add	r3, r2
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	697a      	ldr	r2, [r7, #20]
 8011588:	429a      	cmp	r2, r3
 801158a:	d005      	beq.n	8011598 <cavlPrivateRetraceOnGrowth+0x5c>
 801158c:	4b18      	ldr	r3, [pc, #96]	@ (80115f0 <cavlPrivateRetraceOnGrowth+0xb4>)
 801158e:	4a16      	ldr	r2, [pc, #88]	@ (80115e8 <cavlPrivateRetraceOnGrowth+0xac>)
 8011590:	21bb      	movs	r1, #187	@ 0xbb
 8011592:	4816      	ldr	r0, [pc, #88]	@ (80115ec <cavlPrivateRetraceOnGrowth+0xb0>)
 8011594:	f002 f972 	bl	801387c <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 8011598:	7bfb      	ldrb	r3, [r7, #15]
 801159a:	4619      	mov	r1, r3
 801159c:	6938      	ldr	r0, [r7, #16]
 801159e:	f7ff feeb 	bl	8011378 <cavlPrivateAdjustBalance>
 80115a2:	6178      	str	r0, [r7, #20]
        p = c->up;
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d003      	beq.n	80115bc <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d1d8      	bne.n	801156c <cavlPrivateRetraceOnGrowth+0x30>
 80115ba:	e000      	b.n	80115be <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 80115bc:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d105      	bne.n	80115d0 <cavlPrivateRetraceOnGrowth+0x94>
 80115c4:	4b0b      	ldr	r3, [pc, #44]	@ (80115f4 <cavlPrivateRetraceOnGrowth+0xb8>)
 80115c6:	4a08      	ldr	r2, [pc, #32]	@ (80115e8 <cavlPrivateRetraceOnGrowth+0xac>)
 80115c8:	21c3      	movs	r1, #195	@ 0xc3
 80115ca:	4808      	ldr	r0, [pc, #32]	@ (80115ec <cavlPrivateRetraceOnGrowth+0xb0>)
 80115cc:	f002 f956 	bl	801387c <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d101      	bne.n	80115da <cavlPrivateRetraceOnGrowth+0x9e>
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	e000      	b.n	80115dc <cavlPrivateRetraceOnGrowth+0xa0>
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3718      	adds	r7, #24
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	0801809c 	.word	0x0801809c
 80115e8:	08018fe8 	.word	0x08018fe8
 80115ec:	08018028 	.word	0x08018028
 80115f0:	080180c0 	.word	0x080180c0
 80115f4:	080180d0 	.word	0x080180d0

080115f8 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b08a      	sub	sp, #40	@ 0x28
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	607a      	str	r2, [r7, #4]
 8011604:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 8011606:	2300      	movs	r3, #0
 8011608:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d065      	beq.n	80116dc <cavlSearch+0xe4>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d062      	beq.n	80116dc <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8011620:	e02f      	b.n	8011682 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8011622:	69fb      	ldr	r3, [r7, #28]
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4611      	mov	r1, r2
 801162a:	68b8      	ldr	r0, [r7, #8]
 801162c:	4798      	blx	r3
 801162e:	4603      	mov	r3, r0
 8011630:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8011632:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d103      	bne.n	8011642 <cavlSearch+0x4a>
            {
                out = *n;
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8011640:	e023      	b.n	801168a <cavlSearch+0x92>
            }
            up = *n;
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011650:	2b00      	cmp	r3, #0
 8011652:	bfcc      	ite	gt
 8011654:	2301      	movgt	r3, #1
 8011656:	2300      	movle	r3, #0
 8011658:	b2db      	uxtb	r3, r3
 801165a:	009b      	lsls	r3, r3, #2
 801165c:	4413      	add	r3, r2
 801165e:	3304      	adds	r3, #4
 8011660:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 8011662:	69fb      	ldr	r3, [r7, #28]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d00b      	beq.n	8011682 <cavlSearch+0x8a>
 801166a:	69fb      	ldr	r3, [r7, #28]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	6a3a      	ldr	r2, [r7, #32]
 8011672:	429a      	cmp	r2, r3
 8011674:	d005      	beq.n	8011682 <cavlSearch+0x8a>
 8011676:	4b1c      	ldr	r3, [pc, #112]	@ (80116e8 <cavlSearch+0xf0>)
 8011678:	4a1c      	ldr	r2, [pc, #112]	@ (80116ec <cavlSearch+0xf4>)
 801167a:	21db      	movs	r1, #219	@ 0xdb
 801167c:	481c      	ldr	r0, [pc, #112]	@ (80116f0 <cavlSearch+0xf8>)
 801167e:	f002 f8fd 	bl	801387c <__assert_func>
        while (*n != NULL)
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d1cb      	bne.n	8011622 <cavlSearch+0x2a>
        }
        if (NULL == out)
 801168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168c:	2b00      	cmp	r3, #0
 801168e:	d125      	bne.n	80116dc <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d004      	beq.n	80116a0 <cavlSearch+0xa8>
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	68b8      	ldr	r0, [r7, #8]
 801169a:	4798      	blx	r3
 801169c:	4603      	mov	r3, r0
 801169e:	e000      	b.n	80116a2 <cavlSearch+0xaa>
 80116a0:	2300      	movs	r3, #0
 80116a2:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 80116a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d018      	beq.n	80116dc <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116ae:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 80116b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b2:	2200      	movs	r2, #0
 80116b4:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 80116b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b8:	2200      	movs	r2, #0
 80116ba:	609a      	str	r2, [r3, #8]
                out->up        = up;
 80116bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116be:	6a3a      	ldr	r2, [r7, #32]
 80116c0:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 80116c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c4:	2200      	movs	r2, #0
 80116c6:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 80116c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80116ca:	f7ff ff37 	bl	801153c <cavlPrivateRetraceOnGrowth>
 80116ce:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d002      	beq.n	80116dc <cavlSearch+0xe4>
                {
                    *root = rt;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	697a      	ldr	r2, [r7, #20]
 80116da:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 80116dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3728      	adds	r7, #40	@ 0x28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	080180dc 	.word	0x080180dc
 80116ec:	08018fdc 	.word	0x08018fdc
 80116f0:	08018028 	.word	0x08018028

080116f4 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b088      	sub	sp, #32
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2b00      	cmp	r3, #0
 8011702:	f000 8116 	beq.w	8011932 <cavlRemove+0x23e>
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	f000 8112 	beq.w	8011932 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d105      	bne.n	8011722 <cavlRemove+0x2e>
 8011716:	4b89      	ldr	r3, [pc, #548]	@ (801193c <cavlRemove+0x248>)
 8011718:	4a89      	ldr	r2, [pc, #548]	@ (8011940 <cavlRemove+0x24c>)
 801171a:	21f6      	movs	r1, #246	@ 0xf6
 801171c:	4889      	ldr	r0, [pc, #548]	@ (8011944 <cavlRemove+0x250>)
 801171e:	f002 f8ad 	bl	801387c <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d10a      	bne.n	8011740 <cavlRemove+0x4c>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	683a      	ldr	r2, [r7, #0]
 8011730:	429a      	cmp	r2, r3
 8011732:	d005      	beq.n	8011740 <cavlRemove+0x4c>
 8011734:	4b84      	ldr	r3, [pc, #528]	@ (8011948 <cavlRemove+0x254>)
 8011736:	4a82      	ldr	r2, [pc, #520]	@ (8011940 <cavlRemove+0x24c>)
 8011738:	21f7      	movs	r1, #247	@ 0xf7
 801173a:	4882      	ldr	r0, [pc, #520]	@ (8011944 <cavlRemove+0x250>)
 801173c:	f002 f89e 	bl	801387c <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8011740:	2300      	movs	r3, #0
 8011742:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 8011744:	2300      	movs	r3, #0
 8011746:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d073      	beq.n	8011838 <cavlRemove+0x144>
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	689b      	ldr	r3, [r3, #8]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d06f      	beq.n	8011838 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	689b      	ldr	r3, [r3, #8]
 801175c:	2100      	movs	r1, #0
 801175e:	4618      	mov	r0, r3
 8011760:	f7ff fd72 	bl	8011248 <cavlFindExtremum>
 8011764:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d007      	beq.n	801177c <cavlRemove+0x88>
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d103      	bne.n	801177c <cavlRemove+0x88>
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d105      	bne.n	8011788 <cavlRemove+0x94>
 801177c:	4b73      	ldr	r3, [pc, #460]	@ (801194c <cavlRemove+0x258>)
 801177e:	4a70      	ldr	r2, [pc, #448]	@ (8011940 <cavlRemove+0x24c>)
 8011780:	21ff      	movs	r1, #255	@ 0xff
 8011782:	4870      	ldr	r0, [pc, #448]	@ (8011944 <cavlRemove+0x250>)
 8011784:	f002 f87a 	bl	801387c <__assert_func>
            re->bf        = node->bf;
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	f993 200c 	ldrsb.w	r2, [r3, #12]
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	685a      	ldr	r2, [r3, #4]
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	697a      	ldr	r2, [r7, #20]
 80117a0:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	683a      	ldr	r2, [r7, #0]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d025      	beq.n	80117f8 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	697a      	ldr	r2, [r7, #20]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d006      	beq.n	80117ca <cavlRemove+0xd6>
 80117bc:	4b64      	ldr	r3, [pc, #400]	@ (8011950 <cavlRemove+0x25c>)
 80117be:	4a60      	ldr	r2, [pc, #384]	@ (8011940 <cavlRemove+0x24c>)
 80117c0:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80117c4:	485f      	ldr	r0, [pc, #380]	@ (8011944 <cavlRemove+0x250>)
 80117c6:	f002 f859 	bl	801387c <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	689a      	ldr	r2, [r3, #8]
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d003      	beq.n	80117e2 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	69fa      	ldr	r2, [r7, #28]
 80117e0:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	689a      	ldr	r2, [r3, #8]
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	697a      	ldr	r2, [r7, #20]
 80117f0:	601a      	str	r2, [r3, #0]
                r             = false;
 80117f2:	2300      	movs	r3, #0
 80117f4:	76fb      	strb	r3, [r7, #27]
 80117f6:	e003      	b.n	8011800 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 80117fc:	2301      	movs	r3, #1
 80117fe:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00f      	beq.n	8011830 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	689b      	ldr	r3, [r3, #8]
 801181a:	6839      	ldr	r1, [r7, #0]
 801181c:	4299      	cmp	r1, r3
 801181e:	bf0c      	ite	eq
 8011820:	2301      	moveq	r3, #1
 8011822:	2300      	movne	r3, #0
 8011824:	b2db      	uxtb	r3, r3
 8011826:	009b      	lsls	r3, r3, #2
 8011828:	4413      	add	r3, r2
 801182a:	697a      	ldr	r2, [r7, #20]
 801182c:	605a      	str	r2, [r3, #4]
        {
 801182e:	e046      	b.n	80118be <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	697a      	ldr	r2, [r7, #20]
 8011834:	601a      	str	r2, [r3, #0]
        {
 8011836:	e042      	b.n	80118be <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	689b      	ldr	r3, [r3, #8]
 8011842:	2b00      	cmp	r3, #0
 8011844:	bf14      	ite	ne
 8011846:	2301      	movne	r3, #1
 8011848:	2300      	moveq	r3, #0
 801184a:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 801184c:	7cfb      	ldrb	r3, [r7, #19]
 801184e:	683a      	ldr	r2, [r7, #0]
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	4413      	add	r3, r2
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d006      	beq.n	8011868 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 801185a:	7cfb      	ldrb	r3, [r7, #19]
 801185c:	683a      	ldr	r2, [r7, #0]
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	4413      	add	r3, r2
 8011862:	685b      	ldr	r3, [r3, #4]
 8011864:	69fa      	ldr	r2, [r7, #28]
 8011866:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 8011868:	69fb      	ldr	r3, [r7, #28]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d020      	beq.n	80118b0 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	689b      	ldr	r3, [r3, #8]
 8011872:	683a      	ldr	r2, [r7, #0]
 8011874:	429a      	cmp	r2, r3
 8011876:	bf0c      	ite	eq
 8011878:	2301      	moveq	r3, #1
 801187a:	2300      	movne	r3, #0
 801187c:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 801187e:	7cfb      	ldrb	r3, [r7, #19]
 8011880:	7ef8      	ldrb	r0, [r7, #27]
 8011882:	683a      	ldr	r2, [r7, #0]
 8011884:	009b      	lsls	r3, r3, #2
 8011886:	4413      	add	r3, r2
 8011888:	685a      	ldr	r2, [r3, #4]
 801188a:	69f9      	ldr	r1, [r7, #28]
 801188c:	0083      	lsls	r3, r0, #2
 801188e:	440b      	add	r3, r1
 8011890:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 8011892:	7efb      	ldrb	r3, [r7, #27]
 8011894:	69fa      	ldr	r2, [r7, #28]
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	4413      	add	r3, r2
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d00e      	beq.n	80118be <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 80118a0:	7efb      	ldrb	r3, [r7, #27]
 80118a2:	69fa      	ldr	r2, [r7, #28]
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4413      	add	r3, r2
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	69fa      	ldr	r2, [r7, #28]
 80118ac:	601a      	str	r2, [r3, #0]
 80118ae:	e006      	b.n	80118be <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 80118b0:	7cfb      	ldrb	r3, [r7, #19]
 80118b2:	683a      	ldr	r2, [r7, #0]
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	4413      	add	r3, r2
 80118b8:	685a      	ldr	r2, [r3, #4]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d036      	beq.n	8011932 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 80118c4:	2300      	movs	r3, #0
 80118c6:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 80118c8:	7efb      	ldrb	r3, [r7, #27]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	bf14      	ite	ne
 80118ce:	2301      	movne	r3, #1
 80118d0:	2300      	moveq	r3, #0
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	f083 0301 	eor.w	r3, r3, #1
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	f003 0301 	and.w	r3, r3, #1
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	4619      	mov	r1, r3
 80118e2:	69f8      	ldr	r0, [r7, #28]
 80118e4:	f7ff fd48 	bl	8011378 <cavlPrivateAdjustBalance>
 80118e8:	60f8      	str	r0, [r7, #12]
                p = c->up;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d10b      	bne.n	8011912 <cavlRemove+0x21e>
 80118fa:	69fb      	ldr	r3, [r7, #28]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d008      	beq.n	8011912 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8011900:	69fb      	ldr	r3, [r7, #28]
 8011902:	689b      	ldr	r3, [r3, #8]
 8011904:	68fa      	ldr	r2, [r7, #12]
 8011906:	429a      	cmp	r2, r3
 8011908:	bf0c      	ite	eq
 801190a:	2301      	moveq	r3, #1
 801190c:	2300      	movne	r3, #0
 801190e:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8011910:	e7da      	b.n	80118c8 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10c      	bne.n	8011932 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d106      	bne.n	801192c <cavlRemove+0x238>
 801191e:	4b0d      	ldr	r3, [pc, #52]	@ (8011954 <cavlRemove+0x260>)
 8011920:	4a07      	ldr	r2, [pc, #28]	@ (8011940 <cavlRemove+0x24c>)
 8011922:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8011926:	4807      	ldr	r0, [pc, #28]	@ (8011944 <cavlRemove+0x250>)
 8011928:	f001 ffa8 	bl	801387c <__assert_func>
                *root = c;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 8011932:	bf00      	nop
 8011934:	3720      	adds	r7, #32
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	08018100 	.word	0x08018100
 8011940:	08019064 	.word	0x08019064
 8011944:	08018028 	.word	0x08018028
 8011948:	08018110 	.word	0x08018110
 801194c:	08018138 	.word	0x08018138
 8011950:	08018170 	.word	0x08018170
 8011954:	080180d0 	.word	0x080180d0

08011958 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8011960:	687b      	ldr	r3, [r7, #4]
}
 8011962:	4618      	mov	r0, r3
 8011964:	370c      	adds	r7, #12
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr
	...

08011970 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 8011970:	b480      	push	{r7}
 8011972:	b083      	sub	sp, #12
 8011974:	af00      	add	r7, sp, #0
 8011976:	4603      	mov	r3, r0
 8011978:	460a      	mov	r2, r1
 801197a:	80fb      	strh	r3, [r7, #6]
 801197c:	4613      	mov	r3, r2
 801197e:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8011980:	88fb      	ldrh	r3, [r7, #6]
 8011982:	021b      	lsls	r3, r3, #8
 8011984:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 8011986:	88fb      	ldrh	r3, [r7, #6]
 8011988:	0a1b      	lsrs	r3, r3, #8
 801198a:	b299      	uxth	r1, r3
 801198c:	797b      	ldrb	r3, [r7, #5]
 801198e:	b29b      	uxth	r3, r3
 8011990:	404b      	eors	r3, r1
 8011992:	b29b      	uxth	r3, r3
 8011994:	b2db      	uxtb	r3, r3
 8011996:	4905      	ldr	r1, [pc, #20]	@ (80119ac <crcAddByte+0x3c>)
 8011998:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 801199c:	4053      	eors	r3, r2
 801199e:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	370c      	adds	r7, #12
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr
 80119ac:	08018cb4 	.word	0x08018cb4

080119b0 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b088      	sub	sp, #32
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	4603      	mov	r3, r0
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	607a      	str	r2, [r7, #4]
 80119bc:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d108      	bne.n	80119d6 <crcAdd+0x26>
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d005      	beq.n	80119d6 <crcAdd+0x26>
 80119ca:	4b12      	ldr	r3, [pc, #72]	@ (8011a14 <crcAdd+0x64>)
 80119cc:	4a12      	ldr	r2, [pc, #72]	@ (8011a18 <crcAdd+0x68>)
 80119ce:	2185      	movs	r1, #133	@ 0x85
 80119d0:	4812      	ldr	r0, [pc, #72]	@ (8011a1c <crcAdd+0x6c>)
 80119d2:	f001 ff53 	bl	801387c <__assert_func>
    TransferCRC    out = crc;
 80119d6:	89fb      	ldrh	r3, [r7, #14]
 80119d8:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 80119de:	2300      	movs	r3, #0
 80119e0:	617b      	str	r3, [r7, #20]
 80119e2:	e00e      	b.n	8011a02 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	781a      	ldrb	r2, [r3, #0]
 80119e8:	8bfb      	ldrh	r3, [r7, #30]
 80119ea:	4611      	mov	r1, r2
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7ff ffbf 	bl	8011970 <crcAddByte>
 80119f2:	4603      	mov	r3, r0
 80119f4:	83fb      	strh	r3, [r7, #30]
        ++p;
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	3301      	adds	r3, #1
 80119fa:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	3301      	adds	r3, #1
 8011a00:	617b      	str	r3, [r7, #20]
 8011a02:	697a      	ldr	r2, [r7, #20]
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d3ec      	bcc.n	80119e4 <crcAdd+0x34>
    }
    return out;
 8011a0a:	8bfb      	ldrh	r3, [r7, #30]
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3720      	adds	r7, #32
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	08018180 	.word	0x08018180
 8011a18:	08018f30 	.word	0x08018f30
 8011a1c:	080181a8 	.word	0x080181a8

08011a20 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	4603      	mov	r3, r0
 8011a28:	460a      	mov	r2, r1
 8011a2a:	80fb      	strh	r3, [r7, #6]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8011a30:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	da05      	bge.n	8011a44 <txMakeMessageSessionSpecifier+0x24>
 8011a38:	4b0e      	ldr	r3, [pc, #56]	@ (8011a74 <txMakeMessageSessionSpecifier+0x54>)
 8011a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8011a78 <txMakeMessageSessionSpecifier+0x58>)
 8011a3c:	21ac      	movs	r1, #172	@ 0xac
 8011a3e:	480f      	ldr	r0, [pc, #60]	@ (8011a7c <txMakeMessageSessionSpecifier+0x5c>)
 8011a40:	f001 ff1c 	bl	801387c <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 8011a44:	88fb      	ldrh	r3, [r7, #6]
 8011a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011a4a:	d305      	bcc.n	8011a58 <txMakeMessageSessionSpecifier+0x38>
 8011a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8011a80 <txMakeMessageSessionSpecifier+0x60>)
 8011a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8011a78 <txMakeMessageSessionSpecifier+0x58>)
 8011a50:	21ad      	movs	r1, #173	@ 0xad
 8011a52:	480a      	ldr	r0, [pc, #40]	@ (8011a7c <txMakeMessageSessionSpecifier+0x5c>)
 8011a54:	f001 ff12 	bl	801387c <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 8011a58:	88fb      	ldrh	r3, [r7, #6]
 8011a5a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 8011a62:	797a      	ldrb	r2, [r7, #5]
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	021b      	lsls	r3, r3, #8
 8011a68:	4313      	orrs	r3, r2
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
 8011a72:	bf00      	nop
 8011a74:	080181d8 	.word	0x080181d8
 8011a78:	08018f38 	.word	0x08018f38
 8011a7c:	080181a8 	.word	0x080181a8
 8011a80:	080181ec 	.word	0x080181ec

08011a84 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8011a84:	b590      	push	{r4, r7, lr}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	4608      	mov	r0, r1
 8011a8e:	4611      	mov	r1, r2
 8011a90:	461a      	mov	r2, r3
 8011a92:	4623      	mov	r3, r4
 8011a94:	80fb      	strh	r3, [r7, #6]
 8011a96:	4603      	mov	r3, r0
 8011a98:	717b      	strb	r3, [r7, #5]
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	713b      	strb	r3, [r7, #4]
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8011aa2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	da05      	bge.n	8011ab6 <txMakeServiceSessionSpecifier+0x32>
 8011aaa:	4b17      	ldr	r3, [pc, #92]	@ (8011b08 <txMakeServiceSessionSpecifier+0x84>)
 8011aac:	4a17      	ldr	r2, [pc, #92]	@ (8011b0c <txMakeServiceSessionSpecifier+0x88>)
 8011aae:	21b7      	movs	r1, #183	@ 0xb7
 8011ab0:	4817      	ldr	r0, [pc, #92]	@ (8011b10 <txMakeServiceSessionSpecifier+0x8c>)
 8011ab2:	f001 fee3 	bl	801387c <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 8011ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	da05      	bge.n	8011aca <txMakeServiceSessionSpecifier+0x46>
 8011abe:	4b15      	ldr	r3, [pc, #84]	@ (8011b14 <txMakeServiceSessionSpecifier+0x90>)
 8011ac0:	4a12      	ldr	r2, [pc, #72]	@ (8011b0c <txMakeServiceSessionSpecifier+0x88>)
 8011ac2:	21b8      	movs	r1, #184	@ 0xb8
 8011ac4:	4812      	ldr	r0, [pc, #72]	@ (8011b10 <txMakeServiceSessionSpecifier+0x8c>)
 8011ac6:	f001 fed9 	bl	801387c <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 8011aca:	88fb      	ldrh	r3, [r7, #6]
 8011acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ad0:	d305      	bcc.n	8011ade <txMakeServiceSessionSpecifier+0x5a>
 8011ad2:	4b11      	ldr	r3, [pc, #68]	@ (8011b18 <txMakeServiceSessionSpecifier+0x94>)
 8011ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8011b0c <txMakeServiceSessionSpecifier+0x88>)
 8011ad6:	21b9      	movs	r1, #185	@ 0xb9
 8011ad8:	480d      	ldr	r0, [pc, #52]	@ (8011b10 <txMakeServiceSessionSpecifier+0x8c>)
 8011ada:	f001 fecf 	bl	801387c <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8011ade:	793a      	ldrb	r2, [r7, #4]
 8011ae0:	78fb      	ldrb	r3, [r7, #3]
 8011ae2:	01db      	lsls	r3, r3, #7
 8011ae4:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8011ae6:	88fb      	ldrh	r3, [r7, #6]
 8011ae8:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8011aea:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8011aec:	797a      	ldrb	r2, [r7, #5]
 8011aee:	2a00      	cmp	r2, #0
 8011af0:	d002      	beq.n	8011af8 <txMakeServiceSessionSpecifier+0x74>
 8011af2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011af6:	e000      	b.n	8011afa <txMakeServiceSessionSpecifier+0x76>
 8011af8:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8011afa:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8011afc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd90      	pop	{r4, r7, pc}
 8011b08:	080181d8 	.word	0x080181d8
 8011b0c:	08018f58 	.word	0x08018f58
 8011b10:	080181a8 	.word	0x080181a8
 8011b14:	08018200 	.word	0x08018200
 8011b18:	08018214 	.word	0x08018214

08011b1c <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 8011b24:	2340      	movs	r3, #64	@ 0x40
 8011b26:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2b07      	cmp	r3, #7
 8011b30:	d802      	bhi.n	8011b38 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 8011b32:	2308      	movs	r3, #8
 8011b34:	60fb      	str	r3, [r7, #12]
 8011b36:	e014      	b.n	8011b62 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d808      	bhi.n	8011b52 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 8011b40:	4a0c      	ldr	r2, [pc, #48]	@ (8011b74 <adjustPresentationLayerMTU+0x58>)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4413      	add	r3, r2
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	461a      	mov	r2, r3
 8011b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8011b78 <adjustPresentationLayerMTU+0x5c>)
 8011b4c:	5c9b      	ldrb	r3, [r3, r2]
 8011b4e:	60fb      	str	r3, [r7, #12]
 8011b50:	e007      	b.n	8011b62 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 8011b52:	4a08      	ldr	r2, [pc, #32]	@ (8011b74 <adjustPresentationLayerMTU+0x58>)
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	4413      	add	r3, r2
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	4b06      	ldr	r3, [pc, #24]	@ (8011b78 <adjustPresentationLayerMTU+0x5c>)
 8011b5e:	5c9b      	ldrb	r3, [r3, r2]
 8011b60:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	3b01      	subs	r3, #1
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3714      	adds	r7, #20
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr
 8011b72:	bf00      	nop
 8011b74:	08018ec4 	.word	0x08018ec4
 8011b78:	08018eb4 	.word	0x08018eb4

08011b7c <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b08a      	sub	sp, #40	@ 0x28
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]
 8011b88:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d105      	bne.n	8011b9c <txMakeCANID+0x20>
 8011b90:	4b60      	ldr	r3, [pc, #384]	@ (8011d14 <txMakeCANID+0x198>)
 8011b92:	4a61      	ldr	r2, [pc, #388]	@ (8011d18 <txMakeCANID+0x19c>)
 8011b94:	21d9      	movs	r1, #217	@ 0xd9
 8011b96:	4861      	ldr	r0, [pc, #388]	@ (8011d1c <txMakeCANID+0x1a0>)
 8011b98:	f001 fe70 	bl	801387c <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 8011b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d105      	bne.n	8011bae <txMakeCANID+0x32>
 8011ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8011d20 <txMakeCANID+0x1a4>)
 8011ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8011d18 <txMakeCANID+0x19c>)
 8011ba6:	21da      	movs	r1, #218	@ 0xda
 8011ba8:	485c      	ldr	r0, [pc, #368]	@ (8011d1c <txMakeCANID+0x1a0>)
 8011baa:	f001 fe67 	bl	801387c <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011bae:	f06f 0301 	mvn.w	r3, #1
 8011bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	785b      	ldrb	r3, [r3, #1]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d157      	bne.n	8011c6c <txMakeCANID+0xf0>
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	791b      	ldrb	r3, [r3, #4]
 8011bc0:	2bff      	cmp	r3, #255	@ 0xff
 8011bc2:	d153      	bne.n	8011c6c <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8011bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011bcc:	d24e      	bcs.n	8011c6c <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	db11      	blt.n	8011bfa <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	885b      	ldrh	r3, [r3, #2]
 8011bda:	78fa      	ldrb	r2, [r7, #3]
 8011bdc:	4611      	mov	r1, r2
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ff ff1e 	bl	8011a20 <txMakeMessageSessionSpecifier>
 8011be4:	4603      	mov	r3, r0
 8011be6:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8011be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	da75      	bge.n	8011cda <txMakeCANID+0x15e>
 8011bee:	4b4d      	ldr	r3, [pc, #308]	@ (8011d24 <txMakeCANID+0x1a8>)
 8011bf0:	4a49      	ldr	r2, [pc, #292]	@ (8011d18 <txMakeCANID+0x19c>)
 8011bf2:	21e2      	movs	r1, #226	@ 0xe2
 8011bf4:	4849      	ldr	r0, [pc, #292]	@ (8011d1c <txMakeCANID+0x1a0>)
 8011bf6:	f001 fe41 	bl	801387c <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 8011bfa:	68ba      	ldr	r2, [r7, #8]
 8011bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d830      	bhi.n	8011c64 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d108      	bne.n	8011c1a <txMakeCANID+0x9e>
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d005      	beq.n	8011c1a <txMakeCANID+0x9e>
 8011c0e:	4b46      	ldr	r3, [pc, #280]	@ (8011d28 <txMakeCANID+0x1ac>)
 8011c10:	4a41      	ldr	r2, [pc, #260]	@ (8011d18 <txMakeCANID+0x19c>)
 8011c12:	21e6      	movs	r1, #230	@ 0xe6
 8011c14:	4841      	ldr	r0, [pc, #260]	@ (8011d1c <txMakeCANID+0x1a0>)
 8011c16:	f001 fe31 	bl	801387c <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	68b9      	ldr	r1, [r7, #8]
 8011c1e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8011c22:	f7ff fec5 	bl	80119b0 <crcAdd>
 8011c26:	4603      	mov	r3, r0
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	885b      	ldrh	r3, [r3, #2]
 8011c36:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7ff feef 	bl	8011a20 <txMakeMessageSessionSpecifier>
 8011c42:	4603      	mov	r3, r0
 8011c44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011c48:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 8011c4a:	69fb      	ldr	r3, [r7, #28]
 8011c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011c50:	d305      	bcc.n	8011c5e <txMakeCANID+0xe2>
 8011c52:	4b36      	ldr	r3, [pc, #216]	@ (8011d2c <txMakeCANID+0x1b0>)
 8011c54:	4a30      	ldr	r2, [pc, #192]	@ (8011d18 <txMakeCANID+0x19c>)
 8011c56:	21e9      	movs	r1, #233	@ 0xe9
 8011c58:	4830      	ldr	r0, [pc, #192]	@ (8011d1c <txMakeCANID+0x1a0>)
 8011c5a:	f001 fe0f 	bl	801387c <__assert_func>
            out = (int32_t) spec;
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011c62:	e03a      	b.n	8011cda <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8011c64:	f06f 0301 	mvn.w	r3, #1
 8011c68:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011c6a:	e036      	b.n	8011cda <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	785b      	ldrb	r3, [r3, #1]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d003      	beq.n	8011c7c <txMakeCANID+0x100>
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	785b      	ldrb	r3, [r3, #1]
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d12a      	bne.n	8011cd2 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	791b      	ldrb	r3, [r3, #4]
 8011c80:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	db25      	blt.n	8011cd2 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	885b      	ldrh	r3, [r3, #2]
 8011c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c8e:	d220      	bcs.n	8011cd2 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	db18      	blt.n	8011cca <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8011ca0:	2b02      	cmp	r3, #2
 8011ca2:	bf0c      	ite	eq
 8011ca4:	2301      	moveq	r3, #1
 8011ca6:	2300      	movne	r3, #0
 8011ca8:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8011cae:	78fa      	ldrb	r2, [r7, #3]
 8011cb0:	f7ff fee8 	bl	8011a84 <txMakeServiceSessionSpecifier>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	da0f      	bge.n	8011cde <txMakeCANID+0x162>
 8011cbe:	4b19      	ldr	r3, [pc, #100]	@ (8011d24 <txMakeCANID+0x1a8>)
 8011cc0:	4a15      	ldr	r2, [pc, #84]	@ (8011d18 <txMakeCANID+0x19c>)
 8011cc2:	21fa      	movs	r1, #250	@ 0xfa
 8011cc4:	4815      	ldr	r0, [pc, #84]	@ (8011d1c <txMakeCANID+0x1a0>)
 8011cc6:	f001 fdd9 	bl	801387c <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 8011cca:	f06f 0301 	mvn.w	r3, #1
 8011cce:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011cd0:	e005      	b.n	8011cde <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011cd2:	f06f 0301 	mvn.w	r3, #1
 8011cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8011cd8:	e002      	b.n	8011ce0 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011cda:	bf00      	nop
 8011cdc:	e000      	b.n	8011ce0 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8011cde:	bf00      	nop
    }

    if (out >= 0)
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	db10      	blt.n	8011d08 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	2b07      	cmp	r3, #7
 8011cf0:	d807      	bhi.n	8011d02 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8011cf2:	69bb      	ldr	r3, [r7, #24]
 8011cf4:	069a      	lsls	r2, r3, #26
 8011cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf8:	4313      	orrs	r3, r2
 8011cfa:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d00:	e002      	b.n	8011d08 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8011d02:	f06f 0301 	mvn.w	r3, #1
 8011d06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 8011d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3728      	adds	r7, #40	@ 0x28
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	08018228 	.word	0x08018228
 8011d18:	08018f24 	.word	0x08018f24
 8011d1c:	080181a8 	.word	0x080181a8
 8011d20:	0801823c 	.word	0x0801823c
 8011d24:	08018258 	.word	0x08018258
 8011d28:	08018264 	.word	0x08018264
 8011d2c:	08018298 	.word	0x08018298

08011d30 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8011d30:	b590      	push	{r4, r7, lr}
 8011d32:	b083      	sub	sp, #12
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	4604      	mov	r4, r0
 8011d38:	4608      	mov	r0, r1
 8011d3a:	4611      	mov	r1, r2
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	4623      	mov	r3, r4
 8011d40:	71fb      	strb	r3, [r7, #7]
 8011d42:	4603      	mov	r3, r0
 8011d44:	71bb      	strb	r3, [r7, #6]
 8011d46:	460b      	mov	r3, r1
 8011d48:	717b      	strb	r3, [r7, #5]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 8011d4e:	79fb      	ldrb	r3, [r7, #7]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d009      	beq.n	8011d68 <txMakeTailByte+0x38>
 8011d54:	797b      	ldrb	r3, [r7, #5]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d006      	beq.n	8011d68 <txMakeTailByte+0x38>
 8011d5a:	4b13      	ldr	r3, [pc, #76]	@ (8011da8 <txMakeTailByte+0x78>)
 8011d5c:	4a13      	ldr	r2, [pc, #76]	@ (8011dac <txMakeTailByte+0x7c>)
 8011d5e:	f240 111b 	movw	r1, #283	@ 0x11b
 8011d62:	4813      	ldr	r0, [pc, #76]	@ (8011db0 <txMakeTailByte+0x80>)
 8011d64:	f001 fd8a 	bl	801387c <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8011d68:	79fb      	ldrb	r3, [r7, #7]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d001      	beq.n	8011d72 <txMakeTailByte+0x42>
 8011d6e:	2280      	movs	r2, #128	@ 0x80
 8011d70:	e000      	b.n	8011d74 <txMakeTailByte+0x44>
 8011d72:	2200      	movs	r2, #0
 8011d74:	79bb      	ldrb	r3, [r7, #6]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d001      	beq.n	8011d7e <txMakeTailByte+0x4e>
 8011d7a:	2340      	movs	r3, #64	@ 0x40
 8011d7c:	e000      	b.n	8011d80 <txMakeTailByte+0x50>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	4313      	orrs	r3, r2
 8011d82:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 8011d84:	797a      	ldrb	r2, [r7, #5]
 8011d86:	2a00      	cmp	r2, #0
 8011d88:	d001      	beq.n	8011d8e <txMakeTailByte+0x5e>
 8011d8a:	2220      	movs	r2, #32
 8011d8c:	e000      	b.n	8011d90 <txMakeTailByte+0x60>
 8011d8e:	2200      	movs	r2, #0
 8011d90:	4313      	orrs	r3, r2
 8011d92:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 8011d94:	793b      	ldrb	r3, [r7, #4]
 8011d96:	f003 031f 	and.w	r3, r3, #31
 8011d9a:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	b2db      	uxtb	r3, r3
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	370c      	adds	r7, #12
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd90      	pop	{r4, r7, pc}
 8011da8:	080182b4 	.word	0x080182b4
 8011dac:	08018fcc 	.word	0x08018fcc
 8011db0:	080181a8 	.word	0x080181a8

08011db4 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2b40      	cmp	r3, #64	@ 0x40
 8011dc0:	d906      	bls.n	8011dd0 <txRoundFramePayloadSizeUp+0x1c>
 8011dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8011e00 <txRoundFramePayloadSizeUp+0x4c>)
 8011dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8011e04 <txRoundFramePayloadSizeUp+0x50>)
 8011dc6:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8011dca:	480f      	ldr	r0, [pc, #60]	@ (8011e08 <txRoundFramePayloadSizeUp+0x54>)
 8011dcc:	f001 fd56 	bl	801387c <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8011dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8011e0c <txRoundFramePayloadSizeUp+0x58>)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2b0f      	cmp	r3, #15
 8011dde:	d906      	bls.n	8011dee <txRoundFramePayloadSizeUp+0x3a>
 8011de0:	4b0b      	ldr	r3, [pc, #44]	@ (8011e10 <txRoundFramePayloadSizeUp+0x5c>)
 8011de2:	4a08      	ldr	r2, [pc, #32]	@ (8011e04 <txRoundFramePayloadSizeUp+0x50>)
 8011de4:	f240 1127 	movw	r1, #295	@ 0x127
 8011de8:	4807      	ldr	r0, [pc, #28]	@ (8011e08 <txRoundFramePayloadSizeUp+0x54>)
 8011dea:	f001 fd47 	bl	801387c <__assert_func>
    return CanardCANDLCToLength[y];
 8011dee:	4a09      	ldr	r2, [pc, #36]	@ (8011e14 <txRoundFramePayloadSizeUp+0x60>)
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	4413      	add	r3, r2
 8011df4:	781b      	ldrb	r3, [r3, #0]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	080182dc 	.word	0x080182dc
 8011e04:	08018f9c 	.word	0x08018f9c
 8011e08:	080181a8 	.word	0x080181a8
 8011e0c:	08018ec4 	.word	0x08018ec4
 8011e10:	08018324 	.word	0x08018324
 8011e14:	08018eb4 	.word	0x08018eb4

08011e18 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d106      	bne.n	8011e3a <txAllocateQueueItem+0x22>
 8011e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8011eac <txAllocateQueueItem+0x94>)
 8011e2e:	4a20      	ldr	r2, [pc, #128]	@ (8011eb0 <txAllocateQueueItem+0x98>)
 8011e30:	f240 1131 	movw	r1, #305	@ 0x131
 8011e34:	481f      	ldr	r0, [pc, #124]	@ (8011eb4 <txAllocateQueueItem+0x9c>)
 8011e36:	f001 fd21 	bl	801387c <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 8011e3a:	6a3b      	ldr	r3, [r7, #32]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d106      	bne.n	8011e4e <txAllocateQueueItem+0x36>
 8011e40:	4b1d      	ldr	r3, [pc, #116]	@ (8011eb8 <txAllocateQueueItem+0xa0>)
 8011e42:	4a1b      	ldr	r2, [pc, #108]	@ (8011eb0 <txAllocateQueueItem+0x98>)
 8011e44:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8011e48:	481a      	ldr	r0, [pc, #104]	@ (8011eb4 <txAllocateQueueItem+0x9c>)
 8011e4a:	f001 fd17 	bl	801387c <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	689b      	ldr	r3, [r3, #8]
 8011e52:	6a3a      	ldr	r2, [r7, #32]
 8011e54:	3230      	adds	r2, #48	@ 0x30
 8011e56:	4611      	mov	r1, r2
 8011e58:	68f8      	ldr	r0, [r7, #12]
 8011e5a:	4798      	blx	r3
 8011e5c:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d01e      	beq.n	8011ea2 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	2200      	movs	r2, #0
 8011e68:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	2200      	movs	r2, #0
 8011e74:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 8011e82:	6979      	ldr	r1, [r7, #20]
 8011e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e88:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	6a3a      	ldr	r2, [r7, #32]
 8011e90:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	68ba      	ldr	r2, [r7, #8]
 8011ea0:	621a      	str	r2, [r3, #32]
    }
    return out;
 8011ea2:	697b      	ldr	r3, [r7, #20]
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3718      	adds	r7, #24
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	0801836c 	.word	0x0801836c
 8011eb0:	08018fb8 	.word	0x08018fb8
 8011eb4:	080181a8 	.word	0x080181a8
 8011eb8:	08018380 	.word	0x08018380

08011ebc <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d002      	beq.n	8011eda <txAVLPredicate+0x1e>
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d106      	bne.n	8011ee8 <txAVLPredicate+0x2c>
 8011eda:	4b0a      	ldr	r3, [pc, #40]	@ (8011f04 <txAVLPredicate+0x48>)
 8011edc:	4a0a      	ldr	r2, [pc, #40]	@ (8011f08 <txAVLPredicate+0x4c>)
 8011ede:	f240 114d 	movw	r1, #333	@ 0x14d
 8011ee2:	480a      	ldr	r0, [pc, #40]	@ (8011f0c <txAVLPredicate+0x50>)
 8011ee4:	f001 fcca 	bl	801387c <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6a1a      	ldr	r2, [r3, #32]
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	6a1b      	ldr	r3, [r3, #32]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d301      	bcc.n	8011ef8 <txAVLPredicate+0x3c>
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	e001      	b.n	8011efc <txAVLPredicate+0x40>
 8011ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3710      	adds	r7, #16
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	08018394 	.word	0x08018394
 8011f08:	08018f8c 	.word	0x08018f8c
 8011f0c:	080181a8 	.word	0x080181a8

08011f10 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8011f10:	b590      	push	{r4, r7, lr}
 8011f12:	b08d      	sub	sp, #52	@ 0x34
 8011f14:	af02      	add	r7, sp, #8
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	60b9      	str	r1, [r7, #8]
 8011f1a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d106      	bne.n	8011f32 <txPushSingleFrame+0x22>
 8011f24:	4b5c      	ldr	r3, [pc, #368]	@ (8012098 <txPushSingleFrame+0x188>)
 8011f26:	4a5d      	ldr	r2, [pc, #372]	@ (801209c <txPushSingleFrame+0x18c>)
 8011f28:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 8011f2c:	485c      	ldr	r0, [pc, #368]	@ (80120a0 <txPushSingleFrame+0x190>)
 8011f2e:	f001 fca5 	bl	801387c <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 8011f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d109      	bne.n	8011f4c <txPushSingleFrame+0x3c>
 8011f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d006      	beq.n	8011f4c <txPushSingleFrame+0x3c>
 8011f3e:	4b59      	ldr	r3, [pc, #356]	@ (80120a4 <txPushSingleFrame+0x194>)
 8011f40:	4a56      	ldr	r2, [pc, #344]	@ (801209c <txPushSingleFrame+0x18c>)
 8011f42:	f240 115b 	movw	r1, #347	@ 0x15b
 8011f46:	4856      	ldr	r0, [pc, #344]	@ (80120a0 <txPushSingleFrame+0x190>)
 8011f48:	f001 fc98 	bl	801387c <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 8011f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f4e:	3301      	adds	r3, #1
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7ff ff2f 	bl	8011db4 <txRoundFramePayloadSizeUp>
 8011f56:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8011f58:	6a3a      	ldr	r2, [r7, #32]
 8011f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d806      	bhi.n	8011f6e <txPushSingleFrame+0x5e>
 8011f60:	4b51      	ldr	r3, [pc, #324]	@ (80120a8 <txPushSingleFrame+0x198>)
 8011f62:	4a4e      	ldr	r2, [pc, #312]	@ (801209c <txPushSingleFrame+0x18c>)
 8011f64:	f240 115d 	movw	r1, #349	@ 0x15d
 8011f68:	484d      	ldr	r0, [pc, #308]	@ (80120a0 <txPushSingleFrame+0x190>)
 8011f6a:	f001 fc87 	bl	801387c <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 8011f6e:	6a3a      	ldr	r2, [r7, #32]
 8011f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f72:	1ad3      	subs	r3, r2, r3
 8011f74:	3b01      	subs	r3, #1
 8011f76:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 8011f78:	69fa      	ldr	r2, [r7, #28]
 8011f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f7c:	4413      	add	r3, r2
 8011f7e:	3301      	adds	r3, #1
 8011f80:	6a3a      	ldr	r2, [r7, #32]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d006      	beq.n	8011f94 <txPushSingleFrame+0x84>
 8011f86:	4b49      	ldr	r3, [pc, #292]	@ (80120ac <txPushSingleFrame+0x19c>)
 8011f88:	4a44      	ldr	r2, [pc, #272]	@ (801209c <txPushSingleFrame+0x18c>)
 8011f8a:	f240 115f 	movw	r1, #351	@ 0x15f
 8011f8e:	4844      	ldr	r0, [pc, #272]	@ (80120a0 <txPushSingleFrame+0x190>)
 8011f90:	f001 fc74 	bl	801387c <__assert_func>
    int32_t       out = 0;
 8011f94:	2300      	movs	r3, #0
 8011f96:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	689a      	ldr	r2, [r3, #8]
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d209      	bcs.n	8011fb8 <txPushSingleFrame+0xa8>
 8011fa4:	6a3b      	ldr	r3, [r7, #32]
 8011fa6:	9300      	str	r3, [sp, #0]
 8011fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011fae:	68b8      	ldr	r0, [r7, #8]
 8011fb0:	f7ff ff32 	bl	8011e18 <txAllocateQueueItem>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	e000      	b.n	8011fba <txPushSingleFrame+0xaa>
 8011fb8:	2300      	movs	r3, #0
    TxItem* const tqi =
 8011fba:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 8011fbc:	69bb      	ldr	r3, [r7, #24]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d054      	beq.n	801206c <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8011fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d010      	beq.n	8011fea <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8011fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d106      	bne.n	8011fdc <txPushSingleFrame+0xcc>
 8011fce:	4b38      	ldr	r3, [pc, #224]	@ (80120b0 <txPushSingleFrame+0x1a0>)
 8011fd0:	4a32      	ldr	r2, [pc, #200]	@ (801209c <txPushSingleFrame+0x18c>)
 8011fd2:	f240 1167 	movw	r1, #359	@ 0x167
 8011fd6:	4832      	ldr	r0, [pc, #200]	@ (80120a0 <txPushSingleFrame+0x190>)
 8011fd8:	f001 fc50 	bl	801387c <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 8011fdc:	69bb      	ldr	r3, [r7, #24]
 8011fde:	3330      	adds	r3, #48	@ 0x30
 8011fe0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011fe2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f002 fdea 	bl	8014bbe <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 8011fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fec:	3330      	adds	r3, #48	@ 0x30
 8011fee:	69ba      	ldr	r2, [r7, #24]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	69fa      	ldr	r2, [r7, #28]
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f002 fcfb 	bl	80149f2 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 8011ffc:	6a3b      	ldr	r3, [r7, #32]
 8011ffe:	1e5c      	subs	r4, r3, #1
 8012000:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8012004:	2201      	movs	r2, #1
 8012006:	2101      	movs	r1, #1
 8012008:	2001      	movs	r0, #1
 801200a:	f7ff fe91 	bl	8011d30 <txMakeTailByte>
 801200e:	4603      	mov	r3, r0
 8012010:	461a      	mov	r2, r3
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	4423      	add	r3, r4
 8012016:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	f103 000c 	add.w	r0, r3, #12
 8012020:	69b9      	ldr	r1, [r7, #24]
 8012022:	4b24      	ldr	r3, [pc, #144]	@ (80120b4 <txPushSingleFrame+0x1a4>)
 8012024:	4a24      	ldr	r2, [pc, #144]	@ (80120b8 <txPushSingleFrame+0x1a8>)
 8012026:	f7ff fae7 	bl	80115f8 <cavlSearch>
 801202a:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	697a      	ldr	r2, [r7, #20]
 8012030:	429a      	cmp	r2, r3
 8012032:	d006      	beq.n	8012042 <txPushSingleFrame+0x132>
 8012034:	4b21      	ldr	r3, [pc, #132]	@ (80120bc <txPushSingleFrame+0x1ac>)
 8012036:	4a19      	ldr	r2, [pc, #100]	@ (801209c <txPushSingleFrame+0x18c>)
 8012038:	f240 1173 	movw	r1, #371	@ 0x173
 801203c:	4818      	ldr	r0, [pc, #96]	@ (80120a0 <txPushSingleFrame+0x190>)
 801203e:	f001 fc1d 	bl	801387c <__assert_func>
        que->size++;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	689b      	ldr	r3, [r3, #8]
 8012046:	1c5a      	adds	r2, r3, #1
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	689a      	ldr	r2, [r3, #8]
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	429a      	cmp	r2, r3
 8012056:	d906      	bls.n	8012066 <txPushSingleFrame+0x156>
 8012058:	4b19      	ldr	r3, [pc, #100]	@ (80120c0 <txPushSingleFrame+0x1b0>)
 801205a:	4a10      	ldr	r2, [pc, #64]	@ (801209c <txPushSingleFrame+0x18c>)
 801205c:	f240 1175 	movw	r1, #373	@ 0x175
 8012060:	480f      	ldr	r0, [pc, #60]	@ (80120a0 <txPushSingleFrame+0x190>)
 8012062:	f001 fc0b 	bl	801387c <__assert_func>
        out = 1;  // One frame enqueued.
 8012066:	2301      	movs	r3, #1
 8012068:	627b      	str	r3, [r7, #36]	@ 0x24
 801206a:	e002      	b.n	8012072 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 801206c:	f06f 0302 	mvn.w	r3, #2
 8012070:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 8012072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012074:	2b00      	cmp	r3, #0
 8012076:	db09      	blt.n	801208c <txPushSingleFrame+0x17c>
 8012078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801207a:	2b01      	cmp	r3, #1
 801207c:	d006      	beq.n	801208c <txPushSingleFrame+0x17c>
 801207e:	4b11      	ldr	r3, [pc, #68]	@ (80120c4 <txPushSingleFrame+0x1b4>)
 8012080:	4a06      	ldr	r2, [pc, #24]	@ (801209c <txPushSingleFrame+0x18c>)
 8012082:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8012086:	4806      	ldr	r0, [pc, #24]	@ (80120a0 <txPushSingleFrame+0x190>)
 8012088:	f001 fbf8 	bl	801387c <__assert_func>
    return out;
 801208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801208e:	4618      	mov	r0, r3
 8012090:	372c      	adds	r7, #44	@ 0x2c
 8012092:	46bd      	mov	sp, r7
 8012094:	bd90      	pop	{r4, r7, pc}
 8012096:	bf00      	nop
 8012098:	0801836c 	.word	0x0801836c
 801209c:	08018f78 	.word	0x08018f78
 80120a0:	080181a8 	.word	0x080181a8
 80120a4:	080183c8 	.word	0x080183c8
 80120a8:	080183f8 	.word	0x080183f8
 80120ac:	0801841c 	.word	0x0801841c
 80120b0:	08018458 	.word	0x08018458
 80120b4:	08011959 	.word	0x08011959
 80120b8:	08011ebd 	.word	0x08011ebd
 80120bc:	08018470 	.word	0x08018470
 80120c0:	08018488 	.word	0x08018488
 80120c4:	080184a4 	.word	0x080184a4

080120c8 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 80120c8:	b590      	push	{r4, r7, lr}
 80120ca:	b093      	sub	sp, #76	@ 0x4c
 80120cc:	af02      	add	r7, sp, #8
 80120ce:	60f8      	str	r0, [r7, #12]
 80120d0:	60b9      	str	r1, [r7, #8]
 80120d2:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d106      	bne.n	80120e8 <txGenerateMultiFrameChain+0x20>
 80120da:	4b93      	ldr	r3, [pc, #588]	@ (8012328 <txGenerateMultiFrameChain+0x260>)
 80120dc:	4a93      	ldr	r2, [pc, #588]	@ (801232c <txGenerateMultiFrameChain+0x264>)
 80120de:	f240 1189 	movw	r1, #393	@ 0x189
 80120e2:	4893      	ldr	r0, [pc, #588]	@ (8012330 <txGenerateMultiFrameChain+0x268>)
 80120e4:	f001 fbca 	bl	801387c <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d106      	bne.n	80120fc <txGenerateMultiFrameChain+0x34>
 80120ee:	4b91      	ldr	r3, [pc, #580]	@ (8012334 <txGenerateMultiFrameChain+0x26c>)
 80120f0:	4a8e      	ldr	r2, [pc, #568]	@ (801232c <txGenerateMultiFrameChain+0x264>)
 80120f2:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80120f6:	488e      	ldr	r0, [pc, #568]	@ (8012330 <txGenerateMultiFrameChain+0x268>)
 80120f8:	f001 fbc0 	bl	801387c <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 80120fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	429a      	cmp	r2, r3
 8012102:	d806      	bhi.n	8012112 <txGenerateMultiFrameChain+0x4a>
 8012104:	4b8c      	ldr	r3, [pc, #560]	@ (8012338 <txGenerateMultiFrameChain+0x270>)
 8012106:	4a89      	ldr	r2, [pc, #548]	@ (801232c <txGenerateMultiFrameChain+0x264>)
 8012108:	f240 118b 	movw	r1, #395	@ 0x18b
 801210c:	4888      	ldr	r0, [pc, #544]	@ (8012330 <txGenerateMultiFrameChain+0x268>)
 801210e:	f001 fbb5 	bl	801387c <__assert_func>
    CANARD_ASSERT(payload != NULL);
 8012112:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012114:	2b00      	cmp	r3, #0
 8012116:	d106      	bne.n	8012126 <txGenerateMultiFrameChain+0x5e>
 8012118:	4b88      	ldr	r3, [pc, #544]	@ (801233c <txGenerateMultiFrameChain+0x274>)
 801211a:	4a84      	ldr	r2, [pc, #528]	@ (801232c <txGenerateMultiFrameChain+0x264>)
 801211c:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8012120:	4883      	ldr	r0, [pc, #524]	@ (8012330 <txGenerateMultiFrameChain+0x268>)
 8012122:	f001 fbab 	bl	801387c <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 8012126:	2300      	movs	r3, #0
 8012128:	613b      	str	r3, [r7, #16]
 801212a:	2300      	movs	r3, #0
 801212c:	617b      	str	r3, [r7, #20]
 801212e:	2300      	movs	r3, #0
 8012130:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8012132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012134:	3302      	adds	r3, #2
 8012136:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 8012138:	2300      	movs	r3, #0
 801213a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 801213c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801213e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012140:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8012144:	f7ff fc34 	bl	80119b0 <crcAdd>
 8012148:	4603      	mov	r3, r0
 801214a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 801214c:	2301      	movs	r3, #1
 801214e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 8012152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012154:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 8012156:	e0d4      	b.n	8012302 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8012158:	69bb      	ldr	r3, [r7, #24]
 801215a:	3301      	adds	r3, #1
 801215c:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 801215e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012162:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 8012164:	687a      	ldr	r2, [r7, #4]
 8012166:	429a      	cmp	r2, r3
 8012168:	d908      	bls.n	801217c <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 801216a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801216c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801216e:	1ad3      	subs	r3, r2, r3
 8012170:	3301      	adds	r3, #1
 8012172:	4618      	mov	r0, r3
 8012174:	f7ff fe1e 	bl	8011db4 <txRoundFramePayloadSizeUp>
 8012178:	4603      	mov	r3, r0
 801217a:	e001      	b.n	8012180 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8012180:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 8012182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012184:	9300      	str	r3, [sp, #0]
 8012186:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801218a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801218c:	68b8      	ldr	r0, [r7, #8]
 801218e:	f7ff fe43 	bl	8011e18 <txAllocateQueueItem>
 8012192:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d102      	bne.n	80121a0 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 801219a:	6a3b      	ldr	r3, [r7, #32]
 801219c:	613b      	str	r3, [r7, #16]
 801219e:	e002      	b.n	80121a6 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	6a3a      	ldr	r2, [r7, #32]
 80121a4:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 80121a6:	6a3b      	ldr	r3, [r7, #32]
 80121a8:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	f000 80ae 	beq.w	801230e <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 80121b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b4:	3b01      	subs	r3, #1
 80121b6:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 80121b8:	2300      	movs	r3, #0
 80121ba:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 80121bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80121be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d21c      	bcs.n	80121fe <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 80121c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80121c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121c8:	1ad3      	subs	r3, r2, r3
 80121ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 80121cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d901      	bls.n	80121d8 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 80121d4:	69fb      	ldr	r3, [r7, #28]
 80121d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	3330      	adds	r3, #48	@ 0x30
 80121dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80121e0:	4618      	mov	r0, r3
 80121e2:	f002 fcec 	bl	8014bbe <memcpy>
            frame_offset = frame_offset + move_size;
 80121e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80121e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ea:	4413      	add	r3, r2
 80121ec:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 80121ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80121f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121f2:	4413      	add	r3, r2
 80121f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 80121f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121fa:	4413      	add	r3, r2
 80121fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 80121fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012200:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012202:	429a      	cmp	r2, r3
 8012204:	d343      	bcc.n	801228e <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8012206:	e00f      	b.n	8012228 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8012208:	697a      	ldr	r2, [r7, #20]
 801220a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801220c:	4413      	add	r3, r2
 801220e:	3330      	adds	r3, #48	@ 0x30
 8012210:	2200      	movs	r2, #0
 8012212:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8012214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012216:	3301      	adds	r3, #1
 8012218:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 801221a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801221c:	2100      	movs	r1, #0
 801221e:	4618      	mov	r0, r3
 8012220:	f7ff fba6 	bl	8011970 <crcAddByte>
 8012224:	4603      	mov	r3, r0
 8012226:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8012228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801222a:	3302      	adds	r3, #2
 801222c:	69fa      	ldr	r2, [r7, #28]
 801222e:	429a      	cmp	r2, r3
 8012230:	d8ea      	bhi.n	8012208 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 8012232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	429a      	cmp	r2, r3
 8012238:	d213      	bcs.n	8012262 <txGenerateMultiFrameChain+0x19a>
 801223a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801223c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801223e:	429a      	cmp	r2, r3
 8012240:	d10f      	bne.n	8012262 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 8012242:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012244:	0a1b      	lsrs	r3, r3, #8
 8012246:	b29b      	uxth	r3, r3
 8012248:	697a      	ldr	r2, [r7, #20]
 801224a:	b2d9      	uxtb	r1, r3
 801224c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801224e:	4413      	add	r3, r2
 8012250:	3330      	adds	r3, #48	@ 0x30
 8012252:	460a      	mov	r2, r1
 8012254:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8012256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012258:	3301      	adds	r3, #1
 801225a:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 801225c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801225e:	3301      	adds	r3, #1
 8012260:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 8012262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012264:	69fb      	ldr	r3, [r7, #28]
 8012266:	429a      	cmp	r2, r3
 8012268:	d211      	bcs.n	801228e <txGenerateMultiFrameChain+0x1c6>
 801226a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801226c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801226e:	429a      	cmp	r2, r3
 8012270:	d90d      	bls.n	801228e <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 8012272:	697a      	ldr	r2, [r7, #20]
 8012274:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012276:	b2d9      	uxtb	r1, r3
 8012278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801227a:	4413      	add	r3, r2
 801227c:	3330      	adds	r3, #48	@ 0x30
 801227e:	460a      	mov	r2, r1
 8012280:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8012282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012284:	3301      	adds	r3, #1
 8012286:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8012288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801228a:	3301      	adds	r3, #1
 801228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 801228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012290:	1c5a      	adds	r2, r3, #1
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012296:	429a      	cmp	r2, r3
 8012298:	d006      	beq.n	80122a8 <txGenerateMultiFrameChain+0x1e0>
 801229a:	4b29      	ldr	r3, [pc, #164]	@ (8012340 <txGenerateMultiFrameChain+0x278>)
 801229c:	4a23      	ldr	r2, [pc, #140]	@ (801232c <txGenerateMultiFrameChain+0x264>)
 801229e:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80122a2:	4823      	ldr	r0, [pc, #140]	@ (8012330 <txGenerateMultiFrameChain+0x268>)
 80122a4:	f001 faea 	bl	801387c <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80122a8:	693a      	ldr	r2, [r7, #16]
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	bf0c      	ite	eq
 80122b0:	2301      	moveq	r3, #1
 80122b2:	2300      	movne	r3, #0
 80122b4:	b2d8      	uxtb	r0, r3
 80122b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80122b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ba:	429a      	cmp	r2, r3
 80122bc:	bf2c      	ite	cs
 80122be:	2301      	movcs	r3, #1
 80122c0:	2300      	movcc	r3, #0
 80122c2:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80122c4:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80122c6:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80122ca:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80122ce:	f7ff fd2f 	bl	8011d30 <txMakeTailByte>
 80122d2:	4603      	mov	r3, r0
 80122d4:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80122d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d8:	4423      	add	r3, r4
 80122da:	3330      	adds	r3, #48	@ 0x30
 80122dc:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 80122de:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	bf14      	ite	ne
 80122e6:	2301      	movne	r3, #1
 80122e8:	2300      	moveq	r3, #0
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	f083 0301 	eor.w	r3, r3, #1
 80122f0:	b2db      	uxtb	r3, r3
 80122f2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80122f6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80122fa:	f003 0301 	and.w	r3, r3, #1
 80122fe:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 8012302:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012306:	429a      	cmp	r2, r3
 8012308:	f4ff af26 	bcc.w	8012158 <txGenerateMultiFrameChain+0x90>
 801230c:	e000      	b.n	8012310 <txGenerateMultiFrameChain+0x248>
            break;
 801230e:	bf00      	nop
    }
    return out;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	461c      	mov	r4, r3
 8012314:	f107 0310 	add.w	r3, r7, #16
 8012318:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801231c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012320:	68f8      	ldr	r0, [r7, #12]
 8012322:	3744      	adds	r7, #68	@ 0x44
 8012324:	46bd      	mov	sp, r7
 8012326:	bd90      	pop	{r4, r7, pc}
 8012328:	0801836c 	.word	0x0801836c
 801232c:	08019048 	.word	0x08019048
 8012330:	080181a8 	.word	0x080181a8
 8012334:	080184bc 	.word	0x080184bc
 8012338:	080184d8 	.word	0x080184d8
 801233c:	08018458 	.word	0x08018458
 8012340:	08018500 	.word	0x08018500

08012344 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b094      	sub	sp, #80	@ 0x50
 8012348:	af06      	add	r7, sp, #24
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	60b9      	str	r1, [r7, #8]
 801234e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d002      	beq.n	801235c <txPushMultiFrame+0x18>
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d106      	bne.n	801236a <txPushMultiFrame+0x26>
 801235c:	4b65      	ldr	r3, [pc, #404]	@ (80124f4 <txPushMultiFrame+0x1b0>)
 801235e:	4a66      	ldr	r2, [pc, #408]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 8012360:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8012364:	4865      	ldr	r0, [pc, #404]	@ (80124fc <txPushMultiFrame+0x1b8>)
 8012366:	f001 fa89 	bl	801387c <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d106      	bne.n	801237e <txPushMultiFrame+0x3a>
 8012370:	4b63      	ldr	r3, [pc, #396]	@ (8012500 <txPushMultiFrame+0x1bc>)
 8012372:	4a61      	ldr	r2, [pc, #388]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 8012374:	f240 11ed 	movw	r1, #493	@ 0x1ed
 8012378:	4860      	ldr	r0, [pc, #384]	@ (80124fc <txPushMultiFrame+0x1b8>)
 801237a:	f001 fa7f 	bl	801387c <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 801237e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	429a      	cmp	r2, r3
 8012384:	d806      	bhi.n	8012394 <txPushMultiFrame+0x50>
 8012386:	4b5f      	ldr	r3, [pc, #380]	@ (8012504 <txPushMultiFrame+0x1c0>)
 8012388:	4a5b      	ldr	r2, [pc, #364]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 801238a:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 801238e:	485b      	ldr	r0, [pc, #364]	@ (80124fc <txPushMultiFrame+0x1b8>)
 8012390:	f001 fa74 	bl	801387c <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 8012394:	2300      	movs	r3, #0
 8012396:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8012398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801239a:	3302      	adds	r3, #2
 801239c:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 801239e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	4413      	add	r3, r2
 80123a4:	1e5a      	subs	r2, r3, #1
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80123ac:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 80123ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d806      	bhi.n	80123c2 <txPushMultiFrame+0x7e>
 80123b4:	4b54      	ldr	r3, [pc, #336]	@ (8012508 <txPushMultiFrame+0x1c4>)
 80123b6:	4a50      	ldr	r2, [pc, #320]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 80123b8:	f240 11f3 	movw	r1, #499	@ 0x1f3
 80123bc:	484f      	ldr	r0, [pc, #316]	@ (80124fc <txPushMultiFrame+0x1b8>)
 80123be:	f001 fa5d 	bl	801387c <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	689a      	ldr	r2, [r3, #8]
 80123c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123c8:	441a      	add	r2, r3
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d87b      	bhi.n	80124ca <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 80123d2:	f107 0010 	add.w	r0, r7, #16
 80123d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123d8:	9305      	str	r3, [sp, #20]
 80123da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123dc:	9304      	str	r3, [sp, #16]
 80123de:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80123e2:	9303      	str	r3, [sp, #12]
 80123e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123e6:	9302      	str	r3, [sp, #8]
 80123e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80123ec:	e9cd 2300 	strd	r2, r3, [sp]
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	68b9      	ldr	r1, [r7, #8]
 80123f4:	f7ff fe68 	bl	80120c8 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d051      	beq.n	80124a2 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f103 000c 	add.w	r0, r3, #12
 8012408:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801240a:	4b40      	ldr	r3, [pc, #256]	@ (801250c <txPushMultiFrame+0x1c8>)
 801240c:	4a40      	ldr	r2, [pc, #256]	@ (8012510 <txPushMultiFrame+0x1cc>)
 801240e:	f7ff f8f3 	bl	80115f8 <cavlSearch>
 8012412:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 8012414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012416:	69fa      	ldr	r2, [r7, #28]
 8012418:	429a      	cmp	r2, r3
 801241a:	d006      	beq.n	801242a <txPushMultiFrame+0xe6>
 801241c:	4b3d      	ldr	r3, [pc, #244]	@ (8012514 <txPushMultiFrame+0x1d0>)
 801241e:	4a36      	ldr	r2, [pc, #216]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 8012420:	f240 2105 	movw	r1, #517	@ 0x205
 8012424:	4835      	ldr	r0, [pc, #212]	@ (80124fc <txPushMultiFrame+0x1b8>)
 8012426:	f001 fa29 	bl	801387c <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	68db      	ldr	r3, [r3, #12]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d106      	bne.n	8012440 <txPushMultiFrame+0xfc>
 8012432:	4b39      	ldr	r3, [pc, #228]	@ (8012518 <txPushMultiFrame+0x1d4>)
 8012434:	4a30      	ldr	r2, [pc, #192]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 8012436:	f240 2106 	movw	r1, #518	@ 0x206
 801243a:	4830      	ldr	r0, [pc, #192]	@ (80124fc <txPushMultiFrame+0x1b8>)
 801243c:	f001 fa1e 	bl	801387c <__assert_func>
                next = next->next_in_transfer;
 8012440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012442:	691b      	ldr	r3, [r3, #16]
 8012444:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 8012446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012448:	2b00      	cmp	r3, #0
 801244a:	d1da      	bne.n	8012402 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012450:	429a      	cmp	r2, r3
 8012452:	d006      	beq.n	8012462 <txPushMultiFrame+0x11e>
 8012454:	4b31      	ldr	r3, [pc, #196]	@ (801251c <txPushMultiFrame+0x1d8>)
 8012456:	4a28      	ldr	r2, [pc, #160]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 8012458:	f240 2109 	movw	r1, #521	@ 0x209
 801245c:	4827      	ldr	r0, [pc, #156]	@ (80124fc <txPushMultiFrame+0x1b8>)
 801245e:	f001 fa0d 	bl	801387c <__assert_func>
            que->size += sq.size;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	689a      	ldr	r2, [r3, #8]
 8012466:	69bb      	ldr	r3, [r7, #24]
 8012468:	441a      	add	r2, r3
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	689a      	ldr	r2, [r3, #8]
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	429a      	cmp	r2, r3
 8012478:	d906      	bls.n	8012488 <txPushMultiFrame+0x144>
 801247a:	4b29      	ldr	r3, [pc, #164]	@ (8012520 <txPushMultiFrame+0x1dc>)
 801247c:	4a1e      	ldr	r2, [pc, #120]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 801247e:	f240 210b 	movw	r1, #523	@ 0x20b
 8012482:	481e      	ldr	r0, [pc, #120]	@ (80124fc <txPushMultiFrame+0x1b8>)
 8012484:	f001 f9fa 	bl	801387c <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 8012488:	69bb      	ldr	r3, [r7, #24]
 801248a:	2b00      	cmp	r3, #0
 801248c:	da06      	bge.n	801249c <txPushMultiFrame+0x158>
 801248e:	4b25      	ldr	r3, [pc, #148]	@ (8012524 <txPushMultiFrame+0x1e0>)
 8012490:	4a19      	ldr	r2, [pc, #100]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 8012492:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8012496:	4819      	ldr	r0, [pc, #100]	@ (80124fc <txPushMultiFrame+0x1b8>)
 8012498:	f001 f9f0 	bl	801387c <__assert_func>
            out = (int32_t) sq.size;
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	637b      	str	r3, [r7, #52]	@ 0x34
 80124a0:	e016      	b.n	80124d0 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 80124a2:	f06f 0302 	mvn.w	r3, #2
 80124a6:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 80124ac:	e009      	b.n	80124c2 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 80124ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124b0:	691b      	ldr	r3, [r3, #16]
 80124b2:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	68db      	ldr	r3, [r3, #12]
 80124b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80124ba:	68b8      	ldr	r0, [r7, #8]
 80124bc:	4798      	blx	r3
                head = next;
 80124be:	6a3b      	ldr	r3, [r7, #32]
 80124c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 80124c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d1f2      	bne.n	80124ae <txPushMultiFrame+0x16a>
 80124c8:	e002      	b.n	80124d0 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 80124ca:	f06f 0302 	mvn.w	r3, #2
 80124ce:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 80124d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	db09      	blt.n	80124ea <txPushMultiFrame+0x1a6>
 80124d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124d8:	2b01      	cmp	r3, #1
 80124da:	dc06      	bgt.n	80124ea <txPushMultiFrame+0x1a6>
 80124dc:	4b12      	ldr	r3, [pc, #72]	@ (8012528 <txPushMultiFrame+0x1e4>)
 80124de:	4a06      	ldr	r2, [pc, #24]	@ (80124f8 <txPushMultiFrame+0x1b4>)
 80124e0:	f240 211f 	movw	r1, #543	@ 0x21f
 80124e4:	4805      	ldr	r0, [pc, #20]	@ (80124fc <txPushMultiFrame+0x1b8>)
 80124e6:	f001 f9c9 	bl	801387c <__assert_func>
    return out;
 80124ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3738      	adds	r7, #56	@ 0x38
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}
 80124f4:	0801853c 	.word	0x0801853c
 80124f8:	08019034 	.word	0x08019034
 80124fc:	080181a8 	.word	0x080181a8
 8012500:	080184bc 	.word	0x080184bc
 8012504:	080184d8 	.word	0x080184d8
 8012508:	0801856c 	.word	0x0801856c
 801250c:	08011959 	.word	0x08011959
 8012510:	08011ebd 	.word	0x08011ebd
 8012514:	0801857c 	.word	0x0801857c
 8012518:	08018590 	.word	0x08018590
 801251c:	080185ac 	.word	0x080185ac
 8012520:	08018488 	.word	0x08018488
 8012524:	080185c4 	.word	0x080185c4
 8012528:	080185e8 	.word	0x080185e8

0801252c <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b088      	sub	sp, #32
 8012530:	af00      	add	r7, sp, #0
 8012532:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8012536:	607a      	str	r2, [r7, #4]
 8012538:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d106      	bne.n	801254e <rxTryParseFrame+0x22>
 8012540:	4b96      	ldr	r3, [pc, #600]	@ (801279c <rxTryParseFrame+0x270>)
 8012542:	4a97      	ldr	r2, [pc, #604]	@ (80127a0 <rxTryParseFrame+0x274>)
 8012544:	f240 214e 	movw	r1, #590	@ 0x24e
 8012548:	4896      	ldr	r0, [pc, #600]	@ (80127a4 <rxTryParseFrame+0x278>)
 801254a:	f001 f997 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012556:	d306      	bcc.n	8012566 <rxTryParseFrame+0x3a>
 8012558:	4b93      	ldr	r3, [pc, #588]	@ (80127a8 <rxTryParseFrame+0x27c>)
 801255a:	4a91      	ldr	r2, [pc, #580]	@ (80127a0 <rxTryParseFrame+0x274>)
 801255c:	f240 214f 	movw	r1, #591	@ 0x24f
 8012560:	4890      	ldr	r0, [pc, #576]	@ (80127a4 <rxTryParseFrame+0x278>)
 8012562:	f001 f98b 	bl	801387c <__assert_func>
    CANARD_ASSERT(out != NULL);
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d106      	bne.n	801257a <rxTryParseFrame+0x4e>
 801256c:	4b8f      	ldr	r3, [pc, #572]	@ (80127ac <rxTryParseFrame+0x280>)
 801256e:	4a8c      	ldr	r2, [pc, #560]	@ (80127a0 <rxTryParseFrame+0x274>)
 8012570:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8012574:	488b      	ldr	r0, [pc, #556]	@ (80127a4 <rxTryParseFrame+0x278>)
 8012576:	f001 f981 	bl	801387c <__assert_func>
    bool valid = false;
 801257a:	2300      	movs	r3, #0
 801257c:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	2b00      	cmp	r3, #0
 8012584:	f000 8105 	beq.w	8012792 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	689b      	ldr	r3, [r3, #8]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d106      	bne.n	801259e <rxTryParseFrame+0x72>
 8012590:	4b87      	ldr	r3, [pc, #540]	@ (80127b0 <rxTryParseFrame+0x284>)
 8012592:	4a83      	ldr	r2, [pc, #524]	@ (80127a0 <rxTryParseFrame+0x274>)
 8012594:	f44f 7115 	mov.w	r1, #596	@ 0x254
 8012598:	4882      	ldr	r0, [pc, #520]	@ (80127a4 <rxTryParseFrame+0x278>)
 801259a:	f001 f96f 	bl	801387c <__assert_func>
        out->timestamp_usec = timestamp_usec;
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80125a4:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 80125ae:	69bb      	ldr	r3, [r7, #24]
 80125b0:	0e9b      	lsrs	r3, r3, #26
 80125b2:	b2db      	uxtb	r3, r3
 80125b4:	f003 0307 	and.w	r3, r3, #7
 80125b8:	b2da      	uxtb	r2, r3
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80125c6:	b2da      	uxtb	r2, r3
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 80125cc:	69bb      	ldr	r3, [r7, #24]
 80125ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d128      	bne.n	8012628 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	2200      	movs	r2, #0
 80125da:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	0a1b      	lsrs	r3, r3, #8
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d002      	beq.n	80125fc <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	22ff      	movs	r2, #255	@ 0xff
 80125fa:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	22ff      	movs	r2, #255	@ 0xff
 8012600:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012608:	2b00      	cmp	r3, #0
 801260a:	d106      	bne.n	801261a <rxTryParseFrame+0xee>
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012612:	2b00      	cmp	r3, #0
 8012614:	d101      	bne.n	801261a <rxTryParseFrame+0xee>
 8012616:	2301      	movs	r3, #1
 8012618:	e000      	b.n	801261c <rxTryParseFrame+0xf0>
 801261a:	2300      	movs	r3, #0
 801261c:	77fb      	strb	r3, [r7, #31]
 801261e:	7ffb      	ldrb	r3, [r7, #31]
 8012620:	f003 0301 	and.w	r3, r3, #1
 8012624:	77fb      	strb	r3, [r7, #31]
 8012626:	e02c      	b.n	8012682 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 8012628:	69bb      	ldr	r3, [r7, #24]
 801262a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <rxTryParseFrame+0x10a>
 8012632:	2202      	movs	r2, #2
 8012634:	e000      	b.n	8012638 <rxTryParseFrame+0x10c>
 8012636:	2201      	movs	r2, #1
            out->transfer_kind =
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 801263c:	69bb      	ldr	r3, [r7, #24]
 801263e:	0b9b      	lsrs	r3, r3, #14
 8012640:	b29b      	uxth	r3, r3
 8012642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012646:	b29a      	uxth	r2, r3
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 801264c:	69bb      	ldr	r3, [r7, #24]
 801264e:	09db      	lsrs	r3, r3, #7
 8012650:	b2db      	uxtb	r3, r3
 8012652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012656:	b2da      	uxtb	r2, r3
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 801265c:	69bb      	ldr	r3, [r7, #24]
 801265e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012662:	2b00      	cmp	r3, #0
 8012664:	d107      	bne.n	8012676 <rxTryParseFrame+0x14a>
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	7b1a      	ldrb	r2, [r3, #12]
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	7b5b      	ldrb	r3, [r3, #13]
 801266e:	429a      	cmp	r2, r3
 8012670:	d001      	beq.n	8012676 <rxTryParseFrame+0x14a>
 8012672:	2301      	movs	r3, #1
 8012674:	e000      	b.n	8012678 <rxTryParseFrame+0x14c>
 8012676:	2300      	movs	r3, #0
 8012678:	77fb      	strb	r3, [r7, #31]
 801267a:	7ffb      	ldrb	r3, [r7, #31]
 801267c:	f003 0301 	and.w	r3, r3, #1
 8012680:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	1e5a      	subs	r2, r3, #1
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	689a      	ldr	r2, [r3, #8]
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	699a      	ldr	r2, [r3, #24]
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	695b      	ldr	r3, [r3, #20]
 801269c:	4413      	add	r3, r2
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 80126a2:	7dfb      	ldrb	r3, [r7, #23]
 80126a4:	f003 031f 	and.w	r3, r3, #31
 80126a8:	b2da      	uxtb	r2, r3
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 80126ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	09db      	lsrs	r3, r3, #7
 80126b6:	b2da      	uxtb	r2, r3
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 80126bc:	7dfb      	ldrb	r3, [r7, #23]
 80126be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	bf14      	ite	ne
 80126c6:	2301      	movne	r3, #1
 80126c8:	2300      	moveq	r3, #0
 80126ca:	b2da      	uxtb	r2, r3
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 80126d0:	7dfb      	ldrb	r3, [r7, #23]
 80126d2:	f003 0320 	and.w	r3, r3, #32
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	bf14      	ite	ne
 80126da:	2301      	movne	r3, #1
 80126dc:	2300      	moveq	r3, #0
 80126de:	b2da      	uxtb	r2, r3
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 80126e4:	7ffb      	ldrb	r3, [r7, #31]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d00c      	beq.n	8012704 <rxTryParseFrame+0x1d8>
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	7bdb      	ldrb	r3, [r3, #15]
 80126ee:	f083 0301 	eor.w	r3, r3, #1
 80126f2:	b2db      	uxtb	r3, r3
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d103      	bne.n	8012700 <rxTryParseFrame+0x1d4>
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	7c5b      	ldrb	r3, [r3, #17]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d001      	beq.n	8012704 <rxTryParseFrame+0x1d8>
 8012700:	2301      	movs	r3, #1
 8012702:	e000      	b.n	8012706 <rxTryParseFrame+0x1da>
 8012704:	2300      	movs	r3, #0
 8012706:	77fb      	strb	r3, [r7, #31]
 8012708:	7ffb      	ldrb	r3, [r7, #31]
 801270a:	f003 0301 	and.w	r3, r3, #1
 801270e:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8012710:	7ffb      	ldrb	r3, [r7, #31]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00d      	beq.n	8012732 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 801271a:	2b00      	cmp	r3, #0
 801271c:	d003      	beq.n	8012726 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	7c1b      	ldrb	r3, [r3, #16]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d103      	bne.n	801272e <rxTryParseFrame+0x202>
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	7b1b      	ldrb	r3, [r3, #12]
 801272a:	2bff      	cmp	r3, #255	@ 0xff
 801272c:	d001      	beq.n	8012732 <rxTryParseFrame+0x206>
        valid = valid &&
 801272e:	2301      	movs	r3, #1
 8012730:	e000      	b.n	8012734 <rxTryParseFrame+0x208>
 8012732:	2300      	movs	r3, #0
 8012734:	77fb      	strb	r3, [r7, #31]
 8012736:	7ffb      	ldrb	r3, [r7, #31]
 8012738:	f003 0301 	and.w	r3, r3, #1
 801273c:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 801273e:	7ffb      	ldrb	r3, [r7, #31]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d009      	beq.n	8012758 <rxTryParseFrame+0x22c>
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	695b      	ldr	r3, [r3, #20]
 8012748:	2b06      	cmp	r3, #6
 801274a:	d803      	bhi.n	8012754 <rxTryParseFrame+0x228>
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	7c1b      	ldrb	r3, [r3, #16]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d001      	beq.n	8012758 <rxTryParseFrame+0x22c>
 8012754:	2301      	movs	r3, #1
 8012756:	e000      	b.n	801275a <rxTryParseFrame+0x22e>
 8012758:	2300      	movs	r3, #0
 801275a:	77fb      	strb	r3, [r7, #31]
 801275c:	7ffb      	ldrb	r3, [r7, #31]
 801275e:	f003 0301 	and.w	r3, r3, #1
 8012762:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 8012764:	7ffb      	ldrb	r3, [r7, #31]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d00d      	beq.n	8012786 <rxTryParseFrame+0x25a>
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	695b      	ldr	r3, [r3, #20]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d107      	bne.n	8012782 <rxTryParseFrame+0x256>
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	7bdb      	ldrb	r3, [r3, #15]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d005      	beq.n	8012786 <rxTryParseFrame+0x25a>
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	7c1b      	ldrb	r3, [r3, #16]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d001      	beq.n	8012786 <rxTryParseFrame+0x25a>
 8012782:	2301      	movs	r3, #1
 8012784:	e000      	b.n	8012788 <rxTryParseFrame+0x25c>
 8012786:	2300      	movs	r3, #0
 8012788:	77fb      	strb	r3, [r7, #31]
 801278a:	7ffb      	ldrb	r3, [r7, #31]
 801278c:	f003 0301 	and.w	r3, r3, #1
 8012790:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 8012792:	7ffb      	ldrb	r3, [r7, #31]
}
 8012794:	4618      	mov	r0, r3
 8012796:	3720      	adds	r7, #32
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	08018600 	.word	0x08018600
 80127a0:	08019084 	.word	0x08019084
 80127a4:	080181a8 	.word	0x080181a8
 80127a8:	08018618 	.word	0x08018618
 80127ac:	08018648 	.word	0x08018648
 80127b0:	0801865c 	.word	0x0801865c

080127b4 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d106      	bne.n	80127d2 <rxInitTransferMetadataFromFrame+0x1e>
 80127c4:	4b19      	ldr	r3, [pc, #100]	@ (801282c <rxInitTransferMetadataFromFrame+0x78>)
 80127c6:	4a1a      	ldr	r2, [pc, #104]	@ (8012830 <rxInitTransferMetadataFromFrame+0x7c>)
 80127c8:	f240 218f 	movw	r1, #655	@ 0x28f
 80127cc:	4819      	ldr	r0, [pc, #100]	@ (8012834 <rxInitTransferMetadataFromFrame+0x80>)
 80127ce:	f001 f855 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	699b      	ldr	r3, [r3, #24]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d106      	bne.n	80127e8 <rxInitTransferMetadataFromFrame+0x34>
 80127da:	4b17      	ldr	r3, [pc, #92]	@ (8012838 <rxInitTransferMetadataFromFrame+0x84>)
 80127dc:	4a14      	ldr	r2, [pc, #80]	@ (8012830 <rxInitTransferMetadataFromFrame+0x7c>)
 80127de:	f44f 7124 	mov.w	r1, #656	@ 0x290
 80127e2:	4814      	ldr	r0, [pc, #80]	@ (8012834 <rxInitTransferMetadataFromFrame+0x80>)
 80127e4:	f001 f84a 	bl	801387c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d106      	bne.n	80127fc <rxInitTransferMetadataFromFrame+0x48>
 80127ee:	4b13      	ldr	r3, [pc, #76]	@ (801283c <rxInitTransferMetadataFromFrame+0x88>)
 80127f0:	4a0f      	ldr	r2, [pc, #60]	@ (8012830 <rxInitTransferMetadataFromFrame+0x7c>)
 80127f2:	f240 2191 	movw	r1, #657	@ 0x291
 80127f6:	480f      	ldr	r0, [pc, #60]	@ (8012834 <rxInitTransferMetadataFromFrame+0x80>)
 80127f8:	f001 f840 	bl	801387c <__assert_func>
    out_transfer->priority       = frame->priority;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	7a1a      	ldrb	r2, [r3, #8]
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	7a5a      	ldrb	r2, [r3, #9]
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	895a      	ldrh	r2, [r3, #10]
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	7b1a      	ldrb	r2, [r3, #12]
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	7b9a      	ldrb	r2, [r3, #14]
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	715a      	strb	r2, [r3, #5]
}
 8012824:	bf00      	nop
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	08018600 	.word	0x08018600
 8012830:	08019118 	.word	0x08019118
 8012834:	080181a8 	.word	0x080181a8
 8012838:	0801865c 	.word	0x0801865c
 801283c:	0801867c 	.word	0x0801867c

08012840 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	4603      	mov	r3, r0
 8012848:	460a      	mov	r2, r1
 801284a:	71fb      	strb	r3, [r7, #7]
 801284c:	4613      	mov	r3, r2
 801284e:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8012850:	79fb      	ldrb	r3, [r7, #7]
 8012852:	2b1f      	cmp	r3, #31
 8012854:	d906      	bls.n	8012864 <rxComputeTransferIDDifference+0x24>
 8012856:	4b15      	ldr	r3, [pc, #84]	@ (80128ac <rxComputeTransferIDDifference+0x6c>)
 8012858:	4a15      	ldr	r2, [pc, #84]	@ (80128b0 <rxComputeTransferIDDifference+0x70>)
 801285a:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 801285e:	4815      	ldr	r0, [pc, #84]	@ (80128b4 <rxComputeTransferIDDifference+0x74>)
 8012860:	f001 f80c 	bl	801387c <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 8012864:	79bb      	ldrb	r3, [r7, #6]
 8012866:	2b1f      	cmp	r3, #31
 8012868:	d906      	bls.n	8012878 <rxComputeTransferIDDifference+0x38>
 801286a:	4b13      	ldr	r3, [pc, #76]	@ (80128b8 <rxComputeTransferIDDifference+0x78>)
 801286c:	4a10      	ldr	r2, [pc, #64]	@ (80128b0 <rxComputeTransferIDDifference+0x70>)
 801286e:	f240 219d 	movw	r1, #669	@ 0x29d
 8012872:	4810      	ldr	r0, [pc, #64]	@ (80128b4 <rxComputeTransferIDDifference+0x74>)
 8012874:	f001 f802 	bl	801387c <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 8012878:	79fb      	ldrb	r3, [r7, #7]
 801287a:	b29a      	uxth	r2, r3
 801287c:	79bb      	ldrb	r3, [r7, #6]
 801287e:	b29b      	uxth	r3, r3
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	b29b      	uxth	r3, r3
 8012884:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 8012886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801288a:	2b00      	cmp	r3, #0
 801288c:	da07      	bge.n	801289e <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 801288e:	2320      	movs	r3, #32
 8012890:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 8012892:	7b7b      	ldrb	r3, [r7, #13]
 8012894:	b29a      	uxth	r2, r3
 8012896:	89fb      	ldrh	r3, [r7, #14]
 8012898:	4413      	add	r3, r2
 801289a:	b29b      	uxth	r3, r3
 801289c:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 801289e:	89fb      	ldrh	r3, [r7, #14]
 80128a0:	b2db      	uxtb	r3, r3
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3710      	adds	r7, #16
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	08018698 	.word	0x08018698
 80128b0:	080190b4 	.word	0x080190b4
 80128b4:	080181a8 	.word	0x080181a8
 80128b8:	080186b0 	.word	0x080186b0

080128bc <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b086      	sub	sp, #24
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	607a      	str	r2, [r7, #4]
 80128c8:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d106      	bne.n	80128de <rxSessionWritePayload+0x22>
 80128d0:	4b67      	ldr	r3, [pc, #412]	@ (8012a70 <rxSessionWritePayload+0x1b4>)
 80128d2:	4a68      	ldr	r2, [pc, #416]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 80128d4:	f240 21ad 	movw	r1, #685	@ 0x2ad
 80128d8:	4867      	ldr	r0, [pc, #412]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 80128da:	f000 ffcf 	bl	801387c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d106      	bne.n	80128f2 <rxSessionWritePayload+0x36>
 80128e4:	4b65      	ldr	r3, [pc, #404]	@ (8012a7c <rxSessionWritePayload+0x1c0>)
 80128e6:	4a63      	ldr	r2, [pc, #396]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 80128e8:	f240 21ae 	movw	r1, #686	@ 0x2ae
 80128ec:	4862      	ldr	r0, [pc, #392]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 80128ee:	f000 ffc5 	bl	801387c <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 80128f2:	6a3b      	ldr	r3, [r7, #32]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d109      	bne.n	801290c <rxSessionWritePayload+0x50>
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d006      	beq.n	801290c <rxSessionWritePayload+0x50>
 80128fe:	4b60      	ldr	r3, [pc, #384]	@ (8012a80 <rxSessionWritePayload+0x1c4>)
 8012900:	4a5c      	ldr	r2, [pc, #368]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 8012902:	f240 21af 	movw	r1, #687	@ 0x2af
 8012906:	485c      	ldr	r0, [pc, #368]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 8012908:	f000 ffb8 	bl	801387c <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	429a      	cmp	r2, r3
 8012914:	d206      	bcs.n	8012924 <rxSessionWritePayload+0x68>
 8012916:	4b5b      	ldr	r3, [pc, #364]	@ (8012a84 <rxSessionWritePayload+0x1c8>)
 8012918:	4a56      	ldr	r2, [pc, #344]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 801291a:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 801291e:	4856      	ldr	r0, [pc, #344]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 8012920:	f000 ffac 	bl	801387c <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	68da      	ldr	r2, [r3, #12]
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	689b      	ldr	r3, [r3, #8]
 801292c:	429a      	cmp	r2, r3
 801292e:	d906      	bls.n	801293e <rxSessionWritePayload+0x82>
 8012930:	4b55      	ldr	r3, [pc, #340]	@ (8012a88 <rxSessionWritePayload+0x1cc>)
 8012932:	4a50      	ldr	r2, [pc, #320]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 8012934:	f240 21b1 	movw	r1, #689	@ 0x2b1
 8012938:	484f      	ldr	r0, [pc, #316]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 801293a:	f000 ff9f 	bl	801387c <__assert_func>

    rxs->total_payload_size += payload_size;
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	689a      	ldr	r2, [r3, #8]
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	441a      	add	r2, r3
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	691b      	ldr	r3, [r3, #16]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d115      	bne.n	801297e <rxSessionWritePayload+0xc2>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d012      	beq.n	801297e <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d006      	beq.n	801296e <rxSessionWritePayload+0xb2>
 8012960:	4b4a      	ldr	r3, [pc, #296]	@ (8012a8c <rxSessionWritePayload+0x1d0>)
 8012962:	4a44      	ldr	r2, [pc, #272]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 8012964:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8012968:	4843      	ldr	r0, [pc, #268]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 801296a:	f000 ff87 	bl	801387c <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	689b      	ldr	r3, [r3, #8]
 8012972:	6879      	ldr	r1, [r7, #4]
 8012974:	68f8      	ldr	r0, [r7, #12]
 8012976:	4798      	blx	r3
 8012978:	4602      	mov	r2, r0
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 801297e:	2300      	movs	r3, #0
 8012980:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	691b      	ldr	r3, [r3, #16]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d04e      	beq.n	8012a28 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	68da      	ldr	r2, [r3, #12]
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	4413      	add	r3, r2
 8012996:	687a      	ldr	r2, [r7, #4]
 8012998:	429a      	cmp	r2, r3
 801299a:	d229      	bcs.n	80129f0 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d206      	bcs.n	80129b4 <rxSessionWritePayload+0xf8>
 80129a6:	4b37      	ldr	r3, [pc, #220]	@ (8012a84 <rxSessionWritePayload+0x1c8>)
 80129a8:	4a32      	ldr	r2, [pc, #200]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 80129aa:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80129ae:	4832      	ldr	r0, [pc, #200]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 80129b0:	f000 ff64 	bl	801387c <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	1ad3      	subs	r3, r2, r3
 80129bc:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	68da      	ldr	r2, [r3, #12]
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	4413      	add	r3, r2
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d006      	beq.n	80129da <rxSessionWritePayload+0x11e>
 80129cc:	4b30      	ldr	r3, [pc, #192]	@ (8012a90 <rxSessionWritePayload+0x1d4>)
 80129ce:	4a29      	ldr	r2, [pc, #164]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 80129d0:	f240 21c5 	movw	r1, #709	@ 0x2c5
 80129d4:	4828      	ldr	r0, [pc, #160]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 80129d6:	f000 ff51 	bl	801387c <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 80129da:	693a      	ldr	r2, [r7, #16]
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	429a      	cmp	r2, r3
 80129e0:	d306      	bcc.n	80129f0 <rxSessionWritePayload+0x134>
 80129e2:	4b2c      	ldr	r3, [pc, #176]	@ (8012a94 <rxSessionWritePayload+0x1d8>)
 80129e4:	4a23      	ldr	r2, [pc, #140]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 80129e6:	f240 21c6 	movw	r1, #710	@ 0x2c6
 80129ea:	4823      	ldr	r0, [pc, #140]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 80129ec:	f000 ff46 	bl	801387c <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	691a      	ldr	r2, [r3, #16]
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	4413      	add	r3, r2
 80129fa:	693a      	ldr	r2, [r7, #16]
 80129fc:	6a39      	ldr	r1, [r7, #32]
 80129fe:	4618      	mov	r0, r3
 8012a00:	f002 f8dd 	bl	8014bbe <memcpy>
        rxs->payload_size += bytes_to_copy;
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	68da      	ldr	r2, [r3, #12]
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	441a      	add	r2, r3
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d219      	bcs.n	8012a4e <rxSessionWritePayload+0x192>
 8012a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8012a84 <rxSessionWritePayload+0x1c8>)
 8012a1c:	4a15      	ldr	r2, [pc, #84]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 8012a1e:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8012a22:	4815      	ldr	r0, [pc, #84]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 8012a24:	f000 ff2a 	bl	801387c <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	68db      	ldr	r3, [r3, #12]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d006      	beq.n	8012a3e <rxSessionWritePayload+0x182>
 8012a30:	4b16      	ldr	r3, [pc, #88]	@ (8012a8c <rxSessionWritePayload+0x1d0>)
 8012a32:	4a10      	ldr	r2, [pc, #64]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 8012a34:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8012a38:	480f      	ldr	r0, [pc, #60]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 8012a3a:	f000 ff1f 	bl	801387c <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d002      	beq.n	8012a4a <rxSessionWritePayload+0x18e>
 8012a44:	f06f 0302 	mvn.w	r3, #2
 8012a48:	e000      	b.n	8012a4c <rxSessionWritePayload+0x190>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 8012a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	dd06      	ble.n	8012a64 <rxSessionWritePayload+0x1a8>
 8012a56:	4b10      	ldr	r3, [pc, #64]	@ (8012a98 <rxSessionWritePayload+0x1dc>)
 8012a58:	4a06      	ldr	r2, [pc, #24]	@ (8012a74 <rxSessionWritePayload+0x1b8>)
 8012a5a:	f240 21d7 	movw	r1, #727	@ 0x2d7
 8012a5e:	4806      	ldr	r0, [pc, #24]	@ (8012a78 <rxSessionWritePayload+0x1bc>)
 8012a60:	f000 ff0c 	bl	801387c <__assert_func>
    return out;
 8012a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3718      	adds	r7, #24
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}
 8012a70:	0801836c 	.word	0x0801836c
 8012a74:	08019100 	.word	0x08019100
 8012a78:	080181a8 	.word	0x080181a8
 8012a7c:	080186c8 	.word	0x080186c8
 8012a80:	08018264 	.word	0x08018264
 8012a84:	080186dc 	.word	0x080186dc
 8012a88:	080186f8 	.word	0x080186f8
 8012a8c:	08018728 	.word	0x08018728
 8012a90:	08018740 	.word	0x08018740
 8012a94:	08018770 	.word	0x08018770
 8012a98:	08018790 	.word	0x08018790

08012a9c <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d106      	bne.n	8012aba <rxSessionRestart+0x1e>
 8012aac:	4b1a      	ldr	r3, [pc, #104]	@ (8012b18 <rxSessionRestart+0x7c>)
 8012aae:	4a1b      	ldr	r2, [pc, #108]	@ (8012b1c <rxSessionRestart+0x80>)
 8012ab0:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8012ab4:	481a      	ldr	r0, [pc, #104]	@ (8012b20 <rxSessionRestart+0x84>)
 8012ab6:	f000 fee1 	bl	801387c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d106      	bne.n	8012ace <rxSessionRestart+0x32>
 8012ac0:	4b18      	ldr	r3, [pc, #96]	@ (8012b24 <rxSessionRestart+0x88>)
 8012ac2:	4a16      	ldr	r2, [pc, #88]	@ (8012b1c <rxSessionRestart+0x80>)
 8012ac4:	f240 21de 	movw	r1, #734	@ 0x2de
 8012ac8:	4815      	ldr	r0, [pc, #84]	@ (8012b20 <rxSessionRestart+0x84>)
 8012aca:	f000 fed7 	bl	801387c <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	68db      	ldr	r3, [r3, #12]
 8012ad2:	683a      	ldr	r2, [r7, #0]
 8012ad4:	6912      	ldr	r2, [r2, #16]
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	2200      	movs	r2, #0
 8012aec:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012af4:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	7d9b      	ldrb	r3, [r3, #22]
 8012afa:	3301      	adds	r3, #1
 8012afc:	b2db      	uxtb	r3, r3
 8012afe:	f003 031f 	and.w	r3, r3, #31
 8012b02:	b2da      	uxtb	r2, r3
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	2201      	movs	r2, #1
 8012b0c:	761a      	strb	r2, [r3, #24]
}
 8012b0e:	bf00      	nop
 8012b10:	3708      	adds	r7, #8
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	bf00      	nop
 8012b18:	0801836c 	.word	0x0801836c
 8012b1c:	080190d4 	.word	0x080190d4
 8012b20:	080181a8 	.word	0x080181a8
 8012b24:	080186c8 	.word	0x080186c8

08012b28 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b088      	sub	sp, #32
 8012b2c:	af02      	add	r7, sp, #8
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	607a      	str	r2, [r7, #4]
 8012b34:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d106      	bne.n	8012b4a <rxSessionAcceptFrame+0x22>
 8012b3c:	4b81      	ldr	r3, [pc, #516]	@ (8012d44 <rxSessionAcceptFrame+0x21c>)
 8012b3e:	4a82      	ldr	r2, [pc, #520]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012b40:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012b44:	4881      	ldr	r0, [pc, #516]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012b46:	f000 fe99 	bl	801387c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d106      	bne.n	8012b5e <rxSessionAcceptFrame+0x36>
 8012b50:	4b7f      	ldr	r3, [pc, #508]	@ (8012d50 <rxSessionAcceptFrame+0x228>)
 8012b52:	4a7d      	ldr	r2, [pc, #500]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012b54:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8012b58:	487c      	ldr	r0, [pc, #496]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012b5a:	f000 fe8f 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d106      	bne.n	8012b72 <rxSessionAcceptFrame+0x4a>
 8012b64:	4b7b      	ldr	r3, [pc, #492]	@ (8012d54 <rxSessionAcceptFrame+0x22c>)
 8012b66:	4a78      	ldr	r2, [pc, #480]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012b68:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8012b6c:	4877      	ldr	r0, [pc, #476]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012b6e:	f000 fe85 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	699b      	ldr	r3, [r3, #24]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d106      	bne.n	8012b88 <rxSessionAcceptFrame+0x60>
 8012b7a:	4b77      	ldr	r3, [pc, #476]	@ (8012d58 <rxSessionAcceptFrame+0x230>)
 8012b7c:	4a72      	ldr	r2, [pc, #456]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012b7e:	f240 21f2 	movw	r1, #754	@ 0x2f2
 8012b82:	4872      	ldr	r0, [pc, #456]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012b84:	f000 fe7a 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	7b9b      	ldrb	r3, [r3, #14]
 8012b8c:	2b1f      	cmp	r3, #31
 8012b8e:	d906      	bls.n	8012b9e <rxSessionAcceptFrame+0x76>
 8012b90:	4b72      	ldr	r3, [pc, #456]	@ (8012d5c <rxSessionAcceptFrame+0x234>)
 8012b92:	4a6d      	ldr	r2, [pc, #436]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012b94:	f240 21f3 	movw	r1, #755	@ 0x2f3
 8012b98:	486c      	ldr	r0, [pc, #432]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012b9a:	f000 fe6f 	bl	801387c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8012b9e:	6a3b      	ldr	r3, [r7, #32]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d106      	bne.n	8012bb2 <rxSessionAcceptFrame+0x8a>
 8012ba4:	4b6e      	ldr	r3, [pc, #440]	@ (8012d60 <rxSessionAcceptFrame+0x238>)
 8012ba6:	4a68      	ldr	r2, [pc, #416]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012ba8:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8012bac:	4867      	ldr	r0, [pc, #412]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012bae:	f000 fe65 	bl	801387c <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	7bdb      	ldrb	r3, [r3, #15]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d005      	beq.n	8012bc6 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc0:	68b9      	ldr	r1, [r7, #8]
 8012bc2:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	7bdb      	ldrb	r3, [r3, #15]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d005      	beq.n	8012bda <rxSessionAcceptFrame+0xb2>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	7c1b      	ldrb	r3, [r3, #16]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d001      	beq.n	8012bda <rxSessionAcceptFrame+0xb2>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e000      	b.n	8012bdc <rxSessionAcceptFrame+0xb4>
 8012bda:	2300      	movs	r3, #0
 8012bdc:	75bb      	strb	r3, [r7, #22]
 8012bde:	7dbb      	ldrb	r3, [r7, #22]
 8012be0:	f003 0301 	and.w	r3, r3, #1
 8012be4:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 8012be6:	7dbb      	ldrb	r3, [r7, #22]
 8012be8:	f083 0301 	eor.w	r3, r3, #1
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d00c      	beq.n	8012c0c <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	8a98      	ldrh	r0, [r3, #20]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6959      	ldr	r1, [r3, #20]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	699b      	ldr	r3, [r3, #24]
 8012bfe:	461a      	mov	r2, r3
 8012c00:	f7fe fed6 	bl	80119b0 <crcAdd>
 8012c04:	4603      	mov	r3, r0
 8012c06:	461a      	mov	r2, r3
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	695a      	ldr	r2, [r3, #20]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	699b      	ldr	r3, [r3, #24]
 8012c14:	9300      	str	r3, [sp, #0]
 8012c16:	4613      	mov	r3, r2
 8012c18:	683a      	ldr	r2, [r7, #0]
 8012c1a:	68b9      	ldr	r1, [r7, #8]
 8012c1c:	68f8      	ldr	r0, [r7, #12]
 8012c1e:	f7ff fe4d 	bl	80128bc <rxSessionWritePayload>
 8012c22:	4603      	mov	r3, r0
 8012c24:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 8012c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	da10      	bge.n	8012c50 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 8012c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c32:	f113 0f03 	cmn.w	r3, #3
 8012c36:	d006      	beq.n	8012c46 <rxSessionAcceptFrame+0x11e>
 8012c38:	4b4a      	ldr	r3, [pc, #296]	@ (8012d64 <rxSessionAcceptFrame+0x23c>)
 8012c3a:	4a43      	ldr	r2, [pc, #268]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012c3c:	f240 3106 	movw	r1, #774	@ 0x306
 8012c40:	4842      	ldr	r0, [pc, #264]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012c42:	f000 fe1b 	bl	801387c <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 8012c46:	68b9      	ldr	r1, [r7, #8]
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f7ff ff27 	bl	8012a9c <rxSessionRestart>
 8012c4e:	e072      	b.n	8012d36 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	7c1b      	ldrb	r3, [r3, #16]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d05f      	beq.n	8012d18 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8012c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d006      	beq.n	8012c6e <rxSessionAcceptFrame+0x146>
 8012c60:	4b41      	ldr	r3, [pc, #260]	@ (8012d68 <rxSessionAcceptFrame+0x240>)
 8012c62:	4a39      	ldr	r2, [pc, #228]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012c64:	f240 310b 	movw	r1, #779	@ 0x30b
 8012c68:	4838      	ldr	r0, [pc, #224]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012c6a:	f000 fe07 	bl	801387c <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 8012c6e:	7dbb      	ldrb	r3, [r7, #22]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d103      	bne.n	8012c7c <rxSessionAcceptFrame+0x154>
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	8a9b      	ldrh	r3, [r3, #20]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d148      	bne.n	8012d0e <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8012c80:	6a3b      	ldr	r3, [r7, #32]
 8012c82:	4619      	mov	r1, r3
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f7ff fd95 	bl	80127b4 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c90:	6a39      	ldr	r1, [r7, #32]
 8012c92:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	68da      	ldr	r2, [r3, #12]
 8012c9a:	6a3b      	ldr	r3, [r7, #32]
 8012c9c:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	691a      	ldr	r2, [r3, #16]
 8012ca2:	6a3b      	ldr	r3, [r7, #32]
 8012ca4:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	689a      	ldr	r2, [r3, #8]
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d206      	bcs.n	8012cc0 <rxSessionAcceptFrame+0x198>
 8012cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8012d6c <rxSessionAcceptFrame+0x244>)
 8012cb4:	4a24      	ldr	r2, [pc, #144]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012cb6:	f240 3115 	movw	r1, #789	@ 0x315
 8012cba:	4824      	ldr	r0, [pc, #144]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012cbc:	f000 fdde 	bl	801387c <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 8012cc0:	68bb      	ldr	r3, [r7, #8]
 8012cc2:	689a      	ldr	r2, [r3, #8]
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	1ad3      	subs	r3, r2, r3
 8012cca:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 8012ccc:	7dbb      	ldrb	r3, [r7, #22]
 8012cce:	f083 0301 	eor.w	r3, r3, #1
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d017      	beq.n	8012d08 <rxSessionAcceptFrame+0x1e0>
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	2b01      	cmp	r3, #1
 8012cdc:	d814      	bhi.n	8012d08 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 8012cde:	6a3b      	ldr	r3, [r7, #32]
 8012ce0:	691a      	ldr	r2, [r3, #16]
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	f1c3 0302 	rsb	r3, r3, #2
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d206      	bcs.n	8012cfa <rxSessionAcceptFrame+0x1d2>
 8012cec:	4b20      	ldr	r3, [pc, #128]	@ (8012d70 <rxSessionAcceptFrame+0x248>)
 8012cee:	4a16      	ldr	r2, [pc, #88]	@ (8012d48 <rxSessionAcceptFrame+0x220>)
 8012cf0:	f240 3119 	movw	r1, #793	@ 0x319
 8012cf4:	4815      	ldr	r0, [pc, #84]	@ (8012d4c <rxSessionAcceptFrame+0x224>)
 8012cf6:	f000 fdc1 	bl	801387c <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 8012cfa:	6a3b      	ldr	r3, [r7, #32]
 8012cfc:	691a      	ldr	r2, [r3, #16]
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	4413      	add	r3, r2
 8012d02:	1e9a      	subs	r2, r3, #2
 8012d04:	6a3b      	ldr	r3, [r7, #32]
 8012d06:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 8012d0e:	68b9      	ldr	r1, [r7, #8]
 8012d10:	68f8      	ldr	r0, [r7, #12]
 8012d12:	f7ff fec3 	bl	8012a9c <rxSessionRestart>
 8012d16:	e00e      	b.n	8012d36 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	7e1b      	ldrb	r3, [r3, #24]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	bf14      	ite	ne
 8012d20:	2301      	movne	r3, #1
 8012d22:	2300      	moveq	r3, #0
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	f083 0301 	eor.w	r3, r3, #1
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	f003 0301 	and.w	r3, r3, #1
 8012d30:	b2da      	uxtb	r2, r3
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	761a      	strb	r2, [r3, #24]
    }
    return out;
 8012d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3718      	adds	r7, #24
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	0801836c 	.word	0x0801836c
 8012d48:	080190e8 	.word	0x080190e8
 8012d4c:	080181a8 	.word	0x080181a8
 8012d50:	080186c8 	.word	0x080186c8
 8012d54:	08018600 	.word	0x08018600
 8012d58:	0801865c 	.word	0x0801865c
 8012d5c:	0801879c 	.word	0x0801879c
 8012d60:	0801867c 	.word	0x0801867c
 8012d64:	080187c4 	.word	0x080187c4
 8012d68:	080187d0 	.word	0x080187d0
 8012d6c:	080187dc 	.word	0x080187dc
 8012d70:	0801880c 	.word	0x0801880c

08012d74 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8012d74:	b5b0      	push	{r4, r5, r7, lr}
 8012d76:	b088      	sub	sp, #32
 8012d78:	af02      	add	r7, sp, #8
 8012d7a:	60f8      	str	r0, [r7, #12]
 8012d7c:	60b9      	str	r1, [r7, #8]
 8012d7e:	607a      	str	r2, [r7, #4]
 8012d80:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d106      	bne.n	8012d96 <rxSessionUpdate+0x22>
 8012d88:	4b6d      	ldr	r3, [pc, #436]	@ (8012f40 <rxSessionUpdate+0x1cc>)
 8012d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8012f44 <rxSessionUpdate+0x1d0>)
 8012d8c:	f240 3137 	movw	r1, #823	@ 0x337
 8012d90:	486d      	ldr	r0, [pc, #436]	@ (8012f48 <rxSessionUpdate+0x1d4>)
 8012d92:	f000 fd73 	bl	801387c <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d106      	bne.n	8012daa <rxSessionUpdate+0x36>
 8012d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8012f4c <rxSessionUpdate+0x1d8>)
 8012d9e:	4a69      	ldr	r2, [pc, #420]	@ (8012f44 <rxSessionUpdate+0x1d0>)
 8012da0:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8012da4:	4868      	ldr	r0, [pc, #416]	@ (8012f48 <rxSessionUpdate+0x1d4>)
 8012da6:	f000 fd69 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d106      	bne.n	8012dbe <rxSessionUpdate+0x4a>
 8012db0:	4b67      	ldr	r3, [pc, #412]	@ (8012f50 <rxSessionUpdate+0x1dc>)
 8012db2:	4a64      	ldr	r2, [pc, #400]	@ (8012f44 <rxSessionUpdate+0x1d0>)
 8012db4:	f240 3139 	movw	r1, #825	@ 0x339
 8012db8:	4863      	ldr	r0, [pc, #396]	@ (8012f48 <rxSessionUpdate+0x1d4>)
 8012dba:	f000 fd5f 	bl	801387c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8012dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d106      	bne.n	8012dd2 <rxSessionUpdate+0x5e>
 8012dc4:	4b63      	ldr	r3, [pc, #396]	@ (8012f54 <rxSessionUpdate+0x1e0>)
 8012dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8012f44 <rxSessionUpdate+0x1d0>)
 8012dc8:	f240 313a 	movw	r1, #826	@ 0x33a
 8012dcc:	485e      	ldr	r0, [pc, #376]	@ (8012f48 <rxSessionUpdate+0x1d4>)
 8012dce:	f000 fd55 	bl	801387c <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	7d9b      	ldrb	r3, [r3, #22]
 8012dd6:	2b1f      	cmp	r3, #31
 8012dd8:	d906      	bls.n	8012de8 <rxSessionUpdate+0x74>
 8012dda:	4b5f      	ldr	r3, [pc, #380]	@ (8012f58 <rxSessionUpdate+0x1e4>)
 8012ddc:	4a59      	ldr	r2, [pc, #356]	@ (8012f44 <rxSessionUpdate+0x1d0>)
 8012dde:	f240 313b 	movw	r1, #827	@ 0x33b
 8012de2:	4859      	ldr	r0, [pc, #356]	@ (8012f48 <rxSessionUpdate+0x1d4>)
 8012de4:	f000 fd4a 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	7b9b      	ldrb	r3, [r3, #14]
 8012dec:	2b1f      	cmp	r3, #31
 8012dee:	d906      	bls.n	8012dfe <rxSessionUpdate+0x8a>
 8012df0:	4b5a      	ldr	r3, [pc, #360]	@ (8012f5c <rxSessionUpdate+0x1e8>)
 8012df2:	4a54      	ldr	r2, [pc, #336]	@ (8012f44 <rxSessionUpdate+0x1d0>)
 8012df4:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 8012df8:	4853      	ldr	r0, [pc, #332]	@ (8012f48 <rxSessionUpdate+0x1d4>)
 8012dfa:	f000 fd3f 	bl	801387c <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e04:	68b9      	ldr	r1, [r7, #8]
 8012e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e0a:	4290      	cmp	r0, r2
 8012e0c:	eb71 0303 	sbcs.w	r3, r1, r3
 8012e10:	d20f      	bcs.n	8012e32 <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1e:	1a84      	subs	r4, r0, r2
 8012e20:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8012e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8012e28:	42a2      	cmp	r2, r4
 8012e2a:	41ab      	sbcs	r3, r5
 8012e2c:	d201      	bcs.n	8012e32 <rxSessionUpdate+0xbe>
 8012e2e:	2301      	movs	r3, #1
 8012e30:	e000      	b.n	8012e34 <rxSessionUpdate+0xc0>
 8012e32:	2300      	movs	r3, #0
 8012e34:	75bb      	strb	r3, [r7, #22]
 8012e36:	7dbb      	ldrb	r3, [r7, #22]
 8012e38:	f003 0301 	and.w	r3, r3, #1
 8012e3c:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	7d9a      	ldrb	r2, [r3, #22]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	7b9b      	ldrb	r3, [r3, #14]
 8012e46:	4619      	mov	r1, r3
 8012e48:	4610      	mov	r0, r2
 8012e4a:	f7ff fcf9 	bl	8012840 <rxComputeTransferIDDifference>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	bf8c      	ite	hi
 8012e54:	2301      	movhi	r3, #1
 8012e56:	2300      	movls	r3, #0
 8012e58:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8012e5a:	7dbb      	ldrb	r3, [r7, #22]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d10b      	bne.n	8012e78 <rxSessionUpdate+0x104>
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	7ddb      	ldrb	r3, [r3, #23]
 8012e64:	78fa      	ldrb	r2, [r7, #3]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d108      	bne.n	8012e7c <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d004      	beq.n	8012e7c <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8012e72:	7d7b      	ldrb	r3, [r7, #21]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d001      	beq.n	8012e7c <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8012e78:	2301      	movs	r3, #1
 8012e7a:	e000      	b.n	8012e7e <rxSessionUpdate+0x10a>
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	753b      	strb	r3, [r7, #20]
 8012e80:	7d3b      	ldrb	r3, [r7, #20]
 8012e82:	f003 0301 	and.w	r3, r3, #1
 8012e86:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 8012e88:	7d3b      	ldrb	r3, [r7, #20]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d013      	beq.n	8012eb6 <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	2200      	movs	r2, #0
 8012e92:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	2200      	movs	r2, #0
 8012e98:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012ea0:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	7b9a      	ldrb	r2, [r3, #14]
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	2201      	movs	r2, #1
 8012eae:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	78fa      	ldrb	r2, [r7, #3]
 8012eb4:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 8012eba:	7d3b      	ldrb	r3, [r7, #20]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d00b      	beq.n	8012ed8 <rxSessionUpdate+0x164>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	7bdb      	ldrb	r3, [r3, #15]
 8012ec4:	f083 0301 	eor.w	r3, r3, #1
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d004      	beq.n	8012ed8 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 8012ece:	68b9      	ldr	r1, [r7, #8]
 8012ed0:	68f8      	ldr	r0, [r7, #12]
 8012ed2:	f7ff fde3 	bl	8012a9c <rxSessionRestart>
 8012ed6:	e02c      	b.n	8012f32 <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	7ddb      	ldrb	r3, [r3, #23]
 8012edc:	78fa      	ldrb	r2, [r7, #3]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	bf0c      	ite	eq
 8012ee2:	2301      	moveq	r3, #1
 8012ee4:	2300      	movne	r3, #0
 8012ee6:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	7c5a      	ldrb	r2, [r3, #17]
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	7e1b      	ldrb	r3, [r3, #24]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	bf0c      	ite	eq
 8012ef4:	2301      	moveq	r3, #1
 8012ef6:	2300      	movne	r3, #0
 8012ef8:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	7b9a      	ldrb	r2, [r3, #14]
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	7d9b      	ldrb	r3, [r3, #22]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	bf0c      	ite	eq
 8012f06:	2301      	moveq	r3, #1
 8012f08:	2300      	movne	r3, #0
 8012f0a:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 8012f0c:	7cfb      	ldrb	r3, [r7, #19]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d00f      	beq.n	8012f32 <rxSessionUpdate+0x1be>
 8012f12:	7cbb      	ldrb	r3, [r7, #18]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d00c      	beq.n	8012f32 <rxSessionUpdate+0x1be>
 8012f18:	7c7b      	ldrb	r3, [r7, #17]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d009      	beq.n	8012f32 <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 8012f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f20:	9300      	str	r3, [sp, #0]
 8012f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f24:	687a      	ldr	r2, [r7, #4]
 8012f26:	68b9      	ldr	r1, [r7, #8]
 8012f28:	68f8      	ldr	r0, [r7, #12]
 8012f2a:	f7ff fdfd 	bl	8012b28 <rxSessionAcceptFrame>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 8012f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3718      	adds	r7, #24
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	0801836c 	.word	0x0801836c
 8012f44:	080190a4 	.word	0x080190a4
 8012f48:	080181a8 	.word	0x080181a8
 8012f4c:	080186c8 	.word	0x080186c8
 8012f50:	08018600 	.word	0x08018600
 8012f54:	0801867c 	.word	0x0801867c
 8012f58:	08018844 	.word	0x08018844
 8012f5c:	0801879c 	.word	0x0801879c

08012f60 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8012f60:	b5b0      	push	{r4, r5, r7, lr}
 8012f62:	b08c      	sub	sp, #48	@ 0x30
 8012f64:	af04      	add	r7, sp, #16
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
 8012f6c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d106      	bne.n	8012f82 <rxAcceptFrame+0x22>
 8012f74:	4b85      	ldr	r3, [pc, #532]	@ (801318c <rxAcceptFrame+0x22c>)
 8012f76:	4a86      	ldr	r2, [pc, #536]	@ (8013190 <rxAcceptFrame+0x230>)
 8012f78:	f44f 715a 	mov.w	r1, #872	@ 0x368
 8012f7c:	4885      	ldr	r0, [pc, #532]	@ (8013194 <rxAcceptFrame+0x234>)
 8012f7e:	f000 fc7d 	bl	801387c <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d106      	bne.n	8012f96 <rxAcceptFrame+0x36>
 8012f88:	4b83      	ldr	r3, [pc, #524]	@ (8013198 <rxAcceptFrame+0x238>)
 8012f8a:	4a81      	ldr	r2, [pc, #516]	@ (8013190 <rxAcceptFrame+0x230>)
 8012f8c:	f240 3169 	movw	r1, #873	@ 0x369
 8012f90:	4880      	ldr	r0, [pc, #512]	@ (8013194 <rxAcceptFrame+0x234>)
 8012f92:	f000 fc73 	bl	801387c <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	8b9a      	ldrh	r2, [r3, #28]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	895b      	ldrh	r3, [r3, #10]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d006      	beq.n	8012fb0 <rxAcceptFrame+0x50>
 8012fa2:	4b7e      	ldr	r3, [pc, #504]	@ (801319c <rxAcceptFrame+0x23c>)
 8012fa4:	4a7a      	ldr	r2, [pc, #488]	@ (8013190 <rxAcceptFrame+0x230>)
 8012fa6:	f240 316a 	movw	r1, #874	@ 0x36a
 8012faa:	487a      	ldr	r0, [pc, #488]	@ (8013194 <rxAcceptFrame+0x234>)
 8012fac:	f000 fc66 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d106      	bne.n	8012fc4 <rxAcceptFrame+0x64>
 8012fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80131a0 <rxAcceptFrame+0x240>)
 8012fb8:	4a75      	ldr	r2, [pc, #468]	@ (8013190 <rxAcceptFrame+0x230>)
 8012fba:	f240 316b 	movw	r1, #875	@ 0x36b
 8012fbe:	4875      	ldr	r0, [pc, #468]	@ (8013194 <rxAcceptFrame+0x234>)
 8012fc0:	f000 fc5c 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	699b      	ldr	r3, [r3, #24]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d106      	bne.n	8012fda <rxAcceptFrame+0x7a>
 8012fcc:	4b75      	ldr	r3, [pc, #468]	@ (80131a4 <rxAcceptFrame+0x244>)
 8012fce:	4a70      	ldr	r2, [pc, #448]	@ (8013190 <rxAcceptFrame+0x230>)
 8012fd0:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8012fd4:	486f      	ldr	r0, [pc, #444]	@ (8013194 <rxAcceptFrame+0x234>)
 8012fd6:	f000 fc51 	bl	801387c <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	7b9b      	ldrb	r3, [r3, #14]
 8012fde:	2b1f      	cmp	r3, #31
 8012fe0:	d906      	bls.n	8012ff0 <rxAcceptFrame+0x90>
 8012fe2:	4b71      	ldr	r3, [pc, #452]	@ (80131a8 <rxAcceptFrame+0x248>)
 8012fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8013190 <rxAcceptFrame+0x230>)
 8012fe6:	f240 316d 	movw	r1, #877	@ 0x36d
 8012fea:	486a      	ldr	r0, [pc, #424]	@ (8013194 <rxAcceptFrame+0x234>)
 8012fec:	f000 fc46 	bl	801387c <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	7b5b      	ldrb	r3, [r3, #13]
 8012ff4:	2bff      	cmp	r3, #255	@ 0xff
 8012ff6:	d00c      	beq.n	8013012 <rxAcceptFrame+0xb2>
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	791a      	ldrb	r2, [r3, #4]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	7b5b      	ldrb	r3, [r3, #13]
 8013000:	429a      	cmp	r2, r3
 8013002:	d006      	beq.n	8013012 <rxAcceptFrame+0xb2>
 8013004:	4b69      	ldr	r3, [pc, #420]	@ (80131ac <rxAcceptFrame+0x24c>)
 8013006:	4a62      	ldr	r2, [pc, #392]	@ (8013190 <rxAcceptFrame+0x230>)
 8013008:	f240 316e 	movw	r1, #878	@ 0x36e
 801300c:	4861      	ldr	r0, [pc, #388]	@ (8013194 <rxAcceptFrame+0x234>)
 801300e:	f000 fc35 	bl	801387c <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8013012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013014:	2b00      	cmp	r3, #0
 8013016:	d106      	bne.n	8013026 <rxAcceptFrame+0xc6>
 8013018:	4b65      	ldr	r3, [pc, #404]	@ (80131b0 <rxAcceptFrame+0x250>)
 801301a:	4a5d      	ldr	r2, [pc, #372]	@ (8013190 <rxAcceptFrame+0x230>)
 801301c:	f240 316f 	movw	r1, #879	@ 0x36f
 8013020:	485c      	ldr	r0, [pc, #368]	@ (8013194 <rxAcceptFrame+0x234>)
 8013022:	f000 fc2b 	bl	801387c <__assert_func>

    int8_t out = 0;
 8013026:	2300      	movs	r3, #0
 8013028:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	7b1b      	ldrb	r3, [r3, #12]
 801302e:	b25b      	sxtb	r3, r3
 8013030:	2b00      	cmp	r3, #0
 8013032:	db6c      	blt.n	801310e <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	7b1b      	ldrb	r3, [r3, #12]
 8013038:	68ba      	ldr	r2, [r7, #8]
 801303a:	3308      	adds	r3, #8
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	4413      	add	r3, r2
 8013040:	685b      	ldr	r3, [r3, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d134      	bne.n	80130b0 <rxAcceptFrame+0x150>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	7bdb      	ldrb	r3, [r3, #15]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d030      	beq.n	80130b0 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	689b      	ldr	r3, [r3, #8]
 8013052:	2120      	movs	r1, #32
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	4798      	blx	r3
 8013058:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	7b1b      	ldrb	r3, [r3, #12]
 801305e:	68ba      	ldr	r2, [r7, #8]
 8013060:	3308      	adds	r3, #8
 8013062:	009b      	lsls	r3, r3, #2
 8013064:	4413      	add	r3, r2
 8013066:	693a      	ldr	r2, [r7, #16]
 8013068:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d01d      	beq.n	80130ac <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013076:	6939      	ldr	r1, [r7, #16]
 8013078:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	2200      	movs	r2, #0
 8013080:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	2200      	movs	r2, #0
 8013086:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	2200      	movs	r2, #0
 801308c:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013094:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	7b9a      	ldrb	r2, [r3, #14]
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 801309e:	693b      	ldr	r3, [r7, #16]
 80130a0:	78fa      	ldrb	r2, [r7, #3]
 80130a2:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 80130a4:	693b      	ldr	r3, [r7, #16]
 80130a6:	2201      	movs	r2, #1
 80130a8:	761a      	strb	r2, [r3, #24]
 80130aa:	e001      	b.n	80130b0 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 80130ac:	23fd      	movs	r3, #253	@ 0xfd
 80130ae:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	7b1b      	ldrb	r3, [r3, #12]
 80130b4:	68ba      	ldr	r2, [r7, #8]
 80130b6:	3308      	adds	r3, #8
 80130b8:	009b      	lsls	r3, r3, #2
 80130ba:	4413      	add	r3, r2
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d05e      	beq.n	8013180 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 80130c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d006      	beq.n	80130d8 <rxAcceptFrame+0x178>
 80130ca:	4b3a      	ldr	r3, [pc, #232]	@ (80131b4 <rxAcceptFrame+0x254>)
 80130cc:	4a30      	ldr	r2, [pc, #192]	@ (8013190 <rxAcceptFrame+0x230>)
 80130ce:	f240 318e 	movw	r1, #910	@ 0x38e
 80130d2:	4830      	ldr	r0, [pc, #192]	@ (8013194 <rxAcceptFrame+0x234>)
 80130d4:	f000 fbd2 	bl	801387c <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	7b1b      	ldrb	r3, [r3, #12]
 80130dc:	68ba      	ldr	r2, [r7, #8]
 80130de:	3308      	adds	r3, #8
 80130e0:	009b      	lsls	r3, r3, #2
 80130e2:	4413      	add	r3, r2
 80130e4:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80130ec:	68b9      	ldr	r1, [r7, #8]
 80130ee:	6989      	ldr	r1, [r1, #24]
 80130f0:	78fd      	ldrb	r5, [r7, #3]
 80130f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80130f4:	9003      	str	r0, [sp, #12]
 80130f6:	9102      	str	r1, [sp, #8]
 80130f8:	e9cd 2300 	strd	r2, r3, [sp]
 80130fc:	462b      	mov	r3, r5
 80130fe:	687a      	ldr	r2, [r7, #4]
 8013100:	4621      	mov	r1, r4
 8013102:	68f8      	ldr	r0, [r7, #12]
 8013104:	f7ff fe36 	bl	8012d74 <rxSessionUpdate>
 8013108:	4603      	mov	r3, r0
 801310a:	77fb      	strb	r3, [r7, #31]
 801310c:	e038      	b.n	8013180 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	7b1b      	ldrb	r3, [r3, #12]
 8013112:	2bff      	cmp	r3, #255	@ 0xff
 8013114:	d006      	beq.n	8013124 <rxAcceptFrame+0x1c4>
 8013116:	4b28      	ldr	r3, [pc, #160]	@ (80131b8 <rxAcceptFrame+0x258>)
 8013118:	4a1d      	ldr	r2, [pc, #116]	@ (8013190 <rxAcceptFrame+0x230>)
 801311a:	f240 319a 	movw	r1, #922	@ 0x39a
 801311e:	481d      	ldr	r0, [pc, #116]	@ (8013194 <rxAcceptFrame+0x234>)
 8013120:	f000 fbac 	bl	801387c <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	695a      	ldr	r2, [r3, #20]
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 801312c:	4293      	cmp	r3, r2
 801312e:	bf28      	it	cs
 8013130:	4613      	movcs	r3, r2
 8013132:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	689b      	ldr	r3, [r3, #8]
 8013138:	69b9      	ldr	r1, [r7, #24]
 801313a:	68f8      	ldr	r0, [r7, #12]
 801313c:	4798      	blx	r3
 801313e:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d01a      	beq.n	801317c <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8013146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013148:	4619      	mov	r1, r3
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f7ff fb32 	bl	80127b4 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013156:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013158:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 801315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801315e:	69ba      	ldr	r2, [r7, #24]
 8013160:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 8013162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013164:	697a      	ldr	r2, [r7, #20]
 8013166:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	699b      	ldr	r3, [r3, #24]
 801316c:	69ba      	ldr	r2, [r7, #24]
 801316e:	4619      	mov	r1, r3
 8013170:	6978      	ldr	r0, [r7, #20]
 8013172:	f001 fd24 	bl	8014bbe <memcpy>
            out = 1;
 8013176:	2301      	movs	r3, #1
 8013178:	77fb      	strb	r3, [r7, #31]
 801317a:	e001      	b.n	8013180 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 801317c:	23fd      	movs	r3, #253	@ 0xfd
 801317e:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8013180:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013184:	4618      	mov	r0, r3
 8013186:	3720      	adds	r7, #32
 8013188:	46bd      	mov	sp, r7
 801318a:	bdb0      	pop	{r4, r5, r7, pc}
 801318c:	0801836c 	.word	0x0801836c
 8013190:	08019094 	.word	0x08019094
 8013194:	080181a8 	.word	0x080181a8
 8013198:	0801886c 	.word	0x0801886c
 801319c:	08018888 	.word	0x08018888
 80131a0:	08018600 	.word	0x08018600
 80131a4:	0801865c 	.word	0x0801865c
 80131a8:	0801879c 	.word	0x0801879c
 80131ac:	080188b0 	.word	0x080188b0
 80131b0:	0801867c 	.word	0x0801867c
 80131b4:	08018908 	.word	0x08018908
 80131b8:	08018914 	.word	0x08018914

080131bc <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	881b      	ldrh	r3, [r3, #0]
 80131ca:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	8b9b      	ldrh	r3, [r3, #28]
 80131d0:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 80131d2:	89fa      	ldrh	r2, [r7, #14]
 80131d4:	89bb      	ldrh	r3, [r7, #12]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d00a      	beq.n	80131f0 <rxSubscriptionPredicateOnPortID+0x34>
 80131da:	89fa      	ldrh	r2, [r7, #14]
 80131dc:	89bb      	ldrh	r3, [r7, #12]
 80131de:	429a      	cmp	r2, r3
 80131e0:	bf8c      	ite	hi
 80131e2:	2301      	movhi	r3, #1
 80131e4:	2300      	movls	r3, #0
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	461a      	mov	r2, r3
 80131ea:	4b05      	ldr	r3, [pc, #20]	@ (8013200 <rxSubscriptionPredicateOnPortID+0x44>)
 80131ec:	569b      	ldrsb	r3, [r3, r2]
 80131ee:	e000      	b.n	80131f2 <rxSubscriptionPredicateOnPortID+0x36>
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3714      	adds	r7, #20
 80131f6:	46bd      	mov	sp, r7
 80131f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fc:	4770      	bx	lr
 80131fe:	bf00      	nop
 8013200:	08019080 	.word	0x08019080

08013204 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	331c      	adds	r3, #28
 8013212:	6839      	ldr	r1, [r7, #0]
 8013214:	4618      	mov	r0, r3
 8013216:	f7ff ffd1 	bl	80131bc <rxSubscriptionPredicateOnPortID>
 801321a:	4603      	mov	r3, r0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}

08013224 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 8013224:	b5b0      	push	{r4, r5, r7, lr}
 8013226:	b08c      	sub	sp, #48	@ 0x30
 8013228:	af00      	add	r7, sp, #0
 801322a:	60f8      	str	r0, [r7, #12]
 801322c:	60b9      	str	r1, [r7, #8]
 801322e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d106      	bne.n	8013244 <canardInit+0x20>
 8013236:	4b16      	ldr	r3, [pc, #88]	@ (8013290 <canardInit+0x6c>)
 8013238:	4a16      	ldr	r2, [pc, #88]	@ (8013294 <canardInit+0x70>)
 801323a:	f240 31d6 	movw	r1, #982	@ 0x3d6
 801323e:	4816      	ldr	r0, [pc, #88]	@ (8013298 <canardInit+0x74>)
 8013240:	f000 fb1c 	bl	801387c <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d106      	bne.n	8013258 <canardInit+0x34>
 801324a:	4b14      	ldr	r3, [pc, #80]	@ (801329c <canardInit+0x78>)
 801324c:	4a11      	ldr	r2, [pc, #68]	@ (8013294 <canardInit+0x70>)
 801324e:	f240 31d7 	movw	r1, #983	@ 0x3d7
 8013252:	4811      	ldr	r0, [pc, #68]	@ (8013298 <canardInit+0x74>)
 8013254:	f000 fb12 	bl	801387c <__assert_func>
    const CanardInstance out = {
 8013258:	2300      	movs	r3, #0
 801325a:	617b      	str	r3, [r7, #20]
 801325c:	23ff      	movs	r3, #255	@ 0xff
 801325e:	763b      	strb	r3, [r7, #24]
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	61fb      	str	r3, [r7, #28]
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	623b      	str	r3, [r7, #32]
 8013268:	2300      	movs	r3, #0
 801326a:	627b      	str	r3, [r7, #36]	@ 0x24
 801326c:	2300      	movs	r3, #0
 801326e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013270:	2300      	movs	r3, #0
 8013272:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	461d      	mov	r5, r3
 8013278:	f107 0414 	add.w	r4, r7, #20
 801327c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801327e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013280:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013284:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8013288:	68f8      	ldr	r0, [r7, #12]
 801328a:	3730      	adds	r7, #48	@ 0x30
 801328c:	46bd      	mov	sp, r7
 801328e:	bdb0      	pop	{r4, r5, r7, pc}
 8013290:	08018934 	.word	0x08018934
 8013294:	08018f08 	.word	0x08018f08
 8013298:	080181a8 	.word	0x080181a8
 801329c:	08018954 	.word	0x08018954

080132a0 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 80132a0:	b4b0      	push	{r4, r5, r7}
 80132a2:	b08b      	sub	sp, #44	@ 0x2c
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	60f8      	str	r0, [r7, #12]
 80132a8:	60b9      	str	r1, [r7, #8]
 80132aa:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	617b      	str	r3, [r7, #20]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	61bb      	str	r3, [r7, #24]
 80132b4:	2300      	movs	r3, #0
 80132b6:	61fb      	str	r3, [r7, #28]
 80132b8:	2300      	movs	r3, #0
 80132ba:	623b      	str	r3, [r7, #32]
 80132bc:	2300      	movs	r3, #0
 80132be:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	461d      	mov	r5, r3
 80132c4:	f107 0414 	add.w	r4, r7, #20
 80132c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132cc:	6823      	ldr	r3, [r4, #0]
 80132ce:	602b      	str	r3, [r5, #0]
}
 80132d0:	68f8      	ldr	r0, [r7, #12]
 80132d2:	372c      	adds	r7, #44	@ 0x2c
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bcb0      	pop	{r4, r5, r7}
 80132d8:	4770      	bx	lr
	...

080132dc <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b08e      	sub	sp, #56	@ 0x38
 80132e0:	af06      	add	r7, sp, #24
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 80132ea:	f06f 0301 	mvn.w	r3, #1
 80132ee:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d062      	beq.n	80133bc <canardTxPush+0xe0>
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d05f      	beq.n	80133bc <canardTxPush+0xe0>
 80132fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d05c      	beq.n	80133bc <canardTxPush+0xe0>
 8013302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013304:	2b00      	cmp	r3, #0
 8013306:	d102      	bne.n	801330e <canardTxPush+0x32>
 8013308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801330a:	2b00      	cmp	r3, #0
 801330c:	d156      	bne.n	80133bc <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	685b      	ldr	r3, [r3, #4]
 8013312:	4618      	mov	r0, r3
 8013314:	f7fe fc02 	bl	8011b1c <adjustPresentationLayerMTU>
 8013318:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	791a      	ldrb	r2, [r3, #4]
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	9300      	str	r3, [sp, #0]
 8013322:	4613      	mov	r3, r2
 8013324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801332a:	f7fe fc27 	bl	8011b7c <txMakeCANID>
 801332e:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	2b00      	cmp	r3, #0
 8013334:	db40      	blt.n	80133b8 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 8013336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013338:	69bb      	ldr	r3, [r7, #24]
 801333a:	429a      	cmp	r2, r3
 801333c:	d81c      	bhi.n	8013378 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 801333e:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 8013340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013342:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 8013344:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013346:	9103      	str	r1, [sp, #12]
 8013348:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801334a:	9102      	str	r1, [sp, #8]
 801334c:	9201      	str	r2, [sp, #4]
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013354:	68b9      	ldr	r1, [r7, #8]
 8013356:	68f8      	ldr	r0, [r7, #12]
 8013358:	f7fe fdda 	bl	8011f10 <txPushSingleFrame>
 801335c:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 801335e:	69fb      	ldr	r3, [r7, #28]
 8013360:	2b00      	cmp	r3, #0
 8013362:	db2b      	blt.n	80133bc <canardTxPush+0xe0>
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	2b01      	cmp	r3, #1
 8013368:	d028      	beq.n	80133bc <canardTxPush+0xe0>
 801336a:	4b1c      	ldr	r3, [pc, #112]	@ (80133dc <canardTxPush+0x100>)
 801336c:	4a1c      	ldr	r2, [pc, #112]	@ (80133e0 <canardTxPush+0x104>)
 801336e:	f240 4105 	movw	r1, #1029	@ 0x405
 8013372:	481c      	ldr	r0, [pc, #112]	@ (80133e4 <canardTxPush+0x108>)
 8013374:	f000 fa82 	bl	801387c <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 8013378:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 801337a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801337c:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 801337e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013380:	9105      	str	r1, [sp, #20]
 8013382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013384:	9104      	str	r1, [sp, #16]
 8013386:	9203      	str	r2, [sp, #12]
 8013388:	9302      	str	r3, [sp, #8]
 801338a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801338e:	e9cd 2300 	strd	r2, r3, [sp]
 8013392:	69ba      	ldr	r2, [r7, #24]
 8013394:	68b9      	ldr	r1, [r7, #8]
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f7fe ffd4 	bl	8012344 <txPushMultiFrame>
 801339c:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 801339e:	69fb      	ldr	r3, [r7, #28]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	db0b      	blt.n	80133bc <canardTxPush+0xe0>
 80133a4:	69fb      	ldr	r3, [r7, #28]
 80133a6:	2b01      	cmp	r3, #1
 80133a8:	dc08      	bgt.n	80133bc <canardTxPush+0xe0>
 80133aa:	4b0f      	ldr	r3, [pc, #60]	@ (80133e8 <canardTxPush+0x10c>)
 80133ac:	4a0c      	ldr	r2, [pc, #48]	@ (80133e0 <canardTxPush+0x104>)
 80133ae:	f240 4111 	movw	r1, #1041	@ 0x411
 80133b2:	480c      	ldr	r0, [pc, #48]	@ (80133e4 <canardTxPush+0x108>)
 80133b4:	f000 fa62 	bl	801387c <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 80133bc:	69fb      	ldr	r3, [r7, #28]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d106      	bne.n	80133d0 <canardTxPush+0xf4>
 80133c2:	4b0a      	ldr	r3, [pc, #40]	@ (80133ec <canardTxPush+0x110>)
 80133c4:	4a06      	ldr	r2, [pc, #24]	@ (80133e0 <canardTxPush+0x104>)
 80133c6:	f240 4119 	movw	r1, #1049	@ 0x419
 80133ca:	4806      	ldr	r0, [pc, #24]	@ (80133e4 <canardTxPush+0x108>)
 80133cc:	f000 fa56 	bl	801387c <__assert_func>
    return out;
 80133d0:	69fb      	ldr	r3, [r7, #28]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3720      	adds	r7, #32
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	bf00      	nop
 80133dc:	080184a4 	.word	0x080184a4
 80133e0:	08018f14 	.word	0x08018f14
 80133e4:	080181a8 	.word	0x080181a8
 80133e8:	080185e8 	.word	0x080185e8
 80133ec:	08018970 	.word	0x08018970

080133f0 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 80133f8:	2300      	movs	r3, #0
 80133fa:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d006      	beq.n	8013410 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	2100      	movs	r1, #0
 8013408:	4618      	mov	r0, r3
 801340a:	f7fd ff1d 	bl	8011248 <cavlFindExtremum>
 801340e:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8013410:	68fb      	ldr	r3, [r7, #12]
}
 8013412:	4618      	mov	r0, r3
 8013414:	3710      	adds	r7, #16
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}

0801341a <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 801341a:	b580      	push	{r7, lr}
 801341c:	b084      	sub	sp, #16
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
 8013422:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8013424:	2300      	movs	r3, #0
 8013426:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d010      	beq.n	8013450 <canardTxPop+0x36>
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d00d      	beq.n	8013450 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	330c      	adds	r3, #12
 801343c:	683a      	ldr	r2, [r7, #0]
 801343e:	4611      	mov	r1, r2
 8013440:	4618      	mov	r0, r3
 8013442:	f7fe f957 	bl	80116f4 <cavlRemove>
        que->size--;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	689b      	ldr	r3, [r3, #8]
 801344a:	1e5a      	subs	r2, r3, #1
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	609a      	str	r2, [r3, #8]
    }
    return out;
 8013450:	68fb      	ldr	r3, [r7, #12]
}
 8013452:	4618      	mov	r0, r3
 8013454:	3710      	adds	r7, #16
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
	...

0801345c <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b090      	sub	sp, #64	@ 0x40
 8013460:	af02      	add	r7, sp, #8
 8013462:	60f8      	str	r0, [r7, #12]
 8013464:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8013468:	23fe      	movs	r3, #254	@ 0xfe
 801346a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d068      	beq.n	8013546 <canardRxAccept+0xea>
 8013474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013476:	2b00      	cmp	r3, #0
 8013478:	d065      	beq.n	8013546 <canardRxAccept+0xea>
 801347a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801347c:	2b00      	cmp	r3, #0
 801347e:	d062      	beq.n	8013546 <canardRxAccept+0xea>
 8013480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013488:	d25d      	bcs.n	8013546 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 801348a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801348c:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 801348e:	2b00      	cmp	r3, #0
 8013490:	d103      	bne.n	801349a <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 8013492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d155      	bne.n	8013546 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 801349a:	f107 0310 	add.w	r3, r7, #16
 801349e:	2220      	movs	r2, #32
 80134a0:	2100      	movs	r1, #0
 80134a2:	4618      	mov	r0, r3
 80134a4:	f001 faa5 	bl	80149f2 <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 80134a8:	f107 0310 	add.w	r3, r7, #16
 80134ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80134ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80134b2:	f7ff f83b 	bl	801252c <rxTryParseFrame>
 80134b6:	4603      	mov	r3, r0
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d041      	beq.n	8013540 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 80134bc:	7f7b      	ldrb	r3, [r7, #29]
 80134be:	2bff      	cmp	r3, #255	@ 0xff
 80134c0:	d004      	beq.n	80134cc <canardRxAccept+0x70>
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	791a      	ldrb	r2, [r3, #4]
 80134c6:	7f7b      	ldrb	r3, [r7, #29]
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d135      	bne.n	8013538 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 80134cc:	7e7b      	ldrb	r3, [r7, #25]
 80134ce:	3304      	adds	r3, #4
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	68fa      	ldr	r2, [r7, #12]
 80134d4:	18d0      	adds	r0, r2, r3
 80134d6:	f107 0310 	add.w	r3, r7, #16
 80134da:	f103 010a 	add.w	r1, r3, #10
 80134de:	2300      	movs	r3, #0
 80134e0:	4a21      	ldr	r2, [pc, #132]	@ (8013568 <canardRxAccept+0x10c>)
 80134e2:	f7fe f889 	bl	80115f8 <cavlSearch>
 80134e6:	6338      	str	r0, [r7, #48]	@ 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 80134e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d002      	beq.n	80134f4 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 80134ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80134f2:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 80134f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d01a      	beq.n	8013530 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 80134fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134fc:	8b9a      	ldrh	r2, [r3, #28]
 80134fe:	8b7b      	ldrh	r3, [r7, #26]
 8013500:	429a      	cmp	r2, r3
 8013502:	d006      	beq.n	8013512 <canardRxAccept+0xb6>
 8013504:	4b19      	ldr	r3, [pc, #100]	@ (801356c <canardRxAccept+0x110>)
 8013506:	4a1a      	ldr	r2, [pc, #104]	@ (8013570 <canardRxAccept+0x114>)
 8013508:	f240 415a 	movw	r1, #1114	@ 0x45a
 801350c:	4819      	ldr	r0, [pc, #100]	@ (8013574 <canardRxAccept+0x118>)
 801350e:	f000 f9b5 	bl	801387c <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 8013512:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8013516:	f107 0210 	add.w	r2, r7, #16
 801351a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801351c:	9300      	str	r3, [sp, #0]
 801351e:	460b      	mov	r3, r1
 8013520:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013522:	68f8      	ldr	r0, [r7, #12]
 8013524:	f7ff fd1c 	bl	8012f60 <rxAcceptFrame>
 8013528:	4603      	mov	r3, r0
 801352a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 801352e:	e00a      	b.n	8013546 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 8013530:	2300      	movs	r3, #0
 8013532:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8013536:	e006      	b.n	8013546 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 8013538:	2300      	movs	r3, #0
 801353a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801353e:	e002      	b.n	8013546 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 8013540:	2300      	movs	r3, #0
 8013542:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 8013546:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801354a:	2b01      	cmp	r3, #1
 801354c:	dd06      	ble.n	801355c <canardRxAccept+0x100>
 801354e:	4b0a      	ldr	r3, [pc, #40]	@ (8013578 <canardRxAccept+0x11c>)
 8013550:	4a07      	ldr	r2, [pc, #28]	@ (8013570 <canardRxAccept+0x114>)
 8013552:	f240 416c 	movw	r1, #1132	@ 0x46c
 8013556:	4807      	ldr	r0, [pc, #28]	@ (8013574 <canardRxAccept+0x118>)
 8013558:	f000 f990 	bl	801387c <__assert_func>
    return out;
 801355c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8013560:	4618      	mov	r0, r3
 8013562:	3738      	adds	r7, #56	@ 0x38
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}
 8013568:	080131bd 	.word	0x080131bd
 801356c:	0801897c 	.word	0x0801897c
 8013570:	08019070 	.word	0x08019070
 8013574:	080181a8 	.word	0x080181a8
 8013578:	0801899c 	.word	0x0801899c

0801357c <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b088      	sub	sp, #32
 8013580:	af00      	add	r7, sp, #0
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	607b      	str	r3, [r7, #4]
 8013586:	460b      	mov	r3, r1
 8013588:	72fb      	strb	r3, [r7, #11]
 801358a:	4613      	mov	r3, r2
 801358c:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 801358e:	23fe      	movs	r3, #254	@ 0xfe
 8013590:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8013592:	7afb      	ldrb	r3, [r7, #11]
 8013594:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d04a      	beq.n	8013632 <canardRxSubscribe+0xb6>
 801359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d047      	beq.n	8013632 <canardRxSubscribe+0xb6>
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	2b02      	cmp	r3, #2
 80135a6:	d844      	bhi.n	8013632 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 80135a8:	893a      	ldrh	r2, [r7, #8]
 80135aa:	7afb      	ldrb	r3, [r7, #11]
 80135ac:	4619      	mov	r1, r3
 80135ae:	68f8      	ldr	r0, [r7, #12]
 80135b0:	f000 f850 	bl	8013654 <canardRxUnsubscribe>
 80135b4:	4603      	mov	r3, r0
 80135b6:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 80135b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	db38      	blt.n	8013632 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 80135c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80135c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80135c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 80135ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135cc:	687a      	ldr	r2, [r7, #4]
 80135ce:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 80135d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135d2:	893a      	ldrh	r2, [r7, #8]
 80135d4:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80135d6:	2300      	movs	r3, #0
 80135d8:	61bb      	str	r3, [r7, #24]
 80135da:	e009      	b.n	80135f0 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 80135dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	3308      	adds	r3, #8
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	4413      	add	r3, r2
 80135e6:	2200      	movs	r2, #0
 80135e8:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80135ea:	69bb      	ldr	r3, [r7, #24]
 80135ec:	3301      	adds	r3, #1
 80135ee:	61bb      	str	r3, [r7, #24]
 80135f0:	69bb      	ldr	r3, [r7, #24]
 80135f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80135f4:	d9f2      	bls.n	80135dc <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	3304      	adds	r3, #4
 80135fa:	009b      	lsls	r3, r3, #2
 80135fc:	68fa      	ldr	r2, [r7, #12]
 80135fe:	18d0      	adds	r0, r2, r3
 8013600:	4b0f      	ldr	r3, [pc, #60]	@ (8013640 <canardRxSubscribe+0xc4>)
 8013602:	4a10      	ldr	r2, [pc, #64]	@ (8013644 <canardRxSubscribe+0xc8>)
 8013604:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013606:	f7fd fff7 	bl	80115f8 <cavlSearch>
 801360a:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 801360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360e:	693a      	ldr	r2, [r7, #16]
 8013610:	429a      	cmp	r2, r3
 8013612:	d006      	beq.n	8013622 <canardRxSubscribe+0xa6>
 8013614:	4b0c      	ldr	r3, [pc, #48]	@ (8013648 <canardRxSubscribe+0xcc>)
 8013616:	4a0d      	ldr	r2, [pc, #52]	@ (801364c <canardRxSubscribe+0xd0>)
 8013618:	f44f 6192 	mov.w	r1, #1168	@ 0x490
 801361c:	480c      	ldr	r0, [pc, #48]	@ (8013650 <canardRxSubscribe+0xd4>)
 801361e:	f000 f92d 	bl	801387c <__assert_func>
            out = (out > 0) ? 0 : 1;
 8013622:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013626:	2b00      	cmp	r3, #0
 8013628:	bfd4      	ite	le
 801362a:	2301      	movle	r3, #1
 801362c:	2300      	movgt	r3, #0
 801362e:	b2db      	uxtb	r3, r3
 8013630:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8013632:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013636:	4618      	mov	r0, r3
 8013638:	3720      	adds	r7, #32
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	08011959 	.word	0x08011959
 8013644:	08013205 	.word	0x08013205
 8013648:	080189a8 	.word	0x080189a8
 801364c:	08019138 	.word	0x08019138
 8013650:	080181a8 	.word	0x080181a8

08013654 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b088      	sub	sp, #32
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	460b      	mov	r3, r1
 801365e:	70fb      	strb	r3, [r7, #3]
 8013660:	4613      	mov	r3, r2
 8013662:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8013664:	23fe      	movs	r3, #254	@ 0xfe
 8013666:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8013668:	78fb      	ldrb	r3, [r7, #3]
 801366a:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d05f      	beq.n	8013732 <canardRxUnsubscribe+0xde>
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	2b02      	cmp	r3, #2
 8013676:	d85c      	bhi.n	8013732 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 8013678:	883b      	ldrh	r3, [r7, #0]
 801367a:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 801367c:	697b      	ldr	r3, [r7, #20]
 801367e:	3304      	adds	r3, #4
 8013680:	009b      	lsls	r3, r3, #2
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	18d0      	adds	r0, r2, r3
 8013686:	f107 010e 	add.w	r1, r7, #14
 801368a:	2300      	movs	r3, #0
 801368c:	4a2c      	ldr	r2, [pc, #176]	@ (8013740 <canardRxUnsubscribe+0xec>)
 801368e:	f7fd ffb3 	bl	80115f8 <cavlSearch>
 8013692:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d049      	beq.n	801372e <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	3304      	adds	r3, #4
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	4413      	add	r3, r2
 80136a4:	693a      	ldr	r2, [r7, #16]
 80136a6:	4611      	mov	r1, r2
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7fe f823 	bl	80116f4 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	8b9b      	ldrh	r3, [r3, #28]
 80136b2:	883a      	ldrh	r2, [r7, #0]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d006      	beq.n	80136c6 <canardRxUnsubscribe+0x72>
 80136b8:	4b22      	ldr	r3, [pc, #136]	@ (8013744 <canardRxUnsubscribe+0xf0>)
 80136ba:	4a23      	ldr	r2, [pc, #140]	@ (8013748 <canardRxUnsubscribe+0xf4>)
 80136bc:	f240 41a5 	movw	r1, #1189	@ 0x4a5
 80136c0:	4822      	ldr	r0, [pc, #136]	@ (801374c <canardRxUnsubscribe+0xf8>)
 80136c2:	f000 f8db 	bl	801387c <__assert_func>
            out = 1;
 80136c6:	2301      	movs	r3, #1
 80136c8:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80136ca:	2300      	movs	r3, #0
 80136cc:	61bb      	str	r3, [r7, #24]
 80136ce:	e02a      	b.n	8013726 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	68da      	ldr	r2, [r3, #12]
 80136d4:	6939      	ldr	r1, [r7, #16]
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	3308      	adds	r3, #8
 80136da:	009b      	lsls	r3, r3, #2
 80136dc:	440b      	add	r3, r1
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d007      	beq.n	80136f4 <canardRxUnsubscribe+0xa0>
 80136e4:	6939      	ldr	r1, [r7, #16]
 80136e6:	69bb      	ldr	r3, [r7, #24]
 80136e8:	3308      	adds	r3, #8
 80136ea:	009b      	lsls	r3, r3, #2
 80136ec:	440b      	add	r3, r1
 80136ee:	685b      	ldr	r3, [r3, #4]
 80136f0:	691b      	ldr	r3, [r3, #16]
 80136f2:	e000      	b.n	80136f6 <canardRxUnsubscribe+0xa2>
 80136f4:	2300      	movs	r3, #0
 80136f6:	4619      	mov	r1, r3
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	68da      	ldr	r2, [r3, #12]
 8013700:	6939      	ldr	r1, [r7, #16]
 8013702:	69bb      	ldr	r3, [r7, #24]
 8013704:	3308      	adds	r3, #8
 8013706:	009b      	lsls	r3, r3, #2
 8013708:	440b      	add	r3, r1
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	4619      	mov	r1, r3
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	4790      	blx	r2
                sub->sessions[i] = NULL;
 8013712:	693a      	ldr	r2, [r7, #16]
 8013714:	69bb      	ldr	r3, [r7, #24]
 8013716:	3308      	adds	r3, #8
 8013718:	009b      	lsls	r3, r3, #2
 801371a:	4413      	add	r3, r2
 801371c:	2200      	movs	r2, #0
 801371e:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	3301      	adds	r3, #1
 8013724:	61bb      	str	r3, [r7, #24]
 8013726:	69bb      	ldr	r3, [r7, #24]
 8013728:	2b7f      	cmp	r3, #127	@ 0x7f
 801372a:	d9d1      	bls.n	80136d0 <canardRxUnsubscribe+0x7c>
 801372c:	e001      	b.n	8013732 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 801372e:	2300      	movs	r3, #0
 8013730:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8013732:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3720      	adds	r7, #32
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}
 801373e:	bf00      	nop
 8013740:	080131bd 	.word	0x080131bd
 8013744:	080189c8 	.word	0x080189c8
 8013748:	0801914c 	.word	0x0801914c
 801374c:	080181a8 	.word	0x080181a8

08013750 <canardMakeFilterForSubject>:

CanardFilter canardMakeFilterForSubject(const CanardPortID subject_id)
{
 8013750:	b480      	push	{r7}
 8013752:	b085      	sub	sp, #20
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	460b      	mov	r3, r1
 801375a:	807b      	strh	r3, [r7, #2]
    CanardFilter out = {0};
 801375c:	f107 0308 	add.w	r3, r7, #8
 8013760:	2200      	movs	r2, #0
 8013762:	601a      	str	r2, [r3, #0]
 8013764:	605a      	str	r2, [r3, #4]

    out.extended_can_id = ((uint32_t) subject_id) << OFFSET_SUBJECT_ID;
 8013766:	887b      	ldrh	r3, [r7, #2]
 8013768:	021b      	lsls	r3, r3, #8
 801376a:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_07 | (CANARD_SUBJECT_ID_MAX << OFFSET_SUBJECT_ID);
 801376c:	4b07      	ldr	r3, [pc, #28]	@ (801378c <canardMakeFilterForSubject+0x3c>)
 801376e:	60fb      	str	r3, [r7, #12]

    return out;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	461a      	mov	r2, r3
 8013774:	f107 0308 	add.w	r3, r7, #8
 8013778:	e893 0003 	ldmia.w	r3, {r0, r1}
 801377c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	3714      	adds	r7, #20
 8013784:	46bd      	mov	sp, r7
 8013786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378a:	4770      	bx	lr
 801378c:	021fff80 	.word	0x021fff80

08013790 <canardMakeFilterForServices>:

    return out;
}

CanardFilter canardMakeFilterForServices(const CanardNodeID local_node_id)
{
 8013790:	b480      	push	{r7}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	460b      	mov	r3, r1
 801379a:	70fb      	strb	r3, [r7, #3]
    CanardFilter out = {0};
 801379c:	f107 0308 	add.w	r3, r7, #8
 80137a0:	2200      	movs	r2, #0
 80137a2:	601a      	str	r2, [r3, #0]
 80137a4:	605a      	str	r2, [r3, #4]

    out.extended_can_id = FLAG_SERVICE_NOT_MESSAGE | (((uint32_t) local_node_id) << OFFSET_DST_NODE_ID);
 80137a6:	78fb      	ldrb	r3, [r7, #3]
 80137a8:	01db      	lsls	r3, r3, #7
 80137aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80137ae:	60bb      	str	r3, [r7, #8]
    out.extended_mask   = FLAG_SERVICE_NOT_MESSAGE | FLAG_RESERVED_23 | (CANARD_NODE_ID_MAX << OFFSET_DST_NODE_ID);
 80137b0:	4b07      	ldr	r3, [pc, #28]	@ (80137d0 <canardMakeFilterForServices+0x40>)
 80137b2:	60fb      	str	r3, [r7, #12]

    return out;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	461a      	mov	r2, r3
 80137b8:	f107 0308 	add.w	r3, r7, #8
 80137bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80137c0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	3714      	adds	r7, #20
 80137c8:	46bd      	mov	sp, r7
 80137ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ce:	4770      	bx	lr
 80137d0:	02803f80 	.word	0x02803f80

080137d4 <canardConsolidateFilters>:

CanardFilter canardConsolidateFilters(const CanardFilter* a, const CanardFilter* b)
{
 80137d4:	b480      	push	{r7}
 80137d6:	b087      	sub	sp, #28
 80137d8:	af00      	add	r7, sp, #0
 80137da:	60f8      	str	r0, [r7, #12]
 80137dc:	60b9      	str	r1, [r7, #8]
 80137de:	607a      	str	r2, [r7, #4]
    CanardFilter out = {0};
 80137e0:	f107 0310 	add.w	r3, r7, #16
 80137e4:	2200      	movs	r2, #0
 80137e6:	601a      	str	r2, [r3, #0]
 80137e8:	605a      	str	r2, [r3, #4]

    out.extended_mask   = a->extended_mask & b->extended_mask & ~(a->extended_can_id ^ b->extended_can_id);
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	685a      	ldr	r2, [r3, #4]
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	685b      	ldr	r3, [r3, #4]
 80137f2:	401a      	ands	r2, r3
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	6819      	ldr	r1, [r3, #0]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	404b      	eors	r3, r1
 80137fe:	43db      	mvns	r3, r3
 8013800:	4013      	ands	r3, r2
 8013802:	617b      	str	r3, [r7, #20]
    out.extended_can_id = a->extended_can_id & out.extended_mask;
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	4013      	ands	r3, r2
 801380c:	613b      	str	r3, [r7, #16]

    return out;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	461a      	mov	r2, r3
 8013812:	f107 0310 	add.w	r3, r7, #16
 8013816:	e893 0003 	ldmia.w	r3, {r0, r1}
 801381a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801381e:	68f8      	ldr	r0, [r7, #12]
 8013820:	371c      	adds	r7, #28
 8013822:	46bd      	mov	sp, r7
 8013824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013828:	4770      	bx	lr

0801382a <_ZdlPvj>:
 801382a:	f000 b814 	b.w	8013856 <_ZdlPv>

0801382e <_Znwj>:
 801382e:	2801      	cmp	r0, #1
 8013830:	bf38      	it	cc
 8013832:	2001      	movcc	r0, #1
 8013834:	b510      	push	{r4, lr}
 8013836:	4604      	mov	r4, r0
 8013838:	4620      	mov	r0, r4
 801383a:	f000 f84f 	bl	80138dc <malloc>
 801383e:	b100      	cbz	r0, 8013842 <_Znwj+0x14>
 8013840:	bd10      	pop	{r4, pc}
 8013842:	f000 f80b 	bl	801385c <_ZSt15get_new_handlerv>
 8013846:	b908      	cbnz	r0, 801384c <_Znwj+0x1e>
 8013848:	f000 f810 	bl	801386c <abort>
 801384c:	4780      	blx	r0
 801384e:	e7f3      	b.n	8013838 <_Znwj+0xa>

08013850 <_ZSt25__throw_bad_function_callv>:
 8013850:	b508      	push	{r3, lr}
 8013852:	f000 f80b 	bl	801386c <abort>

08013856 <_ZdlPv>:
 8013856:	f000 b849 	b.w	80138ec <free>
	...

0801385c <_ZSt15get_new_handlerv>:
 801385c:	4b02      	ldr	r3, [pc, #8]	@ (8013868 <_ZSt15get_new_handlerv+0xc>)
 801385e:	6818      	ldr	r0, [r3, #0]
 8013860:	f3bf 8f5b 	dmb	ish
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	200009b0 	.word	0x200009b0

0801386c <abort>:
 801386c:	b508      	push	{r3, lr}
 801386e:	2006      	movs	r0, #6
 8013870:	f001 f902 	bl	8014a78 <raise>
 8013874:	2001      	movs	r0, #1
 8013876:	f7f6 f825 	bl	80098c4 <_exit>
	...

0801387c <__assert_func>:
 801387c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801387e:	4614      	mov	r4, r2
 8013880:	461a      	mov	r2, r3
 8013882:	4b09      	ldr	r3, [pc, #36]	@ (80138a8 <__assert_func+0x2c>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	4605      	mov	r5, r0
 8013888:	68d8      	ldr	r0, [r3, #12]
 801388a:	b954      	cbnz	r4, 80138a2 <__assert_func+0x26>
 801388c:	4b07      	ldr	r3, [pc, #28]	@ (80138ac <__assert_func+0x30>)
 801388e:	461c      	mov	r4, r3
 8013890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013894:	9100      	str	r1, [sp, #0]
 8013896:	462b      	mov	r3, r5
 8013898:	4905      	ldr	r1, [pc, #20]	@ (80138b0 <__assert_func+0x34>)
 801389a:	f000 ffed 	bl	8014878 <fiprintf>
 801389e:	f7ff ffe5 	bl	801386c <abort>
 80138a2:	4b04      	ldr	r3, [pc, #16]	@ (80138b4 <__assert_func+0x38>)
 80138a4:	e7f4      	b.n	8013890 <__assert_func+0x14>
 80138a6:	bf00      	nop
 80138a8:	20000090 	.word	0x20000090
 80138ac:	0801919b 	.word	0x0801919b
 80138b0:	0801916d 	.word	0x0801916d
 80138b4:	08019160 	.word	0x08019160

080138b8 <exit>:
 80138b8:	b508      	push	{r3, lr}
 80138ba:	4b06      	ldr	r3, [pc, #24]	@ (80138d4 <exit+0x1c>)
 80138bc:	4604      	mov	r4, r0
 80138be:	b113      	cbz	r3, 80138c6 <exit+0xe>
 80138c0:	2100      	movs	r1, #0
 80138c2:	f3af 8000 	nop.w
 80138c6:	4b04      	ldr	r3, [pc, #16]	@ (80138d8 <exit+0x20>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	b103      	cbz	r3, 80138ce <exit+0x16>
 80138cc:	4798      	blx	r3
 80138ce:	4620      	mov	r0, r4
 80138d0:	f7f5 fff8 	bl	80098c4 <_exit>
 80138d4:	00000000 	.word	0x00000000
 80138d8:	20000af4 	.word	0x20000af4

080138dc <malloc>:
 80138dc:	4b02      	ldr	r3, [pc, #8]	@ (80138e8 <malloc+0xc>)
 80138de:	4601      	mov	r1, r0
 80138e0:	6818      	ldr	r0, [r3, #0]
 80138e2:	f000 b82d 	b.w	8013940 <_malloc_r>
 80138e6:	bf00      	nop
 80138e8:	20000090 	.word	0x20000090

080138ec <free>:
 80138ec:	4b02      	ldr	r3, [pc, #8]	@ (80138f8 <free+0xc>)
 80138ee:	4601      	mov	r1, r0
 80138f0:	6818      	ldr	r0, [r3, #0]
 80138f2:	f001 bfc5 	b.w	8015880 <_free_r>
 80138f6:	bf00      	nop
 80138f8:	20000090 	.word	0x20000090

080138fc <sbrk_aligned>:
 80138fc:	b570      	push	{r4, r5, r6, lr}
 80138fe:	4e0f      	ldr	r6, [pc, #60]	@ (801393c <sbrk_aligned+0x40>)
 8013900:	460c      	mov	r4, r1
 8013902:	6831      	ldr	r1, [r6, #0]
 8013904:	4605      	mov	r5, r0
 8013906:	b911      	cbnz	r1, 801390e <sbrk_aligned+0x12>
 8013908:	f001 f90a 	bl	8014b20 <_sbrk_r>
 801390c:	6030      	str	r0, [r6, #0]
 801390e:	4621      	mov	r1, r4
 8013910:	4628      	mov	r0, r5
 8013912:	f001 f905 	bl	8014b20 <_sbrk_r>
 8013916:	1c43      	adds	r3, r0, #1
 8013918:	d103      	bne.n	8013922 <sbrk_aligned+0x26>
 801391a:	f04f 34ff 	mov.w	r4, #4294967295
 801391e:	4620      	mov	r0, r4
 8013920:	bd70      	pop	{r4, r5, r6, pc}
 8013922:	1cc4      	adds	r4, r0, #3
 8013924:	f024 0403 	bic.w	r4, r4, #3
 8013928:	42a0      	cmp	r0, r4
 801392a:	d0f8      	beq.n	801391e <sbrk_aligned+0x22>
 801392c:	1a21      	subs	r1, r4, r0
 801392e:	4628      	mov	r0, r5
 8013930:	f001 f8f6 	bl	8014b20 <_sbrk_r>
 8013934:	3001      	adds	r0, #1
 8013936:	d1f2      	bne.n	801391e <sbrk_aligned+0x22>
 8013938:	e7ef      	b.n	801391a <sbrk_aligned+0x1e>
 801393a:	bf00      	nop
 801393c:	200009b4 	.word	0x200009b4

08013940 <_malloc_r>:
 8013940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013944:	1ccd      	adds	r5, r1, #3
 8013946:	f025 0503 	bic.w	r5, r5, #3
 801394a:	3508      	adds	r5, #8
 801394c:	2d0c      	cmp	r5, #12
 801394e:	bf38      	it	cc
 8013950:	250c      	movcc	r5, #12
 8013952:	2d00      	cmp	r5, #0
 8013954:	4606      	mov	r6, r0
 8013956:	db01      	blt.n	801395c <_malloc_r+0x1c>
 8013958:	42a9      	cmp	r1, r5
 801395a:	d904      	bls.n	8013966 <_malloc_r+0x26>
 801395c:	230c      	movs	r3, #12
 801395e:	6033      	str	r3, [r6, #0]
 8013960:	2000      	movs	r0, #0
 8013962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013a3c <_malloc_r+0xfc>
 801396a:	f000 f869 	bl	8013a40 <__malloc_lock>
 801396e:	f8d8 3000 	ldr.w	r3, [r8]
 8013972:	461c      	mov	r4, r3
 8013974:	bb44      	cbnz	r4, 80139c8 <_malloc_r+0x88>
 8013976:	4629      	mov	r1, r5
 8013978:	4630      	mov	r0, r6
 801397a:	f7ff ffbf 	bl	80138fc <sbrk_aligned>
 801397e:	1c43      	adds	r3, r0, #1
 8013980:	4604      	mov	r4, r0
 8013982:	d158      	bne.n	8013a36 <_malloc_r+0xf6>
 8013984:	f8d8 4000 	ldr.w	r4, [r8]
 8013988:	4627      	mov	r7, r4
 801398a:	2f00      	cmp	r7, #0
 801398c:	d143      	bne.n	8013a16 <_malloc_r+0xd6>
 801398e:	2c00      	cmp	r4, #0
 8013990:	d04b      	beq.n	8013a2a <_malloc_r+0xea>
 8013992:	6823      	ldr	r3, [r4, #0]
 8013994:	4639      	mov	r1, r7
 8013996:	4630      	mov	r0, r6
 8013998:	eb04 0903 	add.w	r9, r4, r3
 801399c:	f001 f8c0 	bl	8014b20 <_sbrk_r>
 80139a0:	4581      	cmp	r9, r0
 80139a2:	d142      	bne.n	8013a2a <_malloc_r+0xea>
 80139a4:	6821      	ldr	r1, [r4, #0]
 80139a6:	1a6d      	subs	r5, r5, r1
 80139a8:	4629      	mov	r1, r5
 80139aa:	4630      	mov	r0, r6
 80139ac:	f7ff ffa6 	bl	80138fc <sbrk_aligned>
 80139b0:	3001      	adds	r0, #1
 80139b2:	d03a      	beq.n	8013a2a <_malloc_r+0xea>
 80139b4:	6823      	ldr	r3, [r4, #0]
 80139b6:	442b      	add	r3, r5
 80139b8:	6023      	str	r3, [r4, #0]
 80139ba:	f8d8 3000 	ldr.w	r3, [r8]
 80139be:	685a      	ldr	r2, [r3, #4]
 80139c0:	bb62      	cbnz	r2, 8013a1c <_malloc_r+0xdc>
 80139c2:	f8c8 7000 	str.w	r7, [r8]
 80139c6:	e00f      	b.n	80139e8 <_malloc_r+0xa8>
 80139c8:	6822      	ldr	r2, [r4, #0]
 80139ca:	1b52      	subs	r2, r2, r5
 80139cc:	d420      	bmi.n	8013a10 <_malloc_r+0xd0>
 80139ce:	2a0b      	cmp	r2, #11
 80139d0:	d917      	bls.n	8013a02 <_malloc_r+0xc2>
 80139d2:	1961      	adds	r1, r4, r5
 80139d4:	42a3      	cmp	r3, r4
 80139d6:	6025      	str	r5, [r4, #0]
 80139d8:	bf18      	it	ne
 80139da:	6059      	strne	r1, [r3, #4]
 80139dc:	6863      	ldr	r3, [r4, #4]
 80139de:	bf08      	it	eq
 80139e0:	f8c8 1000 	streq.w	r1, [r8]
 80139e4:	5162      	str	r2, [r4, r5]
 80139e6:	604b      	str	r3, [r1, #4]
 80139e8:	4630      	mov	r0, r6
 80139ea:	f000 f82f 	bl	8013a4c <__malloc_unlock>
 80139ee:	f104 000b 	add.w	r0, r4, #11
 80139f2:	1d23      	adds	r3, r4, #4
 80139f4:	f020 0007 	bic.w	r0, r0, #7
 80139f8:	1ac2      	subs	r2, r0, r3
 80139fa:	bf1c      	itt	ne
 80139fc:	1a1b      	subne	r3, r3, r0
 80139fe:	50a3      	strne	r3, [r4, r2]
 8013a00:	e7af      	b.n	8013962 <_malloc_r+0x22>
 8013a02:	6862      	ldr	r2, [r4, #4]
 8013a04:	42a3      	cmp	r3, r4
 8013a06:	bf0c      	ite	eq
 8013a08:	f8c8 2000 	streq.w	r2, [r8]
 8013a0c:	605a      	strne	r2, [r3, #4]
 8013a0e:	e7eb      	b.n	80139e8 <_malloc_r+0xa8>
 8013a10:	4623      	mov	r3, r4
 8013a12:	6864      	ldr	r4, [r4, #4]
 8013a14:	e7ae      	b.n	8013974 <_malloc_r+0x34>
 8013a16:	463c      	mov	r4, r7
 8013a18:	687f      	ldr	r7, [r7, #4]
 8013a1a:	e7b6      	b.n	801398a <_malloc_r+0x4a>
 8013a1c:	461a      	mov	r2, r3
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	42a3      	cmp	r3, r4
 8013a22:	d1fb      	bne.n	8013a1c <_malloc_r+0xdc>
 8013a24:	2300      	movs	r3, #0
 8013a26:	6053      	str	r3, [r2, #4]
 8013a28:	e7de      	b.n	80139e8 <_malloc_r+0xa8>
 8013a2a:	230c      	movs	r3, #12
 8013a2c:	6033      	str	r3, [r6, #0]
 8013a2e:	4630      	mov	r0, r6
 8013a30:	f000 f80c 	bl	8013a4c <__malloc_unlock>
 8013a34:	e794      	b.n	8013960 <_malloc_r+0x20>
 8013a36:	6005      	str	r5, [r0, #0]
 8013a38:	e7d6      	b.n	80139e8 <_malloc_r+0xa8>
 8013a3a:	bf00      	nop
 8013a3c:	200009b8 	.word	0x200009b8

08013a40 <__malloc_lock>:
 8013a40:	4801      	ldr	r0, [pc, #4]	@ (8013a48 <__malloc_lock+0x8>)
 8013a42:	f001 b8ba 	b.w	8014bba <__retarget_lock_acquire_recursive>
 8013a46:	bf00      	nop
 8013a48:	20000afc 	.word	0x20000afc

08013a4c <__malloc_unlock>:
 8013a4c:	4801      	ldr	r0, [pc, #4]	@ (8013a54 <__malloc_unlock+0x8>)
 8013a4e:	f001 b8b5 	b.w	8014bbc <__retarget_lock_release_recursive>
 8013a52:	bf00      	nop
 8013a54:	20000afc 	.word	0x20000afc

08013a58 <__cvt>:
 8013a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a5c:	ec57 6b10 	vmov	r6, r7, d0
 8013a60:	2f00      	cmp	r7, #0
 8013a62:	460c      	mov	r4, r1
 8013a64:	4619      	mov	r1, r3
 8013a66:	463b      	mov	r3, r7
 8013a68:	bfbb      	ittet	lt
 8013a6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013a6e:	461f      	movlt	r7, r3
 8013a70:	2300      	movge	r3, #0
 8013a72:	232d      	movlt	r3, #45	@ 0x2d
 8013a74:	700b      	strb	r3, [r1, #0]
 8013a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013a7c:	4691      	mov	r9, r2
 8013a7e:	f023 0820 	bic.w	r8, r3, #32
 8013a82:	bfbc      	itt	lt
 8013a84:	4632      	movlt	r2, r6
 8013a86:	4616      	movlt	r6, r2
 8013a88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013a8c:	d005      	beq.n	8013a9a <__cvt+0x42>
 8013a8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013a92:	d100      	bne.n	8013a96 <__cvt+0x3e>
 8013a94:	3401      	adds	r4, #1
 8013a96:	2102      	movs	r1, #2
 8013a98:	e000      	b.n	8013a9c <__cvt+0x44>
 8013a9a:	2103      	movs	r1, #3
 8013a9c:	ab03      	add	r3, sp, #12
 8013a9e:	9301      	str	r3, [sp, #4]
 8013aa0:	ab02      	add	r3, sp, #8
 8013aa2:	9300      	str	r3, [sp, #0]
 8013aa4:	ec47 6b10 	vmov	d0, r6, r7
 8013aa8:	4653      	mov	r3, sl
 8013aaa:	4622      	mov	r2, r4
 8013aac:	f001 f924 	bl	8014cf8 <_dtoa_r>
 8013ab0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	d119      	bne.n	8013aec <__cvt+0x94>
 8013ab8:	f019 0f01 	tst.w	r9, #1
 8013abc:	d00e      	beq.n	8013adc <__cvt+0x84>
 8013abe:	eb00 0904 	add.w	r9, r0, r4
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	4630      	mov	r0, r6
 8013ac8:	4639      	mov	r1, r7
 8013aca:	f7ed f825 	bl	8000b18 <__aeabi_dcmpeq>
 8013ace:	b108      	cbz	r0, 8013ad4 <__cvt+0x7c>
 8013ad0:	f8cd 900c 	str.w	r9, [sp, #12]
 8013ad4:	2230      	movs	r2, #48	@ 0x30
 8013ad6:	9b03      	ldr	r3, [sp, #12]
 8013ad8:	454b      	cmp	r3, r9
 8013ada:	d31e      	bcc.n	8013b1a <__cvt+0xc2>
 8013adc:	9b03      	ldr	r3, [sp, #12]
 8013ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ae0:	1b5b      	subs	r3, r3, r5
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	6013      	str	r3, [r2, #0]
 8013ae6:	b004      	add	sp, #16
 8013ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013af0:	eb00 0904 	add.w	r9, r0, r4
 8013af4:	d1e5      	bne.n	8013ac2 <__cvt+0x6a>
 8013af6:	7803      	ldrb	r3, [r0, #0]
 8013af8:	2b30      	cmp	r3, #48	@ 0x30
 8013afa:	d10a      	bne.n	8013b12 <__cvt+0xba>
 8013afc:	2200      	movs	r2, #0
 8013afe:	2300      	movs	r3, #0
 8013b00:	4630      	mov	r0, r6
 8013b02:	4639      	mov	r1, r7
 8013b04:	f7ed f808 	bl	8000b18 <__aeabi_dcmpeq>
 8013b08:	b918      	cbnz	r0, 8013b12 <__cvt+0xba>
 8013b0a:	f1c4 0401 	rsb	r4, r4, #1
 8013b0e:	f8ca 4000 	str.w	r4, [sl]
 8013b12:	f8da 3000 	ldr.w	r3, [sl]
 8013b16:	4499      	add	r9, r3
 8013b18:	e7d3      	b.n	8013ac2 <__cvt+0x6a>
 8013b1a:	1c59      	adds	r1, r3, #1
 8013b1c:	9103      	str	r1, [sp, #12]
 8013b1e:	701a      	strb	r2, [r3, #0]
 8013b20:	e7d9      	b.n	8013ad6 <__cvt+0x7e>

08013b22 <__exponent>:
 8013b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b24:	2900      	cmp	r1, #0
 8013b26:	bfba      	itte	lt
 8013b28:	4249      	neglt	r1, r1
 8013b2a:	232d      	movlt	r3, #45	@ 0x2d
 8013b2c:	232b      	movge	r3, #43	@ 0x2b
 8013b2e:	2909      	cmp	r1, #9
 8013b30:	7002      	strb	r2, [r0, #0]
 8013b32:	7043      	strb	r3, [r0, #1]
 8013b34:	dd29      	ble.n	8013b8a <__exponent+0x68>
 8013b36:	f10d 0307 	add.w	r3, sp, #7
 8013b3a:	461d      	mov	r5, r3
 8013b3c:	270a      	movs	r7, #10
 8013b3e:	461a      	mov	r2, r3
 8013b40:	fbb1 f6f7 	udiv	r6, r1, r7
 8013b44:	fb07 1416 	mls	r4, r7, r6, r1
 8013b48:	3430      	adds	r4, #48	@ 0x30
 8013b4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013b4e:	460c      	mov	r4, r1
 8013b50:	2c63      	cmp	r4, #99	@ 0x63
 8013b52:	f103 33ff 	add.w	r3, r3, #4294967295
 8013b56:	4631      	mov	r1, r6
 8013b58:	dcf1      	bgt.n	8013b3e <__exponent+0x1c>
 8013b5a:	3130      	adds	r1, #48	@ 0x30
 8013b5c:	1e94      	subs	r4, r2, #2
 8013b5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013b62:	1c41      	adds	r1, r0, #1
 8013b64:	4623      	mov	r3, r4
 8013b66:	42ab      	cmp	r3, r5
 8013b68:	d30a      	bcc.n	8013b80 <__exponent+0x5e>
 8013b6a:	f10d 0309 	add.w	r3, sp, #9
 8013b6e:	1a9b      	subs	r3, r3, r2
 8013b70:	42ac      	cmp	r4, r5
 8013b72:	bf88      	it	hi
 8013b74:	2300      	movhi	r3, #0
 8013b76:	3302      	adds	r3, #2
 8013b78:	4403      	add	r3, r0
 8013b7a:	1a18      	subs	r0, r3, r0
 8013b7c:	b003      	add	sp, #12
 8013b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013b84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013b88:	e7ed      	b.n	8013b66 <__exponent+0x44>
 8013b8a:	2330      	movs	r3, #48	@ 0x30
 8013b8c:	3130      	adds	r1, #48	@ 0x30
 8013b8e:	7083      	strb	r3, [r0, #2]
 8013b90:	70c1      	strb	r1, [r0, #3]
 8013b92:	1d03      	adds	r3, r0, #4
 8013b94:	e7f1      	b.n	8013b7a <__exponent+0x58>
	...

08013b98 <_printf_float>:
 8013b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b9c:	b08d      	sub	sp, #52	@ 0x34
 8013b9e:	460c      	mov	r4, r1
 8013ba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013ba4:	4616      	mov	r6, r2
 8013ba6:	461f      	mov	r7, r3
 8013ba8:	4605      	mov	r5, r0
 8013baa:	f000 ff6d 	bl	8014a88 <_localeconv_r>
 8013bae:	6803      	ldr	r3, [r0, #0]
 8013bb0:	9304      	str	r3, [sp, #16]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7ec fb84 	bl	80002c0 <strlen>
 8013bb8:	2300      	movs	r3, #0
 8013bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8013bc0:	9005      	str	r0, [sp, #20]
 8013bc2:	3307      	adds	r3, #7
 8013bc4:	f023 0307 	bic.w	r3, r3, #7
 8013bc8:	f103 0208 	add.w	r2, r3, #8
 8013bcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8013bd4:	f8c8 2000 	str.w	r2, [r8]
 8013bd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013bdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013be0:	9307      	str	r3, [sp, #28]
 8013be2:	f8cd 8018 	str.w	r8, [sp, #24]
 8013be6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013bee:	4b9c      	ldr	r3, [pc, #624]	@ (8013e60 <_printf_float+0x2c8>)
 8013bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8013bf4:	f7ec ffc2 	bl	8000b7c <__aeabi_dcmpun>
 8013bf8:	bb70      	cbnz	r0, 8013c58 <_printf_float+0xc0>
 8013bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013bfe:	4b98      	ldr	r3, [pc, #608]	@ (8013e60 <_printf_float+0x2c8>)
 8013c00:	f04f 32ff 	mov.w	r2, #4294967295
 8013c04:	f7ec ff9c 	bl	8000b40 <__aeabi_dcmple>
 8013c08:	bb30      	cbnz	r0, 8013c58 <_printf_float+0xc0>
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	4640      	mov	r0, r8
 8013c10:	4649      	mov	r1, r9
 8013c12:	f7ec ff8b 	bl	8000b2c <__aeabi_dcmplt>
 8013c16:	b110      	cbz	r0, 8013c1e <_printf_float+0x86>
 8013c18:	232d      	movs	r3, #45	@ 0x2d
 8013c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c1e:	4a91      	ldr	r2, [pc, #580]	@ (8013e64 <_printf_float+0x2cc>)
 8013c20:	4b91      	ldr	r3, [pc, #580]	@ (8013e68 <_printf_float+0x2d0>)
 8013c22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013c26:	bf94      	ite	ls
 8013c28:	4690      	movls	r8, r2
 8013c2a:	4698      	movhi	r8, r3
 8013c2c:	2303      	movs	r3, #3
 8013c2e:	6123      	str	r3, [r4, #16]
 8013c30:	f02b 0304 	bic.w	r3, fp, #4
 8013c34:	6023      	str	r3, [r4, #0]
 8013c36:	f04f 0900 	mov.w	r9, #0
 8013c3a:	9700      	str	r7, [sp, #0]
 8013c3c:	4633      	mov	r3, r6
 8013c3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013c40:	4621      	mov	r1, r4
 8013c42:	4628      	mov	r0, r5
 8013c44:	f000 f9d2 	bl	8013fec <_printf_common>
 8013c48:	3001      	adds	r0, #1
 8013c4a:	f040 808d 	bne.w	8013d68 <_printf_float+0x1d0>
 8013c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c52:	b00d      	add	sp, #52	@ 0x34
 8013c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c58:	4642      	mov	r2, r8
 8013c5a:	464b      	mov	r3, r9
 8013c5c:	4640      	mov	r0, r8
 8013c5e:	4649      	mov	r1, r9
 8013c60:	f7ec ff8c 	bl	8000b7c <__aeabi_dcmpun>
 8013c64:	b140      	cbz	r0, 8013c78 <_printf_float+0xe0>
 8013c66:	464b      	mov	r3, r9
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	bfbc      	itt	lt
 8013c6c:	232d      	movlt	r3, #45	@ 0x2d
 8013c6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013c72:	4a7e      	ldr	r2, [pc, #504]	@ (8013e6c <_printf_float+0x2d4>)
 8013c74:	4b7e      	ldr	r3, [pc, #504]	@ (8013e70 <_printf_float+0x2d8>)
 8013c76:	e7d4      	b.n	8013c22 <_printf_float+0x8a>
 8013c78:	6863      	ldr	r3, [r4, #4]
 8013c7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013c7e:	9206      	str	r2, [sp, #24]
 8013c80:	1c5a      	adds	r2, r3, #1
 8013c82:	d13b      	bne.n	8013cfc <_printf_float+0x164>
 8013c84:	2306      	movs	r3, #6
 8013c86:	6063      	str	r3, [r4, #4]
 8013c88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	6022      	str	r2, [r4, #0]
 8013c90:	9303      	str	r3, [sp, #12]
 8013c92:	ab0a      	add	r3, sp, #40	@ 0x28
 8013c94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013c98:	ab09      	add	r3, sp, #36	@ 0x24
 8013c9a:	9300      	str	r3, [sp, #0]
 8013c9c:	6861      	ldr	r1, [r4, #4]
 8013c9e:	ec49 8b10 	vmov	d0, r8, r9
 8013ca2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013ca6:	4628      	mov	r0, r5
 8013ca8:	f7ff fed6 	bl	8013a58 <__cvt>
 8013cac:	9b06      	ldr	r3, [sp, #24]
 8013cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013cb0:	2b47      	cmp	r3, #71	@ 0x47
 8013cb2:	4680      	mov	r8, r0
 8013cb4:	d129      	bne.n	8013d0a <_printf_float+0x172>
 8013cb6:	1cc8      	adds	r0, r1, #3
 8013cb8:	db02      	blt.n	8013cc0 <_printf_float+0x128>
 8013cba:	6863      	ldr	r3, [r4, #4]
 8013cbc:	4299      	cmp	r1, r3
 8013cbe:	dd41      	ble.n	8013d44 <_printf_float+0x1ac>
 8013cc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8013cc4:	fa5f fa8a 	uxtb.w	sl, sl
 8013cc8:	3901      	subs	r1, #1
 8013cca:	4652      	mov	r2, sl
 8013ccc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013cd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8013cd2:	f7ff ff26 	bl	8013b22 <__exponent>
 8013cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013cd8:	1813      	adds	r3, r2, r0
 8013cda:	2a01      	cmp	r2, #1
 8013cdc:	4681      	mov	r9, r0
 8013cde:	6123      	str	r3, [r4, #16]
 8013ce0:	dc02      	bgt.n	8013ce8 <_printf_float+0x150>
 8013ce2:	6822      	ldr	r2, [r4, #0]
 8013ce4:	07d2      	lsls	r2, r2, #31
 8013ce6:	d501      	bpl.n	8013cec <_printf_float+0x154>
 8013ce8:	3301      	adds	r3, #1
 8013cea:	6123      	str	r3, [r4, #16]
 8013cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d0a2      	beq.n	8013c3a <_printf_float+0xa2>
 8013cf4:	232d      	movs	r3, #45	@ 0x2d
 8013cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cfa:	e79e      	b.n	8013c3a <_printf_float+0xa2>
 8013cfc:	9a06      	ldr	r2, [sp, #24]
 8013cfe:	2a47      	cmp	r2, #71	@ 0x47
 8013d00:	d1c2      	bne.n	8013c88 <_printf_float+0xf0>
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d1c0      	bne.n	8013c88 <_printf_float+0xf0>
 8013d06:	2301      	movs	r3, #1
 8013d08:	e7bd      	b.n	8013c86 <_printf_float+0xee>
 8013d0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013d0e:	d9db      	bls.n	8013cc8 <_printf_float+0x130>
 8013d10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013d14:	d118      	bne.n	8013d48 <_printf_float+0x1b0>
 8013d16:	2900      	cmp	r1, #0
 8013d18:	6863      	ldr	r3, [r4, #4]
 8013d1a:	dd0b      	ble.n	8013d34 <_printf_float+0x19c>
 8013d1c:	6121      	str	r1, [r4, #16]
 8013d1e:	b913      	cbnz	r3, 8013d26 <_printf_float+0x18e>
 8013d20:	6822      	ldr	r2, [r4, #0]
 8013d22:	07d0      	lsls	r0, r2, #31
 8013d24:	d502      	bpl.n	8013d2c <_printf_float+0x194>
 8013d26:	3301      	adds	r3, #1
 8013d28:	440b      	add	r3, r1
 8013d2a:	6123      	str	r3, [r4, #16]
 8013d2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013d2e:	f04f 0900 	mov.w	r9, #0
 8013d32:	e7db      	b.n	8013cec <_printf_float+0x154>
 8013d34:	b913      	cbnz	r3, 8013d3c <_printf_float+0x1a4>
 8013d36:	6822      	ldr	r2, [r4, #0]
 8013d38:	07d2      	lsls	r2, r2, #31
 8013d3a:	d501      	bpl.n	8013d40 <_printf_float+0x1a8>
 8013d3c:	3302      	adds	r3, #2
 8013d3e:	e7f4      	b.n	8013d2a <_printf_float+0x192>
 8013d40:	2301      	movs	r3, #1
 8013d42:	e7f2      	b.n	8013d2a <_printf_float+0x192>
 8013d44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d4a:	4299      	cmp	r1, r3
 8013d4c:	db05      	blt.n	8013d5a <_printf_float+0x1c2>
 8013d4e:	6823      	ldr	r3, [r4, #0]
 8013d50:	6121      	str	r1, [r4, #16]
 8013d52:	07d8      	lsls	r0, r3, #31
 8013d54:	d5ea      	bpl.n	8013d2c <_printf_float+0x194>
 8013d56:	1c4b      	adds	r3, r1, #1
 8013d58:	e7e7      	b.n	8013d2a <_printf_float+0x192>
 8013d5a:	2900      	cmp	r1, #0
 8013d5c:	bfd4      	ite	le
 8013d5e:	f1c1 0202 	rsble	r2, r1, #2
 8013d62:	2201      	movgt	r2, #1
 8013d64:	4413      	add	r3, r2
 8013d66:	e7e0      	b.n	8013d2a <_printf_float+0x192>
 8013d68:	6823      	ldr	r3, [r4, #0]
 8013d6a:	055a      	lsls	r2, r3, #21
 8013d6c:	d407      	bmi.n	8013d7e <_printf_float+0x1e6>
 8013d6e:	6923      	ldr	r3, [r4, #16]
 8013d70:	4642      	mov	r2, r8
 8013d72:	4631      	mov	r1, r6
 8013d74:	4628      	mov	r0, r5
 8013d76:	47b8      	blx	r7
 8013d78:	3001      	adds	r0, #1
 8013d7a:	d12b      	bne.n	8013dd4 <_printf_float+0x23c>
 8013d7c:	e767      	b.n	8013c4e <_printf_float+0xb6>
 8013d7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013d82:	f240 80dd 	bls.w	8013f40 <_printf_float+0x3a8>
 8013d86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	f7ec fec3 	bl	8000b18 <__aeabi_dcmpeq>
 8013d92:	2800      	cmp	r0, #0
 8013d94:	d033      	beq.n	8013dfe <_printf_float+0x266>
 8013d96:	4a37      	ldr	r2, [pc, #220]	@ (8013e74 <_printf_float+0x2dc>)
 8013d98:	2301      	movs	r3, #1
 8013d9a:	4631      	mov	r1, r6
 8013d9c:	4628      	mov	r0, r5
 8013d9e:	47b8      	blx	r7
 8013da0:	3001      	adds	r0, #1
 8013da2:	f43f af54 	beq.w	8013c4e <_printf_float+0xb6>
 8013da6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013daa:	4543      	cmp	r3, r8
 8013dac:	db02      	blt.n	8013db4 <_printf_float+0x21c>
 8013dae:	6823      	ldr	r3, [r4, #0]
 8013db0:	07d8      	lsls	r0, r3, #31
 8013db2:	d50f      	bpl.n	8013dd4 <_printf_float+0x23c>
 8013db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013db8:	4631      	mov	r1, r6
 8013dba:	4628      	mov	r0, r5
 8013dbc:	47b8      	blx	r7
 8013dbe:	3001      	adds	r0, #1
 8013dc0:	f43f af45 	beq.w	8013c4e <_printf_float+0xb6>
 8013dc4:	f04f 0900 	mov.w	r9, #0
 8013dc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8013dcc:	f104 0a1a 	add.w	sl, r4, #26
 8013dd0:	45c8      	cmp	r8, r9
 8013dd2:	dc09      	bgt.n	8013de8 <_printf_float+0x250>
 8013dd4:	6823      	ldr	r3, [r4, #0]
 8013dd6:	079b      	lsls	r3, r3, #30
 8013dd8:	f100 8103 	bmi.w	8013fe2 <_printf_float+0x44a>
 8013ddc:	68e0      	ldr	r0, [r4, #12]
 8013dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013de0:	4298      	cmp	r0, r3
 8013de2:	bfb8      	it	lt
 8013de4:	4618      	movlt	r0, r3
 8013de6:	e734      	b.n	8013c52 <_printf_float+0xba>
 8013de8:	2301      	movs	r3, #1
 8013dea:	4652      	mov	r2, sl
 8013dec:	4631      	mov	r1, r6
 8013dee:	4628      	mov	r0, r5
 8013df0:	47b8      	blx	r7
 8013df2:	3001      	adds	r0, #1
 8013df4:	f43f af2b 	beq.w	8013c4e <_printf_float+0xb6>
 8013df8:	f109 0901 	add.w	r9, r9, #1
 8013dfc:	e7e8      	b.n	8013dd0 <_printf_float+0x238>
 8013dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	dc39      	bgt.n	8013e78 <_printf_float+0x2e0>
 8013e04:	4a1b      	ldr	r2, [pc, #108]	@ (8013e74 <_printf_float+0x2dc>)
 8013e06:	2301      	movs	r3, #1
 8013e08:	4631      	mov	r1, r6
 8013e0a:	4628      	mov	r0, r5
 8013e0c:	47b8      	blx	r7
 8013e0e:	3001      	adds	r0, #1
 8013e10:	f43f af1d 	beq.w	8013c4e <_printf_float+0xb6>
 8013e14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013e18:	ea59 0303 	orrs.w	r3, r9, r3
 8013e1c:	d102      	bne.n	8013e24 <_printf_float+0x28c>
 8013e1e:	6823      	ldr	r3, [r4, #0]
 8013e20:	07d9      	lsls	r1, r3, #31
 8013e22:	d5d7      	bpl.n	8013dd4 <_printf_float+0x23c>
 8013e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e28:	4631      	mov	r1, r6
 8013e2a:	4628      	mov	r0, r5
 8013e2c:	47b8      	blx	r7
 8013e2e:	3001      	adds	r0, #1
 8013e30:	f43f af0d 	beq.w	8013c4e <_printf_float+0xb6>
 8013e34:	f04f 0a00 	mov.w	sl, #0
 8013e38:	f104 0b1a 	add.w	fp, r4, #26
 8013e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e3e:	425b      	negs	r3, r3
 8013e40:	4553      	cmp	r3, sl
 8013e42:	dc01      	bgt.n	8013e48 <_printf_float+0x2b0>
 8013e44:	464b      	mov	r3, r9
 8013e46:	e793      	b.n	8013d70 <_printf_float+0x1d8>
 8013e48:	2301      	movs	r3, #1
 8013e4a:	465a      	mov	r2, fp
 8013e4c:	4631      	mov	r1, r6
 8013e4e:	4628      	mov	r0, r5
 8013e50:	47b8      	blx	r7
 8013e52:	3001      	adds	r0, #1
 8013e54:	f43f aefb 	beq.w	8013c4e <_printf_float+0xb6>
 8013e58:	f10a 0a01 	add.w	sl, sl, #1
 8013e5c:	e7ee      	b.n	8013e3c <_printf_float+0x2a4>
 8013e5e:	bf00      	nop
 8013e60:	7fefffff 	.word	0x7fefffff
 8013e64:	0801919c 	.word	0x0801919c
 8013e68:	080191a0 	.word	0x080191a0
 8013e6c:	080191a4 	.word	0x080191a4
 8013e70:	080191a8 	.word	0x080191a8
 8013e74:	080191ac 	.word	0x080191ac
 8013e78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013e7e:	4553      	cmp	r3, sl
 8013e80:	bfa8      	it	ge
 8013e82:	4653      	movge	r3, sl
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	4699      	mov	r9, r3
 8013e88:	dc36      	bgt.n	8013ef8 <_printf_float+0x360>
 8013e8a:	f04f 0b00 	mov.w	fp, #0
 8013e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e92:	f104 021a 	add.w	r2, r4, #26
 8013e96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e98:	9306      	str	r3, [sp, #24]
 8013e9a:	eba3 0309 	sub.w	r3, r3, r9
 8013e9e:	455b      	cmp	r3, fp
 8013ea0:	dc31      	bgt.n	8013f06 <_printf_float+0x36e>
 8013ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ea4:	459a      	cmp	sl, r3
 8013ea6:	dc3a      	bgt.n	8013f1e <_printf_float+0x386>
 8013ea8:	6823      	ldr	r3, [r4, #0]
 8013eaa:	07da      	lsls	r2, r3, #31
 8013eac:	d437      	bmi.n	8013f1e <_printf_float+0x386>
 8013eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013eb0:	ebaa 0903 	sub.w	r9, sl, r3
 8013eb4:	9b06      	ldr	r3, [sp, #24]
 8013eb6:	ebaa 0303 	sub.w	r3, sl, r3
 8013eba:	4599      	cmp	r9, r3
 8013ebc:	bfa8      	it	ge
 8013ebe:	4699      	movge	r9, r3
 8013ec0:	f1b9 0f00 	cmp.w	r9, #0
 8013ec4:	dc33      	bgt.n	8013f2e <_printf_float+0x396>
 8013ec6:	f04f 0800 	mov.w	r8, #0
 8013eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ece:	f104 0b1a 	add.w	fp, r4, #26
 8013ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8013ed8:	eba3 0309 	sub.w	r3, r3, r9
 8013edc:	4543      	cmp	r3, r8
 8013ede:	f77f af79 	ble.w	8013dd4 <_printf_float+0x23c>
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	465a      	mov	r2, fp
 8013ee6:	4631      	mov	r1, r6
 8013ee8:	4628      	mov	r0, r5
 8013eea:	47b8      	blx	r7
 8013eec:	3001      	adds	r0, #1
 8013eee:	f43f aeae 	beq.w	8013c4e <_printf_float+0xb6>
 8013ef2:	f108 0801 	add.w	r8, r8, #1
 8013ef6:	e7ec      	b.n	8013ed2 <_printf_float+0x33a>
 8013ef8:	4642      	mov	r2, r8
 8013efa:	4631      	mov	r1, r6
 8013efc:	4628      	mov	r0, r5
 8013efe:	47b8      	blx	r7
 8013f00:	3001      	adds	r0, #1
 8013f02:	d1c2      	bne.n	8013e8a <_printf_float+0x2f2>
 8013f04:	e6a3      	b.n	8013c4e <_printf_float+0xb6>
 8013f06:	2301      	movs	r3, #1
 8013f08:	4631      	mov	r1, r6
 8013f0a:	4628      	mov	r0, r5
 8013f0c:	9206      	str	r2, [sp, #24]
 8013f0e:	47b8      	blx	r7
 8013f10:	3001      	adds	r0, #1
 8013f12:	f43f ae9c 	beq.w	8013c4e <_printf_float+0xb6>
 8013f16:	9a06      	ldr	r2, [sp, #24]
 8013f18:	f10b 0b01 	add.w	fp, fp, #1
 8013f1c:	e7bb      	b.n	8013e96 <_printf_float+0x2fe>
 8013f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f22:	4631      	mov	r1, r6
 8013f24:	4628      	mov	r0, r5
 8013f26:	47b8      	blx	r7
 8013f28:	3001      	adds	r0, #1
 8013f2a:	d1c0      	bne.n	8013eae <_printf_float+0x316>
 8013f2c:	e68f      	b.n	8013c4e <_printf_float+0xb6>
 8013f2e:	9a06      	ldr	r2, [sp, #24]
 8013f30:	464b      	mov	r3, r9
 8013f32:	4442      	add	r2, r8
 8013f34:	4631      	mov	r1, r6
 8013f36:	4628      	mov	r0, r5
 8013f38:	47b8      	blx	r7
 8013f3a:	3001      	adds	r0, #1
 8013f3c:	d1c3      	bne.n	8013ec6 <_printf_float+0x32e>
 8013f3e:	e686      	b.n	8013c4e <_printf_float+0xb6>
 8013f40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013f44:	f1ba 0f01 	cmp.w	sl, #1
 8013f48:	dc01      	bgt.n	8013f4e <_printf_float+0x3b6>
 8013f4a:	07db      	lsls	r3, r3, #31
 8013f4c:	d536      	bpl.n	8013fbc <_printf_float+0x424>
 8013f4e:	2301      	movs	r3, #1
 8013f50:	4642      	mov	r2, r8
 8013f52:	4631      	mov	r1, r6
 8013f54:	4628      	mov	r0, r5
 8013f56:	47b8      	blx	r7
 8013f58:	3001      	adds	r0, #1
 8013f5a:	f43f ae78 	beq.w	8013c4e <_printf_float+0xb6>
 8013f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f62:	4631      	mov	r1, r6
 8013f64:	4628      	mov	r0, r5
 8013f66:	47b8      	blx	r7
 8013f68:	3001      	adds	r0, #1
 8013f6a:	f43f ae70 	beq.w	8013c4e <_printf_float+0xb6>
 8013f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013f72:	2200      	movs	r2, #0
 8013f74:	2300      	movs	r3, #0
 8013f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f7a:	f7ec fdcd 	bl	8000b18 <__aeabi_dcmpeq>
 8013f7e:	b9c0      	cbnz	r0, 8013fb2 <_printf_float+0x41a>
 8013f80:	4653      	mov	r3, sl
 8013f82:	f108 0201 	add.w	r2, r8, #1
 8013f86:	4631      	mov	r1, r6
 8013f88:	4628      	mov	r0, r5
 8013f8a:	47b8      	blx	r7
 8013f8c:	3001      	adds	r0, #1
 8013f8e:	d10c      	bne.n	8013faa <_printf_float+0x412>
 8013f90:	e65d      	b.n	8013c4e <_printf_float+0xb6>
 8013f92:	2301      	movs	r3, #1
 8013f94:	465a      	mov	r2, fp
 8013f96:	4631      	mov	r1, r6
 8013f98:	4628      	mov	r0, r5
 8013f9a:	47b8      	blx	r7
 8013f9c:	3001      	adds	r0, #1
 8013f9e:	f43f ae56 	beq.w	8013c4e <_printf_float+0xb6>
 8013fa2:	f108 0801 	add.w	r8, r8, #1
 8013fa6:	45d0      	cmp	r8, sl
 8013fa8:	dbf3      	blt.n	8013f92 <_printf_float+0x3fa>
 8013faa:	464b      	mov	r3, r9
 8013fac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013fb0:	e6df      	b.n	8013d72 <_printf_float+0x1da>
 8013fb2:	f04f 0800 	mov.w	r8, #0
 8013fb6:	f104 0b1a 	add.w	fp, r4, #26
 8013fba:	e7f4      	b.n	8013fa6 <_printf_float+0x40e>
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	4642      	mov	r2, r8
 8013fc0:	e7e1      	b.n	8013f86 <_printf_float+0x3ee>
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	464a      	mov	r2, r9
 8013fc6:	4631      	mov	r1, r6
 8013fc8:	4628      	mov	r0, r5
 8013fca:	47b8      	blx	r7
 8013fcc:	3001      	adds	r0, #1
 8013fce:	f43f ae3e 	beq.w	8013c4e <_printf_float+0xb6>
 8013fd2:	f108 0801 	add.w	r8, r8, #1
 8013fd6:	68e3      	ldr	r3, [r4, #12]
 8013fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013fda:	1a5b      	subs	r3, r3, r1
 8013fdc:	4543      	cmp	r3, r8
 8013fde:	dcf0      	bgt.n	8013fc2 <_printf_float+0x42a>
 8013fe0:	e6fc      	b.n	8013ddc <_printf_float+0x244>
 8013fe2:	f04f 0800 	mov.w	r8, #0
 8013fe6:	f104 0919 	add.w	r9, r4, #25
 8013fea:	e7f4      	b.n	8013fd6 <_printf_float+0x43e>

08013fec <_printf_common>:
 8013fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ff0:	4616      	mov	r6, r2
 8013ff2:	4698      	mov	r8, r3
 8013ff4:	688a      	ldr	r2, [r1, #8]
 8013ff6:	690b      	ldr	r3, [r1, #16]
 8013ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013ffc:	4293      	cmp	r3, r2
 8013ffe:	bfb8      	it	lt
 8014000:	4613      	movlt	r3, r2
 8014002:	6033      	str	r3, [r6, #0]
 8014004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014008:	4607      	mov	r7, r0
 801400a:	460c      	mov	r4, r1
 801400c:	b10a      	cbz	r2, 8014012 <_printf_common+0x26>
 801400e:	3301      	adds	r3, #1
 8014010:	6033      	str	r3, [r6, #0]
 8014012:	6823      	ldr	r3, [r4, #0]
 8014014:	0699      	lsls	r1, r3, #26
 8014016:	bf42      	ittt	mi
 8014018:	6833      	ldrmi	r3, [r6, #0]
 801401a:	3302      	addmi	r3, #2
 801401c:	6033      	strmi	r3, [r6, #0]
 801401e:	6825      	ldr	r5, [r4, #0]
 8014020:	f015 0506 	ands.w	r5, r5, #6
 8014024:	d106      	bne.n	8014034 <_printf_common+0x48>
 8014026:	f104 0a19 	add.w	sl, r4, #25
 801402a:	68e3      	ldr	r3, [r4, #12]
 801402c:	6832      	ldr	r2, [r6, #0]
 801402e:	1a9b      	subs	r3, r3, r2
 8014030:	42ab      	cmp	r3, r5
 8014032:	dc26      	bgt.n	8014082 <_printf_common+0x96>
 8014034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014038:	6822      	ldr	r2, [r4, #0]
 801403a:	3b00      	subs	r3, #0
 801403c:	bf18      	it	ne
 801403e:	2301      	movne	r3, #1
 8014040:	0692      	lsls	r2, r2, #26
 8014042:	d42b      	bmi.n	801409c <_printf_common+0xb0>
 8014044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014048:	4641      	mov	r1, r8
 801404a:	4638      	mov	r0, r7
 801404c:	47c8      	blx	r9
 801404e:	3001      	adds	r0, #1
 8014050:	d01e      	beq.n	8014090 <_printf_common+0xa4>
 8014052:	6823      	ldr	r3, [r4, #0]
 8014054:	6922      	ldr	r2, [r4, #16]
 8014056:	f003 0306 	and.w	r3, r3, #6
 801405a:	2b04      	cmp	r3, #4
 801405c:	bf02      	ittt	eq
 801405e:	68e5      	ldreq	r5, [r4, #12]
 8014060:	6833      	ldreq	r3, [r6, #0]
 8014062:	1aed      	subeq	r5, r5, r3
 8014064:	68a3      	ldr	r3, [r4, #8]
 8014066:	bf0c      	ite	eq
 8014068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801406c:	2500      	movne	r5, #0
 801406e:	4293      	cmp	r3, r2
 8014070:	bfc4      	itt	gt
 8014072:	1a9b      	subgt	r3, r3, r2
 8014074:	18ed      	addgt	r5, r5, r3
 8014076:	2600      	movs	r6, #0
 8014078:	341a      	adds	r4, #26
 801407a:	42b5      	cmp	r5, r6
 801407c:	d11a      	bne.n	80140b4 <_printf_common+0xc8>
 801407e:	2000      	movs	r0, #0
 8014080:	e008      	b.n	8014094 <_printf_common+0xa8>
 8014082:	2301      	movs	r3, #1
 8014084:	4652      	mov	r2, sl
 8014086:	4641      	mov	r1, r8
 8014088:	4638      	mov	r0, r7
 801408a:	47c8      	blx	r9
 801408c:	3001      	adds	r0, #1
 801408e:	d103      	bne.n	8014098 <_printf_common+0xac>
 8014090:	f04f 30ff 	mov.w	r0, #4294967295
 8014094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014098:	3501      	adds	r5, #1
 801409a:	e7c6      	b.n	801402a <_printf_common+0x3e>
 801409c:	18e1      	adds	r1, r4, r3
 801409e:	1c5a      	adds	r2, r3, #1
 80140a0:	2030      	movs	r0, #48	@ 0x30
 80140a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80140a6:	4422      	add	r2, r4
 80140a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80140ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80140b0:	3302      	adds	r3, #2
 80140b2:	e7c7      	b.n	8014044 <_printf_common+0x58>
 80140b4:	2301      	movs	r3, #1
 80140b6:	4622      	mov	r2, r4
 80140b8:	4641      	mov	r1, r8
 80140ba:	4638      	mov	r0, r7
 80140bc:	47c8      	blx	r9
 80140be:	3001      	adds	r0, #1
 80140c0:	d0e6      	beq.n	8014090 <_printf_common+0xa4>
 80140c2:	3601      	adds	r6, #1
 80140c4:	e7d9      	b.n	801407a <_printf_common+0x8e>
	...

080140c8 <_printf_i>:
 80140c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140cc:	7e0f      	ldrb	r7, [r1, #24]
 80140ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80140d0:	2f78      	cmp	r7, #120	@ 0x78
 80140d2:	4691      	mov	r9, r2
 80140d4:	4680      	mov	r8, r0
 80140d6:	460c      	mov	r4, r1
 80140d8:	469a      	mov	sl, r3
 80140da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80140de:	d807      	bhi.n	80140f0 <_printf_i+0x28>
 80140e0:	2f62      	cmp	r7, #98	@ 0x62
 80140e2:	d80a      	bhi.n	80140fa <_printf_i+0x32>
 80140e4:	2f00      	cmp	r7, #0
 80140e6:	f000 80d2 	beq.w	801428e <_printf_i+0x1c6>
 80140ea:	2f58      	cmp	r7, #88	@ 0x58
 80140ec:	f000 80b9 	beq.w	8014262 <_printf_i+0x19a>
 80140f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80140f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80140f8:	e03a      	b.n	8014170 <_printf_i+0xa8>
 80140fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80140fe:	2b15      	cmp	r3, #21
 8014100:	d8f6      	bhi.n	80140f0 <_printf_i+0x28>
 8014102:	a101      	add	r1, pc, #4	@ (adr r1, 8014108 <_printf_i+0x40>)
 8014104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014108:	08014161 	.word	0x08014161
 801410c:	08014175 	.word	0x08014175
 8014110:	080140f1 	.word	0x080140f1
 8014114:	080140f1 	.word	0x080140f1
 8014118:	080140f1 	.word	0x080140f1
 801411c:	080140f1 	.word	0x080140f1
 8014120:	08014175 	.word	0x08014175
 8014124:	080140f1 	.word	0x080140f1
 8014128:	080140f1 	.word	0x080140f1
 801412c:	080140f1 	.word	0x080140f1
 8014130:	080140f1 	.word	0x080140f1
 8014134:	08014275 	.word	0x08014275
 8014138:	0801419f 	.word	0x0801419f
 801413c:	0801422f 	.word	0x0801422f
 8014140:	080140f1 	.word	0x080140f1
 8014144:	080140f1 	.word	0x080140f1
 8014148:	08014297 	.word	0x08014297
 801414c:	080140f1 	.word	0x080140f1
 8014150:	0801419f 	.word	0x0801419f
 8014154:	080140f1 	.word	0x080140f1
 8014158:	080140f1 	.word	0x080140f1
 801415c:	08014237 	.word	0x08014237
 8014160:	6833      	ldr	r3, [r6, #0]
 8014162:	1d1a      	adds	r2, r3, #4
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	6032      	str	r2, [r6, #0]
 8014168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801416c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014170:	2301      	movs	r3, #1
 8014172:	e09d      	b.n	80142b0 <_printf_i+0x1e8>
 8014174:	6833      	ldr	r3, [r6, #0]
 8014176:	6820      	ldr	r0, [r4, #0]
 8014178:	1d19      	adds	r1, r3, #4
 801417a:	6031      	str	r1, [r6, #0]
 801417c:	0606      	lsls	r6, r0, #24
 801417e:	d501      	bpl.n	8014184 <_printf_i+0xbc>
 8014180:	681d      	ldr	r5, [r3, #0]
 8014182:	e003      	b.n	801418c <_printf_i+0xc4>
 8014184:	0645      	lsls	r5, r0, #25
 8014186:	d5fb      	bpl.n	8014180 <_printf_i+0xb8>
 8014188:	f9b3 5000 	ldrsh.w	r5, [r3]
 801418c:	2d00      	cmp	r5, #0
 801418e:	da03      	bge.n	8014198 <_printf_i+0xd0>
 8014190:	232d      	movs	r3, #45	@ 0x2d
 8014192:	426d      	negs	r5, r5
 8014194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014198:	4859      	ldr	r0, [pc, #356]	@ (8014300 <_printf_i+0x238>)
 801419a:	230a      	movs	r3, #10
 801419c:	e011      	b.n	80141c2 <_printf_i+0xfa>
 801419e:	6821      	ldr	r1, [r4, #0]
 80141a0:	6833      	ldr	r3, [r6, #0]
 80141a2:	0608      	lsls	r0, r1, #24
 80141a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80141a8:	d402      	bmi.n	80141b0 <_printf_i+0xe8>
 80141aa:	0649      	lsls	r1, r1, #25
 80141ac:	bf48      	it	mi
 80141ae:	b2ad      	uxthmi	r5, r5
 80141b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80141b2:	4853      	ldr	r0, [pc, #332]	@ (8014300 <_printf_i+0x238>)
 80141b4:	6033      	str	r3, [r6, #0]
 80141b6:	bf14      	ite	ne
 80141b8:	230a      	movne	r3, #10
 80141ba:	2308      	moveq	r3, #8
 80141bc:	2100      	movs	r1, #0
 80141be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80141c2:	6866      	ldr	r6, [r4, #4]
 80141c4:	60a6      	str	r6, [r4, #8]
 80141c6:	2e00      	cmp	r6, #0
 80141c8:	bfa2      	ittt	ge
 80141ca:	6821      	ldrge	r1, [r4, #0]
 80141cc:	f021 0104 	bicge.w	r1, r1, #4
 80141d0:	6021      	strge	r1, [r4, #0]
 80141d2:	b90d      	cbnz	r5, 80141d8 <_printf_i+0x110>
 80141d4:	2e00      	cmp	r6, #0
 80141d6:	d04b      	beq.n	8014270 <_printf_i+0x1a8>
 80141d8:	4616      	mov	r6, r2
 80141da:	fbb5 f1f3 	udiv	r1, r5, r3
 80141de:	fb03 5711 	mls	r7, r3, r1, r5
 80141e2:	5dc7      	ldrb	r7, [r0, r7]
 80141e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80141e8:	462f      	mov	r7, r5
 80141ea:	42bb      	cmp	r3, r7
 80141ec:	460d      	mov	r5, r1
 80141ee:	d9f4      	bls.n	80141da <_printf_i+0x112>
 80141f0:	2b08      	cmp	r3, #8
 80141f2:	d10b      	bne.n	801420c <_printf_i+0x144>
 80141f4:	6823      	ldr	r3, [r4, #0]
 80141f6:	07df      	lsls	r7, r3, #31
 80141f8:	d508      	bpl.n	801420c <_printf_i+0x144>
 80141fa:	6923      	ldr	r3, [r4, #16]
 80141fc:	6861      	ldr	r1, [r4, #4]
 80141fe:	4299      	cmp	r1, r3
 8014200:	bfde      	ittt	le
 8014202:	2330      	movle	r3, #48	@ 0x30
 8014204:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014208:	f106 36ff 	addle.w	r6, r6, #4294967295
 801420c:	1b92      	subs	r2, r2, r6
 801420e:	6122      	str	r2, [r4, #16]
 8014210:	f8cd a000 	str.w	sl, [sp]
 8014214:	464b      	mov	r3, r9
 8014216:	aa03      	add	r2, sp, #12
 8014218:	4621      	mov	r1, r4
 801421a:	4640      	mov	r0, r8
 801421c:	f7ff fee6 	bl	8013fec <_printf_common>
 8014220:	3001      	adds	r0, #1
 8014222:	d14a      	bne.n	80142ba <_printf_i+0x1f2>
 8014224:	f04f 30ff 	mov.w	r0, #4294967295
 8014228:	b004      	add	sp, #16
 801422a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801422e:	6823      	ldr	r3, [r4, #0]
 8014230:	f043 0320 	orr.w	r3, r3, #32
 8014234:	6023      	str	r3, [r4, #0]
 8014236:	4833      	ldr	r0, [pc, #204]	@ (8014304 <_printf_i+0x23c>)
 8014238:	2778      	movs	r7, #120	@ 0x78
 801423a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801423e:	6823      	ldr	r3, [r4, #0]
 8014240:	6831      	ldr	r1, [r6, #0]
 8014242:	061f      	lsls	r7, r3, #24
 8014244:	f851 5b04 	ldr.w	r5, [r1], #4
 8014248:	d402      	bmi.n	8014250 <_printf_i+0x188>
 801424a:	065f      	lsls	r7, r3, #25
 801424c:	bf48      	it	mi
 801424e:	b2ad      	uxthmi	r5, r5
 8014250:	6031      	str	r1, [r6, #0]
 8014252:	07d9      	lsls	r1, r3, #31
 8014254:	bf44      	itt	mi
 8014256:	f043 0320 	orrmi.w	r3, r3, #32
 801425a:	6023      	strmi	r3, [r4, #0]
 801425c:	b11d      	cbz	r5, 8014266 <_printf_i+0x19e>
 801425e:	2310      	movs	r3, #16
 8014260:	e7ac      	b.n	80141bc <_printf_i+0xf4>
 8014262:	4827      	ldr	r0, [pc, #156]	@ (8014300 <_printf_i+0x238>)
 8014264:	e7e9      	b.n	801423a <_printf_i+0x172>
 8014266:	6823      	ldr	r3, [r4, #0]
 8014268:	f023 0320 	bic.w	r3, r3, #32
 801426c:	6023      	str	r3, [r4, #0]
 801426e:	e7f6      	b.n	801425e <_printf_i+0x196>
 8014270:	4616      	mov	r6, r2
 8014272:	e7bd      	b.n	80141f0 <_printf_i+0x128>
 8014274:	6833      	ldr	r3, [r6, #0]
 8014276:	6825      	ldr	r5, [r4, #0]
 8014278:	6961      	ldr	r1, [r4, #20]
 801427a:	1d18      	adds	r0, r3, #4
 801427c:	6030      	str	r0, [r6, #0]
 801427e:	062e      	lsls	r6, r5, #24
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	d501      	bpl.n	8014288 <_printf_i+0x1c0>
 8014284:	6019      	str	r1, [r3, #0]
 8014286:	e002      	b.n	801428e <_printf_i+0x1c6>
 8014288:	0668      	lsls	r0, r5, #25
 801428a:	d5fb      	bpl.n	8014284 <_printf_i+0x1bc>
 801428c:	8019      	strh	r1, [r3, #0]
 801428e:	2300      	movs	r3, #0
 8014290:	6123      	str	r3, [r4, #16]
 8014292:	4616      	mov	r6, r2
 8014294:	e7bc      	b.n	8014210 <_printf_i+0x148>
 8014296:	6833      	ldr	r3, [r6, #0]
 8014298:	1d1a      	adds	r2, r3, #4
 801429a:	6032      	str	r2, [r6, #0]
 801429c:	681e      	ldr	r6, [r3, #0]
 801429e:	6862      	ldr	r2, [r4, #4]
 80142a0:	2100      	movs	r1, #0
 80142a2:	4630      	mov	r0, r6
 80142a4:	f7eb ffbc 	bl	8000220 <memchr>
 80142a8:	b108      	cbz	r0, 80142ae <_printf_i+0x1e6>
 80142aa:	1b80      	subs	r0, r0, r6
 80142ac:	6060      	str	r0, [r4, #4]
 80142ae:	6863      	ldr	r3, [r4, #4]
 80142b0:	6123      	str	r3, [r4, #16]
 80142b2:	2300      	movs	r3, #0
 80142b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80142b8:	e7aa      	b.n	8014210 <_printf_i+0x148>
 80142ba:	6923      	ldr	r3, [r4, #16]
 80142bc:	4632      	mov	r2, r6
 80142be:	4649      	mov	r1, r9
 80142c0:	4640      	mov	r0, r8
 80142c2:	47d0      	blx	sl
 80142c4:	3001      	adds	r0, #1
 80142c6:	d0ad      	beq.n	8014224 <_printf_i+0x15c>
 80142c8:	6823      	ldr	r3, [r4, #0]
 80142ca:	079b      	lsls	r3, r3, #30
 80142cc:	d413      	bmi.n	80142f6 <_printf_i+0x22e>
 80142ce:	68e0      	ldr	r0, [r4, #12]
 80142d0:	9b03      	ldr	r3, [sp, #12]
 80142d2:	4298      	cmp	r0, r3
 80142d4:	bfb8      	it	lt
 80142d6:	4618      	movlt	r0, r3
 80142d8:	e7a6      	b.n	8014228 <_printf_i+0x160>
 80142da:	2301      	movs	r3, #1
 80142dc:	4632      	mov	r2, r6
 80142de:	4649      	mov	r1, r9
 80142e0:	4640      	mov	r0, r8
 80142e2:	47d0      	blx	sl
 80142e4:	3001      	adds	r0, #1
 80142e6:	d09d      	beq.n	8014224 <_printf_i+0x15c>
 80142e8:	3501      	adds	r5, #1
 80142ea:	68e3      	ldr	r3, [r4, #12]
 80142ec:	9903      	ldr	r1, [sp, #12]
 80142ee:	1a5b      	subs	r3, r3, r1
 80142f0:	42ab      	cmp	r3, r5
 80142f2:	dcf2      	bgt.n	80142da <_printf_i+0x212>
 80142f4:	e7eb      	b.n	80142ce <_printf_i+0x206>
 80142f6:	2500      	movs	r5, #0
 80142f8:	f104 0619 	add.w	r6, r4, #25
 80142fc:	e7f5      	b.n	80142ea <_printf_i+0x222>
 80142fe:	bf00      	nop
 8014300:	080191ae 	.word	0x080191ae
 8014304:	080191bf 	.word	0x080191bf

08014308 <_scanf_float>:
 8014308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801430c:	b087      	sub	sp, #28
 801430e:	4617      	mov	r7, r2
 8014310:	9303      	str	r3, [sp, #12]
 8014312:	688b      	ldr	r3, [r1, #8]
 8014314:	1e5a      	subs	r2, r3, #1
 8014316:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801431a:	bf81      	itttt	hi
 801431c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014320:	eb03 0b05 	addhi.w	fp, r3, r5
 8014324:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014328:	608b      	strhi	r3, [r1, #8]
 801432a:	680b      	ldr	r3, [r1, #0]
 801432c:	460a      	mov	r2, r1
 801432e:	f04f 0500 	mov.w	r5, #0
 8014332:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014336:	f842 3b1c 	str.w	r3, [r2], #28
 801433a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801433e:	4680      	mov	r8, r0
 8014340:	460c      	mov	r4, r1
 8014342:	bf98      	it	ls
 8014344:	f04f 0b00 	movls.w	fp, #0
 8014348:	9201      	str	r2, [sp, #4]
 801434a:	4616      	mov	r6, r2
 801434c:	46aa      	mov	sl, r5
 801434e:	46a9      	mov	r9, r5
 8014350:	9502      	str	r5, [sp, #8]
 8014352:	68a2      	ldr	r2, [r4, #8]
 8014354:	b152      	cbz	r2, 801436c <_scanf_float+0x64>
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	2b4e      	cmp	r3, #78	@ 0x4e
 801435c:	d864      	bhi.n	8014428 <_scanf_float+0x120>
 801435e:	2b40      	cmp	r3, #64	@ 0x40
 8014360:	d83c      	bhi.n	80143dc <_scanf_float+0xd4>
 8014362:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014366:	b2c8      	uxtb	r0, r1
 8014368:	280e      	cmp	r0, #14
 801436a:	d93a      	bls.n	80143e2 <_scanf_float+0xda>
 801436c:	f1b9 0f00 	cmp.w	r9, #0
 8014370:	d003      	beq.n	801437a <_scanf_float+0x72>
 8014372:	6823      	ldr	r3, [r4, #0]
 8014374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014378:	6023      	str	r3, [r4, #0]
 801437a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801437e:	f1ba 0f01 	cmp.w	sl, #1
 8014382:	f200 8117 	bhi.w	80145b4 <_scanf_float+0x2ac>
 8014386:	9b01      	ldr	r3, [sp, #4]
 8014388:	429e      	cmp	r6, r3
 801438a:	f200 8108 	bhi.w	801459e <_scanf_float+0x296>
 801438e:	2001      	movs	r0, #1
 8014390:	b007      	add	sp, #28
 8014392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014396:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801439a:	2a0d      	cmp	r2, #13
 801439c:	d8e6      	bhi.n	801436c <_scanf_float+0x64>
 801439e:	a101      	add	r1, pc, #4	@ (adr r1, 80143a4 <_scanf_float+0x9c>)
 80143a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80143a4:	080144eb 	.word	0x080144eb
 80143a8:	0801436d 	.word	0x0801436d
 80143ac:	0801436d 	.word	0x0801436d
 80143b0:	0801436d 	.word	0x0801436d
 80143b4:	0801454b 	.word	0x0801454b
 80143b8:	08014523 	.word	0x08014523
 80143bc:	0801436d 	.word	0x0801436d
 80143c0:	0801436d 	.word	0x0801436d
 80143c4:	080144f9 	.word	0x080144f9
 80143c8:	0801436d 	.word	0x0801436d
 80143cc:	0801436d 	.word	0x0801436d
 80143d0:	0801436d 	.word	0x0801436d
 80143d4:	0801436d 	.word	0x0801436d
 80143d8:	080144b1 	.word	0x080144b1
 80143dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80143e0:	e7db      	b.n	801439a <_scanf_float+0x92>
 80143e2:	290e      	cmp	r1, #14
 80143e4:	d8c2      	bhi.n	801436c <_scanf_float+0x64>
 80143e6:	a001      	add	r0, pc, #4	@ (adr r0, 80143ec <_scanf_float+0xe4>)
 80143e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80143ec:	080144a1 	.word	0x080144a1
 80143f0:	0801436d 	.word	0x0801436d
 80143f4:	080144a1 	.word	0x080144a1
 80143f8:	08014537 	.word	0x08014537
 80143fc:	0801436d 	.word	0x0801436d
 8014400:	08014449 	.word	0x08014449
 8014404:	08014487 	.word	0x08014487
 8014408:	08014487 	.word	0x08014487
 801440c:	08014487 	.word	0x08014487
 8014410:	08014487 	.word	0x08014487
 8014414:	08014487 	.word	0x08014487
 8014418:	08014487 	.word	0x08014487
 801441c:	08014487 	.word	0x08014487
 8014420:	08014487 	.word	0x08014487
 8014424:	08014487 	.word	0x08014487
 8014428:	2b6e      	cmp	r3, #110	@ 0x6e
 801442a:	d809      	bhi.n	8014440 <_scanf_float+0x138>
 801442c:	2b60      	cmp	r3, #96	@ 0x60
 801442e:	d8b2      	bhi.n	8014396 <_scanf_float+0x8e>
 8014430:	2b54      	cmp	r3, #84	@ 0x54
 8014432:	d07b      	beq.n	801452c <_scanf_float+0x224>
 8014434:	2b59      	cmp	r3, #89	@ 0x59
 8014436:	d199      	bne.n	801436c <_scanf_float+0x64>
 8014438:	2d07      	cmp	r5, #7
 801443a:	d197      	bne.n	801436c <_scanf_float+0x64>
 801443c:	2508      	movs	r5, #8
 801443e:	e02c      	b.n	801449a <_scanf_float+0x192>
 8014440:	2b74      	cmp	r3, #116	@ 0x74
 8014442:	d073      	beq.n	801452c <_scanf_float+0x224>
 8014444:	2b79      	cmp	r3, #121	@ 0x79
 8014446:	e7f6      	b.n	8014436 <_scanf_float+0x12e>
 8014448:	6821      	ldr	r1, [r4, #0]
 801444a:	05c8      	lsls	r0, r1, #23
 801444c:	d51b      	bpl.n	8014486 <_scanf_float+0x17e>
 801444e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014452:	6021      	str	r1, [r4, #0]
 8014454:	f109 0901 	add.w	r9, r9, #1
 8014458:	f1bb 0f00 	cmp.w	fp, #0
 801445c:	d003      	beq.n	8014466 <_scanf_float+0x15e>
 801445e:	3201      	adds	r2, #1
 8014460:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014464:	60a2      	str	r2, [r4, #8]
 8014466:	68a3      	ldr	r3, [r4, #8]
 8014468:	3b01      	subs	r3, #1
 801446a:	60a3      	str	r3, [r4, #8]
 801446c:	6923      	ldr	r3, [r4, #16]
 801446e:	3301      	adds	r3, #1
 8014470:	6123      	str	r3, [r4, #16]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	3b01      	subs	r3, #1
 8014476:	2b00      	cmp	r3, #0
 8014478:	607b      	str	r3, [r7, #4]
 801447a:	f340 8087 	ble.w	801458c <_scanf_float+0x284>
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	3301      	adds	r3, #1
 8014482:	603b      	str	r3, [r7, #0]
 8014484:	e765      	b.n	8014352 <_scanf_float+0x4a>
 8014486:	eb1a 0105 	adds.w	r1, sl, r5
 801448a:	f47f af6f 	bne.w	801436c <_scanf_float+0x64>
 801448e:	6822      	ldr	r2, [r4, #0]
 8014490:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014494:	6022      	str	r2, [r4, #0]
 8014496:	460d      	mov	r5, r1
 8014498:	468a      	mov	sl, r1
 801449a:	f806 3b01 	strb.w	r3, [r6], #1
 801449e:	e7e2      	b.n	8014466 <_scanf_float+0x15e>
 80144a0:	6822      	ldr	r2, [r4, #0]
 80144a2:	0610      	lsls	r0, r2, #24
 80144a4:	f57f af62 	bpl.w	801436c <_scanf_float+0x64>
 80144a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80144ac:	6022      	str	r2, [r4, #0]
 80144ae:	e7f4      	b.n	801449a <_scanf_float+0x192>
 80144b0:	f1ba 0f00 	cmp.w	sl, #0
 80144b4:	d10e      	bne.n	80144d4 <_scanf_float+0x1cc>
 80144b6:	f1b9 0f00 	cmp.w	r9, #0
 80144ba:	d10e      	bne.n	80144da <_scanf_float+0x1d2>
 80144bc:	6822      	ldr	r2, [r4, #0]
 80144be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80144c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80144c6:	d108      	bne.n	80144da <_scanf_float+0x1d2>
 80144c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80144cc:	6022      	str	r2, [r4, #0]
 80144ce:	f04f 0a01 	mov.w	sl, #1
 80144d2:	e7e2      	b.n	801449a <_scanf_float+0x192>
 80144d4:	f1ba 0f02 	cmp.w	sl, #2
 80144d8:	d055      	beq.n	8014586 <_scanf_float+0x27e>
 80144da:	2d01      	cmp	r5, #1
 80144dc:	d002      	beq.n	80144e4 <_scanf_float+0x1dc>
 80144de:	2d04      	cmp	r5, #4
 80144e0:	f47f af44 	bne.w	801436c <_scanf_float+0x64>
 80144e4:	3501      	adds	r5, #1
 80144e6:	b2ed      	uxtb	r5, r5
 80144e8:	e7d7      	b.n	801449a <_scanf_float+0x192>
 80144ea:	f1ba 0f01 	cmp.w	sl, #1
 80144ee:	f47f af3d 	bne.w	801436c <_scanf_float+0x64>
 80144f2:	f04f 0a02 	mov.w	sl, #2
 80144f6:	e7d0      	b.n	801449a <_scanf_float+0x192>
 80144f8:	b97d      	cbnz	r5, 801451a <_scanf_float+0x212>
 80144fa:	f1b9 0f00 	cmp.w	r9, #0
 80144fe:	f47f af38 	bne.w	8014372 <_scanf_float+0x6a>
 8014502:	6822      	ldr	r2, [r4, #0]
 8014504:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014508:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801450c:	f040 8108 	bne.w	8014720 <_scanf_float+0x418>
 8014510:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014514:	6022      	str	r2, [r4, #0]
 8014516:	2501      	movs	r5, #1
 8014518:	e7bf      	b.n	801449a <_scanf_float+0x192>
 801451a:	2d03      	cmp	r5, #3
 801451c:	d0e2      	beq.n	80144e4 <_scanf_float+0x1dc>
 801451e:	2d05      	cmp	r5, #5
 8014520:	e7de      	b.n	80144e0 <_scanf_float+0x1d8>
 8014522:	2d02      	cmp	r5, #2
 8014524:	f47f af22 	bne.w	801436c <_scanf_float+0x64>
 8014528:	2503      	movs	r5, #3
 801452a:	e7b6      	b.n	801449a <_scanf_float+0x192>
 801452c:	2d06      	cmp	r5, #6
 801452e:	f47f af1d 	bne.w	801436c <_scanf_float+0x64>
 8014532:	2507      	movs	r5, #7
 8014534:	e7b1      	b.n	801449a <_scanf_float+0x192>
 8014536:	6822      	ldr	r2, [r4, #0]
 8014538:	0591      	lsls	r1, r2, #22
 801453a:	f57f af17 	bpl.w	801436c <_scanf_float+0x64>
 801453e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014542:	6022      	str	r2, [r4, #0]
 8014544:	f8cd 9008 	str.w	r9, [sp, #8]
 8014548:	e7a7      	b.n	801449a <_scanf_float+0x192>
 801454a:	6822      	ldr	r2, [r4, #0]
 801454c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014550:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014554:	d006      	beq.n	8014564 <_scanf_float+0x25c>
 8014556:	0550      	lsls	r0, r2, #21
 8014558:	f57f af08 	bpl.w	801436c <_scanf_float+0x64>
 801455c:	f1b9 0f00 	cmp.w	r9, #0
 8014560:	f000 80de 	beq.w	8014720 <_scanf_float+0x418>
 8014564:	0591      	lsls	r1, r2, #22
 8014566:	bf58      	it	pl
 8014568:	9902      	ldrpl	r1, [sp, #8]
 801456a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801456e:	bf58      	it	pl
 8014570:	eba9 0101 	subpl.w	r1, r9, r1
 8014574:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014578:	bf58      	it	pl
 801457a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801457e:	6022      	str	r2, [r4, #0]
 8014580:	f04f 0900 	mov.w	r9, #0
 8014584:	e789      	b.n	801449a <_scanf_float+0x192>
 8014586:	f04f 0a03 	mov.w	sl, #3
 801458a:	e786      	b.n	801449a <_scanf_float+0x192>
 801458c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014590:	4639      	mov	r1, r7
 8014592:	4640      	mov	r0, r8
 8014594:	4798      	blx	r3
 8014596:	2800      	cmp	r0, #0
 8014598:	f43f aedb 	beq.w	8014352 <_scanf_float+0x4a>
 801459c:	e6e6      	b.n	801436c <_scanf_float+0x64>
 801459e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80145a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80145a6:	463a      	mov	r2, r7
 80145a8:	4640      	mov	r0, r8
 80145aa:	4798      	blx	r3
 80145ac:	6923      	ldr	r3, [r4, #16]
 80145ae:	3b01      	subs	r3, #1
 80145b0:	6123      	str	r3, [r4, #16]
 80145b2:	e6e8      	b.n	8014386 <_scanf_float+0x7e>
 80145b4:	1e6b      	subs	r3, r5, #1
 80145b6:	2b06      	cmp	r3, #6
 80145b8:	d824      	bhi.n	8014604 <_scanf_float+0x2fc>
 80145ba:	2d02      	cmp	r5, #2
 80145bc:	d836      	bhi.n	801462c <_scanf_float+0x324>
 80145be:	9b01      	ldr	r3, [sp, #4]
 80145c0:	429e      	cmp	r6, r3
 80145c2:	f67f aee4 	bls.w	801438e <_scanf_float+0x86>
 80145c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80145ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80145ce:	463a      	mov	r2, r7
 80145d0:	4640      	mov	r0, r8
 80145d2:	4798      	blx	r3
 80145d4:	6923      	ldr	r3, [r4, #16]
 80145d6:	3b01      	subs	r3, #1
 80145d8:	6123      	str	r3, [r4, #16]
 80145da:	e7f0      	b.n	80145be <_scanf_float+0x2b6>
 80145dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80145e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80145e4:	463a      	mov	r2, r7
 80145e6:	4640      	mov	r0, r8
 80145e8:	4798      	blx	r3
 80145ea:	6923      	ldr	r3, [r4, #16]
 80145ec:	3b01      	subs	r3, #1
 80145ee:	6123      	str	r3, [r4, #16]
 80145f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80145f4:	fa5f fa8a 	uxtb.w	sl, sl
 80145f8:	f1ba 0f02 	cmp.w	sl, #2
 80145fc:	d1ee      	bne.n	80145dc <_scanf_float+0x2d4>
 80145fe:	3d03      	subs	r5, #3
 8014600:	b2ed      	uxtb	r5, r5
 8014602:	1b76      	subs	r6, r6, r5
 8014604:	6823      	ldr	r3, [r4, #0]
 8014606:	05da      	lsls	r2, r3, #23
 8014608:	d530      	bpl.n	801466c <_scanf_float+0x364>
 801460a:	055b      	lsls	r3, r3, #21
 801460c:	d511      	bpl.n	8014632 <_scanf_float+0x32a>
 801460e:	9b01      	ldr	r3, [sp, #4]
 8014610:	429e      	cmp	r6, r3
 8014612:	f67f aebc 	bls.w	801438e <_scanf_float+0x86>
 8014616:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801461a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801461e:	463a      	mov	r2, r7
 8014620:	4640      	mov	r0, r8
 8014622:	4798      	blx	r3
 8014624:	6923      	ldr	r3, [r4, #16]
 8014626:	3b01      	subs	r3, #1
 8014628:	6123      	str	r3, [r4, #16]
 801462a:	e7f0      	b.n	801460e <_scanf_float+0x306>
 801462c:	46aa      	mov	sl, r5
 801462e:	46b3      	mov	fp, r6
 8014630:	e7de      	b.n	80145f0 <_scanf_float+0x2e8>
 8014632:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014636:	6923      	ldr	r3, [r4, #16]
 8014638:	2965      	cmp	r1, #101	@ 0x65
 801463a:	f103 33ff 	add.w	r3, r3, #4294967295
 801463e:	f106 35ff 	add.w	r5, r6, #4294967295
 8014642:	6123      	str	r3, [r4, #16]
 8014644:	d00c      	beq.n	8014660 <_scanf_float+0x358>
 8014646:	2945      	cmp	r1, #69	@ 0x45
 8014648:	d00a      	beq.n	8014660 <_scanf_float+0x358>
 801464a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801464e:	463a      	mov	r2, r7
 8014650:	4640      	mov	r0, r8
 8014652:	4798      	blx	r3
 8014654:	6923      	ldr	r3, [r4, #16]
 8014656:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801465a:	3b01      	subs	r3, #1
 801465c:	1eb5      	subs	r5, r6, #2
 801465e:	6123      	str	r3, [r4, #16]
 8014660:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014664:	463a      	mov	r2, r7
 8014666:	4640      	mov	r0, r8
 8014668:	4798      	blx	r3
 801466a:	462e      	mov	r6, r5
 801466c:	6822      	ldr	r2, [r4, #0]
 801466e:	f012 0210 	ands.w	r2, r2, #16
 8014672:	d001      	beq.n	8014678 <_scanf_float+0x370>
 8014674:	2000      	movs	r0, #0
 8014676:	e68b      	b.n	8014390 <_scanf_float+0x88>
 8014678:	7032      	strb	r2, [r6, #0]
 801467a:	6823      	ldr	r3, [r4, #0]
 801467c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014684:	d11c      	bne.n	80146c0 <_scanf_float+0x3b8>
 8014686:	9b02      	ldr	r3, [sp, #8]
 8014688:	454b      	cmp	r3, r9
 801468a:	eba3 0209 	sub.w	r2, r3, r9
 801468e:	d123      	bne.n	80146d8 <_scanf_float+0x3d0>
 8014690:	9901      	ldr	r1, [sp, #4]
 8014692:	2200      	movs	r2, #0
 8014694:	4640      	mov	r0, r8
 8014696:	f002 fbf3 	bl	8016e80 <_strtod_r>
 801469a:	9b03      	ldr	r3, [sp, #12]
 801469c:	6821      	ldr	r1, [r4, #0]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f011 0f02 	tst.w	r1, #2
 80146a4:	ec57 6b10 	vmov	r6, r7, d0
 80146a8:	f103 0204 	add.w	r2, r3, #4
 80146ac:	d01f      	beq.n	80146ee <_scanf_float+0x3e6>
 80146ae:	9903      	ldr	r1, [sp, #12]
 80146b0:	600a      	str	r2, [r1, #0]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	e9c3 6700 	strd	r6, r7, [r3]
 80146b8:	68e3      	ldr	r3, [r4, #12]
 80146ba:	3301      	adds	r3, #1
 80146bc:	60e3      	str	r3, [r4, #12]
 80146be:	e7d9      	b.n	8014674 <_scanf_float+0x36c>
 80146c0:	9b04      	ldr	r3, [sp, #16]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d0e4      	beq.n	8014690 <_scanf_float+0x388>
 80146c6:	9905      	ldr	r1, [sp, #20]
 80146c8:	230a      	movs	r3, #10
 80146ca:	3101      	adds	r1, #1
 80146cc:	4640      	mov	r0, r8
 80146ce:	f002 fc57 	bl	8016f80 <_strtol_r>
 80146d2:	9b04      	ldr	r3, [sp, #16]
 80146d4:	9e05      	ldr	r6, [sp, #20]
 80146d6:	1ac2      	subs	r2, r0, r3
 80146d8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80146dc:	429e      	cmp	r6, r3
 80146de:	bf28      	it	cs
 80146e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80146e4:	4910      	ldr	r1, [pc, #64]	@ (8014728 <_scanf_float+0x420>)
 80146e6:	4630      	mov	r0, r6
 80146e8:	f000 f8f6 	bl	80148d8 <siprintf>
 80146ec:	e7d0      	b.n	8014690 <_scanf_float+0x388>
 80146ee:	f011 0f04 	tst.w	r1, #4
 80146f2:	9903      	ldr	r1, [sp, #12]
 80146f4:	600a      	str	r2, [r1, #0]
 80146f6:	d1dc      	bne.n	80146b2 <_scanf_float+0x3aa>
 80146f8:	681d      	ldr	r5, [r3, #0]
 80146fa:	4632      	mov	r2, r6
 80146fc:	463b      	mov	r3, r7
 80146fe:	4630      	mov	r0, r6
 8014700:	4639      	mov	r1, r7
 8014702:	f7ec fa3b 	bl	8000b7c <__aeabi_dcmpun>
 8014706:	b128      	cbz	r0, 8014714 <_scanf_float+0x40c>
 8014708:	4808      	ldr	r0, [pc, #32]	@ (801472c <_scanf_float+0x424>)
 801470a:	f000 fa67 	bl	8014bdc <nanf>
 801470e:	ed85 0a00 	vstr	s0, [r5]
 8014712:	e7d1      	b.n	80146b8 <_scanf_float+0x3b0>
 8014714:	4630      	mov	r0, r6
 8014716:	4639      	mov	r1, r7
 8014718:	f7ec fa8e 	bl	8000c38 <__aeabi_d2f>
 801471c:	6028      	str	r0, [r5, #0]
 801471e:	e7cb      	b.n	80146b8 <_scanf_float+0x3b0>
 8014720:	f04f 0900 	mov.w	r9, #0
 8014724:	e629      	b.n	801437a <_scanf_float+0x72>
 8014726:	bf00      	nop
 8014728:	080191d0 	.word	0x080191d0
 801472c:	0801919b 	.word	0x0801919b

08014730 <std>:
 8014730:	2300      	movs	r3, #0
 8014732:	b510      	push	{r4, lr}
 8014734:	4604      	mov	r4, r0
 8014736:	e9c0 3300 	strd	r3, r3, [r0]
 801473a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801473e:	6083      	str	r3, [r0, #8]
 8014740:	8181      	strh	r1, [r0, #12]
 8014742:	6643      	str	r3, [r0, #100]	@ 0x64
 8014744:	81c2      	strh	r2, [r0, #14]
 8014746:	6183      	str	r3, [r0, #24]
 8014748:	4619      	mov	r1, r3
 801474a:	2208      	movs	r2, #8
 801474c:	305c      	adds	r0, #92	@ 0x5c
 801474e:	f000 f950 	bl	80149f2 <memset>
 8014752:	4b0d      	ldr	r3, [pc, #52]	@ (8014788 <std+0x58>)
 8014754:	6263      	str	r3, [r4, #36]	@ 0x24
 8014756:	4b0d      	ldr	r3, [pc, #52]	@ (801478c <std+0x5c>)
 8014758:	62a3      	str	r3, [r4, #40]	@ 0x28
 801475a:	4b0d      	ldr	r3, [pc, #52]	@ (8014790 <std+0x60>)
 801475c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801475e:	4b0d      	ldr	r3, [pc, #52]	@ (8014794 <std+0x64>)
 8014760:	6323      	str	r3, [r4, #48]	@ 0x30
 8014762:	4b0d      	ldr	r3, [pc, #52]	@ (8014798 <std+0x68>)
 8014764:	6224      	str	r4, [r4, #32]
 8014766:	429c      	cmp	r4, r3
 8014768:	d006      	beq.n	8014778 <std+0x48>
 801476a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801476e:	4294      	cmp	r4, r2
 8014770:	d002      	beq.n	8014778 <std+0x48>
 8014772:	33d0      	adds	r3, #208	@ 0xd0
 8014774:	429c      	cmp	r4, r3
 8014776:	d105      	bne.n	8014784 <std+0x54>
 8014778:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801477c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014780:	f000 ba1a 	b.w	8014bb8 <__retarget_lock_init_recursive>
 8014784:	bd10      	pop	{r4, pc}
 8014786:	bf00      	nop
 8014788:	08014919 	.word	0x08014919
 801478c:	0801493b 	.word	0x0801493b
 8014790:	08014973 	.word	0x08014973
 8014794:	08014997 	.word	0x08014997
 8014798:	200009bc 	.word	0x200009bc

0801479c <stdio_exit_handler>:
 801479c:	4a02      	ldr	r2, [pc, #8]	@ (80147a8 <stdio_exit_handler+0xc>)
 801479e:	4903      	ldr	r1, [pc, #12]	@ (80147ac <stdio_exit_handler+0x10>)
 80147a0:	4803      	ldr	r0, [pc, #12]	@ (80147b0 <stdio_exit_handler+0x14>)
 80147a2:	f000 b87b 	b.w	801489c <_fwalk_sglue>
 80147a6:	bf00      	nop
 80147a8:	20000084 	.word	0x20000084
 80147ac:	080175c1 	.word	0x080175c1
 80147b0:	20000094 	.word	0x20000094

080147b4 <cleanup_stdio>:
 80147b4:	6841      	ldr	r1, [r0, #4]
 80147b6:	4b0c      	ldr	r3, [pc, #48]	@ (80147e8 <cleanup_stdio+0x34>)
 80147b8:	4299      	cmp	r1, r3
 80147ba:	b510      	push	{r4, lr}
 80147bc:	4604      	mov	r4, r0
 80147be:	d001      	beq.n	80147c4 <cleanup_stdio+0x10>
 80147c0:	f002 fefe 	bl	80175c0 <_fflush_r>
 80147c4:	68a1      	ldr	r1, [r4, #8]
 80147c6:	4b09      	ldr	r3, [pc, #36]	@ (80147ec <cleanup_stdio+0x38>)
 80147c8:	4299      	cmp	r1, r3
 80147ca:	d002      	beq.n	80147d2 <cleanup_stdio+0x1e>
 80147cc:	4620      	mov	r0, r4
 80147ce:	f002 fef7 	bl	80175c0 <_fflush_r>
 80147d2:	68e1      	ldr	r1, [r4, #12]
 80147d4:	4b06      	ldr	r3, [pc, #24]	@ (80147f0 <cleanup_stdio+0x3c>)
 80147d6:	4299      	cmp	r1, r3
 80147d8:	d004      	beq.n	80147e4 <cleanup_stdio+0x30>
 80147da:	4620      	mov	r0, r4
 80147dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147e0:	f002 beee 	b.w	80175c0 <_fflush_r>
 80147e4:	bd10      	pop	{r4, pc}
 80147e6:	bf00      	nop
 80147e8:	200009bc 	.word	0x200009bc
 80147ec:	20000a24 	.word	0x20000a24
 80147f0:	20000a8c 	.word	0x20000a8c

080147f4 <global_stdio_init.part.0>:
 80147f4:	b510      	push	{r4, lr}
 80147f6:	4b0b      	ldr	r3, [pc, #44]	@ (8014824 <global_stdio_init.part.0+0x30>)
 80147f8:	4c0b      	ldr	r4, [pc, #44]	@ (8014828 <global_stdio_init.part.0+0x34>)
 80147fa:	4a0c      	ldr	r2, [pc, #48]	@ (801482c <global_stdio_init.part.0+0x38>)
 80147fc:	601a      	str	r2, [r3, #0]
 80147fe:	4620      	mov	r0, r4
 8014800:	2200      	movs	r2, #0
 8014802:	2104      	movs	r1, #4
 8014804:	f7ff ff94 	bl	8014730 <std>
 8014808:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801480c:	2201      	movs	r2, #1
 801480e:	2109      	movs	r1, #9
 8014810:	f7ff ff8e 	bl	8014730 <std>
 8014814:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014818:	2202      	movs	r2, #2
 801481a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801481e:	2112      	movs	r1, #18
 8014820:	f7ff bf86 	b.w	8014730 <std>
 8014824:	20000af4 	.word	0x20000af4
 8014828:	200009bc 	.word	0x200009bc
 801482c:	0801479d 	.word	0x0801479d

08014830 <__sfp_lock_acquire>:
 8014830:	4801      	ldr	r0, [pc, #4]	@ (8014838 <__sfp_lock_acquire+0x8>)
 8014832:	f000 b9c2 	b.w	8014bba <__retarget_lock_acquire_recursive>
 8014836:	bf00      	nop
 8014838:	20000afd 	.word	0x20000afd

0801483c <__sfp_lock_release>:
 801483c:	4801      	ldr	r0, [pc, #4]	@ (8014844 <__sfp_lock_release+0x8>)
 801483e:	f000 b9bd 	b.w	8014bbc <__retarget_lock_release_recursive>
 8014842:	bf00      	nop
 8014844:	20000afd 	.word	0x20000afd

08014848 <__sinit>:
 8014848:	b510      	push	{r4, lr}
 801484a:	4604      	mov	r4, r0
 801484c:	f7ff fff0 	bl	8014830 <__sfp_lock_acquire>
 8014850:	6a23      	ldr	r3, [r4, #32]
 8014852:	b11b      	cbz	r3, 801485c <__sinit+0x14>
 8014854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014858:	f7ff bff0 	b.w	801483c <__sfp_lock_release>
 801485c:	4b04      	ldr	r3, [pc, #16]	@ (8014870 <__sinit+0x28>)
 801485e:	6223      	str	r3, [r4, #32]
 8014860:	4b04      	ldr	r3, [pc, #16]	@ (8014874 <__sinit+0x2c>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d1f5      	bne.n	8014854 <__sinit+0xc>
 8014868:	f7ff ffc4 	bl	80147f4 <global_stdio_init.part.0>
 801486c:	e7f2      	b.n	8014854 <__sinit+0xc>
 801486e:	bf00      	nop
 8014870:	080147b5 	.word	0x080147b5
 8014874:	20000af4 	.word	0x20000af4

08014878 <fiprintf>:
 8014878:	b40e      	push	{r1, r2, r3}
 801487a:	b503      	push	{r0, r1, lr}
 801487c:	4601      	mov	r1, r0
 801487e:	ab03      	add	r3, sp, #12
 8014880:	4805      	ldr	r0, [pc, #20]	@ (8014898 <fiprintf+0x20>)
 8014882:	f853 2b04 	ldr.w	r2, [r3], #4
 8014886:	6800      	ldr	r0, [r0, #0]
 8014888:	9301      	str	r3, [sp, #4]
 801488a:	f002 fcfd 	bl	8017288 <_vfiprintf_r>
 801488e:	b002      	add	sp, #8
 8014890:	f85d eb04 	ldr.w	lr, [sp], #4
 8014894:	b003      	add	sp, #12
 8014896:	4770      	bx	lr
 8014898:	20000090 	.word	0x20000090

0801489c <_fwalk_sglue>:
 801489c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148a0:	4607      	mov	r7, r0
 80148a2:	4688      	mov	r8, r1
 80148a4:	4614      	mov	r4, r2
 80148a6:	2600      	movs	r6, #0
 80148a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80148ac:	f1b9 0901 	subs.w	r9, r9, #1
 80148b0:	d505      	bpl.n	80148be <_fwalk_sglue+0x22>
 80148b2:	6824      	ldr	r4, [r4, #0]
 80148b4:	2c00      	cmp	r4, #0
 80148b6:	d1f7      	bne.n	80148a8 <_fwalk_sglue+0xc>
 80148b8:	4630      	mov	r0, r6
 80148ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148be:	89ab      	ldrh	r3, [r5, #12]
 80148c0:	2b01      	cmp	r3, #1
 80148c2:	d907      	bls.n	80148d4 <_fwalk_sglue+0x38>
 80148c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80148c8:	3301      	adds	r3, #1
 80148ca:	d003      	beq.n	80148d4 <_fwalk_sglue+0x38>
 80148cc:	4629      	mov	r1, r5
 80148ce:	4638      	mov	r0, r7
 80148d0:	47c0      	blx	r8
 80148d2:	4306      	orrs	r6, r0
 80148d4:	3568      	adds	r5, #104	@ 0x68
 80148d6:	e7e9      	b.n	80148ac <_fwalk_sglue+0x10>

080148d8 <siprintf>:
 80148d8:	b40e      	push	{r1, r2, r3}
 80148da:	b500      	push	{lr}
 80148dc:	b09c      	sub	sp, #112	@ 0x70
 80148de:	ab1d      	add	r3, sp, #116	@ 0x74
 80148e0:	9002      	str	r0, [sp, #8]
 80148e2:	9006      	str	r0, [sp, #24]
 80148e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80148e8:	4809      	ldr	r0, [pc, #36]	@ (8014910 <siprintf+0x38>)
 80148ea:	9107      	str	r1, [sp, #28]
 80148ec:	9104      	str	r1, [sp, #16]
 80148ee:	4909      	ldr	r1, [pc, #36]	@ (8014914 <siprintf+0x3c>)
 80148f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80148f4:	9105      	str	r1, [sp, #20]
 80148f6:	6800      	ldr	r0, [r0, #0]
 80148f8:	9301      	str	r3, [sp, #4]
 80148fa:	a902      	add	r1, sp, #8
 80148fc:	f002 fb9e 	bl	801703c <_svfiprintf_r>
 8014900:	9b02      	ldr	r3, [sp, #8]
 8014902:	2200      	movs	r2, #0
 8014904:	701a      	strb	r2, [r3, #0]
 8014906:	b01c      	add	sp, #112	@ 0x70
 8014908:	f85d eb04 	ldr.w	lr, [sp], #4
 801490c:	b003      	add	sp, #12
 801490e:	4770      	bx	lr
 8014910:	20000090 	.word	0x20000090
 8014914:	ffff0208 	.word	0xffff0208

08014918 <__sread>:
 8014918:	b510      	push	{r4, lr}
 801491a:	460c      	mov	r4, r1
 801491c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014920:	f000 f8d8 	bl	8014ad4 <_read_r>
 8014924:	2800      	cmp	r0, #0
 8014926:	bfab      	itete	ge
 8014928:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801492a:	89a3      	ldrhlt	r3, [r4, #12]
 801492c:	181b      	addge	r3, r3, r0
 801492e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014932:	bfac      	ite	ge
 8014934:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014936:	81a3      	strhlt	r3, [r4, #12]
 8014938:	bd10      	pop	{r4, pc}

0801493a <__swrite>:
 801493a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801493e:	461f      	mov	r7, r3
 8014940:	898b      	ldrh	r3, [r1, #12]
 8014942:	05db      	lsls	r3, r3, #23
 8014944:	4605      	mov	r5, r0
 8014946:	460c      	mov	r4, r1
 8014948:	4616      	mov	r6, r2
 801494a:	d505      	bpl.n	8014958 <__swrite+0x1e>
 801494c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014950:	2302      	movs	r3, #2
 8014952:	2200      	movs	r2, #0
 8014954:	f000 f8ac 	bl	8014ab0 <_lseek_r>
 8014958:	89a3      	ldrh	r3, [r4, #12]
 801495a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801495e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014962:	81a3      	strh	r3, [r4, #12]
 8014964:	4632      	mov	r2, r6
 8014966:	463b      	mov	r3, r7
 8014968:	4628      	mov	r0, r5
 801496a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801496e:	f000 b8e7 	b.w	8014b40 <_write_r>

08014972 <__sseek>:
 8014972:	b510      	push	{r4, lr}
 8014974:	460c      	mov	r4, r1
 8014976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801497a:	f000 f899 	bl	8014ab0 <_lseek_r>
 801497e:	1c43      	adds	r3, r0, #1
 8014980:	89a3      	ldrh	r3, [r4, #12]
 8014982:	bf15      	itete	ne
 8014984:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014986:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801498a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801498e:	81a3      	strheq	r3, [r4, #12]
 8014990:	bf18      	it	ne
 8014992:	81a3      	strhne	r3, [r4, #12]
 8014994:	bd10      	pop	{r4, pc}

08014996 <__sclose>:
 8014996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801499a:	f000 b879 	b.w	8014a90 <_close_r>

0801499e <memcmp>:
 801499e:	b510      	push	{r4, lr}
 80149a0:	3901      	subs	r1, #1
 80149a2:	4402      	add	r2, r0
 80149a4:	4290      	cmp	r0, r2
 80149a6:	d101      	bne.n	80149ac <memcmp+0xe>
 80149a8:	2000      	movs	r0, #0
 80149aa:	e005      	b.n	80149b8 <memcmp+0x1a>
 80149ac:	7803      	ldrb	r3, [r0, #0]
 80149ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80149b2:	42a3      	cmp	r3, r4
 80149b4:	d001      	beq.n	80149ba <memcmp+0x1c>
 80149b6:	1b18      	subs	r0, r3, r4
 80149b8:	bd10      	pop	{r4, pc}
 80149ba:	3001      	adds	r0, #1
 80149bc:	e7f2      	b.n	80149a4 <memcmp+0x6>

080149be <memmove>:
 80149be:	4288      	cmp	r0, r1
 80149c0:	b510      	push	{r4, lr}
 80149c2:	eb01 0402 	add.w	r4, r1, r2
 80149c6:	d902      	bls.n	80149ce <memmove+0x10>
 80149c8:	4284      	cmp	r4, r0
 80149ca:	4623      	mov	r3, r4
 80149cc:	d807      	bhi.n	80149de <memmove+0x20>
 80149ce:	1e43      	subs	r3, r0, #1
 80149d0:	42a1      	cmp	r1, r4
 80149d2:	d008      	beq.n	80149e6 <memmove+0x28>
 80149d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80149d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80149dc:	e7f8      	b.n	80149d0 <memmove+0x12>
 80149de:	4402      	add	r2, r0
 80149e0:	4601      	mov	r1, r0
 80149e2:	428a      	cmp	r2, r1
 80149e4:	d100      	bne.n	80149e8 <memmove+0x2a>
 80149e6:	bd10      	pop	{r4, pc}
 80149e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80149ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80149f0:	e7f7      	b.n	80149e2 <memmove+0x24>

080149f2 <memset>:
 80149f2:	4402      	add	r2, r0
 80149f4:	4603      	mov	r3, r0
 80149f6:	4293      	cmp	r3, r2
 80149f8:	d100      	bne.n	80149fc <memset+0xa>
 80149fa:	4770      	bx	lr
 80149fc:	f803 1b01 	strb.w	r1, [r3], #1
 8014a00:	e7f9      	b.n	80149f6 <memset+0x4>

08014a02 <strncpy>:
 8014a02:	b510      	push	{r4, lr}
 8014a04:	3901      	subs	r1, #1
 8014a06:	4603      	mov	r3, r0
 8014a08:	b132      	cbz	r2, 8014a18 <strncpy+0x16>
 8014a0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014a0e:	f803 4b01 	strb.w	r4, [r3], #1
 8014a12:	3a01      	subs	r2, #1
 8014a14:	2c00      	cmp	r4, #0
 8014a16:	d1f7      	bne.n	8014a08 <strncpy+0x6>
 8014a18:	441a      	add	r2, r3
 8014a1a:	2100      	movs	r1, #0
 8014a1c:	4293      	cmp	r3, r2
 8014a1e:	d100      	bne.n	8014a22 <strncpy+0x20>
 8014a20:	bd10      	pop	{r4, pc}
 8014a22:	f803 1b01 	strb.w	r1, [r3], #1
 8014a26:	e7f9      	b.n	8014a1c <strncpy+0x1a>

08014a28 <_raise_r>:
 8014a28:	291f      	cmp	r1, #31
 8014a2a:	b538      	push	{r3, r4, r5, lr}
 8014a2c:	4605      	mov	r5, r0
 8014a2e:	460c      	mov	r4, r1
 8014a30:	d904      	bls.n	8014a3c <_raise_r+0x14>
 8014a32:	2316      	movs	r3, #22
 8014a34:	6003      	str	r3, [r0, #0]
 8014a36:	f04f 30ff 	mov.w	r0, #4294967295
 8014a3a:	bd38      	pop	{r3, r4, r5, pc}
 8014a3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014a3e:	b112      	cbz	r2, 8014a46 <_raise_r+0x1e>
 8014a40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a44:	b94b      	cbnz	r3, 8014a5a <_raise_r+0x32>
 8014a46:	4628      	mov	r0, r5
 8014a48:	f000 f868 	bl	8014b1c <_getpid_r>
 8014a4c:	4622      	mov	r2, r4
 8014a4e:	4601      	mov	r1, r0
 8014a50:	4628      	mov	r0, r5
 8014a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a56:	f000 b84f 	b.w	8014af8 <_kill_r>
 8014a5a:	2b01      	cmp	r3, #1
 8014a5c:	d00a      	beq.n	8014a74 <_raise_r+0x4c>
 8014a5e:	1c59      	adds	r1, r3, #1
 8014a60:	d103      	bne.n	8014a6a <_raise_r+0x42>
 8014a62:	2316      	movs	r3, #22
 8014a64:	6003      	str	r3, [r0, #0]
 8014a66:	2001      	movs	r0, #1
 8014a68:	e7e7      	b.n	8014a3a <_raise_r+0x12>
 8014a6a:	2100      	movs	r1, #0
 8014a6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014a70:	4620      	mov	r0, r4
 8014a72:	4798      	blx	r3
 8014a74:	2000      	movs	r0, #0
 8014a76:	e7e0      	b.n	8014a3a <_raise_r+0x12>

08014a78 <raise>:
 8014a78:	4b02      	ldr	r3, [pc, #8]	@ (8014a84 <raise+0xc>)
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	6818      	ldr	r0, [r3, #0]
 8014a7e:	f7ff bfd3 	b.w	8014a28 <_raise_r>
 8014a82:	bf00      	nop
 8014a84:	20000090 	.word	0x20000090

08014a88 <_localeconv_r>:
 8014a88:	4800      	ldr	r0, [pc, #0]	@ (8014a8c <_localeconv_r+0x4>)
 8014a8a:	4770      	bx	lr
 8014a8c:	200001d0 	.word	0x200001d0

08014a90 <_close_r>:
 8014a90:	b538      	push	{r3, r4, r5, lr}
 8014a92:	4d06      	ldr	r5, [pc, #24]	@ (8014aac <_close_r+0x1c>)
 8014a94:	2300      	movs	r3, #0
 8014a96:	4604      	mov	r4, r0
 8014a98:	4608      	mov	r0, r1
 8014a9a:	602b      	str	r3, [r5, #0]
 8014a9c:	f7f4 ff56 	bl	800994c <_close>
 8014aa0:	1c43      	adds	r3, r0, #1
 8014aa2:	d102      	bne.n	8014aaa <_close_r+0x1a>
 8014aa4:	682b      	ldr	r3, [r5, #0]
 8014aa6:	b103      	cbz	r3, 8014aaa <_close_r+0x1a>
 8014aa8:	6023      	str	r3, [r4, #0]
 8014aaa:	bd38      	pop	{r3, r4, r5, pc}
 8014aac:	20000af8 	.word	0x20000af8

08014ab0 <_lseek_r>:
 8014ab0:	b538      	push	{r3, r4, r5, lr}
 8014ab2:	4d07      	ldr	r5, [pc, #28]	@ (8014ad0 <_lseek_r+0x20>)
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	4608      	mov	r0, r1
 8014ab8:	4611      	mov	r1, r2
 8014aba:	2200      	movs	r2, #0
 8014abc:	602a      	str	r2, [r5, #0]
 8014abe:	461a      	mov	r2, r3
 8014ac0:	f7f4 ff6b 	bl	800999a <_lseek>
 8014ac4:	1c43      	adds	r3, r0, #1
 8014ac6:	d102      	bne.n	8014ace <_lseek_r+0x1e>
 8014ac8:	682b      	ldr	r3, [r5, #0]
 8014aca:	b103      	cbz	r3, 8014ace <_lseek_r+0x1e>
 8014acc:	6023      	str	r3, [r4, #0]
 8014ace:	bd38      	pop	{r3, r4, r5, pc}
 8014ad0:	20000af8 	.word	0x20000af8

08014ad4 <_read_r>:
 8014ad4:	b538      	push	{r3, r4, r5, lr}
 8014ad6:	4d07      	ldr	r5, [pc, #28]	@ (8014af4 <_read_r+0x20>)
 8014ad8:	4604      	mov	r4, r0
 8014ada:	4608      	mov	r0, r1
 8014adc:	4611      	mov	r1, r2
 8014ade:	2200      	movs	r2, #0
 8014ae0:	602a      	str	r2, [r5, #0]
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	f7f4 fef9 	bl	80098da <_read>
 8014ae8:	1c43      	adds	r3, r0, #1
 8014aea:	d102      	bne.n	8014af2 <_read_r+0x1e>
 8014aec:	682b      	ldr	r3, [r5, #0]
 8014aee:	b103      	cbz	r3, 8014af2 <_read_r+0x1e>
 8014af0:	6023      	str	r3, [r4, #0]
 8014af2:	bd38      	pop	{r3, r4, r5, pc}
 8014af4:	20000af8 	.word	0x20000af8

08014af8 <_kill_r>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	4d07      	ldr	r5, [pc, #28]	@ (8014b18 <_kill_r+0x20>)
 8014afc:	2300      	movs	r3, #0
 8014afe:	4604      	mov	r4, r0
 8014b00:	4608      	mov	r0, r1
 8014b02:	4611      	mov	r1, r2
 8014b04:	602b      	str	r3, [r5, #0]
 8014b06:	f7f4 fecd 	bl	80098a4 <_kill>
 8014b0a:	1c43      	adds	r3, r0, #1
 8014b0c:	d102      	bne.n	8014b14 <_kill_r+0x1c>
 8014b0e:	682b      	ldr	r3, [r5, #0]
 8014b10:	b103      	cbz	r3, 8014b14 <_kill_r+0x1c>
 8014b12:	6023      	str	r3, [r4, #0]
 8014b14:	bd38      	pop	{r3, r4, r5, pc}
 8014b16:	bf00      	nop
 8014b18:	20000af8 	.word	0x20000af8

08014b1c <_getpid_r>:
 8014b1c:	f7f4 beba 	b.w	8009894 <_getpid>

08014b20 <_sbrk_r>:
 8014b20:	b538      	push	{r3, r4, r5, lr}
 8014b22:	4d06      	ldr	r5, [pc, #24]	@ (8014b3c <_sbrk_r+0x1c>)
 8014b24:	2300      	movs	r3, #0
 8014b26:	4604      	mov	r4, r0
 8014b28:	4608      	mov	r0, r1
 8014b2a:	602b      	str	r3, [r5, #0]
 8014b2c:	f7f4 ff42 	bl	80099b4 <_sbrk>
 8014b30:	1c43      	adds	r3, r0, #1
 8014b32:	d102      	bne.n	8014b3a <_sbrk_r+0x1a>
 8014b34:	682b      	ldr	r3, [r5, #0]
 8014b36:	b103      	cbz	r3, 8014b3a <_sbrk_r+0x1a>
 8014b38:	6023      	str	r3, [r4, #0]
 8014b3a:	bd38      	pop	{r3, r4, r5, pc}
 8014b3c:	20000af8 	.word	0x20000af8

08014b40 <_write_r>:
 8014b40:	b538      	push	{r3, r4, r5, lr}
 8014b42:	4d07      	ldr	r5, [pc, #28]	@ (8014b60 <_write_r+0x20>)
 8014b44:	4604      	mov	r4, r0
 8014b46:	4608      	mov	r0, r1
 8014b48:	4611      	mov	r1, r2
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	602a      	str	r2, [r5, #0]
 8014b4e:	461a      	mov	r2, r3
 8014b50:	f7f4 fee0 	bl	8009914 <_write>
 8014b54:	1c43      	adds	r3, r0, #1
 8014b56:	d102      	bne.n	8014b5e <_write_r+0x1e>
 8014b58:	682b      	ldr	r3, [r5, #0]
 8014b5a:	b103      	cbz	r3, 8014b5e <_write_r+0x1e>
 8014b5c:	6023      	str	r3, [r4, #0]
 8014b5e:	bd38      	pop	{r3, r4, r5, pc}
 8014b60:	20000af8 	.word	0x20000af8

08014b64 <__errno>:
 8014b64:	4b01      	ldr	r3, [pc, #4]	@ (8014b6c <__errno+0x8>)
 8014b66:	6818      	ldr	r0, [r3, #0]
 8014b68:	4770      	bx	lr
 8014b6a:	bf00      	nop
 8014b6c:	20000090 	.word	0x20000090

08014b70 <__libc_init_array>:
 8014b70:	b570      	push	{r4, r5, r6, lr}
 8014b72:	4d0d      	ldr	r5, [pc, #52]	@ (8014ba8 <__libc_init_array+0x38>)
 8014b74:	4c0d      	ldr	r4, [pc, #52]	@ (8014bac <__libc_init_array+0x3c>)
 8014b76:	1b64      	subs	r4, r4, r5
 8014b78:	10a4      	asrs	r4, r4, #2
 8014b7a:	2600      	movs	r6, #0
 8014b7c:	42a6      	cmp	r6, r4
 8014b7e:	d109      	bne.n	8014b94 <__libc_init_array+0x24>
 8014b80:	4d0b      	ldr	r5, [pc, #44]	@ (8014bb0 <__libc_init_array+0x40>)
 8014b82:	4c0c      	ldr	r4, [pc, #48]	@ (8014bb4 <__libc_init_array+0x44>)
 8014b84:	f003 fa1a 	bl	8017fbc <_init>
 8014b88:	1b64      	subs	r4, r4, r5
 8014b8a:	10a4      	asrs	r4, r4, #2
 8014b8c:	2600      	movs	r6, #0
 8014b8e:	42a6      	cmp	r6, r4
 8014b90:	d105      	bne.n	8014b9e <__libc_init_array+0x2e>
 8014b92:	bd70      	pop	{r4, r5, r6, pc}
 8014b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b98:	4798      	blx	r3
 8014b9a:	3601      	adds	r6, #1
 8014b9c:	e7ee      	b.n	8014b7c <__libc_init_array+0xc>
 8014b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ba2:	4798      	blx	r3
 8014ba4:	3601      	adds	r6, #1
 8014ba6:	e7f2      	b.n	8014b8e <__libc_init_array+0x1e>
 8014ba8:	08019594 	.word	0x08019594
 8014bac:	08019594 	.word	0x08019594
 8014bb0:	08019594 	.word	0x08019594
 8014bb4:	080195a4 	.word	0x080195a4

08014bb8 <__retarget_lock_init_recursive>:
 8014bb8:	4770      	bx	lr

08014bba <__retarget_lock_acquire_recursive>:
 8014bba:	4770      	bx	lr

08014bbc <__retarget_lock_release_recursive>:
 8014bbc:	4770      	bx	lr

08014bbe <memcpy>:
 8014bbe:	440a      	add	r2, r1
 8014bc0:	4291      	cmp	r1, r2
 8014bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bc6:	d100      	bne.n	8014bca <memcpy+0xc>
 8014bc8:	4770      	bx	lr
 8014bca:	b510      	push	{r4, lr}
 8014bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014bd4:	4291      	cmp	r1, r2
 8014bd6:	d1f9      	bne.n	8014bcc <memcpy+0xe>
 8014bd8:	bd10      	pop	{r4, pc}
	...

08014bdc <nanf>:
 8014bdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014be4 <nanf+0x8>
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop
 8014be4:	7fc00000 	.word	0x7fc00000

08014be8 <quorem>:
 8014be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bec:	6903      	ldr	r3, [r0, #16]
 8014bee:	690c      	ldr	r4, [r1, #16]
 8014bf0:	42a3      	cmp	r3, r4
 8014bf2:	4607      	mov	r7, r0
 8014bf4:	db7e      	blt.n	8014cf4 <quorem+0x10c>
 8014bf6:	3c01      	subs	r4, #1
 8014bf8:	f101 0814 	add.w	r8, r1, #20
 8014bfc:	00a3      	lsls	r3, r4, #2
 8014bfe:	f100 0514 	add.w	r5, r0, #20
 8014c02:	9300      	str	r3, [sp, #0]
 8014c04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c08:	9301      	str	r3, [sp, #4]
 8014c0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c12:	3301      	adds	r3, #1
 8014c14:	429a      	cmp	r2, r3
 8014c16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c1e:	d32e      	bcc.n	8014c7e <quorem+0x96>
 8014c20:	f04f 0a00 	mov.w	sl, #0
 8014c24:	46c4      	mov	ip, r8
 8014c26:	46ae      	mov	lr, r5
 8014c28:	46d3      	mov	fp, sl
 8014c2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014c2e:	b298      	uxth	r0, r3
 8014c30:	fb06 a000 	mla	r0, r6, r0, sl
 8014c34:	0c02      	lsrs	r2, r0, #16
 8014c36:	0c1b      	lsrs	r3, r3, #16
 8014c38:	fb06 2303 	mla	r3, r6, r3, r2
 8014c3c:	f8de 2000 	ldr.w	r2, [lr]
 8014c40:	b280      	uxth	r0, r0
 8014c42:	b292      	uxth	r2, r2
 8014c44:	1a12      	subs	r2, r2, r0
 8014c46:	445a      	add	r2, fp
 8014c48:	f8de 0000 	ldr.w	r0, [lr]
 8014c4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014c56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014c5a:	b292      	uxth	r2, r2
 8014c5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014c60:	45e1      	cmp	r9, ip
 8014c62:	f84e 2b04 	str.w	r2, [lr], #4
 8014c66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014c6a:	d2de      	bcs.n	8014c2a <quorem+0x42>
 8014c6c:	9b00      	ldr	r3, [sp, #0]
 8014c6e:	58eb      	ldr	r3, [r5, r3]
 8014c70:	b92b      	cbnz	r3, 8014c7e <quorem+0x96>
 8014c72:	9b01      	ldr	r3, [sp, #4]
 8014c74:	3b04      	subs	r3, #4
 8014c76:	429d      	cmp	r5, r3
 8014c78:	461a      	mov	r2, r3
 8014c7a:	d32f      	bcc.n	8014cdc <quorem+0xf4>
 8014c7c:	613c      	str	r4, [r7, #16]
 8014c7e:	4638      	mov	r0, r7
 8014c80:	f001 f90c 	bl	8015e9c <__mcmp>
 8014c84:	2800      	cmp	r0, #0
 8014c86:	db25      	blt.n	8014cd4 <quorem+0xec>
 8014c88:	4629      	mov	r1, r5
 8014c8a:	2000      	movs	r0, #0
 8014c8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014c90:	f8d1 c000 	ldr.w	ip, [r1]
 8014c94:	fa1f fe82 	uxth.w	lr, r2
 8014c98:	fa1f f38c 	uxth.w	r3, ip
 8014c9c:	eba3 030e 	sub.w	r3, r3, lr
 8014ca0:	4403      	add	r3, r0
 8014ca2:	0c12      	lsrs	r2, r2, #16
 8014ca4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014ca8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014cac:	b29b      	uxth	r3, r3
 8014cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cb2:	45c1      	cmp	r9, r8
 8014cb4:	f841 3b04 	str.w	r3, [r1], #4
 8014cb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014cbc:	d2e6      	bcs.n	8014c8c <quorem+0xa4>
 8014cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014cc6:	b922      	cbnz	r2, 8014cd2 <quorem+0xea>
 8014cc8:	3b04      	subs	r3, #4
 8014cca:	429d      	cmp	r5, r3
 8014ccc:	461a      	mov	r2, r3
 8014cce:	d30b      	bcc.n	8014ce8 <quorem+0x100>
 8014cd0:	613c      	str	r4, [r7, #16]
 8014cd2:	3601      	adds	r6, #1
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	b003      	add	sp, #12
 8014cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cdc:	6812      	ldr	r2, [r2, #0]
 8014cde:	3b04      	subs	r3, #4
 8014ce0:	2a00      	cmp	r2, #0
 8014ce2:	d1cb      	bne.n	8014c7c <quorem+0x94>
 8014ce4:	3c01      	subs	r4, #1
 8014ce6:	e7c6      	b.n	8014c76 <quorem+0x8e>
 8014ce8:	6812      	ldr	r2, [r2, #0]
 8014cea:	3b04      	subs	r3, #4
 8014cec:	2a00      	cmp	r2, #0
 8014cee:	d1ef      	bne.n	8014cd0 <quorem+0xe8>
 8014cf0:	3c01      	subs	r4, #1
 8014cf2:	e7ea      	b.n	8014cca <quorem+0xe2>
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	e7ee      	b.n	8014cd6 <quorem+0xee>

08014cf8 <_dtoa_r>:
 8014cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cfc:	69c7      	ldr	r7, [r0, #28]
 8014cfe:	b099      	sub	sp, #100	@ 0x64
 8014d00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014d04:	ec55 4b10 	vmov	r4, r5, d0
 8014d08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014d0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8014d0c:	4683      	mov	fp, r0
 8014d0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8014d10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014d12:	b97f      	cbnz	r7, 8014d34 <_dtoa_r+0x3c>
 8014d14:	2010      	movs	r0, #16
 8014d16:	f7fe fde1 	bl	80138dc <malloc>
 8014d1a:	4602      	mov	r2, r0
 8014d1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8014d20:	b920      	cbnz	r0, 8014d2c <_dtoa_r+0x34>
 8014d22:	4ba7      	ldr	r3, [pc, #668]	@ (8014fc0 <_dtoa_r+0x2c8>)
 8014d24:	21ef      	movs	r1, #239	@ 0xef
 8014d26:	48a7      	ldr	r0, [pc, #668]	@ (8014fc4 <_dtoa_r+0x2cc>)
 8014d28:	f7fe fda8 	bl	801387c <__assert_func>
 8014d2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014d30:	6007      	str	r7, [r0, #0]
 8014d32:	60c7      	str	r7, [r0, #12]
 8014d34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014d38:	6819      	ldr	r1, [r3, #0]
 8014d3a:	b159      	cbz	r1, 8014d54 <_dtoa_r+0x5c>
 8014d3c:	685a      	ldr	r2, [r3, #4]
 8014d3e:	604a      	str	r2, [r1, #4]
 8014d40:	2301      	movs	r3, #1
 8014d42:	4093      	lsls	r3, r2
 8014d44:	608b      	str	r3, [r1, #8]
 8014d46:	4658      	mov	r0, fp
 8014d48:	f000 fe24 	bl	8015994 <_Bfree>
 8014d4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014d50:	2200      	movs	r2, #0
 8014d52:	601a      	str	r2, [r3, #0]
 8014d54:	1e2b      	subs	r3, r5, #0
 8014d56:	bfb9      	ittee	lt
 8014d58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014d5c:	9303      	strlt	r3, [sp, #12]
 8014d5e:	2300      	movge	r3, #0
 8014d60:	6033      	strge	r3, [r6, #0]
 8014d62:	9f03      	ldr	r7, [sp, #12]
 8014d64:	4b98      	ldr	r3, [pc, #608]	@ (8014fc8 <_dtoa_r+0x2d0>)
 8014d66:	bfbc      	itt	lt
 8014d68:	2201      	movlt	r2, #1
 8014d6a:	6032      	strlt	r2, [r6, #0]
 8014d6c:	43bb      	bics	r3, r7
 8014d6e:	d112      	bne.n	8014d96 <_dtoa_r+0x9e>
 8014d70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014d72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014d76:	6013      	str	r3, [r2, #0]
 8014d78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014d7c:	4323      	orrs	r3, r4
 8014d7e:	f000 854d 	beq.w	801581c <_dtoa_r+0xb24>
 8014d82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014d84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014fdc <_dtoa_r+0x2e4>
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	f000 854f 	beq.w	801582c <_dtoa_r+0xb34>
 8014d8e:	f10a 0303 	add.w	r3, sl, #3
 8014d92:	f000 bd49 	b.w	8015828 <_dtoa_r+0xb30>
 8014d96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	ec51 0b17 	vmov	r0, r1, d7
 8014da0:	2300      	movs	r3, #0
 8014da2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014da6:	f7eb feb7 	bl	8000b18 <__aeabi_dcmpeq>
 8014daa:	4680      	mov	r8, r0
 8014dac:	b158      	cbz	r0, 8014dc6 <_dtoa_r+0xce>
 8014dae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014db0:	2301      	movs	r3, #1
 8014db2:	6013      	str	r3, [r2, #0]
 8014db4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014db6:	b113      	cbz	r3, 8014dbe <_dtoa_r+0xc6>
 8014db8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014dba:	4b84      	ldr	r3, [pc, #528]	@ (8014fcc <_dtoa_r+0x2d4>)
 8014dbc:	6013      	str	r3, [r2, #0]
 8014dbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014fe0 <_dtoa_r+0x2e8>
 8014dc2:	f000 bd33 	b.w	801582c <_dtoa_r+0xb34>
 8014dc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014dca:	aa16      	add	r2, sp, #88	@ 0x58
 8014dcc:	a917      	add	r1, sp, #92	@ 0x5c
 8014dce:	4658      	mov	r0, fp
 8014dd0:	f001 f984 	bl	80160dc <__d2b>
 8014dd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014dd8:	4681      	mov	r9, r0
 8014dda:	2e00      	cmp	r6, #0
 8014ddc:	d077      	beq.n	8014ece <_dtoa_r+0x1d6>
 8014dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014de0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014dec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014df0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014df4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014df8:	4619      	mov	r1, r3
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	4b74      	ldr	r3, [pc, #464]	@ (8014fd0 <_dtoa_r+0x2d8>)
 8014dfe:	f7eb fa6b 	bl	80002d8 <__aeabi_dsub>
 8014e02:	a369      	add	r3, pc, #420	@ (adr r3, 8014fa8 <_dtoa_r+0x2b0>)
 8014e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e08:	f7eb fc1e 	bl	8000648 <__aeabi_dmul>
 8014e0c:	a368      	add	r3, pc, #416	@ (adr r3, 8014fb0 <_dtoa_r+0x2b8>)
 8014e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e12:	f7eb fa63 	bl	80002dc <__adddf3>
 8014e16:	4604      	mov	r4, r0
 8014e18:	4630      	mov	r0, r6
 8014e1a:	460d      	mov	r5, r1
 8014e1c:	f7eb fbaa 	bl	8000574 <__aeabi_i2d>
 8014e20:	a365      	add	r3, pc, #404	@ (adr r3, 8014fb8 <_dtoa_r+0x2c0>)
 8014e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e26:	f7eb fc0f 	bl	8000648 <__aeabi_dmul>
 8014e2a:	4602      	mov	r2, r0
 8014e2c:	460b      	mov	r3, r1
 8014e2e:	4620      	mov	r0, r4
 8014e30:	4629      	mov	r1, r5
 8014e32:	f7eb fa53 	bl	80002dc <__adddf3>
 8014e36:	4604      	mov	r4, r0
 8014e38:	460d      	mov	r5, r1
 8014e3a:	f7eb feb5 	bl	8000ba8 <__aeabi_d2iz>
 8014e3e:	2200      	movs	r2, #0
 8014e40:	4607      	mov	r7, r0
 8014e42:	2300      	movs	r3, #0
 8014e44:	4620      	mov	r0, r4
 8014e46:	4629      	mov	r1, r5
 8014e48:	f7eb fe70 	bl	8000b2c <__aeabi_dcmplt>
 8014e4c:	b140      	cbz	r0, 8014e60 <_dtoa_r+0x168>
 8014e4e:	4638      	mov	r0, r7
 8014e50:	f7eb fb90 	bl	8000574 <__aeabi_i2d>
 8014e54:	4622      	mov	r2, r4
 8014e56:	462b      	mov	r3, r5
 8014e58:	f7eb fe5e 	bl	8000b18 <__aeabi_dcmpeq>
 8014e5c:	b900      	cbnz	r0, 8014e60 <_dtoa_r+0x168>
 8014e5e:	3f01      	subs	r7, #1
 8014e60:	2f16      	cmp	r7, #22
 8014e62:	d851      	bhi.n	8014f08 <_dtoa_r+0x210>
 8014e64:	4b5b      	ldr	r3, [pc, #364]	@ (8014fd4 <_dtoa_r+0x2dc>)
 8014e66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e72:	f7eb fe5b 	bl	8000b2c <__aeabi_dcmplt>
 8014e76:	2800      	cmp	r0, #0
 8014e78:	d048      	beq.n	8014f0c <_dtoa_r+0x214>
 8014e7a:	3f01      	subs	r7, #1
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8014e80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014e82:	1b9b      	subs	r3, r3, r6
 8014e84:	1e5a      	subs	r2, r3, #1
 8014e86:	bf44      	itt	mi
 8014e88:	f1c3 0801 	rsbmi	r8, r3, #1
 8014e8c:	2300      	movmi	r3, #0
 8014e8e:	9208      	str	r2, [sp, #32]
 8014e90:	bf54      	ite	pl
 8014e92:	f04f 0800 	movpl.w	r8, #0
 8014e96:	9308      	strmi	r3, [sp, #32]
 8014e98:	2f00      	cmp	r7, #0
 8014e9a:	db39      	blt.n	8014f10 <_dtoa_r+0x218>
 8014e9c:	9b08      	ldr	r3, [sp, #32]
 8014e9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014ea0:	443b      	add	r3, r7
 8014ea2:	9308      	str	r3, [sp, #32]
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014eaa:	2b09      	cmp	r3, #9
 8014eac:	d864      	bhi.n	8014f78 <_dtoa_r+0x280>
 8014eae:	2b05      	cmp	r3, #5
 8014eb0:	bfc4      	itt	gt
 8014eb2:	3b04      	subgt	r3, #4
 8014eb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014eb8:	f1a3 0302 	sub.w	r3, r3, #2
 8014ebc:	bfcc      	ite	gt
 8014ebe:	2400      	movgt	r4, #0
 8014ec0:	2401      	movle	r4, #1
 8014ec2:	2b03      	cmp	r3, #3
 8014ec4:	d863      	bhi.n	8014f8e <_dtoa_r+0x296>
 8014ec6:	e8df f003 	tbb	[pc, r3]
 8014eca:	372a      	.short	0x372a
 8014ecc:	5535      	.short	0x5535
 8014ece:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014ed2:	441e      	add	r6, r3
 8014ed4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014ed8:	2b20      	cmp	r3, #32
 8014eda:	bfc1      	itttt	gt
 8014edc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014ee0:	409f      	lslgt	r7, r3
 8014ee2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014ee6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014eea:	bfd6      	itet	le
 8014eec:	f1c3 0320 	rsble	r3, r3, #32
 8014ef0:	ea47 0003 	orrgt.w	r0, r7, r3
 8014ef4:	fa04 f003 	lslle.w	r0, r4, r3
 8014ef8:	f7eb fb2c 	bl	8000554 <__aeabi_ui2d>
 8014efc:	2201      	movs	r2, #1
 8014efe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014f02:	3e01      	subs	r6, #1
 8014f04:	9214      	str	r2, [sp, #80]	@ 0x50
 8014f06:	e777      	b.n	8014df8 <_dtoa_r+0x100>
 8014f08:	2301      	movs	r3, #1
 8014f0a:	e7b8      	b.n	8014e7e <_dtoa_r+0x186>
 8014f0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8014f0e:	e7b7      	b.n	8014e80 <_dtoa_r+0x188>
 8014f10:	427b      	negs	r3, r7
 8014f12:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f14:	2300      	movs	r3, #0
 8014f16:	eba8 0807 	sub.w	r8, r8, r7
 8014f1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014f1c:	e7c4      	b.n	8014ea8 <_dtoa_r+0x1b0>
 8014f1e:	2300      	movs	r3, #0
 8014f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	dc35      	bgt.n	8014f94 <_dtoa_r+0x29c>
 8014f28:	2301      	movs	r3, #1
 8014f2a:	9300      	str	r3, [sp, #0]
 8014f2c:	9307      	str	r3, [sp, #28]
 8014f2e:	461a      	mov	r2, r3
 8014f30:	920e      	str	r2, [sp, #56]	@ 0x38
 8014f32:	e00b      	b.n	8014f4c <_dtoa_r+0x254>
 8014f34:	2301      	movs	r3, #1
 8014f36:	e7f3      	b.n	8014f20 <_dtoa_r+0x228>
 8014f38:	2300      	movs	r3, #0
 8014f3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f3e:	18fb      	adds	r3, r7, r3
 8014f40:	9300      	str	r3, [sp, #0]
 8014f42:	3301      	adds	r3, #1
 8014f44:	2b01      	cmp	r3, #1
 8014f46:	9307      	str	r3, [sp, #28]
 8014f48:	bfb8      	it	lt
 8014f4a:	2301      	movlt	r3, #1
 8014f4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014f50:	2100      	movs	r1, #0
 8014f52:	2204      	movs	r2, #4
 8014f54:	f102 0514 	add.w	r5, r2, #20
 8014f58:	429d      	cmp	r5, r3
 8014f5a:	d91f      	bls.n	8014f9c <_dtoa_r+0x2a4>
 8014f5c:	6041      	str	r1, [r0, #4]
 8014f5e:	4658      	mov	r0, fp
 8014f60:	f000 fcd8 	bl	8015914 <_Balloc>
 8014f64:	4682      	mov	sl, r0
 8014f66:	2800      	cmp	r0, #0
 8014f68:	d13c      	bne.n	8014fe4 <_dtoa_r+0x2ec>
 8014f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8014fd8 <_dtoa_r+0x2e0>)
 8014f6c:	4602      	mov	r2, r0
 8014f6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014f72:	e6d8      	b.n	8014d26 <_dtoa_r+0x2e>
 8014f74:	2301      	movs	r3, #1
 8014f76:	e7e0      	b.n	8014f3a <_dtoa_r+0x242>
 8014f78:	2401      	movs	r4, #1
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014f80:	f04f 33ff 	mov.w	r3, #4294967295
 8014f84:	9300      	str	r3, [sp, #0]
 8014f86:	9307      	str	r3, [sp, #28]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	2312      	movs	r3, #18
 8014f8c:	e7d0      	b.n	8014f30 <_dtoa_r+0x238>
 8014f8e:	2301      	movs	r3, #1
 8014f90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f92:	e7f5      	b.n	8014f80 <_dtoa_r+0x288>
 8014f94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f96:	9300      	str	r3, [sp, #0]
 8014f98:	9307      	str	r3, [sp, #28]
 8014f9a:	e7d7      	b.n	8014f4c <_dtoa_r+0x254>
 8014f9c:	3101      	adds	r1, #1
 8014f9e:	0052      	lsls	r2, r2, #1
 8014fa0:	e7d8      	b.n	8014f54 <_dtoa_r+0x25c>
 8014fa2:	bf00      	nop
 8014fa4:	f3af 8000 	nop.w
 8014fa8:	636f4361 	.word	0x636f4361
 8014fac:	3fd287a7 	.word	0x3fd287a7
 8014fb0:	8b60c8b3 	.word	0x8b60c8b3
 8014fb4:	3fc68a28 	.word	0x3fc68a28
 8014fb8:	509f79fb 	.word	0x509f79fb
 8014fbc:	3fd34413 	.word	0x3fd34413
 8014fc0:	080191e2 	.word	0x080191e2
 8014fc4:	080191f9 	.word	0x080191f9
 8014fc8:	7ff00000 	.word	0x7ff00000
 8014fcc:	080191ad 	.word	0x080191ad
 8014fd0:	3ff80000 	.word	0x3ff80000
 8014fd4:	080192f0 	.word	0x080192f0
 8014fd8:	08019251 	.word	0x08019251
 8014fdc:	080191de 	.word	0x080191de
 8014fe0:	080191ac 	.word	0x080191ac
 8014fe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014fe8:	6018      	str	r0, [r3, #0]
 8014fea:	9b07      	ldr	r3, [sp, #28]
 8014fec:	2b0e      	cmp	r3, #14
 8014fee:	f200 80a4 	bhi.w	801513a <_dtoa_r+0x442>
 8014ff2:	2c00      	cmp	r4, #0
 8014ff4:	f000 80a1 	beq.w	801513a <_dtoa_r+0x442>
 8014ff8:	2f00      	cmp	r7, #0
 8014ffa:	dd33      	ble.n	8015064 <_dtoa_r+0x36c>
 8014ffc:	4bad      	ldr	r3, [pc, #692]	@ (80152b4 <_dtoa_r+0x5bc>)
 8014ffe:	f007 020f 	and.w	r2, r7, #15
 8015002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015006:	ed93 7b00 	vldr	d7, [r3]
 801500a:	05f8      	lsls	r0, r7, #23
 801500c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015010:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015014:	d516      	bpl.n	8015044 <_dtoa_r+0x34c>
 8015016:	4ba8      	ldr	r3, [pc, #672]	@ (80152b8 <_dtoa_r+0x5c0>)
 8015018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801501c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015020:	f7eb fc3c 	bl	800089c <__aeabi_ddiv>
 8015024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015028:	f004 040f 	and.w	r4, r4, #15
 801502c:	2603      	movs	r6, #3
 801502e:	4da2      	ldr	r5, [pc, #648]	@ (80152b8 <_dtoa_r+0x5c0>)
 8015030:	b954      	cbnz	r4, 8015048 <_dtoa_r+0x350>
 8015032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801503a:	f7eb fc2f 	bl	800089c <__aeabi_ddiv>
 801503e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015042:	e028      	b.n	8015096 <_dtoa_r+0x39e>
 8015044:	2602      	movs	r6, #2
 8015046:	e7f2      	b.n	801502e <_dtoa_r+0x336>
 8015048:	07e1      	lsls	r1, r4, #31
 801504a:	d508      	bpl.n	801505e <_dtoa_r+0x366>
 801504c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015050:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015054:	f7eb faf8 	bl	8000648 <__aeabi_dmul>
 8015058:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801505c:	3601      	adds	r6, #1
 801505e:	1064      	asrs	r4, r4, #1
 8015060:	3508      	adds	r5, #8
 8015062:	e7e5      	b.n	8015030 <_dtoa_r+0x338>
 8015064:	f000 80d2 	beq.w	801520c <_dtoa_r+0x514>
 8015068:	427c      	negs	r4, r7
 801506a:	4b92      	ldr	r3, [pc, #584]	@ (80152b4 <_dtoa_r+0x5bc>)
 801506c:	4d92      	ldr	r5, [pc, #584]	@ (80152b8 <_dtoa_r+0x5c0>)
 801506e:	f004 020f 	and.w	r2, r4, #15
 8015072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801507e:	f7eb fae3 	bl	8000648 <__aeabi_dmul>
 8015082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015086:	1124      	asrs	r4, r4, #4
 8015088:	2300      	movs	r3, #0
 801508a:	2602      	movs	r6, #2
 801508c:	2c00      	cmp	r4, #0
 801508e:	f040 80b2 	bne.w	80151f6 <_dtoa_r+0x4fe>
 8015092:	2b00      	cmp	r3, #0
 8015094:	d1d3      	bne.n	801503e <_dtoa_r+0x346>
 8015096:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015098:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801509c:	2b00      	cmp	r3, #0
 801509e:	f000 80b7 	beq.w	8015210 <_dtoa_r+0x518>
 80150a2:	4b86      	ldr	r3, [pc, #536]	@ (80152bc <_dtoa_r+0x5c4>)
 80150a4:	2200      	movs	r2, #0
 80150a6:	4620      	mov	r0, r4
 80150a8:	4629      	mov	r1, r5
 80150aa:	f7eb fd3f 	bl	8000b2c <__aeabi_dcmplt>
 80150ae:	2800      	cmp	r0, #0
 80150b0:	f000 80ae 	beq.w	8015210 <_dtoa_r+0x518>
 80150b4:	9b07      	ldr	r3, [sp, #28]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	f000 80aa 	beq.w	8015210 <_dtoa_r+0x518>
 80150bc:	9b00      	ldr	r3, [sp, #0]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	dd37      	ble.n	8015132 <_dtoa_r+0x43a>
 80150c2:	1e7b      	subs	r3, r7, #1
 80150c4:	9304      	str	r3, [sp, #16]
 80150c6:	4620      	mov	r0, r4
 80150c8:	4b7d      	ldr	r3, [pc, #500]	@ (80152c0 <_dtoa_r+0x5c8>)
 80150ca:	2200      	movs	r2, #0
 80150cc:	4629      	mov	r1, r5
 80150ce:	f7eb fabb 	bl	8000648 <__aeabi_dmul>
 80150d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150d6:	9c00      	ldr	r4, [sp, #0]
 80150d8:	3601      	adds	r6, #1
 80150da:	4630      	mov	r0, r6
 80150dc:	f7eb fa4a 	bl	8000574 <__aeabi_i2d>
 80150e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150e4:	f7eb fab0 	bl	8000648 <__aeabi_dmul>
 80150e8:	4b76      	ldr	r3, [pc, #472]	@ (80152c4 <_dtoa_r+0x5cc>)
 80150ea:	2200      	movs	r2, #0
 80150ec:	f7eb f8f6 	bl	80002dc <__adddf3>
 80150f0:	4605      	mov	r5, r0
 80150f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80150f6:	2c00      	cmp	r4, #0
 80150f8:	f040 808d 	bne.w	8015216 <_dtoa_r+0x51e>
 80150fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015100:	4b71      	ldr	r3, [pc, #452]	@ (80152c8 <_dtoa_r+0x5d0>)
 8015102:	2200      	movs	r2, #0
 8015104:	f7eb f8e8 	bl	80002d8 <__aeabi_dsub>
 8015108:	4602      	mov	r2, r0
 801510a:	460b      	mov	r3, r1
 801510c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015110:	462a      	mov	r2, r5
 8015112:	4633      	mov	r3, r6
 8015114:	f7eb fd28 	bl	8000b68 <__aeabi_dcmpgt>
 8015118:	2800      	cmp	r0, #0
 801511a:	f040 828b 	bne.w	8015634 <_dtoa_r+0x93c>
 801511e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015122:	462a      	mov	r2, r5
 8015124:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015128:	f7eb fd00 	bl	8000b2c <__aeabi_dcmplt>
 801512c:	2800      	cmp	r0, #0
 801512e:	f040 8128 	bne.w	8015382 <_dtoa_r+0x68a>
 8015132:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015136:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801513a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801513c:	2b00      	cmp	r3, #0
 801513e:	f2c0 815a 	blt.w	80153f6 <_dtoa_r+0x6fe>
 8015142:	2f0e      	cmp	r7, #14
 8015144:	f300 8157 	bgt.w	80153f6 <_dtoa_r+0x6fe>
 8015148:	4b5a      	ldr	r3, [pc, #360]	@ (80152b4 <_dtoa_r+0x5bc>)
 801514a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801514e:	ed93 7b00 	vldr	d7, [r3]
 8015152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015154:	2b00      	cmp	r3, #0
 8015156:	ed8d 7b00 	vstr	d7, [sp]
 801515a:	da03      	bge.n	8015164 <_dtoa_r+0x46c>
 801515c:	9b07      	ldr	r3, [sp, #28]
 801515e:	2b00      	cmp	r3, #0
 8015160:	f340 8101 	ble.w	8015366 <_dtoa_r+0x66e>
 8015164:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015168:	4656      	mov	r6, sl
 801516a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801516e:	4620      	mov	r0, r4
 8015170:	4629      	mov	r1, r5
 8015172:	f7eb fb93 	bl	800089c <__aeabi_ddiv>
 8015176:	f7eb fd17 	bl	8000ba8 <__aeabi_d2iz>
 801517a:	4680      	mov	r8, r0
 801517c:	f7eb f9fa 	bl	8000574 <__aeabi_i2d>
 8015180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015184:	f7eb fa60 	bl	8000648 <__aeabi_dmul>
 8015188:	4602      	mov	r2, r0
 801518a:	460b      	mov	r3, r1
 801518c:	4620      	mov	r0, r4
 801518e:	4629      	mov	r1, r5
 8015190:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015194:	f7eb f8a0 	bl	80002d8 <__aeabi_dsub>
 8015198:	f806 4b01 	strb.w	r4, [r6], #1
 801519c:	9d07      	ldr	r5, [sp, #28]
 801519e:	eba6 040a 	sub.w	r4, r6, sl
 80151a2:	42a5      	cmp	r5, r4
 80151a4:	4602      	mov	r2, r0
 80151a6:	460b      	mov	r3, r1
 80151a8:	f040 8117 	bne.w	80153da <_dtoa_r+0x6e2>
 80151ac:	f7eb f896 	bl	80002dc <__adddf3>
 80151b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151b4:	4604      	mov	r4, r0
 80151b6:	460d      	mov	r5, r1
 80151b8:	f7eb fcd6 	bl	8000b68 <__aeabi_dcmpgt>
 80151bc:	2800      	cmp	r0, #0
 80151be:	f040 80f9 	bne.w	80153b4 <_dtoa_r+0x6bc>
 80151c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151c6:	4620      	mov	r0, r4
 80151c8:	4629      	mov	r1, r5
 80151ca:	f7eb fca5 	bl	8000b18 <__aeabi_dcmpeq>
 80151ce:	b118      	cbz	r0, 80151d8 <_dtoa_r+0x4e0>
 80151d0:	f018 0f01 	tst.w	r8, #1
 80151d4:	f040 80ee 	bne.w	80153b4 <_dtoa_r+0x6bc>
 80151d8:	4649      	mov	r1, r9
 80151da:	4658      	mov	r0, fp
 80151dc:	f000 fbda 	bl	8015994 <_Bfree>
 80151e0:	2300      	movs	r3, #0
 80151e2:	7033      	strb	r3, [r6, #0]
 80151e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80151e6:	3701      	adds	r7, #1
 80151e8:	601f      	str	r7, [r3, #0]
 80151ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	f000 831d 	beq.w	801582c <_dtoa_r+0xb34>
 80151f2:	601e      	str	r6, [r3, #0]
 80151f4:	e31a      	b.n	801582c <_dtoa_r+0xb34>
 80151f6:	07e2      	lsls	r2, r4, #31
 80151f8:	d505      	bpl.n	8015206 <_dtoa_r+0x50e>
 80151fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151fe:	f7eb fa23 	bl	8000648 <__aeabi_dmul>
 8015202:	3601      	adds	r6, #1
 8015204:	2301      	movs	r3, #1
 8015206:	1064      	asrs	r4, r4, #1
 8015208:	3508      	adds	r5, #8
 801520a:	e73f      	b.n	801508c <_dtoa_r+0x394>
 801520c:	2602      	movs	r6, #2
 801520e:	e742      	b.n	8015096 <_dtoa_r+0x39e>
 8015210:	9c07      	ldr	r4, [sp, #28]
 8015212:	9704      	str	r7, [sp, #16]
 8015214:	e761      	b.n	80150da <_dtoa_r+0x3e2>
 8015216:	4b27      	ldr	r3, [pc, #156]	@ (80152b4 <_dtoa_r+0x5bc>)
 8015218:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801521a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801521e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015222:	4454      	add	r4, sl
 8015224:	2900      	cmp	r1, #0
 8015226:	d053      	beq.n	80152d0 <_dtoa_r+0x5d8>
 8015228:	4928      	ldr	r1, [pc, #160]	@ (80152cc <_dtoa_r+0x5d4>)
 801522a:	2000      	movs	r0, #0
 801522c:	f7eb fb36 	bl	800089c <__aeabi_ddiv>
 8015230:	4633      	mov	r3, r6
 8015232:	462a      	mov	r2, r5
 8015234:	f7eb f850 	bl	80002d8 <__aeabi_dsub>
 8015238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801523c:	4656      	mov	r6, sl
 801523e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015242:	f7eb fcb1 	bl	8000ba8 <__aeabi_d2iz>
 8015246:	4605      	mov	r5, r0
 8015248:	f7eb f994 	bl	8000574 <__aeabi_i2d>
 801524c:	4602      	mov	r2, r0
 801524e:	460b      	mov	r3, r1
 8015250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015254:	f7eb f840 	bl	80002d8 <__aeabi_dsub>
 8015258:	3530      	adds	r5, #48	@ 0x30
 801525a:	4602      	mov	r2, r0
 801525c:	460b      	mov	r3, r1
 801525e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015262:	f806 5b01 	strb.w	r5, [r6], #1
 8015266:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801526a:	f7eb fc5f 	bl	8000b2c <__aeabi_dcmplt>
 801526e:	2800      	cmp	r0, #0
 8015270:	d171      	bne.n	8015356 <_dtoa_r+0x65e>
 8015272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015276:	4911      	ldr	r1, [pc, #68]	@ (80152bc <_dtoa_r+0x5c4>)
 8015278:	2000      	movs	r0, #0
 801527a:	f7eb f82d 	bl	80002d8 <__aeabi_dsub>
 801527e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015282:	f7eb fc53 	bl	8000b2c <__aeabi_dcmplt>
 8015286:	2800      	cmp	r0, #0
 8015288:	f040 8095 	bne.w	80153b6 <_dtoa_r+0x6be>
 801528c:	42a6      	cmp	r6, r4
 801528e:	f43f af50 	beq.w	8015132 <_dtoa_r+0x43a>
 8015292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015296:	4b0a      	ldr	r3, [pc, #40]	@ (80152c0 <_dtoa_r+0x5c8>)
 8015298:	2200      	movs	r2, #0
 801529a:	f7eb f9d5 	bl	8000648 <__aeabi_dmul>
 801529e:	4b08      	ldr	r3, [pc, #32]	@ (80152c0 <_dtoa_r+0x5c8>)
 80152a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80152a4:	2200      	movs	r2, #0
 80152a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152aa:	f7eb f9cd 	bl	8000648 <__aeabi_dmul>
 80152ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152b2:	e7c4      	b.n	801523e <_dtoa_r+0x546>
 80152b4:	080192f0 	.word	0x080192f0
 80152b8:	080192c8 	.word	0x080192c8
 80152bc:	3ff00000 	.word	0x3ff00000
 80152c0:	40240000 	.word	0x40240000
 80152c4:	401c0000 	.word	0x401c0000
 80152c8:	40140000 	.word	0x40140000
 80152cc:	3fe00000 	.word	0x3fe00000
 80152d0:	4631      	mov	r1, r6
 80152d2:	4628      	mov	r0, r5
 80152d4:	f7eb f9b8 	bl	8000648 <__aeabi_dmul>
 80152d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80152dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80152de:	4656      	mov	r6, sl
 80152e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152e4:	f7eb fc60 	bl	8000ba8 <__aeabi_d2iz>
 80152e8:	4605      	mov	r5, r0
 80152ea:	f7eb f943 	bl	8000574 <__aeabi_i2d>
 80152ee:	4602      	mov	r2, r0
 80152f0:	460b      	mov	r3, r1
 80152f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152f6:	f7ea ffef 	bl	80002d8 <__aeabi_dsub>
 80152fa:	3530      	adds	r5, #48	@ 0x30
 80152fc:	f806 5b01 	strb.w	r5, [r6], #1
 8015300:	4602      	mov	r2, r0
 8015302:	460b      	mov	r3, r1
 8015304:	42a6      	cmp	r6, r4
 8015306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801530a:	f04f 0200 	mov.w	r2, #0
 801530e:	d124      	bne.n	801535a <_dtoa_r+0x662>
 8015310:	4bac      	ldr	r3, [pc, #688]	@ (80155c4 <_dtoa_r+0x8cc>)
 8015312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015316:	f7ea ffe1 	bl	80002dc <__adddf3>
 801531a:	4602      	mov	r2, r0
 801531c:	460b      	mov	r3, r1
 801531e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015322:	f7eb fc21 	bl	8000b68 <__aeabi_dcmpgt>
 8015326:	2800      	cmp	r0, #0
 8015328:	d145      	bne.n	80153b6 <_dtoa_r+0x6be>
 801532a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801532e:	49a5      	ldr	r1, [pc, #660]	@ (80155c4 <_dtoa_r+0x8cc>)
 8015330:	2000      	movs	r0, #0
 8015332:	f7ea ffd1 	bl	80002d8 <__aeabi_dsub>
 8015336:	4602      	mov	r2, r0
 8015338:	460b      	mov	r3, r1
 801533a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801533e:	f7eb fbf5 	bl	8000b2c <__aeabi_dcmplt>
 8015342:	2800      	cmp	r0, #0
 8015344:	f43f aef5 	beq.w	8015132 <_dtoa_r+0x43a>
 8015348:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801534a:	1e73      	subs	r3, r6, #1
 801534c:	9315      	str	r3, [sp, #84]	@ 0x54
 801534e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015352:	2b30      	cmp	r3, #48	@ 0x30
 8015354:	d0f8      	beq.n	8015348 <_dtoa_r+0x650>
 8015356:	9f04      	ldr	r7, [sp, #16]
 8015358:	e73e      	b.n	80151d8 <_dtoa_r+0x4e0>
 801535a:	4b9b      	ldr	r3, [pc, #620]	@ (80155c8 <_dtoa_r+0x8d0>)
 801535c:	f7eb f974 	bl	8000648 <__aeabi_dmul>
 8015360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015364:	e7bc      	b.n	80152e0 <_dtoa_r+0x5e8>
 8015366:	d10c      	bne.n	8015382 <_dtoa_r+0x68a>
 8015368:	4b98      	ldr	r3, [pc, #608]	@ (80155cc <_dtoa_r+0x8d4>)
 801536a:	2200      	movs	r2, #0
 801536c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015370:	f7eb f96a 	bl	8000648 <__aeabi_dmul>
 8015374:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015378:	f7eb fbec 	bl	8000b54 <__aeabi_dcmpge>
 801537c:	2800      	cmp	r0, #0
 801537e:	f000 8157 	beq.w	8015630 <_dtoa_r+0x938>
 8015382:	2400      	movs	r4, #0
 8015384:	4625      	mov	r5, r4
 8015386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015388:	43db      	mvns	r3, r3
 801538a:	9304      	str	r3, [sp, #16]
 801538c:	4656      	mov	r6, sl
 801538e:	2700      	movs	r7, #0
 8015390:	4621      	mov	r1, r4
 8015392:	4658      	mov	r0, fp
 8015394:	f000 fafe 	bl	8015994 <_Bfree>
 8015398:	2d00      	cmp	r5, #0
 801539a:	d0dc      	beq.n	8015356 <_dtoa_r+0x65e>
 801539c:	b12f      	cbz	r7, 80153aa <_dtoa_r+0x6b2>
 801539e:	42af      	cmp	r7, r5
 80153a0:	d003      	beq.n	80153aa <_dtoa_r+0x6b2>
 80153a2:	4639      	mov	r1, r7
 80153a4:	4658      	mov	r0, fp
 80153a6:	f000 faf5 	bl	8015994 <_Bfree>
 80153aa:	4629      	mov	r1, r5
 80153ac:	4658      	mov	r0, fp
 80153ae:	f000 faf1 	bl	8015994 <_Bfree>
 80153b2:	e7d0      	b.n	8015356 <_dtoa_r+0x65e>
 80153b4:	9704      	str	r7, [sp, #16]
 80153b6:	4633      	mov	r3, r6
 80153b8:	461e      	mov	r6, r3
 80153ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153be:	2a39      	cmp	r2, #57	@ 0x39
 80153c0:	d107      	bne.n	80153d2 <_dtoa_r+0x6da>
 80153c2:	459a      	cmp	sl, r3
 80153c4:	d1f8      	bne.n	80153b8 <_dtoa_r+0x6c0>
 80153c6:	9a04      	ldr	r2, [sp, #16]
 80153c8:	3201      	adds	r2, #1
 80153ca:	9204      	str	r2, [sp, #16]
 80153cc:	2230      	movs	r2, #48	@ 0x30
 80153ce:	f88a 2000 	strb.w	r2, [sl]
 80153d2:	781a      	ldrb	r2, [r3, #0]
 80153d4:	3201      	adds	r2, #1
 80153d6:	701a      	strb	r2, [r3, #0]
 80153d8:	e7bd      	b.n	8015356 <_dtoa_r+0x65e>
 80153da:	4b7b      	ldr	r3, [pc, #492]	@ (80155c8 <_dtoa_r+0x8d0>)
 80153dc:	2200      	movs	r2, #0
 80153de:	f7eb f933 	bl	8000648 <__aeabi_dmul>
 80153e2:	2200      	movs	r2, #0
 80153e4:	2300      	movs	r3, #0
 80153e6:	4604      	mov	r4, r0
 80153e8:	460d      	mov	r5, r1
 80153ea:	f7eb fb95 	bl	8000b18 <__aeabi_dcmpeq>
 80153ee:	2800      	cmp	r0, #0
 80153f0:	f43f aebb 	beq.w	801516a <_dtoa_r+0x472>
 80153f4:	e6f0      	b.n	80151d8 <_dtoa_r+0x4e0>
 80153f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80153f8:	2a00      	cmp	r2, #0
 80153fa:	f000 80db 	beq.w	80155b4 <_dtoa_r+0x8bc>
 80153fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015400:	2a01      	cmp	r2, #1
 8015402:	f300 80bf 	bgt.w	8015584 <_dtoa_r+0x88c>
 8015406:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015408:	2a00      	cmp	r2, #0
 801540a:	f000 80b7 	beq.w	801557c <_dtoa_r+0x884>
 801540e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015412:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015414:	4646      	mov	r6, r8
 8015416:	9a08      	ldr	r2, [sp, #32]
 8015418:	2101      	movs	r1, #1
 801541a:	441a      	add	r2, r3
 801541c:	4658      	mov	r0, fp
 801541e:	4498      	add	r8, r3
 8015420:	9208      	str	r2, [sp, #32]
 8015422:	f000 fbb5 	bl	8015b90 <__i2b>
 8015426:	4605      	mov	r5, r0
 8015428:	b15e      	cbz	r6, 8015442 <_dtoa_r+0x74a>
 801542a:	9b08      	ldr	r3, [sp, #32]
 801542c:	2b00      	cmp	r3, #0
 801542e:	dd08      	ble.n	8015442 <_dtoa_r+0x74a>
 8015430:	42b3      	cmp	r3, r6
 8015432:	9a08      	ldr	r2, [sp, #32]
 8015434:	bfa8      	it	ge
 8015436:	4633      	movge	r3, r6
 8015438:	eba8 0803 	sub.w	r8, r8, r3
 801543c:	1af6      	subs	r6, r6, r3
 801543e:	1ad3      	subs	r3, r2, r3
 8015440:	9308      	str	r3, [sp, #32]
 8015442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015444:	b1f3      	cbz	r3, 8015484 <_dtoa_r+0x78c>
 8015446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015448:	2b00      	cmp	r3, #0
 801544a:	f000 80b7 	beq.w	80155bc <_dtoa_r+0x8c4>
 801544e:	b18c      	cbz	r4, 8015474 <_dtoa_r+0x77c>
 8015450:	4629      	mov	r1, r5
 8015452:	4622      	mov	r2, r4
 8015454:	4658      	mov	r0, fp
 8015456:	f000 fc5b 	bl	8015d10 <__pow5mult>
 801545a:	464a      	mov	r2, r9
 801545c:	4601      	mov	r1, r0
 801545e:	4605      	mov	r5, r0
 8015460:	4658      	mov	r0, fp
 8015462:	f000 fbab 	bl	8015bbc <__multiply>
 8015466:	4649      	mov	r1, r9
 8015468:	9004      	str	r0, [sp, #16]
 801546a:	4658      	mov	r0, fp
 801546c:	f000 fa92 	bl	8015994 <_Bfree>
 8015470:	9b04      	ldr	r3, [sp, #16]
 8015472:	4699      	mov	r9, r3
 8015474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015476:	1b1a      	subs	r2, r3, r4
 8015478:	d004      	beq.n	8015484 <_dtoa_r+0x78c>
 801547a:	4649      	mov	r1, r9
 801547c:	4658      	mov	r0, fp
 801547e:	f000 fc47 	bl	8015d10 <__pow5mult>
 8015482:	4681      	mov	r9, r0
 8015484:	2101      	movs	r1, #1
 8015486:	4658      	mov	r0, fp
 8015488:	f000 fb82 	bl	8015b90 <__i2b>
 801548c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801548e:	4604      	mov	r4, r0
 8015490:	2b00      	cmp	r3, #0
 8015492:	f000 81cf 	beq.w	8015834 <_dtoa_r+0xb3c>
 8015496:	461a      	mov	r2, r3
 8015498:	4601      	mov	r1, r0
 801549a:	4658      	mov	r0, fp
 801549c:	f000 fc38 	bl	8015d10 <__pow5mult>
 80154a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154a2:	2b01      	cmp	r3, #1
 80154a4:	4604      	mov	r4, r0
 80154a6:	f300 8095 	bgt.w	80155d4 <_dtoa_r+0x8dc>
 80154aa:	9b02      	ldr	r3, [sp, #8]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	f040 8087 	bne.w	80155c0 <_dtoa_r+0x8c8>
 80154b2:	9b03      	ldr	r3, [sp, #12]
 80154b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f040 8089 	bne.w	80155d0 <_dtoa_r+0x8d8>
 80154be:	9b03      	ldr	r3, [sp, #12]
 80154c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80154c4:	0d1b      	lsrs	r3, r3, #20
 80154c6:	051b      	lsls	r3, r3, #20
 80154c8:	b12b      	cbz	r3, 80154d6 <_dtoa_r+0x7de>
 80154ca:	9b08      	ldr	r3, [sp, #32]
 80154cc:	3301      	adds	r3, #1
 80154ce:	9308      	str	r3, [sp, #32]
 80154d0:	f108 0801 	add.w	r8, r8, #1
 80154d4:	2301      	movs	r3, #1
 80154d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80154d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f000 81b0 	beq.w	8015840 <_dtoa_r+0xb48>
 80154e0:	6923      	ldr	r3, [r4, #16]
 80154e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80154e6:	6918      	ldr	r0, [r3, #16]
 80154e8:	f000 fb06 	bl	8015af8 <__hi0bits>
 80154ec:	f1c0 0020 	rsb	r0, r0, #32
 80154f0:	9b08      	ldr	r3, [sp, #32]
 80154f2:	4418      	add	r0, r3
 80154f4:	f010 001f 	ands.w	r0, r0, #31
 80154f8:	d077      	beq.n	80155ea <_dtoa_r+0x8f2>
 80154fa:	f1c0 0320 	rsb	r3, r0, #32
 80154fe:	2b04      	cmp	r3, #4
 8015500:	dd6b      	ble.n	80155da <_dtoa_r+0x8e2>
 8015502:	9b08      	ldr	r3, [sp, #32]
 8015504:	f1c0 001c 	rsb	r0, r0, #28
 8015508:	4403      	add	r3, r0
 801550a:	4480      	add	r8, r0
 801550c:	4406      	add	r6, r0
 801550e:	9308      	str	r3, [sp, #32]
 8015510:	f1b8 0f00 	cmp.w	r8, #0
 8015514:	dd05      	ble.n	8015522 <_dtoa_r+0x82a>
 8015516:	4649      	mov	r1, r9
 8015518:	4642      	mov	r2, r8
 801551a:	4658      	mov	r0, fp
 801551c:	f000 fc52 	bl	8015dc4 <__lshift>
 8015520:	4681      	mov	r9, r0
 8015522:	9b08      	ldr	r3, [sp, #32]
 8015524:	2b00      	cmp	r3, #0
 8015526:	dd05      	ble.n	8015534 <_dtoa_r+0x83c>
 8015528:	4621      	mov	r1, r4
 801552a:	461a      	mov	r2, r3
 801552c:	4658      	mov	r0, fp
 801552e:	f000 fc49 	bl	8015dc4 <__lshift>
 8015532:	4604      	mov	r4, r0
 8015534:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015536:	2b00      	cmp	r3, #0
 8015538:	d059      	beq.n	80155ee <_dtoa_r+0x8f6>
 801553a:	4621      	mov	r1, r4
 801553c:	4648      	mov	r0, r9
 801553e:	f000 fcad 	bl	8015e9c <__mcmp>
 8015542:	2800      	cmp	r0, #0
 8015544:	da53      	bge.n	80155ee <_dtoa_r+0x8f6>
 8015546:	1e7b      	subs	r3, r7, #1
 8015548:	9304      	str	r3, [sp, #16]
 801554a:	4649      	mov	r1, r9
 801554c:	2300      	movs	r3, #0
 801554e:	220a      	movs	r2, #10
 8015550:	4658      	mov	r0, fp
 8015552:	f000 fa41 	bl	80159d8 <__multadd>
 8015556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015558:	4681      	mov	r9, r0
 801555a:	2b00      	cmp	r3, #0
 801555c:	f000 8172 	beq.w	8015844 <_dtoa_r+0xb4c>
 8015560:	2300      	movs	r3, #0
 8015562:	4629      	mov	r1, r5
 8015564:	220a      	movs	r2, #10
 8015566:	4658      	mov	r0, fp
 8015568:	f000 fa36 	bl	80159d8 <__multadd>
 801556c:	9b00      	ldr	r3, [sp, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	4605      	mov	r5, r0
 8015572:	dc67      	bgt.n	8015644 <_dtoa_r+0x94c>
 8015574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015576:	2b02      	cmp	r3, #2
 8015578:	dc41      	bgt.n	80155fe <_dtoa_r+0x906>
 801557a:	e063      	b.n	8015644 <_dtoa_r+0x94c>
 801557c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801557e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015582:	e746      	b.n	8015412 <_dtoa_r+0x71a>
 8015584:	9b07      	ldr	r3, [sp, #28]
 8015586:	1e5c      	subs	r4, r3, #1
 8015588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801558a:	42a3      	cmp	r3, r4
 801558c:	bfbf      	itttt	lt
 801558e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015590:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015592:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015594:	1ae3      	sublt	r3, r4, r3
 8015596:	bfb4      	ite	lt
 8015598:	18d2      	addlt	r2, r2, r3
 801559a:	1b1c      	subge	r4, r3, r4
 801559c:	9b07      	ldr	r3, [sp, #28]
 801559e:	bfbc      	itt	lt
 80155a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80155a2:	2400      	movlt	r4, #0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	bfb5      	itete	lt
 80155a8:	eba8 0603 	sublt.w	r6, r8, r3
 80155ac:	9b07      	ldrge	r3, [sp, #28]
 80155ae:	2300      	movlt	r3, #0
 80155b0:	4646      	movge	r6, r8
 80155b2:	e730      	b.n	8015416 <_dtoa_r+0x71e>
 80155b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80155b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80155b8:	4646      	mov	r6, r8
 80155ba:	e735      	b.n	8015428 <_dtoa_r+0x730>
 80155bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80155be:	e75c      	b.n	801547a <_dtoa_r+0x782>
 80155c0:	2300      	movs	r3, #0
 80155c2:	e788      	b.n	80154d6 <_dtoa_r+0x7de>
 80155c4:	3fe00000 	.word	0x3fe00000
 80155c8:	40240000 	.word	0x40240000
 80155cc:	40140000 	.word	0x40140000
 80155d0:	9b02      	ldr	r3, [sp, #8]
 80155d2:	e780      	b.n	80154d6 <_dtoa_r+0x7de>
 80155d4:	2300      	movs	r3, #0
 80155d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80155d8:	e782      	b.n	80154e0 <_dtoa_r+0x7e8>
 80155da:	d099      	beq.n	8015510 <_dtoa_r+0x818>
 80155dc:	9a08      	ldr	r2, [sp, #32]
 80155de:	331c      	adds	r3, #28
 80155e0:	441a      	add	r2, r3
 80155e2:	4498      	add	r8, r3
 80155e4:	441e      	add	r6, r3
 80155e6:	9208      	str	r2, [sp, #32]
 80155e8:	e792      	b.n	8015510 <_dtoa_r+0x818>
 80155ea:	4603      	mov	r3, r0
 80155ec:	e7f6      	b.n	80155dc <_dtoa_r+0x8e4>
 80155ee:	9b07      	ldr	r3, [sp, #28]
 80155f0:	9704      	str	r7, [sp, #16]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	dc20      	bgt.n	8015638 <_dtoa_r+0x940>
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155fa:	2b02      	cmp	r3, #2
 80155fc:	dd1e      	ble.n	801563c <_dtoa_r+0x944>
 80155fe:	9b00      	ldr	r3, [sp, #0]
 8015600:	2b00      	cmp	r3, #0
 8015602:	f47f aec0 	bne.w	8015386 <_dtoa_r+0x68e>
 8015606:	4621      	mov	r1, r4
 8015608:	2205      	movs	r2, #5
 801560a:	4658      	mov	r0, fp
 801560c:	f000 f9e4 	bl	80159d8 <__multadd>
 8015610:	4601      	mov	r1, r0
 8015612:	4604      	mov	r4, r0
 8015614:	4648      	mov	r0, r9
 8015616:	f000 fc41 	bl	8015e9c <__mcmp>
 801561a:	2800      	cmp	r0, #0
 801561c:	f77f aeb3 	ble.w	8015386 <_dtoa_r+0x68e>
 8015620:	4656      	mov	r6, sl
 8015622:	2331      	movs	r3, #49	@ 0x31
 8015624:	f806 3b01 	strb.w	r3, [r6], #1
 8015628:	9b04      	ldr	r3, [sp, #16]
 801562a:	3301      	adds	r3, #1
 801562c:	9304      	str	r3, [sp, #16]
 801562e:	e6ae      	b.n	801538e <_dtoa_r+0x696>
 8015630:	9c07      	ldr	r4, [sp, #28]
 8015632:	9704      	str	r7, [sp, #16]
 8015634:	4625      	mov	r5, r4
 8015636:	e7f3      	b.n	8015620 <_dtoa_r+0x928>
 8015638:	9b07      	ldr	r3, [sp, #28]
 801563a:	9300      	str	r3, [sp, #0]
 801563c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801563e:	2b00      	cmp	r3, #0
 8015640:	f000 8104 	beq.w	801584c <_dtoa_r+0xb54>
 8015644:	2e00      	cmp	r6, #0
 8015646:	dd05      	ble.n	8015654 <_dtoa_r+0x95c>
 8015648:	4629      	mov	r1, r5
 801564a:	4632      	mov	r2, r6
 801564c:	4658      	mov	r0, fp
 801564e:	f000 fbb9 	bl	8015dc4 <__lshift>
 8015652:	4605      	mov	r5, r0
 8015654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015656:	2b00      	cmp	r3, #0
 8015658:	d05a      	beq.n	8015710 <_dtoa_r+0xa18>
 801565a:	6869      	ldr	r1, [r5, #4]
 801565c:	4658      	mov	r0, fp
 801565e:	f000 f959 	bl	8015914 <_Balloc>
 8015662:	4606      	mov	r6, r0
 8015664:	b928      	cbnz	r0, 8015672 <_dtoa_r+0x97a>
 8015666:	4b84      	ldr	r3, [pc, #528]	@ (8015878 <_dtoa_r+0xb80>)
 8015668:	4602      	mov	r2, r0
 801566a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801566e:	f7ff bb5a 	b.w	8014d26 <_dtoa_r+0x2e>
 8015672:	692a      	ldr	r2, [r5, #16]
 8015674:	3202      	adds	r2, #2
 8015676:	0092      	lsls	r2, r2, #2
 8015678:	f105 010c 	add.w	r1, r5, #12
 801567c:	300c      	adds	r0, #12
 801567e:	f7ff fa9e 	bl	8014bbe <memcpy>
 8015682:	2201      	movs	r2, #1
 8015684:	4631      	mov	r1, r6
 8015686:	4658      	mov	r0, fp
 8015688:	f000 fb9c 	bl	8015dc4 <__lshift>
 801568c:	f10a 0301 	add.w	r3, sl, #1
 8015690:	9307      	str	r3, [sp, #28]
 8015692:	9b00      	ldr	r3, [sp, #0]
 8015694:	4453      	add	r3, sl
 8015696:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015698:	9b02      	ldr	r3, [sp, #8]
 801569a:	f003 0301 	and.w	r3, r3, #1
 801569e:	462f      	mov	r7, r5
 80156a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80156a2:	4605      	mov	r5, r0
 80156a4:	9b07      	ldr	r3, [sp, #28]
 80156a6:	4621      	mov	r1, r4
 80156a8:	3b01      	subs	r3, #1
 80156aa:	4648      	mov	r0, r9
 80156ac:	9300      	str	r3, [sp, #0]
 80156ae:	f7ff fa9b 	bl	8014be8 <quorem>
 80156b2:	4639      	mov	r1, r7
 80156b4:	9002      	str	r0, [sp, #8]
 80156b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80156ba:	4648      	mov	r0, r9
 80156bc:	f000 fbee 	bl	8015e9c <__mcmp>
 80156c0:	462a      	mov	r2, r5
 80156c2:	9008      	str	r0, [sp, #32]
 80156c4:	4621      	mov	r1, r4
 80156c6:	4658      	mov	r0, fp
 80156c8:	f000 fc04 	bl	8015ed4 <__mdiff>
 80156cc:	68c2      	ldr	r2, [r0, #12]
 80156ce:	4606      	mov	r6, r0
 80156d0:	bb02      	cbnz	r2, 8015714 <_dtoa_r+0xa1c>
 80156d2:	4601      	mov	r1, r0
 80156d4:	4648      	mov	r0, r9
 80156d6:	f000 fbe1 	bl	8015e9c <__mcmp>
 80156da:	4602      	mov	r2, r0
 80156dc:	4631      	mov	r1, r6
 80156de:	4658      	mov	r0, fp
 80156e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80156e2:	f000 f957 	bl	8015994 <_Bfree>
 80156e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80156ea:	9e07      	ldr	r6, [sp, #28]
 80156ec:	ea43 0102 	orr.w	r1, r3, r2
 80156f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156f2:	4319      	orrs	r1, r3
 80156f4:	d110      	bne.n	8015718 <_dtoa_r+0xa20>
 80156f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80156fa:	d029      	beq.n	8015750 <_dtoa_r+0xa58>
 80156fc:	9b08      	ldr	r3, [sp, #32]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	dd02      	ble.n	8015708 <_dtoa_r+0xa10>
 8015702:	9b02      	ldr	r3, [sp, #8]
 8015704:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015708:	9b00      	ldr	r3, [sp, #0]
 801570a:	f883 8000 	strb.w	r8, [r3]
 801570e:	e63f      	b.n	8015390 <_dtoa_r+0x698>
 8015710:	4628      	mov	r0, r5
 8015712:	e7bb      	b.n	801568c <_dtoa_r+0x994>
 8015714:	2201      	movs	r2, #1
 8015716:	e7e1      	b.n	80156dc <_dtoa_r+0x9e4>
 8015718:	9b08      	ldr	r3, [sp, #32]
 801571a:	2b00      	cmp	r3, #0
 801571c:	db04      	blt.n	8015728 <_dtoa_r+0xa30>
 801571e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015720:	430b      	orrs	r3, r1
 8015722:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015724:	430b      	orrs	r3, r1
 8015726:	d120      	bne.n	801576a <_dtoa_r+0xa72>
 8015728:	2a00      	cmp	r2, #0
 801572a:	dded      	ble.n	8015708 <_dtoa_r+0xa10>
 801572c:	4649      	mov	r1, r9
 801572e:	2201      	movs	r2, #1
 8015730:	4658      	mov	r0, fp
 8015732:	f000 fb47 	bl	8015dc4 <__lshift>
 8015736:	4621      	mov	r1, r4
 8015738:	4681      	mov	r9, r0
 801573a:	f000 fbaf 	bl	8015e9c <__mcmp>
 801573e:	2800      	cmp	r0, #0
 8015740:	dc03      	bgt.n	801574a <_dtoa_r+0xa52>
 8015742:	d1e1      	bne.n	8015708 <_dtoa_r+0xa10>
 8015744:	f018 0f01 	tst.w	r8, #1
 8015748:	d0de      	beq.n	8015708 <_dtoa_r+0xa10>
 801574a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801574e:	d1d8      	bne.n	8015702 <_dtoa_r+0xa0a>
 8015750:	9a00      	ldr	r2, [sp, #0]
 8015752:	2339      	movs	r3, #57	@ 0x39
 8015754:	7013      	strb	r3, [r2, #0]
 8015756:	4633      	mov	r3, r6
 8015758:	461e      	mov	r6, r3
 801575a:	3b01      	subs	r3, #1
 801575c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015760:	2a39      	cmp	r2, #57	@ 0x39
 8015762:	d052      	beq.n	801580a <_dtoa_r+0xb12>
 8015764:	3201      	adds	r2, #1
 8015766:	701a      	strb	r2, [r3, #0]
 8015768:	e612      	b.n	8015390 <_dtoa_r+0x698>
 801576a:	2a00      	cmp	r2, #0
 801576c:	dd07      	ble.n	801577e <_dtoa_r+0xa86>
 801576e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015772:	d0ed      	beq.n	8015750 <_dtoa_r+0xa58>
 8015774:	9a00      	ldr	r2, [sp, #0]
 8015776:	f108 0301 	add.w	r3, r8, #1
 801577a:	7013      	strb	r3, [r2, #0]
 801577c:	e608      	b.n	8015390 <_dtoa_r+0x698>
 801577e:	9b07      	ldr	r3, [sp, #28]
 8015780:	9a07      	ldr	r2, [sp, #28]
 8015782:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015788:	4293      	cmp	r3, r2
 801578a:	d028      	beq.n	80157de <_dtoa_r+0xae6>
 801578c:	4649      	mov	r1, r9
 801578e:	2300      	movs	r3, #0
 8015790:	220a      	movs	r2, #10
 8015792:	4658      	mov	r0, fp
 8015794:	f000 f920 	bl	80159d8 <__multadd>
 8015798:	42af      	cmp	r7, r5
 801579a:	4681      	mov	r9, r0
 801579c:	f04f 0300 	mov.w	r3, #0
 80157a0:	f04f 020a 	mov.w	r2, #10
 80157a4:	4639      	mov	r1, r7
 80157a6:	4658      	mov	r0, fp
 80157a8:	d107      	bne.n	80157ba <_dtoa_r+0xac2>
 80157aa:	f000 f915 	bl	80159d8 <__multadd>
 80157ae:	4607      	mov	r7, r0
 80157b0:	4605      	mov	r5, r0
 80157b2:	9b07      	ldr	r3, [sp, #28]
 80157b4:	3301      	adds	r3, #1
 80157b6:	9307      	str	r3, [sp, #28]
 80157b8:	e774      	b.n	80156a4 <_dtoa_r+0x9ac>
 80157ba:	f000 f90d 	bl	80159d8 <__multadd>
 80157be:	4629      	mov	r1, r5
 80157c0:	4607      	mov	r7, r0
 80157c2:	2300      	movs	r3, #0
 80157c4:	220a      	movs	r2, #10
 80157c6:	4658      	mov	r0, fp
 80157c8:	f000 f906 	bl	80159d8 <__multadd>
 80157cc:	4605      	mov	r5, r0
 80157ce:	e7f0      	b.n	80157b2 <_dtoa_r+0xaba>
 80157d0:	9b00      	ldr	r3, [sp, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	bfcc      	ite	gt
 80157d6:	461e      	movgt	r6, r3
 80157d8:	2601      	movle	r6, #1
 80157da:	4456      	add	r6, sl
 80157dc:	2700      	movs	r7, #0
 80157de:	4649      	mov	r1, r9
 80157e0:	2201      	movs	r2, #1
 80157e2:	4658      	mov	r0, fp
 80157e4:	f000 faee 	bl	8015dc4 <__lshift>
 80157e8:	4621      	mov	r1, r4
 80157ea:	4681      	mov	r9, r0
 80157ec:	f000 fb56 	bl	8015e9c <__mcmp>
 80157f0:	2800      	cmp	r0, #0
 80157f2:	dcb0      	bgt.n	8015756 <_dtoa_r+0xa5e>
 80157f4:	d102      	bne.n	80157fc <_dtoa_r+0xb04>
 80157f6:	f018 0f01 	tst.w	r8, #1
 80157fa:	d1ac      	bne.n	8015756 <_dtoa_r+0xa5e>
 80157fc:	4633      	mov	r3, r6
 80157fe:	461e      	mov	r6, r3
 8015800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015804:	2a30      	cmp	r2, #48	@ 0x30
 8015806:	d0fa      	beq.n	80157fe <_dtoa_r+0xb06>
 8015808:	e5c2      	b.n	8015390 <_dtoa_r+0x698>
 801580a:	459a      	cmp	sl, r3
 801580c:	d1a4      	bne.n	8015758 <_dtoa_r+0xa60>
 801580e:	9b04      	ldr	r3, [sp, #16]
 8015810:	3301      	adds	r3, #1
 8015812:	9304      	str	r3, [sp, #16]
 8015814:	2331      	movs	r3, #49	@ 0x31
 8015816:	f88a 3000 	strb.w	r3, [sl]
 801581a:	e5b9      	b.n	8015390 <_dtoa_r+0x698>
 801581c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801581e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801587c <_dtoa_r+0xb84>
 8015822:	b11b      	cbz	r3, 801582c <_dtoa_r+0xb34>
 8015824:	f10a 0308 	add.w	r3, sl, #8
 8015828:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801582a:	6013      	str	r3, [r2, #0]
 801582c:	4650      	mov	r0, sl
 801582e:	b019      	add	sp, #100	@ 0x64
 8015830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015836:	2b01      	cmp	r3, #1
 8015838:	f77f ae37 	ble.w	80154aa <_dtoa_r+0x7b2>
 801583c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801583e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015840:	2001      	movs	r0, #1
 8015842:	e655      	b.n	80154f0 <_dtoa_r+0x7f8>
 8015844:	9b00      	ldr	r3, [sp, #0]
 8015846:	2b00      	cmp	r3, #0
 8015848:	f77f aed6 	ble.w	80155f8 <_dtoa_r+0x900>
 801584c:	4656      	mov	r6, sl
 801584e:	4621      	mov	r1, r4
 8015850:	4648      	mov	r0, r9
 8015852:	f7ff f9c9 	bl	8014be8 <quorem>
 8015856:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801585a:	f806 8b01 	strb.w	r8, [r6], #1
 801585e:	9b00      	ldr	r3, [sp, #0]
 8015860:	eba6 020a 	sub.w	r2, r6, sl
 8015864:	4293      	cmp	r3, r2
 8015866:	ddb3      	ble.n	80157d0 <_dtoa_r+0xad8>
 8015868:	4649      	mov	r1, r9
 801586a:	2300      	movs	r3, #0
 801586c:	220a      	movs	r2, #10
 801586e:	4658      	mov	r0, fp
 8015870:	f000 f8b2 	bl	80159d8 <__multadd>
 8015874:	4681      	mov	r9, r0
 8015876:	e7ea      	b.n	801584e <_dtoa_r+0xb56>
 8015878:	08019251 	.word	0x08019251
 801587c:	080191d5 	.word	0x080191d5

08015880 <_free_r>:
 8015880:	b538      	push	{r3, r4, r5, lr}
 8015882:	4605      	mov	r5, r0
 8015884:	2900      	cmp	r1, #0
 8015886:	d041      	beq.n	801590c <_free_r+0x8c>
 8015888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801588c:	1f0c      	subs	r4, r1, #4
 801588e:	2b00      	cmp	r3, #0
 8015890:	bfb8      	it	lt
 8015892:	18e4      	addlt	r4, r4, r3
 8015894:	f7fe f8d4 	bl	8013a40 <__malloc_lock>
 8015898:	4a1d      	ldr	r2, [pc, #116]	@ (8015910 <_free_r+0x90>)
 801589a:	6813      	ldr	r3, [r2, #0]
 801589c:	b933      	cbnz	r3, 80158ac <_free_r+0x2c>
 801589e:	6063      	str	r3, [r4, #4]
 80158a0:	6014      	str	r4, [r2, #0]
 80158a2:	4628      	mov	r0, r5
 80158a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158a8:	f7fe b8d0 	b.w	8013a4c <__malloc_unlock>
 80158ac:	42a3      	cmp	r3, r4
 80158ae:	d908      	bls.n	80158c2 <_free_r+0x42>
 80158b0:	6820      	ldr	r0, [r4, #0]
 80158b2:	1821      	adds	r1, r4, r0
 80158b4:	428b      	cmp	r3, r1
 80158b6:	bf01      	itttt	eq
 80158b8:	6819      	ldreq	r1, [r3, #0]
 80158ba:	685b      	ldreq	r3, [r3, #4]
 80158bc:	1809      	addeq	r1, r1, r0
 80158be:	6021      	streq	r1, [r4, #0]
 80158c0:	e7ed      	b.n	801589e <_free_r+0x1e>
 80158c2:	461a      	mov	r2, r3
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	b10b      	cbz	r3, 80158cc <_free_r+0x4c>
 80158c8:	42a3      	cmp	r3, r4
 80158ca:	d9fa      	bls.n	80158c2 <_free_r+0x42>
 80158cc:	6811      	ldr	r1, [r2, #0]
 80158ce:	1850      	adds	r0, r2, r1
 80158d0:	42a0      	cmp	r0, r4
 80158d2:	d10b      	bne.n	80158ec <_free_r+0x6c>
 80158d4:	6820      	ldr	r0, [r4, #0]
 80158d6:	4401      	add	r1, r0
 80158d8:	1850      	adds	r0, r2, r1
 80158da:	4283      	cmp	r3, r0
 80158dc:	6011      	str	r1, [r2, #0]
 80158de:	d1e0      	bne.n	80158a2 <_free_r+0x22>
 80158e0:	6818      	ldr	r0, [r3, #0]
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	6053      	str	r3, [r2, #4]
 80158e6:	4408      	add	r0, r1
 80158e8:	6010      	str	r0, [r2, #0]
 80158ea:	e7da      	b.n	80158a2 <_free_r+0x22>
 80158ec:	d902      	bls.n	80158f4 <_free_r+0x74>
 80158ee:	230c      	movs	r3, #12
 80158f0:	602b      	str	r3, [r5, #0]
 80158f2:	e7d6      	b.n	80158a2 <_free_r+0x22>
 80158f4:	6820      	ldr	r0, [r4, #0]
 80158f6:	1821      	adds	r1, r4, r0
 80158f8:	428b      	cmp	r3, r1
 80158fa:	bf04      	itt	eq
 80158fc:	6819      	ldreq	r1, [r3, #0]
 80158fe:	685b      	ldreq	r3, [r3, #4]
 8015900:	6063      	str	r3, [r4, #4]
 8015902:	bf04      	itt	eq
 8015904:	1809      	addeq	r1, r1, r0
 8015906:	6021      	streq	r1, [r4, #0]
 8015908:	6054      	str	r4, [r2, #4]
 801590a:	e7ca      	b.n	80158a2 <_free_r+0x22>
 801590c:	bd38      	pop	{r3, r4, r5, pc}
 801590e:	bf00      	nop
 8015910:	200009b8 	.word	0x200009b8

08015914 <_Balloc>:
 8015914:	b570      	push	{r4, r5, r6, lr}
 8015916:	69c6      	ldr	r6, [r0, #28]
 8015918:	4604      	mov	r4, r0
 801591a:	460d      	mov	r5, r1
 801591c:	b976      	cbnz	r6, 801593c <_Balloc+0x28>
 801591e:	2010      	movs	r0, #16
 8015920:	f7fd ffdc 	bl	80138dc <malloc>
 8015924:	4602      	mov	r2, r0
 8015926:	61e0      	str	r0, [r4, #28]
 8015928:	b920      	cbnz	r0, 8015934 <_Balloc+0x20>
 801592a:	4b18      	ldr	r3, [pc, #96]	@ (801598c <_Balloc+0x78>)
 801592c:	4818      	ldr	r0, [pc, #96]	@ (8015990 <_Balloc+0x7c>)
 801592e:	216b      	movs	r1, #107	@ 0x6b
 8015930:	f7fd ffa4 	bl	801387c <__assert_func>
 8015934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015938:	6006      	str	r6, [r0, #0]
 801593a:	60c6      	str	r6, [r0, #12]
 801593c:	69e6      	ldr	r6, [r4, #28]
 801593e:	68f3      	ldr	r3, [r6, #12]
 8015940:	b183      	cbz	r3, 8015964 <_Balloc+0x50>
 8015942:	69e3      	ldr	r3, [r4, #28]
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801594a:	b9b8      	cbnz	r0, 801597c <_Balloc+0x68>
 801594c:	2101      	movs	r1, #1
 801594e:	fa01 f605 	lsl.w	r6, r1, r5
 8015952:	1d72      	adds	r2, r6, #5
 8015954:	0092      	lsls	r2, r2, #2
 8015956:	4620      	mov	r0, r4
 8015958:	f001 ff0a 	bl	8017770 <_calloc_r>
 801595c:	b160      	cbz	r0, 8015978 <_Balloc+0x64>
 801595e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015962:	e00e      	b.n	8015982 <_Balloc+0x6e>
 8015964:	2221      	movs	r2, #33	@ 0x21
 8015966:	2104      	movs	r1, #4
 8015968:	4620      	mov	r0, r4
 801596a:	f001 ff01 	bl	8017770 <_calloc_r>
 801596e:	69e3      	ldr	r3, [r4, #28]
 8015970:	60f0      	str	r0, [r6, #12]
 8015972:	68db      	ldr	r3, [r3, #12]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d1e4      	bne.n	8015942 <_Balloc+0x2e>
 8015978:	2000      	movs	r0, #0
 801597a:	bd70      	pop	{r4, r5, r6, pc}
 801597c:	6802      	ldr	r2, [r0, #0]
 801597e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015982:	2300      	movs	r3, #0
 8015984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015988:	e7f7      	b.n	801597a <_Balloc+0x66>
 801598a:	bf00      	nop
 801598c:	080191e2 	.word	0x080191e2
 8015990:	08019262 	.word	0x08019262

08015994 <_Bfree>:
 8015994:	b570      	push	{r4, r5, r6, lr}
 8015996:	69c6      	ldr	r6, [r0, #28]
 8015998:	4605      	mov	r5, r0
 801599a:	460c      	mov	r4, r1
 801599c:	b976      	cbnz	r6, 80159bc <_Bfree+0x28>
 801599e:	2010      	movs	r0, #16
 80159a0:	f7fd ff9c 	bl	80138dc <malloc>
 80159a4:	4602      	mov	r2, r0
 80159a6:	61e8      	str	r0, [r5, #28]
 80159a8:	b920      	cbnz	r0, 80159b4 <_Bfree+0x20>
 80159aa:	4b09      	ldr	r3, [pc, #36]	@ (80159d0 <_Bfree+0x3c>)
 80159ac:	4809      	ldr	r0, [pc, #36]	@ (80159d4 <_Bfree+0x40>)
 80159ae:	218f      	movs	r1, #143	@ 0x8f
 80159b0:	f7fd ff64 	bl	801387c <__assert_func>
 80159b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80159b8:	6006      	str	r6, [r0, #0]
 80159ba:	60c6      	str	r6, [r0, #12]
 80159bc:	b13c      	cbz	r4, 80159ce <_Bfree+0x3a>
 80159be:	69eb      	ldr	r3, [r5, #28]
 80159c0:	6862      	ldr	r2, [r4, #4]
 80159c2:	68db      	ldr	r3, [r3, #12]
 80159c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80159c8:	6021      	str	r1, [r4, #0]
 80159ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80159ce:	bd70      	pop	{r4, r5, r6, pc}
 80159d0:	080191e2 	.word	0x080191e2
 80159d4:	08019262 	.word	0x08019262

080159d8 <__multadd>:
 80159d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159dc:	690d      	ldr	r5, [r1, #16]
 80159de:	4607      	mov	r7, r0
 80159e0:	460c      	mov	r4, r1
 80159e2:	461e      	mov	r6, r3
 80159e4:	f101 0c14 	add.w	ip, r1, #20
 80159e8:	2000      	movs	r0, #0
 80159ea:	f8dc 3000 	ldr.w	r3, [ip]
 80159ee:	b299      	uxth	r1, r3
 80159f0:	fb02 6101 	mla	r1, r2, r1, r6
 80159f4:	0c1e      	lsrs	r6, r3, #16
 80159f6:	0c0b      	lsrs	r3, r1, #16
 80159f8:	fb02 3306 	mla	r3, r2, r6, r3
 80159fc:	b289      	uxth	r1, r1
 80159fe:	3001      	adds	r0, #1
 8015a00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015a04:	4285      	cmp	r5, r0
 8015a06:	f84c 1b04 	str.w	r1, [ip], #4
 8015a0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015a0e:	dcec      	bgt.n	80159ea <__multadd+0x12>
 8015a10:	b30e      	cbz	r6, 8015a56 <__multadd+0x7e>
 8015a12:	68a3      	ldr	r3, [r4, #8]
 8015a14:	42ab      	cmp	r3, r5
 8015a16:	dc19      	bgt.n	8015a4c <__multadd+0x74>
 8015a18:	6861      	ldr	r1, [r4, #4]
 8015a1a:	4638      	mov	r0, r7
 8015a1c:	3101      	adds	r1, #1
 8015a1e:	f7ff ff79 	bl	8015914 <_Balloc>
 8015a22:	4680      	mov	r8, r0
 8015a24:	b928      	cbnz	r0, 8015a32 <__multadd+0x5a>
 8015a26:	4602      	mov	r2, r0
 8015a28:	4b0c      	ldr	r3, [pc, #48]	@ (8015a5c <__multadd+0x84>)
 8015a2a:	480d      	ldr	r0, [pc, #52]	@ (8015a60 <__multadd+0x88>)
 8015a2c:	21ba      	movs	r1, #186	@ 0xba
 8015a2e:	f7fd ff25 	bl	801387c <__assert_func>
 8015a32:	6922      	ldr	r2, [r4, #16]
 8015a34:	3202      	adds	r2, #2
 8015a36:	f104 010c 	add.w	r1, r4, #12
 8015a3a:	0092      	lsls	r2, r2, #2
 8015a3c:	300c      	adds	r0, #12
 8015a3e:	f7ff f8be 	bl	8014bbe <memcpy>
 8015a42:	4621      	mov	r1, r4
 8015a44:	4638      	mov	r0, r7
 8015a46:	f7ff ffa5 	bl	8015994 <_Bfree>
 8015a4a:	4644      	mov	r4, r8
 8015a4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015a50:	3501      	adds	r5, #1
 8015a52:	615e      	str	r6, [r3, #20]
 8015a54:	6125      	str	r5, [r4, #16]
 8015a56:	4620      	mov	r0, r4
 8015a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a5c:	08019251 	.word	0x08019251
 8015a60:	08019262 	.word	0x08019262

08015a64 <__s2b>:
 8015a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a68:	460c      	mov	r4, r1
 8015a6a:	4615      	mov	r5, r2
 8015a6c:	461f      	mov	r7, r3
 8015a6e:	2209      	movs	r2, #9
 8015a70:	3308      	adds	r3, #8
 8015a72:	4606      	mov	r6, r0
 8015a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a78:	2100      	movs	r1, #0
 8015a7a:	2201      	movs	r2, #1
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	db09      	blt.n	8015a94 <__s2b+0x30>
 8015a80:	4630      	mov	r0, r6
 8015a82:	f7ff ff47 	bl	8015914 <_Balloc>
 8015a86:	b940      	cbnz	r0, 8015a9a <__s2b+0x36>
 8015a88:	4602      	mov	r2, r0
 8015a8a:	4b19      	ldr	r3, [pc, #100]	@ (8015af0 <__s2b+0x8c>)
 8015a8c:	4819      	ldr	r0, [pc, #100]	@ (8015af4 <__s2b+0x90>)
 8015a8e:	21d3      	movs	r1, #211	@ 0xd3
 8015a90:	f7fd fef4 	bl	801387c <__assert_func>
 8015a94:	0052      	lsls	r2, r2, #1
 8015a96:	3101      	adds	r1, #1
 8015a98:	e7f0      	b.n	8015a7c <__s2b+0x18>
 8015a9a:	9b08      	ldr	r3, [sp, #32]
 8015a9c:	6143      	str	r3, [r0, #20]
 8015a9e:	2d09      	cmp	r5, #9
 8015aa0:	f04f 0301 	mov.w	r3, #1
 8015aa4:	6103      	str	r3, [r0, #16]
 8015aa6:	dd16      	ble.n	8015ad6 <__s2b+0x72>
 8015aa8:	f104 0909 	add.w	r9, r4, #9
 8015aac:	46c8      	mov	r8, r9
 8015aae:	442c      	add	r4, r5
 8015ab0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015ab4:	4601      	mov	r1, r0
 8015ab6:	3b30      	subs	r3, #48	@ 0x30
 8015ab8:	220a      	movs	r2, #10
 8015aba:	4630      	mov	r0, r6
 8015abc:	f7ff ff8c 	bl	80159d8 <__multadd>
 8015ac0:	45a0      	cmp	r8, r4
 8015ac2:	d1f5      	bne.n	8015ab0 <__s2b+0x4c>
 8015ac4:	f1a5 0408 	sub.w	r4, r5, #8
 8015ac8:	444c      	add	r4, r9
 8015aca:	1b2d      	subs	r5, r5, r4
 8015acc:	1963      	adds	r3, r4, r5
 8015ace:	42bb      	cmp	r3, r7
 8015ad0:	db04      	blt.n	8015adc <__s2b+0x78>
 8015ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ad6:	340a      	adds	r4, #10
 8015ad8:	2509      	movs	r5, #9
 8015ada:	e7f6      	b.n	8015aca <__s2b+0x66>
 8015adc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015ae0:	4601      	mov	r1, r0
 8015ae2:	3b30      	subs	r3, #48	@ 0x30
 8015ae4:	220a      	movs	r2, #10
 8015ae6:	4630      	mov	r0, r6
 8015ae8:	f7ff ff76 	bl	80159d8 <__multadd>
 8015aec:	e7ee      	b.n	8015acc <__s2b+0x68>
 8015aee:	bf00      	nop
 8015af0:	08019251 	.word	0x08019251
 8015af4:	08019262 	.word	0x08019262

08015af8 <__hi0bits>:
 8015af8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015afc:	4603      	mov	r3, r0
 8015afe:	bf36      	itet	cc
 8015b00:	0403      	lslcc	r3, r0, #16
 8015b02:	2000      	movcs	r0, #0
 8015b04:	2010      	movcc	r0, #16
 8015b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015b0a:	bf3c      	itt	cc
 8015b0c:	021b      	lslcc	r3, r3, #8
 8015b0e:	3008      	addcc	r0, #8
 8015b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b14:	bf3c      	itt	cc
 8015b16:	011b      	lslcc	r3, r3, #4
 8015b18:	3004      	addcc	r0, #4
 8015b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b1e:	bf3c      	itt	cc
 8015b20:	009b      	lslcc	r3, r3, #2
 8015b22:	3002      	addcc	r0, #2
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	db05      	blt.n	8015b34 <__hi0bits+0x3c>
 8015b28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015b2c:	f100 0001 	add.w	r0, r0, #1
 8015b30:	bf08      	it	eq
 8015b32:	2020      	moveq	r0, #32
 8015b34:	4770      	bx	lr

08015b36 <__lo0bits>:
 8015b36:	6803      	ldr	r3, [r0, #0]
 8015b38:	4602      	mov	r2, r0
 8015b3a:	f013 0007 	ands.w	r0, r3, #7
 8015b3e:	d00b      	beq.n	8015b58 <__lo0bits+0x22>
 8015b40:	07d9      	lsls	r1, r3, #31
 8015b42:	d421      	bmi.n	8015b88 <__lo0bits+0x52>
 8015b44:	0798      	lsls	r0, r3, #30
 8015b46:	bf49      	itett	mi
 8015b48:	085b      	lsrmi	r3, r3, #1
 8015b4a:	089b      	lsrpl	r3, r3, #2
 8015b4c:	2001      	movmi	r0, #1
 8015b4e:	6013      	strmi	r3, [r2, #0]
 8015b50:	bf5c      	itt	pl
 8015b52:	6013      	strpl	r3, [r2, #0]
 8015b54:	2002      	movpl	r0, #2
 8015b56:	4770      	bx	lr
 8015b58:	b299      	uxth	r1, r3
 8015b5a:	b909      	cbnz	r1, 8015b60 <__lo0bits+0x2a>
 8015b5c:	0c1b      	lsrs	r3, r3, #16
 8015b5e:	2010      	movs	r0, #16
 8015b60:	b2d9      	uxtb	r1, r3
 8015b62:	b909      	cbnz	r1, 8015b68 <__lo0bits+0x32>
 8015b64:	3008      	adds	r0, #8
 8015b66:	0a1b      	lsrs	r3, r3, #8
 8015b68:	0719      	lsls	r1, r3, #28
 8015b6a:	bf04      	itt	eq
 8015b6c:	091b      	lsreq	r3, r3, #4
 8015b6e:	3004      	addeq	r0, #4
 8015b70:	0799      	lsls	r1, r3, #30
 8015b72:	bf04      	itt	eq
 8015b74:	089b      	lsreq	r3, r3, #2
 8015b76:	3002      	addeq	r0, #2
 8015b78:	07d9      	lsls	r1, r3, #31
 8015b7a:	d403      	bmi.n	8015b84 <__lo0bits+0x4e>
 8015b7c:	085b      	lsrs	r3, r3, #1
 8015b7e:	f100 0001 	add.w	r0, r0, #1
 8015b82:	d003      	beq.n	8015b8c <__lo0bits+0x56>
 8015b84:	6013      	str	r3, [r2, #0]
 8015b86:	4770      	bx	lr
 8015b88:	2000      	movs	r0, #0
 8015b8a:	4770      	bx	lr
 8015b8c:	2020      	movs	r0, #32
 8015b8e:	4770      	bx	lr

08015b90 <__i2b>:
 8015b90:	b510      	push	{r4, lr}
 8015b92:	460c      	mov	r4, r1
 8015b94:	2101      	movs	r1, #1
 8015b96:	f7ff febd 	bl	8015914 <_Balloc>
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	b928      	cbnz	r0, 8015baa <__i2b+0x1a>
 8015b9e:	4b05      	ldr	r3, [pc, #20]	@ (8015bb4 <__i2b+0x24>)
 8015ba0:	4805      	ldr	r0, [pc, #20]	@ (8015bb8 <__i2b+0x28>)
 8015ba2:	f240 1145 	movw	r1, #325	@ 0x145
 8015ba6:	f7fd fe69 	bl	801387c <__assert_func>
 8015baa:	2301      	movs	r3, #1
 8015bac:	6144      	str	r4, [r0, #20]
 8015bae:	6103      	str	r3, [r0, #16]
 8015bb0:	bd10      	pop	{r4, pc}
 8015bb2:	bf00      	nop
 8015bb4:	08019251 	.word	0x08019251
 8015bb8:	08019262 	.word	0x08019262

08015bbc <__multiply>:
 8015bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bc0:	4614      	mov	r4, r2
 8015bc2:	690a      	ldr	r2, [r1, #16]
 8015bc4:	6923      	ldr	r3, [r4, #16]
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	bfa8      	it	ge
 8015bca:	4623      	movge	r3, r4
 8015bcc:	460f      	mov	r7, r1
 8015bce:	bfa4      	itt	ge
 8015bd0:	460c      	movge	r4, r1
 8015bd2:	461f      	movge	r7, r3
 8015bd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015bd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015bdc:	68a3      	ldr	r3, [r4, #8]
 8015bde:	6861      	ldr	r1, [r4, #4]
 8015be0:	eb0a 0609 	add.w	r6, sl, r9
 8015be4:	42b3      	cmp	r3, r6
 8015be6:	b085      	sub	sp, #20
 8015be8:	bfb8      	it	lt
 8015bea:	3101      	addlt	r1, #1
 8015bec:	f7ff fe92 	bl	8015914 <_Balloc>
 8015bf0:	b930      	cbnz	r0, 8015c00 <__multiply+0x44>
 8015bf2:	4602      	mov	r2, r0
 8015bf4:	4b44      	ldr	r3, [pc, #272]	@ (8015d08 <__multiply+0x14c>)
 8015bf6:	4845      	ldr	r0, [pc, #276]	@ (8015d0c <__multiply+0x150>)
 8015bf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015bfc:	f7fd fe3e 	bl	801387c <__assert_func>
 8015c00:	f100 0514 	add.w	r5, r0, #20
 8015c04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015c08:	462b      	mov	r3, r5
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	4543      	cmp	r3, r8
 8015c0e:	d321      	bcc.n	8015c54 <__multiply+0x98>
 8015c10:	f107 0114 	add.w	r1, r7, #20
 8015c14:	f104 0214 	add.w	r2, r4, #20
 8015c18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015c1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015c20:	9302      	str	r3, [sp, #8]
 8015c22:	1b13      	subs	r3, r2, r4
 8015c24:	3b15      	subs	r3, #21
 8015c26:	f023 0303 	bic.w	r3, r3, #3
 8015c2a:	3304      	adds	r3, #4
 8015c2c:	f104 0715 	add.w	r7, r4, #21
 8015c30:	42ba      	cmp	r2, r7
 8015c32:	bf38      	it	cc
 8015c34:	2304      	movcc	r3, #4
 8015c36:	9301      	str	r3, [sp, #4]
 8015c38:	9b02      	ldr	r3, [sp, #8]
 8015c3a:	9103      	str	r1, [sp, #12]
 8015c3c:	428b      	cmp	r3, r1
 8015c3e:	d80c      	bhi.n	8015c5a <__multiply+0x9e>
 8015c40:	2e00      	cmp	r6, #0
 8015c42:	dd03      	ble.n	8015c4c <__multiply+0x90>
 8015c44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d05b      	beq.n	8015d04 <__multiply+0x148>
 8015c4c:	6106      	str	r6, [r0, #16]
 8015c4e:	b005      	add	sp, #20
 8015c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c54:	f843 2b04 	str.w	r2, [r3], #4
 8015c58:	e7d8      	b.n	8015c0c <__multiply+0x50>
 8015c5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8015c5e:	f1ba 0f00 	cmp.w	sl, #0
 8015c62:	d024      	beq.n	8015cae <__multiply+0xf2>
 8015c64:	f104 0e14 	add.w	lr, r4, #20
 8015c68:	46a9      	mov	r9, r5
 8015c6a:	f04f 0c00 	mov.w	ip, #0
 8015c6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015c72:	f8d9 3000 	ldr.w	r3, [r9]
 8015c76:	fa1f fb87 	uxth.w	fp, r7
 8015c7a:	b29b      	uxth	r3, r3
 8015c7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8015c80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015c84:	f8d9 7000 	ldr.w	r7, [r9]
 8015c88:	4463      	add	r3, ip
 8015c8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015c8e:	fb0a c70b 	mla	r7, sl, fp, ip
 8015c92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015c9c:	4572      	cmp	r2, lr
 8015c9e:	f849 3b04 	str.w	r3, [r9], #4
 8015ca2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015ca6:	d8e2      	bhi.n	8015c6e <__multiply+0xb2>
 8015ca8:	9b01      	ldr	r3, [sp, #4]
 8015caa:	f845 c003 	str.w	ip, [r5, r3]
 8015cae:	9b03      	ldr	r3, [sp, #12]
 8015cb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015cb4:	3104      	adds	r1, #4
 8015cb6:	f1b9 0f00 	cmp.w	r9, #0
 8015cba:	d021      	beq.n	8015d00 <__multiply+0x144>
 8015cbc:	682b      	ldr	r3, [r5, #0]
 8015cbe:	f104 0c14 	add.w	ip, r4, #20
 8015cc2:	46ae      	mov	lr, r5
 8015cc4:	f04f 0a00 	mov.w	sl, #0
 8015cc8:	f8bc b000 	ldrh.w	fp, [ip]
 8015ccc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015cd0:	fb09 770b 	mla	r7, r9, fp, r7
 8015cd4:	4457      	add	r7, sl
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015cdc:	f84e 3b04 	str.w	r3, [lr], #4
 8015ce0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015ce4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015ce8:	f8be 3000 	ldrh.w	r3, [lr]
 8015cec:	fb09 330a 	mla	r3, r9, sl, r3
 8015cf0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015cf4:	4562      	cmp	r2, ip
 8015cf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015cfa:	d8e5      	bhi.n	8015cc8 <__multiply+0x10c>
 8015cfc:	9f01      	ldr	r7, [sp, #4]
 8015cfe:	51eb      	str	r3, [r5, r7]
 8015d00:	3504      	adds	r5, #4
 8015d02:	e799      	b.n	8015c38 <__multiply+0x7c>
 8015d04:	3e01      	subs	r6, #1
 8015d06:	e79b      	b.n	8015c40 <__multiply+0x84>
 8015d08:	08019251 	.word	0x08019251
 8015d0c:	08019262 	.word	0x08019262

08015d10 <__pow5mult>:
 8015d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d14:	4615      	mov	r5, r2
 8015d16:	f012 0203 	ands.w	r2, r2, #3
 8015d1a:	4607      	mov	r7, r0
 8015d1c:	460e      	mov	r6, r1
 8015d1e:	d007      	beq.n	8015d30 <__pow5mult+0x20>
 8015d20:	4c25      	ldr	r4, [pc, #148]	@ (8015db8 <__pow5mult+0xa8>)
 8015d22:	3a01      	subs	r2, #1
 8015d24:	2300      	movs	r3, #0
 8015d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d2a:	f7ff fe55 	bl	80159d8 <__multadd>
 8015d2e:	4606      	mov	r6, r0
 8015d30:	10ad      	asrs	r5, r5, #2
 8015d32:	d03d      	beq.n	8015db0 <__pow5mult+0xa0>
 8015d34:	69fc      	ldr	r4, [r7, #28]
 8015d36:	b97c      	cbnz	r4, 8015d58 <__pow5mult+0x48>
 8015d38:	2010      	movs	r0, #16
 8015d3a:	f7fd fdcf 	bl	80138dc <malloc>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	61f8      	str	r0, [r7, #28]
 8015d42:	b928      	cbnz	r0, 8015d50 <__pow5mult+0x40>
 8015d44:	4b1d      	ldr	r3, [pc, #116]	@ (8015dbc <__pow5mult+0xac>)
 8015d46:	481e      	ldr	r0, [pc, #120]	@ (8015dc0 <__pow5mult+0xb0>)
 8015d48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015d4c:	f7fd fd96 	bl	801387c <__assert_func>
 8015d50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015d54:	6004      	str	r4, [r0, #0]
 8015d56:	60c4      	str	r4, [r0, #12]
 8015d58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015d60:	b94c      	cbnz	r4, 8015d76 <__pow5mult+0x66>
 8015d62:	f240 2171 	movw	r1, #625	@ 0x271
 8015d66:	4638      	mov	r0, r7
 8015d68:	f7ff ff12 	bl	8015b90 <__i2b>
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015d72:	4604      	mov	r4, r0
 8015d74:	6003      	str	r3, [r0, #0]
 8015d76:	f04f 0900 	mov.w	r9, #0
 8015d7a:	07eb      	lsls	r3, r5, #31
 8015d7c:	d50a      	bpl.n	8015d94 <__pow5mult+0x84>
 8015d7e:	4631      	mov	r1, r6
 8015d80:	4622      	mov	r2, r4
 8015d82:	4638      	mov	r0, r7
 8015d84:	f7ff ff1a 	bl	8015bbc <__multiply>
 8015d88:	4631      	mov	r1, r6
 8015d8a:	4680      	mov	r8, r0
 8015d8c:	4638      	mov	r0, r7
 8015d8e:	f7ff fe01 	bl	8015994 <_Bfree>
 8015d92:	4646      	mov	r6, r8
 8015d94:	106d      	asrs	r5, r5, #1
 8015d96:	d00b      	beq.n	8015db0 <__pow5mult+0xa0>
 8015d98:	6820      	ldr	r0, [r4, #0]
 8015d9a:	b938      	cbnz	r0, 8015dac <__pow5mult+0x9c>
 8015d9c:	4622      	mov	r2, r4
 8015d9e:	4621      	mov	r1, r4
 8015da0:	4638      	mov	r0, r7
 8015da2:	f7ff ff0b 	bl	8015bbc <__multiply>
 8015da6:	6020      	str	r0, [r4, #0]
 8015da8:	f8c0 9000 	str.w	r9, [r0]
 8015dac:	4604      	mov	r4, r0
 8015dae:	e7e4      	b.n	8015d7a <__pow5mult+0x6a>
 8015db0:	4630      	mov	r0, r6
 8015db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015db6:	bf00      	nop
 8015db8:	080192bc 	.word	0x080192bc
 8015dbc:	080191e2 	.word	0x080191e2
 8015dc0:	08019262 	.word	0x08019262

08015dc4 <__lshift>:
 8015dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dc8:	460c      	mov	r4, r1
 8015dca:	6849      	ldr	r1, [r1, #4]
 8015dcc:	6923      	ldr	r3, [r4, #16]
 8015dce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015dd2:	68a3      	ldr	r3, [r4, #8]
 8015dd4:	4607      	mov	r7, r0
 8015dd6:	4691      	mov	r9, r2
 8015dd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015ddc:	f108 0601 	add.w	r6, r8, #1
 8015de0:	42b3      	cmp	r3, r6
 8015de2:	db0b      	blt.n	8015dfc <__lshift+0x38>
 8015de4:	4638      	mov	r0, r7
 8015de6:	f7ff fd95 	bl	8015914 <_Balloc>
 8015dea:	4605      	mov	r5, r0
 8015dec:	b948      	cbnz	r0, 8015e02 <__lshift+0x3e>
 8015dee:	4602      	mov	r2, r0
 8015df0:	4b28      	ldr	r3, [pc, #160]	@ (8015e94 <__lshift+0xd0>)
 8015df2:	4829      	ldr	r0, [pc, #164]	@ (8015e98 <__lshift+0xd4>)
 8015df4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015df8:	f7fd fd40 	bl	801387c <__assert_func>
 8015dfc:	3101      	adds	r1, #1
 8015dfe:	005b      	lsls	r3, r3, #1
 8015e00:	e7ee      	b.n	8015de0 <__lshift+0x1c>
 8015e02:	2300      	movs	r3, #0
 8015e04:	f100 0114 	add.w	r1, r0, #20
 8015e08:	f100 0210 	add.w	r2, r0, #16
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	4553      	cmp	r3, sl
 8015e10:	db33      	blt.n	8015e7a <__lshift+0xb6>
 8015e12:	6920      	ldr	r0, [r4, #16]
 8015e14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e18:	f104 0314 	add.w	r3, r4, #20
 8015e1c:	f019 091f 	ands.w	r9, r9, #31
 8015e20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015e24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015e28:	d02b      	beq.n	8015e82 <__lshift+0xbe>
 8015e2a:	f1c9 0e20 	rsb	lr, r9, #32
 8015e2e:	468a      	mov	sl, r1
 8015e30:	2200      	movs	r2, #0
 8015e32:	6818      	ldr	r0, [r3, #0]
 8015e34:	fa00 f009 	lsl.w	r0, r0, r9
 8015e38:	4310      	orrs	r0, r2
 8015e3a:	f84a 0b04 	str.w	r0, [sl], #4
 8015e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e42:	459c      	cmp	ip, r3
 8015e44:	fa22 f20e 	lsr.w	r2, r2, lr
 8015e48:	d8f3      	bhi.n	8015e32 <__lshift+0x6e>
 8015e4a:	ebac 0304 	sub.w	r3, ip, r4
 8015e4e:	3b15      	subs	r3, #21
 8015e50:	f023 0303 	bic.w	r3, r3, #3
 8015e54:	3304      	adds	r3, #4
 8015e56:	f104 0015 	add.w	r0, r4, #21
 8015e5a:	4584      	cmp	ip, r0
 8015e5c:	bf38      	it	cc
 8015e5e:	2304      	movcc	r3, #4
 8015e60:	50ca      	str	r2, [r1, r3]
 8015e62:	b10a      	cbz	r2, 8015e68 <__lshift+0xa4>
 8015e64:	f108 0602 	add.w	r6, r8, #2
 8015e68:	3e01      	subs	r6, #1
 8015e6a:	4638      	mov	r0, r7
 8015e6c:	612e      	str	r6, [r5, #16]
 8015e6e:	4621      	mov	r1, r4
 8015e70:	f7ff fd90 	bl	8015994 <_Bfree>
 8015e74:	4628      	mov	r0, r5
 8015e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8015e7e:	3301      	adds	r3, #1
 8015e80:	e7c5      	b.n	8015e0e <__lshift+0x4a>
 8015e82:	3904      	subs	r1, #4
 8015e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e88:	f841 2f04 	str.w	r2, [r1, #4]!
 8015e8c:	459c      	cmp	ip, r3
 8015e8e:	d8f9      	bhi.n	8015e84 <__lshift+0xc0>
 8015e90:	e7ea      	b.n	8015e68 <__lshift+0xa4>
 8015e92:	bf00      	nop
 8015e94:	08019251 	.word	0x08019251
 8015e98:	08019262 	.word	0x08019262

08015e9c <__mcmp>:
 8015e9c:	690a      	ldr	r2, [r1, #16]
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	6900      	ldr	r0, [r0, #16]
 8015ea2:	1a80      	subs	r0, r0, r2
 8015ea4:	b530      	push	{r4, r5, lr}
 8015ea6:	d10e      	bne.n	8015ec6 <__mcmp+0x2a>
 8015ea8:	3314      	adds	r3, #20
 8015eaa:	3114      	adds	r1, #20
 8015eac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015eb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015eb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015eb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ebc:	4295      	cmp	r5, r2
 8015ebe:	d003      	beq.n	8015ec8 <__mcmp+0x2c>
 8015ec0:	d205      	bcs.n	8015ece <__mcmp+0x32>
 8015ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ec6:	bd30      	pop	{r4, r5, pc}
 8015ec8:	42a3      	cmp	r3, r4
 8015eca:	d3f3      	bcc.n	8015eb4 <__mcmp+0x18>
 8015ecc:	e7fb      	b.n	8015ec6 <__mcmp+0x2a>
 8015ece:	2001      	movs	r0, #1
 8015ed0:	e7f9      	b.n	8015ec6 <__mcmp+0x2a>
	...

08015ed4 <__mdiff>:
 8015ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed8:	4689      	mov	r9, r1
 8015eda:	4606      	mov	r6, r0
 8015edc:	4611      	mov	r1, r2
 8015ede:	4648      	mov	r0, r9
 8015ee0:	4614      	mov	r4, r2
 8015ee2:	f7ff ffdb 	bl	8015e9c <__mcmp>
 8015ee6:	1e05      	subs	r5, r0, #0
 8015ee8:	d112      	bne.n	8015f10 <__mdiff+0x3c>
 8015eea:	4629      	mov	r1, r5
 8015eec:	4630      	mov	r0, r6
 8015eee:	f7ff fd11 	bl	8015914 <_Balloc>
 8015ef2:	4602      	mov	r2, r0
 8015ef4:	b928      	cbnz	r0, 8015f02 <__mdiff+0x2e>
 8015ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8015ff4 <__mdiff+0x120>)
 8015ef8:	f240 2137 	movw	r1, #567	@ 0x237
 8015efc:	483e      	ldr	r0, [pc, #248]	@ (8015ff8 <__mdiff+0x124>)
 8015efe:	f7fd fcbd 	bl	801387c <__assert_func>
 8015f02:	2301      	movs	r3, #1
 8015f04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015f08:	4610      	mov	r0, r2
 8015f0a:	b003      	add	sp, #12
 8015f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f10:	bfbc      	itt	lt
 8015f12:	464b      	movlt	r3, r9
 8015f14:	46a1      	movlt	r9, r4
 8015f16:	4630      	mov	r0, r6
 8015f18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015f1c:	bfba      	itte	lt
 8015f1e:	461c      	movlt	r4, r3
 8015f20:	2501      	movlt	r5, #1
 8015f22:	2500      	movge	r5, #0
 8015f24:	f7ff fcf6 	bl	8015914 <_Balloc>
 8015f28:	4602      	mov	r2, r0
 8015f2a:	b918      	cbnz	r0, 8015f34 <__mdiff+0x60>
 8015f2c:	4b31      	ldr	r3, [pc, #196]	@ (8015ff4 <__mdiff+0x120>)
 8015f2e:	f240 2145 	movw	r1, #581	@ 0x245
 8015f32:	e7e3      	b.n	8015efc <__mdiff+0x28>
 8015f34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015f38:	6926      	ldr	r6, [r4, #16]
 8015f3a:	60c5      	str	r5, [r0, #12]
 8015f3c:	f109 0310 	add.w	r3, r9, #16
 8015f40:	f109 0514 	add.w	r5, r9, #20
 8015f44:	f104 0e14 	add.w	lr, r4, #20
 8015f48:	f100 0b14 	add.w	fp, r0, #20
 8015f4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015f50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015f54:	9301      	str	r3, [sp, #4]
 8015f56:	46d9      	mov	r9, fp
 8015f58:	f04f 0c00 	mov.w	ip, #0
 8015f5c:	9b01      	ldr	r3, [sp, #4]
 8015f5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015f62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015f66:	9301      	str	r3, [sp, #4]
 8015f68:	fa1f f38a 	uxth.w	r3, sl
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	b283      	uxth	r3, r0
 8015f70:	1acb      	subs	r3, r1, r3
 8015f72:	0c00      	lsrs	r0, r0, #16
 8015f74:	4463      	add	r3, ip
 8015f76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015f7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015f7e:	b29b      	uxth	r3, r3
 8015f80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015f84:	4576      	cmp	r6, lr
 8015f86:	f849 3b04 	str.w	r3, [r9], #4
 8015f8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015f8e:	d8e5      	bhi.n	8015f5c <__mdiff+0x88>
 8015f90:	1b33      	subs	r3, r6, r4
 8015f92:	3b15      	subs	r3, #21
 8015f94:	f023 0303 	bic.w	r3, r3, #3
 8015f98:	3415      	adds	r4, #21
 8015f9a:	3304      	adds	r3, #4
 8015f9c:	42a6      	cmp	r6, r4
 8015f9e:	bf38      	it	cc
 8015fa0:	2304      	movcc	r3, #4
 8015fa2:	441d      	add	r5, r3
 8015fa4:	445b      	add	r3, fp
 8015fa6:	461e      	mov	r6, r3
 8015fa8:	462c      	mov	r4, r5
 8015faa:	4544      	cmp	r4, r8
 8015fac:	d30e      	bcc.n	8015fcc <__mdiff+0xf8>
 8015fae:	f108 0103 	add.w	r1, r8, #3
 8015fb2:	1b49      	subs	r1, r1, r5
 8015fb4:	f021 0103 	bic.w	r1, r1, #3
 8015fb8:	3d03      	subs	r5, #3
 8015fba:	45a8      	cmp	r8, r5
 8015fbc:	bf38      	it	cc
 8015fbe:	2100      	movcc	r1, #0
 8015fc0:	440b      	add	r3, r1
 8015fc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015fc6:	b191      	cbz	r1, 8015fee <__mdiff+0x11a>
 8015fc8:	6117      	str	r7, [r2, #16]
 8015fca:	e79d      	b.n	8015f08 <__mdiff+0x34>
 8015fcc:	f854 1b04 	ldr.w	r1, [r4], #4
 8015fd0:	46e6      	mov	lr, ip
 8015fd2:	0c08      	lsrs	r0, r1, #16
 8015fd4:	fa1c fc81 	uxtah	ip, ip, r1
 8015fd8:	4471      	add	r1, lr
 8015fda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015fde:	b289      	uxth	r1, r1
 8015fe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015fe4:	f846 1b04 	str.w	r1, [r6], #4
 8015fe8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015fec:	e7dd      	b.n	8015faa <__mdiff+0xd6>
 8015fee:	3f01      	subs	r7, #1
 8015ff0:	e7e7      	b.n	8015fc2 <__mdiff+0xee>
 8015ff2:	bf00      	nop
 8015ff4:	08019251 	.word	0x08019251
 8015ff8:	08019262 	.word	0x08019262

08015ffc <__ulp>:
 8015ffc:	b082      	sub	sp, #8
 8015ffe:	ed8d 0b00 	vstr	d0, [sp]
 8016002:	9a01      	ldr	r2, [sp, #4]
 8016004:	4b0f      	ldr	r3, [pc, #60]	@ (8016044 <__ulp+0x48>)
 8016006:	4013      	ands	r3, r2
 8016008:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801600c:	2b00      	cmp	r3, #0
 801600e:	dc08      	bgt.n	8016022 <__ulp+0x26>
 8016010:	425b      	negs	r3, r3
 8016012:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016016:	ea4f 5223 	mov.w	r2, r3, asr #20
 801601a:	da04      	bge.n	8016026 <__ulp+0x2a>
 801601c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016020:	4113      	asrs	r3, r2
 8016022:	2200      	movs	r2, #0
 8016024:	e008      	b.n	8016038 <__ulp+0x3c>
 8016026:	f1a2 0314 	sub.w	r3, r2, #20
 801602a:	2b1e      	cmp	r3, #30
 801602c:	bfda      	itte	le
 801602e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016032:	40da      	lsrle	r2, r3
 8016034:	2201      	movgt	r2, #1
 8016036:	2300      	movs	r3, #0
 8016038:	4619      	mov	r1, r3
 801603a:	4610      	mov	r0, r2
 801603c:	ec41 0b10 	vmov	d0, r0, r1
 8016040:	b002      	add	sp, #8
 8016042:	4770      	bx	lr
 8016044:	7ff00000 	.word	0x7ff00000

08016048 <__b2d>:
 8016048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801604c:	6906      	ldr	r6, [r0, #16]
 801604e:	f100 0814 	add.w	r8, r0, #20
 8016052:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016056:	1f37      	subs	r7, r6, #4
 8016058:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801605c:	4610      	mov	r0, r2
 801605e:	f7ff fd4b 	bl	8015af8 <__hi0bits>
 8016062:	f1c0 0320 	rsb	r3, r0, #32
 8016066:	280a      	cmp	r0, #10
 8016068:	600b      	str	r3, [r1, #0]
 801606a:	491b      	ldr	r1, [pc, #108]	@ (80160d8 <__b2d+0x90>)
 801606c:	dc15      	bgt.n	801609a <__b2d+0x52>
 801606e:	f1c0 0c0b 	rsb	ip, r0, #11
 8016072:	fa22 f30c 	lsr.w	r3, r2, ip
 8016076:	45b8      	cmp	r8, r7
 8016078:	ea43 0501 	orr.w	r5, r3, r1
 801607c:	bf34      	ite	cc
 801607e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016082:	2300      	movcs	r3, #0
 8016084:	3015      	adds	r0, #21
 8016086:	fa02 f000 	lsl.w	r0, r2, r0
 801608a:	fa23 f30c 	lsr.w	r3, r3, ip
 801608e:	4303      	orrs	r3, r0
 8016090:	461c      	mov	r4, r3
 8016092:	ec45 4b10 	vmov	d0, r4, r5
 8016096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801609a:	45b8      	cmp	r8, r7
 801609c:	bf3a      	itte	cc
 801609e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80160a2:	f1a6 0708 	subcc.w	r7, r6, #8
 80160a6:	2300      	movcs	r3, #0
 80160a8:	380b      	subs	r0, #11
 80160aa:	d012      	beq.n	80160d2 <__b2d+0x8a>
 80160ac:	f1c0 0120 	rsb	r1, r0, #32
 80160b0:	fa23 f401 	lsr.w	r4, r3, r1
 80160b4:	4082      	lsls	r2, r0
 80160b6:	4322      	orrs	r2, r4
 80160b8:	4547      	cmp	r7, r8
 80160ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80160be:	bf8c      	ite	hi
 80160c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80160c4:	2200      	movls	r2, #0
 80160c6:	4083      	lsls	r3, r0
 80160c8:	40ca      	lsrs	r2, r1
 80160ca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80160ce:	4313      	orrs	r3, r2
 80160d0:	e7de      	b.n	8016090 <__b2d+0x48>
 80160d2:	ea42 0501 	orr.w	r5, r2, r1
 80160d6:	e7db      	b.n	8016090 <__b2d+0x48>
 80160d8:	3ff00000 	.word	0x3ff00000

080160dc <__d2b>:
 80160dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80160e0:	460f      	mov	r7, r1
 80160e2:	2101      	movs	r1, #1
 80160e4:	ec59 8b10 	vmov	r8, r9, d0
 80160e8:	4616      	mov	r6, r2
 80160ea:	f7ff fc13 	bl	8015914 <_Balloc>
 80160ee:	4604      	mov	r4, r0
 80160f0:	b930      	cbnz	r0, 8016100 <__d2b+0x24>
 80160f2:	4602      	mov	r2, r0
 80160f4:	4b23      	ldr	r3, [pc, #140]	@ (8016184 <__d2b+0xa8>)
 80160f6:	4824      	ldr	r0, [pc, #144]	@ (8016188 <__d2b+0xac>)
 80160f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80160fc:	f7fd fbbe 	bl	801387c <__assert_func>
 8016100:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016104:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016108:	b10d      	cbz	r5, 801610e <__d2b+0x32>
 801610a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801610e:	9301      	str	r3, [sp, #4]
 8016110:	f1b8 0300 	subs.w	r3, r8, #0
 8016114:	d023      	beq.n	801615e <__d2b+0x82>
 8016116:	4668      	mov	r0, sp
 8016118:	9300      	str	r3, [sp, #0]
 801611a:	f7ff fd0c 	bl	8015b36 <__lo0bits>
 801611e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016122:	b1d0      	cbz	r0, 801615a <__d2b+0x7e>
 8016124:	f1c0 0320 	rsb	r3, r0, #32
 8016128:	fa02 f303 	lsl.w	r3, r2, r3
 801612c:	430b      	orrs	r3, r1
 801612e:	40c2      	lsrs	r2, r0
 8016130:	6163      	str	r3, [r4, #20]
 8016132:	9201      	str	r2, [sp, #4]
 8016134:	9b01      	ldr	r3, [sp, #4]
 8016136:	61a3      	str	r3, [r4, #24]
 8016138:	2b00      	cmp	r3, #0
 801613a:	bf0c      	ite	eq
 801613c:	2201      	moveq	r2, #1
 801613e:	2202      	movne	r2, #2
 8016140:	6122      	str	r2, [r4, #16]
 8016142:	b1a5      	cbz	r5, 801616e <__d2b+0x92>
 8016144:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016148:	4405      	add	r5, r0
 801614a:	603d      	str	r5, [r7, #0]
 801614c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016150:	6030      	str	r0, [r6, #0]
 8016152:	4620      	mov	r0, r4
 8016154:	b003      	add	sp, #12
 8016156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801615a:	6161      	str	r1, [r4, #20]
 801615c:	e7ea      	b.n	8016134 <__d2b+0x58>
 801615e:	a801      	add	r0, sp, #4
 8016160:	f7ff fce9 	bl	8015b36 <__lo0bits>
 8016164:	9b01      	ldr	r3, [sp, #4]
 8016166:	6163      	str	r3, [r4, #20]
 8016168:	3020      	adds	r0, #32
 801616a:	2201      	movs	r2, #1
 801616c:	e7e8      	b.n	8016140 <__d2b+0x64>
 801616e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016172:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016176:	6038      	str	r0, [r7, #0]
 8016178:	6918      	ldr	r0, [r3, #16]
 801617a:	f7ff fcbd 	bl	8015af8 <__hi0bits>
 801617e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016182:	e7e5      	b.n	8016150 <__d2b+0x74>
 8016184:	08019251 	.word	0x08019251
 8016188:	08019262 	.word	0x08019262

0801618c <__ratio>:
 801618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016190:	b085      	sub	sp, #20
 8016192:	e9cd 1000 	strd	r1, r0, [sp]
 8016196:	a902      	add	r1, sp, #8
 8016198:	f7ff ff56 	bl	8016048 <__b2d>
 801619c:	9800      	ldr	r0, [sp, #0]
 801619e:	a903      	add	r1, sp, #12
 80161a0:	ec55 4b10 	vmov	r4, r5, d0
 80161a4:	f7ff ff50 	bl	8016048 <__b2d>
 80161a8:	9b01      	ldr	r3, [sp, #4]
 80161aa:	6919      	ldr	r1, [r3, #16]
 80161ac:	9b00      	ldr	r3, [sp, #0]
 80161ae:	691b      	ldr	r3, [r3, #16]
 80161b0:	1ac9      	subs	r1, r1, r3
 80161b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80161b6:	1a9b      	subs	r3, r3, r2
 80161b8:	ec5b ab10 	vmov	sl, fp, d0
 80161bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	bfce      	itee	gt
 80161c4:	462a      	movgt	r2, r5
 80161c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80161ca:	465a      	movle	r2, fp
 80161cc:	462f      	mov	r7, r5
 80161ce:	46d9      	mov	r9, fp
 80161d0:	bfcc      	ite	gt
 80161d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80161d6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80161da:	464b      	mov	r3, r9
 80161dc:	4652      	mov	r2, sl
 80161de:	4620      	mov	r0, r4
 80161e0:	4639      	mov	r1, r7
 80161e2:	f7ea fb5b 	bl	800089c <__aeabi_ddiv>
 80161e6:	ec41 0b10 	vmov	d0, r0, r1
 80161ea:	b005      	add	sp, #20
 80161ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161f0 <__copybits>:
 80161f0:	3901      	subs	r1, #1
 80161f2:	b570      	push	{r4, r5, r6, lr}
 80161f4:	1149      	asrs	r1, r1, #5
 80161f6:	6914      	ldr	r4, [r2, #16]
 80161f8:	3101      	adds	r1, #1
 80161fa:	f102 0314 	add.w	r3, r2, #20
 80161fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016202:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016206:	1f05      	subs	r5, r0, #4
 8016208:	42a3      	cmp	r3, r4
 801620a:	d30c      	bcc.n	8016226 <__copybits+0x36>
 801620c:	1aa3      	subs	r3, r4, r2
 801620e:	3b11      	subs	r3, #17
 8016210:	f023 0303 	bic.w	r3, r3, #3
 8016214:	3211      	adds	r2, #17
 8016216:	42a2      	cmp	r2, r4
 8016218:	bf88      	it	hi
 801621a:	2300      	movhi	r3, #0
 801621c:	4418      	add	r0, r3
 801621e:	2300      	movs	r3, #0
 8016220:	4288      	cmp	r0, r1
 8016222:	d305      	bcc.n	8016230 <__copybits+0x40>
 8016224:	bd70      	pop	{r4, r5, r6, pc}
 8016226:	f853 6b04 	ldr.w	r6, [r3], #4
 801622a:	f845 6f04 	str.w	r6, [r5, #4]!
 801622e:	e7eb      	b.n	8016208 <__copybits+0x18>
 8016230:	f840 3b04 	str.w	r3, [r0], #4
 8016234:	e7f4      	b.n	8016220 <__copybits+0x30>

08016236 <__any_on>:
 8016236:	f100 0214 	add.w	r2, r0, #20
 801623a:	6900      	ldr	r0, [r0, #16]
 801623c:	114b      	asrs	r3, r1, #5
 801623e:	4298      	cmp	r0, r3
 8016240:	b510      	push	{r4, lr}
 8016242:	db11      	blt.n	8016268 <__any_on+0x32>
 8016244:	dd0a      	ble.n	801625c <__any_on+0x26>
 8016246:	f011 011f 	ands.w	r1, r1, #31
 801624a:	d007      	beq.n	801625c <__any_on+0x26>
 801624c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016250:	fa24 f001 	lsr.w	r0, r4, r1
 8016254:	fa00 f101 	lsl.w	r1, r0, r1
 8016258:	428c      	cmp	r4, r1
 801625a:	d10b      	bne.n	8016274 <__any_on+0x3e>
 801625c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016260:	4293      	cmp	r3, r2
 8016262:	d803      	bhi.n	801626c <__any_on+0x36>
 8016264:	2000      	movs	r0, #0
 8016266:	bd10      	pop	{r4, pc}
 8016268:	4603      	mov	r3, r0
 801626a:	e7f7      	b.n	801625c <__any_on+0x26>
 801626c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016270:	2900      	cmp	r1, #0
 8016272:	d0f5      	beq.n	8016260 <__any_on+0x2a>
 8016274:	2001      	movs	r0, #1
 8016276:	e7f6      	b.n	8016266 <__any_on+0x30>

08016278 <sulp>:
 8016278:	b570      	push	{r4, r5, r6, lr}
 801627a:	4604      	mov	r4, r0
 801627c:	460d      	mov	r5, r1
 801627e:	ec45 4b10 	vmov	d0, r4, r5
 8016282:	4616      	mov	r6, r2
 8016284:	f7ff feba 	bl	8015ffc <__ulp>
 8016288:	ec51 0b10 	vmov	r0, r1, d0
 801628c:	b17e      	cbz	r6, 80162ae <sulp+0x36>
 801628e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016292:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016296:	2b00      	cmp	r3, #0
 8016298:	dd09      	ble.n	80162ae <sulp+0x36>
 801629a:	051b      	lsls	r3, r3, #20
 801629c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80162a0:	2400      	movs	r4, #0
 80162a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80162a6:	4622      	mov	r2, r4
 80162a8:	462b      	mov	r3, r5
 80162aa:	f7ea f9cd 	bl	8000648 <__aeabi_dmul>
 80162ae:	ec41 0b10 	vmov	d0, r0, r1
 80162b2:	bd70      	pop	{r4, r5, r6, pc}
 80162b4:	0000      	movs	r0, r0
	...

080162b8 <_strtod_l>:
 80162b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162bc:	b09f      	sub	sp, #124	@ 0x7c
 80162be:	460c      	mov	r4, r1
 80162c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80162c2:	2200      	movs	r2, #0
 80162c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80162c6:	9005      	str	r0, [sp, #20]
 80162c8:	f04f 0a00 	mov.w	sl, #0
 80162cc:	f04f 0b00 	mov.w	fp, #0
 80162d0:	460a      	mov	r2, r1
 80162d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80162d4:	7811      	ldrb	r1, [r2, #0]
 80162d6:	292b      	cmp	r1, #43	@ 0x2b
 80162d8:	d04a      	beq.n	8016370 <_strtod_l+0xb8>
 80162da:	d838      	bhi.n	801634e <_strtod_l+0x96>
 80162dc:	290d      	cmp	r1, #13
 80162de:	d832      	bhi.n	8016346 <_strtod_l+0x8e>
 80162e0:	2908      	cmp	r1, #8
 80162e2:	d832      	bhi.n	801634a <_strtod_l+0x92>
 80162e4:	2900      	cmp	r1, #0
 80162e6:	d03b      	beq.n	8016360 <_strtod_l+0xa8>
 80162e8:	2200      	movs	r2, #0
 80162ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80162ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80162ee:	782a      	ldrb	r2, [r5, #0]
 80162f0:	2a30      	cmp	r2, #48	@ 0x30
 80162f2:	f040 80b3 	bne.w	801645c <_strtod_l+0x1a4>
 80162f6:	786a      	ldrb	r2, [r5, #1]
 80162f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80162fc:	2a58      	cmp	r2, #88	@ 0x58
 80162fe:	d16e      	bne.n	80163de <_strtod_l+0x126>
 8016300:	9302      	str	r3, [sp, #8]
 8016302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016304:	9301      	str	r3, [sp, #4]
 8016306:	ab1a      	add	r3, sp, #104	@ 0x68
 8016308:	9300      	str	r3, [sp, #0]
 801630a:	4a8e      	ldr	r2, [pc, #568]	@ (8016544 <_strtod_l+0x28c>)
 801630c:	9805      	ldr	r0, [sp, #20]
 801630e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016310:	a919      	add	r1, sp, #100	@ 0x64
 8016312:	f001 faa9 	bl	8017868 <__gethex>
 8016316:	f010 060f 	ands.w	r6, r0, #15
 801631a:	4604      	mov	r4, r0
 801631c:	d005      	beq.n	801632a <_strtod_l+0x72>
 801631e:	2e06      	cmp	r6, #6
 8016320:	d128      	bne.n	8016374 <_strtod_l+0xbc>
 8016322:	3501      	adds	r5, #1
 8016324:	2300      	movs	r3, #0
 8016326:	9519      	str	r5, [sp, #100]	@ 0x64
 8016328:	930b      	str	r3, [sp, #44]	@ 0x2c
 801632a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801632c:	2b00      	cmp	r3, #0
 801632e:	f040 858e 	bne.w	8016e4e <_strtod_l+0xb96>
 8016332:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016334:	b1cb      	cbz	r3, 801636a <_strtod_l+0xb2>
 8016336:	4652      	mov	r2, sl
 8016338:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801633c:	ec43 2b10 	vmov	d0, r2, r3
 8016340:	b01f      	add	sp, #124	@ 0x7c
 8016342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016346:	2920      	cmp	r1, #32
 8016348:	d1ce      	bne.n	80162e8 <_strtod_l+0x30>
 801634a:	3201      	adds	r2, #1
 801634c:	e7c1      	b.n	80162d2 <_strtod_l+0x1a>
 801634e:	292d      	cmp	r1, #45	@ 0x2d
 8016350:	d1ca      	bne.n	80162e8 <_strtod_l+0x30>
 8016352:	2101      	movs	r1, #1
 8016354:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016356:	1c51      	adds	r1, r2, #1
 8016358:	9119      	str	r1, [sp, #100]	@ 0x64
 801635a:	7852      	ldrb	r2, [r2, #1]
 801635c:	2a00      	cmp	r2, #0
 801635e:	d1c5      	bne.n	80162ec <_strtod_l+0x34>
 8016360:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016362:	9419      	str	r4, [sp, #100]	@ 0x64
 8016364:	2b00      	cmp	r3, #0
 8016366:	f040 8570 	bne.w	8016e4a <_strtod_l+0xb92>
 801636a:	4652      	mov	r2, sl
 801636c:	465b      	mov	r3, fp
 801636e:	e7e5      	b.n	801633c <_strtod_l+0x84>
 8016370:	2100      	movs	r1, #0
 8016372:	e7ef      	b.n	8016354 <_strtod_l+0x9c>
 8016374:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016376:	b13a      	cbz	r2, 8016388 <_strtod_l+0xd0>
 8016378:	2135      	movs	r1, #53	@ 0x35
 801637a:	a81c      	add	r0, sp, #112	@ 0x70
 801637c:	f7ff ff38 	bl	80161f0 <__copybits>
 8016380:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016382:	9805      	ldr	r0, [sp, #20]
 8016384:	f7ff fb06 	bl	8015994 <_Bfree>
 8016388:	3e01      	subs	r6, #1
 801638a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801638c:	2e04      	cmp	r6, #4
 801638e:	d806      	bhi.n	801639e <_strtod_l+0xe6>
 8016390:	e8df f006 	tbb	[pc, r6]
 8016394:	201d0314 	.word	0x201d0314
 8016398:	14          	.byte	0x14
 8016399:	00          	.byte	0x00
 801639a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801639e:	05e1      	lsls	r1, r4, #23
 80163a0:	bf48      	it	mi
 80163a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80163a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80163aa:	0d1b      	lsrs	r3, r3, #20
 80163ac:	051b      	lsls	r3, r3, #20
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d1bb      	bne.n	801632a <_strtod_l+0x72>
 80163b2:	f7fe fbd7 	bl	8014b64 <__errno>
 80163b6:	2322      	movs	r3, #34	@ 0x22
 80163b8:	6003      	str	r3, [r0, #0]
 80163ba:	e7b6      	b.n	801632a <_strtod_l+0x72>
 80163bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80163c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80163c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80163c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80163cc:	e7e7      	b.n	801639e <_strtod_l+0xe6>
 80163ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801654c <_strtod_l+0x294>
 80163d2:	e7e4      	b.n	801639e <_strtod_l+0xe6>
 80163d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80163d8:	f04f 3aff 	mov.w	sl, #4294967295
 80163dc:	e7df      	b.n	801639e <_strtod_l+0xe6>
 80163de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80163e0:	1c5a      	adds	r2, r3, #1
 80163e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80163e4:	785b      	ldrb	r3, [r3, #1]
 80163e6:	2b30      	cmp	r3, #48	@ 0x30
 80163e8:	d0f9      	beq.n	80163de <_strtod_l+0x126>
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d09d      	beq.n	801632a <_strtod_l+0x72>
 80163ee:	2301      	movs	r3, #1
 80163f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80163f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80163f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80163f6:	2300      	movs	r3, #0
 80163f8:	9308      	str	r3, [sp, #32]
 80163fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80163fc:	461f      	mov	r7, r3
 80163fe:	220a      	movs	r2, #10
 8016400:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016402:	7805      	ldrb	r5, [r0, #0]
 8016404:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016408:	b2d9      	uxtb	r1, r3
 801640a:	2909      	cmp	r1, #9
 801640c:	d928      	bls.n	8016460 <_strtod_l+0x1a8>
 801640e:	494e      	ldr	r1, [pc, #312]	@ (8016548 <_strtod_l+0x290>)
 8016410:	2201      	movs	r2, #1
 8016412:	f001 f991 	bl	8017738 <strncmp>
 8016416:	2800      	cmp	r0, #0
 8016418:	d032      	beq.n	8016480 <_strtod_l+0x1c8>
 801641a:	2000      	movs	r0, #0
 801641c:	462a      	mov	r2, r5
 801641e:	4681      	mov	r9, r0
 8016420:	463d      	mov	r5, r7
 8016422:	4603      	mov	r3, r0
 8016424:	2a65      	cmp	r2, #101	@ 0x65
 8016426:	d001      	beq.n	801642c <_strtod_l+0x174>
 8016428:	2a45      	cmp	r2, #69	@ 0x45
 801642a:	d114      	bne.n	8016456 <_strtod_l+0x19e>
 801642c:	b91d      	cbnz	r5, 8016436 <_strtod_l+0x17e>
 801642e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016430:	4302      	orrs	r2, r0
 8016432:	d095      	beq.n	8016360 <_strtod_l+0xa8>
 8016434:	2500      	movs	r5, #0
 8016436:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016438:	1c62      	adds	r2, r4, #1
 801643a:	9219      	str	r2, [sp, #100]	@ 0x64
 801643c:	7862      	ldrb	r2, [r4, #1]
 801643e:	2a2b      	cmp	r2, #43	@ 0x2b
 8016440:	d077      	beq.n	8016532 <_strtod_l+0x27a>
 8016442:	2a2d      	cmp	r2, #45	@ 0x2d
 8016444:	d07b      	beq.n	801653e <_strtod_l+0x286>
 8016446:	f04f 0c00 	mov.w	ip, #0
 801644a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801644e:	2909      	cmp	r1, #9
 8016450:	f240 8082 	bls.w	8016558 <_strtod_l+0x2a0>
 8016454:	9419      	str	r4, [sp, #100]	@ 0x64
 8016456:	f04f 0800 	mov.w	r8, #0
 801645a:	e0a2      	b.n	80165a2 <_strtod_l+0x2ea>
 801645c:	2300      	movs	r3, #0
 801645e:	e7c7      	b.n	80163f0 <_strtod_l+0x138>
 8016460:	2f08      	cmp	r7, #8
 8016462:	bfd5      	itete	le
 8016464:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8016466:	9908      	ldrgt	r1, [sp, #32]
 8016468:	fb02 3301 	mlale	r3, r2, r1, r3
 801646c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016470:	f100 0001 	add.w	r0, r0, #1
 8016474:	bfd4      	ite	le
 8016476:	930a      	strle	r3, [sp, #40]	@ 0x28
 8016478:	9308      	strgt	r3, [sp, #32]
 801647a:	3701      	adds	r7, #1
 801647c:	9019      	str	r0, [sp, #100]	@ 0x64
 801647e:	e7bf      	b.n	8016400 <_strtod_l+0x148>
 8016480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016482:	1c5a      	adds	r2, r3, #1
 8016484:	9219      	str	r2, [sp, #100]	@ 0x64
 8016486:	785a      	ldrb	r2, [r3, #1]
 8016488:	b37f      	cbz	r7, 80164ea <_strtod_l+0x232>
 801648a:	4681      	mov	r9, r0
 801648c:	463d      	mov	r5, r7
 801648e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016492:	2b09      	cmp	r3, #9
 8016494:	d912      	bls.n	80164bc <_strtod_l+0x204>
 8016496:	2301      	movs	r3, #1
 8016498:	e7c4      	b.n	8016424 <_strtod_l+0x16c>
 801649a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801649c:	1c5a      	adds	r2, r3, #1
 801649e:	9219      	str	r2, [sp, #100]	@ 0x64
 80164a0:	785a      	ldrb	r2, [r3, #1]
 80164a2:	3001      	adds	r0, #1
 80164a4:	2a30      	cmp	r2, #48	@ 0x30
 80164a6:	d0f8      	beq.n	801649a <_strtod_l+0x1e2>
 80164a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80164ac:	2b08      	cmp	r3, #8
 80164ae:	f200 84d3 	bhi.w	8016e58 <_strtod_l+0xba0>
 80164b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80164b6:	4681      	mov	r9, r0
 80164b8:	2000      	movs	r0, #0
 80164ba:	4605      	mov	r5, r0
 80164bc:	3a30      	subs	r2, #48	@ 0x30
 80164be:	f100 0301 	add.w	r3, r0, #1
 80164c2:	d02a      	beq.n	801651a <_strtod_l+0x262>
 80164c4:	4499      	add	r9, r3
 80164c6:	eb00 0c05 	add.w	ip, r0, r5
 80164ca:	462b      	mov	r3, r5
 80164cc:	210a      	movs	r1, #10
 80164ce:	4563      	cmp	r3, ip
 80164d0:	d10d      	bne.n	80164ee <_strtod_l+0x236>
 80164d2:	1c69      	adds	r1, r5, #1
 80164d4:	4401      	add	r1, r0
 80164d6:	4428      	add	r0, r5
 80164d8:	2808      	cmp	r0, #8
 80164da:	dc16      	bgt.n	801650a <_strtod_l+0x252>
 80164dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80164de:	230a      	movs	r3, #10
 80164e0:	fb03 2300 	mla	r3, r3, r0, r2
 80164e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80164e6:	2300      	movs	r3, #0
 80164e8:	e018      	b.n	801651c <_strtod_l+0x264>
 80164ea:	4638      	mov	r0, r7
 80164ec:	e7da      	b.n	80164a4 <_strtod_l+0x1ec>
 80164ee:	2b08      	cmp	r3, #8
 80164f0:	f103 0301 	add.w	r3, r3, #1
 80164f4:	dc03      	bgt.n	80164fe <_strtod_l+0x246>
 80164f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80164f8:	434e      	muls	r6, r1
 80164fa:	960a      	str	r6, [sp, #40]	@ 0x28
 80164fc:	e7e7      	b.n	80164ce <_strtod_l+0x216>
 80164fe:	2b10      	cmp	r3, #16
 8016500:	bfde      	ittt	le
 8016502:	9e08      	ldrle	r6, [sp, #32]
 8016504:	434e      	mulle	r6, r1
 8016506:	9608      	strle	r6, [sp, #32]
 8016508:	e7e1      	b.n	80164ce <_strtod_l+0x216>
 801650a:	280f      	cmp	r0, #15
 801650c:	dceb      	bgt.n	80164e6 <_strtod_l+0x22e>
 801650e:	9808      	ldr	r0, [sp, #32]
 8016510:	230a      	movs	r3, #10
 8016512:	fb03 2300 	mla	r3, r3, r0, r2
 8016516:	9308      	str	r3, [sp, #32]
 8016518:	e7e5      	b.n	80164e6 <_strtod_l+0x22e>
 801651a:	4629      	mov	r1, r5
 801651c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801651e:	1c50      	adds	r0, r2, #1
 8016520:	9019      	str	r0, [sp, #100]	@ 0x64
 8016522:	7852      	ldrb	r2, [r2, #1]
 8016524:	4618      	mov	r0, r3
 8016526:	460d      	mov	r5, r1
 8016528:	e7b1      	b.n	801648e <_strtod_l+0x1d6>
 801652a:	f04f 0900 	mov.w	r9, #0
 801652e:	2301      	movs	r3, #1
 8016530:	e77d      	b.n	801642e <_strtod_l+0x176>
 8016532:	f04f 0c00 	mov.w	ip, #0
 8016536:	1ca2      	adds	r2, r4, #2
 8016538:	9219      	str	r2, [sp, #100]	@ 0x64
 801653a:	78a2      	ldrb	r2, [r4, #2]
 801653c:	e785      	b.n	801644a <_strtod_l+0x192>
 801653e:	f04f 0c01 	mov.w	ip, #1
 8016542:	e7f8      	b.n	8016536 <_strtod_l+0x27e>
 8016544:	080193d0 	.word	0x080193d0
 8016548:	080193b8 	.word	0x080193b8
 801654c:	7ff00000 	.word	0x7ff00000
 8016550:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016552:	1c51      	adds	r1, r2, #1
 8016554:	9119      	str	r1, [sp, #100]	@ 0x64
 8016556:	7852      	ldrb	r2, [r2, #1]
 8016558:	2a30      	cmp	r2, #48	@ 0x30
 801655a:	d0f9      	beq.n	8016550 <_strtod_l+0x298>
 801655c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016560:	2908      	cmp	r1, #8
 8016562:	f63f af78 	bhi.w	8016456 <_strtod_l+0x19e>
 8016566:	3a30      	subs	r2, #48	@ 0x30
 8016568:	920e      	str	r2, [sp, #56]	@ 0x38
 801656a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801656c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801656e:	f04f 080a 	mov.w	r8, #10
 8016572:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016574:	1c56      	adds	r6, r2, #1
 8016576:	9619      	str	r6, [sp, #100]	@ 0x64
 8016578:	7852      	ldrb	r2, [r2, #1]
 801657a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801657e:	f1be 0f09 	cmp.w	lr, #9
 8016582:	d939      	bls.n	80165f8 <_strtod_l+0x340>
 8016584:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016586:	1a76      	subs	r6, r6, r1
 8016588:	2e08      	cmp	r6, #8
 801658a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801658e:	dc03      	bgt.n	8016598 <_strtod_l+0x2e0>
 8016590:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016592:	4588      	cmp	r8, r1
 8016594:	bfa8      	it	ge
 8016596:	4688      	movge	r8, r1
 8016598:	f1bc 0f00 	cmp.w	ip, #0
 801659c:	d001      	beq.n	80165a2 <_strtod_l+0x2ea>
 801659e:	f1c8 0800 	rsb	r8, r8, #0
 80165a2:	2d00      	cmp	r5, #0
 80165a4:	d14e      	bne.n	8016644 <_strtod_l+0x38c>
 80165a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80165a8:	4308      	orrs	r0, r1
 80165aa:	f47f aebe 	bne.w	801632a <_strtod_l+0x72>
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	f47f aed6 	bne.w	8016360 <_strtod_l+0xa8>
 80165b4:	2a69      	cmp	r2, #105	@ 0x69
 80165b6:	d028      	beq.n	801660a <_strtod_l+0x352>
 80165b8:	dc25      	bgt.n	8016606 <_strtod_l+0x34e>
 80165ba:	2a49      	cmp	r2, #73	@ 0x49
 80165bc:	d025      	beq.n	801660a <_strtod_l+0x352>
 80165be:	2a4e      	cmp	r2, #78	@ 0x4e
 80165c0:	f47f aece 	bne.w	8016360 <_strtod_l+0xa8>
 80165c4:	499b      	ldr	r1, [pc, #620]	@ (8016834 <_strtod_l+0x57c>)
 80165c6:	a819      	add	r0, sp, #100	@ 0x64
 80165c8:	f001 fb70 	bl	8017cac <__match>
 80165cc:	2800      	cmp	r0, #0
 80165ce:	f43f aec7 	beq.w	8016360 <_strtod_l+0xa8>
 80165d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	2b28      	cmp	r3, #40	@ 0x28
 80165d8:	d12e      	bne.n	8016638 <_strtod_l+0x380>
 80165da:	4997      	ldr	r1, [pc, #604]	@ (8016838 <_strtod_l+0x580>)
 80165dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80165de:	a819      	add	r0, sp, #100	@ 0x64
 80165e0:	f001 fb78 	bl	8017cd4 <__hexnan>
 80165e4:	2805      	cmp	r0, #5
 80165e6:	d127      	bne.n	8016638 <_strtod_l+0x380>
 80165e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80165ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80165ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80165f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80165f6:	e698      	b.n	801632a <_strtod_l+0x72>
 80165f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80165fa:	fb08 2101 	mla	r1, r8, r1, r2
 80165fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016602:	920e      	str	r2, [sp, #56]	@ 0x38
 8016604:	e7b5      	b.n	8016572 <_strtod_l+0x2ba>
 8016606:	2a6e      	cmp	r2, #110	@ 0x6e
 8016608:	e7da      	b.n	80165c0 <_strtod_l+0x308>
 801660a:	498c      	ldr	r1, [pc, #560]	@ (801683c <_strtod_l+0x584>)
 801660c:	a819      	add	r0, sp, #100	@ 0x64
 801660e:	f001 fb4d 	bl	8017cac <__match>
 8016612:	2800      	cmp	r0, #0
 8016614:	f43f aea4 	beq.w	8016360 <_strtod_l+0xa8>
 8016618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801661a:	4989      	ldr	r1, [pc, #548]	@ (8016840 <_strtod_l+0x588>)
 801661c:	3b01      	subs	r3, #1
 801661e:	a819      	add	r0, sp, #100	@ 0x64
 8016620:	9319      	str	r3, [sp, #100]	@ 0x64
 8016622:	f001 fb43 	bl	8017cac <__match>
 8016626:	b910      	cbnz	r0, 801662e <_strtod_l+0x376>
 8016628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801662a:	3301      	adds	r3, #1
 801662c:	9319      	str	r3, [sp, #100]	@ 0x64
 801662e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8016850 <_strtod_l+0x598>
 8016632:	f04f 0a00 	mov.w	sl, #0
 8016636:	e678      	b.n	801632a <_strtod_l+0x72>
 8016638:	4882      	ldr	r0, [pc, #520]	@ (8016844 <_strtod_l+0x58c>)
 801663a:	f001 f891 	bl	8017760 <nan>
 801663e:	ec5b ab10 	vmov	sl, fp, d0
 8016642:	e672      	b.n	801632a <_strtod_l+0x72>
 8016644:	eba8 0309 	sub.w	r3, r8, r9
 8016648:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801664a:	9309      	str	r3, [sp, #36]	@ 0x24
 801664c:	2f00      	cmp	r7, #0
 801664e:	bf08      	it	eq
 8016650:	462f      	moveq	r7, r5
 8016652:	2d10      	cmp	r5, #16
 8016654:	462c      	mov	r4, r5
 8016656:	bfa8      	it	ge
 8016658:	2410      	movge	r4, #16
 801665a:	f7e9 ff7b 	bl	8000554 <__aeabi_ui2d>
 801665e:	2d09      	cmp	r5, #9
 8016660:	4682      	mov	sl, r0
 8016662:	468b      	mov	fp, r1
 8016664:	dc13      	bgt.n	801668e <_strtod_l+0x3d6>
 8016666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016668:	2b00      	cmp	r3, #0
 801666a:	f43f ae5e 	beq.w	801632a <_strtod_l+0x72>
 801666e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016670:	dd78      	ble.n	8016764 <_strtod_l+0x4ac>
 8016672:	2b16      	cmp	r3, #22
 8016674:	dc5f      	bgt.n	8016736 <_strtod_l+0x47e>
 8016676:	4974      	ldr	r1, [pc, #464]	@ (8016848 <_strtod_l+0x590>)
 8016678:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801667c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016680:	4652      	mov	r2, sl
 8016682:	465b      	mov	r3, fp
 8016684:	f7e9 ffe0 	bl	8000648 <__aeabi_dmul>
 8016688:	4682      	mov	sl, r0
 801668a:	468b      	mov	fp, r1
 801668c:	e64d      	b.n	801632a <_strtod_l+0x72>
 801668e:	4b6e      	ldr	r3, [pc, #440]	@ (8016848 <_strtod_l+0x590>)
 8016690:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016694:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016698:	f7e9 ffd6 	bl	8000648 <__aeabi_dmul>
 801669c:	4682      	mov	sl, r0
 801669e:	9808      	ldr	r0, [sp, #32]
 80166a0:	468b      	mov	fp, r1
 80166a2:	f7e9 ff57 	bl	8000554 <__aeabi_ui2d>
 80166a6:	4602      	mov	r2, r0
 80166a8:	460b      	mov	r3, r1
 80166aa:	4650      	mov	r0, sl
 80166ac:	4659      	mov	r1, fp
 80166ae:	f7e9 fe15 	bl	80002dc <__adddf3>
 80166b2:	2d0f      	cmp	r5, #15
 80166b4:	4682      	mov	sl, r0
 80166b6:	468b      	mov	fp, r1
 80166b8:	ddd5      	ble.n	8016666 <_strtod_l+0x3ae>
 80166ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166bc:	1b2c      	subs	r4, r5, r4
 80166be:	441c      	add	r4, r3
 80166c0:	2c00      	cmp	r4, #0
 80166c2:	f340 8096 	ble.w	80167f2 <_strtod_l+0x53a>
 80166c6:	f014 030f 	ands.w	r3, r4, #15
 80166ca:	d00a      	beq.n	80166e2 <_strtod_l+0x42a>
 80166cc:	495e      	ldr	r1, [pc, #376]	@ (8016848 <_strtod_l+0x590>)
 80166ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80166d2:	4652      	mov	r2, sl
 80166d4:	465b      	mov	r3, fp
 80166d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166da:	f7e9 ffb5 	bl	8000648 <__aeabi_dmul>
 80166de:	4682      	mov	sl, r0
 80166e0:	468b      	mov	fp, r1
 80166e2:	f034 040f 	bics.w	r4, r4, #15
 80166e6:	d073      	beq.n	80167d0 <_strtod_l+0x518>
 80166e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80166ec:	dd48      	ble.n	8016780 <_strtod_l+0x4c8>
 80166ee:	2400      	movs	r4, #0
 80166f0:	46a0      	mov	r8, r4
 80166f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80166f4:	46a1      	mov	r9, r4
 80166f6:	9a05      	ldr	r2, [sp, #20]
 80166f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016850 <_strtod_l+0x598>
 80166fc:	2322      	movs	r3, #34	@ 0x22
 80166fe:	6013      	str	r3, [r2, #0]
 8016700:	f04f 0a00 	mov.w	sl, #0
 8016704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016706:	2b00      	cmp	r3, #0
 8016708:	f43f ae0f 	beq.w	801632a <_strtod_l+0x72>
 801670c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801670e:	9805      	ldr	r0, [sp, #20]
 8016710:	f7ff f940 	bl	8015994 <_Bfree>
 8016714:	9805      	ldr	r0, [sp, #20]
 8016716:	4649      	mov	r1, r9
 8016718:	f7ff f93c 	bl	8015994 <_Bfree>
 801671c:	9805      	ldr	r0, [sp, #20]
 801671e:	4641      	mov	r1, r8
 8016720:	f7ff f938 	bl	8015994 <_Bfree>
 8016724:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016726:	9805      	ldr	r0, [sp, #20]
 8016728:	f7ff f934 	bl	8015994 <_Bfree>
 801672c:	9805      	ldr	r0, [sp, #20]
 801672e:	4621      	mov	r1, r4
 8016730:	f7ff f930 	bl	8015994 <_Bfree>
 8016734:	e5f9      	b.n	801632a <_strtod_l+0x72>
 8016736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016738:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801673c:	4293      	cmp	r3, r2
 801673e:	dbbc      	blt.n	80166ba <_strtod_l+0x402>
 8016740:	4c41      	ldr	r4, [pc, #260]	@ (8016848 <_strtod_l+0x590>)
 8016742:	f1c5 050f 	rsb	r5, r5, #15
 8016746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801674a:	4652      	mov	r2, sl
 801674c:	465b      	mov	r3, fp
 801674e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016752:	f7e9 ff79 	bl	8000648 <__aeabi_dmul>
 8016756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016758:	1b5d      	subs	r5, r3, r5
 801675a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801675e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016762:	e78f      	b.n	8016684 <_strtod_l+0x3cc>
 8016764:	3316      	adds	r3, #22
 8016766:	dba8      	blt.n	80166ba <_strtod_l+0x402>
 8016768:	4b37      	ldr	r3, [pc, #220]	@ (8016848 <_strtod_l+0x590>)
 801676a:	eba9 0808 	sub.w	r8, r9, r8
 801676e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016772:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016776:	4650      	mov	r0, sl
 8016778:	4659      	mov	r1, fp
 801677a:	f7ea f88f 	bl	800089c <__aeabi_ddiv>
 801677e:	e783      	b.n	8016688 <_strtod_l+0x3d0>
 8016780:	4b32      	ldr	r3, [pc, #200]	@ (801684c <_strtod_l+0x594>)
 8016782:	9308      	str	r3, [sp, #32]
 8016784:	2300      	movs	r3, #0
 8016786:	1124      	asrs	r4, r4, #4
 8016788:	4650      	mov	r0, sl
 801678a:	4659      	mov	r1, fp
 801678c:	461e      	mov	r6, r3
 801678e:	2c01      	cmp	r4, #1
 8016790:	dc21      	bgt.n	80167d6 <_strtod_l+0x51e>
 8016792:	b10b      	cbz	r3, 8016798 <_strtod_l+0x4e0>
 8016794:	4682      	mov	sl, r0
 8016796:	468b      	mov	fp, r1
 8016798:	492c      	ldr	r1, [pc, #176]	@ (801684c <_strtod_l+0x594>)
 801679a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801679e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80167a2:	4652      	mov	r2, sl
 80167a4:	465b      	mov	r3, fp
 80167a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167aa:	f7e9 ff4d 	bl	8000648 <__aeabi_dmul>
 80167ae:	4b28      	ldr	r3, [pc, #160]	@ (8016850 <_strtod_l+0x598>)
 80167b0:	460a      	mov	r2, r1
 80167b2:	400b      	ands	r3, r1
 80167b4:	4927      	ldr	r1, [pc, #156]	@ (8016854 <_strtod_l+0x59c>)
 80167b6:	428b      	cmp	r3, r1
 80167b8:	4682      	mov	sl, r0
 80167ba:	d898      	bhi.n	80166ee <_strtod_l+0x436>
 80167bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80167c0:	428b      	cmp	r3, r1
 80167c2:	bf86      	itte	hi
 80167c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8016858 <_strtod_l+0x5a0>
 80167c8:	f04f 3aff 	movhi.w	sl, #4294967295
 80167cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80167d0:	2300      	movs	r3, #0
 80167d2:	9308      	str	r3, [sp, #32]
 80167d4:	e07a      	b.n	80168cc <_strtod_l+0x614>
 80167d6:	07e2      	lsls	r2, r4, #31
 80167d8:	d505      	bpl.n	80167e6 <_strtod_l+0x52e>
 80167da:	9b08      	ldr	r3, [sp, #32]
 80167dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e0:	f7e9 ff32 	bl	8000648 <__aeabi_dmul>
 80167e4:	2301      	movs	r3, #1
 80167e6:	9a08      	ldr	r2, [sp, #32]
 80167e8:	3208      	adds	r2, #8
 80167ea:	3601      	adds	r6, #1
 80167ec:	1064      	asrs	r4, r4, #1
 80167ee:	9208      	str	r2, [sp, #32]
 80167f0:	e7cd      	b.n	801678e <_strtod_l+0x4d6>
 80167f2:	d0ed      	beq.n	80167d0 <_strtod_l+0x518>
 80167f4:	4264      	negs	r4, r4
 80167f6:	f014 020f 	ands.w	r2, r4, #15
 80167fa:	d00a      	beq.n	8016812 <_strtod_l+0x55a>
 80167fc:	4b12      	ldr	r3, [pc, #72]	@ (8016848 <_strtod_l+0x590>)
 80167fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016802:	4650      	mov	r0, sl
 8016804:	4659      	mov	r1, fp
 8016806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801680a:	f7ea f847 	bl	800089c <__aeabi_ddiv>
 801680e:	4682      	mov	sl, r0
 8016810:	468b      	mov	fp, r1
 8016812:	1124      	asrs	r4, r4, #4
 8016814:	d0dc      	beq.n	80167d0 <_strtod_l+0x518>
 8016816:	2c1f      	cmp	r4, #31
 8016818:	dd20      	ble.n	801685c <_strtod_l+0x5a4>
 801681a:	2400      	movs	r4, #0
 801681c:	46a0      	mov	r8, r4
 801681e:	940a      	str	r4, [sp, #40]	@ 0x28
 8016820:	46a1      	mov	r9, r4
 8016822:	9a05      	ldr	r2, [sp, #20]
 8016824:	2322      	movs	r3, #34	@ 0x22
 8016826:	f04f 0a00 	mov.w	sl, #0
 801682a:	f04f 0b00 	mov.w	fp, #0
 801682e:	6013      	str	r3, [r2, #0]
 8016830:	e768      	b.n	8016704 <_strtod_l+0x44c>
 8016832:	bf00      	nop
 8016834:	080191a9 	.word	0x080191a9
 8016838:	080193bc 	.word	0x080193bc
 801683c:	080191a1 	.word	0x080191a1
 8016840:	080191d8 	.word	0x080191d8
 8016844:	0801919b 	.word	0x0801919b
 8016848:	080192f0 	.word	0x080192f0
 801684c:	080192c8 	.word	0x080192c8
 8016850:	7ff00000 	.word	0x7ff00000
 8016854:	7ca00000 	.word	0x7ca00000
 8016858:	7fefffff 	.word	0x7fefffff
 801685c:	f014 0310 	ands.w	r3, r4, #16
 8016860:	bf18      	it	ne
 8016862:	236a      	movne	r3, #106	@ 0x6a
 8016864:	4ea9      	ldr	r6, [pc, #676]	@ (8016b0c <_strtod_l+0x854>)
 8016866:	9308      	str	r3, [sp, #32]
 8016868:	4650      	mov	r0, sl
 801686a:	4659      	mov	r1, fp
 801686c:	2300      	movs	r3, #0
 801686e:	07e2      	lsls	r2, r4, #31
 8016870:	d504      	bpl.n	801687c <_strtod_l+0x5c4>
 8016872:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016876:	f7e9 fee7 	bl	8000648 <__aeabi_dmul>
 801687a:	2301      	movs	r3, #1
 801687c:	1064      	asrs	r4, r4, #1
 801687e:	f106 0608 	add.w	r6, r6, #8
 8016882:	d1f4      	bne.n	801686e <_strtod_l+0x5b6>
 8016884:	b10b      	cbz	r3, 801688a <_strtod_l+0x5d2>
 8016886:	4682      	mov	sl, r0
 8016888:	468b      	mov	fp, r1
 801688a:	9b08      	ldr	r3, [sp, #32]
 801688c:	b1b3      	cbz	r3, 80168bc <_strtod_l+0x604>
 801688e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016892:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016896:	2b00      	cmp	r3, #0
 8016898:	4659      	mov	r1, fp
 801689a:	dd0f      	ble.n	80168bc <_strtod_l+0x604>
 801689c:	2b1f      	cmp	r3, #31
 801689e:	dd55      	ble.n	801694c <_strtod_l+0x694>
 80168a0:	2b34      	cmp	r3, #52	@ 0x34
 80168a2:	bfde      	ittt	le
 80168a4:	f04f 33ff 	movle.w	r3, #4294967295
 80168a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80168ac:	4093      	lslle	r3, r2
 80168ae:	f04f 0a00 	mov.w	sl, #0
 80168b2:	bfcc      	ite	gt
 80168b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80168b8:	ea03 0b01 	andle.w	fp, r3, r1
 80168bc:	2200      	movs	r2, #0
 80168be:	2300      	movs	r3, #0
 80168c0:	4650      	mov	r0, sl
 80168c2:	4659      	mov	r1, fp
 80168c4:	f7ea f928 	bl	8000b18 <__aeabi_dcmpeq>
 80168c8:	2800      	cmp	r0, #0
 80168ca:	d1a6      	bne.n	801681a <_strtod_l+0x562>
 80168cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80168ce:	9300      	str	r3, [sp, #0]
 80168d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80168d2:	9805      	ldr	r0, [sp, #20]
 80168d4:	462b      	mov	r3, r5
 80168d6:	463a      	mov	r2, r7
 80168d8:	f7ff f8c4 	bl	8015a64 <__s2b>
 80168dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80168de:	2800      	cmp	r0, #0
 80168e0:	f43f af05 	beq.w	80166ee <_strtod_l+0x436>
 80168e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80168e6:	2a00      	cmp	r2, #0
 80168e8:	eba9 0308 	sub.w	r3, r9, r8
 80168ec:	bfa8      	it	ge
 80168ee:	2300      	movge	r3, #0
 80168f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80168f2:	2400      	movs	r4, #0
 80168f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80168f8:	9316      	str	r3, [sp, #88]	@ 0x58
 80168fa:	46a0      	mov	r8, r4
 80168fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80168fe:	9805      	ldr	r0, [sp, #20]
 8016900:	6859      	ldr	r1, [r3, #4]
 8016902:	f7ff f807 	bl	8015914 <_Balloc>
 8016906:	4681      	mov	r9, r0
 8016908:	2800      	cmp	r0, #0
 801690a:	f43f aef4 	beq.w	80166f6 <_strtod_l+0x43e>
 801690e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016910:	691a      	ldr	r2, [r3, #16]
 8016912:	3202      	adds	r2, #2
 8016914:	f103 010c 	add.w	r1, r3, #12
 8016918:	0092      	lsls	r2, r2, #2
 801691a:	300c      	adds	r0, #12
 801691c:	f7fe f94f 	bl	8014bbe <memcpy>
 8016920:	ec4b ab10 	vmov	d0, sl, fp
 8016924:	9805      	ldr	r0, [sp, #20]
 8016926:	aa1c      	add	r2, sp, #112	@ 0x70
 8016928:	a91b      	add	r1, sp, #108	@ 0x6c
 801692a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801692e:	f7ff fbd5 	bl	80160dc <__d2b>
 8016932:	901a      	str	r0, [sp, #104]	@ 0x68
 8016934:	2800      	cmp	r0, #0
 8016936:	f43f aede 	beq.w	80166f6 <_strtod_l+0x43e>
 801693a:	9805      	ldr	r0, [sp, #20]
 801693c:	2101      	movs	r1, #1
 801693e:	f7ff f927 	bl	8015b90 <__i2b>
 8016942:	4680      	mov	r8, r0
 8016944:	b948      	cbnz	r0, 801695a <_strtod_l+0x6a2>
 8016946:	f04f 0800 	mov.w	r8, #0
 801694a:	e6d4      	b.n	80166f6 <_strtod_l+0x43e>
 801694c:	f04f 32ff 	mov.w	r2, #4294967295
 8016950:	fa02 f303 	lsl.w	r3, r2, r3
 8016954:	ea03 0a0a 	and.w	sl, r3, sl
 8016958:	e7b0      	b.n	80168bc <_strtod_l+0x604>
 801695a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801695c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801695e:	2d00      	cmp	r5, #0
 8016960:	bfab      	itete	ge
 8016962:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016964:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016966:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016968:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801696a:	bfac      	ite	ge
 801696c:	18ef      	addge	r7, r5, r3
 801696e:	1b5e      	sublt	r6, r3, r5
 8016970:	9b08      	ldr	r3, [sp, #32]
 8016972:	1aed      	subs	r5, r5, r3
 8016974:	4415      	add	r5, r2
 8016976:	4b66      	ldr	r3, [pc, #408]	@ (8016b10 <_strtod_l+0x858>)
 8016978:	3d01      	subs	r5, #1
 801697a:	429d      	cmp	r5, r3
 801697c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016980:	da50      	bge.n	8016a24 <_strtod_l+0x76c>
 8016982:	1b5b      	subs	r3, r3, r5
 8016984:	2b1f      	cmp	r3, #31
 8016986:	eba2 0203 	sub.w	r2, r2, r3
 801698a:	f04f 0101 	mov.w	r1, #1
 801698e:	dc3d      	bgt.n	8016a0c <_strtod_l+0x754>
 8016990:	fa01 f303 	lsl.w	r3, r1, r3
 8016994:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016996:	2300      	movs	r3, #0
 8016998:	9310      	str	r3, [sp, #64]	@ 0x40
 801699a:	18bd      	adds	r5, r7, r2
 801699c:	9b08      	ldr	r3, [sp, #32]
 801699e:	42af      	cmp	r7, r5
 80169a0:	4416      	add	r6, r2
 80169a2:	441e      	add	r6, r3
 80169a4:	463b      	mov	r3, r7
 80169a6:	bfa8      	it	ge
 80169a8:	462b      	movge	r3, r5
 80169aa:	42b3      	cmp	r3, r6
 80169ac:	bfa8      	it	ge
 80169ae:	4633      	movge	r3, r6
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	bfc2      	ittt	gt
 80169b4:	1aed      	subgt	r5, r5, r3
 80169b6:	1af6      	subgt	r6, r6, r3
 80169b8:	1aff      	subgt	r7, r7, r3
 80169ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80169bc:	2b00      	cmp	r3, #0
 80169be:	dd16      	ble.n	80169ee <_strtod_l+0x736>
 80169c0:	4641      	mov	r1, r8
 80169c2:	9805      	ldr	r0, [sp, #20]
 80169c4:	461a      	mov	r2, r3
 80169c6:	f7ff f9a3 	bl	8015d10 <__pow5mult>
 80169ca:	4680      	mov	r8, r0
 80169cc:	2800      	cmp	r0, #0
 80169ce:	d0ba      	beq.n	8016946 <_strtod_l+0x68e>
 80169d0:	4601      	mov	r1, r0
 80169d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80169d4:	9805      	ldr	r0, [sp, #20]
 80169d6:	f7ff f8f1 	bl	8015bbc <__multiply>
 80169da:	900e      	str	r0, [sp, #56]	@ 0x38
 80169dc:	2800      	cmp	r0, #0
 80169de:	f43f ae8a 	beq.w	80166f6 <_strtod_l+0x43e>
 80169e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80169e4:	9805      	ldr	r0, [sp, #20]
 80169e6:	f7fe ffd5 	bl	8015994 <_Bfree>
 80169ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80169ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80169ee:	2d00      	cmp	r5, #0
 80169f0:	dc1d      	bgt.n	8016a2e <_strtod_l+0x776>
 80169f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	dd23      	ble.n	8016a40 <_strtod_l+0x788>
 80169f8:	4649      	mov	r1, r9
 80169fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80169fc:	9805      	ldr	r0, [sp, #20]
 80169fe:	f7ff f987 	bl	8015d10 <__pow5mult>
 8016a02:	4681      	mov	r9, r0
 8016a04:	b9e0      	cbnz	r0, 8016a40 <_strtod_l+0x788>
 8016a06:	f04f 0900 	mov.w	r9, #0
 8016a0a:	e674      	b.n	80166f6 <_strtod_l+0x43e>
 8016a0c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016a10:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016a14:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016a18:	35e2      	adds	r5, #226	@ 0xe2
 8016a1a:	fa01 f305 	lsl.w	r3, r1, r5
 8016a1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016a20:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016a22:	e7ba      	b.n	801699a <_strtod_l+0x6e2>
 8016a24:	2300      	movs	r3, #0
 8016a26:	9310      	str	r3, [sp, #64]	@ 0x40
 8016a28:	2301      	movs	r3, #1
 8016a2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016a2c:	e7b5      	b.n	801699a <_strtod_l+0x6e2>
 8016a2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016a30:	9805      	ldr	r0, [sp, #20]
 8016a32:	462a      	mov	r2, r5
 8016a34:	f7ff f9c6 	bl	8015dc4 <__lshift>
 8016a38:	901a      	str	r0, [sp, #104]	@ 0x68
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	d1d9      	bne.n	80169f2 <_strtod_l+0x73a>
 8016a3e:	e65a      	b.n	80166f6 <_strtod_l+0x43e>
 8016a40:	2e00      	cmp	r6, #0
 8016a42:	dd07      	ble.n	8016a54 <_strtod_l+0x79c>
 8016a44:	4649      	mov	r1, r9
 8016a46:	9805      	ldr	r0, [sp, #20]
 8016a48:	4632      	mov	r2, r6
 8016a4a:	f7ff f9bb 	bl	8015dc4 <__lshift>
 8016a4e:	4681      	mov	r9, r0
 8016a50:	2800      	cmp	r0, #0
 8016a52:	d0d8      	beq.n	8016a06 <_strtod_l+0x74e>
 8016a54:	2f00      	cmp	r7, #0
 8016a56:	dd08      	ble.n	8016a6a <_strtod_l+0x7b2>
 8016a58:	4641      	mov	r1, r8
 8016a5a:	9805      	ldr	r0, [sp, #20]
 8016a5c:	463a      	mov	r2, r7
 8016a5e:	f7ff f9b1 	bl	8015dc4 <__lshift>
 8016a62:	4680      	mov	r8, r0
 8016a64:	2800      	cmp	r0, #0
 8016a66:	f43f ae46 	beq.w	80166f6 <_strtod_l+0x43e>
 8016a6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016a6c:	9805      	ldr	r0, [sp, #20]
 8016a6e:	464a      	mov	r2, r9
 8016a70:	f7ff fa30 	bl	8015ed4 <__mdiff>
 8016a74:	4604      	mov	r4, r0
 8016a76:	2800      	cmp	r0, #0
 8016a78:	f43f ae3d 	beq.w	80166f6 <_strtod_l+0x43e>
 8016a7c:	68c3      	ldr	r3, [r0, #12]
 8016a7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016a80:	2300      	movs	r3, #0
 8016a82:	60c3      	str	r3, [r0, #12]
 8016a84:	4641      	mov	r1, r8
 8016a86:	f7ff fa09 	bl	8015e9c <__mcmp>
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	da46      	bge.n	8016b1c <_strtod_l+0x864>
 8016a8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a90:	ea53 030a 	orrs.w	r3, r3, sl
 8016a94:	d16c      	bne.n	8016b70 <_strtod_l+0x8b8>
 8016a96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d168      	bne.n	8016b70 <_strtod_l+0x8b8>
 8016a9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016aa2:	0d1b      	lsrs	r3, r3, #20
 8016aa4:	051b      	lsls	r3, r3, #20
 8016aa6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016aaa:	d961      	bls.n	8016b70 <_strtod_l+0x8b8>
 8016aac:	6963      	ldr	r3, [r4, #20]
 8016aae:	b913      	cbnz	r3, 8016ab6 <_strtod_l+0x7fe>
 8016ab0:	6923      	ldr	r3, [r4, #16]
 8016ab2:	2b01      	cmp	r3, #1
 8016ab4:	dd5c      	ble.n	8016b70 <_strtod_l+0x8b8>
 8016ab6:	4621      	mov	r1, r4
 8016ab8:	2201      	movs	r2, #1
 8016aba:	9805      	ldr	r0, [sp, #20]
 8016abc:	f7ff f982 	bl	8015dc4 <__lshift>
 8016ac0:	4641      	mov	r1, r8
 8016ac2:	4604      	mov	r4, r0
 8016ac4:	f7ff f9ea 	bl	8015e9c <__mcmp>
 8016ac8:	2800      	cmp	r0, #0
 8016aca:	dd51      	ble.n	8016b70 <_strtod_l+0x8b8>
 8016acc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016ad0:	9a08      	ldr	r2, [sp, #32]
 8016ad2:	0d1b      	lsrs	r3, r3, #20
 8016ad4:	051b      	lsls	r3, r3, #20
 8016ad6:	2a00      	cmp	r2, #0
 8016ad8:	d06b      	beq.n	8016bb2 <_strtod_l+0x8fa>
 8016ada:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016ade:	d868      	bhi.n	8016bb2 <_strtod_l+0x8fa>
 8016ae0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016ae4:	f67f ae9d 	bls.w	8016822 <_strtod_l+0x56a>
 8016ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8016b14 <_strtod_l+0x85c>)
 8016aea:	4650      	mov	r0, sl
 8016aec:	4659      	mov	r1, fp
 8016aee:	2200      	movs	r2, #0
 8016af0:	f7e9 fdaa 	bl	8000648 <__aeabi_dmul>
 8016af4:	4b08      	ldr	r3, [pc, #32]	@ (8016b18 <_strtod_l+0x860>)
 8016af6:	400b      	ands	r3, r1
 8016af8:	4682      	mov	sl, r0
 8016afa:	468b      	mov	fp, r1
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	f47f ae05 	bne.w	801670c <_strtod_l+0x454>
 8016b02:	9a05      	ldr	r2, [sp, #20]
 8016b04:	2322      	movs	r3, #34	@ 0x22
 8016b06:	6013      	str	r3, [r2, #0]
 8016b08:	e600      	b.n	801670c <_strtod_l+0x454>
 8016b0a:	bf00      	nop
 8016b0c:	080193e8 	.word	0x080193e8
 8016b10:	fffffc02 	.word	0xfffffc02
 8016b14:	39500000 	.word	0x39500000
 8016b18:	7ff00000 	.word	0x7ff00000
 8016b1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016b20:	d165      	bne.n	8016bee <_strtod_l+0x936>
 8016b22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016b24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b28:	b35a      	cbz	r2, 8016b82 <_strtod_l+0x8ca>
 8016b2a:	4a9f      	ldr	r2, [pc, #636]	@ (8016da8 <_strtod_l+0xaf0>)
 8016b2c:	4293      	cmp	r3, r2
 8016b2e:	d12b      	bne.n	8016b88 <_strtod_l+0x8d0>
 8016b30:	9b08      	ldr	r3, [sp, #32]
 8016b32:	4651      	mov	r1, sl
 8016b34:	b303      	cbz	r3, 8016b78 <_strtod_l+0x8c0>
 8016b36:	4b9d      	ldr	r3, [pc, #628]	@ (8016dac <_strtod_l+0xaf4>)
 8016b38:	465a      	mov	r2, fp
 8016b3a:	4013      	ands	r3, r2
 8016b3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016b40:	f04f 32ff 	mov.w	r2, #4294967295
 8016b44:	d81b      	bhi.n	8016b7e <_strtod_l+0x8c6>
 8016b46:	0d1b      	lsrs	r3, r3, #20
 8016b48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8016b50:	4299      	cmp	r1, r3
 8016b52:	d119      	bne.n	8016b88 <_strtod_l+0x8d0>
 8016b54:	4b96      	ldr	r3, [pc, #600]	@ (8016db0 <_strtod_l+0xaf8>)
 8016b56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b58:	429a      	cmp	r2, r3
 8016b5a:	d102      	bne.n	8016b62 <_strtod_l+0x8aa>
 8016b5c:	3101      	adds	r1, #1
 8016b5e:	f43f adca 	beq.w	80166f6 <_strtod_l+0x43e>
 8016b62:	4b92      	ldr	r3, [pc, #584]	@ (8016dac <_strtod_l+0xaf4>)
 8016b64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b66:	401a      	ands	r2, r3
 8016b68:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016b6c:	f04f 0a00 	mov.w	sl, #0
 8016b70:	9b08      	ldr	r3, [sp, #32]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d1b8      	bne.n	8016ae8 <_strtod_l+0x830>
 8016b76:	e5c9      	b.n	801670c <_strtod_l+0x454>
 8016b78:	f04f 33ff 	mov.w	r3, #4294967295
 8016b7c:	e7e8      	b.n	8016b50 <_strtod_l+0x898>
 8016b7e:	4613      	mov	r3, r2
 8016b80:	e7e6      	b.n	8016b50 <_strtod_l+0x898>
 8016b82:	ea53 030a 	orrs.w	r3, r3, sl
 8016b86:	d0a1      	beq.n	8016acc <_strtod_l+0x814>
 8016b88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016b8a:	b1db      	cbz	r3, 8016bc4 <_strtod_l+0x90c>
 8016b8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b8e:	4213      	tst	r3, r2
 8016b90:	d0ee      	beq.n	8016b70 <_strtod_l+0x8b8>
 8016b92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016b94:	9a08      	ldr	r2, [sp, #32]
 8016b96:	4650      	mov	r0, sl
 8016b98:	4659      	mov	r1, fp
 8016b9a:	b1bb      	cbz	r3, 8016bcc <_strtod_l+0x914>
 8016b9c:	f7ff fb6c 	bl	8016278 <sulp>
 8016ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016ba4:	ec53 2b10 	vmov	r2, r3, d0
 8016ba8:	f7e9 fb98 	bl	80002dc <__adddf3>
 8016bac:	4682      	mov	sl, r0
 8016bae:	468b      	mov	fp, r1
 8016bb0:	e7de      	b.n	8016b70 <_strtod_l+0x8b8>
 8016bb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016bb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016bba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016bbe:	f04f 3aff 	mov.w	sl, #4294967295
 8016bc2:	e7d5      	b.n	8016b70 <_strtod_l+0x8b8>
 8016bc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016bc6:	ea13 0f0a 	tst.w	r3, sl
 8016bca:	e7e1      	b.n	8016b90 <_strtod_l+0x8d8>
 8016bcc:	f7ff fb54 	bl	8016278 <sulp>
 8016bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016bd4:	ec53 2b10 	vmov	r2, r3, d0
 8016bd8:	f7e9 fb7e 	bl	80002d8 <__aeabi_dsub>
 8016bdc:	2200      	movs	r2, #0
 8016bde:	2300      	movs	r3, #0
 8016be0:	4682      	mov	sl, r0
 8016be2:	468b      	mov	fp, r1
 8016be4:	f7e9 ff98 	bl	8000b18 <__aeabi_dcmpeq>
 8016be8:	2800      	cmp	r0, #0
 8016bea:	d0c1      	beq.n	8016b70 <_strtod_l+0x8b8>
 8016bec:	e619      	b.n	8016822 <_strtod_l+0x56a>
 8016bee:	4641      	mov	r1, r8
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	f7ff facb 	bl	801618c <__ratio>
 8016bf6:	ec57 6b10 	vmov	r6, r7, d0
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016c00:	4630      	mov	r0, r6
 8016c02:	4639      	mov	r1, r7
 8016c04:	f7e9 ff9c 	bl	8000b40 <__aeabi_dcmple>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	d06f      	beq.n	8016cec <_strtod_l+0xa34>
 8016c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d17a      	bne.n	8016d08 <_strtod_l+0xa50>
 8016c12:	f1ba 0f00 	cmp.w	sl, #0
 8016c16:	d158      	bne.n	8016cca <_strtod_l+0xa12>
 8016c18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d15a      	bne.n	8016cd8 <_strtod_l+0xa20>
 8016c22:	4b64      	ldr	r3, [pc, #400]	@ (8016db4 <_strtod_l+0xafc>)
 8016c24:	2200      	movs	r2, #0
 8016c26:	4630      	mov	r0, r6
 8016c28:	4639      	mov	r1, r7
 8016c2a:	f7e9 ff7f 	bl	8000b2c <__aeabi_dcmplt>
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	d159      	bne.n	8016ce6 <_strtod_l+0xa2e>
 8016c32:	4630      	mov	r0, r6
 8016c34:	4639      	mov	r1, r7
 8016c36:	4b60      	ldr	r3, [pc, #384]	@ (8016db8 <_strtod_l+0xb00>)
 8016c38:	2200      	movs	r2, #0
 8016c3a:	f7e9 fd05 	bl	8000648 <__aeabi_dmul>
 8016c3e:	4606      	mov	r6, r0
 8016c40:	460f      	mov	r7, r1
 8016c42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016c46:	9606      	str	r6, [sp, #24]
 8016c48:	9307      	str	r3, [sp, #28]
 8016c4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016c4e:	4d57      	ldr	r5, [pc, #348]	@ (8016dac <_strtod_l+0xaf4>)
 8016c50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c56:	401d      	ands	r5, r3
 8016c58:	4b58      	ldr	r3, [pc, #352]	@ (8016dbc <_strtod_l+0xb04>)
 8016c5a:	429d      	cmp	r5, r3
 8016c5c:	f040 80b2 	bne.w	8016dc4 <_strtod_l+0xb0c>
 8016c60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016c66:	ec4b ab10 	vmov	d0, sl, fp
 8016c6a:	f7ff f9c7 	bl	8015ffc <__ulp>
 8016c6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016c72:	ec51 0b10 	vmov	r0, r1, d0
 8016c76:	f7e9 fce7 	bl	8000648 <__aeabi_dmul>
 8016c7a:	4652      	mov	r2, sl
 8016c7c:	465b      	mov	r3, fp
 8016c7e:	f7e9 fb2d 	bl	80002dc <__adddf3>
 8016c82:	460b      	mov	r3, r1
 8016c84:	4949      	ldr	r1, [pc, #292]	@ (8016dac <_strtod_l+0xaf4>)
 8016c86:	4a4e      	ldr	r2, [pc, #312]	@ (8016dc0 <_strtod_l+0xb08>)
 8016c88:	4019      	ands	r1, r3
 8016c8a:	4291      	cmp	r1, r2
 8016c8c:	4682      	mov	sl, r0
 8016c8e:	d942      	bls.n	8016d16 <_strtod_l+0xa5e>
 8016c90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016c92:	4b47      	ldr	r3, [pc, #284]	@ (8016db0 <_strtod_l+0xaf8>)
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d103      	bne.n	8016ca0 <_strtod_l+0x9e8>
 8016c98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c9a:	3301      	adds	r3, #1
 8016c9c:	f43f ad2b 	beq.w	80166f6 <_strtod_l+0x43e>
 8016ca0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016db0 <_strtod_l+0xaf8>
 8016ca4:	f04f 3aff 	mov.w	sl, #4294967295
 8016ca8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016caa:	9805      	ldr	r0, [sp, #20]
 8016cac:	f7fe fe72 	bl	8015994 <_Bfree>
 8016cb0:	9805      	ldr	r0, [sp, #20]
 8016cb2:	4649      	mov	r1, r9
 8016cb4:	f7fe fe6e 	bl	8015994 <_Bfree>
 8016cb8:	9805      	ldr	r0, [sp, #20]
 8016cba:	4641      	mov	r1, r8
 8016cbc:	f7fe fe6a 	bl	8015994 <_Bfree>
 8016cc0:	9805      	ldr	r0, [sp, #20]
 8016cc2:	4621      	mov	r1, r4
 8016cc4:	f7fe fe66 	bl	8015994 <_Bfree>
 8016cc8:	e618      	b.n	80168fc <_strtod_l+0x644>
 8016cca:	f1ba 0f01 	cmp.w	sl, #1
 8016cce:	d103      	bne.n	8016cd8 <_strtod_l+0xa20>
 8016cd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	f43f ada5 	beq.w	8016822 <_strtod_l+0x56a>
 8016cd8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8016d88 <_strtod_l+0xad0>
 8016cdc:	4f35      	ldr	r7, [pc, #212]	@ (8016db4 <_strtod_l+0xafc>)
 8016cde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016ce2:	2600      	movs	r6, #0
 8016ce4:	e7b1      	b.n	8016c4a <_strtod_l+0x992>
 8016ce6:	4f34      	ldr	r7, [pc, #208]	@ (8016db8 <_strtod_l+0xb00>)
 8016ce8:	2600      	movs	r6, #0
 8016cea:	e7aa      	b.n	8016c42 <_strtod_l+0x98a>
 8016cec:	4b32      	ldr	r3, [pc, #200]	@ (8016db8 <_strtod_l+0xb00>)
 8016cee:	4630      	mov	r0, r6
 8016cf0:	4639      	mov	r1, r7
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	f7e9 fca8 	bl	8000648 <__aeabi_dmul>
 8016cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016cfa:	4606      	mov	r6, r0
 8016cfc:	460f      	mov	r7, r1
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d09f      	beq.n	8016c42 <_strtod_l+0x98a>
 8016d02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016d06:	e7a0      	b.n	8016c4a <_strtod_l+0x992>
 8016d08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016d90 <_strtod_l+0xad8>
 8016d0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016d10:	ec57 6b17 	vmov	r6, r7, d7
 8016d14:	e799      	b.n	8016c4a <_strtod_l+0x992>
 8016d16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016d1a:	9b08      	ldr	r3, [sp, #32]
 8016d1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d1c1      	bne.n	8016ca8 <_strtod_l+0x9f0>
 8016d24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016d28:	0d1b      	lsrs	r3, r3, #20
 8016d2a:	051b      	lsls	r3, r3, #20
 8016d2c:	429d      	cmp	r5, r3
 8016d2e:	d1bb      	bne.n	8016ca8 <_strtod_l+0x9f0>
 8016d30:	4630      	mov	r0, r6
 8016d32:	4639      	mov	r1, r7
 8016d34:	f7e9 ffe8 	bl	8000d08 <__aeabi_d2lz>
 8016d38:	f7e9 fc58 	bl	80005ec <__aeabi_l2d>
 8016d3c:	4602      	mov	r2, r0
 8016d3e:	460b      	mov	r3, r1
 8016d40:	4630      	mov	r0, r6
 8016d42:	4639      	mov	r1, r7
 8016d44:	f7e9 fac8 	bl	80002d8 <__aeabi_dsub>
 8016d48:	460b      	mov	r3, r1
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016d50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8016d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d56:	ea46 060a 	orr.w	r6, r6, sl
 8016d5a:	431e      	orrs	r6, r3
 8016d5c:	d06f      	beq.n	8016e3e <_strtod_l+0xb86>
 8016d5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8016d98 <_strtod_l+0xae0>)
 8016d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d64:	f7e9 fee2 	bl	8000b2c <__aeabi_dcmplt>
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	f47f accf 	bne.w	801670c <_strtod_l+0x454>
 8016d6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8016da0 <_strtod_l+0xae8>)
 8016d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016d78:	f7e9 fef6 	bl	8000b68 <__aeabi_dcmpgt>
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	d093      	beq.n	8016ca8 <_strtod_l+0x9f0>
 8016d80:	e4c4      	b.n	801670c <_strtod_l+0x454>
 8016d82:	bf00      	nop
 8016d84:	f3af 8000 	nop.w
 8016d88:	00000000 	.word	0x00000000
 8016d8c:	bff00000 	.word	0xbff00000
 8016d90:	00000000 	.word	0x00000000
 8016d94:	3ff00000 	.word	0x3ff00000
 8016d98:	94a03595 	.word	0x94a03595
 8016d9c:	3fdfffff 	.word	0x3fdfffff
 8016da0:	35afe535 	.word	0x35afe535
 8016da4:	3fe00000 	.word	0x3fe00000
 8016da8:	000fffff 	.word	0x000fffff
 8016dac:	7ff00000 	.word	0x7ff00000
 8016db0:	7fefffff 	.word	0x7fefffff
 8016db4:	3ff00000 	.word	0x3ff00000
 8016db8:	3fe00000 	.word	0x3fe00000
 8016dbc:	7fe00000 	.word	0x7fe00000
 8016dc0:	7c9fffff 	.word	0x7c9fffff
 8016dc4:	9b08      	ldr	r3, [sp, #32]
 8016dc6:	b323      	cbz	r3, 8016e12 <_strtod_l+0xb5a>
 8016dc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016dcc:	d821      	bhi.n	8016e12 <_strtod_l+0xb5a>
 8016dce:	a328      	add	r3, pc, #160	@ (adr r3, 8016e70 <_strtod_l+0xbb8>)
 8016dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd4:	4630      	mov	r0, r6
 8016dd6:	4639      	mov	r1, r7
 8016dd8:	f7e9 feb2 	bl	8000b40 <__aeabi_dcmple>
 8016ddc:	b1a0      	cbz	r0, 8016e08 <_strtod_l+0xb50>
 8016dde:	4639      	mov	r1, r7
 8016de0:	4630      	mov	r0, r6
 8016de2:	f7e9 ff09 	bl	8000bf8 <__aeabi_d2uiz>
 8016de6:	2801      	cmp	r0, #1
 8016de8:	bf38      	it	cc
 8016dea:	2001      	movcc	r0, #1
 8016dec:	f7e9 fbb2 	bl	8000554 <__aeabi_ui2d>
 8016df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016df2:	4606      	mov	r6, r0
 8016df4:	460f      	mov	r7, r1
 8016df6:	b9fb      	cbnz	r3, 8016e38 <_strtod_l+0xb80>
 8016df8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016dfc:	9014      	str	r0, [sp, #80]	@ 0x50
 8016dfe:	9315      	str	r3, [sp, #84]	@ 0x54
 8016e00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8016e04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016e08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016e0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016e0e:	1b5b      	subs	r3, r3, r5
 8016e10:	9311      	str	r3, [sp, #68]	@ 0x44
 8016e12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016e16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016e1a:	f7ff f8ef 	bl	8015ffc <__ulp>
 8016e1e:	4650      	mov	r0, sl
 8016e20:	ec53 2b10 	vmov	r2, r3, d0
 8016e24:	4659      	mov	r1, fp
 8016e26:	f7e9 fc0f 	bl	8000648 <__aeabi_dmul>
 8016e2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016e2e:	f7e9 fa55 	bl	80002dc <__adddf3>
 8016e32:	4682      	mov	sl, r0
 8016e34:	468b      	mov	fp, r1
 8016e36:	e770      	b.n	8016d1a <_strtod_l+0xa62>
 8016e38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8016e3c:	e7e0      	b.n	8016e00 <_strtod_l+0xb48>
 8016e3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8016e78 <_strtod_l+0xbc0>)
 8016e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e44:	f7e9 fe72 	bl	8000b2c <__aeabi_dcmplt>
 8016e48:	e798      	b.n	8016d7c <_strtod_l+0xac4>
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016e4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016e50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e52:	6013      	str	r3, [r2, #0]
 8016e54:	f7ff ba6d 	b.w	8016332 <_strtod_l+0x7a>
 8016e58:	2a65      	cmp	r2, #101	@ 0x65
 8016e5a:	f43f ab66 	beq.w	801652a <_strtod_l+0x272>
 8016e5e:	2a45      	cmp	r2, #69	@ 0x45
 8016e60:	f43f ab63 	beq.w	801652a <_strtod_l+0x272>
 8016e64:	2301      	movs	r3, #1
 8016e66:	f7ff bb9e 	b.w	80165a6 <_strtod_l+0x2ee>
 8016e6a:	bf00      	nop
 8016e6c:	f3af 8000 	nop.w
 8016e70:	ffc00000 	.word	0xffc00000
 8016e74:	41dfffff 	.word	0x41dfffff
 8016e78:	94a03595 	.word	0x94a03595
 8016e7c:	3fcfffff 	.word	0x3fcfffff

08016e80 <_strtod_r>:
 8016e80:	4b01      	ldr	r3, [pc, #4]	@ (8016e88 <_strtod_r+0x8>)
 8016e82:	f7ff ba19 	b.w	80162b8 <_strtod_l>
 8016e86:	bf00      	nop
 8016e88:	200000e0 	.word	0x200000e0

08016e8c <_strtol_l.constprop.0>:
 8016e8c:	2b24      	cmp	r3, #36	@ 0x24
 8016e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e92:	4686      	mov	lr, r0
 8016e94:	4690      	mov	r8, r2
 8016e96:	d801      	bhi.n	8016e9c <_strtol_l.constprop.0+0x10>
 8016e98:	2b01      	cmp	r3, #1
 8016e9a:	d106      	bne.n	8016eaa <_strtol_l.constprop.0+0x1e>
 8016e9c:	f7fd fe62 	bl	8014b64 <__errno>
 8016ea0:	2316      	movs	r3, #22
 8016ea2:	6003      	str	r3, [r0, #0]
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016eaa:	4834      	ldr	r0, [pc, #208]	@ (8016f7c <_strtol_l.constprop.0+0xf0>)
 8016eac:	460d      	mov	r5, r1
 8016eae:	462a      	mov	r2, r5
 8016eb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016eb4:	5d06      	ldrb	r6, [r0, r4]
 8016eb6:	f016 0608 	ands.w	r6, r6, #8
 8016eba:	d1f8      	bne.n	8016eae <_strtol_l.constprop.0+0x22>
 8016ebc:	2c2d      	cmp	r4, #45	@ 0x2d
 8016ebe:	d12d      	bne.n	8016f1c <_strtol_l.constprop.0+0x90>
 8016ec0:	782c      	ldrb	r4, [r5, #0]
 8016ec2:	2601      	movs	r6, #1
 8016ec4:	1c95      	adds	r5, r2, #2
 8016ec6:	f033 0210 	bics.w	r2, r3, #16
 8016eca:	d109      	bne.n	8016ee0 <_strtol_l.constprop.0+0x54>
 8016ecc:	2c30      	cmp	r4, #48	@ 0x30
 8016ece:	d12a      	bne.n	8016f26 <_strtol_l.constprop.0+0x9a>
 8016ed0:	782a      	ldrb	r2, [r5, #0]
 8016ed2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016ed6:	2a58      	cmp	r2, #88	@ 0x58
 8016ed8:	d125      	bne.n	8016f26 <_strtol_l.constprop.0+0x9a>
 8016eda:	786c      	ldrb	r4, [r5, #1]
 8016edc:	2310      	movs	r3, #16
 8016ede:	3502      	adds	r5, #2
 8016ee0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016ee4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016ee8:	2200      	movs	r2, #0
 8016eea:	fbbc f9f3 	udiv	r9, ip, r3
 8016eee:	4610      	mov	r0, r2
 8016ef0:	fb03 ca19 	mls	sl, r3, r9, ip
 8016ef4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016ef8:	2f09      	cmp	r7, #9
 8016efa:	d81b      	bhi.n	8016f34 <_strtol_l.constprop.0+0xa8>
 8016efc:	463c      	mov	r4, r7
 8016efe:	42a3      	cmp	r3, r4
 8016f00:	dd27      	ble.n	8016f52 <_strtol_l.constprop.0+0xc6>
 8016f02:	1c57      	adds	r7, r2, #1
 8016f04:	d007      	beq.n	8016f16 <_strtol_l.constprop.0+0x8a>
 8016f06:	4581      	cmp	r9, r0
 8016f08:	d320      	bcc.n	8016f4c <_strtol_l.constprop.0+0xc0>
 8016f0a:	d101      	bne.n	8016f10 <_strtol_l.constprop.0+0x84>
 8016f0c:	45a2      	cmp	sl, r4
 8016f0e:	db1d      	blt.n	8016f4c <_strtol_l.constprop.0+0xc0>
 8016f10:	fb00 4003 	mla	r0, r0, r3, r4
 8016f14:	2201      	movs	r2, #1
 8016f16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f1a:	e7eb      	b.n	8016ef4 <_strtol_l.constprop.0+0x68>
 8016f1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8016f1e:	bf04      	itt	eq
 8016f20:	782c      	ldrbeq	r4, [r5, #0]
 8016f22:	1c95      	addeq	r5, r2, #2
 8016f24:	e7cf      	b.n	8016ec6 <_strtol_l.constprop.0+0x3a>
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d1da      	bne.n	8016ee0 <_strtol_l.constprop.0+0x54>
 8016f2a:	2c30      	cmp	r4, #48	@ 0x30
 8016f2c:	bf0c      	ite	eq
 8016f2e:	2308      	moveq	r3, #8
 8016f30:	230a      	movne	r3, #10
 8016f32:	e7d5      	b.n	8016ee0 <_strtol_l.constprop.0+0x54>
 8016f34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016f38:	2f19      	cmp	r7, #25
 8016f3a:	d801      	bhi.n	8016f40 <_strtol_l.constprop.0+0xb4>
 8016f3c:	3c37      	subs	r4, #55	@ 0x37
 8016f3e:	e7de      	b.n	8016efe <_strtol_l.constprop.0+0x72>
 8016f40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016f44:	2f19      	cmp	r7, #25
 8016f46:	d804      	bhi.n	8016f52 <_strtol_l.constprop.0+0xc6>
 8016f48:	3c57      	subs	r4, #87	@ 0x57
 8016f4a:	e7d8      	b.n	8016efe <_strtol_l.constprop.0+0x72>
 8016f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8016f50:	e7e1      	b.n	8016f16 <_strtol_l.constprop.0+0x8a>
 8016f52:	1c53      	adds	r3, r2, #1
 8016f54:	d108      	bne.n	8016f68 <_strtol_l.constprop.0+0xdc>
 8016f56:	2322      	movs	r3, #34	@ 0x22
 8016f58:	f8ce 3000 	str.w	r3, [lr]
 8016f5c:	4660      	mov	r0, ip
 8016f5e:	f1b8 0f00 	cmp.w	r8, #0
 8016f62:	d0a0      	beq.n	8016ea6 <_strtol_l.constprop.0+0x1a>
 8016f64:	1e69      	subs	r1, r5, #1
 8016f66:	e006      	b.n	8016f76 <_strtol_l.constprop.0+0xea>
 8016f68:	b106      	cbz	r6, 8016f6c <_strtol_l.constprop.0+0xe0>
 8016f6a:	4240      	negs	r0, r0
 8016f6c:	f1b8 0f00 	cmp.w	r8, #0
 8016f70:	d099      	beq.n	8016ea6 <_strtol_l.constprop.0+0x1a>
 8016f72:	2a00      	cmp	r2, #0
 8016f74:	d1f6      	bne.n	8016f64 <_strtol_l.constprop.0+0xd8>
 8016f76:	f8c8 1000 	str.w	r1, [r8]
 8016f7a:	e794      	b.n	8016ea6 <_strtol_l.constprop.0+0x1a>
 8016f7c:	08019411 	.word	0x08019411

08016f80 <_strtol_r>:
 8016f80:	f7ff bf84 	b.w	8016e8c <_strtol_l.constprop.0>

08016f84 <__ssputs_r>:
 8016f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f88:	688e      	ldr	r6, [r1, #8]
 8016f8a:	461f      	mov	r7, r3
 8016f8c:	42be      	cmp	r6, r7
 8016f8e:	680b      	ldr	r3, [r1, #0]
 8016f90:	4682      	mov	sl, r0
 8016f92:	460c      	mov	r4, r1
 8016f94:	4690      	mov	r8, r2
 8016f96:	d82d      	bhi.n	8016ff4 <__ssputs_r+0x70>
 8016f98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016f9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016fa0:	d026      	beq.n	8016ff0 <__ssputs_r+0x6c>
 8016fa2:	6965      	ldr	r5, [r4, #20]
 8016fa4:	6909      	ldr	r1, [r1, #16]
 8016fa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016faa:	eba3 0901 	sub.w	r9, r3, r1
 8016fae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fb2:	1c7b      	adds	r3, r7, #1
 8016fb4:	444b      	add	r3, r9
 8016fb6:	106d      	asrs	r5, r5, #1
 8016fb8:	429d      	cmp	r5, r3
 8016fba:	bf38      	it	cc
 8016fbc:	461d      	movcc	r5, r3
 8016fbe:	0553      	lsls	r3, r2, #21
 8016fc0:	d527      	bpl.n	8017012 <__ssputs_r+0x8e>
 8016fc2:	4629      	mov	r1, r5
 8016fc4:	f7fc fcbc 	bl	8013940 <_malloc_r>
 8016fc8:	4606      	mov	r6, r0
 8016fca:	b360      	cbz	r0, 8017026 <__ssputs_r+0xa2>
 8016fcc:	6921      	ldr	r1, [r4, #16]
 8016fce:	464a      	mov	r2, r9
 8016fd0:	f7fd fdf5 	bl	8014bbe <memcpy>
 8016fd4:	89a3      	ldrh	r3, [r4, #12]
 8016fd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016fde:	81a3      	strh	r3, [r4, #12]
 8016fe0:	6126      	str	r6, [r4, #16]
 8016fe2:	6165      	str	r5, [r4, #20]
 8016fe4:	444e      	add	r6, r9
 8016fe6:	eba5 0509 	sub.w	r5, r5, r9
 8016fea:	6026      	str	r6, [r4, #0]
 8016fec:	60a5      	str	r5, [r4, #8]
 8016fee:	463e      	mov	r6, r7
 8016ff0:	42be      	cmp	r6, r7
 8016ff2:	d900      	bls.n	8016ff6 <__ssputs_r+0x72>
 8016ff4:	463e      	mov	r6, r7
 8016ff6:	6820      	ldr	r0, [r4, #0]
 8016ff8:	4632      	mov	r2, r6
 8016ffa:	4641      	mov	r1, r8
 8016ffc:	f7fd fcdf 	bl	80149be <memmove>
 8017000:	68a3      	ldr	r3, [r4, #8]
 8017002:	1b9b      	subs	r3, r3, r6
 8017004:	60a3      	str	r3, [r4, #8]
 8017006:	6823      	ldr	r3, [r4, #0]
 8017008:	4433      	add	r3, r6
 801700a:	6023      	str	r3, [r4, #0]
 801700c:	2000      	movs	r0, #0
 801700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017012:	462a      	mov	r2, r5
 8017014:	f000 ff0b 	bl	8017e2e <_realloc_r>
 8017018:	4606      	mov	r6, r0
 801701a:	2800      	cmp	r0, #0
 801701c:	d1e0      	bne.n	8016fe0 <__ssputs_r+0x5c>
 801701e:	6921      	ldr	r1, [r4, #16]
 8017020:	4650      	mov	r0, sl
 8017022:	f7fe fc2d 	bl	8015880 <_free_r>
 8017026:	230c      	movs	r3, #12
 8017028:	f8ca 3000 	str.w	r3, [sl]
 801702c:	89a3      	ldrh	r3, [r4, #12]
 801702e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017032:	81a3      	strh	r3, [r4, #12]
 8017034:	f04f 30ff 	mov.w	r0, #4294967295
 8017038:	e7e9      	b.n	801700e <__ssputs_r+0x8a>
	...

0801703c <_svfiprintf_r>:
 801703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017040:	4698      	mov	r8, r3
 8017042:	898b      	ldrh	r3, [r1, #12]
 8017044:	061b      	lsls	r3, r3, #24
 8017046:	b09d      	sub	sp, #116	@ 0x74
 8017048:	4607      	mov	r7, r0
 801704a:	460d      	mov	r5, r1
 801704c:	4614      	mov	r4, r2
 801704e:	d510      	bpl.n	8017072 <_svfiprintf_r+0x36>
 8017050:	690b      	ldr	r3, [r1, #16]
 8017052:	b973      	cbnz	r3, 8017072 <_svfiprintf_r+0x36>
 8017054:	2140      	movs	r1, #64	@ 0x40
 8017056:	f7fc fc73 	bl	8013940 <_malloc_r>
 801705a:	6028      	str	r0, [r5, #0]
 801705c:	6128      	str	r0, [r5, #16]
 801705e:	b930      	cbnz	r0, 801706e <_svfiprintf_r+0x32>
 8017060:	230c      	movs	r3, #12
 8017062:	603b      	str	r3, [r7, #0]
 8017064:	f04f 30ff 	mov.w	r0, #4294967295
 8017068:	b01d      	add	sp, #116	@ 0x74
 801706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801706e:	2340      	movs	r3, #64	@ 0x40
 8017070:	616b      	str	r3, [r5, #20]
 8017072:	2300      	movs	r3, #0
 8017074:	9309      	str	r3, [sp, #36]	@ 0x24
 8017076:	2320      	movs	r3, #32
 8017078:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801707c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017080:	2330      	movs	r3, #48	@ 0x30
 8017082:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017220 <_svfiprintf_r+0x1e4>
 8017086:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801708a:	f04f 0901 	mov.w	r9, #1
 801708e:	4623      	mov	r3, r4
 8017090:	469a      	mov	sl, r3
 8017092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017096:	b10a      	cbz	r2, 801709c <_svfiprintf_r+0x60>
 8017098:	2a25      	cmp	r2, #37	@ 0x25
 801709a:	d1f9      	bne.n	8017090 <_svfiprintf_r+0x54>
 801709c:	ebba 0b04 	subs.w	fp, sl, r4
 80170a0:	d00b      	beq.n	80170ba <_svfiprintf_r+0x7e>
 80170a2:	465b      	mov	r3, fp
 80170a4:	4622      	mov	r2, r4
 80170a6:	4629      	mov	r1, r5
 80170a8:	4638      	mov	r0, r7
 80170aa:	f7ff ff6b 	bl	8016f84 <__ssputs_r>
 80170ae:	3001      	adds	r0, #1
 80170b0:	f000 80a7 	beq.w	8017202 <_svfiprintf_r+0x1c6>
 80170b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170b6:	445a      	add	r2, fp
 80170b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80170ba:	f89a 3000 	ldrb.w	r3, [sl]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	f000 809f 	beq.w	8017202 <_svfiprintf_r+0x1c6>
 80170c4:	2300      	movs	r3, #0
 80170c6:	f04f 32ff 	mov.w	r2, #4294967295
 80170ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170ce:	f10a 0a01 	add.w	sl, sl, #1
 80170d2:	9304      	str	r3, [sp, #16]
 80170d4:	9307      	str	r3, [sp, #28]
 80170d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80170da:	931a      	str	r3, [sp, #104]	@ 0x68
 80170dc:	4654      	mov	r4, sl
 80170de:	2205      	movs	r2, #5
 80170e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170e4:	484e      	ldr	r0, [pc, #312]	@ (8017220 <_svfiprintf_r+0x1e4>)
 80170e6:	f7e9 f89b 	bl	8000220 <memchr>
 80170ea:	9a04      	ldr	r2, [sp, #16]
 80170ec:	b9d8      	cbnz	r0, 8017126 <_svfiprintf_r+0xea>
 80170ee:	06d0      	lsls	r0, r2, #27
 80170f0:	bf44      	itt	mi
 80170f2:	2320      	movmi	r3, #32
 80170f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80170f8:	0711      	lsls	r1, r2, #28
 80170fa:	bf44      	itt	mi
 80170fc:	232b      	movmi	r3, #43	@ 0x2b
 80170fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017102:	f89a 3000 	ldrb.w	r3, [sl]
 8017106:	2b2a      	cmp	r3, #42	@ 0x2a
 8017108:	d015      	beq.n	8017136 <_svfiprintf_r+0xfa>
 801710a:	9a07      	ldr	r2, [sp, #28]
 801710c:	4654      	mov	r4, sl
 801710e:	2000      	movs	r0, #0
 8017110:	f04f 0c0a 	mov.w	ip, #10
 8017114:	4621      	mov	r1, r4
 8017116:	f811 3b01 	ldrb.w	r3, [r1], #1
 801711a:	3b30      	subs	r3, #48	@ 0x30
 801711c:	2b09      	cmp	r3, #9
 801711e:	d94b      	bls.n	80171b8 <_svfiprintf_r+0x17c>
 8017120:	b1b0      	cbz	r0, 8017150 <_svfiprintf_r+0x114>
 8017122:	9207      	str	r2, [sp, #28]
 8017124:	e014      	b.n	8017150 <_svfiprintf_r+0x114>
 8017126:	eba0 0308 	sub.w	r3, r0, r8
 801712a:	fa09 f303 	lsl.w	r3, r9, r3
 801712e:	4313      	orrs	r3, r2
 8017130:	9304      	str	r3, [sp, #16]
 8017132:	46a2      	mov	sl, r4
 8017134:	e7d2      	b.n	80170dc <_svfiprintf_r+0xa0>
 8017136:	9b03      	ldr	r3, [sp, #12]
 8017138:	1d19      	adds	r1, r3, #4
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	9103      	str	r1, [sp, #12]
 801713e:	2b00      	cmp	r3, #0
 8017140:	bfbb      	ittet	lt
 8017142:	425b      	neglt	r3, r3
 8017144:	f042 0202 	orrlt.w	r2, r2, #2
 8017148:	9307      	strge	r3, [sp, #28]
 801714a:	9307      	strlt	r3, [sp, #28]
 801714c:	bfb8      	it	lt
 801714e:	9204      	strlt	r2, [sp, #16]
 8017150:	7823      	ldrb	r3, [r4, #0]
 8017152:	2b2e      	cmp	r3, #46	@ 0x2e
 8017154:	d10a      	bne.n	801716c <_svfiprintf_r+0x130>
 8017156:	7863      	ldrb	r3, [r4, #1]
 8017158:	2b2a      	cmp	r3, #42	@ 0x2a
 801715a:	d132      	bne.n	80171c2 <_svfiprintf_r+0x186>
 801715c:	9b03      	ldr	r3, [sp, #12]
 801715e:	1d1a      	adds	r2, r3, #4
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	9203      	str	r2, [sp, #12]
 8017164:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017168:	3402      	adds	r4, #2
 801716a:	9305      	str	r3, [sp, #20]
 801716c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017230 <_svfiprintf_r+0x1f4>
 8017170:	7821      	ldrb	r1, [r4, #0]
 8017172:	2203      	movs	r2, #3
 8017174:	4650      	mov	r0, sl
 8017176:	f7e9 f853 	bl	8000220 <memchr>
 801717a:	b138      	cbz	r0, 801718c <_svfiprintf_r+0x150>
 801717c:	9b04      	ldr	r3, [sp, #16]
 801717e:	eba0 000a 	sub.w	r0, r0, sl
 8017182:	2240      	movs	r2, #64	@ 0x40
 8017184:	4082      	lsls	r2, r0
 8017186:	4313      	orrs	r3, r2
 8017188:	3401      	adds	r4, #1
 801718a:	9304      	str	r3, [sp, #16]
 801718c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017190:	4824      	ldr	r0, [pc, #144]	@ (8017224 <_svfiprintf_r+0x1e8>)
 8017192:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017196:	2206      	movs	r2, #6
 8017198:	f7e9 f842 	bl	8000220 <memchr>
 801719c:	2800      	cmp	r0, #0
 801719e:	d036      	beq.n	801720e <_svfiprintf_r+0x1d2>
 80171a0:	4b21      	ldr	r3, [pc, #132]	@ (8017228 <_svfiprintf_r+0x1ec>)
 80171a2:	bb1b      	cbnz	r3, 80171ec <_svfiprintf_r+0x1b0>
 80171a4:	9b03      	ldr	r3, [sp, #12]
 80171a6:	3307      	adds	r3, #7
 80171a8:	f023 0307 	bic.w	r3, r3, #7
 80171ac:	3308      	adds	r3, #8
 80171ae:	9303      	str	r3, [sp, #12]
 80171b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171b2:	4433      	add	r3, r6
 80171b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80171b6:	e76a      	b.n	801708e <_svfiprintf_r+0x52>
 80171b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80171bc:	460c      	mov	r4, r1
 80171be:	2001      	movs	r0, #1
 80171c0:	e7a8      	b.n	8017114 <_svfiprintf_r+0xd8>
 80171c2:	2300      	movs	r3, #0
 80171c4:	3401      	adds	r4, #1
 80171c6:	9305      	str	r3, [sp, #20]
 80171c8:	4619      	mov	r1, r3
 80171ca:	f04f 0c0a 	mov.w	ip, #10
 80171ce:	4620      	mov	r0, r4
 80171d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171d4:	3a30      	subs	r2, #48	@ 0x30
 80171d6:	2a09      	cmp	r2, #9
 80171d8:	d903      	bls.n	80171e2 <_svfiprintf_r+0x1a6>
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d0c6      	beq.n	801716c <_svfiprintf_r+0x130>
 80171de:	9105      	str	r1, [sp, #20]
 80171e0:	e7c4      	b.n	801716c <_svfiprintf_r+0x130>
 80171e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80171e6:	4604      	mov	r4, r0
 80171e8:	2301      	movs	r3, #1
 80171ea:	e7f0      	b.n	80171ce <_svfiprintf_r+0x192>
 80171ec:	ab03      	add	r3, sp, #12
 80171ee:	9300      	str	r3, [sp, #0]
 80171f0:	462a      	mov	r2, r5
 80171f2:	4b0e      	ldr	r3, [pc, #56]	@ (801722c <_svfiprintf_r+0x1f0>)
 80171f4:	a904      	add	r1, sp, #16
 80171f6:	4638      	mov	r0, r7
 80171f8:	f7fc fcce 	bl	8013b98 <_printf_float>
 80171fc:	1c42      	adds	r2, r0, #1
 80171fe:	4606      	mov	r6, r0
 8017200:	d1d6      	bne.n	80171b0 <_svfiprintf_r+0x174>
 8017202:	89ab      	ldrh	r3, [r5, #12]
 8017204:	065b      	lsls	r3, r3, #25
 8017206:	f53f af2d 	bmi.w	8017064 <_svfiprintf_r+0x28>
 801720a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801720c:	e72c      	b.n	8017068 <_svfiprintf_r+0x2c>
 801720e:	ab03      	add	r3, sp, #12
 8017210:	9300      	str	r3, [sp, #0]
 8017212:	462a      	mov	r2, r5
 8017214:	4b05      	ldr	r3, [pc, #20]	@ (801722c <_svfiprintf_r+0x1f0>)
 8017216:	a904      	add	r1, sp, #16
 8017218:	4638      	mov	r0, r7
 801721a:	f7fc ff55 	bl	80140c8 <_printf_i>
 801721e:	e7ed      	b.n	80171fc <_svfiprintf_r+0x1c0>
 8017220:	08019511 	.word	0x08019511
 8017224:	0801951b 	.word	0x0801951b
 8017228:	08013b99 	.word	0x08013b99
 801722c:	08016f85 	.word	0x08016f85
 8017230:	08019517 	.word	0x08019517

08017234 <__sfputc_r>:
 8017234:	6893      	ldr	r3, [r2, #8]
 8017236:	3b01      	subs	r3, #1
 8017238:	2b00      	cmp	r3, #0
 801723a:	b410      	push	{r4}
 801723c:	6093      	str	r3, [r2, #8]
 801723e:	da08      	bge.n	8017252 <__sfputc_r+0x1e>
 8017240:	6994      	ldr	r4, [r2, #24]
 8017242:	42a3      	cmp	r3, r4
 8017244:	db01      	blt.n	801724a <__sfputc_r+0x16>
 8017246:	290a      	cmp	r1, #10
 8017248:	d103      	bne.n	8017252 <__sfputc_r+0x1e>
 801724a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801724e:	f000 b9df 	b.w	8017610 <__swbuf_r>
 8017252:	6813      	ldr	r3, [r2, #0]
 8017254:	1c58      	adds	r0, r3, #1
 8017256:	6010      	str	r0, [r2, #0]
 8017258:	7019      	strb	r1, [r3, #0]
 801725a:	4608      	mov	r0, r1
 801725c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017260:	4770      	bx	lr

08017262 <__sfputs_r>:
 8017262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017264:	4606      	mov	r6, r0
 8017266:	460f      	mov	r7, r1
 8017268:	4614      	mov	r4, r2
 801726a:	18d5      	adds	r5, r2, r3
 801726c:	42ac      	cmp	r4, r5
 801726e:	d101      	bne.n	8017274 <__sfputs_r+0x12>
 8017270:	2000      	movs	r0, #0
 8017272:	e007      	b.n	8017284 <__sfputs_r+0x22>
 8017274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017278:	463a      	mov	r2, r7
 801727a:	4630      	mov	r0, r6
 801727c:	f7ff ffda 	bl	8017234 <__sfputc_r>
 8017280:	1c43      	adds	r3, r0, #1
 8017282:	d1f3      	bne.n	801726c <__sfputs_r+0xa>
 8017284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017288 <_vfiprintf_r>:
 8017288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801728c:	460d      	mov	r5, r1
 801728e:	b09d      	sub	sp, #116	@ 0x74
 8017290:	4614      	mov	r4, r2
 8017292:	4698      	mov	r8, r3
 8017294:	4606      	mov	r6, r0
 8017296:	b118      	cbz	r0, 80172a0 <_vfiprintf_r+0x18>
 8017298:	6a03      	ldr	r3, [r0, #32]
 801729a:	b90b      	cbnz	r3, 80172a0 <_vfiprintf_r+0x18>
 801729c:	f7fd fad4 	bl	8014848 <__sinit>
 80172a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172a2:	07d9      	lsls	r1, r3, #31
 80172a4:	d405      	bmi.n	80172b2 <_vfiprintf_r+0x2a>
 80172a6:	89ab      	ldrh	r3, [r5, #12]
 80172a8:	059a      	lsls	r2, r3, #22
 80172aa:	d402      	bmi.n	80172b2 <_vfiprintf_r+0x2a>
 80172ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172ae:	f7fd fc84 	bl	8014bba <__retarget_lock_acquire_recursive>
 80172b2:	89ab      	ldrh	r3, [r5, #12]
 80172b4:	071b      	lsls	r3, r3, #28
 80172b6:	d501      	bpl.n	80172bc <_vfiprintf_r+0x34>
 80172b8:	692b      	ldr	r3, [r5, #16]
 80172ba:	b99b      	cbnz	r3, 80172e4 <_vfiprintf_r+0x5c>
 80172bc:	4629      	mov	r1, r5
 80172be:	4630      	mov	r0, r6
 80172c0:	f000 f9e4 	bl	801768c <__swsetup_r>
 80172c4:	b170      	cbz	r0, 80172e4 <_vfiprintf_r+0x5c>
 80172c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172c8:	07dc      	lsls	r4, r3, #31
 80172ca:	d504      	bpl.n	80172d6 <_vfiprintf_r+0x4e>
 80172cc:	f04f 30ff 	mov.w	r0, #4294967295
 80172d0:	b01d      	add	sp, #116	@ 0x74
 80172d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d6:	89ab      	ldrh	r3, [r5, #12]
 80172d8:	0598      	lsls	r0, r3, #22
 80172da:	d4f7      	bmi.n	80172cc <_vfiprintf_r+0x44>
 80172dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172de:	f7fd fc6d 	bl	8014bbc <__retarget_lock_release_recursive>
 80172e2:	e7f3      	b.n	80172cc <_vfiprintf_r+0x44>
 80172e4:	2300      	movs	r3, #0
 80172e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80172e8:	2320      	movs	r3, #32
 80172ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80172ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80172f2:	2330      	movs	r3, #48	@ 0x30
 80172f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80174a4 <_vfiprintf_r+0x21c>
 80172f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80172fc:	f04f 0901 	mov.w	r9, #1
 8017300:	4623      	mov	r3, r4
 8017302:	469a      	mov	sl, r3
 8017304:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017308:	b10a      	cbz	r2, 801730e <_vfiprintf_r+0x86>
 801730a:	2a25      	cmp	r2, #37	@ 0x25
 801730c:	d1f9      	bne.n	8017302 <_vfiprintf_r+0x7a>
 801730e:	ebba 0b04 	subs.w	fp, sl, r4
 8017312:	d00b      	beq.n	801732c <_vfiprintf_r+0xa4>
 8017314:	465b      	mov	r3, fp
 8017316:	4622      	mov	r2, r4
 8017318:	4629      	mov	r1, r5
 801731a:	4630      	mov	r0, r6
 801731c:	f7ff ffa1 	bl	8017262 <__sfputs_r>
 8017320:	3001      	adds	r0, #1
 8017322:	f000 80a7 	beq.w	8017474 <_vfiprintf_r+0x1ec>
 8017326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017328:	445a      	add	r2, fp
 801732a:	9209      	str	r2, [sp, #36]	@ 0x24
 801732c:	f89a 3000 	ldrb.w	r3, [sl]
 8017330:	2b00      	cmp	r3, #0
 8017332:	f000 809f 	beq.w	8017474 <_vfiprintf_r+0x1ec>
 8017336:	2300      	movs	r3, #0
 8017338:	f04f 32ff 	mov.w	r2, #4294967295
 801733c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017340:	f10a 0a01 	add.w	sl, sl, #1
 8017344:	9304      	str	r3, [sp, #16]
 8017346:	9307      	str	r3, [sp, #28]
 8017348:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801734c:	931a      	str	r3, [sp, #104]	@ 0x68
 801734e:	4654      	mov	r4, sl
 8017350:	2205      	movs	r2, #5
 8017352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017356:	4853      	ldr	r0, [pc, #332]	@ (80174a4 <_vfiprintf_r+0x21c>)
 8017358:	f7e8 ff62 	bl	8000220 <memchr>
 801735c:	9a04      	ldr	r2, [sp, #16]
 801735e:	b9d8      	cbnz	r0, 8017398 <_vfiprintf_r+0x110>
 8017360:	06d1      	lsls	r1, r2, #27
 8017362:	bf44      	itt	mi
 8017364:	2320      	movmi	r3, #32
 8017366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801736a:	0713      	lsls	r3, r2, #28
 801736c:	bf44      	itt	mi
 801736e:	232b      	movmi	r3, #43	@ 0x2b
 8017370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017374:	f89a 3000 	ldrb.w	r3, [sl]
 8017378:	2b2a      	cmp	r3, #42	@ 0x2a
 801737a:	d015      	beq.n	80173a8 <_vfiprintf_r+0x120>
 801737c:	9a07      	ldr	r2, [sp, #28]
 801737e:	4654      	mov	r4, sl
 8017380:	2000      	movs	r0, #0
 8017382:	f04f 0c0a 	mov.w	ip, #10
 8017386:	4621      	mov	r1, r4
 8017388:	f811 3b01 	ldrb.w	r3, [r1], #1
 801738c:	3b30      	subs	r3, #48	@ 0x30
 801738e:	2b09      	cmp	r3, #9
 8017390:	d94b      	bls.n	801742a <_vfiprintf_r+0x1a2>
 8017392:	b1b0      	cbz	r0, 80173c2 <_vfiprintf_r+0x13a>
 8017394:	9207      	str	r2, [sp, #28]
 8017396:	e014      	b.n	80173c2 <_vfiprintf_r+0x13a>
 8017398:	eba0 0308 	sub.w	r3, r0, r8
 801739c:	fa09 f303 	lsl.w	r3, r9, r3
 80173a0:	4313      	orrs	r3, r2
 80173a2:	9304      	str	r3, [sp, #16]
 80173a4:	46a2      	mov	sl, r4
 80173a6:	e7d2      	b.n	801734e <_vfiprintf_r+0xc6>
 80173a8:	9b03      	ldr	r3, [sp, #12]
 80173aa:	1d19      	adds	r1, r3, #4
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	9103      	str	r1, [sp, #12]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	bfbb      	ittet	lt
 80173b4:	425b      	neglt	r3, r3
 80173b6:	f042 0202 	orrlt.w	r2, r2, #2
 80173ba:	9307      	strge	r3, [sp, #28]
 80173bc:	9307      	strlt	r3, [sp, #28]
 80173be:	bfb8      	it	lt
 80173c0:	9204      	strlt	r2, [sp, #16]
 80173c2:	7823      	ldrb	r3, [r4, #0]
 80173c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80173c6:	d10a      	bne.n	80173de <_vfiprintf_r+0x156>
 80173c8:	7863      	ldrb	r3, [r4, #1]
 80173ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80173cc:	d132      	bne.n	8017434 <_vfiprintf_r+0x1ac>
 80173ce:	9b03      	ldr	r3, [sp, #12]
 80173d0:	1d1a      	adds	r2, r3, #4
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	9203      	str	r2, [sp, #12]
 80173d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80173da:	3402      	adds	r4, #2
 80173dc:	9305      	str	r3, [sp, #20]
 80173de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80174b4 <_vfiprintf_r+0x22c>
 80173e2:	7821      	ldrb	r1, [r4, #0]
 80173e4:	2203      	movs	r2, #3
 80173e6:	4650      	mov	r0, sl
 80173e8:	f7e8 ff1a 	bl	8000220 <memchr>
 80173ec:	b138      	cbz	r0, 80173fe <_vfiprintf_r+0x176>
 80173ee:	9b04      	ldr	r3, [sp, #16]
 80173f0:	eba0 000a 	sub.w	r0, r0, sl
 80173f4:	2240      	movs	r2, #64	@ 0x40
 80173f6:	4082      	lsls	r2, r0
 80173f8:	4313      	orrs	r3, r2
 80173fa:	3401      	adds	r4, #1
 80173fc:	9304      	str	r3, [sp, #16]
 80173fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017402:	4829      	ldr	r0, [pc, #164]	@ (80174a8 <_vfiprintf_r+0x220>)
 8017404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017408:	2206      	movs	r2, #6
 801740a:	f7e8 ff09 	bl	8000220 <memchr>
 801740e:	2800      	cmp	r0, #0
 8017410:	d03f      	beq.n	8017492 <_vfiprintf_r+0x20a>
 8017412:	4b26      	ldr	r3, [pc, #152]	@ (80174ac <_vfiprintf_r+0x224>)
 8017414:	bb1b      	cbnz	r3, 801745e <_vfiprintf_r+0x1d6>
 8017416:	9b03      	ldr	r3, [sp, #12]
 8017418:	3307      	adds	r3, #7
 801741a:	f023 0307 	bic.w	r3, r3, #7
 801741e:	3308      	adds	r3, #8
 8017420:	9303      	str	r3, [sp, #12]
 8017422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017424:	443b      	add	r3, r7
 8017426:	9309      	str	r3, [sp, #36]	@ 0x24
 8017428:	e76a      	b.n	8017300 <_vfiprintf_r+0x78>
 801742a:	fb0c 3202 	mla	r2, ip, r2, r3
 801742e:	460c      	mov	r4, r1
 8017430:	2001      	movs	r0, #1
 8017432:	e7a8      	b.n	8017386 <_vfiprintf_r+0xfe>
 8017434:	2300      	movs	r3, #0
 8017436:	3401      	adds	r4, #1
 8017438:	9305      	str	r3, [sp, #20]
 801743a:	4619      	mov	r1, r3
 801743c:	f04f 0c0a 	mov.w	ip, #10
 8017440:	4620      	mov	r0, r4
 8017442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017446:	3a30      	subs	r2, #48	@ 0x30
 8017448:	2a09      	cmp	r2, #9
 801744a:	d903      	bls.n	8017454 <_vfiprintf_r+0x1cc>
 801744c:	2b00      	cmp	r3, #0
 801744e:	d0c6      	beq.n	80173de <_vfiprintf_r+0x156>
 8017450:	9105      	str	r1, [sp, #20]
 8017452:	e7c4      	b.n	80173de <_vfiprintf_r+0x156>
 8017454:	fb0c 2101 	mla	r1, ip, r1, r2
 8017458:	4604      	mov	r4, r0
 801745a:	2301      	movs	r3, #1
 801745c:	e7f0      	b.n	8017440 <_vfiprintf_r+0x1b8>
 801745e:	ab03      	add	r3, sp, #12
 8017460:	9300      	str	r3, [sp, #0]
 8017462:	462a      	mov	r2, r5
 8017464:	4b12      	ldr	r3, [pc, #72]	@ (80174b0 <_vfiprintf_r+0x228>)
 8017466:	a904      	add	r1, sp, #16
 8017468:	4630      	mov	r0, r6
 801746a:	f7fc fb95 	bl	8013b98 <_printf_float>
 801746e:	4607      	mov	r7, r0
 8017470:	1c78      	adds	r0, r7, #1
 8017472:	d1d6      	bne.n	8017422 <_vfiprintf_r+0x19a>
 8017474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017476:	07d9      	lsls	r1, r3, #31
 8017478:	d405      	bmi.n	8017486 <_vfiprintf_r+0x1fe>
 801747a:	89ab      	ldrh	r3, [r5, #12]
 801747c:	059a      	lsls	r2, r3, #22
 801747e:	d402      	bmi.n	8017486 <_vfiprintf_r+0x1fe>
 8017480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017482:	f7fd fb9b 	bl	8014bbc <__retarget_lock_release_recursive>
 8017486:	89ab      	ldrh	r3, [r5, #12]
 8017488:	065b      	lsls	r3, r3, #25
 801748a:	f53f af1f 	bmi.w	80172cc <_vfiprintf_r+0x44>
 801748e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017490:	e71e      	b.n	80172d0 <_vfiprintf_r+0x48>
 8017492:	ab03      	add	r3, sp, #12
 8017494:	9300      	str	r3, [sp, #0]
 8017496:	462a      	mov	r2, r5
 8017498:	4b05      	ldr	r3, [pc, #20]	@ (80174b0 <_vfiprintf_r+0x228>)
 801749a:	a904      	add	r1, sp, #16
 801749c:	4630      	mov	r0, r6
 801749e:	f7fc fe13 	bl	80140c8 <_printf_i>
 80174a2:	e7e4      	b.n	801746e <_vfiprintf_r+0x1e6>
 80174a4:	08019511 	.word	0x08019511
 80174a8:	0801951b 	.word	0x0801951b
 80174ac:	08013b99 	.word	0x08013b99
 80174b0:	08017263 	.word	0x08017263
 80174b4:	08019517 	.word	0x08019517

080174b8 <__sflush_r>:
 80174b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80174bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c0:	0716      	lsls	r6, r2, #28
 80174c2:	4605      	mov	r5, r0
 80174c4:	460c      	mov	r4, r1
 80174c6:	d454      	bmi.n	8017572 <__sflush_r+0xba>
 80174c8:	684b      	ldr	r3, [r1, #4]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	dc02      	bgt.n	80174d4 <__sflush_r+0x1c>
 80174ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	dd48      	ble.n	8017566 <__sflush_r+0xae>
 80174d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80174d6:	2e00      	cmp	r6, #0
 80174d8:	d045      	beq.n	8017566 <__sflush_r+0xae>
 80174da:	2300      	movs	r3, #0
 80174dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80174e0:	682f      	ldr	r7, [r5, #0]
 80174e2:	6a21      	ldr	r1, [r4, #32]
 80174e4:	602b      	str	r3, [r5, #0]
 80174e6:	d030      	beq.n	801754a <__sflush_r+0x92>
 80174e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80174ea:	89a3      	ldrh	r3, [r4, #12]
 80174ec:	0759      	lsls	r1, r3, #29
 80174ee:	d505      	bpl.n	80174fc <__sflush_r+0x44>
 80174f0:	6863      	ldr	r3, [r4, #4]
 80174f2:	1ad2      	subs	r2, r2, r3
 80174f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80174f6:	b10b      	cbz	r3, 80174fc <__sflush_r+0x44>
 80174f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80174fa:	1ad2      	subs	r2, r2, r3
 80174fc:	2300      	movs	r3, #0
 80174fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017500:	6a21      	ldr	r1, [r4, #32]
 8017502:	4628      	mov	r0, r5
 8017504:	47b0      	blx	r6
 8017506:	1c43      	adds	r3, r0, #1
 8017508:	89a3      	ldrh	r3, [r4, #12]
 801750a:	d106      	bne.n	801751a <__sflush_r+0x62>
 801750c:	6829      	ldr	r1, [r5, #0]
 801750e:	291d      	cmp	r1, #29
 8017510:	d82b      	bhi.n	801756a <__sflush_r+0xb2>
 8017512:	4a2a      	ldr	r2, [pc, #168]	@ (80175bc <__sflush_r+0x104>)
 8017514:	410a      	asrs	r2, r1
 8017516:	07d6      	lsls	r6, r2, #31
 8017518:	d427      	bmi.n	801756a <__sflush_r+0xb2>
 801751a:	2200      	movs	r2, #0
 801751c:	6062      	str	r2, [r4, #4]
 801751e:	04d9      	lsls	r1, r3, #19
 8017520:	6922      	ldr	r2, [r4, #16]
 8017522:	6022      	str	r2, [r4, #0]
 8017524:	d504      	bpl.n	8017530 <__sflush_r+0x78>
 8017526:	1c42      	adds	r2, r0, #1
 8017528:	d101      	bne.n	801752e <__sflush_r+0x76>
 801752a:	682b      	ldr	r3, [r5, #0]
 801752c:	b903      	cbnz	r3, 8017530 <__sflush_r+0x78>
 801752e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017532:	602f      	str	r7, [r5, #0]
 8017534:	b1b9      	cbz	r1, 8017566 <__sflush_r+0xae>
 8017536:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801753a:	4299      	cmp	r1, r3
 801753c:	d002      	beq.n	8017544 <__sflush_r+0x8c>
 801753e:	4628      	mov	r0, r5
 8017540:	f7fe f99e 	bl	8015880 <_free_r>
 8017544:	2300      	movs	r3, #0
 8017546:	6363      	str	r3, [r4, #52]	@ 0x34
 8017548:	e00d      	b.n	8017566 <__sflush_r+0xae>
 801754a:	2301      	movs	r3, #1
 801754c:	4628      	mov	r0, r5
 801754e:	47b0      	blx	r6
 8017550:	4602      	mov	r2, r0
 8017552:	1c50      	adds	r0, r2, #1
 8017554:	d1c9      	bne.n	80174ea <__sflush_r+0x32>
 8017556:	682b      	ldr	r3, [r5, #0]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d0c6      	beq.n	80174ea <__sflush_r+0x32>
 801755c:	2b1d      	cmp	r3, #29
 801755e:	d001      	beq.n	8017564 <__sflush_r+0xac>
 8017560:	2b16      	cmp	r3, #22
 8017562:	d11e      	bne.n	80175a2 <__sflush_r+0xea>
 8017564:	602f      	str	r7, [r5, #0]
 8017566:	2000      	movs	r0, #0
 8017568:	e022      	b.n	80175b0 <__sflush_r+0xf8>
 801756a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801756e:	b21b      	sxth	r3, r3
 8017570:	e01b      	b.n	80175aa <__sflush_r+0xf2>
 8017572:	690f      	ldr	r7, [r1, #16]
 8017574:	2f00      	cmp	r7, #0
 8017576:	d0f6      	beq.n	8017566 <__sflush_r+0xae>
 8017578:	0793      	lsls	r3, r2, #30
 801757a:	680e      	ldr	r6, [r1, #0]
 801757c:	bf08      	it	eq
 801757e:	694b      	ldreq	r3, [r1, #20]
 8017580:	600f      	str	r7, [r1, #0]
 8017582:	bf18      	it	ne
 8017584:	2300      	movne	r3, #0
 8017586:	eba6 0807 	sub.w	r8, r6, r7
 801758a:	608b      	str	r3, [r1, #8]
 801758c:	f1b8 0f00 	cmp.w	r8, #0
 8017590:	dde9      	ble.n	8017566 <__sflush_r+0xae>
 8017592:	6a21      	ldr	r1, [r4, #32]
 8017594:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017596:	4643      	mov	r3, r8
 8017598:	463a      	mov	r2, r7
 801759a:	4628      	mov	r0, r5
 801759c:	47b0      	blx	r6
 801759e:	2800      	cmp	r0, #0
 80175a0:	dc08      	bgt.n	80175b4 <__sflush_r+0xfc>
 80175a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80175aa:	81a3      	strh	r3, [r4, #12]
 80175ac:	f04f 30ff 	mov.w	r0, #4294967295
 80175b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175b4:	4407      	add	r7, r0
 80175b6:	eba8 0800 	sub.w	r8, r8, r0
 80175ba:	e7e7      	b.n	801758c <__sflush_r+0xd4>
 80175bc:	dfbffffe 	.word	0xdfbffffe

080175c0 <_fflush_r>:
 80175c0:	b538      	push	{r3, r4, r5, lr}
 80175c2:	690b      	ldr	r3, [r1, #16]
 80175c4:	4605      	mov	r5, r0
 80175c6:	460c      	mov	r4, r1
 80175c8:	b913      	cbnz	r3, 80175d0 <_fflush_r+0x10>
 80175ca:	2500      	movs	r5, #0
 80175cc:	4628      	mov	r0, r5
 80175ce:	bd38      	pop	{r3, r4, r5, pc}
 80175d0:	b118      	cbz	r0, 80175da <_fflush_r+0x1a>
 80175d2:	6a03      	ldr	r3, [r0, #32]
 80175d4:	b90b      	cbnz	r3, 80175da <_fflush_r+0x1a>
 80175d6:	f7fd f937 	bl	8014848 <__sinit>
 80175da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d0f3      	beq.n	80175ca <_fflush_r+0xa>
 80175e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80175e4:	07d0      	lsls	r0, r2, #31
 80175e6:	d404      	bmi.n	80175f2 <_fflush_r+0x32>
 80175e8:	0599      	lsls	r1, r3, #22
 80175ea:	d402      	bmi.n	80175f2 <_fflush_r+0x32>
 80175ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80175ee:	f7fd fae4 	bl	8014bba <__retarget_lock_acquire_recursive>
 80175f2:	4628      	mov	r0, r5
 80175f4:	4621      	mov	r1, r4
 80175f6:	f7ff ff5f 	bl	80174b8 <__sflush_r>
 80175fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80175fc:	07da      	lsls	r2, r3, #31
 80175fe:	4605      	mov	r5, r0
 8017600:	d4e4      	bmi.n	80175cc <_fflush_r+0xc>
 8017602:	89a3      	ldrh	r3, [r4, #12]
 8017604:	059b      	lsls	r3, r3, #22
 8017606:	d4e1      	bmi.n	80175cc <_fflush_r+0xc>
 8017608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801760a:	f7fd fad7 	bl	8014bbc <__retarget_lock_release_recursive>
 801760e:	e7dd      	b.n	80175cc <_fflush_r+0xc>

08017610 <__swbuf_r>:
 8017610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017612:	460e      	mov	r6, r1
 8017614:	4614      	mov	r4, r2
 8017616:	4605      	mov	r5, r0
 8017618:	b118      	cbz	r0, 8017622 <__swbuf_r+0x12>
 801761a:	6a03      	ldr	r3, [r0, #32]
 801761c:	b90b      	cbnz	r3, 8017622 <__swbuf_r+0x12>
 801761e:	f7fd f913 	bl	8014848 <__sinit>
 8017622:	69a3      	ldr	r3, [r4, #24]
 8017624:	60a3      	str	r3, [r4, #8]
 8017626:	89a3      	ldrh	r3, [r4, #12]
 8017628:	071a      	lsls	r2, r3, #28
 801762a:	d501      	bpl.n	8017630 <__swbuf_r+0x20>
 801762c:	6923      	ldr	r3, [r4, #16]
 801762e:	b943      	cbnz	r3, 8017642 <__swbuf_r+0x32>
 8017630:	4621      	mov	r1, r4
 8017632:	4628      	mov	r0, r5
 8017634:	f000 f82a 	bl	801768c <__swsetup_r>
 8017638:	b118      	cbz	r0, 8017642 <__swbuf_r+0x32>
 801763a:	f04f 37ff 	mov.w	r7, #4294967295
 801763e:	4638      	mov	r0, r7
 8017640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017642:	6823      	ldr	r3, [r4, #0]
 8017644:	6922      	ldr	r2, [r4, #16]
 8017646:	1a98      	subs	r0, r3, r2
 8017648:	6963      	ldr	r3, [r4, #20]
 801764a:	b2f6      	uxtb	r6, r6
 801764c:	4283      	cmp	r3, r0
 801764e:	4637      	mov	r7, r6
 8017650:	dc05      	bgt.n	801765e <__swbuf_r+0x4e>
 8017652:	4621      	mov	r1, r4
 8017654:	4628      	mov	r0, r5
 8017656:	f7ff ffb3 	bl	80175c0 <_fflush_r>
 801765a:	2800      	cmp	r0, #0
 801765c:	d1ed      	bne.n	801763a <__swbuf_r+0x2a>
 801765e:	68a3      	ldr	r3, [r4, #8]
 8017660:	3b01      	subs	r3, #1
 8017662:	60a3      	str	r3, [r4, #8]
 8017664:	6823      	ldr	r3, [r4, #0]
 8017666:	1c5a      	adds	r2, r3, #1
 8017668:	6022      	str	r2, [r4, #0]
 801766a:	701e      	strb	r6, [r3, #0]
 801766c:	6962      	ldr	r2, [r4, #20]
 801766e:	1c43      	adds	r3, r0, #1
 8017670:	429a      	cmp	r2, r3
 8017672:	d004      	beq.n	801767e <__swbuf_r+0x6e>
 8017674:	89a3      	ldrh	r3, [r4, #12]
 8017676:	07db      	lsls	r3, r3, #31
 8017678:	d5e1      	bpl.n	801763e <__swbuf_r+0x2e>
 801767a:	2e0a      	cmp	r6, #10
 801767c:	d1df      	bne.n	801763e <__swbuf_r+0x2e>
 801767e:	4621      	mov	r1, r4
 8017680:	4628      	mov	r0, r5
 8017682:	f7ff ff9d 	bl	80175c0 <_fflush_r>
 8017686:	2800      	cmp	r0, #0
 8017688:	d0d9      	beq.n	801763e <__swbuf_r+0x2e>
 801768a:	e7d6      	b.n	801763a <__swbuf_r+0x2a>

0801768c <__swsetup_r>:
 801768c:	b538      	push	{r3, r4, r5, lr}
 801768e:	4b29      	ldr	r3, [pc, #164]	@ (8017734 <__swsetup_r+0xa8>)
 8017690:	4605      	mov	r5, r0
 8017692:	6818      	ldr	r0, [r3, #0]
 8017694:	460c      	mov	r4, r1
 8017696:	b118      	cbz	r0, 80176a0 <__swsetup_r+0x14>
 8017698:	6a03      	ldr	r3, [r0, #32]
 801769a:	b90b      	cbnz	r3, 80176a0 <__swsetup_r+0x14>
 801769c:	f7fd f8d4 	bl	8014848 <__sinit>
 80176a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176a4:	0719      	lsls	r1, r3, #28
 80176a6:	d422      	bmi.n	80176ee <__swsetup_r+0x62>
 80176a8:	06da      	lsls	r2, r3, #27
 80176aa:	d407      	bmi.n	80176bc <__swsetup_r+0x30>
 80176ac:	2209      	movs	r2, #9
 80176ae:	602a      	str	r2, [r5, #0]
 80176b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176b4:	81a3      	strh	r3, [r4, #12]
 80176b6:	f04f 30ff 	mov.w	r0, #4294967295
 80176ba:	e033      	b.n	8017724 <__swsetup_r+0x98>
 80176bc:	0758      	lsls	r0, r3, #29
 80176be:	d512      	bpl.n	80176e6 <__swsetup_r+0x5a>
 80176c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80176c2:	b141      	cbz	r1, 80176d6 <__swsetup_r+0x4a>
 80176c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80176c8:	4299      	cmp	r1, r3
 80176ca:	d002      	beq.n	80176d2 <__swsetup_r+0x46>
 80176cc:	4628      	mov	r0, r5
 80176ce:	f7fe f8d7 	bl	8015880 <_free_r>
 80176d2:	2300      	movs	r3, #0
 80176d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80176d6:	89a3      	ldrh	r3, [r4, #12]
 80176d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80176dc:	81a3      	strh	r3, [r4, #12]
 80176de:	2300      	movs	r3, #0
 80176e0:	6063      	str	r3, [r4, #4]
 80176e2:	6923      	ldr	r3, [r4, #16]
 80176e4:	6023      	str	r3, [r4, #0]
 80176e6:	89a3      	ldrh	r3, [r4, #12]
 80176e8:	f043 0308 	orr.w	r3, r3, #8
 80176ec:	81a3      	strh	r3, [r4, #12]
 80176ee:	6923      	ldr	r3, [r4, #16]
 80176f0:	b94b      	cbnz	r3, 8017706 <__swsetup_r+0x7a>
 80176f2:	89a3      	ldrh	r3, [r4, #12]
 80176f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80176f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80176fc:	d003      	beq.n	8017706 <__swsetup_r+0x7a>
 80176fe:	4621      	mov	r1, r4
 8017700:	4628      	mov	r0, r5
 8017702:	f000 fbf5 	bl	8017ef0 <__smakebuf_r>
 8017706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801770a:	f013 0201 	ands.w	r2, r3, #1
 801770e:	d00a      	beq.n	8017726 <__swsetup_r+0x9a>
 8017710:	2200      	movs	r2, #0
 8017712:	60a2      	str	r2, [r4, #8]
 8017714:	6962      	ldr	r2, [r4, #20]
 8017716:	4252      	negs	r2, r2
 8017718:	61a2      	str	r2, [r4, #24]
 801771a:	6922      	ldr	r2, [r4, #16]
 801771c:	b942      	cbnz	r2, 8017730 <__swsetup_r+0xa4>
 801771e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017722:	d1c5      	bne.n	80176b0 <__swsetup_r+0x24>
 8017724:	bd38      	pop	{r3, r4, r5, pc}
 8017726:	0799      	lsls	r1, r3, #30
 8017728:	bf58      	it	pl
 801772a:	6962      	ldrpl	r2, [r4, #20]
 801772c:	60a2      	str	r2, [r4, #8]
 801772e:	e7f4      	b.n	801771a <__swsetup_r+0x8e>
 8017730:	2000      	movs	r0, #0
 8017732:	e7f7      	b.n	8017724 <__swsetup_r+0x98>
 8017734:	20000090 	.word	0x20000090

08017738 <strncmp>:
 8017738:	b510      	push	{r4, lr}
 801773a:	b16a      	cbz	r2, 8017758 <strncmp+0x20>
 801773c:	3901      	subs	r1, #1
 801773e:	1884      	adds	r4, r0, r2
 8017740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017744:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017748:	429a      	cmp	r2, r3
 801774a:	d103      	bne.n	8017754 <strncmp+0x1c>
 801774c:	42a0      	cmp	r0, r4
 801774e:	d001      	beq.n	8017754 <strncmp+0x1c>
 8017750:	2a00      	cmp	r2, #0
 8017752:	d1f5      	bne.n	8017740 <strncmp+0x8>
 8017754:	1ad0      	subs	r0, r2, r3
 8017756:	bd10      	pop	{r4, pc}
 8017758:	4610      	mov	r0, r2
 801775a:	e7fc      	b.n	8017756 <strncmp+0x1e>
 801775c:	0000      	movs	r0, r0
	...

08017760 <nan>:
 8017760:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017768 <nan+0x8>
 8017764:	4770      	bx	lr
 8017766:	bf00      	nop
 8017768:	00000000 	.word	0x00000000
 801776c:	7ff80000 	.word	0x7ff80000

08017770 <_calloc_r>:
 8017770:	b570      	push	{r4, r5, r6, lr}
 8017772:	fba1 5402 	umull	r5, r4, r1, r2
 8017776:	b93c      	cbnz	r4, 8017788 <_calloc_r+0x18>
 8017778:	4629      	mov	r1, r5
 801777a:	f7fc f8e1 	bl	8013940 <_malloc_r>
 801777e:	4606      	mov	r6, r0
 8017780:	b928      	cbnz	r0, 801778e <_calloc_r+0x1e>
 8017782:	2600      	movs	r6, #0
 8017784:	4630      	mov	r0, r6
 8017786:	bd70      	pop	{r4, r5, r6, pc}
 8017788:	220c      	movs	r2, #12
 801778a:	6002      	str	r2, [r0, #0]
 801778c:	e7f9      	b.n	8017782 <_calloc_r+0x12>
 801778e:	462a      	mov	r2, r5
 8017790:	4621      	mov	r1, r4
 8017792:	f7fd f92e 	bl	80149f2 <memset>
 8017796:	e7f5      	b.n	8017784 <_calloc_r+0x14>

08017798 <rshift>:
 8017798:	6903      	ldr	r3, [r0, #16]
 801779a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801779e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80177a6:	f100 0414 	add.w	r4, r0, #20
 80177aa:	dd45      	ble.n	8017838 <rshift+0xa0>
 80177ac:	f011 011f 	ands.w	r1, r1, #31
 80177b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80177b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80177b8:	d10c      	bne.n	80177d4 <rshift+0x3c>
 80177ba:	f100 0710 	add.w	r7, r0, #16
 80177be:	4629      	mov	r1, r5
 80177c0:	42b1      	cmp	r1, r6
 80177c2:	d334      	bcc.n	801782e <rshift+0x96>
 80177c4:	1a9b      	subs	r3, r3, r2
 80177c6:	009b      	lsls	r3, r3, #2
 80177c8:	1eea      	subs	r2, r5, #3
 80177ca:	4296      	cmp	r6, r2
 80177cc:	bf38      	it	cc
 80177ce:	2300      	movcc	r3, #0
 80177d0:	4423      	add	r3, r4
 80177d2:	e015      	b.n	8017800 <rshift+0x68>
 80177d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80177d8:	f1c1 0820 	rsb	r8, r1, #32
 80177dc:	40cf      	lsrs	r7, r1
 80177de:	f105 0e04 	add.w	lr, r5, #4
 80177e2:	46a1      	mov	r9, r4
 80177e4:	4576      	cmp	r6, lr
 80177e6:	46f4      	mov	ip, lr
 80177e8:	d815      	bhi.n	8017816 <rshift+0x7e>
 80177ea:	1a9a      	subs	r2, r3, r2
 80177ec:	0092      	lsls	r2, r2, #2
 80177ee:	3a04      	subs	r2, #4
 80177f0:	3501      	adds	r5, #1
 80177f2:	42ae      	cmp	r6, r5
 80177f4:	bf38      	it	cc
 80177f6:	2200      	movcc	r2, #0
 80177f8:	18a3      	adds	r3, r4, r2
 80177fa:	50a7      	str	r7, [r4, r2]
 80177fc:	b107      	cbz	r7, 8017800 <rshift+0x68>
 80177fe:	3304      	adds	r3, #4
 8017800:	1b1a      	subs	r2, r3, r4
 8017802:	42a3      	cmp	r3, r4
 8017804:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017808:	bf08      	it	eq
 801780a:	2300      	moveq	r3, #0
 801780c:	6102      	str	r2, [r0, #16]
 801780e:	bf08      	it	eq
 8017810:	6143      	streq	r3, [r0, #20]
 8017812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017816:	f8dc c000 	ldr.w	ip, [ip]
 801781a:	fa0c fc08 	lsl.w	ip, ip, r8
 801781e:	ea4c 0707 	orr.w	r7, ip, r7
 8017822:	f849 7b04 	str.w	r7, [r9], #4
 8017826:	f85e 7b04 	ldr.w	r7, [lr], #4
 801782a:	40cf      	lsrs	r7, r1
 801782c:	e7da      	b.n	80177e4 <rshift+0x4c>
 801782e:	f851 cb04 	ldr.w	ip, [r1], #4
 8017832:	f847 cf04 	str.w	ip, [r7, #4]!
 8017836:	e7c3      	b.n	80177c0 <rshift+0x28>
 8017838:	4623      	mov	r3, r4
 801783a:	e7e1      	b.n	8017800 <rshift+0x68>

0801783c <__hexdig_fun>:
 801783c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017840:	2b09      	cmp	r3, #9
 8017842:	d802      	bhi.n	801784a <__hexdig_fun+0xe>
 8017844:	3820      	subs	r0, #32
 8017846:	b2c0      	uxtb	r0, r0
 8017848:	4770      	bx	lr
 801784a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801784e:	2b05      	cmp	r3, #5
 8017850:	d801      	bhi.n	8017856 <__hexdig_fun+0x1a>
 8017852:	3847      	subs	r0, #71	@ 0x47
 8017854:	e7f7      	b.n	8017846 <__hexdig_fun+0xa>
 8017856:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801785a:	2b05      	cmp	r3, #5
 801785c:	d801      	bhi.n	8017862 <__hexdig_fun+0x26>
 801785e:	3827      	subs	r0, #39	@ 0x27
 8017860:	e7f1      	b.n	8017846 <__hexdig_fun+0xa>
 8017862:	2000      	movs	r0, #0
 8017864:	4770      	bx	lr
	...

08017868 <__gethex>:
 8017868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801786c:	b085      	sub	sp, #20
 801786e:	468a      	mov	sl, r1
 8017870:	9302      	str	r3, [sp, #8]
 8017872:	680b      	ldr	r3, [r1, #0]
 8017874:	9001      	str	r0, [sp, #4]
 8017876:	4690      	mov	r8, r2
 8017878:	1c9c      	adds	r4, r3, #2
 801787a:	46a1      	mov	r9, r4
 801787c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017880:	2830      	cmp	r0, #48	@ 0x30
 8017882:	d0fa      	beq.n	801787a <__gethex+0x12>
 8017884:	eba9 0303 	sub.w	r3, r9, r3
 8017888:	f1a3 0b02 	sub.w	fp, r3, #2
 801788c:	f7ff ffd6 	bl	801783c <__hexdig_fun>
 8017890:	4605      	mov	r5, r0
 8017892:	2800      	cmp	r0, #0
 8017894:	d168      	bne.n	8017968 <__gethex+0x100>
 8017896:	49a0      	ldr	r1, [pc, #640]	@ (8017b18 <__gethex+0x2b0>)
 8017898:	2201      	movs	r2, #1
 801789a:	4648      	mov	r0, r9
 801789c:	f7ff ff4c 	bl	8017738 <strncmp>
 80178a0:	4607      	mov	r7, r0
 80178a2:	2800      	cmp	r0, #0
 80178a4:	d167      	bne.n	8017976 <__gethex+0x10e>
 80178a6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80178aa:	4626      	mov	r6, r4
 80178ac:	f7ff ffc6 	bl	801783c <__hexdig_fun>
 80178b0:	2800      	cmp	r0, #0
 80178b2:	d062      	beq.n	801797a <__gethex+0x112>
 80178b4:	4623      	mov	r3, r4
 80178b6:	7818      	ldrb	r0, [r3, #0]
 80178b8:	2830      	cmp	r0, #48	@ 0x30
 80178ba:	4699      	mov	r9, r3
 80178bc:	f103 0301 	add.w	r3, r3, #1
 80178c0:	d0f9      	beq.n	80178b6 <__gethex+0x4e>
 80178c2:	f7ff ffbb 	bl	801783c <__hexdig_fun>
 80178c6:	fab0 f580 	clz	r5, r0
 80178ca:	096d      	lsrs	r5, r5, #5
 80178cc:	f04f 0b01 	mov.w	fp, #1
 80178d0:	464a      	mov	r2, r9
 80178d2:	4616      	mov	r6, r2
 80178d4:	3201      	adds	r2, #1
 80178d6:	7830      	ldrb	r0, [r6, #0]
 80178d8:	f7ff ffb0 	bl	801783c <__hexdig_fun>
 80178dc:	2800      	cmp	r0, #0
 80178de:	d1f8      	bne.n	80178d2 <__gethex+0x6a>
 80178e0:	498d      	ldr	r1, [pc, #564]	@ (8017b18 <__gethex+0x2b0>)
 80178e2:	2201      	movs	r2, #1
 80178e4:	4630      	mov	r0, r6
 80178e6:	f7ff ff27 	bl	8017738 <strncmp>
 80178ea:	2800      	cmp	r0, #0
 80178ec:	d13f      	bne.n	801796e <__gethex+0x106>
 80178ee:	b944      	cbnz	r4, 8017902 <__gethex+0x9a>
 80178f0:	1c74      	adds	r4, r6, #1
 80178f2:	4622      	mov	r2, r4
 80178f4:	4616      	mov	r6, r2
 80178f6:	3201      	adds	r2, #1
 80178f8:	7830      	ldrb	r0, [r6, #0]
 80178fa:	f7ff ff9f 	bl	801783c <__hexdig_fun>
 80178fe:	2800      	cmp	r0, #0
 8017900:	d1f8      	bne.n	80178f4 <__gethex+0x8c>
 8017902:	1ba4      	subs	r4, r4, r6
 8017904:	00a7      	lsls	r7, r4, #2
 8017906:	7833      	ldrb	r3, [r6, #0]
 8017908:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801790c:	2b50      	cmp	r3, #80	@ 0x50
 801790e:	d13e      	bne.n	801798e <__gethex+0x126>
 8017910:	7873      	ldrb	r3, [r6, #1]
 8017912:	2b2b      	cmp	r3, #43	@ 0x2b
 8017914:	d033      	beq.n	801797e <__gethex+0x116>
 8017916:	2b2d      	cmp	r3, #45	@ 0x2d
 8017918:	d034      	beq.n	8017984 <__gethex+0x11c>
 801791a:	1c71      	adds	r1, r6, #1
 801791c:	2400      	movs	r4, #0
 801791e:	7808      	ldrb	r0, [r1, #0]
 8017920:	f7ff ff8c 	bl	801783c <__hexdig_fun>
 8017924:	1e43      	subs	r3, r0, #1
 8017926:	b2db      	uxtb	r3, r3
 8017928:	2b18      	cmp	r3, #24
 801792a:	d830      	bhi.n	801798e <__gethex+0x126>
 801792c:	f1a0 0210 	sub.w	r2, r0, #16
 8017930:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017934:	f7ff ff82 	bl	801783c <__hexdig_fun>
 8017938:	f100 3cff 	add.w	ip, r0, #4294967295
 801793c:	fa5f fc8c 	uxtb.w	ip, ip
 8017940:	f1bc 0f18 	cmp.w	ip, #24
 8017944:	f04f 030a 	mov.w	r3, #10
 8017948:	d91e      	bls.n	8017988 <__gethex+0x120>
 801794a:	b104      	cbz	r4, 801794e <__gethex+0xe6>
 801794c:	4252      	negs	r2, r2
 801794e:	4417      	add	r7, r2
 8017950:	f8ca 1000 	str.w	r1, [sl]
 8017954:	b1ed      	cbz	r5, 8017992 <__gethex+0x12a>
 8017956:	f1bb 0f00 	cmp.w	fp, #0
 801795a:	bf0c      	ite	eq
 801795c:	2506      	moveq	r5, #6
 801795e:	2500      	movne	r5, #0
 8017960:	4628      	mov	r0, r5
 8017962:	b005      	add	sp, #20
 8017964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017968:	2500      	movs	r5, #0
 801796a:	462c      	mov	r4, r5
 801796c:	e7b0      	b.n	80178d0 <__gethex+0x68>
 801796e:	2c00      	cmp	r4, #0
 8017970:	d1c7      	bne.n	8017902 <__gethex+0x9a>
 8017972:	4627      	mov	r7, r4
 8017974:	e7c7      	b.n	8017906 <__gethex+0x9e>
 8017976:	464e      	mov	r6, r9
 8017978:	462f      	mov	r7, r5
 801797a:	2501      	movs	r5, #1
 801797c:	e7c3      	b.n	8017906 <__gethex+0x9e>
 801797e:	2400      	movs	r4, #0
 8017980:	1cb1      	adds	r1, r6, #2
 8017982:	e7cc      	b.n	801791e <__gethex+0xb6>
 8017984:	2401      	movs	r4, #1
 8017986:	e7fb      	b.n	8017980 <__gethex+0x118>
 8017988:	fb03 0002 	mla	r0, r3, r2, r0
 801798c:	e7ce      	b.n	801792c <__gethex+0xc4>
 801798e:	4631      	mov	r1, r6
 8017990:	e7de      	b.n	8017950 <__gethex+0xe8>
 8017992:	eba6 0309 	sub.w	r3, r6, r9
 8017996:	3b01      	subs	r3, #1
 8017998:	4629      	mov	r1, r5
 801799a:	2b07      	cmp	r3, #7
 801799c:	dc0a      	bgt.n	80179b4 <__gethex+0x14c>
 801799e:	9801      	ldr	r0, [sp, #4]
 80179a0:	f7fd ffb8 	bl	8015914 <_Balloc>
 80179a4:	4604      	mov	r4, r0
 80179a6:	b940      	cbnz	r0, 80179ba <__gethex+0x152>
 80179a8:	4b5c      	ldr	r3, [pc, #368]	@ (8017b1c <__gethex+0x2b4>)
 80179aa:	4602      	mov	r2, r0
 80179ac:	21e4      	movs	r1, #228	@ 0xe4
 80179ae:	485c      	ldr	r0, [pc, #368]	@ (8017b20 <__gethex+0x2b8>)
 80179b0:	f7fb ff64 	bl	801387c <__assert_func>
 80179b4:	3101      	adds	r1, #1
 80179b6:	105b      	asrs	r3, r3, #1
 80179b8:	e7ef      	b.n	801799a <__gethex+0x132>
 80179ba:	f100 0a14 	add.w	sl, r0, #20
 80179be:	2300      	movs	r3, #0
 80179c0:	4655      	mov	r5, sl
 80179c2:	469b      	mov	fp, r3
 80179c4:	45b1      	cmp	r9, r6
 80179c6:	d337      	bcc.n	8017a38 <__gethex+0x1d0>
 80179c8:	f845 bb04 	str.w	fp, [r5], #4
 80179cc:	eba5 050a 	sub.w	r5, r5, sl
 80179d0:	10ad      	asrs	r5, r5, #2
 80179d2:	6125      	str	r5, [r4, #16]
 80179d4:	4658      	mov	r0, fp
 80179d6:	f7fe f88f 	bl	8015af8 <__hi0bits>
 80179da:	016d      	lsls	r5, r5, #5
 80179dc:	f8d8 6000 	ldr.w	r6, [r8]
 80179e0:	1a2d      	subs	r5, r5, r0
 80179e2:	42b5      	cmp	r5, r6
 80179e4:	dd54      	ble.n	8017a90 <__gethex+0x228>
 80179e6:	1bad      	subs	r5, r5, r6
 80179e8:	4629      	mov	r1, r5
 80179ea:	4620      	mov	r0, r4
 80179ec:	f7fe fc23 	bl	8016236 <__any_on>
 80179f0:	4681      	mov	r9, r0
 80179f2:	b178      	cbz	r0, 8017a14 <__gethex+0x1ac>
 80179f4:	1e6b      	subs	r3, r5, #1
 80179f6:	1159      	asrs	r1, r3, #5
 80179f8:	f003 021f 	and.w	r2, r3, #31
 80179fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017a00:	f04f 0901 	mov.w	r9, #1
 8017a04:	fa09 f202 	lsl.w	r2, r9, r2
 8017a08:	420a      	tst	r2, r1
 8017a0a:	d003      	beq.n	8017a14 <__gethex+0x1ac>
 8017a0c:	454b      	cmp	r3, r9
 8017a0e:	dc36      	bgt.n	8017a7e <__gethex+0x216>
 8017a10:	f04f 0902 	mov.w	r9, #2
 8017a14:	4629      	mov	r1, r5
 8017a16:	4620      	mov	r0, r4
 8017a18:	f7ff febe 	bl	8017798 <rshift>
 8017a1c:	442f      	add	r7, r5
 8017a1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a22:	42bb      	cmp	r3, r7
 8017a24:	da42      	bge.n	8017aac <__gethex+0x244>
 8017a26:	9801      	ldr	r0, [sp, #4]
 8017a28:	4621      	mov	r1, r4
 8017a2a:	f7fd ffb3 	bl	8015994 <_Bfree>
 8017a2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017a30:	2300      	movs	r3, #0
 8017a32:	6013      	str	r3, [r2, #0]
 8017a34:	25a3      	movs	r5, #163	@ 0xa3
 8017a36:	e793      	b.n	8017960 <__gethex+0xf8>
 8017a38:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017a3c:	2a2e      	cmp	r2, #46	@ 0x2e
 8017a3e:	d012      	beq.n	8017a66 <__gethex+0x1fe>
 8017a40:	2b20      	cmp	r3, #32
 8017a42:	d104      	bne.n	8017a4e <__gethex+0x1e6>
 8017a44:	f845 bb04 	str.w	fp, [r5], #4
 8017a48:	f04f 0b00 	mov.w	fp, #0
 8017a4c:	465b      	mov	r3, fp
 8017a4e:	7830      	ldrb	r0, [r6, #0]
 8017a50:	9303      	str	r3, [sp, #12]
 8017a52:	f7ff fef3 	bl	801783c <__hexdig_fun>
 8017a56:	9b03      	ldr	r3, [sp, #12]
 8017a58:	f000 000f 	and.w	r0, r0, #15
 8017a5c:	4098      	lsls	r0, r3
 8017a5e:	ea4b 0b00 	orr.w	fp, fp, r0
 8017a62:	3304      	adds	r3, #4
 8017a64:	e7ae      	b.n	80179c4 <__gethex+0x15c>
 8017a66:	45b1      	cmp	r9, r6
 8017a68:	d8ea      	bhi.n	8017a40 <__gethex+0x1d8>
 8017a6a:	492b      	ldr	r1, [pc, #172]	@ (8017b18 <__gethex+0x2b0>)
 8017a6c:	9303      	str	r3, [sp, #12]
 8017a6e:	2201      	movs	r2, #1
 8017a70:	4630      	mov	r0, r6
 8017a72:	f7ff fe61 	bl	8017738 <strncmp>
 8017a76:	9b03      	ldr	r3, [sp, #12]
 8017a78:	2800      	cmp	r0, #0
 8017a7a:	d1e1      	bne.n	8017a40 <__gethex+0x1d8>
 8017a7c:	e7a2      	b.n	80179c4 <__gethex+0x15c>
 8017a7e:	1ea9      	subs	r1, r5, #2
 8017a80:	4620      	mov	r0, r4
 8017a82:	f7fe fbd8 	bl	8016236 <__any_on>
 8017a86:	2800      	cmp	r0, #0
 8017a88:	d0c2      	beq.n	8017a10 <__gethex+0x1a8>
 8017a8a:	f04f 0903 	mov.w	r9, #3
 8017a8e:	e7c1      	b.n	8017a14 <__gethex+0x1ac>
 8017a90:	da09      	bge.n	8017aa6 <__gethex+0x23e>
 8017a92:	1b75      	subs	r5, r6, r5
 8017a94:	4621      	mov	r1, r4
 8017a96:	9801      	ldr	r0, [sp, #4]
 8017a98:	462a      	mov	r2, r5
 8017a9a:	f7fe f993 	bl	8015dc4 <__lshift>
 8017a9e:	1b7f      	subs	r7, r7, r5
 8017aa0:	4604      	mov	r4, r0
 8017aa2:	f100 0a14 	add.w	sl, r0, #20
 8017aa6:	f04f 0900 	mov.w	r9, #0
 8017aaa:	e7b8      	b.n	8017a1e <__gethex+0x1b6>
 8017aac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017ab0:	42bd      	cmp	r5, r7
 8017ab2:	dd6f      	ble.n	8017b94 <__gethex+0x32c>
 8017ab4:	1bed      	subs	r5, r5, r7
 8017ab6:	42ae      	cmp	r6, r5
 8017ab8:	dc34      	bgt.n	8017b24 <__gethex+0x2bc>
 8017aba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017abe:	2b02      	cmp	r3, #2
 8017ac0:	d022      	beq.n	8017b08 <__gethex+0x2a0>
 8017ac2:	2b03      	cmp	r3, #3
 8017ac4:	d024      	beq.n	8017b10 <__gethex+0x2a8>
 8017ac6:	2b01      	cmp	r3, #1
 8017ac8:	d115      	bne.n	8017af6 <__gethex+0x28e>
 8017aca:	42ae      	cmp	r6, r5
 8017acc:	d113      	bne.n	8017af6 <__gethex+0x28e>
 8017ace:	2e01      	cmp	r6, #1
 8017ad0:	d10b      	bne.n	8017aea <__gethex+0x282>
 8017ad2:	9a02      	ldr	r2, [sp, #8]
 8017ad4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017ad8:	6013      	str	r3, [r2, #0]
 8017ada:	2301      	movs	r3, #1
 8017adc:	6123      	str	r3, [r4, #16]
 8017ade:	f8ca 3000 	str.w	r3, [sl]
 8017ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ae4:	2562      	movs	r5, #98	@ 0x62
 8017ae6:	601c      	str	r4, [r3, #0]
 8017ae8:	e73a      	b.n	8017960 <__gethex+0xf8>
 8017aea:	1e71      	subs	r1, r6, #1
 8017aec:	4620      	mov	r0, r4
 8017aee:	f7fe fba2 	bl	8016236 <__any_on>
 8017af2:	2800      	cmp	r0, #0
 8017af4:	d1ed      	bne.n	8017ad2 <__gethex+0x26a>
 8017af6:	9801      	ldr	r0, [sp, #4]
 8017af8:	4621      	mov	r1, r4
 8017afa:	f7fd ff4b 	bl	8015994 <_Bfree>
 8017afe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b00:	2300      	movs	r3, #0
 8017b02:	6013      	str	r3, [r2, #0]
 8017b04:	2550      	movs	r5, #80	@ 0x50
 8017b06:	e72b      	b.n	8017960 <__gethex+0xf8>
 8017b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d1f3      	bne.n	8017af6 <__gethex+0x28e>
 8017b0e:	e7e0      	b.n	8017ad2 <__gethex+0x26a>
 8017b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d1dd      	bne.n	8017ad2 <__gethex+0x26a>
 8017b16:	e7ee      	b.n	8017af6 <__gethex+0x28e>
 8017b18:	080193b8 	.word	0x080193b8
 8017b1c:	08019251 	.word	0x08019251
 8017b20:	0801952a 	.word	0x0801952a
 8017b24:	1e6f      	subs	r7, r5, #1
 8017b26:	f1b9 0f00 	cmp.w	r9, #0
 8017b2a:	d130      	bne.n	8017b8e <__gethex+0x326>
 8017b2c:	b127      	cbz	r7, 8017b38 <__gethex+0x2d0>
 8017b2e:	4639      	mov	r1, r7
 8017b30:	4620      	mov	r0, r4
 8017b32:	f7fe fb80 	bl	8016236 <__any_on>
 8017b36:	4681      	mov	r9, r0
 8017b38:	117a      	asrs	r2, r7, #5
 8017b3a:	2301      	movs	r3, #1
 8017b3c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017b40:	f007 071f 	and.w	r7, r7, #31
 8017b44:	40bb      	lsls	r3, r7
 8017b46:	4213      	tst	r3, r2
 8017b48:	4629      	mov	r1, r5
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	bf18      	it	ne
 8017b4e:	f049 0902 	orrne.w	r9, r9, #2
 8017b52:	f7ff fe21 	bl	8017798 <rshift>
 8017b56:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017b5a:	1b76      	subs	r6, r6, r5
 8017b5c:	2502      	movs	r5, #2
 8017b5e:	f1b9 0f00 	cmp.w	r9, #0
 8017b62:	d047      	beq.n	8017bf4 <__gethex+0x38c>
 8017b64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b68:	2b02      	cmp	r3, #2
 8017b6a:	d015      	beq.n	8017b98 <__gethex+0x330>
 8017b6c:	2b03      	cmp	r3, #3
 8017b6e:	d017      	beq.n	8017ba0 <__gethex+0x338>
 8017b70:	2b01      	cmp	r3, #1
 8017b72:	d109      	bne.n	8017b88 <__gethex+0x320>
 8017b74:	f019 0f02 	tst.w	r9, #2
 8017b78:	d006      	beq.n	8017b88 <__gethex+0x320>
 8017b7a:	f8da 3000 	ldr.w	r3, [sl]
 8017b7e:	ea49 0903 	orr.w	r9, r9, r3
 8017b82:	f019 0f01 	tst.w	r9, #1
 8017b86:	d10e      	bne.n	8017ba6 <__gethex+0x33e>
 8017b88:	f045 0510 	orr.w	r5, r5, #16
 8017b8c:	e032      	b.n	8017bf4 <__gethex+0x38c>
 8017b8e:	f04f 0901 	mov.w	r9, #1
 8017b92:	e7d1      	b.n	8017b38 <__gethex+0x2d0>
 8017b94:	2501      	movs	r5, #1
 8017b96:	e7e2      	b.n	8017b5e <__gethex+0x2f6>
 8017b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b9a:	f1c3 0301 	rsb	r3, r3, #1
 8017b9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d0f0      	beq.n	8017b88 <__gethex+0x320>
 8017ba6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017baa:	f104 0314 	add.w	r3, r4, #20
 8017bae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017bb2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017bb6:	f04f 0c00 	mov.w	ip, #0
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bc0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017bc4:	d01b      	beq.n	8017bfe <__gethex+0x396>
 8017bc6:	3201      	adds	r2, #1
 8017bc8:	6002      	str	r2, [r0, #0]
 8017bca:	2d02      	cmp	r5, #2
 8017bcc:	f104 0314 	add.w	r3, r4, #20
 8017bd0:	d13c      	bne.n	8017c4c <__gethex+0x3e4>
 8017bd2:	f8d8 2000 	ldr.w	r2, [r8]
 8017bd6:	3a01      	subs	r2, #1
 8017bd8:	42b2      	cmp	r2, r6
 8017bda:	d109      	bne.n	8017bf0 <__gethex+0x388>
 8017bdc:	1171      	asrs	r1, r6, #5
 8017bde:	2201      	movs	r2, #1
 8017be0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017be4:	f006 061f 	and.w	r6, r6, #31
 8017be8:	fa02 f606 	lsl.w	r6, r2, r6
 8017bec:	421e      	tst	r6, r3
 8017bee:	d13a      	bne.n	8017c66 <__gethex+0x3fe>
 8017bf0:	f045 0520 	orr.w	r5, r5, #32
 8017bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017bf6:	601c      	str	r4, [r3, #0]
 8017bf8:	9b02      	ldr	r3, [sp, #8]
 8017bfa:	601f      	str	r7, [r3, #0]
 8017bfc:	e6b0      	b.n	8017960 <__gethex+0xf8>
 8017bfe:	4299      	cmp	r1, r3
 8017c00:	f843 cc04 	str.w	ip, [r3, #-4]
 8017c04:	d8d9      	bhi.n	8017bba <__gethex+0x352>
 8017c06:	68a3      	ldr	r3, [r4, #8]
 8017c08:	459b      	cmp	fp, r3
 8017c0a:	db17      	blt.n	8017c3c <__gethex+0x3d4>
 8017c0c:	6861      	ldr	r1, [r4, #4]
 8017c0e:	9801      	ldr	r0, [sp, #4]
 8017c10:	3101      	adds	r1, #1
 8017c12:	f7fd fe7f 	bl	8015914 <_Balloc>
 8017c16:	4681      	mov	r9, r0
 8017c18:	b918      	cbnz	r0, 8017c22 <__gethex+0x3ba>
 8017c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8017c84 <__gethex+0x41c>)
 8017c1c:	4602      	mov	r2, r0
 8017c1e:	2184      	movs	r1, #132	@ 0x84
 8017c20:	e6c5      	b.n	80179ae <__gethex+0x146>
 8017c22:	6922      	ldr	r2, [r4, #16]
 8017c24:	3202      	adds	r2, #2
 8017c26:	f104 010c 	add.w	r1, r4, #12
 8017c2a:	0092      	lsls	r2, r2, #2
 8017c2c:	300c      	adds	r0, #12
 8017c2e:	f7fc ffc6 	bl	8014bbe <memcpy>
 8017c32:	4621      	mov	r1, r4
 8017c34:	9801      	ldr	r0, [sp, #4]
 8017c36:	f7fd fead 	bl	8015994 <_Bfree>
 8017c3a:	464c      	mov	r4, r9
 8017c3c:	6923      	ldr	r3, [r4, #16]
 8017c3e:	1c5a      	adds	r2, r3, #1
 8017c40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017c44:	6122      	str	r2, [r4, #16]
 8017c46:	2201      	movs	r2, #1
 8017c48:	615a      	str	r2, [r3, #20]
 8017c4a:	e7be      	b.n	8017bca <__gethex+0x362>
 8017c4c:	6922      	ldr	r2, [r4, #16]
 8017c4e:	455a      	cmp	r2, fp
 8017c50:	dd0b      	ble.n	8017c6a <__gethex+0x402>
 8017c52:	2101      	movs	r1, #1
 8017c54:	4620      	mov	r0, r4
 8017c56:	f7ff fd9f 	bl	8017798 <rshift>
 8017c5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c5e:	3701      	adds	r7, #1
 8017c60:	42bb      	cmp	r3, r7
 8017c62:	f6ff aee0 	blt.w	8017a26 <__gethex+0x1be>
 8017c66:	2501      	movs	r5, #1
 8017c68:	e7c2      	b.n	8017bf0 <__gethex+0x388>
 8017c6a:	f016 061f 	ands.w	r6, r6, #31
 8017c6e:	d0fa      	beq.n	8017c66 <__gethex+0x3fe>
 8017c70:	4453      	add	r3, sl
 8017c72:	f1c6 0620 	rsb	r6, r6, #32
 8017c76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017c7a:	f7fd ff3d 	bl	8015af8 <__hi0bits>
 8017c7e:	42b0      	cmp	r0, r6
 8017c80:	dbe7      	blt.n	8017c52 <__gethex+0x3ea>
 8017c82:	e7f0      	b.n	8017c66 <__gethex+0x3fe>
 8017c84:	08019251 	.word	0x08019251

08017c88 <L_shift>:
 8017c88:	f1c2 0208 	rsb	r2, r2, #8
 8017c8c:	0092      	lsls	r2, r2, #2
 8017c8e:	b570      	push	{r4, r5, r6, lr}
 8017c90:	f1c2 0620 	rsb	r6, r2, #32
 8017c94:	6843      	ldr	r3, [r0, #4]
 8017c96:	6804      	ldr	r4, [r0, #0]
 8017c98:	fa03 f506 	lsl.w	r5, r3, r6
 8017c9c:	432c      	orrs	r4, r5
 8017c9e:	40d3      	lsrs	r3, r2
 8017ca0:	6004      	str	r4, [r0, #0]
 8017ca2:	f840 3f04 	str.w	r3, [r0, #4]!
 8017ca6:	4288      	cmp	r0, r1
 8017ca8:	d3f4      	bcc.n	8017c94 <L_shift+0xc>
 8017caa:	bd70      	pop	{r4, r5, r6, pc}

08017cac <__match>:
 8017cac:	b530      	push	{r4, r5, lr}
 8017cae:	6803      	ldr	r3, [r0, #0]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cb6:	b914      	cbnz	r4, 8017cbe <__match+0x12>
 8017cb8:	6003      	str	r3, [r0, #0]
 8017cba:	2001      	movs	r0, #1
 8017cbc:	bd30      	pop	{r4, r5, pc}
 8017cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cc2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017cc6:	2d19      	cmp	r5, #25
 8017cc8:	bf98      	it	ls
 8017cca:	3220      	addls	r2, #32
 8017ccc:	42a2      	cmp	r2, r4
 8017cce:	d0f0      	beq.n	8017cb2 <__match+0x6>
 8017cd0:	2000      	movs	r0, #0
 8017cd2:	e7f3      	b.n	8017cbc <__match+0x10>

08017cd4 <__hexnan>:
 8017cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cd8:	680b      	ldr	r3, [r1, #0]
 8017cda:	6801      	ldr	r1, [r0, #0]
 8017cdc:	115e      	asrs	r6, r3, #5
 8017cde:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017ce2:	f013 031f 	ands.w	r3, r3, #31
 8017ce6:	b087      	sub	sp, #28
 8017ce8:	bf18      	it	ne
 8017cea:	3604      	addne	r6, #4
 8017cec:	2500      	movs	r5, #0
 8017cee:	1f37      	subs	r7, r6, #4
 8017cf0:	4682      	mov	sl, r0
 8017cf2:	4690      	mov	r8, r2
 8017cf4:	9301      	str	r3, [sp, #4]
 8017cf6:	f846 5c04 	str.w	r5, [r6, #-4]
 8017cfa:	46b9      	mov	r9, r7
 8017cfc:	463c      	mov	r4, r7
 8017cfe:	9502      	str	r5, [sp, #8]
 8017d00:	46ab      	mov	fp, r5
 8017d02:	784a      	ldrb	r2, [r1, #1]
 8017d04:	1c4b      	adds	r3, r1, #1
 8017d06:	9303      	str	r3, [sp, #12]
 8017d08:	b342      	cbz	r2, 8017d5c <__hexnan+0x88>
 8017d0a:	4610      	mov	r0, r2
 8017d0c:	9105      	str	r1, [sp, #20]
 8017d0e:	9204      	str	r2, [sp, #16]
 8017d10:	f7ff fd94 	bl	801783c <__hexdig_fun>
 8017d14:	2800      	cmp	r0, #0
 8017d16:	d151      	bne.n	8017dbc <__hexnan+0xe8>
 8017d18:	9a04      	ldr	r2, [sp, #16]
 8017d1a:	9905      	ldr	r1, [sp, #20]
 8017d1c:	2a20      	cmp	r2, #32
 8017d1e:	d818      	bhi.n	8017d52 <__hexnan+0x7e>
 8017d20:	9b02      	ldr	r3, [sp, #8]
 8017d22:	459b      	cmp	fp, r3
 8017d24:	dd13      	ble.n	8017d4e <__hexnan+0x7a>
 8017d26:	454c      	cmp	r4, r9
 8017d28:	d206      	bcs.n	8017d38 <__hexnan+0x64>
 8017d2a:	2d07      	cmp	r5, #7
 8017d2c:	dc04      	bgt.n	8017d38 <__hexnan+0x64>
 8017d2e:	462a      	mov	r2, r5
 8017d30:	4649      	mov	r1, r9
 8017d32:	4620      	mov	r0, r4
 8017d34:	f7ff ffa8 	bl	8017c88 <L_shift>
 8017d38:	4544      	cmp	r4, r8
 8017d3a:	d952      	bls.n	8017de2 <__hexnan+0x10e>
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	f1a4 0904 	sub.w	r9, r4, #4
 8017d42:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d46:	f8cd b008 	str.w	fp, [sp, #8]
 8017d4a:	464c      	mov	r4, r9
 8017d4c:	461d      	mov	r5, r3
 8017d4e:	9903      	ldr	r1, [sp, #12]
 8017d50:	e7d7      	b.n	8017d02 <__hexnan+0x2e>
 8017d52:	2a29      	cmp	r2, #41	@ 0x29
 8017d54:	d157      	bne.n	8017e06 <__hexnan+0x132>
 8017d56:	3102      	adds	r1, #2
 8017d58:	f8ca 1000 	str.w	r1, [sl]
 8017d5c:	f1bb 0f00 	cmp.w	fp, #0
 8017d60:	d051      	beq.n	8017e06 <__hexnan+0x132>
 8017d62:	454c      	cmp	r4, r9
 8017d64:	d206      	bcs.n	8017d74 <__hexnan+0xa0>
 8017d66:	2d07      	cmp	r5, #7
 8017d68:	dc04      	bgt.n	8017d74 <__hexnan+0xa0>
 8017d6a:	462a      	mov	r2, r5
 8017d6c:	4649      	mov	r1, r9
 8017d6e:	4620      	mov	r0, r4
 8017d70:	f7ff ff8a 	bl	8017c88 <L_shift>
 8017d74:	4544      	cmp	r4, r8
 8017d76:	d936      	bls.n	8017de6 <__hexnan+0x112>
 8017d78:	f1a8 0204 	sub.w	r2, r8, #4
 8017d7c:	4623      	mov	r3, r4
 8017d7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8017d82:	f842 1f04 	str.w	r1, [r2, #4]!
 8017d86:	429f      	cmp	r7, r3
 8017d88:	d2f9      	bcs.n	8017d7e <__hexnan+0xaa>
 8017d8a:	1b3b      	subs	r3, r7, r4
 8017d8c:	f023 0303 	bic.w	r3, r3, #3
 8017d90:	3304      	adds	r3, #4
 8017d92:	3401      	adds	r4, #1
 8017d94:	3e03      	subs	r6, #3
 8017d96:	42b4      	cmp	r4, r6
 8017d98:	bf88      	it	hi
 8017d9a:	2304      	movhi	r3, #4
 8017d9c:	4443      	add	r3, r8
 8017d9e:	2200      	movs	r2, #0
 8017da0:	f843 2b04 	str.w	r2, [r3], #4
 8017da4:	429f      	cmp	r7, r3
 8017da6:	d2fb      	bcs.n	8017da0 <__hexnan+0xcc>
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	b91b      	cbnz	r3, 8017db4 <__hexnan+0xe0>
 8017dac:	4547      	cmp	r7, r8
 8017dae:	d128      	bne.n	8017e02 <__hexnan+0x12e>
 8017db0:	2301      	movs	r3, #1
 8017db2:	603b      	str	r3, [r7, #0]
 8017db4:	2005      	movs	r0, #5
 8017db6:	b007      	add	sp, #28
 8017db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dbc:	3501      	adds	r5, #1
 8017dbe:	2d08      	cmp	r5, #8
 8017dc0:	f10b 0b01 	add.w	fp, fp, #1
 8017dc4:	dd06      	ble.n	8017dd4 <__hexnan+0x100>
 8017dc6:	4544      	cmp	r4, r8
 8017dc8:	d9c1      	bls.n	8017d4e <__hexnan+0x7a>
 8017dca:	2300      	movs	r3, #0
 8017dcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8017dd0:	2501      	movs	r5, #1
 8017dd2:	3c04      	subs	r4, #4
 8017dd4:	6822      	ldr	r2, [r4, #0]
 8017dd6:	f000 000f 	and.w	r0, r0, #15
 8017dda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017dde:	6020      	str	r0, [r4, #0]
 8017de0:	e7b5      	b.n	8017d4e <__hexnan+0x7a>
 8017de2:	2508      	movs	r5, #8
 8017de4:	e7b3      	b.n	8017d4e <__hexnan+0x7a>
 8017de6:	9b01      	ldr	r3, [sp, #4]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d0dd      	beq.n	8017da8 <__hexnan+0xd4>
 8017dec:	f1c3 0320 	rsb	r3, r3, #32
 8017df0:	f04f 32ff 	mov.w	r2, #4294967295
 8017df4:	40da      	lsrs	r2, r3
 8017df6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017dfa:	4013      	ands	r3, r2
 8017dfc:	f846 3c04 	str.w	r3, [r6, #-4]
 8017e00:	e7d2      	b.n	8017da8 <__hexnan+0xd4>
 8017e02:	3f04      	subs	r7, #4
 8017e04:	e7d0      	b.n	8017da8 <__hexnan+0xd4>
 8017e06:	2004      	movs	r0, #4
 8017e08:	e7d5      	b.n	8017db6 <__hexnan+0xe2>

08017e0a <__ascii_mbtowc>:
 8017e0a:	b082      	sub	sp, #8
 8017e0c:	b901      	cbnz	r1, 8017e10 <__ascii_mbtowc+0x6>
 8017e0e:	a901      	add	r1, sp, #4
 8017e10:	b142      	cbz	r2, 8017e24 <__ascii_mbtowc+0x1a>
 8017e12:	b14b      	cbz	r3, 8017e28 <__ascii_mbtowc+0x1e>
 8017e14:	7813      	ldrb	r3, [r2, #0]
 8017e16:	600b      	str	r3, [r1, #0]
 8017e18:	7812      	ldrb	r2, [r2, #0]
 8017e1a:	1e10      	subs	r0, r2, #0
 8017e1c:	bf18      	it	ne
 8017e1e:	2001      	movne	r0, #1
 8017e20:	b002      	add	sp, #8
 8017e22:	4770      	bx	lr
 8017e24:	4610      	mov	r0, r2
 8017e26:	e7fb      	b.n	8017e20 <__ascii_mbtowc+0x16>
 8017e28:	f06f 0001 	mvn.w	r0, #1
 8017e2c:	e7f8      	b.n	8017e20 <__ascii_mbtowc+0x16>

08017e2e <_realloc_r>:
 8017e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e32:	4680      	mov	r8, r0
 8017e34:	4615      	mov	r5, r2
 8017e36:	460c      	mov	r4, r1
 8017e38:	b921      	cbnz	r1, 8017e44 <_realloc_r+0x16>
 8017e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e3e:	4611      	mov	r1, r2
 8017e40:	f7fb bd7e 	b.w	8013940 <_malloc_r>
 8017e44:	b92a      	cbnz	r2, 8017e52 <_realloc_r+0x24>
 8017e46:	f7fd fd1b 	bl	8015880 <_free_r>
 8017e4a:	2400      	movs	r4, #0
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e52:	f000 f8ab 	bl	8017fac <_malloc_usable_size_r>
 8017e56:	4285      	cmp	r5, r0
 8017e58:	4606      	mov	r6, r0
 8017e5a:	d802      	bhi.n	8017e62 <_realloc_r+0x34>
 8017e5c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017e60:	d8f4      	bhi.n	8017e4c <_realloc_r+0x1e>
 8017e62:	4629      	mov	r1, r5
 8017e64:	4640      	mov	r0, r8
 8017e66:	f7fb fd6b 	bl	8013940 <_malloc_r>
 8017e6a:	4607      	mov	r7, r0
 8017e6c:	2800      	cmp	r0, #0
 8017e6e:	d0ec      	beq.n	8017e4a <_realloc_r+0x1c>
 8017e70:	42b5      	cmp	r5, r6
 8017e72:	462a      	mov	r2, r5
 8017e74:	4621      	mov	r1, r4
 8017e76:	bf28      	it	cs
 8017e78:	4632      	movcs	r2, r6
 8017e7a:	f7fc fea0 	bl	8014bbe <memcpy>
 8017e7e:	4621      	mov	r1, r4
 8017e80:	4640      	mov	r0, r8
 8017e82:	f7fd fcfd 	bl	8015880 <_free_r>
 8017e86:	463c      	mov	r4, r7
 8017e88:	e7e0      	b.n	8017e4c <_realloc_r+0x1e>

08017e8a <__ascii_wctomb>:
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	4608      	mov	r0, r1
 8017e8e:	b141      	cbz	r1, 8017ea2 <__ascii_wctomb+0x18>
 8017e90:	2aff      	cmp	r2, #255	@ 0xff
 8017e92:	d904      	bls.n	8017e9e <__ascii_wctomb+0x14>
 8017e94:	228a      	movs	r2, #138	@ 0x8a
 8017e96:	601a      	str	r2, [r3, #0]
 8017e98:	f04f 30ff 	mov.w	r0, #4294967295
 8017e9c:	4770      	bx	lr
 8017e9e:	700a      	strb	r2, [r1, #0]
 8017ea0:	2001      	movs	r0, #1
 8017ea2:	4770      	bx	lr

08017ea4 <__swhatbuf_r>:
 8017ea4:	b570      	push	{r4, r5, r6, lr}
 8017ea6:	460c      	mov	r4, r1
 8017ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eac:	2900      	cmp	r1, #0
 8017eae:	b096      	sub	sp, #88	@ 0x58
 8017eb0:	4615      	mov	r5, r2
 8017eb2:	461e      	mov	r6, r3
 8017eb4:	da0d      	bge.n	8017ed2 <__swhatbuf_r+0x2e>
 8017eb6:	89a3      	ldrh	r3, [r4, #12]
 8017eb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017ebc:	f04f 0100 	mov.w	r1, #0
 8017ec0:	bf14      	ite	ne
 8017ec2:	2340      	movne	r3, #64	@ 0x40
 8017ec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017ec8:	2000      	movs	r0, #0
 8017eca:	6031      	str	r1, [r6, #0]
 8017ecc:	602b      	str	r3, [r5, #0]
 8017ece:	b016      	add	sp, #88	@ 0x58
 8017ed0:	bd70      	pop	{r4, r5, r6, pc}
 8017ed2:	466a      	mov	r2, sp
 8017ed4:	f000 f848 	bl	8017f68 <_fstat_r>
 8017ed8:	2800      	cmp	r0, #0
 8017eda:	dbec      	blt.n	8017eb6 <__swhatbuf_r+0x12>
 8017edc:	9901      	ldr	r1, [sp, #4]
 8017ede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017ee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017ee6:	4259      	negs	r1, r3
 8017ee8:	4159      	adcs	r1, r3
 8017eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017eee:	e7eb      	b.n	8017ec8 <__swhatbuf_r+0x24>

08017ef0 <__smakebuf_r>:
 8017ef0:	898b      	ldrh	r3, [r1, #12]
 8017ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ef4:	079d      	lsls	r5, r3, #30
 8017ef6:	4606      	mov	r6, r0
 8017ef8:	460c      	mov	r4, r1
 8017efa:	d507      	bpl.n	8017f0c <__smakebuf_r+0x1c>
 8017efc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017f00:	6023      	str	r3, [r4, #0]
 8017f02:	6123      	str	r3, [r4, #16]
 8017f04:	2301      	movs	r3, #1
 8017f06:	6163      	str	r3, [r4, #20]
 8017f08:	b003      	add	sp, #12
 8017f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f0c:	ab01      	add	r3, sp, #4
 8017f0e:	466a      	mov	r2, sp
 8017f10:	f7ff ffc8 	bl	8017ea4 <__swhatbuf_r>
 8017f14:	9f00      	ldr	r7, [sp, #0]
 8017f16:	4605      	mov	r5, r0
 8017f18:	4639      	mov	r1, r7
 8017f1a:	4630      	mov	r0, r6
 8017f1c:	f7fb fd10 	bl	8013940 <_malloc_r>
 8017f20:	b948      	cbnz	r0, 8017f36 <__smakebuf_r+0x46>
 8017f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f26:	059a      	lsls	r2, r3, #22
 8017f28:	d4ee      	bmi.n	8017f08 <__smakebuf_r+0x18>
 8017f2a:	f023 0303 	bic.w	r3, r3, #3
 8017f2e:	f043 0302 	orr.w	r3, r3, #2
 8017f32:	81a3      	strh	r3, [r4, #12]
 8017f34:	e7e2      	b.n	8017efc <__smakebuf_r+0xc>
 8017f36:	89a3      	ldrh	r3, [r4, #12]
 8017f38:	6020      	str	r0, [r4, #0]
 8017f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f3e:	81a3      	strh	r3, [r4, #12]
 8017f40:	9b01      	ldr	r3, [sp, #4]
 8017f42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017f46:	b15b      	cbz	r3, 8017f60 <__smakebuf_r+0x70>
 8017f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	f000 f81d 	bl	8017f8c <_isatty_r>
 8017f52:	b128      	cbz	r0, 8017f60 <__smakebuf_r+0x70>
 8017f54:	89a3      	ldrh	r3, [r4, #12]
 8017f56:	f023 0303 	bic.w	r3, r3, #3
 8017f5a:	f043 0301 	orr.w	r3, r3, #1
 8017f5e:	81a3      	strh	r3, [r4, #12]
 8017f60:	89a3      	ldrh	r3, [r4, #12]
 8017f62:	431d      	orrs	r5, r3
 8017f64:	81a5      	strh	r5, [r4, #12]
 8017f66:	e7cf      	b.n	8017f08 <__smakebuf_r+0x18>

08017f68 <_fstat_r>:
 8017f68:	b538      	push	{r3, r4, r5, lr}
 8017f6a:	4d07      	ldr	r5, [pc, #28]	@ (8017f88 <_fstat_r+0x20>)
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	4604      	mov	r4, r0
 8017f70:	4608      	mov	r0, r1
 8017f72:	4611      	mov	r1, r2
 8017f74:	602b      	str	r3, [r5, #0]
 8017f76:	f7f1 fcf5 	bl	8009964 <_fstat>
 8017f7a:	1c43      	adds	r3, r0, #1
 8017f7c:	d102      	bne.n	8017f84 <_fstat_r+0x1c>
 8017f7e:	682b      	ldr	r3, [r5, #0]
 8017f80:	b103      	cbz	r3, 8017f84 <_fstat_r+0x1c>
 8017f82:	6023      	str	r3, [r4, #0]
 8017f84:	bd38      	pop	{r3, r4, r5, pc}
 8017f86:	bf00      	nop
 8017f88:	20000af8 	.word	0x20000af8

08017f8c <_isatty_r>:
 8017f8c:	b538      	push	{r3, r4, r5, lr}
 8017f8e:	4d06      	ldr	r5, [pc, #24]	@ (8017fa8 <_isatty_r+0x1c>)
 8017f90:	2300      	movs	r3, #0
 8017f92:	4604      	mov	r4, r0
 8017f94:	4608      	mov	r0, r1
 8017f96:	602b      	str	r3, [r5, #0]
 8017f98:	f7f1 fcf4 	bl	8009984 <_isatty>
 8017f9c:	1c43      	adds	r3, r0, #1
 8017f9e:	d102      	bne.n	8017fa6 <_isatty_r+0x1a>
 8017fa0:	682b      	ldr	r3, [r5, #0]
 8017fa2:	b103      	cbz	r3, 8017fa6 <_isatty_r+0x1a>
 8017fa4:	6023      	str	r3, [r4, #0]
 8017fa6:	bd38      	pop	{r3, r4, r5, pc}
 8017fa8:	20000af8 	.word	0x20000af8

08017fac <_malloc_usable_size_r>:
 8017fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fb0:	1f18      	subs	r0, r3, #4
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	bfbc      	itt	lt
 8017fb6:	580b      	ldrlt	r3, [r1, r0]
 8017fb8:	18c0      	addlt	r0, r0, r3
 8017fba:	4770      	bx	lr

08017fbc <_init>:
 8017fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fbe:	bf00      	nop
 8017fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fc2:	bc08      	pop	{r3}
 8017fc4:	469e      	mov	lr, r3
 8017fc6:	4770      	bx	lr

08017fc8 <_fini>:
 8017fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fca:	bf00      	nop
 8017fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fce:	bc08      	pop	{r3}
 8017fd0:	469e      	mov	lr, r3
 8017fd2:	4770      	bx	lr
