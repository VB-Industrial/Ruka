
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001017c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  08010360  08010360  00011360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115b4  080115b4  000131d8  2**0
                  CONTENTS
  4 .ARM          00000008  080115b4  080115b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115bc  080115bc  000131d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  080115bc  080115bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080115d0  080115d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080115e0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  200001d8  080117b8  000131d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  080117b8  000137ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000480f5  00000000  00000000  00013208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d26  00000000  00000000  0005b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002990  00000000  00000000  00063028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002087  00000000  00000000  000659b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032e89  00000000  00000000  00067a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035e22  00000000  00000000  0009a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129803  00000000  00000000  000d06ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f9eed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c930  00000000  00000000  001f9f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00206860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010344 	.word	0x08010344

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08010344 	.word	0x08010344

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	08010d8c 	.word	0x08010d8c

08001054 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	08010d8c 	.word	0x08010d8c

08001074 <_ZN15Adafruit_SensorD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe9 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001082:	2108      	movs	r1, #8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f00a fdd1 	bl	800bc2c <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ffb9 	bl	8001034 <_ZN15Adafruit_SensorC1Ev>
 80010c2:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	609a      	str	r2, [r3, #8]
  _address = address;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	715a      	strb	r2, [r3, #5]
}
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	08010d70 	.word	0x08010d70

080010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	4613      	mov	r3, r2
 80010f0:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 fa5c 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2206      	movs	r2, #6
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00b fe3a 	bl	800cd7a <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	83fb      	strh	r3, [r7, #30]
 800110a:	8bfb      	ldrh	r3, [r7, #30]
 800110c:	83bb      	strh	r3, [r7, #28]
 800110e:	8bbb      	ldrh	r3, [r7, #28]
 8001110:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 8001112:	f107 0214 	add.w	r2, r7, #20
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	2306      	movs	r3, #6
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f000 fa05 	bl	800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8001120:	7d3b      	ldrb	r3, [r7, #20]
 8001122:	b21a      	sxth	r2, r3
 8001124:	7d7b      	ldrb	r3, [r7, #21]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800112e:	7dbb      	ldrb	r3, [r7, #22]
 8001130:	b21a      	sxth	r2, r3
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 800113c:	7e3b      	ldrb	r3, [r7, #24]
 800113e:	b21a      	sxth	r2, r3
 8001140:	7e7b      	ldrb	r3, [r7, #25]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3b08      	subs	r3, #8
 800114e:	2b26      	cmp	r3, #38	@ 0x26
 8001150:	f200 8152 	bhi.w	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001154:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001379 	.word	0x08001379
 8001160:	080013f9 	.word	0x080013f9
 8001164:	080013f9 	.word	0x080013f9
 8001168:	080013f9 	.word	0x080013f9
 800116c:	080013f9 	.word	0x080013f9
 8001170:	080013f9 	.word	0x080013f9
 8001174:	080011f9 	.word	0x080011f9
 8001178:	080013f9 	.word	0x080013f9
 800117c:	080013f9 	.word	0x080013f9
 8001180:	080013f9 	.word	0x080013f9
 8001184:	080013f9 	.word	0x080013f9
 8001188:	080013f9 	.word	0x080013f9
 800118c:	08001279 	.word	0x08001279
 8001190:	080013f9 	.word	0x080013f9
 8001194:	080013f9 	.word	0x080013f9
 8001198:	080013f9 	.word	0x080013f9
 800119c:	080013f9 	.word	0x080013f9
 80011a0:	080013f9 	.word	0x080013f9
 80011a4:	080012f9 	.word	0x080012f9
 80011a8:	080013f9 	.word	0x080013f9
 80011ac:	080013f9 	.word	0x080013f9
 80011b0:	080013f9 	.word	0x080013f9
 80011b4:	080013f9 	.word	0x080013f9
 80011b8:	080013f9 	.word	0x080013f9
 80011bc:	080013f9 	.word	0x080013f9
 80011c0:	080013f9 	.word	0x080013f9
 80011c4:	080013f9 	.word	0x080013f9
 80011c8:	080013f9 	.word	0x080013f9
 80011cc:	080013f9 	.word	0x080013f9
 80011d0:	080013f9 	.word	0x080013f9
 80011d4:	080013f9 	.word	0x080013f9
 80011d8:	080013f9 	.word	0x080013f9
 80011dc:	08001379 	.word	0x08001379
 80011e0:	080013f9 	.word	0x080013f9
 80011e4:	080013f9 	.word	0x080013f9
 80011e8:	080013f9 	.word	0x080013f9
 80011ec:	080013f9 	.word	0x080013f9
 80011f0:	080013f9 	.word	0x080013f9
 80011f4:	08001379 	.word	0x08001379
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 80011f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9b9 	bl	8000574 <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b7f      	ldr	r3, [pc, #508]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001208:	f7ff fb48 	bl	800089c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4614      	mov	r4, r2
 8001212:	461d      	mov	r5, r3
 8001214:	2100      	movs	r1, #0
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f9d9 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800121c:	4603      	mov	r3, r0
 800121e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 8001222:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9a4 	bl	8000574 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b74      	ldr	r3, [pc, #464]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001232:	f7ff fb33 	bl	800089c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4614      	mov	r4, r2
 800123c:	461d      	mov	r5, r3
 800123e:	2101      	movs	r1, #1
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f9c4 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001246:	4603      	mov	r3, r0
 8001248:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 800124c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f98f 	bl	8000574 <__aeabi_i2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b6a      	ldr	r3, [pc, #424]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800125c:	f7ff fb1e 	bl	800089c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	2102      	movs	r1, #2
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f9af 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001270:	4603      	mov	r3, r0
 8001272:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001276:	e0bf      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001278:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f979 	bl	8000574 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b60      	ldr	r3, [pc, #384]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001288:	f7ff fb08 	bl	800089c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	2100      	movs	r1, #0
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f999 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800129c:	4603      	mov	r3, r0
 800129e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f964 	bl	8000574 <__aeabi_i2d>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b55      	ldr	r3, [pc, #340]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012b2:	f7ff faf3 	bl	800089c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f984 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012c6:	4603      	mov	r3, r0
 80012c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f94f 	bl	8000574 <__aeabi_i2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012dc:	f7ff fade 	bl	800089c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	2102      	movs	r1, #2
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f96f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012f0:	4603      	mov	r3, r0
 80012f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80012f6:	e07f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 80012f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f939 	bl	8000574 <__aeabi_i2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	461d      	mov	r5, r3
 8001314:	2100      	movs	r1, #0
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f959 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800131c:	4603      	mov	r3, r0
 800131e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 8001322:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f924 	bl	8000574 <__aeabi_i2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b35      	ldr	r3, [pc, #212]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001332:	f7ff fab3 	bl	800089c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	2101      	movs	r1, #1
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f944 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001346:	4603      	mov	r3, r0
 8001348:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 800134c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f90f 	bl	8000574 <__aeabi_i2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800135c:	f7ff fa9e 	bl	800089c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	2102      	movs	r1, #2
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f92f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001370:	4603      	mov	r3, r0
 8001372:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001376:	e03f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001378:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8f9 	bl	8000574 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001388:	f7ff fa88 	bl	800089c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	2100      	movs	r1, #0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 f919 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800139c:	4603      	mov	r3, r0
 800139e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8e4 	bl	8000574 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013b2:	f7ff fa73 	bl	800089c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	2101      	movs	r1, #1
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f904 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013c6:	4603      	mov	r3, r0
 80013c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8cf 	bl	8000574 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013dc:	f7ff fa5e 	bl	800089c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	2102      	movs	r1, #2
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f8ef 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013f0:	4603      	mov	r3, r0
 80013f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80013f6:	bf00      	nop
  }

  return xyz;
 80013f8:	bf00      	nop
}
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bdb0      	pop	{r4, r5, r7, pc}
 8001402:	bf00      	nop
 8001404:	40300000 	.word	0x40300000
 8001408:	408c2000 	.word	0x408c2000
 800140c:	40590000 	.word	0x40590000

08001410 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 800141a:	2228      	movs	r2, #40	@ 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f00b fcab 	bl	800cd7a <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	220b      	movs	r2, #11
 8001428:	4911      	ldr	r1, [pc, #68]	@ (8001470 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 800142a:	4618      	mov	r0, r3
 800142c:	f00b fcad 	bl	800cd8a <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2203      	movs	r2, #3
 8001448:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
  sensor->max_value   = 0.0F;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001464:	621a      	str	r2, [r3, #32]
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08010360 	.word	0x08010360
 8001474:	3c23d70a 	.word	0x3c23d70a

08001478 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f00b fc77 	bl	800cd7a <memset>

  event->version   = sizeof(sensors_event_t);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2224      	movs	r2, #36	@ 0x24
 8001490:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2203      	movs	r2, #3
 800149e:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014a0:	f003 fad0 	bl	8004a44 <HAL_GetTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	221a      	movs	r2, #26
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe15 	bl	80010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f853 	bl	800156a <_ZN3imu6VectorILh3EE1xEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbb3 	bl	8000c38 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f84f 	bl	8001580 <_ZN3imu6VectorILh3EE1yEv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fba4 	bl	8000c38 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f84c 	bl	8001598 <_ZN3imu6VectorILh3EE1zEv>
 8001500:	4603      	mov	r3, r0
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	61da      	str	r2, [r3, #28]

  return true;
 8001514:	2401      	movs	r4, #1
}
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f81a 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 8001520:	4623      	mov	r3, r4
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	@ 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	461a      	mov	r2, r3
 8001536:	460b      	mov	r3, r1
 8001538:	72fb      	strb	r3, [r7, #11]
 800153a:	4613      	mov	r3, r2
 800153c:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800153e:	7aba      	ldrb	r2, [r7, #10]
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f89b 	bl	8001680 <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    {
    }
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3308      	adds	r3, #8
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3310      	adds	r3, #16
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2218      	movs	r2, #24
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f00b fbdb 	bl	800cd7a <memset>
    }
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
    }
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_ZN15Adafruit_BNO055D1Ev+0x20>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd29 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08010d70 	.word	0x08010d70

08001610 <_ZN15Adafruit_BNO055D0Ev>:
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
 800161e:	2110      	movs	r1, #16
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f00a fb03 	bl	800bc2c <_ZdlPvj>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <_ZN3imu10QuaternionC1Ev+0x4c>)
 8001640:	e9c1 2300 	strd	r2, r3, [r1]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	3ff00000 	.word	0x3ff00000

08001680 <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	b29a      	uxth	r2, r3
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	b29b      	uxth	r3, r3
 8001698:	2164      	movs	r1, #100	@ 0x64
 800169a:	9102      	str	r1, [sp, #8]
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2152      	movs	r1, #82	@ 0x52
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016a8:	f004 f9a8 	bl	80059fc <HAL_I2C_Mem_Read>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016b0:	bf00      	nop
 80016b2:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016b4:	f004 fb71 	bl	8005d9a <HAL_I2C_GetState>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f4      	bne.n	80016b2 <I2C_n_byte_receive+0x32>

  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000308 	.word	0x20000308

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10f      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016f2:	2229      	movs	r2, #41	@ 0x29
 80016f4:	2137      	movs	r1, #55	@ 0x37
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80016f8:	f7ff fcd8 	bl	80010ac <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016fe:	f7ff ff97 	bl	8001630 <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001704:	f7ff ff54 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d105      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001718:	4806      	ldr	r0, [pc, #24]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800171a:	f7ff ff1b 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001720:	f7ff ff64 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200001f4 	.word	0x200001f4
 8001730:	20000208 	.word	0x20000208
 8001734:	20000228 	.word	0x20000228

08001738 <_GLOBAL__sub_I_bno>:
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffc9 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001746:	bd80      	pop	{r7, pc}

08001748 <_GLOBAL__sub_D_bno>:
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
 800174c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ffc1 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001756:	bd80      	pop	{r7, pc}

08001758 <as50_readAngle>:

	return (parity & 0x1);
}

void as50_readAngle(uint16_t * data, uint32_t timeout)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af02      	add	r7, sp, #8
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176c:	f004 f878 	bl	8005860 <HAL_GPIO_WritePin>
	  if (HAL_SPI_TransmitReceive(&_ENCODER_SPI, (uint8_t*)&read_angle_register, (uint8_t*)data, 1, timeout) == HAL_OK)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4910      	ldr	r1, [pc, #64]	@ (80017bc <as50_readAngle+0x64>)
 800177a:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <as50_readAngle+0x68>)
 800177c:	f006 fd94 	bl	80082a8 <HAL_SPI_TransmitReceive>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10e      	bne.n	80017a4 <as50_readAngle+0x4c>
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800178c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001790:	f004 f866 	bl	8005860 <HAL_GPIO_WritePin>
		  *data &= _ENCODER_READMASK;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800179c:	b29a      	uxth	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	801a      	strh	r2, [r3, #0]
	  }
	  else
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
	  }
}
 80017a2:	e006      	b.n	80017b2 <as50_readAngle+0x5a>
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ae:	f004 f857 	bl	8005860 <HAL_GPIO_WritePin>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000
 80017c0:	200004b8 	.word	0x200004b8

080017c4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf0c      	ite	eq
 80017f6:	2301      	moveq	r3, #1
 80017f8:	2300      	movne	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d019      	beq.n	8001834 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3308      	adds	r3, #8
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	330c      	adds	r3, #12
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
        }
    }
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	4798      	blx	r3
    }
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ffd4 	bl	8001868 <_ZNSt14_Function_baseD1Ev>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_ZNSt8functionIFvvEED1Ev>:
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ffc7 	bl	8001868 <_ZNSt14_Function_baseD1Ev>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fd62 	bl	80023be <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3310      	adds	r3, #16
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	f000 fd87 	bl	8002414 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d201      	bcs.n	8001926 <nunavutChooseMin+0x16>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	e000      	b.n	8001928 <nunavutChooseMin+0x18>
 8001926:	683b      	ldr	r3, [r7, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b092      	sub	sp, #72	@ 0x48
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]



    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8001942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	2b00      	cmp	r3, #0
 800194a:	d145      	bne.n	80019d8 <nunavutCopyBits+0xa4>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	2b00      	cmp	r3, #0
 8001954:	d140      	bne.n	80019d8 <nunavutCopyBits+0xa4>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 800195c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800195e:	08db      	lsrs	r3, r3, #3
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	4413      	add	r3, r2
 8001964:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8001970:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001972:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001974:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001976:	f00b f9e6 	bl	800cd46 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8001986:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 808a 	beq.w	8001aa4 <nunavutCopyBits+0x170>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8001990:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001994:	4413      	add	r3, r2
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8001998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800199a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800199c:	4413      	add	r3, r2
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28

            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 80019a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019a4:	2201      	movs	r2, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3b01      	subs	r3, #1
 80019ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 80019b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019ba:	43db      	mvns	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4013      	ands	r3, r2
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c4:	7819      	ldrb	r1, [r3, #0]
 80019c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019ca:	400b      	ands	r3, r1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d4:	701a      	strb	r2, [r3, #0]
        }
    }
 80019d6:	e065      	b.n	8001aa4 <nunavutCopyBits+0x170>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 80019e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019e2:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 80019e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]


        while (last_bit > src_off)
 80019f0:	e053      	b.n	8001a9a <nunavutCopyBits+0x166>
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 80019f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 80019fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8001a06:	7dfa      	ldrb	r2, [r7, #23]
 8001a08:	7dbb      	ldrb	r3, [r7, #22]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d901      	bls.n	8001a12 <nunavutCopyBits+0xde>
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	e000      	b.n	8001a14 <nunavutCopyBits+0xe0>
 8001a12:	7dbb      	ldrb	r3, [r7, #22]
 8001a14:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8001a16:	7d7b      	ldrb	r3, [r7, #21]
 8001a18:	f1c3 0008 	rsb	r0, r3, #8
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff ff74 	bl	8001910 <nunavutChooseMin>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	753b      	strb	r3, [r7, #20]


            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8001a2c:	7d3b      	ldrb	r3, [r7, #20]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	1e5a      	subs	r2, r3, #1
 8001a36:	7dbb      	ldrb	r3, [r7, #22]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	74fb      	strb	r3, [r7, #19]

            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	6a3a      	ldr	r2, [r7, #32]
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
 8001a4c:	fa42 f303 	asr.w	r3, r2, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	7dbb      	ldrb	r3, [r7, #22]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8001a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a5e:	08db      	lsrs	r3, r3, #3
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	4413      	add	r3, r2
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	7cfb      	ldrb	r3, [r7, #19]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 8001a70:	7cba      	ldrb	r2, [r7, #18]
 8001a72:	7cfb      	ldrb	r3, [r7, #19]
 8001a74:	4013      	ands	r3, r2
 8001a76:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 8001a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a7a:	08db      	lsrs	r3, r3, #3
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	4413      	add	r3, r2
 8001a80:	7c79      	ldrb	r1, [r7, #17]
 8001a82:	7c3a      	ldrb	r2, [r7, #16]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
            src_off += size;
 8001a8a:	7d3b      	ldrb	r3, [r7, #20]
 8001a8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a8e:	4413      	add	r3, r2
 8001a90:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 8001a92:	7d3b      	ldrb	r3, [r7, #20]
 8001a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a96:	4413      	add	r3, r2
 8001a98:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d8a7      	bhi.n	80019f2 <nunavutCopyBits+0xbe>
        }

    }
}
 8001aa2:	e000      	b.n	8001aa6 <nunavutCopyBits+0x172>
    }
 8001aa4:	bf00      	nop
}
 8001aa6:	bf00      	nop
 8001aa8:	3748      	adds	r7, #72	@ 0x48
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b088      	sub	sp, #32
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");

    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	00da      	lsls	r2, r3, #3
 8001abe:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	440b      	add	r3, r1
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d202      	bcs.n	8001ad0 <nunavutSetUxx+0x22>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001aca:	f06f 0302 	mvn.w	r3, #2
 8001ace:	e010      	b.n	8001af2 <nunavutSetUxx+0x44>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8001ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ad4:	2140      	movs	r1, #64	@ 0x40
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff1a 	bl	8001910 <nunavutChooseMin>
 8001adc:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff ff22 	bl	8001934 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b08c      	sub	sp, #48	@ 0x30
 8001afe:	af04      	add	r7, sp, #16
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <uavcan_node_Health_1_0_serialize_+0x1e>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <uavcan_node_Health_1_0_serialize_+0x1e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <uavcan_node_Health_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001b18:	f06f 0301 	mvn.w	r3, #1
 8001b1c:	e048      	b.n	8001bb0 <uavcan_node_Health_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	2b07      	cmp	r3, #7
 8001b2a:	d802      	bhi.n	8001b32 <uavcan_node_Health_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001b2c:	f06f 0302 	mvn.w	r3, #2
 8001b30:	e03e      	b.n	8001bb0 <uavcan_node_Health_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]


    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8001b3c:	7efb      	ldrb	r3, [r7, #27]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d901      	bls.n	8001b46 <uavcan_node_Health_1_0_serialize_+0x4c>
        {
            _sat0_ = 3U;
 8001b42:	2303      	movs	r3, #3
 8001b44:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08db      	lsrs	r3, r3, #3
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	7efa      	ldrb	r2, [r7, #27]
 8001b50:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3302      	adds	r3, #2
 8001b56:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d021      	beq.n	8001ba6 <uavcan_node_Health_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f1c3 0308 	rsb	r3, r3, #8
 8001b70:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001b72:	7cfb      	ldrb	r3, [r7, #19]
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9cd 2300 	strd	r2, r3, [sp]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	6979      	ldr	r1, [r7, #20]
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f7ff ff91 	bl	8001aae <nunavutSetUxx>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8001b90:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	da02      	bge.n	8001b9e <uavcan_node_Health_1_0_serialize_+0xa4>
        {
            return _err0_;
 8001b98:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001b9c:	e008      	b.n	8001bb0 <uavcan_node_Health_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8001b9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	@ 0x30
 8001bbc:	af04      	add	r7, sp, #16
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <uavcan_node_Mode_1_0_serialize_+0x1e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <uavcan_node_Mode_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001bd6:	f06f 0301 	mvn.w	r3, #1
 8001bda:	e048      	b.n	8001c6e <uavcan_node_Mode_1_0_serialize_+0xb6>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	2b07      	cmp	r3, #7
 8001be8:	d802      	bhi.n	8001bf0 <uavcan_node_Mode_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001bea:	f06f 0302 	mvn.w	r3, #2
 8001bee:	e03e      	b.n	8001c6e <uavcan_node_Mode_1_0_serialize_+0xb6>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]


    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
        uint8_t _sat0_ = obj->value;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8001bfa:	7efb      	ldrb	r3, [r7, #27]
 8001bfc:	2b07      	cmp	r3, #7
 8001bfe:	d901      	bls.n	8001c04 <uavcan_node_Mode_1_0_serialize_+0x4c>
        {
            _sat0_ = 7U;
 8001c00:	2307      	movs	r3, #7
 8001c02:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08db      	lsrs	r3, r3, #3
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	7efa      	ldrb	r2, [r7, #27]
 8001c0e:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	3303      	adds	r3, #3
 8001c14:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d021      	beq.n	8001c64 <uavcan_node_Mode_1_0_serialize_+0xac>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f1c3 0308 	rsb	r3, r3, #8
 8001c2e:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001c30:	7cfb      	ldrb	r3, [r7, #19]
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	6979      	ldr	r1, [r7, #20]
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f7ff ff32 	bl	8001aae <nunavutSetUxx>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8001c4e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da02      	bge.n	8001c5c <uavcan_node_Mode_1_0_serialize_+0xa4>
        {
            return _err0_;
 8001c56:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001c5a:	e008      	b.n	8001c6e <uavcan_node_Mode_1_0_serialize_+0xb6>
        }
        offset_bits += _pad0_;
 8001c5c:	7cfb      	ldrb	r3, [r7, #19]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	4413      	add	r3, r2
 8001c62:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b08e      	sub	sp, #56	@ 0x38
 8001c7a:	af04      	add	r7, sp, #16
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <uavcan_node_Heartbeat_1_0_serialize_+0x1e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <uavcan_node_Heartbeat_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001c94:	f06f 0301 	mvn.w	r3, #1
 8001c98:	e0cf      	b.n	8001e3a <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	623b      	str	r3, [r7, #32]
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	2b37      	cmp	r3, #55	@ 0x37
 8001ca6:	d802      	bhi.n	8001cae <uavcan_node_Heartbeat_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001ca8:	f06f 0302 	mvn.w	r3, #2
 8001cac:	e0c5      	b.n	8001e3a <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	3320      	adds	r3, #32
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d021      	beq.n	8001d14 <uavcan_node_Heartbeat_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f1c3 0308 	rsb	r3, r3, #8
 8001cde:	77fb      	strb	r3, [r7, #31]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001ce0:	7ffb      	ldrb	r3, [r7, #31]
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	e9cd 2300 	strd	r2, r3, [sp]
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf2:	6a39      	ldr	r1, [r7, #32]
 8001cf4:	68b8      	ldr	r0, [r7, #8]
 8001cf6:	f7ff feda 	bl	8001aae <nunavutSetUxx>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	77bb      	strb	r3, [r7, #30]
        if (_err0_ < 0)
 8001cfe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da02      	bge.n	8001d0c <uavcan_node_Heartbeat_1_0_serialize_+0x96>
        {
            return _err0_;
 8001d06:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001d0a:	e096      	b.n	8001e3a <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad0_;
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d10:	4413      	add	r3, r2
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8001d14:	2301      	movs	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	08db      	lsrs	r3, r3, #3
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	4413      	add	r3, r2
 8001d24:	f107 0214 	add.w	r2, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7ff fee6 	bl	8001afa <uavcan_node_Health_1_0_serialize_>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	777b      	strb	r3, [r7, #29]
        if (_err1_ < 0)
 8001d32:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da02      	bge.n	8001d40 <uavcan_node_Heartbeat_1_0_serialize_+0xca>
        {
            return _err1_;
 8001d3a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001d3e:	e07c      	b.n	8001e3a <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d46:	4413      	add	r3, r2
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d021      	beq.n	8001d98 <uavcan_node_Heartbeat_1_0_serialize_+0x122>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f1c3 0308 	rsb	r3, r3, #8
 8001d62:	773b      	strb	r3, [r7, #28]
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8001d64:	7f3b      	ldrb	r3, [r7, #28]
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9cd 2300 	strd	r2, r3, [sp]
 8001d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d76:	6a39      	ldr	r1, [r7, #32]
 8001d78:	68b8      	ldr	r0, [r7, #8]
 8001d7a:	f7ff fe98 	bl	8001aae <nunavutSetUxx>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	76fb      	strb	r3, [r7, #27]
        if (_err2_ < 0)
 8001d82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da02      	bge.n	8001d90 <uavcan_node_Heartbeat_1_0_serialize_+0x11a>
        {
            return _err2_;
 8001d8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001d8e:	e054      	b.n	8001e3a <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad1_;
 8001d90:	7f3b      	ldrb	r3, [r7, #28]
 8001d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d94:	4413      	add	r3, r2
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8001d98:	2301      	movs	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	08db      	lsrs	r3, r3, #3
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	4413      	add	r3, r2
 8001da8:	f107 0210 	add.w	r2, r7, #16
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7ff ff03 	bl	8001bb8 <uavcan_node_Mode_1_0_serialize_>
 8001db2:	4603      	mov	r3, r0
 8001db4:	76bb      	strb	r3, [r7, #26]
        if (_err3_ < 0)
 8001db6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da02      	bge.n	8001dc4 <uavcan_node_Heartbeat_1_0_serialize_+0x14e>
        {
            return _err3_;
 8001dbe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001dc2:	e03a      	b.n	8001e3a <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dca:	4413      	add	r3, r2
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24

    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	7992      	ldrb	r2, [r2, #6]
 8001dda:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	3308      	adds	r3, #8
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d021      	beq.n	8001e30 <uavcan_node_Heartbeat_1_0_serialize_+0x1ba>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f1c3 0308 	rsb	r3, r3, #8
 8001dfa:	767b      	strb	r3, [r7, #25]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8001dfc:	7e7b      	ldrb	r3, [r7, #25]
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9cd 2300 	strd	r2, r3, [sp]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e0e:	6a39      	ldr	r1, [r7, #32]
 8001e10:	68b8      	ldr	r0, [r7, #8]
 8001e12:	f7ff fe4c 	bl	8001aae <nunavutSetUxx>
 8001e16:	4603      	mov	r3, r0
 8001e18:	763b      	strb	r3, [r7, #24]
        if (_err4_ < 0)
 8001e1a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da02      	bge.n	8001e28 <uavcan_node_Heartbeat_1_0_serialize_+0x1b2>
        {
            return _err4_;
 8001e22:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001e26:	e008      	b.n	8001e3a <uavcan_node_Heartbeat_1_0_serialize_+0x1c4>
        }
        offset_bits += _pad2_;
 8001e28:	7e7b      	ldrb	r3, [r7, #25]
 8001e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e2c:	4413      	add	r3, r2
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	08da      	lsrs	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3728      	adds	r7, #40	@ 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <uavcan_si_unit_angle_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angle_Scalar_1_0_serialize_(
    const uavcan_si_unit_angle_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b08c      	sub	sp, #48	@ 0x30
 8001e46:	af04      	add	r7, sp, #16
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x1e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001e60:	f06f 0301 	mvn.w	r3, #1
 8001e64:	e041      	b.n	8001eea <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	2b1f      	cmp	r3, #31
 8001e72:	d802      	bhi.n	8001e7a <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001e74:	f06f 0302 	mvn.w	r3, #2
 8001e78:	e037      	b.n	8001eea <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian, 4U);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	4413      	add	r3, r2
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	3320      	adds	r3, #32
 8001e90:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d021      	beq.n	8001ee0 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f1c3 0308 	rsb	r3, r3, #8
 8001eaa:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9cd 2300 	strd	r2, r3, [sp]
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	69b9      	ldr	r1, [r7, #24]
 8001ec0:	68b8      	ldr	r0, [r7, #8]
 8001ec2:	f7ff fdf4 	bl	8001aae <nunavutSetUxx>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8001eca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da02      	bge.n	8001ed8 <uavcan_si_unit_angle_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8001ed2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001ed6:	e008      	b.n	8001eea <uavcan_si_unit_angle_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	4413      	add	r3, r2
 8001ede:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	08da      	lsrs	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_acceleration_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b08c      	sub	sp, #48	@ 0x30
 8001ef6:	af04      	add	r7, sp, #16
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x1e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001f10:	f06f 0301 	mvn.w	r3, #1
 8001f14:	e041      	b.n	8001f9a <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	2b1f      	cmp	r3, #31
 8001f22:	d802      	bhi.n	8001f2a <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001f24:	f06f 0302 	mvn.w	r3, #2
 8001f28:	e037      	b.n	8001f9a <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second_per_second, 4U);
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	4413      	add	r3, r2
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3320      	adds	r3, #32
 8001f40:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d021      	beq.n	8001f90 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f1c3 0308 	rsb	r3, r3, #8
 8001f5a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9cd 2300 	strd	r2, r3, [sp]
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	69b9      	ldr	r1, [r7, #24]
 8001f70:	68b8      	ldr	r0, [r7, #8]
 8001f72:	f7ff fd9c 	bl	8001aae <nunavutSetUxx>
 8001f76:	4603      	mov	r3, r0
 8001f78:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8001f7a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	da02      	bge.n	8001f88 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8001f82:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001f86:	e008      	b.n	8001f9a <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
    const uavcan_si_unit_angular_velocity_Scalar_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b08c      	sub	sp, #48	@ 0x30
 8001fa6:	af04      	add	r7, sp, #16
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x1e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001fc0:	f06f 0301 	mvn.w	r3, #1
 8001fc4:	e041      	b.n	800204a <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 32UL)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	2b1f      	cmp	r3, #31
 8001fd2:	d802      	bhi.n	8001fda <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8001fd4:	f06f 0302 	mvn.w	r3, #2
 8001fd8:	e037      	b.n	800204a <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        // Saturation code not emitted -- assume the native representation of float32 is conformant.
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
        (void) memmove(&buffer[offset_bits / 8U], &obj->radian_per_second, 4U);
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	601a      	str	r2, [r3, #0]
        offset_bits += 32U;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3320      	adds	r3, #32
 8001ff0:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d021      	beq.n	8002040 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x9e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f1c3 0308 	rsb	r3, r3, #8
 800200a:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	9302      	str	r3, [sp, #8]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9cd 2300 	strd	r2, r3, [sp]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	68b8      	ldr	r0, [r7, #8]
 8002022:	f7ff fd44 	bl	8001aae <nunavutSetUxx>
 8002026:	4603      	mov	r3, r0
 8002028:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 800202a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800202e:	2b00      	cmp	r3, #0
 8002030:	da02      	bge.n	8002038 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0x96>
        {
            return _err0_;
 8002032:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002036:	e008      	b.n	800204a <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_+0xa8>
        }
        offset_bits += _pad0_;
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	61fb      	str	r3, [r7, #28]
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 32ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3720      	adds	r7, #32
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_(
    const reg_udral_physics_kinematics_rotation_Planar_0_1* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b090      	sub	sp, #64	@ 0x40
 8002056:	af04      	add	r7, sp, #16
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x24>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002070:	f06f 0301 	mvn.w	r3, #1
 8002074:	e0e4      	b.n	8002240 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if ((8U * (size_t) capacity_bytes) < 96UL)
 800207c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	2b5f      	cmp	r3, #95	@ 0x5f
 8002082:	d802      	bhi.n	800208a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x38>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002084:	f06f 0302 	mvn.w	r3, #2
 8002088:	e0da      	b.n	8002240 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angle.Scalar.1.0 angular_position
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes0_ = 4UL;  // Nested object (max) size, in bytes.
 800208e:	2304      	movs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 8002092:	68f8      	ldr	r0, [r7, #12]
            &obj->angular_position, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002096:	08db      	lsrs	r3, r3, #3
        int8_t _err0_ = uavcan_si_unit_angle_Scalar_1_0_serialize_(
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	4413      	add	r3, r2
 800209c:	f107 0218 	add.w	r2, r7, #24
 80020a0:	4619      	mov	r1, r3
 80020a2:	f7ff fece 	bl	8001e42 <uavcan_si_unit_angle_Scalar_1_0_serialize_>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (_err0_ < 0)
 80020ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da02      	bge.n	80020ba <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x68>
        {
            return _err0_;
 80020b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020b8:	e0c2      	b.n	8002240 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 32ULL);
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020c0:	4413      	add	r3, r2
 80020c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80020c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d025      	beq.n	800211a <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xc8>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80020ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f1c3 0308 	rsb	r3, r3, #8
 80020dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        NUNAVUT_ASSERT(_pad0_ > 0);
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80020e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	e9cd 2300 	strd	r2, r3, [sp]
 80020f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020f6:	68b8      	ldr	r0, [r7, #8]
 80020f8:	f7ff fcd9 	bl	8001aae <nunavutSetUxx>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (_err1_ < 0)
 8002102:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8002106:	2b00      	cmp	r3, #0
 8002108:	da02      	bge.n	8002110 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xbe>
        {
            return _err1_;
 800210a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800210e:	e097      	b.n	8002240 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad0_;
 8002110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002116:	4413      	add	r3, r2
 8002118:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_velocity.Scalar.1.0 angular_velocity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes1_ = 4UL;  // Nested object (max) size, in bytes.
 800211a:	2304      	movs	r3, #4
 800211c:	617b      	str	r3, [r7, #20]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1d18      	adds	r0, r3, #4
            &obj->angular_velocity, &buffer[offset_bits / 8U], &_size_bytes1_);
 8002122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002124:	08db      	lsrs	r3, r3, #3
        int8_t _err2_ = uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_(
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4413      	add	r3, r2
 800212a:	f107 0214 	add.w	r2, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	f7ff ff37 	bl	8001fa2 <uavcan_si_unit_angular_velocity_Scalar_1_0_serialize_>
 8002134:	4603      	mov	r3, r0
 8002136:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (_err2_ < 0)
 800213a:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800213e:	2b00      	cmp	r3, #0
 8002140:	da02      	bge.n	8002148 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0xf6>
        {
            return _err2_;
 8002142:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8002146:	e07b      	b.n	8002240 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 32ULL);
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800214e:	4413      	add	r3, r2
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	2b00      	cmp	r3, #0
 800215a:	d025      	beq.n	80021a8 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x156>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800215c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f1c3 0308 	rsb	r3, r3, #8
 800216a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        NUNAVUT_ASSERT(_pad1_ > 0);
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 800216e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9cd 2300 	strd	r2, r3, [sp]
 8002180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002182:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002184:	68b8      	ldr	r0, [r7, #8]
 8002186:	f7ff fc92 	bl	8001aae <nunavutSetUxx>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (_err3_ < 0)
 8002190:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002194:	2b00      	cmp	r3, #0
 8002196:	da02      	bge.n	800219e <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x14c>
        {
            return _err3_;
 8002198:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800219c:	e050      	b.n	8002240 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad1_;
 800219e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021a4:	4413      	add	r3, r2
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    {   // uavcan.si.unit.angular_acceleration.Scalar.1.0 angular_acceleration
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
        size_t _size_bytes2_ = 4UL;  // Nested object (max) size, in bytes.
 80021a8:	2304      	movs	r3, #4
 80021aa:	613b      	str	r3, [r7, #16]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f103 0008 	add.w	r0, r3, #8
            &obj->angular_acceleration, &buffer[offset_bits / 8U], &_size_bytes2_);
 80021b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b4:	08db      	lsrs	r3, r3, #3
        int8_t _err4_ = uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_(
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	4413      	add	r3, r2
 80021ba:	f107 0210 	add.w	r2, r7, #16
 80021be:	4619      	mov	r1, r3
 80021c0:	f7ff fe97 	bl	8001ef2 <uavcan_si_unit_angular_acceleration_Scalar_1_0_serialize_>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        if (_err4_ < 0)
 80021ca:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da02      	bge.n	80021d8 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x186>
        {
            return _err4_;
 80021d2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80021d6:	e033      	b.n	8002240 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 32ULL);
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021de:	4413      	add	r3, r2
 80021e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80021e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d024      	beq.n	8002236 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1e4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80021ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f1c3 0308 	rsb	r3, r3, #8
 80021fa:	f887 3020 	strb.w	r3, [r7, #32]
        NUNAVUT_ASSERT(_pad2_ > 0);
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80021fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	e9cd 2300 	strd	r2, r3, [sp]
 8002210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002214:	68b8      	ldr	r0, [r7, #8]
 8002216:	f7ff fc4a 	bl	8001aae <nunavutSetUxx>
 800221a:	4603      	mov	r3, r0
 800221c:	77fb      	strb	r3, [r7, #31]
        if (_err5_ < 0)
 800221e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002222:	2b00      	cmp	r3, #0
 8002224:	da02      	bge.n	800222c <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1da>
        {
            return _err5_;
 8002226:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800222a:	e009      	b.n	8002240 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_+0x1ee>
        }
        offset_bits += _pad2_;
 800222c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002232:	4413      	add	r3, r2
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 96ULL);

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3730      	adds	r7, #48	@ 0x30
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f908 	bl	800246a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
 8002268:	f001 fb3f 	bl	80038ea <Error_Handler>
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <micros_64>:
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	af00      	add	r7, sp, #0
 8002274:	f002 fbe6 	bl	8004a44 <HAL_GetTick>
 8002278:	4603      	mov	r3, r0
 800227a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	2200      	movs	r2, #0
 8002284:	461c      	mov	r4, r3
 8002286:	4615      	mov	r5, r2
 8002288:	4622      	mov	r2, r4
 800228a:	462b      	mov	r3, r5
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	bdb0      	pop	{r4, r5, r7, pc}

08002292 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ffd3 	bl	8002248 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <send_JS>:
//}




void send_JS(joint_config * jc) {             //float* pos, float* vel, float* eff
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af06      	add	r7, sp, #24
 80022b2:	6078      	str	r0, [r7, #4]
	{
//			.angular_position = steps_to_rads(tmc5160_position_read(), jc->full_steps),
//			.angular_velocity = steps_to_rads(tmc5160_velocity_read(), jc->full_steps),
//			.angular_acceleration = eff_in

			.angular_position = drv.get_position(),
 80022b4:	4813      	ldr	r0, [pc, #76]	@ (8002304 <send_JS+0x58>)
 80022b6:	f000 fee1 	bl	800307c <_ZN5drive12get_positionEv>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
			.angular_velocity = drv.get_velocity(),
			.angular_acceleration = eff_in
	};
 80022be:	edc7 7a03 	vstr	s15, [r7, #12]
			.angular_velocity = drv.get_velocity(),
 80022c2:	4810      	ldr	r0, [pc, #64]	@ (8002304 <send_JS+0x58>)
 80022c4:	f000 fef0 	bl	80030a8 <_ZN5drive12get_velocityEv>
 80022c8:	eef0 7a40 	vmov.f32	s15, s0
	};
 80022cc:	edc7 7a04 	vstr	s15, [r7, #16]
 80022d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <send_JS+0x5c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	617b      	str	r3, [r7, #20]
    interface->send_msg<JS_msg>(
 80022d6:	480d      	ldr	r0, [pc, #52]	@ (800230c <send_JS+0x60>)
 80022d8:	f000 f93a 	bl	8002550 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80022dc:	f107 010c 	add.w	r1, r7, #12
 80022e0:	2304      	movs	r3, #4
 80022e2:	9304      	str	r3, [sp, #16]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <send_JS+0x64>)
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <send_JS+0x68>)
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 80022f6:	4a08      	ldr	r2, [pc, #32]	@ (8002318 <send_JS+0x6c>)
 80022f8:	f000 f936 	bl	8002568 <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&js_msg,
		js_buffer,
		AGENT_JS_SUB_PORT,
		&int_transfer_id
	);
}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000288 	.word	0x20000288
 8002308:	20000240 	.word	0x20000240
 800230c:	20000244 	.word	0x20000244
 8002310:	000f4240 	.word	0x000f4240
 8002314:	20000278 	.word	0x20000278
 8002318:	2000026c 	.word	0x2000026c

0800231c <heartbeat>:
		AGENT_IMU_PORT,
		&int_transfer_id
	);
}

void heartbeat() {
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af06      	add	r7, sp, #24
	static uint8_t hbeat_buffer[HBeat::buffer_size];
	static CanardTransferID hbeat_transfer_id = 0;
	static uint32_t uptime = 0;
    uavcan_node_Heartbeat_1_0 heartbeat_msg = {
 8002322:	463b      	mov	r3, r7
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
        .uptime = uptime,
        .health = {uavcan_node_Health_1_0_NOMINAL},
        .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };
 800232a:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <heartbeat+0x4c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	603b      	str	r3, [r7, #0]
    interface->send_msg<HBeat>(
 8002330:	480e      	ldr	r0, [pc, #56]	@ (800236c <heartbeat+0x50>)
 8002332:	f000 f90d 	bl	8002550 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002336:	4639      	mov	r1, r7
 8002338:	2304      	movs	r3, #4
 800233a:	9304      	str	r3, [sp, #16]
 800233c:	4a0c      	ldr	r2, [pc, #48]	@ (8002370 <heartbeat+0x54>)
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002346:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <heartbeat+0x58>)
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	f641 5355 	movw	r3, #7509	@ 0x1d55
 800234e:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <heartbeat+0x5c>)
 8002350:	f000 f929 	bl	80025a6 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>
		&heartbeat_msg,
		hbeat_buffer,
		uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
		&hbeat_transfer_id
	);
    uptime += 1;
 8002354:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <heartbeat+0x4c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	4a03      	ldr	r2, [pc, #12]	@ (8002368 <heartbeat+0x4c>)
 800235c:	6013      	str	r3, [r2, #0]
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000284 	.word	0x20000284
 800236c:	20000244 	.word	0x20000244
 8002370:	000f4240 	.word	0x000f4240
 8002374:	20000283 	.word	0x20000283
 8002378:	2000027c 	.word	0x2000027c

0800237c <cyphal_loop>:
	js_reader = new JSReader(interface);
	reg_access_service = new RegisterAccessReader(interface);
	nireader = new NodeInfoReader(interface);
}

void cyphal_loop() {
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
    interface->loop();
 8002380:	4804      	ldr	r0, [pc, #16]	@ (8002394 <cyphal_loop+0x18>)
 8002382:	f000 f8e5 	bl	8002550 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002386:	4603      	mov	r3, r0
 8002388:	4618      	mov	r0, r3
 800238a:	f008 faf0 	bl	800a96e <_ZN15CyphalInterface4loopEv>
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000244 	.word	0x20000244

08002398 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	2300      	movs	r3, #0
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	6053      	str	r3, [r2, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	461a      	mov	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	6053      	str	r3, [r2, #4]
 80023d2:	6093      	str	r3, [r2, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ffde 	bl	8002398 <_ZNSt14_Function_baseC1Ev>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	f000 f8fe 	bl	80025e4 <_ZNKSt8functionIFyvEEcvbEv>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	6839      	ldr	r1, [r7, #0]
 80023f6:	2202      	movs	r2, #2
 80023f8:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]
	  }
      }
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	461a      	mov	r2, r3
 8002422:	2300      	movs	r3, #0
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	6053      	str	r3, [r2, #4]
 8002428:	6093      	str	r3, [r2, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ffb3 	bl	8002398 <_ZNSt14_Function_baseC1Ev>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8002438:	6838      	ldr	r0, [r7, #0]
 800243a:	f000 f8e3 	bl	8002604 <_ZNKSt8functionIFvvEEcvbEv>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	2202      	movs	r2, #2
 800244e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
      }
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f9ac 	bl	80017dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	461a      	mov	r2, r3
 800249e:	2300      	movs	r3, #0
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	6053      	str	r3, [r2, #4]
 80024a4:	6093      	str	r3, [r2, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff75 	bl	8002398 <_ZNSt14_Function_baseC1Ev>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 80024b4:	6838      	ldr	r0, [r7, #0]
 80024b6:	f000 f8b5 	bl	8002624 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 80024c0:	687c      	ldr	r4, [r7, #4]
 80024c2:	6838      	ldr	r0, [r7, #0]
 80024c4:	f000 f8be 	bl	8002644 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4619      	mov	r1, r3
 80024cc:	4620      	mov	r0, r4
 80024ce:	f000 f8c4 	bl	800265a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a04      	ldr	r2, [pc, #16]	@ (80024e8 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 80024d6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 80024dc:	609a      	str	r2, [r3, #8]
	    }
	}
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd90      	pop	{r4, r7, pc}
 80024e8:	0800267f 	.word	0x0800267f
 80024ec:	080026a3 	.word	0x080026a3

080024f0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	461a      	mov	r2, r3
 80024fe:	2300      	movs	r3, #0
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	6053      	str	r3, [r2, #4]
 8002504:	6093      	str	r3, [r2, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff45 	bl	8002398 <_ZNSt14_Function_baseC1Ev>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8002514:	6838      	ldr	r0, [r7, #0]
 8002516:	f000 f8e3 	bl	80026e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8002520:	687c      	ldr	r4, [r7, #4]
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	f000 f8ec 	bl	8002700 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002528:	4603      	mov	r3, r0
 800252a:	4619      	mov	r1, r3
 800252c:	4620      	mov	r0, r4
 800252e:	f000 f8f2 	bl	8002716 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8002536:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a04      	ldr	r2, [pc, #16]	@ (800254c <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 800253c:	609a      	str	r2, [r3, #8]
	}
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bd90      	pop	{r4, r7, pc}
 8002548:	0800273b 	.word	0x0800273b
 800254c:	08002759 	.word	0x08002759

08002550 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	return _M_get();
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f91c 	bl	8002796 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800255e:	4603      	mov	r3, r0
      }
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNK15CyphalInterface8send_msgI6JS_msgEEvPNT_4TypeEPhtS5_y14CanardPriority>:
    );
    (*transfer_id)++;
}

template <typename TypeAlias>
inline void CyphalInterface::send_msg(
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af06      	add	r7, sp, #24
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	807b      	strh	r3, [r7, #2]
    CanardPortID port,
    CanardTransferID *transfer_id,
    uint64_t timeout_delta,
    CanardPriority priority
) const {
    send<TypeAlias>(
 8002576:	8879      	ldrh	r1, [r7, #2]
 8002578:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800257c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002580:	23ff      	movs	r3, #255	@ 0xff
 8002582:	9303      	str	r3, [sp, #12]
 8002584:	2300      	movs	r3, #0
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	460b      	mov	r3, r1
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f937 	bl	800280c <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
        priority,
        CanardTransferKindMessage,
        CANARD_NODE_ID_UNSET,
        timeout_delta
    );
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_ZNK15CyphalInterface8send_msgI5HBeatEEvPNT_4TypeEPhtS5_y14CanardPriority>:
inline void CyphalInterface::send_msg(
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b08a      	sub	sp, #40	@ 0x28
 80025aa:	af06      	add	r7, sp, #24
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	807b      	strh	r3, [r7, #2]
    send<TypeAlias>(
 80025b4:	8879      	ldrh	r1, [r7, #2]
 80025b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80025be:	23ff      	movs	r3, #255	@ 0xff
 80025c0:	9303      	str	r3, [sp, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	460b      	mov	r3, r1
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f962 	bl	80028a0 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f94d 	bl	800188e <_ZNKSt14_Function_base8_M_emptyEv>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f083 0301 	eor.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff f93d 	bl	800188e <_ZNKSt14_Function_base8_M_emptyEv>
 8002614:	4603      	mov	r3, r0
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf14      	ite	ne
 8002632:	2301      	movne	r3, #1
 8002634:	2300      	moveq	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800265a:	b590      	push	{r4, r7, lr}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002664:	6838      	ldr	r0, [r7, #0]
 8002666:	f7ff ffed 	bl	8002644 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800266a:	4603      	mov	r3, r0
 800266c:	4622      	mov	r2, r4
 800266e:	4619      	mov	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f95f 	bl	8002934 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}

0800267e <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f96c 	bl	8002964 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 800268c:	4603      	mov	r3, r0
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f978 	bl	8002984 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
      }
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80026a2:	b590      	push	{r4, r7, lr}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d109      	bne.n	80026ca <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80026b6:	68b8      	ldr	r0, [r7, #8]
 80026b8:	f000 f954 	bl	8002964 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 80026bc:	4604      	mov	r4, r0
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f973 	bl	80029aa <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 80026c4:	4603      	mov	r3, r0
 80026c6:	601c      	str	r4, [r3, #0]
	    break;
 80026c8:	e005      	b.n	80026d6 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f977 	bl	80029c4 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80026d6:	2300      	movs	r3, #0
      }
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd90      	pop	{r4, r7, pc}

080026e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	bf14      	ite	ne
 80026ee:	2301      	movne	r3, #1
 80026f0:	2300      	moveq	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002716:	b590      	push	{r4, r7, lr}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002720:	6838      	ldr	r0, [r7, #0]
 8002722:	f7ff ffed 	bl	8002700 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002726:	4603      	mov	r3, r0
 8002728:	4622      	mov	r2, r4
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f983 	bl	8002a38 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}

0800273a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f990 	bl	8002a68 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8002748:	4603      	mov	r3, r0
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f99c 	bl	8002a88 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8002750:	bf00      	nop
      }
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d109      	bne.n	8002780 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800276c:	68b8      	ldr	r0, [r7, #8]
 800276e:	f000 f97b 	bl	8002a68 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8002772:	4604      	mov	r4, r0
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f997 	bl	8002aa8 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 800277a:	4603      	mov	r3, r0
 800277c:	601c      	str	r4, [r3, #0]
	    break;
 800277e:	e005      	b.n	800278c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	461a      	mov	r2, r3
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f99a 	bl	8002ac0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800278c:	2300      	movs	r3, #0
      }
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}

08002796 <_ZNKSt19__shared_ptr_accessI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f9c8 	bl	8002b34 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_ZNKSt8functionIFvvEEclEv>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
      {
	if (_M_empty())
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f868 	bl	800188e <_ZNKSt14_Function_base8_M_emptyEv>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <_ZNKSt8functionIFvvEEclEv+0x1a>
	  __throw_bad_function_call();
 80027c4:	f009 fa34 	bl	800bc30 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	4610      	mov	r0, r2
 80027d0:	4798      	blx	r3
 80027d2:	bf00      	nop
      }
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_ZNKSt8functionIFyvEEclEv>:
      operator()(_ArgTypes... __args) const
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
	if (_M_empty())
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f852 	bl	800188e <_ZNKSt14_Function_base8_M_emptyEv>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <_ZNKSt8functionIFyvEEclEv+0x1a>
	  __throw_bad_function_call();
 80027f0:	f009 fa1e 	bl	800bc30 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4610      	mov	r0, r2
 80027fc:	4798      	blx	r3
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
      }
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 800280c:	b5b0      	push	{r4, r5, r7, lr}
 800280e:	b08c      	sub	sp, #48	@ 0x30
 8002810:	af04      	add	r7, sp, #16
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 800281a:	230c      	movs	r3, #12
 800281c:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	461a      	mov	r2, r3
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	68b8      	ldr	r0, [r7, #8]
 8002828:	f7ff fc13 	bl	8002052 <reg_udral_physics_kinematics_rotation_Planar_0_1_serialize_>
 800282c:	4603      	mov	r3, r0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	09db      	lsrs	r3, r3, #7
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <_ZNK15CyphalInterface4sendI6JS_msgEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	3310      	adds	r3, #16
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ffb5 	bl	80027ae <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 8002844:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002848:	753b      	strb	r3, [r7, #20]
 800284a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800284e:	757b      	strb	r3, [r7, #21]
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	82fb      	strh	r3, [r7, #22]
 8002854:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002858:	763b      	strb	r3, [r7, #24]
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ffb8 	bl	80027da <_ZNKSt8functionIFyvEEclEv>
    push(
 800286a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800286e:	1884      	adds	r4, r0, r2
 8002870:	eb41 0503 	adc.w	r5, r1, r3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	9202      	str	r2, [sp, #8]
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	4622      	mov	r2, r4
 8002884:	462b      	mov	r3, r5
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f008 f838 	bl	800a8fc <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 800288c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002896:	701a      	strb	r2, [r3, #0]
}
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bdb0      	pop	{r4, r5, r7, pc}

080028a0 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy>:
inline void CyphalInterface::send(
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b08c      	sub	sp, #48	@ 0x30
 80028a4:	af04      	add	r7, sp, #16
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	807b      	strh	r3, [r7, #2]
    size_t cyphal_buf_size = TypeAlias::buffer_size;
 80028ae:	2307      	movs	r3, #7
 80028b0:	61fb      	str	r3, [r7, #28]
    if (TypeAlias::serializer(obj, buffer, &cyphal_buf_size) < 0) {
 80028b2:	f107 031c 	add.w	r3, r7, #28
 80028b6:	461a      	mov	r2, r3
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	68b8      	ldr	r0, [r7, #8]
 80028bc:	f7ff f9db 	bl	8001c76 <uavcan_node_Heartbeat_1_0_serialize_>
 80028c0:	4603      	mov	r3, r0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	09db      	lsrs	r3, r3, #7
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <_ZNK15CyphalInterface4sendI5HBeatEEvPNT_4TypeEPhtS5_14CanardPriority18CanardTransferKindhy+0x38>
        utilities.error_handler();
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	3310      	adds	r3, #16
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff6b 	bl	80027ae <_ZNKSt8functionIFvvEEclEv>
    const CanardTransferMetadata cyphal_transfer_metadata = {
 80028d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80028dc:	753b      	strb	r3, [r7, #20]
 80028de:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80028e2:	757b      	strb	r3, [r7, #21]
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	82fb      	strh	r3, [r7, #22]
 80028e8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80028ec:	763b      	strb	r3, [r7, #24]
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	767b      	strb	r3, [r7, #25]
        utilities.micros_64() + timeout_delta,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff6e 	bl	80027da <_ZNKSt8functionIFyvEEclEv>
    push(
 80028fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002902:	1884      	adds	r4, r0, r2
 8002904:	eb41 0503 	adc.w	r5, r1, r3
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	9202      	str	r2, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4622      	mov	r2, r4
 8002918:	462b      	mov	r3, r5
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f007 ffee 	bl	800a8fc <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>
    (*transfer_id)++;
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	701a      	strb	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bdb0      	pop	{r4, r5, r7, pc}

08002934 <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7fe ff7b 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8002946:	4603      	mov	r3, r0
 8002948:	4619      	mov	r1, r3
 800294a:	2004      	movs	r0, #4
 800294c:	f7fe ff3a 	bl	80017c4 <_ZnwjPv>
 8002950:	4604      	mov	r4, r0
 8002952:	68b8      	ldr	r0, [r7, #8]
 8002954:	f7ff fe76 	bl	8002644 <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002958:	4603      	mov	r3, r0
 800295a:	6023      	str	r3, [r4, #0]
	  }
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}

08002964 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f8ed 	bl	8002b4c <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8002972:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f8f5 	bl	8002b64 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 800297a:	4603      	mov	r3, r0
	}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f8f4 	bl	8002b7a <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002992:	4603      	mov	r3, r0
 8002994:	4619      	mov	r1, r3
 8002996:	4620      	mov	r0, r4
 8002998:	f000 f8fa 	bl	8002b90 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}

080029aa <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access() noexcept
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe ff42 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d82a      	bhi.n	8002a2e <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 80029d8:	a201      	add	r2, pc, #4	@ (adr r2, 80029e0 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	080029f1 	.word	0x080029f1
 80029e4:	080029ff 	.word	0x080029ff
 80029e8:	08002a13 	.word	0x08002a13
 80029ec:	08002a25 	.word	0x08002a25
	      __dest._M_access<const type_info*>() = nullptr;
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f8df 	bl	8002bb4 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
	      break;
 80029fc:	e017      	b.n	8002a2e <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80029fe:	68b8      	ldr	r0, [r7, #8]
 8002a00:	f7ff ffb0 	bl	8002964 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8002a04:	4604      	mov	r4, r0
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff ffcf 	bl	80029aa <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	601c      	str	r4, [r3, #0]
	      break;
 8002a10:	e00d      	b.n	8002a2e <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002a12:	68b8      	ldr	r0, [r7, #8]
 8002a14:	f7ff ffa6 	bl	8002964 <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8002a18:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f8d5 	bl	8002bcc <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8002a22:	e004      	b.n	8002a2e <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002a24:	4621      	mov	r1, r4
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f8e2 	bl	8002bf0 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002a2c:	bf00      	nop
	  return false;
 8002a2e:	2300      	movs	r3, #0
	}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd90      	pop	{r4, r7, pc}

08002a38 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7fe fef9 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	2004      	movs	r0, #4
 8002a50:	f7fe feb8 	bl	80017c4 <_ZnwjPv>
 8002a54:	4604      	mov	r4, r0
 8002a56:	68b8      	ldr	r0, [r7, #8]
 8002a58:	f7ff fe52 	bl	8002700 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	6023      	str	r3, [r4, #0]
	  }
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd90      	pop	{r4, r7, pc}

08002a68 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f8c9 	bl	8002c08 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8002a76:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f8d1 	bl	8002c20 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8002a7e:	4603      	mov	r3, r0
	}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8d0 	bl	8002c36 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f000 f8d6 	bl	8002c4c <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}

08002aa8 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access() noexcept
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fe fec3 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d82a      	bhi.n	8002b2a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8002ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8002adc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002afb 	.word	0x08002afb
 8002ae4:	08002b0f 	.word	0x08002b0f
 8002ae8:	08002b21 	.word	0x08002b21
	      __dest._M_access<const type_info*>() = nullptr;
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f861 	bl	8002bb4 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
	      break;
 8002af8:	e017      	b.n	8002b2a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002afa:	68b8      	ldr	r0, [r7, #8]
 8002afc:	f7ff ffb4 	bl	8002a68 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8002b00:	4604      	mov	r4, r0
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff ffd0 	bl	8002aa8 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	601c      	str	r4, [r3, #0]
	      break;
 8002b0c:	e00d      	b.n	8002b2a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8002b0e:	68b8      	ldr	r0, [r7, #8]
 8002b10:	f7ff ffaa 	bl	8002a68 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8002b14:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8002b16:	4619      	mov	r1, r3
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f8a6 	bl	8002c6a <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8002b1e:	e004      	b.n	8002b2a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8002b20:	4621      	mov	r1, r4
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f8b3 	bl	8002c8e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002b28:	bf00      	nop
	  return false;
 8002b2a:	2300      	movs	r3, #0
	}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}

08002b34 <_ZNKSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const noexcept
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fe fe7c 	bl	8001852 <_ZNKSt9_Any_data9_M_accessEv>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	7138      	strb	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002b9a:	6838      	ldr	r0, [r7, #0]
 8002b9c:	f7ff ffed 	bl	8002b7a <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4798      	blx	r3
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7fe fe3d 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002bd6:	6838      	ldr	r0, [r7, #0]
 8002bd8:	f000 f865 	bl	8002ca6 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4622      	mov	r2, r4
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f86a 	bl	8002cbc <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd90      	pop	{r4, r7, pc}

08002bf0 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f877 	bl	8002cee <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const noexcept
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7fe fe1e 	bl	8001852 <_ZNKSt9_Any_data9_M_accessEv>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	7138      	strb	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002c56:	6838      	ldr	r0, [r7, #0]
 8002c58:	f7ff ffed 	bl	8002c36 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4798      	blx	r3
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8002c6a:	b590      	push	{r4, r7, lr}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002c74:	6838      	ldr	r0, [r7, #0]
 8002c76:	f000 f846 	bl	8002d06 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f84b 	bl	8002d1c <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f858 	bl	8002d4e <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7fe fdb7 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	2004      	movs	r0, #4
 8002cd4:	f7fe fd76 	bl	80017c4 <_ZnwjPv>
 8002cd8:	4604      	mov	r4, r0
 8002cda:	68b8      	ldr	r0, [r7, #8]
 8002cdc:	f7ff ffe3 	bl	8002ca6 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6023      	str	r3, [r4, #0]
	  }
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd90      	pop	{r4, r7, pc}

08002cee <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access() noexcept
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe fda0 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7fe fd87 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4619      	mov	r1, r3
 8002d32:	2004      	movs	r0, #4
 8002d34:	f7fe fd46 	bl	80017c4 <_ZnwjPv>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	68b8      	ldr	r0, [r7, #8]
 8002d3c:	f7ff ffe3 	bl	8002d06 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002d40:	4603      	mov	r3, r0
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6023      	str	r3, [r4, #0]
	  }
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd90      	pop	{r4, r7, pc}

08002d4e <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access() noexcept
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe fd70 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      { return _M_t._M_ptr(); }

      /// Return a reference to the stored deleter.
      _GLIBCXX23_CONSTEXPR
      deleter_type&
      get_deleter() noexcept
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f810 	bl	8002d96 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 f823 	bl	8002dec <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f822 	bl	8002e04 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	320c      	adds	r2, #12
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	4790      	blx	r2
      }
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f812 	bl	8002e1e <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f811 	bl	8002e36 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f811 	bl	8002e4e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f811 	bl	8002e66 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f812 	bl	8002e80 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f810 	bl	8002e96 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3310      	adds	r3, #16
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fd06 	bl	80018ca <_ZNSt8functionIFvvEED1Ev>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fcf5 	bl	80018b0 <_ZNSt8functionIFyvEED1Ev>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_Z41__static_initialization_and_destruction_0ii>:
}




}
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	@ 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d122      	bne.n	8002f26 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d11d      	bne.n	8002f26 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	4917      	ldr	r1, [pc, #92]	@ (8002f4c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff facd 	bl	8002490 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8002ef6:	f107 0318 	add.w	r3, r7, #24
 8002efa:	4915      	ldr	r1, [pc, #84]	@ (8002f50 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff faf7 	bl	80024f0 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8002f02:	f107 0218 	add.w	r2, r7, #24
 8002f06:	f107 0308 	add.w	r3, r7, #8
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4811      	ldr	r0, [pc, #68]	@ (8002f54 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002f0e:	f7fe fce9 	bl	80018e4 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 8002f12:	f107 0318 	add.w	r3, r7, #24
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fcd7 	bl	80018ca <_ZNSt8functionIFvvEED1Ev>
 8002f1c:	f107 0308 	add.w	r3, r7, #8
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fcc5 	bl	80018b0 <_ZNSt8functionIFyvEED1Ev>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d105      	bne.n	8002f42 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002f36:	4807      	ldr	r0, [pc, #28]	@ (8002f54 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002f38:	f7ff ffb8 	bl	8002eac <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 8002f3c:	4806      	ldr	r0, [pc, #24]	@ (8002f58 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002f3e:	f7ff f9a8 	bl	8002292 <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 8002f42:	bf00      	nop
 8002f44:	3728      	adds	r7, #40	@ 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	08002271 	.word	0x08002271
 8002f50:	08002265 	.word	0x08002265
 8002f54:	2000024c 	.word	0x2000024c
 8002f58:	20000244 	.word	0x20000244

08002f5c <_GLOBAL__sub_I_buffer>:
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7ff ffb3 	bl	8002ed0 <_Z41__static_initialization_and_destruction_0ii>
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_GLOBAL__sub_D_buffer>:
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff ffab 	bl	8002ed0 <_Z41__static_initialization_and_destruction_0ii>
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <MX_DMA_Init+0x60>)
 8002f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f86:	4a15      	ldr	r2, [pc, #84]	@ (8002fdc <MX_DMA_Init+0x60>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f8e:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <MX_DMA_Init+0x60>)
 8002f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <MX_DMA_Init+0x60>)
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fdc <MX_DMA_Init+0x60>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6493      	str	r3, [r2, #72]	@ 0x48
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <MX_DMA_Init+0x60>)
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	200b      	movs	r0, #11
 8002fb8:	f001 fe4d 	bl	8004c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002fbc:	200b      	movs	r0, #11
 8002fbe:	f001 fe64 	bl	8004c8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	200c      	movs	r0, #12
 8002fc8:	f001 fe45 	bl	8004c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002fcc:	200c      	movs	r0, #12
 8002fce:	f001 fe5c 	bl	8004c8a <HAL_NVIC_EnableIRQ>

}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_TIM_PeriodElapsedCallback>:
static uint16_t D_enc_ticks = 0; //to be able to read this value inside STM32Monitor
static float D_enc_angle = 0.0; //to be able to read this value inside STM32Monitor


//Основной цикл управления 1кГц здесь читается энкодер, к нему применяется фильтр и выдется управление на мотор в зависимости от уставки пришедшей сверху через cyphal
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a10      	ldr	r2, [pc, #64]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d102      	bne.n	8002ff8 <HAL_TIM_PeriodElapsedCallback+0x18>
        drv.update();
 8002ff2:	4810      	ldr	r0, [pc, #64]	@ (8003034 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002ff4:	f000 f838 	bl	8003068 <_ZN5drive6updateEv>
    }
    if (htim->Instance == TIM6) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8003038 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d112      	bne.n	8003028 <HAL_TIM_PeriodElapsedCallback+0x48>
    	D_enc_ticks = drv.e.get_ticks();
 8003002:	480e      	ldr	r0, [pc, #56]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003004:	f000 f89b 	bl	800313e <_ZN7encoder9get_ticksEv>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800300e:	801a      	strh	r2, [r3, #0]
    	D_enc_angle = drv.e.get_angle();
 8003010:	480a      	ldr	r0, [pc, #40]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003012:	f000 f8b5 	bl	8003180 <_ZN7encoder9get_angleEv>
 8003016:	eef0 7a40 	vmov.f32	s15, s0
 800301a:	4b0a      	ldr	r3, [pc, #40]	@ (8003044 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800301c:	edc3 7a00 	vstr	s15, [r3]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8003020:	2104      	movs	r1, #4
 8003022:	4809      	ldr	r0, [pc, #36]	@ (8003048 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003024:	f002 fc34 	bl	8005890 <HAL_GPIO_TogglePin>
    }
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40001400 	.word	0x40001400
 8003034:	20000288 	.word	0x20000288
 8003038:	40001000 	.word	0x40001000
 800303c:	20000290 	.word	0x20000290
 8003040:	2000029c 	.word	0x2000029c
 8003044:	200002a0 	.word	0x200002a0
 8003048:	48000c00 	.word	0x48000c00

0800304c <_ZN5driveC1Ev>:


drive::drive()
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3308      	adds	r3, #8
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f859 	bl	8003110 <_ZN7encoderC1Ev>
	{

	};
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <_ZN5drive6updateEv>:

void drive::update()
	{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

	};
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <_ZN5drive12get_positionEv>:
			tmc5160_velocity(rad_to_steps(speed, jc.full_steps));
			tmc5160_move(val_speed);
};

float drive::get_position()
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	return steps_to_rads(tmc5160_position_read(), jc.full_steps);
 8003084:	f001 f92e 	bl	80042e4 <tmc5160_position_read>
 8003088:	4603      	mov	r3, r0
 800308a:	4a06      	ldr	r2, [pc, #24]	@ (80030a4 <_ZN5drive12get_positionEv+0x28>)
 800308c:	6852      	ldr	r2, [r2, #4]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f001 fbe5 	bl	8004860 <steps_to_rads>
 8003096:	eef0 7a40 	vmov.f32	s15, s0
};
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000428 	.word	0x20000428

080030a8 <_ZN5drive12get_velocityEv>:

float drive::get_velocity()
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	return steps_to_rads(tmc5160_velocity_read(), jc.full_steps);
 80030b0:	f001 f952 	bl	8004358 <tmc5160_velocity_read>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4a06      	ldr	r2, [pc, #24]	@ (80030d0 <_ZN5drive12get_velocityEv+0x28>)
 80030b8:	6852      	ldr	r2, [r2, #4]
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 fbcf 	bl	8004860 <steps_to_rads>
 80030c2:	eef0 7a40 	vmov.f32	s15, s0
};
 80030c6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000428 	.word	0x20000428

080030d4 <_Z41__static_initialization_and_destruction_0ii>:
//
//}
};


}
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d102      	bne.n	80030f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
drive drv;
 80030ee:	4803      	ldr	r0, [pc, #12]	@ (80030fc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80030f0:	f7ff ffac 	bl	800304c <_ZN5driveC1Ev>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000288 	.word	0x20000288

08003100 <_GLOBAL__sub_I_drv>:
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
 8003104:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003108:	2001      	movs	r0, #1
 800310a:	f7ff ffe3 	bl	80030d4 <_Z41__static_initialization_and_destruction_0ii>
 800310e:	bd80      	pop	{r7, pc}

08003110 <_ZN7encoderC1Ev>:
#include "encoder_gen.hpp"




encoder::encoder()
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 800311e:	801a      	strh	r2, [r3, #0]
{
	as50_readAngle(&this->prev_ticks_from_encoder, 100); //encoder init
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3308      	adds	r3, #8
 8003124:	2164      	movs	r1, #100	@ 0x64
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fb16 	bl	8001758 <as50_readAngle>
	this->alpha_for_filter = 0.5;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003132:	605a      	str	r2, [r3, #4]
}
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <_ZN7encoder9get_ticksEv>:

uint16_t encoder::get_ticks()
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
	uint16_t raw_ticks_from_encoder;
	uint16_t filtered_ticks_from_encoder;
	as50_readAngle(&raw_ticks_from_encoder, 100); //реализация для конкретного энкодера
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	2164      	movs	r1, #100	@ 0x64
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe fb03 	bl	8001758 <as50_readAngle>
	filtered_ticks_from_encoder = simple_EMA_filter(raw_ticks_from_encoder, this->prev_ticks_from_encoder, this->alpha_for_filter);
 8003152:	89ba      	ldrh	r2, [r7, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8919      	ldrh	r1, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	edd3 7a01 	vldr	s15, [r3, #4]
 800315e:	eeb0 0a67 	vmov.f32	s0, s15
 8003162:	4610      	mov	r0, r2
 8003164:	f001 fbb0 	bl	80048c8 <simple_EMA_filter>
 8003168:	4603      	mov	r3, r0
 800316a:	81fb      	strh	r3, [r7, #14]
	this->prev_ticks_from_encoder = filtered_ticks_from_encoder;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	89fa      	ldrh	r2, [r7, #14]
 8003170:	811a      	strh	r2, [r3, #8]
	return filtered_ticks_from_encoder;
 8003172:	89fb      	ldrh	r3, [r7, #14]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	0000      	movs	r0, r0
	...

08003180 <_ZN7encoder9get_angleEv>:

float encoder::get_angle()
{
 8003180:	b5b0      	push	{r4, r5, r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	uint16_t raw_ticks_from_encoder;
	uint16_t filtered_ticks_from_encoder;
	float gear_angle_from_encoder;
	as50_readAngle(&raw_ticks_from_encoder, 100); //реализация для конкретного энкодера
 8003188:	f107 030e 	add.w	r3, r7, #14
 800318c:	2164      	movs	r1, #100	@ 0x64
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fae2 	bl	8001758 <as50_readAngle>
	filtered_ticks_from_encoder = simple_EMA_filter(raw_ticks_from_encoder, this->prev_ticks_from_encoder, this->alpha_for_filter);
 8003194:	89fa      	ldrh	r2, [r7, #14]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8919      	ldrh	r1, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	edd3 7a01 	vldr	s15, [r3, #4]
 80031a0:	eeb0 0a67 	vmov.f32	s0, s15
 80031a4:	4610      	mov	r0, r2
 80031a6:	f001 fb8f 	bl	80048c8 <simple_EMA_filter>
 80031aa:	4603      	mov	r3, r0
 80031ac:	82fb      	strh	r3, [r7, #22]
	gear_angle_from_encoder = static_cast<float>(filtered_ticks_from_encoder) * ((M_PI * 2) / gear_encoder_CPR);
 80031ae:	8afb      	ldrh	r3, [r7, #22]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b8:	ee17 0a90 	vmov	r0, s15
 80031bc:	f7fd f9ec 	bl	8000598 <__aeabi_f2d>
 80031c0:	4604      	mov	r4, r0
 80031c2:	460d      	mov	r5, r1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f9d3 	bl	8000574 <__aeabi_i2d>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	a10d      	add	r1, pc, #52	@ (adr r1, 8003208 <_ZN7encoder9get_angleEv+0x88>)
 80031d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031d8:	f7fd fb60 	bl	800089c <__aeabi_ddiv>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4620      	mov	r0, r4
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7fd fa30 	bl	8000648 <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fd22 	bl	8000c38 <__aeabi_d2f>
 80031f4:	4603      	mov	r3, r0
 80031f6:	613b      	str	r3, [r7, #16]
	return gear_angle_from_encoder;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	ee07 3a90 	vmov	s15, r3
};
 80031fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bdb0      	pop	{r4, r5, r7, pc}
 8003208:	54442d18 	.word	0x54442d18
 800320c:	401921fb 	.word	0x401921fb

08003210 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003214:	4b20      	ldr	r3, [pc, #128]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003216:	4a21      	ldr	r2, [pc, #132]	@ (800329c <MX_FDCAN1_Init+0x8c>)
 8003218:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800321a:	4b1f      	ldr	r3, [pc, #124]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 800321c:	2200      	movs	r2, #0
 800321e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003220:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003222:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003226:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003228:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800322e:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003230:	2201      	movs	r2, #1
 8003232:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8003234:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003236:	2201      	movs	r2, #1
 8003238:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800323a:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 800323c:	2200      	movs	r2, #0
 800323e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8003240:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003242:	2204      	movs	r2, #4
 8003244:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003246:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003248:	2201      	movs	r2, #1
 800324a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 800324c:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 800324e:	221d      	movs	r2, #29
 8003250:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003254:	220a      	movs	r2, #10
 8003256:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8003258:	4b0f      	ldr	r3, [pc, #60]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 800325a:	2204      	movs	r2, #4
 800325c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800325e:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003260:	2201      	movs	r2, #1
 8003262:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8003264:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003266:	2202      	movs	r2, #2
 8003268:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800326a:	4b0b      	ldr	r3, [pc, #44]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 800326c:	2202      	movs	r2, #2
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003270:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003272:	2200      	movs	r2, #0
 8003274:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 8003276:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003278:	2203      	movs	r2, #3
 800327a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 800327e:	2200      	movs	r2, #0
 8003280:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003282:	4805      	ldr	r0, [pc, #20]	@ (8003298 <MX_FDCAN1_Init+0x88>)
 8003284:	f001 ffa4 	bl	80051d0 <HAL_FDCAN_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800328e:	f000 fb2c 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200002a4 	.word	0x200002a4
 800329c:	40006400 	.word	0x40006400

080032a0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b09e      	sub	sp, #120	@ 0x78
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032b8:	f107 0310 	add.w	r3, r7, #16
 80032bc:	2254      	movs	r2, #84	@ 0x54
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f009 fd5a 	bl	800cd7a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a20      	ldr	r2, [pc, #128]	@ (800334c <HAL_FDCAN_MspInit+0xac>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d138      	bne.n	8003342 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80032d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80032d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032da:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032dc:	f107 0310 	add.w	r3, r7, #16
 80032e0:	4618      	mov	r0, r3
 80032e2:	f004 fb73 	bl	80079cc <HAL_RCCEx_PeriphCLKConfig>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80032ec:	f000 fafd 	bl	80038ea <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80032f0:	4b17      	ldr	r3, [pc, #92]	@ (8003350 <HAL_FDCAN_MspInit+0xb0>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f4:	4a16      	ldr	r2, [pc, #88]	@ (8003350 <HAL_FDCAN_MspInit+0xb0>)
 80032f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80032fc:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <HAL_FDCAN_MspInit+0xb0>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003308:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HAL_FDCAN_MspInit+0xb0>)
 800330a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330c:	4a10      	ldr	r2, [pc, #64]	@ (8003350 <HAL_FDCAN_MspInit+0xb0>)
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003314:	4b0e      	ldr	r3, [pc, #56]	@ (8003350 <HAL_FDCAN_MspInit+0xb0>)
 8003316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003320:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003324:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	2300      	movs	r3, #0
 8003330:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003332:	2309      	movs	r3, #9
 8003334:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800333a:	4619      	mov	r1, r3
 800333c:	4805      	ldr	r0, [pc, #20]	@ (8003354 <HAL_FDCAN_MspInit+0xb4>)
 800333e:	f002 f90d 	bl	800555c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8003342:	bf00      	nop
 8003344:	3778      	adds	r7, #120	@ 0x78
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40006400 	.word	0x40006400
 8003350:	40021000 	.word	0x40021000
 8003354:	48000400 	.word	0x48000400

08003358 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	@ 0x28
 800335c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	60da      	str	r2, [r3, #12]
 800336c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800336e:	4b4a      	ldr	r3, [pc, #296]	@ (8003498 <MX_GPIO_Init+0x140>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003372:	4a49      	ldr	r2, [pc, #292]	@ (8003498 <MX_GPIO_Init+0x140>)
 8003374:	f043 0320 	orr.w	r3, r3, #32
 8003378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800337a:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <MX_GPIO_Init+0x140>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003386:	4b44      	ldr	r3, [pc, #272]	@ (8003498 <MX_GPIO_Init+0x140>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	4a43      	ldr	r2, [pc, #268]	@ (8003498 <MX_GPIO_Init+0x140>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003392:	4b41      	ldr	r3, [pc, #260]	@ (8003498 <MX_GPIO_Init+0x140>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <MX_GPIO_Init+0x140>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	4a3d      	ldr	r2, [pc, #244]	@ (8003498 <MX_GPIO_Init+0x140>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <MX_GPIO_Init+0x140>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033b6:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <MX_GPIO_Init+0x140>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ba:	4a37      	ldr	r2, [pc, #220]	@ (8003498 <MX_GPIO_Init+0x140>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c2:	4b35      	ldr	r3, [pc, #212]	@ (8003498 <MX_GPIO_Init+0x140>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ce:	4b32      	ldr	r3, [pc, #200]	@ (8003498 <MX_GPIO_Init+0x140>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	4a31      	ldr	r2, [pc, #196]	@ (8003498 <MX_GPIO_Init+0x140>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033da:	4b2f      	ldr	r3, [pc, #188]	@ (8003498 <MX_GPIO_Init+0x140>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 80033e6:	2200      	movs	r2, #0
 80033e8:	f649 3110 	movw	r1, #39696	@ 0x9b10
 80033ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033f0:	f002 fa36 	bl	8005860 <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80033f4:	2200      	movs	r2, #0
 80033f6:	2120      	movs	r1, #32
 80033f8:	4828      	ldr	r0, [pc, #160]	@ (800349c <MX_GPIO_Init+0x144>)
 80033fa:	f002 fa31 	bl	8005860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80033fe:	2200      	movs	r2, #0
 8003400:	2104      	movs	r1, #4
 8003402:	4827      	ldr	r0, [pc, #156]	@ (80034a0 <MX_GPIO_Init+0x148>)
 8003404:	f002 fa2c 	bl	8005860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 8003408:	2301      	movs	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800340c:	2303      	movs	r3, #3
 800340e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	4619      	mov	r1, r3
 800341a:	4820      	ldr	r0, [pc, #128]	@ (800349c <MX_GPIO_Init+0x144>)
 800341c:	f002 f89e 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 8003420:	230c      	movs	r3, #12
 8003422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	4619      	mov	r1, r3
 8003432:	481a      	ldr	r0, [pc, #104]	@ (800349c <MX_GPIO_Init+0x144>)
 8003434:	f002 f892 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8003438:	f649 3310 	movw	r3, #39696	@ 0x9b10
 800343c:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800343e:	2301      	movs	r3, #1
 8003440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4619      	mov	r1, r3
 8003450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003454:	f002 f882 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8003458:	2320      	movs	r3, #32
 800345a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800345c:	2301      	movs	r3, #1
 800345e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8003468:	f107 0314 	add.w	r3, r7, #20
 800346c:	4619      	mov	r1, r3
 800346e:	480b      	ldr	r0, [pc, #44]	@ (800349c <MX_GPIO_Init+0x144>)
 8003470:	f002 f874 	bl	800555c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8003474:	2304      	movs	r3, #4
 8003476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003478:	2301      	movs	r3, #1
 800347a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003480:	2300      	movs	r3, #0
 8003482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	4619      	mov	r1, r3
 800348a:	4805      	ldr	r0, [pc, #20]	@ (80034a0 <MX_GPIO_Init+0x148>)
 800348c:	f002 f866 	bl	800555c <HAL_GPIO_Init>

}
 8003490:	bf00      	nop
 8003492:	3728      	adds	r7, #40	@ 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	48000800 	.word	0x48000800
 80034a0:	48000c00 	.word	0x48000c00

080034a4 <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034aa:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <MX_I2C4_Init+0x78>)
 80034ac:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 80034ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <MX_I2C4_Init+0x7c>)
 80034b2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80034b4:	4b18      	ldr	r3, [pc, #96]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ba:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034bc:	2201      	movs	r2, #1
 80034be:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c0:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80034c6:	4b14      	ldr	r3, [pc, #80]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034d2:	4b11      	ldr	r3, [pc, #68]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034da:	2200      	movs	r2, #0
 80034dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80034de:	480e      	ldr	r0, [pc, #56]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034e0:	f002 f9f0 	bl	80058c4 <HAL_I2C_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80034ea:	f000 f9fe 	bl	80038ea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034ee:	2100      	movs	r1, #0
 80034f0:	4809      	ldr	r0, [pc, #36]	@ (8003518 <MX_I2C4_Init+0x74>)
 80034f2:	f003 fbf1 	bl	8006cd8 <HAL_I2CEx_ConfigAnalogFilter>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80034fc:	f000 f9f5 	bl	80038ea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003500:	2100      	movs	r1, #0
 8003502:	4805      	ldr	r0, [pc, #20]	@ (8003518 <MX_I2C4_Init+0x74>)
 8003504:	f003 fc33 	bl	8006d6e <HAL_I2CEx_ConfigDigitalFilter>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800350e:	f000 f9ec 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000308 	.word	0x20000308
 800351c:	40008400 	.word	0x40008400
 8003520:	00702991 	.word	0x00702991

08003524 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b0a0      	sub	sp, #128	@ 0x80
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800353c:	f107 0318 	add.w	r3, r7, #24
 8003540:	2254      	movs	r2, #84	@ 0x54
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f009 fc18 	bl	800cd7a <memset>
  if(i2cHandle->Instance==I2C4)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5e      	ldr	r2, [pc, #376]	@ (80036c8 <HAL_I2C_MspInit+0x1a4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	f040 80b5 	bne.w	80036c0 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003556:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800355a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800355c:	2300      	movs	r3, #0
 800355e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003560:	f107 0318 	add.w	r3, r7, #24
 8003564:	4618      	mov	r0, r3
 8003566:	f004 fa31 	bl	80079cc <HAL_RCCEx_PeriphCLKConfig>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003570:	f000 f9bb 	bl	80038ea <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003574:	4b55      	ldr	r3, [pc, #340]	@ (80036cc <HAL_I2C_MspInit+0x1a8>)
 8003576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003578:	4a54      	ldr	r2, [pc, #336]	@ (80036cc <HAL_I2C_MspInit+0x1a8>)
 800357a:	f043 0304 	orr.w	r3, r3, #4
 800357e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003580:	4b52      	ldr	r3, [pc, #328]	@ (80036cc <HAL_I2C_MspInit+0x1a8>)
 8003582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358c:	4b4f      	ldr	r3, [pc, #316]	@ (80036cc <HAL_I2C_MspInit+0x1a8>)
 800358e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003590:	4a4e      	ldr	r2, [pc, #312]	@ (80036cc <HAL_I2C_MspInit+0x1a8>)
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003598:	4b4c      	ldr	r3, [pc, #304]	@ (80036cc <HAL_I2C_MspInit+0x1a8>)
 800359a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035a4:	2340      	movs	r3, #64	@ 0x40
 80035a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a8:	2312      	movs	r3, #18
 80035aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80035b4:	2308      	movs	r3, #8
 80035b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035bc:	4619      	mov	r1, r3
 80035be:	4844      	ldr	r0, [pc, #272]	@ (80036d0 <HAL_I2C_MspInit+0x1ac>)
 80035c0:	f001 ffcc 	bl	800555c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035c8:	2312      	movs	r3, #18
 80035ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d0:	2300      	movs	r3, #0
 80035d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80035d4:	2303      	movs	r3, #3
 80035d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035dc:	4619      	mov	r1, r3
 80035de:	483d      	ldr	r0, [pc, #244]	@ (80036d4 <HAL_I2C_MspInit+0x1b0>)
 80035e0:	f001 ffbc 	bl	800555c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80035e4:	4b39      	ldr	r3, [pc, #228]	@ (80036cc <HAL_I2C_MspInit+0x1a8>)
 80035e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e8:	4a38      	ldr	r2, [pc, #224]	@ (80036cc <HAL_I2C_MspInit+0x1a8>)
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80035f0:	4b36      	ldr	r3, [pc, #216]	@ (80036cc <HAL_I2C_MspInit+0x1a8>)
 80035f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 80035fc:	4b36      	ldr	r3, [pc, #216]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 80035fe:	4a37      	ldr	r2, [pc, #220]	@ (80036dc <HAL_I2C_MspInit+0x1b8>)
 8003600:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8003602:	4b35      	ldr	r3, [pc, #212]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 8003604:	2216      	movs	r2, #22
 8003606:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003608:	4b33      	ldr	r3, [pc, #204]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800360e:	4b32      	ldr	r3, [pc, #200]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 8003610:	2200      	movs	r2, #0
 8003612:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003614:	4b30      	ldr	r3, [pc, #192]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 8003616:	2280      	movs	r2, #128	@ 0x80
 8003618:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800361a:	4b2f      	ldr	r3, [pc, #188]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 800361c:	2200      	movs	r2, #0
 800361e:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003620:	4b2d      	ldr	r3, [pc, #180]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 8003622:	2200      	movs	r2, #0
 8003624:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8003626:	4b2c      	ldr	r3, [pc, #176]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 8003628:	2200      	movs	r2, #0
 800362a:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800362c:	4b2a      	ldr	r3, [pc, #168]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 800362e:	2200      	movs	r2, #0
 8003630:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8003632:	4829      	ldr	r0, [pc, #164]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 8003634:	f001 fb44 	bl	8004cc0 <HAL_DMA_Init>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 800363e:	f000 f954 	bl	80038ea <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a24      	ldr	r2, [pc, #144]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 8003646:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003648:	4a23      	ldr	r2, [pc, #140]	@ (80036d8 <HAL_I2C_MspInit+0x1b4>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 800364e:	4b24      	ldr	r3, [pc, #144]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 8003650:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <HAL_I2C_MspInit+0x1c0>)
 8003652:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8003654:	4b22      	ldr	r3, [pc, #136]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 8003656:	2217      	movs	r2, #23
 8003658:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800365a:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 800365c:	2210      	movs	r2, #16
 800365e:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003660:	4b1f      	ldr	r3, [pc, #124]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003666:	4b1e      	ldr	r3, [pc, #120]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 8003668:	2280      	movs	r2, #128	@ 0x80
 800366a:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800366c:	4b1c      	ldr	r3, [pc, #112]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 800366e:	2200      	movs	r2, #0
 8003670:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003672:	4b1b      	ldr	r3, [pc, #108]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 8003674:	2200      	movs	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8003678:	4b19      	ldr	r3, [pc, #100]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 800367a:	2200      	movs	r2, #0
 800367c:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800367e:	4b18      	ldr	r3, [pc, #96]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 8003680:	2200      	movs	r2, #0
 8003682:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8003684:	4816      	ldr	r0, [pc, #88]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 8003686:	f001 fb1b 	bl	8004cc0 <HAL_DMA_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 8003690:	f000 f92b 	bl	80038ea <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a12      	ldr	r2, [pc, #72]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 8003698:	639a      	str	r2, [r3, #56]	@ 0x38
 800369a:	4a11      	ldr	r2, [pc, #68]	@ (80036e0 <HAL_I2C_MspInit+0x1bc>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	2052      	movs	r0, #82	@ 0x52
 80036a6:	f001 fad6 	bl	8004c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80036aa:	2052      	movs	r0, #82	@ 0x52
 80036ac:	f001 faed 	bl	8004c8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	2053      	movs	r0, #83	@ 0x53
 80036b6:	f001 face 	bl	8004c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80036ba:	2053      	movs	r0, #83	@ 0x53
 80036bc:	f001 fae5 	bl	8004c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80036c0:	bf00      	nop
 80036c2:	3780      	adds	r7, #128	@ 0x80
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40008400 	.word	0x40008400
 80036cc:	40021000 	.word	0x40021000
 80036d0:	48000800 	.word	0x48000800
 80036d4:	48000400 	.word	0x48000400
 80036d8:	2000035c 	.word	0x2000035c
 80036dc:	40020008 	.word	0x40020008
 80036e0:	200003bc 	.word	0x200003bc
 80036e4:	4002001c 	.word	0x4002001c

080036e8 <motor_config_assembler>:
	  domain_id_selector(jconf);
#endif
}

void motor_config_assembler(motor_config * mc, joint_config * jc)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
	{
		mc->motor_type = 14;
	}
	else if (JOINT_N == 6)
	{
		mc->motor_type = 14;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	220e      	movs	r2, #14
 80036f6:	701a      	strb	r2, [r3, #0]
	}

	switch(mc->motor_type)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f993 3000 	ldrsb.w	r3, [r3]
 80036fe:	2b17      	cmp	r3, #23
 8003700:	d01b      	beq.n	800373a <motor_config_assembler+0x52>
 8003702:	2b17      	cmp	r3, #23
 8003704:	dc23      	bgt.n	800374e <motor_config_assembler+0x66>
 8003706:	2b0e      	cmp	r3, #14
 8003708:	d002      	beq.n	8003710 <motor_config_assembler+0x28>
 800370a:	2b11      	cmp	r3, #17
 800370c:	d00b      	beq.n	8003726 <motor_config_assembler+0x3e>
 800370e:	e01e      	b.n	800374e <motor_config_assembler+0x66>
	{
	case 14:
		mc->max_irun_scaler = 34;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2222      	movs	r2, #34	@ 0x22
 8003714:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 0.5;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800371c:	605a      	str	r2, [r3, #4]
		mc->init_irun = 2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	725a      	strb	r2, [r3, #9]
		break;
 8003724:	e013      	b.n	800374e <motor_config_assembler+0x66>
	case 17:
		mc->max_irun_scaler = 0;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 3.9;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0d      	ldr	r2, [pc, #52]	@ (8003764 <motor_config_assembler+0x7c>)
 8003730:	605a      	str	r2, [r3, #4]
		mc->init_irun = 6;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2206      	movs	r2, #6
 8003736:	725a      	strb	r2, [r3, #9]
		break;
 8003738:	e009      	b.n	800374e <motor_config_assembler+0x66>
	case 23:
		mc->max_irun_scaler = 0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 10.2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <motor_config_assembler+0x80>)
 8003744:	605a      	str	r2, [r3, #4]
		mc->init_irun = 15;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	220f      	movs	r2, #15
 800374a:	725a      	strb	r2, [r3, #9]
		break;
 800374c:	bf00      	nop
	}
	mc->direction = jc->direction;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	729a      	strb	r2, [r3, #10]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	4079999a 	.word	0x4079999a
 8003768:	41233333 	.word	0x41233333

0800376c <joint_config_assembler>:


void joint_config_assembler(joint_config * jconf, joint_config_address * jc_a)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
		jconf->lower_limit_ticks = 0;
		jconf->upper_limit_ticks = 0;
	}
	else if (JOINT_N == 6)
	{
		jconf->motor_gear_ratio = 19.203208;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a20      	ldr	r2, [pc, #128]	@ (80037fc <joint_config_assembler+0x90>)
 800377a:	60da      	str	r2, [r3, #12]
		jconf->joint_gear_ratio = 1;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003782:	609a      	str	r2, [r3, #8]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	edd3 7a03 	vldr	s15, [r3, #12]
 800378a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003800 <joint_config_assembler+0x94>
 800378e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	edd3 7a02 	vldr	s15, [r3, #8]
 8003798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a0:	ee17 2a90 	vmov	r2, s15
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	605a      	str	r2, [r3, #4]
		jconf->direction = -1;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	22ff      	movs	r2, #255	@ 0xff
 80037ac:	705a      	strb	r2, [r3, #1]
		jconf->lower_limit_ticks = 0;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	615a      	str	r2, [r3, #20]
		jconf->upper_limit_ticks = 0;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
	}

	//TODO!!!!!!!!!!!!!!!!!!!!!!!!! from config read
	jconf->lower_limit_enc = 0.0;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	61da      	str	r2, [r3, #28]
	jconf->upper_limit_enc = 0.0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	619a      	str	r2, [r3, #24]
	jconf->zero_enc = 0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	621a      	str	r2, [r3, #32]
	//TODO!!!!!!!!!!!!!!!!!!!!!!!!!

	jc_a->address_of_upper_limit_enc = 0x00;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	801a      	strh	r2, [r3, #0]
	jc_a->address_of_lower_limit_enc = jc_a->address_of_upper_limit_enc + sizeof(jconf->upper_limit_enc);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	3304      	adds	r3, #4
 80037dc:	b29a      	uxth	r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	805a      	strh	r2, [r3, #2]
	jc_a->address_of_zero_enc = jc_a->address_of_lower_limit_enc + sizeof(jconf->lower_limit_enc);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	885b      	ldrh	r3, [r3, #2]
 80037e6:	3304      	adds	r3, #4
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	809a      	strh	r2, [r3, #4]

}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	4199a02c 	.word	0x4199a02c
 8003800:	47480000 	.word	0x47480000

08003804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003808:	f001 f8b7 	bl	800497a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800380c:	f000 f822 	bl	8003854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003810:	f7ff fda2 	bl	8003358 <MX_GPIO_Init>
  MX_DMA_Init();
 8003814:	f7ff fbb2 	bl	8002f7c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003818:	f7ff fcfa 	bl	8003210 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 800381c:	f7ff fe42 	bl	80034a4 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8003820:	f000 ff42 	bl	80046a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003824:	f000 f8bc 	bl	80039a0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003828:	f000 f8f8 	bl	8003a1c <MX_SPI3_Init>
  MX_TIM8_Init();
 800382c:	f000 fb9c 	bl	8003f68 <MX_TIM8_Init>
  MX_TIM7_Init();
 8003830:	f000 fb62 	bl	8003ef8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8003834:	f000 fb2a 	bl	8003e8c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8003838:	4804      	ldr	r0, [pc, #16]	@ (800384c <main+0x48>)
 800383a:	f005 fa27 	bl	8008c8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800383e:	4804      	ldr	r0, [pc, #16]	@ (8003850 <main+0x4c>)
 8003840:	f005 fa24 	bl	8008c8c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  main_cpp();
 8003844:	f000 f858 	bl	80038f8 <main_cpp>

  while (1)
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <main+0x44>
 800384c:	2000056c 	.word	0x2000056c
 8003850:	20000520 	.word	0x20000520

08003854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b094      	sub	sp, #80	@ 0x50
 8003858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800385a:	f107 0318 	add.w	r3, r7, #24
 800385e:	2238      	movs	r2, #56	@ 0x38
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f009 fa89 	bl	800cd7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003868:	1d3b      	adds	r3, r7, #4
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003876:	2000      	movs	r0, #0
 8003878:	f003 fac6 	bl	8006e08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800387c:	2301      	movs	r3, #1
 800387e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003884:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003886:	2302      	movs	r3, #2
 8003888:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800388a:	2303      	movs	r3, #3
 800388c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800388e:	2301      	movs	r3, #1
 8003890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003892:	2328      	movs	r3, #40	@ 0x28
 8003894:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003896:	2302      	movs	r3, #2
 8003898:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800389a:	2302      	movs	r3, #2
 800389c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800389e:	2302      	movs	r3, #2
 80038a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038a2:	f107 0318 	add.w	r3, r7, #24
 80038a6:	4618      	mov	r0, r3
 80038a8:	f003 fb62 	bl	8006f70 <HAL_RCC_OscConfig>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80038b2:	f000 f81a 	bl	80038ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038b6:	230f      	movs	r3, #15
 80038b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038ba:	2303      	movs	r3, #3
 80038bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	2104      	movs	r1, #4
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 fe5e 	bl	8007594 <HAL_RCC_ClockConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80038de:	f000 f804 	bl	80038ea <Error_Handler>
  }
}
 80038e2:	bf00      	nop
 80038e4:	3750      	adds	r7, #80	@ 0x50
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038ee:	b672      	cpsid	i
}
 80038f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038f2:	bf00      	nop
 80038f4:	e7fd      	b.n	80038f2 <Error_Handler+0x8>
	...

080038f8 <main_cpp>:
joint_config jc;
joint_config_address jc_a;
uint16_t enc_angle = 0;

void main_cpp()
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b090      	sub	sp, #64	@ 0x40
 80038fc:	af00      	add	r7, sp, #0
	//cyphal_can_starter(&hfdcan1);
	//setup_cyphal(&hfdcan1);
	HAL_Delay(10);
 80038fe:	200a      	movs	r0, #10
 8003900:	f001 f8ac 	bl	8004a5c <HAL_Delay>
	joint_config_assembler(&jc, &jc_a);
 8003904:	4923      	ldr	r1, [pc, #140]	@ (8003994 <main_cpp+0x9c>)
 8003906:	4824      	ldr	r0, [pc, #144]	@ (8003998 <main_cpp+0xa0>)
 8003908:	f7ff ff30 	bl	800376c <joint_config_assembler>
	motor_config_assembler(&mc, &jc);
 800390c:	4922      	ldr	r1, [pc, #136]	@ (8003998 <main_cpp+0xa0>)
 800390e:	4823      	ldr	r0, [pc, #140]	@ (800399c <main_cpp+0xa4>)
 8003910:	f7ff feea 	bl	80036e8 <motor_config_assembler>
	//joint_config_read(&jc, &jc_a);
	HAL_Delay(10);
 8003914:	200a      	movs	r0, #10
 8003916:	f001 f8a1 	bl	8004a5c <HAL_Delay>
	tmc5160_init(&mc);
 800391a:	4820      	ldr	r0, [pc, #128]	@ (800399c <main_cpp+0xa4>)
 800391c:	f000 fd70 	bl	8004400 <tmc5160_init>
	//js_init();
	HAL_Delay(10);
 8003920:	200a      	movs	r0, #10
 8003922:	f001 f89b 	bl	8004a5c <HAL_Delay>
	//uint8_t msg[10];
	//int i = 0;

	HAL_StatusTypeDef rv;

	uint32_t last_hbeat = HAL_GetTick();
 8003926:	f001 f88d 	bl	8004a44 <HAL_GetTick>
 800392a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	uint32_t last_js = HAL_GetTick();
 800392c:	f001 f88a 	bl	8004a44 <HAL_GetTick>
 8003930:	63b8      	str	r0, [r7, #56]	@ 0x38
	uint32_t last_AR = HAL_GetTick();
 8003932:	f001 f887 	bl	8004a44 <HAL_GetTick>
 8003936:	6378      	str	r0, [r7, #52]	@ 0x34

	vec_4ax linear = {0};
 8003938:	f107 0320 	add.w	r3, r7, #32
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
	vec_4ax quat = {0};
 8003946:	f107 0310 	add.w	r3, r7, #16
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
	vec_4ax gyro = {0};
 8003954:	463b      	mov	r3, r7
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	60da      	str	r2, [r3, #12]

	//rv = HAL_I2C_IsDeviceReady(&hi2c4, 0x29, 1, 10);
	//IMU_setup();
	while(1)
	{
	      uint32_t now = HAL_GetTick();
 8003960:	f001 f870 	bl	8004a44 <HAL_GetTick>
 8003964:	6338      	str	r0, [r7, #48]	@ 0x30
	      if ( (now - last_hbeat) >= 1000) {
 8003966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003970:	d303      	bcc.n	800397a <main_cpp+0x82>
	          last_hbeat = now;
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	63fb      	str	r3, [r7, #60]	@ 0x3c
	          heartbeat();
 8003976:	f7fe fcd1 	bl	800231c <heartbeat>
	          //sprintf(msg,"%d\n\0", q[1]);
	          //HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
	          //send_IMU(&quat.w, &quat.x, &quat.y, &quat.z, &linear.x, &linear.y, &linear.z, &gyro.x, &gyro.y, &gyro.z);
	          //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
	      }
	      if ( (now - last_js) >= 100) {
 800397a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800397c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b63      	cmp	r3, #99	@ 0x63
 8003982:	d904      	bls.n	800398e <main_cpp+0x96>
	    	  last_js = now;
 8003984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003986:	63bb      	str	r3, [r7, #56]	@ 0x38
	    	  send_JS(&jc);
 8003988:	4803      	ldr	r0, [pc, #12]	@ (8003998 <main_cpp+0xa0>)
 800398a:	f7fe fc8f 	bl	80022ac <send_JS>
	    	  //as50_readAngle(&enc_angle, 100);
	    	  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
	      }
	      cyphal_loop();
 800398e:	f7fe fcf5 	bl	800237c <cyphal_loop>
	}
 8003992:	e7e5      	b.n	8003960 <main_cpp+0x68>
 8003994:	2000044c 	.word	0x2000044c
 8003998:	20000428 	.word	0x20000428
 800399c:	2000041c 	.word	0x2000041c

080039a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80039a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a18 <MX_SPI1_Init+0x78>)
 80039a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039b2:	4b18      	ldr	r3, [pc, #96]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039b8:	4b16      	ldr	r3, [pc, #88]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80039c0:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039c2:	2202      	movs	r2, #2
 80039c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80039c6:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80039d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039d6:	2220      	movs	r2, #32
 80039d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039da:	4b0e      	ldr	r3, [pc, #56]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039dc:	2200      	movs	r2, #0
 80039de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80039ec:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039ee:	2207      	movs	r2, #7
 80039f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80039f8:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <MX_SPI1_Init+0x74>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039fe:	4805      	ldr	r0, [pc, #20]	@ (8003a14 <MX_SPI1_Init+0x74>)
 8003a00:	f004 fa32 	bl	8007e68 <HAL_SPI_Init>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a0a:	f7ff ff6e 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000454 	.word	0x20000454
 8003a18:	40013000 	.word	0x40013000

08003a1c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003a20:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a22:	4a1c      	ldr	r2, [pc, #112]	@ (8003a94 <MX_SPI3_Init+0x78>)
 8003a24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a26:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a2e:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8003a34:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a36:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8003a3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a3c:	4b14      	ldr	r3, [pc, #80]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a42:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a52:	2218      	movs	r2, #24
 8003a54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a56:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a62:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003a68:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a6a:	2207      	movs	r2, #7
 8003a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a6e:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a7a:	4805      	ldr	r0, [pc, #20]	@ (8003a90 <MX_SPI3_Init+0x74>)
 8003a7c:	f004 f9f4 	bl	8007e68 <HAL_SPI_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003a86:	f7ff ff30 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200004b8 	.word	0x200004b8
 8003a94:	40003c00 	.word	0x40003c00

08003a98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08c      	sub	sp, #48	@ 0x30
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 031c 	add.w	r3, r7, #28
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a33      	ldr	r2, [pc, #204]	@ (8003b84 <HAL_SPI_MspInit+0xec>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d131      	bne.n	8003b1e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aba:	4b33      	ldr	r3, [pc, #204]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abe:	4a32      	ldr	r2, [pc, #200]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003ac0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ac4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ac6:	4b30      	ldr	r3, [pc, #192]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ade:	4b2a      	ldr	r3, [pc, #168]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003aea:	23e0      	movs	r3, #224	@ 0xe0
 8003aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aee:	2302      	movs	r3, #2
 8003af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003afa:	2305      	movs	r3, #5
 8003afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afe:	f107 031c 	add.w	r3, r7, #28
 8003b02:	4619      	mov	r1, r3
 8003b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b08:	f001 fd28 	bl	800555c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2100      	movs	r1, #0
 8003b10:	2023      	movs	r0, #35	@ 0x23
 8003b12:	f001 f8a0 	bl	8004c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003b16:	2023      	movs	r0, #35	@ 0x23
 8003b18:	f001 f8b7 	bl	8004c8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003b1c:	e02d      	b.n	8003b7a <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1a      	ldr	r2, [pc, #104]	@ (8003b8c <HAL_SPI_MspInit+0xf4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d128      	bne.n	8003b7a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b28:	4b17      	ldr	r3, [pc, #92]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2c:	4a16      	ldr	r2, [pc, #88]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b34:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b40:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b44:	4a10      	ldr	r2, [pc, #64]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003b46:	f043 0304 	orr.w	r3, r3, #4
 8003b4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b88 <HAL_SPI_MspInit+0xf0>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003b58:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b66:	2300      	movs	r3, #0
 8003b68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b6a:	2306      	movs	r3, #6
 8003b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b6e:	f107 031c 	add.w	r3, r7, #28
 8003b72:	4619      	mov	r1, r3
 8003b74:	4806      	ldr	r0, [pc, #24]	@ (8003b90 <HAL_SPI_MspInit+0xf8>)
 8003b76:	f001 fcf1 	bl	800555c <HAL_GPIO_Init>
}
 8003b7a:	bf00      	nop
 8003b7c:	3730      	adds	r7, #48	@ 0x30
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40013000 	.word	0x40013000
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40003c00 	.word	0x40003c00
 8003b90:	48000800 	.word	0x48000800

08003b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <HAL_MspInit+0x44>)
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd8 <HAL_MspInit+0x44>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <HAL_MspInit+0x44>)
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	4b09      	ldr	r3, [pc, #36]	@ (8003bd8 <HAL_MspInit+0x44>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb6:	4a08      	ldr	r2, [pc, #32]	@ (8003bd8 <HAL_MspInit+0x44>)
 8003bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_MspInit+0x44>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003bca:	f003 f9c1 	bl	8006f50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000

08003bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <NMI_Handler+0x4>

08003be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <HardFault_Handler+0x4>

08003bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <MemManage_Handler+0x4>

08003bf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <BusFault_Handler+0x4>

08003bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <UsageFault_Handler+0x4>

08003c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c32:	f000 fef5 	bl	8004a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8003c40:	4802      	ldr	r0, [pc, #8]	@ (8003c4c <DMA1_Channel1_IRQHandler+0x10>)
 8003c42:	f001 f9a5 	bl	8004f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000035c 	.word	0x2000035c

08003c50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8003c54:	4802      	ldr	r0, [pc, #8]	@ (8003c60 <DMA1_Channel2_IRQHandler+0x10>)
 8003c56:	f001 f99b 	bl	8004f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	200003bc 	.word	0x200003bc

08003c64 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003c68:	4802      	ldr	r0, [pc, #8]	@ (8003c74 <SPI1_IRQHandler+0x10>)
 8003c6a:	f004 fd3f 	bl	80086ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000454 	.word	0x20000454

08003c78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c7c:	4802      	ldr	r0, [pc, #8]	@ (8003c88 <USART2_IRQHandler+0x10>)
 8003c7e:	f005 fc7b 	bl	8009578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000604 	.word	0x20000604

08003c8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c90:	4802      	ldr	r0, [pc, #8]	@ (8003c9c <TIM6_DAC_IRQHandler+0x10>)
 8003c92:	f005 f919 	bl	8008ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000520 	.word	0x20000520

08003ca0 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ca4:	4802      	ldr	r0, [pc, #8]	@ (8003cb0 <TIM7_DAC_IRQHandler+0x10>)
 8003ca6:	f005 f90f 	bl	8008ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	2000056c 	.word	0x2000056c

08003cb4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8003cb8:	4802      	ldr	r0, [pc, #8]	@ (8003cc4 <I2C4_EV_IRQHandler+0x10>)
 8003cba:	f001 ffb9 	bl	8005c30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000308 	.word	0x20000308

08003cc8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8003ccc:	4802      	ldr	r0, [pc, #8]	@ (8003cd8 <I2C4_ER_IRQHandler+0x10>)
 8003cce:	f001 ffc9 	bl	8005c64 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000308 	.word	0x20000308

08003cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return 1;
 8003ce0:	2301      	movs	r3, #1
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <_kill>:

int _kill(int pid, int sig)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cf6:	f009 f8f9 	bl	800ceec <__errno>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2216      	movs	r2, #22
 8003cfe:	601a      	str	r2, [r3, #0]
  return -1;
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_exit>:

void _exit (int status)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d14:	f04f 31ff 	mov.w	r1, #4294967295
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ffe7 	bl	8003cec <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d1e:	bf00      	nop
 8003d20:	e7fd      	b.n	8003d1e <_exit+0x12>

08003d22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e00a      	b.n	8003d4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d34:	f3af 8000 	nop.w
 8003d38:	4601      	mov	r1, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	60ba      	str	r2, [r7, #8]
 8003d40:	b2ca      	uxtb	r2, r1
 8003d42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3301      	adds	r3, #1
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	dbf0      	blt.n	8003d34 <_read+0x12>
  }

  return len;
 8003d52:	687b      	ldr	r3, [r7, #4]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e009      	b.n	8003d82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	60ba      	str	r2, [r7, #8]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	dbf1      	blt.n	8003d6e <_write+0x12>
  }
  return len;
 8003d8a:	687b      	ldr	r3, [r7, #4]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <_close>:

int _close(int file)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dbc:	605a      	str	r2, [r3, #4]
  return 0;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_isatty>:

int _isatty(int file)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003dd4:	2301      	movs	r3, #1
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e04:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <_sbrk+0x5c>)
 8003e06:	4b15      	ldr	r3, [pc, #84]	@ (8003e5c <_sbrk+0x60>)
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e10:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <_sbrk+0x64>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d102      	bne.n	8003e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e18:	4b11      	ldr	r3, [pc, #68]	@ (8003e60 <_sbrk+0x64>)
 8003e1a:	4a12      	ldr	r2, [pc, #72]	@ (8003e64 <_sbrk+0x68>)
 8003e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <_sbrk+0x64>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d207      	bcs.n	8003e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e2c:	f009 f85e 	bl	800ceec <__errno>
 8003e30:	4603      	mov	r3, r0
 8003e32:	220c      	movs	r2, #12
 8003e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3a:	e009      	b.n	8003e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e3c:	4b08      	ldr	r3, [pc, #32]	@ (8003e60 <_sbrk+0x64>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e42:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <_sbrk+0x64>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	4a05      	ldr	r2, [pc, #20]	@ (8003e60 <_sbrk+0x64>)
 8003e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20020000 	.word	0x20020000
 8003e5c:	00000400 	.word	0x00000400
 8003e60:	2000051c 	.word	0x2000051c
 8003e64:	200007f0 	.word	0x200007f0

08003e68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e6c:	4b06      	ldr	r3, [pc, #24]	@ (8003e88 <SystemInit+0x20>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e72:	4a05      	ldr	r2, [pc, #20]	@ (8003e88 <SystemInit+0x20>)
 8003e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003e9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ef0 <MX_TIM6_Init+0x64>)
 8003e9e:	4a15      	ldr	r2, [pc, #84]	@ (8003ef4 <MX_TIM6_Init+0x68>)
 8003ea0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 8003ea2:	4b13      	ldr	r3, [pc, #76]	@ (8003ef0 <MX_TIM6_Init+0x64>)
 8003ea4:	229f      	movs	r2, #159	@ 0x9f
 8003ea6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea8:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <MX_TIM6_Init+0x64>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003eae:	4b10      	ldr	r3, [pc, #64]	@ (8003ef0 <MX_TIM6_Init+0x64>)
 8003eb0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003eb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef0 <MX_TIM6_Init+0x64>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003ebc:	480c      	ldr	r0, [pc, #48]	@ (8003ef0 <MX_TIM6_Init+0x64>)
 8003ebe:	f004 fe8d 	bl	8008bdc <HAL_TIM_Base_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003ec8:	f7ff fd0f 	bl	80038ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ed4:	1d3b      	adds	r3, r7, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4805      	ldr	r0, [pc, #20]	@ (8003ef0 <MX_TIM6_Init+0x64>)
 8003eda:	f005 fa21 	bl	8009320 <HAL_TIMEx_MasterConfigSynchronization>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003ee4:	f7ff fd01 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000520 	.word	0x20000520
 8003ef4:	40001000 	.word	0x40001000

08003ef8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003f08:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <MX_TIM7_Init+0x68>)
 8003f0a:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <MX_TIM7_Init+0x6c>)
 8003f0c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1599;
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <MX_TIM7_Init+0x68>)
 8003f10:	f240 623f 	movw	r2, #1599	@ 0x63f
 8003f14:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f16:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <MX_TIM7_Init+0x68>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8003f1c:	4b10      	ldr	r3, [pc, #64]	@ (8003f60 <MX_TIM7_Init+0x68>)
 8003f1e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003f22:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f24:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <MX_TIM7_Init+0x68>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003f2a:	480d      	ldr	r0, [pc, #52]	@ (8003f60 <MX_TIM7_Init+0x68>)
 8003f2c:	f004 fe56 	bl	8008bdc <HAL_TIM_Base_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003f36:	f7ff fcd8 	bl	80038ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	4619      	mov	r1, r3
 8003f46:	4806      	ldr	r0, [pc, #24]	@ (8003f60 <MX_TIM7_Init+0x68>)
 8003f48:	f005 f9ea 	bl	8009320 <HAL_TIMEx_MasterConfigSynchronization>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003f52:	f7ff fcca 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	2000056c 	.word	0x2000056c
 8003f64:	40001400 	.word	0x40001400

08003f68 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	@ 0x30
 8003f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f6e:	f107 030c 	add.w	r3, r7, #12
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f008 feff 	bl	800cd7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003f86:	4b23      	ldr	r3, [pc, #140]	@ (8004014 <MX_TIM8_Init+0xac>)
 8003f88:	4a23      	ldr	r2, [pc, #140]	@ (8004018 <MX_TIM8_Init+0xb0>)
 8003f8a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003f8c:	4b21      	ldr	r3, [pc, #132]	@ (8004014 <MX_TIM8_Init+0xac>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f92:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <MX_TIM8_Init+0xac>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003f98:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <MX_TIM8_Init+0xac>)
 8003f9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f9e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8004014 <MX_TIM8_Init+0xac>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <MX_TIM8_Init+0xac>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <MX_TIM8_Init+0xac>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003fd6:	f107 030c 	add.w	r3, r7, #12
 8003fda:	4619      	mov	r1, r3
 8003fdc:	480d      	ldr	r0, [pc, #52]	@ (8004014 <MX_TIM8_Init+0xac>)
 8003fde:	f004 fecd 	bl	8008d7c <HAL_TIM_Encoder_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003fe8:	f7ff fc7f 	bl	80038ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4805      	ldr	r0, [pc, #20]	@ (8004014 <MX_TIM8_Init+0xac>)
 8003ffe:	f005 f98f 	bl	8009320 <HAL_TIMEx_MasterConfigSynchronization>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8004008:	f7ff fc6f 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800400c:	bf00      	nop
 800400e:	3730      	adds	r7, #48	@ 0x30
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	200005b8 	.word	0x200005b8
 8004018:	40013400 	.word	0x40013400

0800401c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1a      	ldr	r2, [pc, #104]	@ (8004094 <HAL_TIM_Base_MspInit+0x78>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d114      	bne.n	8004058 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800402e:	4b1a      	ldr	r3, [pc, #104]	@ (8004098 <HAL_TIM_Base_MspInit+0x7c>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	4a19      	ldr	r2, [pc, #100]	@ (8004098 <HAL_TIM_Base_MspInit+0x7c>)
 8004034:	f043 0310 	orr.w	r3, r3, #16
 8004038:	6593      	str	r3, [r2, #88]	@ 0x58
 800403a:	4b17      	ldr	r3, [pc, #92]	@ (8004098 <HAL_TIM_Base_MspInit+0x7c>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004046:	2200      	movs	r2, #0
 8004048:	2100      	movs	r1, #0
 800404a:	2036      	movs	r0, #54	@ 0x36
 800404c:	f000 fe03 	bl	8004c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004050:	2036      	movs	r0, #54	@ 0x36
 8004052:	f000 fe1a 	bl	8004c8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004056:	e018      	b.n	800408a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0f      	ldr	r2, [pc, #60]	@ (800409c <HAL_TIM_Base_MspInit+0x80>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d113      	bne.n	800408a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004062:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <HAL_TIM_Base_MspInit+0x7c>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004066:	4a0c      	ldr	r2, [pc, #48]	@ (8004098 <HAL_TIM_Base_MspInit+0x7c>)
 8004068:	f043 0320 	orr.w	r3, r3, #32
 800406c:	6593      	str	r3, [r2, #88]	@ 0x58
 800406e:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <HAL_TIM_Base_MspInit+0x7c>)
 8004070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	2037      	movs	r0, #55	@ 0x37
 8004080:	f000 fde9 	bl	8004c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8004084:	2037      	movs	r0, #55	@ 0x37
 8004086:	f000 fe00 	bl	8004c8a <HAL_NVIC_EnableIRQ>
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40001000 	.word	0x40001000
 8004098:	40021000 	.word	0x40021000
 800409c:	40001400 	.word	0x40001400

080040a0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	@ 0x28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a25      	ldr	r2, [pc, #148]	@ (8004154 <HAL_TIM_Encoder_MspInit+0xb4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d143      	bne.n	800414a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040c2:	4b25      	ldr	r3, [pc, #148]	@ (8004158 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c6:	4a24      	ldr	r2, [pc, #144]	@ (8004158 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80040ce:	4b22      	ldr	r3, [pc, #136]	@ (8004158 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040da:	4b1f      	ldr	r3, [pc, #124]	@ (8004158 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040de:	4a1e      	ldr	r2, [pc, #120]	@ (8004158 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004158 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f2:	4b19      	ldr	r3, [pc, #100]	@ (8004158 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f6:	4a18      	ldr	r2, [pc, #96]	@ (8004158 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040fe:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800410a:	2380      	movs	r3, #128	@ 0x80
 800410c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410e:	2302      	movs	r3, #2
 8004110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004116:	2300      	movs	r3, #0
 8004118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800411a:	2304      	movs	r3, #4
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800411e:	f107 0314 	add.w	r3, r7, #20
 8004122:	4619      	mov	r1, r3
 8004124:	480d      	ldr	r0, [pc, #52]	@ (800415c <HAL_TIM_Encoder_MspInit+0xbc>)
 8004126:	f001 fa19 	bl	800555c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800412a:	2340      	movs	r3, #64	@ 0x40
 800412c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	2302      	movs	r3, #2
 8004130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004136:	2300      	movs	r3, #0
 8004138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800413a:	2305      	movs	r3, #5
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	4619      	mov	r1, r3
 8004144:	4806      	ldr	r0, [pc, #24]	@ (8004160 <HAL_TIM_Encoder_MspInit+0xc0>)
 8004146:	f001 fa09 	bl	800555c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800414a:	bf00      	nop
 800414c:	3728      	adds	r7, #40	@ 0x28
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40013400 	.word	0x40013400
 8004158:	40021000 	.word	0x40021000
 800415c:	48000800 	.word	0x48000800
 8004160:	48000400 	.word	0x48000400
 8004164:	00000000 	.word	0x00000000

08004168 <tmc5160_velocity>:
	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
	tmc5160_write(WData);
}

void tmc5160_velocity(int32_t vel)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

	int32_t vel_to_go;
	vel_to_go = (int32_t)(vel*1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fc f9ff 	bl	8000574 <__aeabi_i2d>
 8004176:	a32c      	add	r3, pc, #176	@ (adr r3, 8004228 <tmc5160_velocity+0xc0>)
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f7fc fa64 	bl	8000648 <__aeabi_dmul>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	f7fc fd0e 	bl	8000ba8 <__aeabi_d2iz>
 800418c:	4603      	mov	r3, r0
 800418e:	617b      	str	r3, [r7, #20]
	vel_to_go = abs(vel_to_go);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	bfb8      	it	lt
 8004196:	425b      	neglt	r3, r3
 8004198:	617b      	str	r3, [r7, #20]

	int32_t V1;
	V1 = (int32_t)(vel_to_go*0.1);
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f7fc f9ea 	bl	8000574 <__aeabi_i2d>
 80041a0:	a323      	add	r3, pc, #140	@ (adr r3, 8004230 <tmc5160_velocity+0xc8>)
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f7fc fa4f 	bl	8000648 <__aeabi_dmul>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	f7fc fcf9 	bl	8000ba8 <__aeabi_d2iz>
 80041b6:	4603      	mov	r3, r0
 80041b8:	613b      	str	r3, [r7, #16]

	//Acceleration threshold velocity V1
	uint8_t WData[5] = {0};
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	2300      	movs	r3, #0
 80041c0:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA5; //V1 speed register
 80041c2:	23a5      	movs	r3, #165	@ 0xa5
 80041c4:	723b      	strb	r3, [r7, #8]
	WData[1] = (V1 & 0xFF000000) >> 24;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	0e1b      	lsrs	r3, r3, #24
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	727b      	strb	r3, [r7, #9]
	WData[2] = (V1 & 0x00FF0000) >> 16;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	141b      	asrs	r3, r3, #16
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	72bb      	strb	r3, [r7, #10]
	WData[3] = (V1 & 0x0000FF00) >> 8;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	121b      	asrs	r3, r3, #8
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	72fb      	strb	r3, [r7, #11]
	WData[4] = (V1 & 0x000000FF);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80041e4:	f107 0308 	add.w	r3, r7, #8
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f825 	bl	8004238 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 80041ee:	23a7      	movs	r3, #167	@ 0xa7
 80041f0:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel_to_go & 0xFF000000) >> 24;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	0e1b      	lsrs	r3, r3, #24
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel_to_go & 0x00FF0000) >> 16;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	141b      	asrs	r3, r3, #16
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel_to_go & 0x0000FF00) >> 8;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	121b      	asrs	r3, r3, #8
 8004206:	b2db      	uxtb	r3, r3
 8004208:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel_to_go & 0x000000FF);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f80f 	bl	8004238 <tmc5160_write>

}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	f3af 8000 	nop.w
 8004228:	77ffebde 	.word	0x77ffebde
 800422c:	3ff65e9f 	.word	0x3ff65e9f
 8004230:	9999999a 	.word	0x9999999a
 8004234:	3fb99999 	.word	0x3fb99999

08004238 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8004240:	2200      	movs	r2, #0
 8004242:	2110      	movs	r1, #16
 8004244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004248:	f001 fb0a 	bl	8005860 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 800424c:	f04f 33ff 	mov.w	r3, #4294967295
 8004250:	2205      	movs	r2, #5
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4806      	ldr	r0, [pc, #24]	@ (8004270 <tmc5160_write+0x38>)
 8004256:	f003 feb2 	bl	8007fbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 800425a:	2201      	movs	r2, #1
 800425c:	2110      	movs	r1, #16
 800425e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004262:	f001 fafd 	bl	8005860 <HAL_GPIO_WritePin>
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000454 	.word	0x20000454

08004274 <tmc5160_read>:


void tmc5160_read(uint8_t* WData, uint8_t* RData)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af02      	add	r7, sp, #8
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 800427e:	2200      	movs	r2, #0
 8004280:	2110      	movs	r1, #16
 8004282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004286:	f001 faeb 	bl	8005860 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 800428a:	f04f 33ff 	mov.w	r3, #4294967295
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2305      	movs	r3, #5
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4812      	ldr	r0, [pc, #72]	@ (80042e0 <tmc5160_read+0x6c>)
 8004298:	f004 f806 	bl	80082a8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800429c:	2201      	movs	r2, #1
 800429e:	2110      	movs	r1, #16
 80042a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042a4:	f001 fadc 	bl	8005860 <HAL_GPIO_WritePin>
	nop();
 80042a8:	bf00      	nop
	nop();
 80042aa:	bf00      	nop
	nop();
 80042ac:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 80042ae:	2200      	movs	r2, #0
 80042b0:	2110      	movs	r1, #16
 80042b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042b6:	f001 fad3 	bl	8005860 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&_STEPPER_MOTOR_DRIVER_SPI, WData, RData, 5, HAL_MAX_DELAY);
 80042ba:	f04f 33ff 	mov.w	r3, #4294967295
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	2305      	movs	r3, #5
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4806      	ldr	r0, [pc, #24]	@ (80042e0 <tmc5160_read+0x6c>)
 80042c8:	f003 ffee 	bl	80082a8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 80042cc:	2201      	movs	r2, #1
 80042ce:	2110      	movs	r1, #16
 80042d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042d4:	f001 fac4 	bl	8005860 <HAL_GPIO_WritePin>
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000454 	.word	0x20000454

080042e4 <tmc5160_position_read>:


int32_t tmc5160_position_read()
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	2300      	movs	r3, #0
 80042f0:	743b      	strb	r3, [r7, #16]
	uint8_t RData[5] = {0};
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	2300      	movs	r3, #0
 80042f8:	723b      	strb	r3, [r7, #8]
	WData[0] = 0x21; //XACTUAL register address
 80042fa:	2321      	movs	r3, #33	@ 0x21
 80042fc:	733b      	strb	r3, [r7, #12]
	tmc5160_read(WData, RData);
 80042fe:	1d3a      	adds	r2, r7, #4
 8004300:	f107 030c 	add.w	r3, r7, #12
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff ffb4 	bl	8004274 <tmc5160_read>

	int32_t response = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]

    response |= (RData[1]);
 8004310:	797b      	ldrb	r3, [r7, #5]
 8004312:	461a      	mov	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	617b      	str	r3, [r7, #20]
    response |= (RData[2]);
 8004320:	79bb      	ldrb	r3, [r7, #6]
 8004322:	461a      	mov	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	617b      	str	r3, [r7, #20]
    response |= (RData[3]);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	461a      	mov	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	617b      	str	r3, [r7, #20]
    response |= (RData[4]);
 8004340:	7a3b      	ldrb	r3, [r7, #8]
 8004342:	461a      	mov	r2, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

	return response;
 800434a:	697b      	ldr	r3, [r7, #20]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	0000      	movs	r0, r0
	...

08004358 <tmc5160_velocity_read>:

int32_t tmc5160_velocity_read()
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
	uint8_t WData[5] = {0};
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	2300      	movs	r3, #0
 8004364:	733b      	strb	r3, [r7, #12]
	uint8_t RData[5] = {0};
 8004366:	2300      	movs	r3, #0
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	2300      	movs	r3, #0
 800436c:	713b      	strb	r3, [r7, #4]
	WData[0] = 0x22; //VACTUAL register address
 800436e:	2322      	movs	r3, #34	@ 0x22
 8004370:	723b      	strb	r3, [r7, #8]
	tmc5160_read(WData, RData);
 8004372:	463a      	mov	r2, r7
 8004374:	f107 0308 	add.w	r3, r7, #8
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff7a 	bl	8004274 <tmc5160_read>

	int32_t response = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]

    response |= (RData[1] & 0xFF);
 8004384:	787b      	ldrb	r3, [r7, #1]
 8004386:	461a      	mov	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	617b      	str	r3, [r7, #20]
    response |= (RData[2] & 0xFF);
 8004394:	78bb      	ldrb	r3, [r7, #2]
 8004396:	461a      	mov	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    response <<= 8;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	617b      	str	r3, [r7, #20]
    response |= (RData[3] & 0xFF);
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	461a      	mov	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
    response <<= 8;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	617b      	str	r3, [r7, #20]
    response |= (RData[4] & 0xFF);
 80043b4:	793b      	ldrb	r3, [r7, #4]
 80043b6:	461a      	mov	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

    int32_t rv = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
    rv = sign_extend_bits_to_32(response, 24);
 80043c2:	2118      	movs	r1, #24
 80043c4:	6978      	ldr	r0, [r7, #20]
 80043c6:	f000 fa1b 	bl	8004800 <sign_extend_bits_to_32>
 80043ca:	6138      	str	r0, [r7, #16]

	return (int32_t)(rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 80043cc:	6938      	ldr	r0, [r7, #16]
 80043ce:	f7fc f8d1 	bl	8000574 <__aeabi_i2d>
 80043d2:	a309      	add	r3, pc, #36	@ (adr r3, 80043f8 <tmc5160_velocity_read+0xa0>)
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f7fc fa60 	bl	800089c <__aeabi_ddiv>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4610      	mov	r0, r2
 80043e2:	4619      	mov	r1, r3
 80043e4:	f7fc fbe0 	bl	8000ba8 <__aeabi_d2iz>
 80043e8:	4603      	mov	r3, r0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	f3af 8000 	nop.w
 80043f8:	77ffebde 	.word	0x77ffebde
 80043fc:	3ff65e9f 	.word	0x3ff65e9f

08004400 <tmc5160_init>:

void tmc5160_init(motor_config * mc)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 8004408:	2200      	movs	r2, #0
 800440a:	2120      	movs	r1, #32
 800440c:	488b      	ldr	r0, [pc, #556]	@ (800463c <tmc5160_init+0x23c>)
 800440e:	f001 fa27 	bl	8005860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 8004412:	2201      	movs	r2, #1
 8004414:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004418:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800441c:	f001 fa20 	bl	8005860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 8004420:	2200      	movs	r2, #0
 8004422:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004426:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800442a:	f001 fa19 	bl	8005860 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 800442e:	2201      	movs	r2, #1
 8004430:	2110      	movs	r1, #16
 8004432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004436:	f001 fa13 	bl	8005860 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 800443a:	2200      	movs	r2, #0
 800443c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004444:	f001 fa0c 	bl	8005860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 8004448:	2200      	movs	r2, #0
 800444a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800444e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004452:	f001 fa05 	bl	8005860 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004456:	2064      	movs	r0, #100	@ 0x64
 8004458:	f000 fb00 	bl	8004a5c <HAL_Delay>

	uint8_t WData[5] = {0};
 800445c:	2300      	movs	r3, #0
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	2300      	movs	r3, #0
 8004462:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 8004464:	23ec      	movs	r3, #236	@ 0xec
 8004466:	723b      	strb	r3, [r7, #8]
 8004468:	2300      	movs	r3, #0
 800446a:	727b      	strb	r3, [r7, #9]
 800446c:	2300      	movs	r3, #0
 800446e:	72bb      	strb	r3, [r7, #10]
 8004470:	2300      	movs	r3, #0
 8004472:	72fb      	strb	r3, [r7, #11]
 8004474:	23c3      	movs	r3, #195	@ 0xc3
 8004476:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8004478:	f107 0308 	add.w	r3, r7, #8
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fedb 	bl	8004238 <tmc5160_write>

	WData[0] = 0x8B; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = mc->max_irun_scaler; //GLOBAL CURRENT SCALER
 8004482:	238b      	movs	r3, #139	@ 0x8b
 8004484:	723b      	strb	r3, [r7, #8]
 8004486:	2300      	movs	r3, #0
 8004488:	727b      	strb	r3, [r7, #9]
 800448a:	2300      	movs	r3, #0
 800448c:	72bb      	strb	r3, [r7, #10]
 800448e:	2300      	movs	r3, #0
 8004490:	72fb      	strb	r3, [r7, #11]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fec9 	bl	8004238 <tmc5160_write>

	//int init_ihold = mc->init_irun * 0.7; //to elaborate
	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = mc->init_irun; WData[4] = mc->init_irun; //  IHOLDDELAY=0,  IRUN=10/31,  IHOLD=02/31
 80044a6:	2390      	movs	r3, #144	@ 0x90
 80044a8:	723b      	strb	r3, [r7, #8]
 80044aa:	2300      	movs	r3, #0
 80044ac:	727b      	strb	r3, [r7, #9]
 80044ae:	2300      	movs	r3, #0
 80044b0:	72bb      	strb	r3, [r7, #10]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	72fb      	strb	r3, [r7, #11]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80044c6:	f107 0308 	add.w	r3, r7, #8
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff feb4 	bl	8004238 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 80044d0:	2391      	movs	r3, #145	@ 0x91
 80044d2:	723b      	strb	r3, [r7, #8]
 80044d4:	2300      	movs	r3, #0
 80044d6:	727b      	strb	r3, [r7, #9]
 80044d8:	2300      	movs	r3, #0
 80044da:	72bb      	strb	r3, [r7, #10]
 80044dc:	2300      	movs	r3, #0
 80044de:	72fb      	strb	r3, [r7, #11]
 80044e0:	230a      	movs	r3, #10
 80044e2:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fea5 	bl	8004238 <tmc5160_write>

	//0xC40C001E default for 0x70 reg
	WData[0] = 0xF0; WData[1] = 0xC4; WData[2] = 0x0D; WData[3] = 0x00; WData[4] = 0x1E; // PWM_CONF PWM_FREQ 35kHz TODO
 80044ee:	23f0      	movs	r3, #240	@ 0xf0
 80044f0:	723b      	strb	r3, [r7, #8]
 80044f2:	23c4      	movs	r3, #196	@ 0xc4
 80044f4:	727b      	strb	r3, [r7, #9]
 80044f6:	230d      	movs	r3, #13
 80044f8:	72bb      	strb	r3, [r7, #10]
 80044fa:	2300      	movs	r3, #0
 80044fc:	72fb      	strb	r3, [r7, #11]
 80044fe:	231e      	movs	r3, #30
 8004500:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8004502:	f107 0308 	add.w	r3, r7, #8
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fe96 	bl	8004238 <tmc5160_write>

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	723b      	strb	r3, [r7, #8]
 8004510:	2300      	movs	r3, #0
 8004512:	727b      	strb	r3, [r7, #9]
 8004514:	2300      	movs	r3, #0
 8004516:	72bb      	strb	r3, [r7, #10]
 8004518:	2300      	movs	r3, #0
 800451a:	72fb      	strb	r3, [r7, #11]
 800451c:	2304      	movs	r3, #4
 800451e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fe87 	bl	8004238 <tmc5160_write>

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 800452a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800452e:	f7ff fe1b 	bl	8004168 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 8004532:	2393      	movs	r3, #147	@ 0x93
 8004534:	723b      	strb	r3, [r7, #8]
 8004536:	2300      	movs	r3, #0
 8004538:	727b      	strb	r3, [r7, #9]
 800453a:	2300      	movs	r3, #0
 800453c:	72bb      	strb	r3, [r7, #10]
 800453e:	2300      	movs	r3, #0
 8004540:	72fb      	strb	r3, [r7, #11]
 8004542:	23c8      	movs	r3, #200	@ 0xc8
 8004544:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8004546:	f107 0308 	add.w	r3, r7, #8
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fe74 	bl	8004238 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 8004550:	23a0      	movs	r3, #160	@ 0xa0
 8004552:	723b      	strb	r3, [r7, #8]
 8004554:	2300      	movs	r3, #0
 8004556:	727b      	strb	r3, [r7, #9]
 8004558:	2300      	movs	r3, #0
 800455a:	72bb      	strb	r3, [r7, #10]
 800455c:	2300      	movs	r3, #0
 800455e:	72fb      	strb	r3, [r7, #11]
 8004560:	2300      	movs	r3, #0
 8004562:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8004564:	f107 0308 	add.w	r3, r7, #8
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fe65 	bl	8004238 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 800456e:	23a3      	movs	r3, #163	@ 0xa3
 8004570:	723b      	strb	r3, [r7, #8]
 8004572:	2300      	movs	r3, #0
 8004574:	727b      	strb	r3, [r7, #9]
 8004576:	2300      	movs	r3, #0
 8004578:	72bb      	strb	r3, [r7, #10]
 800457a:	2300      	movs	r3, #0
 800457c:	72fb      	strb	r3, [r7, #11]
 800457e:	230a      	movs	r3, #10
 8004580:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8004582:	f107 0308 	add.w	r3, r7, #8
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fe56 	bl	8004238 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0F; WData[4] = 0xFF; // A1 = 10 000 First acceleration
 800458c:	23a4      	movs	r3, #164	@ 0xa4
 800458e:	723b      	strb	r3, [r7, #8]
 8004590:	2300      	movs	r3, #0
 8004592:	727b      	strb	r3, [r7, #9]
 8004594:	2303      	movs	r3, #3
 8004596:	72bb      	strb	r3, [r7, #10]
 8004598:	230f      	movs	r3, #15
 800459a:	72fb      	strb	r3, [r7, #11]
 800459c:	23ff      	movs	r3, #255	@ 0xff
 800459e:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80045a0:	f107 0308 	add.w	r3, r7, #8
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fe47 	bl	8004238 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0F; WData[4] = 0xFF; // AMAX = 5 000 Acceleration above V1
 80045aa:	23a6      	movs	r3, #166	@ 0xa6
 80045ac:	723b      	strb	r3, [r7, #8]
 80045ae:	2300      	movs	r3, #0
 80045b0:	727b      	strb	r3, [r7, #9]
 80045b2:	2300      	movs	r3, #0
 80045b4:	72bb      	strb	r3, [r7, #10]
 80045b6:	230f      	movs	r3, #15
 80045b8:	72fb      	strb	r3, [r7, #11]
 80045ba:	23ff      	movs	r3, #255	@ 0xff
 80045bc:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fe38 	bl	8004238 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0F; WData[4] = 0xFF; // DMAX = 5 000 Deceleration above V1
 80045c8:	23a8      	movs	r3, #168	@ 0xa8
 80045ca:	723b      	strb	r3, [r7, #8]
 80045cc:	2300      	movs	r3, #0
 80045ce:	727b      	strb	r3, [r7, #9]
 80045d0:	2300      	movs	r3, #0
 80045d2:	72bb      	strb	r3, [r7, #10]
 80045d4:	230f      	movs	r3, #15
 80045d6:	72fb      	strb	r3, [r7, #11]
 80045d8:	23ff      	movs	r3, #255	@ 0xff
 80045da:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80045dc:	f107 0308 	add.w	r3, r7, #8
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fe29 	bl	8004238 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0F; WData[4] = 0xFF; // D1 = 10 000 Deceleration below V1
 80045e6:	23aa      	movs	r3, #170	@ 0xaa
 80045e8:	723b      	strb	r3, [r7, #8]
 80045ea:	2300      	movs	r3, #0
 80045ec:	727b      	strb	r3, [r7, #9]
 80045ee:	2303      	movs	r3, #3
 80045f0:	72bb      	strb	r3, [r7, #10]
 80045f2:	230f      	movs	r3, #15
 80045f4:	72fb      	strb	r3, [r7, #11]
 80045f6:	23ff      	movs	r3, #255	@ 0xff
 80045f8:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80045fa:	f107 0308 	add.w	r3, r7, #8
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fe1a 	bl	8004238 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
 8004604:	23ab      	movs	r3, #171	@ 0xab
 8004606:	723b      	strb	r3, [r7, #8]
 8004608:	2300      	movs	r3, #0
 800460a:	727b      	strb	r3, [r7, #9]
 800460c:	2300      	movs	r3, #0
 800460e:	72bb      	strb	r3, [r7, #10]
 8004610:	2300      	movs	r3, #0
 8004612:	72fb      	strb	r3, [r7, #11]
 8004614:	230f      	movs	r3, #15
 8004616:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8004618:	f107 0308 	add.w	r3, r7, #8
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fe0b 	bl	8004238 <tmc5160_write>

	tmc5160_set_motor_direction(mc->direction);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f809 	bl	8004640 <tmc5160_set_motor_direction>

	HAL_Delay(100);
 800462e:	2064      	movs	r0, #100	@ 0x64
 8004630:	f000 fa14 	bl	8004a5c <HAL_Delay>
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	48000800 	.word	0x48000800

08004640 <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
	if(dir <= 0)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	2b00      	cmp	r3, #0
 8004650:	dc13      	bgt.n	800467a <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	2300      	movs	r3, #0
 8004658:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 800465a:	2380      	movs	r3, #128	@ 0x80
 800465c:	743b      	strb	r3, [r7, #16]
 800465e:	2300      	movs	r3, #0
 8004660:	747b      	strb	r3, [r7, #17]
 8004662:	2300      	movs	r3, #0
 8004664:	74bb      	strb	r3, [r7, #18]
 8004666:	2300      	movs	r3, #0
 8004668:	74fb      	strb	r3, [r7, #19]
 800466a:	2314      	movs	r3, #20
 800466c:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 800466e:	f107 0310 	add.w	r3, r7, #16
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fde0 	bl	8004238 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 8004678:	e012      	b.n	80046a0 <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	2300      	movs	r3, #0
 8004680:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8004682:	2380      	movs	r3, #128	@ 0x80
 8004684:	723b      	strb	r3, [r7, #8]
 8004686:	2300      	movs	r3, #0
 8004688:	727b      	strb	r3, [r7, #9]
 800468a:	2300      	movs	r3, #0
 800468c:	72bb      	strb	r3, [r7, #10]
 800468e:	2300      	movs	r3, #0
 8004690:	72fb      	strb	r3, [r7, #11]
 8004692:	2304      	movs	r3, #4
 8004694:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 8004696:	f107 0308 	add.w	r3, r7, #8
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fdcc 	bl	8004238 <tmc5160_write>
}
 80046a0:	bf00      	nop
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046ac:	4b22      	ldr	r3, [pc, #136]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046ae:	4a23      	ldr	r2, [pc, #140]	@ (800473c <MX_USART2_UART_Init+0x94>)
 80046b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046b2:	4b21      	ldr	r3, [pc, #132]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80046b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046ce:	220c      	movs	r2, #12
 80046d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046d2:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046d8:	4b17      	ldr	r3, [pc, #92]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046de:	4b16      	ldr	r3, [pc, #88]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046e4:	4b14      	ldr	r3, [pc, #80]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046ea:	4b13      	ldr	r3, [pc, #76]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046f0:	4811      	ldr	r0, [pc, #68]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 80046f2:	f004 fef1 	bl	80094d8 <HAL_UART_Init>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80046fc:	f7ff f8f5 	bl	80038ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004700:	2100      	movs	r1, #0
 8004702:	480d      	ldr	r0, [pc, #52]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 8004704:	f006 f82f 	bl	800a766 <HAL_UARTEx_SetTxFifoThreshold>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800470e:	f7ff f8ec 	bl	80038ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004712:	2100      	movs	r1, #0
 8004714:	4808      	ldr	r0, [pc, #32]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 8004716:	f006 f864 	bl	800a7e2 <HAL_UARTEx_SetRxFifoThreshold>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004720:	f7ff f8e3 	bl	80038ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004724:	4804      	ldr	r0, [pc, #16]	@ (8004738 <MX_USART2_UART_Init+0x90>)
 8004726:	f005 ffe5 	bl	800a6f4 <HAL_UARTEx_DisableFifoMode>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004730:	f7ff f8db 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004734:	bf00      	nop
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000604 	.word	0x20000604
 800473c:	40004400 	.word	0x40004400

08004740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b09e      	sub	sp, #120	@ 0x78
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004748:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	609a      	str	r2, [r3, #8]
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004758:	f107 0310 	add.w	r3, r7, #16
 800475c:	2254      	movs	r2, #84	@ 0x54
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f008 fb0a 	bl	800cd7a <memset>
  if(uartHandle->Instance==USART2)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a23      	ldr	r2, [pc, #140]	@ (80047f8 <HAL_UART_MspInit+0xb8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d13e      	bne.n	80047ee <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004770:	2302      	movs	r3, #2
 8004772:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004774:	2300      	movs	r3, #0
 8004776:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	4618      	mov	r0, r3
 800477e:	f003 f925 	bl	80079cc <HAL_RCCEx_PeriphCLKConfig>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004788:	f7ff f8af 	bl	80038ea <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800478c:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <HAL_UART_MspInit+0xbc>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004790:	4a1a      	ldr	r2, [pc, #104]	@ (80047fc <HAL_UART_MspInit+0xbc>)
 8004792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004796:	6593      	str	r3, [r2, #88]	@ 0x58
 8004798:	4b18      	ldr	r3, [pc, #96]	@ (80047fc <HAL_UART_MspInit+0xbc>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a4:	4b15      	ldr	r3, [pc, #84]	@ (80047fc <HAL_UART_MspInit+0xbc>)
 80047a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a8:	4a14      	ldr	r2, [pc, #80]	@ (80047fc <HAL_UART_MspInit+0xbc>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047b0:	4b12      	ldr	r3, [pc, #72]	@ (80047fc <HAL_UART_MspInit+0xbc>)
 80047b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047bc:	230c      	movs	r3, #12
 80047be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c0:	2302      	movs	r3, #2
 80047c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c8:	2300      	movs	r3, #0
 80047ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047cc:	2307      	movs	r3, #7
 80047ce:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047d4:	4619      	mov	r1, r3
 80047d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047da:	f000 febf 	bl	800555c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	2026      	movs	r0, #38	@ 0x26
 80047e4:	f000 fa37 	bl	8004c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047e8:	2026      	movs	r0, #38	@ 0x26
 80047ea:	f000 fa4e 	bl	8004c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80047ee:	bf00      	nop
 80047f0:	3778      	adds	r7, #120	@ 0x78
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40004400 	.word	0x40004400
 80047fc:	40021000 	.word	0x40021000

08004800 <sign_extend_bits_to_32>:

#include "utility.h"


//TODO make sure that is works for less than 24 bit values
int32_t sign_extend_bits_to_32(int32_t x, uint8_t bits) {
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]

	uint32_t sign_mask = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
	//getting value of sign bit
	sign_mask = 1u << (bits - 1);
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	3b01      	subs	r3, #1
 8004814:	2201      	movs	r2, #1
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]
	uint32_t sign_bit = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]
	sign_bit = x & sign_mask;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
	if(sign_bit) //if value < 0 therefore sign_bit == 1, fill first 8 bits with 1
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d010      	beq.n	8004850 <sign_extend_bits_to_32+0x50>
	{
		int32_t res = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
		int32_t mask = 0b11111111;
 8004832:	23ff      	movs	r3, #255	@ 0xff
 8004834:	60bb      	str	r3, [r7, #8]
		res |= x;
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
		res |= (mask << (bits));
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
		return res;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	e000      	b.n	8004852 <sign_extend_bits_to_32+0x52>
	}
    return x; //else return value itself
 8004850:	687b      	ldr	r3, [r7, #4]
}
 8004852:	4618      	mov	r0, r3
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <steps_to_rads>:
	*value = (((*min_value < *value)? *value : *min_value) > *max_value)? *max_value: *value;
}


float steps_to_rads(int32_t steps, int32_t full_steps)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
	float rads = 0;
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
	rads = ((float)steps /(float)full_steps) * (M_PI * 2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004884:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004888:	ee16 0a90 	vmov	r0, s13
 800488c:	f7fb fe84 	bl	8000598 <__aeabi_f2d>
 8004890:	a30b      	add	r3, pc, #44	@ (adr r3, 80048c0 <steps_to_rads+0x60>)
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f7fb fed7 	bl	8000648 <__aeabi_dmul>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	f7fc f9c9 	bl	8000c38 <__aeabi_d2f>
 80048a6:	4603      	mov	r3, r0
 80048a8:	60fb      	str	r3, [r7, #12]
	return rads;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	ee07 3a90 	vmov	s15, r3
}
 80048b0:	eeb0 0a67 	vmov.f32	s0, s15
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	f3af 8000 	nop.w
 80048c0:	54442d18 	.word	0x54442d18
 80048c4:	401921fb 	.word	0x401921fb

080048c8 <simple_EMA_filter>:
	steps = (int32_t)((full_steps * rads)/(M_PI * 2));
	return steps;
}

uint16_t simple_EMA_filter(uint16_t ticks, uint16_t prev_ticks, float alpha)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	460a      	mov	r2, r1
 80048d2:	ed87 0a00 	vstr	s0, [r7]
 80048d6:	80fb      	strh	r3, [r7, #6]
 80048d8:	4613      	mov	r3, r2
 80048da:	80bb      	strh	r3, [r7, #4]
	uint16_t filtered_encoder_value_tics = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	81fb      	strh	r3, [r7, #14]
	filtered_encoder_value_tics = alpha * ticks + (1 - alpha) * prev_ticks;
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048ea:	edd7 7a00 	vldr	s15, [r7]
 80048ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048f6:	edd7 7a00 	vldr	s15, [r7]
 80048fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80048fe:	88bb      	ldrh	r3, [r7, #4]
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800490c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004914:	ee17 3a90 	vmov	r3, s15
 8004918:	81fb      	strh	r3, [r7, #14]
	return filtered_encoder_value_tics;
 800491a:	89fb      	ldrh	r3, [r7, #14]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004928:	480d      	ldr	r0, [pc, #52]	@ (8004960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800492a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800492c:	f7ff fa9c 	bl	8003e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004930:	480c      	ldr	r0, [pc, #48]	@ (8004964 <LoopForever+0x6>)
  ldr r1, =_edata
 8004932:	490d      	ldr	r1, [pc, #52]	@ (8004968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004934:	4a0d      	ldr	r2, [pc, #52]	@ (800496c <LoopForever+0xe>)
  movs r3, #0
 8004936:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004938:	e002      	b.n	8004940 <LoopCopyDataInit>

0800493a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800493a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800493c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800493e:	3304      	adds	r3, #4

08004940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004944:	d3f9      	bcc.n	800493a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004946:	4a0a      	ldr	r2, [pc, #40]	@ (8004970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004948:	4c0a      	ldr	r4, [pc, #40]	@ (8004974 <LoopForever+0x16>)
  movs r3, #0
 800494a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800494c:	e001      	b.n	8004952 <LoopFillZerobss>

0800494e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800494e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004950:	3204      	adds	r2, #4

08004952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004954:	d3fb      	bcc.n	800494e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004956:	f008 facf 	bl	800cef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800495a:	f7fe ff53 	bl	8003804 <main>

0800495e <LoopForever>:

LoopForever:
    b LoopForever
 800495e:	e7fe      	b.n	800495e <LoopForever>
  ldr   r0, =_estack
 8004960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004968:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800496c:	080115e0 	.word	0x080115e0
  ldr r2, =_sbss
 8004970:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004974:	200007ec 	.word	0x200007ec

08004978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004978:	e7fe      	b.n	8004978 <ADC1_2_IRQHandler>

0800497a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004984:	2003      	movs	r0, #3
 8004986:	f000 f95b 	bl	8004c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800498a:	200f      	movs	r0, #15
 800498c:	f000 f80e 	bl	80049ac <HAL_InitTick>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	71fb      	strb	r3, [r7, #7]
 800499a:	e001      	b.n	80049a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800499c:	f7ff f8fa 	bl	8003b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049a0:	79fb      	ldrb	r3, [r7, #7]

}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80049b8:	4b16      	ldr	r3, [pc, #88]	@ (8004a14 <HAL_InitTick+0x68>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d022      	beq.n	8004a06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80049c0:	4b15      	ldr	r3, [pc, #84]	@ (8004a18 <HAL_InitTick+0x6c>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b13      	ldr	r3, [pc, #76]	@ (8004a14 <HAL_InitTick+0x68>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80049cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f966 	bl	8004ca6 <HAL_SYSTICK_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10f      	bne.n	8004a00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b0f      	cmp	r3, #15
 80049e4:	d809      	bhi.n	80049fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049e6:	2200      	movs	r2, #0
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	f04f 30ff 	mov.w	r0, #4294967295
 80049ee:	f000 f932 	bl	8004c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049f2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a1c <HAL_InitTick+0x70>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	e007      	b.n	8004a0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
 80049fe:	e004      	b.n	8004a0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e001      	b.n	8004a0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	2000000c 	.word	0x2000000c
 8004a18:	20000004 	.word	0x20000004
 8004a1c:	20000008 	.word	0x20000008

08004a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a24:	4b05      	ldr	r3, [pc, #20]	@ (8004a3c <HAL_IncTick+0x1c>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <HAL_IncTick+0x20>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	4a03      	ldr	r2, [pc, #12]	@ (8004a3c <HAL_IncTick+0x1c>)
 8004a30:	6013      	str	r3, [r2, #0]
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	20000698 	.word	0x20000698
 8004a40:	2000000c 	.word	0x2000000c

08004a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return uwTick;
 8004a48:	4b03      	ldr	r3, [pc, #12]	@ (8004a58 <HAL_GetTick+0x14>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000698 	.word	0x20000698

08004a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a64:	f7ff ffee 	bl	8004a44 <HAL_GetTick>
 8004a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d004      	beq.n	8004a80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a76:	4b09      	ldr	r3, [pc, #36]	@ (8004a9c <HAL_Delay+0x40>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a80:	bf00      	nop
 8004a82:	f7ff ffdf 	bl	8004a44 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d8f7      	bhi.n	8004a82 <HAL_Delay+0x26>
  {
  }
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	2000000c 	.word	0x2000000c

08004aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004abc:	4013      	ands	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ad2:	4a04      	ldr	r2, [pc, #16]	@ (8004ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	60d3      	str	r3, [r2, #12]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aec:	4b04      	ldr	r3, [pc, #16]	@ (8004b00 <__NVIC_GetPriorityGrouping+0x18>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	f003 0307 	and.w	r3, r3, #7
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	e000ed00 	.word	0xe000ed00

08004b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	db0b      	blt.n	8004b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	f003 021f 	and.w	r2, r3, #31
 8004b1c:	4907      	ldr	r1, [pc, #28]	@ (8004b3c <__NVIC_EnableIRQ+0x38>)
 8004b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	2001      	movs	r0, #1
 8004b26:	fa00 f202 	lsl.w	r2, r0, r2
 8004b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000e100 	.word	0xe000e100

08004b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	6039      	str	r1, [r7, #0]
 8004b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	db0a      	blt.n	8004b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	490c      	ldr	r1, [pc, #48]	@ (8004b8c <__NVIC_SetPriority+0x4c>)
 8004b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5e:	0112      	lsls	r2, r2, #4
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	440b      	add	r3, r1
 8004b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b68:	e00a      	b.n	8004b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4908      	ldr	r1, [pc, #32]	@ (8004b90 <__NVIC_SetPriority+0x50>)
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	3b04      	subs	r3, #4
 8004b78:	0112      	lsls	r2, r2, #4
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	761a      	strb	r2, [r3, #24]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	e000e100 	.word	0xe000e100
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	@ 0x24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f1c3 0307 	rsb	r3, r3, #7
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	bf28      	it	cs
 8004bb2:	2304      	movcs	r3, #4
 8004bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	2b06      	cmp	r3, #6
 8004bbc:	d902      	bls.n	8004bc4 <NVIC_EncodePriority+0x30>
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	3b03      	subs	r3, #3
 8004bc2:	e000      	b.n	8004bc6 <NVIC_EncodePriority+0x32>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	fa01 f303 	lsl.w	r3, r1, r3
 8004be6:	43d9      	mvns	r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bec:	4313      	orrs	r3, r2
         );
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3724      	adds	r7, #36	@ 0x24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c0c:	d301      	bcc.n	8004c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e00f      	b.n	8004c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c12:	4a0a      	ldr	r2, [pc, #40]	@ (8004c3c <SysTick_Config+0x40>)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c1a:	210f      	movs	r1, #15
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	f7ff ff8e 	bl	8004b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <SysTick_Config+0x40>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c2a:	4b04      	ldr	r3, [pc, #16]	@ (8004c3c <SysTick_Config+0x40>)
 8004c2c:	2207      	movs	r2, #7
 8004c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	e000e010 	.word	0xe000e010

08004c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff29 	bl	8004aa0 <__NVIC_SetPriorityGrouping>
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b086      	sub	sp, #24
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c64:	f7ff ff40 	bl	8004ae8 <__NVIC_GetPriorityGrouping>
 8004c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f7ff ff90 	bl	8004b94 <NVIC_EncodePriority>
 8004c74:	4602      	mov	r2, r0
 8004c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ff5f 	bl	8004b40 <__NVIC_SetPriority>
}
 8004c82:	bf00      	nop
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	4603      	mov	r3, r0
 8004c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff33 	bl	8004b04 <__NVIC_EnableIRQ>
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff ffa4 	bl	8004bfc <SysTick_Config>
 8004cb4:	4603      	mov	r3, r0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e08d      	b.n	8004dee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4b47      	ldr	r3, [pc, #284]	@ (8004df8 <HAL_DMA_Init+0x138>)
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d80f      	bhi.n	8004cfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4b45      	ldr	r3, [pc, #276]	@ (8004dfc <HAL_DMA_Init+0x13c>)
 8004ce6:	4413      	add	r3, r2
 8004ce8:	4a45      	ldr	r2, [pc, #276]	@ (8004e00 <HAL_DMA_Init+0x140>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	009a      	lsls	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a42      	ldr	r2, [pc, #264]	@ (8004e04 <HAL_DMA_Init+0x144>)
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cfc:	e00e      	b.n	8004d1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	4b40      	ldr	r3, [pc, #256]	@ (8004e08 <HAL_DMA_Init+0x148>)
 8004d06:	4413      	add	r3, r2
 8004d08:	4a3d      	ldr	r2, [pc, #244]	@ (8004e00 <HAL_DMA_Init+0x140>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	009a      	lsls	r2, r3, #2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a3c      	ldr	r2, [pc, #240]	@ (8004e0c <HAL_DMA_Init+0x14c>)
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f9cc 	bl	800510c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d7c:	d102      	bne.n	8004d84 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d98:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d010      	beq.n	8004dc4 <HAL_DMA_Init+0x104>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d80c      	bhi.n	8004dc4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f9ec 	bl	8005188 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	e008      	b.n	8004dd6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40020407 	.word	0x40020407
 8004dfc:	bffdfff8 	.word	0xbffdfff8
 8004e00:	cccccccd 	.word	0xcccccccd
 8004e04:	40020000 	.word	0x40020000
 8004e08:	bffdfbf8 	.word	0xbffdfbf8
 8004e0c:	40020400 	.word	0x40020400

08004e10 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d005      	beq.n	8004e34 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
 8004e32:	e037      	b.n	8004ea4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 020e 	bic.w	r2, r2, #14
 8004e42:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e52:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e68:	f003 021f 	and.w	r2, r3, #31
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e70:	2101      	movs	r1, #1
 8004e72:	fa01 f202 	lsl.w	r2, r1, r2
 8004e76:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e80:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e98:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ea2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2204      	movs	r2, #4
 8004ede:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e047      	b.n	8004f86 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 020e 	bic.w	r2, r2, #14
 8004f04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2a:	f003 021f 	and.w	r2, r3, #31
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	2101      	movs	r1, #1
 8004f34:	fa01 f202 	lsl.w	r2, r1, r2
 8004f38:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f42:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f64:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	4798      	blx	r3
    }
  }
  return status;
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d026      	beq.n	800500a <HAL_DMA_IRQHandler+0x7a>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d021      	beq.n	800500a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0204 	bic.w	r2, r2, #4
 8004fe2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe8:	f003 021f 	and.w	r2, r3, #31
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	2104      	movs	r1, #4
 8004ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d071      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005008:	e06c      	b.n	80050e4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2202      	movs	r2, #2
 8005014:	409a      	lsls	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d02e      	beq.n	800507c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d029      	beq.n	800507c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 020a 	bic.w	r2, r2, #10
 8005044:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f003 021f 	and.w	r2, r3, #31
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	2102      	movs	r1, #2
 800505c:	fa01 f202 	lsl.w	r2, r1, r2
 8005060:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d038      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800507a:	e033      	b.n	80050e4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	2208      	movs	r2, #8
 8005086:	409a      	lsls	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02a      	beq.n	80050e6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d025      	beq.n	80050e6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 020e 	bic.w	r2, r2, #14
 80050a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ae:	f003 021f 	and.w	r2, r3, #31
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	2101      	movs	r1, #1
 80050b8:	fa01 f202 	lsl.w	r2, r1, r2
 80050bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
}
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050fc:	b2db      	uxtb	r3, r3
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	4b16      	ldr	r3, [pc, #88]	@ (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800511c:	429a      	cmp	r2, r3
 800511e:	d802      	bhi.n	8005126 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005120:	4b15      	ldr	r3, [pc, #84]	@ (8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e001      	b.n	800512a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005126:	4b15      	ldr	r3, [pc, #84]	@ (800517c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005128:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	3b08      	subs	r3, #8
 8005136:	4a12      	ldr	r2, [pc, #72]	@ (8005180 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005144:	089b      	lsrs	r3, r3, #2
 8005146:	009a      	lsls	r2, r3, #2
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	461a      	mov	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a0b      	ldr	r2, [pc, #44]	@ (8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005156:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2201      	movs	r2, #1
 8005160:	409a      	lsls	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40020407 	.word	0x40020407
 8005178:	40020800 	.word	0x40020800
 800517c:	40020820 	.word	0x40020820
 8005180:	cccccccd 	.word	0xcccccccd
 8005184:	40020880 	.word	0x40020880

08005188 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4b0b      	ldr	r3, [pc, #44]	@ (80051c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	461a      	mov	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a08      	ldr	r2, [pc, #32]	@ (80051cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80051aa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2201      	movs	r2, #1
 80051b6:	409a      	lsls	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	1000823f 	.word	0x1000823f
 80051cc:	40020940 	.word	0x40020940

080051d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e147      	b.n	8005472 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fe f852 	bl	80032a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0210 	bic.w	r2, r2, #16
 800520a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800520c:	f7ff fc1a 	bl	8004a44 <HAL_GetTick>
 8005210:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005212:	e012      	b.n	800523a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005214:	f7ff fc16 	bl	8004a44 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b0a      	cmp	r3, #10
 8005220:	d90b      	bls.n	800523a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005226:	f043 0201 	orr.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2203      	movs	r2, #3
 8005232:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e11b      	b.n	8005472 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b08      	cmp	r3, #8
 8005246:	d0e5      	beq.n	8005214 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005258:	f7ff fbf4 	bl	8004a44 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800525e:	e012      	b.n	8005286 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005260:	f7ff fbf0 	bl	8004a44 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b0a      	cmp	r3, #10
 800526c:	d90b      	bls.n	8005286 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005272:	f043 0201 	orr.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2203      	movs	r2, #3
 800527e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e0f5      	b.n	8005472 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0e5      	beq.n	8005260 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0202 	orr.w	r2, r2, #2
 80052a2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a74      	ldr	r2, [pc, #464]	@ (800547c <HAL_FDCAN_Init+0x2ac>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d103      	bne.n	80052b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80052ae:	4a74      	ldr	r2, [pc, #464]	@ (8005480 <HAL_FDCAN_Init+0x2b0>)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	7c1b      	ldrb	r3, [r3, #16]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d108      	bne.n	80052d0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052cc:	619a      	str	r2, [r3, #24]
 80052ce:	e007      	b.n	80052e0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052de:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	7c5b      	ldrb	r3, [r3, #17]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d108      	bne.n	80052fa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052f6:	619a      	str	r2, [r3, #24]
 80052f8:	e007      	b.n	800530a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699a      	ldr	r2, [r3, #24]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005308:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	7c9b      	ldrb	r3, [r3, #18]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d108      	bne.n	8005324 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005320:	619a      	str	r2, [r3, #24]
 8005322:	e007      	b.n	8005334 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005332:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005358:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0210 	bic.w	r2, r2, #16
 8005368:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d108      	bne.n	8005384 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0204 	orr.w	r2, r2, #4
 8005380:	619a      	str	r2, [r3, #24]
 8005382:	e02c      	b.n	80053de <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d028      	beq.n	80053de <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d01c      	beq.n	80053ce <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053a2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0210 	orr.w	r2, r2, #16
 80053b2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d110      	bne.n	80053de <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0220 	orr.w	r2, r2, #32
 80053ca:	619a      	str	r2, [r3, #24]
 80053cc:	e007      	b.n	80053de <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0220 	orr.w	r2, r2, #32
 80053dc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053ee:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80053f6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	3b01      	subs	r3, #1
 8005400:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005406:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005408:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005412:	d115      	bne.n	8005440 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	3b01      	subs	r3, #1
 8005420:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005422:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005428:	3b01      	subs	r3, #1
 800542a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800542c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	3b01      	subs	r3, #1
 8005436:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800543c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800543e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f814 	bl	8005484 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40006400 	.word	0x40006400
 8005480:	40006500 	.word	0x40006500

08005484 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800548c:	4b30      	ldr	r3, [pc, #192]	@ (8005550 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800548e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2f      	ldr	r2, [pc, #188]	@ (8005554 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d103      	bne.n	80054a2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80054a0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005558 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d103      	bne.n	80054b4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80054b2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ca:	041a      	lsls	r2, r3, #16
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	061a      	lsls	r2, r3, #24
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	e005      	b.n	8005536 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3304      	adds	r3, #4
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	429a      	cmp	r2, r3
 8005540:	d3f3      	bcc.n	800552a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	4000a400 	.word	0x4000a400
 8005554:	40006800 	.word	0x40006800
 8005558:	40006c00 	.word	0x40006c00

0800555c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800556a:	e15a      	b.n	8005822 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	2101      	movs	r1, #1
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	fa01 f303 	lsl.w	r3, r1, r3
 8005578:	4013      	ands	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 814c 	beq.w	800581c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d005      	beq.n	800559c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005598:	2b02      	cmp	r3, #2
 800559a:	d130      	bne.n	80055fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	2203      	movs	r2, #3
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	43db      	mvns	r3, r3
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055d2:	2201      	movs	r2, #1
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	f003 0201 	and.w	r2, r3, #1
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b03      	cmp	r3, #3
 8005608:	d017      	beq.n	800563a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	2203      	movs	r2, #3
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43db      	mvns	r3, r3
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4013      	ands	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d123      	bne.n	800568e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	08da      	lsrs	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3208      	adds	r2, #8
 800564e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	220f      	movs	r2, #15
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	08da      	lsrs	r2, r3, #3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3208      	adds	r2, #8
 8005688:	6939      	ldr	r1, [r7, #16]
 800568a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	2203      	movs	r2, #3
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	43db      	mvns	r3, r3
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4013      	ands	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f003 0203 	and.w	r2, r3, #3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80a6 	beq.w	800581c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005840 <HAL_GPIO_Init+0x2e4>)
 80056d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d4:	4a5a      	ldr	r2, [pc, #360]	@ (8005840 <HAL_GPIO_Init+0x2e4>)
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	6613      	str	r3, [r2, #96]	@ 0x60
 80056dc:	4b58      	ldr	r3, [pc, #352]	@ (8005840 <HAL_GPIO_Init+0x2e4>)
 80056de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056e8:	4a56      	ldr	r2, [pc, #344]	@ (8005844 <HAL_GPIO_Init+0x2e8>)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	089b      	lsrs	r3, r3, #2
 80056ee:	3302      	adds	r3, #2
 80056f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	220f      	movs	r2, #15
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4013      	ands	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005712:	d01f      	beq.n	8005754 <HAL_GPIO_Init+0x1f8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a4c      	ldr	r2, [pc, #304]	@ (8005848 <HAL_GPIO_Init+0x2ec>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d019      	beq.n	8005750 <HAL_GPIO_Init+0x1f4>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a4b      	ldr	r2, [pc, #300]	@ (800584c <HAL_GPIO_Init+0x2f0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <HAL_GPIO_Init+0x1f0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a4a      	ldr	r2, [pc, #296]	@ (8005850 <HAL_GPIO_Init+0x2f4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00d      	beq.n	8005748 <HAL_GPIO_Init+0x1ec>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a49      	ldr	r2, [pc, #292]	@ (8005854 <HAL_GPIO_Init+0x2f8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <HAL_GPIO_Init+0x1e8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a48      	ldr	r2, [pc, #288]	@ (8005858 <HAL_GPIO_Init+0x2fc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d101      	bne.n	8005740 <HAL_GPIO_Init+0x1e4>
 800573c:	2305      	movs	r3, #5
 800573e:	e00a      	b.n	8005756 <HAL_GPIO_Init+0x1fa>
 8005740:	2306      	movs	r3, #6
 8005742:	e008      	b.n	8005756 <HAL_GPIO_Init+0x1fa>
 8005744:	2304      	movs	r3, #4
 8005746:	e006      	b.n	8005756 <HAL_GPIO_Init+0x1fa>
 8005748:	2303      	movs	r3, #3
 800574a:	e004      	b.n	8005756 <HAL_GPIO_Init+0x1fa>
 800574c:	2302      	movs	r3, #2
 800574e:	e002      	b.n	8005756 <HAL_GPIO_Init+0x1fa>
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <HAL_GPIO_Init+0x1fa>
 8005754:	2300      	movs	r3, #0
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	f002 0203 	and.w	r2, r2, #3
 800575c:	0092      	lsls	r2, r2, #2
 800575e:	4093      	lsls	r3, r2
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005766:	4937      	ldr	r1, [pc, #220]	@ (8005844 <HAL_GPIO_Init+0x2e8>)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	3302      	adds	r3, #2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005774:	4b39      	ldr	r3, [pc, #228]	@ (800585c <HAL_GPIO_Init+0x300>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	43db      	mvns	r3, r3
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4013      	ands	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005798:	4a30      	ldr	r2, [pc, #192]	@ (800585c <HAL_GPIO_Init+0x300>)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800579e:	4b2f      	ldr	r3, [pc, #188]	@ (800585c <HAL_GPIO_Init+0x300>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	43db      	mvns	r3, r3
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4013      	ands	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057c2:	4a26      	ldr	r2, [pc, #152]	@ (800585c <HAL_GPIO_Init+0x300>)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80057c8:	4b24      	ldr	r3, [pc, #144]	@ (800585c <HAL_GPIO_Init+0x300>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4013      	ands	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057ec:	4a1b      	ldr	r2, [pc, #108]	@ (800585c <HAL_GPIO_Init+0x300>)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80057f2:	4b1a      	ldr	r3, [pc, #104]	@ (800585c <HAL_GPIO_Init+0x300>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	43db      	mvns	r3, r3
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4013      	ands	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005816:	4a11      	ldr	r2, [pc, #68]	@ (800585c <HAL_GPIO_Init+0x300>)
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	3301      	adds	r3, #1
 8005820:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	f47f ae9d 	bne.w	800556c <HAL_GPIO_Init+0x10>
  }
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40021000 	.word	0x40021000
 8005844:	40010000 	.word	0x40010000
 8005848:	48000400 	.word	0x48000400
 800584c:	48000800 	.word	0x48000800
 8005850:	48000c00 	.word	0x48000c00
 8005854:	48001000 	.word	0x48001000
 8005858:	48001400 	.word	0x48001400
 800585c:	40010400 	.word	0x40010400

08005860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	807b      	strh	r3, [r7, #2]
 800586c:	4613      	mov	r3, r2
 800586e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005870:	787b      	ldrb	r3, [r7, #1]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005876:	887a      	ldrh	r2, [r7, #2]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800587c:	e002      	b.n	8005884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800587e:	887a      	ldrh	r2, [r7, #2]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058a2:	887a      	ldrh	r2, [r7, #2]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4013      	ands	r3, r2
 80058a8:	041a      	lsls	r2, r3, #16
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	43d9      	mvns	r1, r3
 80058ae:	887b      	ldrh	r3, [r7, #2]
 80058b0:	400b      	ands	r3, r1
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	619a      	str	r2, [r3, #24]
}
 80058b8:	bf00      	nop
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e08d      	b.n	80059f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fd fe1a 	bl	8003524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2224      	movs	r2, #36	@ 0x24
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005914:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005924:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d107      	bne.n	800593e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	e006      	b.n	800594c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800594a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d108      	bne.n	8005966 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	e007      	b.n	8005976 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	4608      	mov	r0, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	817b      	strh	r3, [r7, #10]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	813b      	strh	r3, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	f040 80fd 	bne.w	8005c1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_I2C_Mem_Read+0x34>
 8005a2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a36:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0f1      	b.n	8005c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_I2C_Mem_Read+0x4e>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e0ea      	b.n	8005c20 <HAL_I2C_Mem_Read+0x224>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a52:	f7fe fff7 	bl	8004a44 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	2319      	movs	r3, #25
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 fee4 	bl	8006832 <I2C_WaitOnFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0d5      	b.n	8005c20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2222      	movs	r2, #34	@ 0x22
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2240      	movs	r2, #64	@ 0x40
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a9c:	88f8      	ldrh	r0, [r7, #6]
 8005a9e:	893a      	ldrh	r2, [r7, #8]
 8005aa0:	8979      	ldrh	r1, [r7, #10]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	4603      	mov	r3, r0
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fa7b 	bl	8005fa8 <I2C_RequestMemoryRead>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0ad      	b.n	8005c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2bff      	cmp	r3, #255	@ 0xff
 8005acc:	d90e      	bls.n	8005aec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	22ff      	movs	r2, #255	@ 0xff
 8005ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	8979      	ldrh	r1, [r7, #10]
 8005adc:	4b52      	ldr	r3, [pc, #328]	@ (8005c28 <HAL_I2C_Mem_Read+0x22c>)
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f001 f867 	bl	8006bb8 <I2C_TransferConfig>
 8005aea:	e00f      	b.n	8005b0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	8979      	ldrh	r1, [r7, #10]
 8005afe:	4b4a      	ldr	r3, [pc, #296]	@ (8005c28 <HAL_I2C_Mem_Read+0x22c>)
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f001 f856 	bl	8006bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	2200      	movs	r2, #0
 8005b14:	2104      	movs	r1, #4
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fe8b 	bl	8006832 <I2C_WaitOnFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e07c      	b.n	8005c20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d034      	beq.n	8005bcc <HAL_I2C_Mem_Read+0x1d0>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d130      	bne.n	8005bcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b70:	2200      	movs	r2, #0
 8005b72:	2180      	movs	r1, #128	@ 0x80
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fe5c 	bl	8006832 <I2C_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e04d      	b.n	8005c20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2bff      	cmp	r3, #255	@ 0xff
 8005b8c:	d90e      	bls.n	8005bac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	22ff      	movs	r2, #255	@ 0xff
 8005b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	8979      	ldrh	r1, [r7, #10]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f001 f807 	bl	8006bb8 <I2C_TransferConfig>
 8005baa:	e00f      	b.n	8005bcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	8979      	ldrh	r1, [r7, #10]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 fff6 	bl	8006bb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d19a      	bne.n	8005b0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fec9 	bl	8006972 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e01a      	b.n	8005c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <HAL_I2C_Mem_Read+0x230>)
 8005bfe:	400b      	ands	r3, r1
 8005c00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e000      	b.n	8005c20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c1e:	2302      	movs	r3, #2
  }
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	80002400 	.word	0x80002400
 8005c2c:	fe00e800 	.word	0xfe00e800

08005c30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	68f9      	ldr	r1, [r7, #12]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
  }
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c94:	f043 0201 	orr.w	r2, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ca4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00f      	beq.n	8005cd0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbe:	f043 0208 	orr.w	r2, r3, #8
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00f      	beq.n	8005cfa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce8:	f043 0202 	orr.w	r2, r3, #2
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cf8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 030b 	and.w	r3, r3, #11
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fc37 	bl	8006580 <I2C_ITError>
  }
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da8:	b2db      	uxtb	r3, r3
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b086      	sub	sp, #24
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <I2C_Slave_ISR_IT+0x24>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e0e2      	b.n	8005fa0 <I2C_Slave_ISR_IT+0x1ea>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d004      	beq.n	8005e00 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005df6:	6939      	ldr	r1, [r7, #16]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fa09 	bl	8006210 <I2C_ITSlaveCplt>
 8005dfe:	e0ca      	b.n	8005f96 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d04b      	beq.n	8005ea2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d046      	beq.n	8005ea2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d128      	bne.n	8005e70 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b28      	cmp	r3, #40	@ 0x28
 8005e28:	d108      	bne.n	8005e3c <I2C_Slave_ISR_IT+0x86>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e30:	d104      	bne.n	8005e3c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e32:	6939      	ldr	r1, [r7, #16]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fb4f 	bl	80064d8 <I2C_ITListenCplt>
 8005e3a:	e031      	b.n	8005ea0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b29      	cmp	r3, #41	@ 0x29
 8005e46:	d10e      	bne.n	8005e66 <I2C_Slave_ISR_IT+0xb0>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e4e:	d00a      	beq.n	8005e66 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2210      	movs	r2, #16
 8005e56:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fca8 	bl	80067ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f97a 	bl	8006158 <I2C_ITSlaveSeqCplt>
 8005e64:	e01c      	b.n	8005ea0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005e6e:	e08f      	b.n	8005f90 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2210      	movs	r2, #16
 8005e76:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7c:	f043 0204 	orr.w	r2, r3, #4
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <I2C_Slave_ISR_IT+0xdc>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e90:	d17e      	bne.n	8005f90 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	4619      	mov	r1, r3
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 fb71 	bl	8006580 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005e9e:	e077      	b.n	8005f90 <I2C_Slave_ISR_IT+0x1da>
 8005ea0:	e076      	b.n	8005f90 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d02f      	beq.n	8005f0c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d02a      	beq.n	8005f0c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d018      	beq.n	8005ef2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d14b      	bne.n	8005f94 <I2C_Slave_ISR_IT+0x1de>
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f02:	d047      	beq.n	8005f94 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f927 	bl	8006158 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005f0a:	e043      	b.n	8005f94 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d004      	beq.n	8005f2a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005f20:	6939      	ldr	r1, [r7, #16]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f894 	bl	8006050 <I2C_ITAddrCplt>
 8005f28:	e035      	b.n	8005f96 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d030      	beq.n	8005f96 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02b      	beq.n	8005f96 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d018      	beq.n	8005f7a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f78:	e00d      	b.n	8005f96 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f80:	d002      	beq.n	8005f88 <I2C_Slave_ISR_IT+0x1d2>
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f8e5 	bl	8006158 <I2C_ITSlaveSeqCplt>
 8005f8e:	e002      	b.n	8005f96 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005f90:	bf00      	nop
 8005f92:	e000      	b.n	8005f96 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005f94:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	817b      	strh	r3, [r7, #10]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	813b      	strh	r3, [r7, #8]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	8979      	ldrh	r1, [r7, #10]
 8005fc8:	4b20      	ldr	r3, [pc, #128]	@ (800604c <I2C_RequestMemoryRead+0xa4>)
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fdf2 	bl	8006bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	69b9      	ldr	r1, [r7, #24]
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 fc83 	bl	80068e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e02c      	b.n	8006042 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d105      	bne.n	8005ffa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fee:	893b      	ldrh	r3, [r7, #8]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ff8:	e015      	b.n	8006026 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ffa:	893b      	ldrh	r3, [r7, #8]
 8005ffc:	0a1b      	lsrs	r3, r3, #8
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	b2da      	uxtb	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	69b9      	ldr	r1, [r7, #24]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fc69 	bl	80068e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e012      	b.n	8006042 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800601c:	893b      	ldrh	r3, [r7, #8]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2200      	movs	r2, #0
 800602e:	2140      	movs	r1, #64	@ 0x40
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fbfe 	bl	8006832 <I2C_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	80002000 	.word	0x80002000

08006050 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006066:	2b28      	cmp	r3, #40	@ 0x28
 8006068:	d16a      	bne.n	8006140 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	b29b      	uxth	r3, r3
 8006084:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006088:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006096:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80060a4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d138      	bne.n	8006120 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80060ae:	897b      	ldrh	r3, [r7, #10]
 80060b0:	09db      	lsrs	r3, r3, #7
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	89bb      	ldrh	r3, [r7, #12]
 80060b6:	4053      	eors	r3, r2
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f003 0306 	and.w	r3, r3, #6
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d11c      	bne.n	80060fc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80060c2:	897b      	ldrh	r3, [r7, #10]
 80060c4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d13b      	bne.n	8006150 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2208      	movs	r2, #8
 80060e4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80060ee:	89ba      	ldrh	r2, [r7, #12]
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fe24 	bl	8005d42 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80060fa:	e029      	b.n	8006150 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80060fc:	893b      	ldrh	r3, [r7, #8]
 80060fe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006100:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fd89 	bl	8006c1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006112:	89ba      	ldrh	r2, [r7, #12]
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff fe12 	bl	8005d42 <HAL_I2C_AddrCallback>
}
 800611e:	e017      	b.n	8006150 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006120:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fd79 	bl	8006c1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006132:	89ba      	ldrh	r2, [r7, #12]
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff fe02 	bl	8005d42 <HAL_I2C_AddrCallback>
}
 800613e:	e007      	b.n	8006150 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2208      	movs	r2, #8
 8006146:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e00c      	b.n	80061a6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b29      	cmp	r3, #41	@ 0x29
 80061b0:	d112      	bne.n	80061d8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2228      	movs	r2, #40	@ 0x28
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2221      	movs	r2, #33	@ 0x21
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061c0:	2101      	movs	r1, #1
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fd2a 	bl	8006c1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff fda2 	bl	8005d1a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80061d6:	e017      	b.n	8006208 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80061e2:	d111      	bne.n	8006208 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2228      	movs	r2, #40	@ 0x28
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2222      	movs	r2, #34	@ 0x22
 80061f0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061f2:	2102      	movs	r1, #2
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fd11 	bl	8006c1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff fd93 	bl	8005d2e <HAL_I2C_SlaveRxCpltCallback>
}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006232:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2220      	movs	r2, #32
 800623a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	2b21      	cmp	r3, #33	@ 0x21
 8006240:	d002      	beq.n	8006248 <I2C_ITSlaveCplt+0x38>
 8006242:	7afb      	ldrb	r3, [r7, #11]
 8006244:	2b29      	cmp	r3, #41	@ 0x29
 8006246:	d108      	bne.n	800625a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006248:	f248 0101 	movw	r1, #32769	@ 0x8001
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fce5 	bl	8006c1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2221      	movs	r2, #33	@ 0x21
 8006256:	631a      	str	r2, [r3, #48]	@ 0x30
 8006258:	e019      	b.n	800628e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800625a:	7afb      	ldrb	r3, [r7, #11]
 800625c:	2b22      	cmp	r3, #34	@ 0x22
 800625e:	d002      	beq.n	8006266 <I2C_ITSlaveCplt+0x56>
 8006260:	7afb      	ldrb	r3, [r7, #11]
 8006262:	2b2a      	cmp	r3, #42	@ 0x2a
 8006264:	d108      	bne.n	8006278 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006266:	f248 0102 	movw	r1, #32770	@ 0x8002
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fcd6 	bl	8006c1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2222      	movs	r2, #34	@ 0x22
 8006274:	631a      	str	r2, [r3, #48]	@ 0x30
 8006276:	e00a      	b.n	800628e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006278:	7afb      	ldrb	r3, [r7, #11]
 800627a:	2b28      	cmp	r3, #40	@ 0x28
 800627c:	d107      	bne.n	800628e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800627e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fcca 	bl	8006c1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800629c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4b89      	ldr	r3, [pc, #548]	@ (80064d0 <I2C_ITSlaveCplt+0x2c0>)
 80062aa:	400b      	ands	r3, r1
 80062ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa7d 	bl	80067ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d013      	beq.n	80062e6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01f      	beq.n	8006316 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062e4:	e017      	b.n	8006316 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d012      	beq.n	8006316 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d006      	beq.n	8006316 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	b29a      	uxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0304 	bic.w	r3, r3, #4
 8006326:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00c      	beq.n	8006362 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006370:	f043 0204 	orr.w	r2, r3, #4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b00      	cmp	r3, #0
 8006380:	d049      	beq.n	8006416 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006388:	2b00      	cmp	r3, #0
 800638a:	d044      	beq.n	8006416 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d128      	bne.n	80063e8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b28      	cmp	r3, #40	@ 0x28
 80063a0:	d108      	bne.n	80063b4 <I2C_ITSlaveCplt+0x1a4>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063a8:	d104      	bne.n	80063b4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80063aa:	6979      	ldr	r1, [r7, #20]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f893 	bl	80064d8 <I2C_ITListenCplt>
 80063b2:	e030      	b.n	8006416 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b29      	cmp	r3, #41	@ 0x29
 80063be:	d10e      	bne.n	80063de <I2C_ITSlaveCplt+0x1ce>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063c6:	d00a      	beq.n	80063de <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2210      	movs	r2, #16
 80063ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f9ec 	bl	80067ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff febe 	bl	8006158 <I2C_ITSlaveSeqCplt>
 80063dc:	e01b      	b.n	8006416 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2210      	movs	r2, #16
 80063e4:	61da      	str	r2, [r3, #28]
 80063e6:	e016      	b.n	8006416 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2210      	movs	r2, #16
 80063ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f4:	f043 0204 	orr.w	r2, r3, #4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <I2C_ITSlaveCplt+0x1fa>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006408:	d105      	bne.n	8006416 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f8b5 	bl	8006580 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006428:	2b00      	cmp	r3, #0
 800642a:	d010      	beq.n	800644e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f8a4 	bl	8006580 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b28      	cmp	r3, #40	@ 0x28
 8006442:	d141      	bne.n	80064c8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f846 	bl	80064d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800644c:	e03c      	b.n	80064c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006456:	d014      	beq.n	8006482 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff fe7d 	bl	8006158 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1c      	ldr	r2, [pc, #112]	@ (80064d4 <I2C_ITSlaveCplt+0x2c4>)
 8006462:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fc6f 	bl	8005d5e <HAL_I2C_ListenCpltCallback>
}
 8006480:	e022      	b.n	80064c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b22      	cmp	r3, #34	@ 0x22
 800648c:	d10e      	bne.n	80064ac <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff fc42 	bl	8005d2e <HAL_I2C_SlaveRxCpltCallback>
}
 80064aa:	e00d      	b.n	80064c8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fc29 	bl	8005d1a <HAL_I2C_SlaveTxCpltCallback>
}
 80064c8:	bf00      	nop
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	fe00e800 	.word	0xfe00e800
 80064d4:	ffff0000 	.word	0xffff0000

080064d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a25      	ldr	r2, [pc, #148]	@ (800657c <I2C_ITListenCplt+0xa4>)
 80064e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d022      	beq.n	8006554 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800652a:	2b00      	cmp	r3, #0
 800652c:	d012      	beq.n	8006554 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654c:	f043 0204 	orr.w	r2, r3, #4
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006554:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fb5f 	bl	8006c1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2210      	movs	r2, #16
 8006564:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff fbf5 	bl	8005d5e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	ffff0000 	.word	0xffff0000

08006580 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006590:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a6d      	ldr	r2, [pc, #436]	@ (8006754 <I2C_ITError+0x1d4>)
 800659e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b28      	cmp	r3, #40	@ 0x28
 80065b6:	d005      	beq.n	80065c4 <I2C_ITError+0x44>
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	2b29      	cmp	r3, #41	@ 0x29
 80065bc:	d002      	beq.n	80065c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80065c2:	d10b      	bne.n	80065dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80065c4:	2103      	movs	r1, #3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fb28 	bl	8006c1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2228      	movs	r2, #40	@ 0x28
 80065d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a60      	ldr	r2, [pc, #384]	@ (8006758 <I2C_ITError+0x1d8>)
 80065d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80065da:	e030      	b.n	800663e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80065dc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fb1b 	bl	8006c1c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8e1 	bl	80067ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b60      	cmp	r3, #96	@ 0x60
 80065f6:	d01f      	beq.n	8006638 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b20      	cmp	r3, #32
 800660c:	d114      	bne.n	8006638 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b10      	cmp	r3, #16
 800661a:	d109      	bne.n	8006630 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2210      	movs	r2, #16
 8006622:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006628:	f043 0204 	orr.w	r2, r3, #4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2220      	movs	r2, #32
 8006636:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006642:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	d039      	beq.n	80066c0 <I2C_ITError+0x140>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b11      	cmp	r3, #17
 8006650:	d002      	beq.n	8006658 <I2C_ITError+0xd8>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b21      	cmp	r3, #33	@ 0x21
 8006656:	d133      	bne.n	80066c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006666:	d107      	bne.n	8006678 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006676:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe fd36 	bl	80050ee <HAL_DMA_GetState>
 8006682:	4603      	mov	r3, r0
 8006684:	2b01      	cmp	r3, #1
 8006686:	d017      	beq.n	80066b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	4a33      	ldr	r2, [pc, #204]	@ (800675c <I2C_ITError+0x1dc>)
 800668e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe fc10 	bl	8004ec2 <HAL_DMA_Abort_IT>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d04d      	beq.n	8006744 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80066b2:	4610      	mov	r0, r2
 80066b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066b6:	e045      	b.n	8006744 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f851 	bl	8006760 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066be:	e041      	b.n	8006744 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d039      	beq.n	800673c <I2C_ITError+0x1bc>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b12      	cmp	r3, #18
 80066cc:	d002      	beq.n	80066d4 <I2C_ITError+0x154>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b22      	cmp	r3, #34	@ 0x22
 80066d2:	d133      	bne.n	800673c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e2:	d107      	bne.n	80066f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe fcf8 	bl	80050ee <HAL_DMA_GetState>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b01      	cmp	r3, #1
 8006702:	d017      	beq.n	8006734 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006708:	4a14      	ldr	r2, [pc, #80]	@ (800675c <I2C_ITError+0x1dc>)
 800670a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe fbd2 	bl	8004ec2 <HAL_DMA_Abort_IT>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d011      	beq.n	8006748 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800672e:	4610      	mov	r0, r2
 8006730:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006732:	e009      	b.n	8006748 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f813 	bl	8006760 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800673a:	e005      	b.n	8006748 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f80f 	bl	8006760 <I2C_TreatErrorCallback>
  }
}
 8006742:	e002      	b.n	800674a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006744:	bf00      	nop
 8006746:	e000      	b.n	800674a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006748:	bf00      	nop
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	ffff0000 	.word	0xffff0000
 8006758:	08005db7 	.word	0x08005db7
 800675c:	080067f7 	.word	0x080067f7

08006760 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b60      	cmp	r3, #96	@ 0x60
 8006772:	d10e      	bne.n	8006792 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff fafb 	bl	8005d86 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006790:	e009      	b.n	80067a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff fae6 	bl	8005d72 <HAL_I2C_ErrorCallback>
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d103      	bne.n	80067cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d007      	beq.n	80067ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699a      	ldr	r2, [r3, #24]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0201 	orr.w	r2, r2, #1
 80067e8:	619a      	str	r2, [r3, #24]
  }
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006802:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006810:	2200      	movs	r2, #0
 8006812:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006820:	2200      	movs	r2, #0
 8006822:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff ff9b 	bl	8006760 <I2C_TreatErrorCallback>
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	603b      	str	r3, [r7, #0]
 800683e:	4613      	mov	r3, r2
 8006840:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006842:	e03b      	b.n	80068bc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f8d5 	bl	80069f8 <I2C_IsErrorOccurred>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e041      	b.n	80068dc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d02d      	beq.n	80068bc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fe f8f0 	bl	8004a44 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d122      	bne.n	80068bc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699a      	ldr	r2, [r3, #24]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4013      	ands	r3, r2
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	429a      	cmp	r2, r3
 8006884:	bf0c      	ite	eq
 8006886:	2301      	moveq	r3, #1
 8006888:	2300      	movne	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	79fb      	ldrb	r3, [r7, #7]
 8006890:	429a      	cmp	r2, r3
 8006892:	d113      	bne.n	80068bc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006898:	f043 0220 	orr.w	r2, r3, #32
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e00f      	b.n	80068dc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4013      	ands	r3, r2
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d0b4      	beq.n	8006844 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068f0:	e033      	b.n	800695a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f87e 	bl	80069f8 <I2C_IsErrorOccurred>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e031      	b.n	800696a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d025      	beq.n	800695a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690e:	f7fe f899 	bl	8004a44 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	d302      	bcc.n	8006924 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d11a      	bne.n	800695a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b02      	cmp	r3, #2
 8006930:	d013      	beq.n	800695a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006936:	f043 0220 	orr.w	r2, r3, #32
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e007      	b.n	800696a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b02      	cmp	r3, #2
 8006966:	d1c4      	bne.n	80068f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800697e:	e02f      	b.n	80069e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f837 	bl	80069f8 <I2C_IsErrorOccurred>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e02d      	b.n	80069f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006994:	f7fe f856 	bl	8004a44 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d302      	bcc.n	80069aa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d11a      	bne.n	80069e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d013      	beq.n	80069e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069bc:	f043 0220 	orr.w	r2, r3, #32
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e007      	b.n	80069f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d1c8      	bne.n	8006980 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08a      	sub	sp, #40	@ 0x28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d068      	beq.n	8006af6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2210      	movs	r2, #16
 8006a2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a2c:	e049      	b.n	8006ac2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a34:	d045      	beq.n	8006ac2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a36:	f7fe f805 	bl	8004a44 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d302      	bcc.n	8006a4c <I2C_IsErrorOccurred+0x54>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d13a      	bne.n	8006ac2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a6e:	d121      	bne.n	8006ab4 <I2C_IsErrorOccurred+0xbc>
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a76:	d01d      	beq.n	8006ab4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006a78:	7cfb      	ldrb	r3, [r7, #19]
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d01a      	beq.n	8006ab4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a8e:	f7fd ffd9 	bl	8004a44 <HAL_GetTick>
 8006a92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a94:	e00e      	b.n	8006ab4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a96:	f7fd ffd5 	bl	8004a44 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b19      	cmp	r3, #25
 8006aa2:	d907      	bls.n	8006ab4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	f043 0320 	orr.w	r3, r3, #32
 8006aaa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006ab2:	e006      	b.n	8006ac2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d1e9      	bne.n	8006a96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d003      	beq.n	8006ad8 <I2C_IsErrorOccurred+0xe0>
 8006ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0aa      	beq.n	8006a2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d103      	bne.n	8006ae8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	f043 0304 	orr.w	r3, r3, #4
 8006aee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	f043 0308 	orr.w	r3, r3, #8
 8006b30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	f043 0302 	orr.w	r3, r3, #2
 8006b52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01c      	beq.n	8006ba6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fe1e 	bl	80067ae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6859      	ldr	r1, [r3, #4]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb4 <I2C_IsErrorOccurred+0x1bc>)
 8006b7e:	400b      	ands	r3, r1
 8006b80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3728      	adds	r7, #40	@ 0x28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	fe00e800 	.word	0xfe00e800

08006bb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	607b      	str	r3, [r7, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	817b      	strh	r3, [r7, #10]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bca:	897b      	ldrh	r3, [r7, #10]
 8006bcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bd0:	7a7b      	ldrb	r3, [r7, #9]
 8006bd2:	041b      	lsls	r3, r3, #16
 8006bd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006be6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	0d5b      	lsrs	r3, r3, #21
 8006bf2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006bf6:	4b08      	ldr	r3, [pc, #32]	@ (8006c18 <I2C_TransferConfig+0x60>)
 8006bf8:	430b      	orrs	r3, r1
 8006bfa:	43db      	mvns	r3, r3
 8006bfc:	ea02 0103 	and.w	r1, r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	03ff63ff 	.word	0x03ff63ff

08006c1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c2c:	887b      	ldrh	r3, [r7, #2]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00f      	beq.n	8006c56 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006c3c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c4a:	2b28      	cmp	r3, #40	@ 0x28
 8006c4c:	d003      	beq.n	8006c56 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006c54:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c56:	887b      	ldrh	r3, [r7, #2]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00f      	beq.n	8006c80 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006c66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c74:	2b28      	cmp	r3, #40	@ 0x28
 8006c76:	d003      	beq.n	8006c80 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006c7e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da03      	bge.n	8006c90 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006c8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c90:	887b      	ldrh	r3, [r7, #2]
 8006c92:	2b10      	cmp	r3, #16
 8006c94:	d103      	bne.n	8006c9e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006c9c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c9e:	887b      	ldrh	r3, [r7, #2]
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d103      	bne.n	8006cac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f043 0320 	orr.w	r3, r3, #32
 8006caa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	2b40      	cmp	r3, #64	@ 0x40
 8006cb0:	d103      	bne.n	8006cba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	43da      	mvns	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	400a      	ands	r2, r1
 8006cca:	601a      	str	r2, [r3, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d138      	bne.n	8006d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e032      	b.n	8006d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2224      	movs	r2, #36	@ 0x24
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d139      	bne.n	8006df8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e033      	b.n	8006dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2224      	movs	r2, #36	@ 0x24
 8006d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0201 	bic.w	r2, r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006dc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d141      	bne.n	8006e9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e16:	4b4b      	ldr	r3, [pc, #300]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e22:	d131      	bne.n	8006e88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e24:	4b47      	ldr	r3, [pc, #284]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e2a:	4a46      	ldr	r2, [pc, #280]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e34:	4b43      	ldr	r3, [pc, #268]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e3c:	4a41      	ldr	r2, [pc, #260]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e44:	4b40      	ldr	r3, [pc, #256]	@ (8006f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2232      	movs	r2, #50	@ 0x32
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8006f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	0c9b      	lsrs	r3, r3, #18
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e5a:	e002      	b.n	8006e62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e62:	4b38      	ldr	r3, [pc, #224]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6e:	d102      	bne.n	8006e76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f2      	bne.n	8006e5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e76:	4b33      	ldr	r3, [pc, #204]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e82:	d158      	bne.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e057      	b.n	8006f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e88:	4b2e      	ldr	r3, [pc, #184]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e98:	e04d      	b.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea0:	d141      	bne.n	8006f26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ea2:	4b28      	ldr	r3, [pc, #160]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eae:	d131      	bne.n	8006f14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006eb0:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eb6:	4a23      	ldr	r2, [pc, #140]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ec0:	4b20      	ldr	r3, [pc, #128]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2232      	movs	r2, #50	@ 0x32
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	4a1c      	ldr	r2, [pc, #112]	@ (8006f4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	0c9b      	lsrs	r3, r3, #18
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ee6:	e002      	b.n	8006eee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eee:	4b15      	ldr	r3, [pc, #84]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006efa:	d102      	bne.n	8006f02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f2      	bne.n	8006ee8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f02:	4b10      	ldr	r3, [pc, #64]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f0e:	d112      	bne.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e011      	b.n	8006f38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f14:	4b0b      	ldr	r3, [pc, #44]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f24:	e007      	b.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f26:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f2e:	4a05      	ldr	r2, [pc, #20]	@ (8006f44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40007000 	.word	0x40007000
 8006f48:	20000004 	.word	0x20000004
 8006f4c:	431bde83 	.word	0x431bde83

08006f50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4a04      	ldr	r2, [pc, #16]	@ (8006f6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f5e:	6093      	str	r3, [r2, #8]
}
 8006f60:	bf00      	nop
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40007000 	.word	0x40007000

08006f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e2fe      	b.n	8007580 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d075      	beq.n	800707a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f8e:	4b97      	ldr	r3, [pc, #604]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 030c 	and.w	r3, r3, #12
 8006f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f98:	4b94      	ldr	r3, [pc, #592]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	d102      	bne.n	8006fae <HAL_RCC_OscConfig+0x3e>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d002      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x44>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d10b      	bne.n	8006fcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb4:	4b8d      	ldr	r3, [pc, #564]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d05b      	beq.n	8007078 <HAL_RCC_OscConfig+0x108>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d157      	bne.n	8007078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e2d9      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd4:	d106      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x74>
 8006fd6:	4b85      	ldr	r3, [pc, #532]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a84      	ldr	r2, [pc, #528]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e01d      	b.n	8007020 <HAL_RCC_OscConfig+0xb0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fec:	d10c      	bne.n	8007008 <HAL_RCC_OscConfig+0x98>
 8006fee:	4b7f      	ldr	r3, [pc, #508]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a7b      	ldr	r2, [pc, #492]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e00b      	b.n	8007020 <HAL_RCC_OscConfig+0xb0>
 8007008:	4b78      	ldr	r3, [pc, #480]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a77      	ldr	r2, [pc, #476]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800700e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	4b75      	ldr	r3, [pc, #468]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a74      	ldr	r2, [pc, #464]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800701a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800701e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d013      	beq.n	8007050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007028:	f7fd fd0c 	bl	8004a44 <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007030:	f7fd fd08 	bl	8004a44 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b64      	cmp	r3, #100	@ 0x64
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e29e      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007042:	4b6a      	ldr	r3, [pc, #424]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f0      	beq.n	8007030 <HAL_RCC_OscConfig+0xc0>
 800704e:	e014      	b.n	800707a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007050:	f7fd fcf8 	bl	8004a44 <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007058:	f7fd fcf4 	bl	8004a44 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b64      	cmp	r3, #100	@ 0x64
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e28a      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800706a:	4b60      	ldr	r3, [pc, #384]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f0      	bne.n	8007058 <HAL_RCC_OscConfig+0xe8>
 8007076:	e000      	b.n	800707a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d075      	beq.n	8007172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007086:	4b59      	ldr	r3, [pc, #356]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007090:	4b56      	ldr	r3, [pc, #344]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b0c      	cmp	r3, #12
 800709e:	d102      	bne.n	80070a6 <HAL_RCC_OscConfig+0x136>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d002      	beq.n	80070ac <HAL_RCC_OscConfig+0x13c>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d11f      	bne.n	80070ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ac:	4b4f      	ldr	r3, [pc, #316]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_RCC_OscConfig+0x154>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e25d      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c4:	4b49      	ldr	r3, [pc, #292]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	061b      	lsls	r3, r3, #24
 80070d2:	4946      	ldr	r1, [pc, #280]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070d8:	4b45      	ldr	r3, [pc, #276]	@ (80071f0 <HAL_RCC_OscConfig+0x280>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fd fc65 	bl	80049ac <HAL_InitTick>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d043      	beq.n	8007170 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e249      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d023      	beq.n	800713c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070f4:	4b3d      	ldr	r3, [pc, #244]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a3c      	ldr	r2, [pc, #240]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80070fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007100:	f7fd fca0 	bl	8004a44 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007108:	f7fd fc9c 	bl	8004a44 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e232      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800711a:	4b34      	ldr	r3, [pc, #208]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007126:	4b31      	ldr	r3, [pc, #196]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	061b      	lsls	r3, r3, #24
 8007134:	492d      	ldr	r1, [pc, #180]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007136:	4313      	orrs	r3, r2
 8007138:	604b      	str	r3, [r1, #4]
 800713a:	e01a      	b.n	8007172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800713c:	4b2b      	ldr	r3, [pc, #172]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a2a      	ldr	r2, [pc, #168]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007142:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007148:	f7fd fc7c 	bl	8004a44 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007150:	f7fd fc78 	bl	8004a44 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e20e      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007162:	4b22      	ldr	r3, [pc, #136]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x1e0>
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d041      	beq.n	8007202 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01c      	beq.n	80071c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007186:	4b19      	ldr	r3, [pc, #100]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 8007188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800718c:	4a17      	ldr	r2, [pc, #92]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007196:	f7fd fc55 	bl	8004a44 <HAL_GetTick>
 800719a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800719c:	e008      	b.n	80071b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800719e:	f7fd fc51 	bl	8004a44 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e1e7      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071b0:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80071b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0ef      	beq.n	800719e <HAL_RCC_OscConfig+0x22e>
 80071be:	e020      	b.n	8007202 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071c0:	4b0a      	ldr	r3, [pc, #40]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80071c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071c6:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <HAL_RCC_OscConfig+0x27c>)
 80071c8:	f023 0301 	bic.w	r3, r3, #1
 80071cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d0:	f7fd fc38 	bl	8004a44 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071d6:	e00d      	b.n	80071f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d8:	f7fd fc34 	bl	8004a44 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d906      	bls.n	80071f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e1ca      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
 80071ea:	bf00      	nop
 80071ec:	40021000 	.word	0x40021000
 80071f0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071f4:	4b8c      	ldr	r3, [pc, #560]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80071f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1ea      	bne.n	80071d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 80a6 	beq.w	800735c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007210:	2300      	movs	r3, #0
 8007212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007214:	4b84      	ldr	r3, [pc, #528]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_RCC_OscConfig+0x2b4>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <HAL_RCC_OscConfig+0x2b6>
 8007224:	2300      	movs	r3, #0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800722a:	4b7f      	ldr	r3, [pc, #508]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800722c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722e:	4a7e      	ldr	r2, [pc, #504]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6593      	str	r3, [r2, #88]	@ 0x58
 8007236:	4b7c      	ldr	r3, [pc, #496]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800723a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007242:	2301      	movs	r3, #1
 8007244:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007246:	4b79      	ldr	r3, [pc, #484]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724e:	2b00      	cmp	r3, #0
 8007250:	d118      	bne.n	8007284 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007252:	4b76      	ldr	r3, [pc, #472]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a75      	ldr	r2, [pc, #468]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 8007258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800725c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800725e:	f7fd fbf1 	bl	8004a44 <HAL_GetTick>
 8007262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007264:	e008      	b.n	8007278 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007266:	f7fd fbed 	bl	8004a44 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e183      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007278:	4b6c      	ldr	r3, [pc, #432]	@ (800742c <HAL_RCC_OscConfig+0x4bc>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f0      	beq.n	8007266 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d108      	bne.n	800729e <HAL_RCC_OscConfig+0x32e>
 800728c:	4b66      	ldr	r3, [pc, #408]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800728e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007292:	4a65      	ldr	r2, [pc, #404]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007294:	f043 0301 	orr.w	r3, r3, #1
 8007298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800729c:	e024      	b.n	80072e8 <HAL_RCC_OscConfig+0x378>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d110      	bne.n	80072c8 <HAL_RCC_OscConfig+0x358>
 80072a6:	4b60      	ldr	r3, [pc, #384]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ac:	4a5e      	ldr	r2, [pc, #376]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072ae:	f043 0304 	orr.w	r3, r3, #4
 80072b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072b6:	4b5c      	ldr	r3, [pc, #368]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072bc:	4a5a      	ldr	r2, [pc, #360]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072be:	f043 0301 	orr.w	r3, r3, #1
 80072c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072c6:	e00f      	b.n	80072e8 <HAL_RCC_OscConfig+0x378>
 80072c8:	4b57      	ldr	r3, [pc, #348]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ce:	4a56      	ldr	r2, [pc, #344]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072d8:	4b53      	ldr	r3, [pc, #332]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072de:	4a52      	ldr	r2, [pc, #328]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80072e0:	f023 0304 	bic.w	r3, r3, #4
 80072e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d016      	beq.n	800731e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f0:	f7fd fba8 	bl	8004a44 <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f6:	e00a      	b.n	800730e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f8:	f7fd fba4 	bl	8004a44 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007306:	4293      	cmp	r3, r2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e138      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800730e:	4b46      	ldr	r3, [pc, #280]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0ed      	beq.n	80072f8 <HAL_RCC_OscConfig+0x388>
 800731c:	e015      	b.n	800734a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731e:	f7fd fb91 	bl	8004a44 <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007324:	e00a      	b.n	800733c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007326:	f7fd fb8d 	bl	8004a44 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007334:	4293      	cmp	r3, r2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e121      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800733c:	4b3a      	ldr	r3, [pc, #232]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1ed      	bne.n	8007326 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800734a:	7ffb      	ldrb	r3, [r7, #31]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d105      	bne.n	800735c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007350:	4b35      	ldr	r3, [pc, #212]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007354:	4a34      	ldr	r2, [pc, #208]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800735a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0320 	and.w	r3, r3, #32
 8007364:	2b00      	cmp	r3, #0
 8007366:	d03c      	beq.n	80073e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01c      	beq.n	80073aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007370:	4b2d      	ldr	r3, [pc, #180]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007372:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007376:	4a2c      	ldr	r2, [pc, #176]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007380:	f7fd fb60 	bl	8004a44 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007388:	f7fd fb5c 	bl	8004a44 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e0f2      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800739a:	4b23      	ldr	r3, [pc, #140]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 800739c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0ef      	beq.n	8007388 <HAL_RCC_OscConfig+0x418>
 80073a8:	e01b      	b.n	80073e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ba:	f7fd fb43 	bl	8004a44 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073c2:	f7fd fb3f 	bl	8004a44 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e0d5      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073d4:	4b14      	ldr	r3, [pc, #80]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1ef      	bne.n	80073c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80c9 	beq.w	800757e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 030c 	and.w	r3, r3, #12
 80073f4:	2b0c      	cmp	r3, #12
 80073f6:	f000 8083 	beq.w	8007500 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d15e      	bne.n	80074c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007402:	4b09      	ldr	r3, [pc, #36]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a08      	ldr	r2, [pc, #32]	@ (8007428 <HAL_RCC_OscConfig+0x4b8>)
 8007408:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800740c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740e:	f7fd fb19 	bl	8004a44 <HAL_GetTick>
 8007412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007414:	e00c      	b.n	8007430 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007416:	f7fd fb15 	bl	8004a44 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d905      	bls.n	8007430 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0ab      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
 8007428:	40021000 	.word	0x40021000
 800742c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007430:	4b55      	ldr	r3, [pc, #340]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1ec      	bne.n	8007416 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800743c:	4b52      	ldr	r3, [pc, #328]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	4b52      	ldr	r3, [pc, #328]	@ (800758c <HAL_RCC_OscConfig+0x61c>)
 8007442:	4013      	ands	r3, r2
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6a11      	ldr	r1, [r2, #32]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800744c:	3a01      	subs	r2, #1
 800744e:	0112      	lsls	r2, r2, #4
 8007450:	4311      	orrs	r1, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007456:	0212      	lsls	r2, r2, #8
 8007458:	4311      	orrs	r1, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800745e:	0852      	lsrs	r2, r2, #1
 8007460:	3a01      	subs	r2, #1
 8007462:	0552      	lsls	r2, r2, #21
 8007464:	4311      	orrs	r1, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800746a:	0852      	lsrs	r2, r2, #1
 800746c:	3a01      	subs	r2, #1
 800746e:	0652      	lsls	r2, r2, #25
 8007470:	4311      	orrs	r1, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007476:	06d2      	lsls	r2, r2, #27
 8007478:	430a      	orrs	r2, r1
 800747a:	4943      	ldr	r1, [pc, #268]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800747c:	4313      	orrs	r3, r2
 800747e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007480:	4b41      	ldr	r3, [pc, #260]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a40      	ldr	r2, [pc, #256]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800748a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800748c:	4b3e      	ldr	r3, [pc, #248]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4a3d      	ldr	r2, [pc, #244]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 8007492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007496:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fd fad4 	bl	8004a44 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a0:	f7fd fad0 	bl	8004a44 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e066      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074b2:	4b35      	ldr	r3, [pc, #212]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x530>
 80074be:	e05e      	b.n	800757e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074c0:	4b31      	ldr	r3, [pc, #196]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a30      	ldr	r2, [pc, #192]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074cc:	f7fd faba 	bl	8004a44 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d4:	f7fd fab6 	bl	8004a44 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e04c      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074e6:	4b28      	ldr	r3, [pc, #160]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f0      	bne.n	80074d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074f2:	4b25      	ldr	r3, [pc, #148]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	4924      	ldr	r1, [pc, #144]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 80074f8:	4b25      	ldr	r3, [pc, #148]	@ (8007590 <HAL_RCC_OscConfig+0x620>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	60cb      	str	r3, [r1, #12]
 80074fe:	e03e      	b.n	800757e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e039      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800750c:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <HAL_RCC_OscConfig+0x618>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f003 0203 	and.w	r2, r3, #3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	429a      	cmp	r2, r3
 800751e:	d12c      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752a:	3b01      	subs	r3, #1
 800752c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d123      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800753e:	429a      	cmp	r2, r3
 8007540:	d11b      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d113      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	3b01      	subs	r3, #1
 8007560:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007562:	429a      	cmp	r2, r3
 8007564:	d109      	bne.n	800757a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	3b01      	subs	r3, #1
 8007574:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d001      	beq.n	800757e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40021000 	.word	0x40021000
 800758c:	019f800c 	.word	0x019f800c
 8007590:	feeefffc 	.word	0xfeeefffc

08007594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e11e      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075ac:	4b91      	ldr	r3, [pc, #580]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 030f 	and.w	r3, r3, #15
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d910      	bls.n	80075dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ba:	4b8e      	ldr	r3, [pc, #568]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 020f 	bic.w	r2, r3, #15
 80075c2:	498c      	ldr	r1, [pc, #560]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ca:	4b8a      	ldr	r3, [pc, #552]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e106      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d073      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d129      	bne.n	8007644 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075f0:	4b81      	ldr	r3, [pc, #516]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0f4      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007600:	f000 f99e 	bl	8007940 <RCC_GetSysClockFreqFromPLLSource>
 8007604:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4a7c      	ldr	r2, [pc, #496]	@ (80077fc <HAL_RCC_ClockConfig+0x268>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d93f      	bls.n	800768e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800760e:	4b7a      	ldr	r3, [pc, #488]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007622:	2b00      	cmp	r3, #0
 8007624:	d033      	beq.n	800768e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800762a:	2b00      	cmp	r3, #0
 800762c:	d12f      	bne.n	800768e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800762e:	4b72      	ldr	r3, [pc, #456]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007636:	4a70      	ldr	r2, [pc, #448]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800763e:	2380      	movs	r3, #128	@ 0x80
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	e024      	b.n	800768e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d107      	bne.n	800765c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800764c:	4b6a      	ldr	r3, [pc, #424]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0c6      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800765c:	4b66      	ldr	r3, [pc, #408]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e0be      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800766c:	f000 f8ce 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8007670:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4a61      	ldr	r2, [pc, #388]	@ (80077fc <HAL_RCC_ClockConfig+0x268>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d909      	bls.n	800768e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800767a:	4b5f      	ldr	r3, [pc, #380]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007682:	4a5d      	ldr	r2, [pc, #372]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007688:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800768a:	2380      	movs	r3, #128	@ 0x80
 800768c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800768e:	4b5a      	ldr	r3, [pc, #360]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f023 0203 	bic.w	r2, r3, #3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	4957      	ldr	r1, [pc, #348]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800769c:	4313      	orrs	r3, r2
 800769e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a0:	f7fd f9d0 	bl	8004a44 <HAL_GetTick>
 80076a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a6:	e00a      	b.n	80076be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a8:	f7fd f9cc 	bl	8004a44 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e095      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076be:	4b4e      	ldr	r3, [pc, #312]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 020c 	and.w	r2, r3, #12
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d1eb      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d023      	beq.n	8007724 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076e8:	4b43      	ldr	r3, [pc, #268]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	4a42      	ldr	r2, [pc, #264]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80076ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007700:	4b3d      	ldr	r3, [pc, #244]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007708:	4a3b      	ldr	r2, [pc, #236]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800770a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800770e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007710:	4b39      	ldr	r3, [pc, #228]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	4936      	ldr	r1, [pc, #216]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800771e:	4313      	orrs	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
 8007722:	e008      	b.n	8007736 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b80      	cmp	r3, #128	@ 0x80
 8007728:	d105      	bne.n	8007736 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800772a:	4b33      	ldr	r3, [pc, #204]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	4a32      	ldr	r2, [pc, #200]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 8007730:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007734:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007736:	4b2f      	ldr	r3, [pc, #188]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d21d      	bcs.n	8007780 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007744:	4b2b      	ldr	r3, [pc, #172]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f023 020f 	bic.w	r2, r3, #15
 800774c:	4929      	ldr	r1, [pc, #164]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	4313      	orrs	r3, r2
 8007752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007754:	f7fd f976 	bl	8004a44 <HAL_GetTick>
 8007758:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800775a:	e00a      	b.n	8007772 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800775c:	f7fd f972 	bl	8004a44 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800776a:	4293      	cmp	r3, r2
 800776c:	d901      	bls.n	8007772 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e03b      	b.n	80077ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007772:	4b20      	ldr	r3, [pc, #128]	@ (80077f4 <HAL_RCC_ClockConfig+0x260>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 030f 	and.w	r3, r3, #15
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d1ed      	bne.n	800775c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800778c:	4b1a      	ldr	r3, [pc, #104]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	4917      	ldr	r1, [pc, #92]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077aa:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	490f      	ldr	r1, [pc, #60]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077be:	f000 f825 	bl	800780c <HAL_RCC_GetSysClockFreq>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <HAL_RCC_ClockConfig+0x264>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	490c      	ldr	r1, [pc, #48]	@ (8007800 <HAL_RCC_ClockConfig+0x26c>)
 80077d0:	5ccb      	ldrb	r3, [r1, r3]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	4a0a      	ldr	r2, [pc, #40]	@ (8007804 <HAL_RCC_ClockConfig+0x270>)
 80077dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077de:	4b0a      	ldr	r3, [pc, #40]	@ (8007808 <HAL_RCC_ClockConfig+0x274>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fd f8e2 	bl	80049ac <HAL_InitTick>
 80077e8:	4603      	mov	r3, r0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	40022000 	.word	0x40022000
 80077f8:	40021000 	.word	0x40021000
 80077fc:	04c4b400 	.word	0x04c4b400
 8007800:	08010da0 	.word	0x08010da0
 8007804:	20000004 	.word	0x20000004
 8007808:	20000008 	.word	0x20000008

0800780c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007812:	4b2c      	ldr	r3, [pc, #176]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 030c 	and.w	r3, r3, #12
 800781a:	2b04      	cmp	r3, #4
 800781c:	d102      	bne.n	8007824 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800781e:	4b2a      	ldr	r3, [pc, #168]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e047      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007824:	4b27      	ldr	r3, [pc, #156]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 030c 	and.w	r3, r3, #12
 800782c:	2b08      	cmp	r3, #8
 800782e:	d102      	bne.n	8007836 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007830:	4b26      	ldr	r3, [pc, #152]	@ (80078cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	e03e      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007836:	4b23      	ldr	r3, [pc, #140]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b0c      	cmp	r3, #12
 8007840:	d136      	bne.n	80078b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007842:	4b20      	ldr	r3, [pc, #128]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800784c:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	091b      	lsrs	r3, r3, #4
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	3301      	adds	r3, #1
 8007858:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d10c      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007860:	4a1a      	ldr	r2, [pc, #104]	@ (80078cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	4a16      	ldr	r2, [pc, #88]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800786a:	68d2      	ldr	r2, [r2, #12]
 800786c:	0a12      	lsrs	r2, r2, #8
 800786e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007872:	fb02 f303 	mul.w	r3, r2, r3
 8007876:	617b      	str	r3, [r7, #20]
      break;
 8007878:	e00c      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800787a:	4a13      	ldr	r2, [pc, #76]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007882:	4a10      	ldr	r2, [pc, #64]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007884:	68d2      	ldr	r2, [r2, #12]
 8007886:	0a12      	lsrs	r2, r2, #8
 8007888:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800788c:	fb02 f303 	mul.w	r3, r2, r3
 8007890:	617b      	str	r3, [r7, #20]
      break;
 8007892:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007894:	4b0b      	ldr	r3, [pc, #44]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	0e5b      	lsrs	r3, r3, #25
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	3301      	adds	r3, #1
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	e001      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80078b4:	693b      	ldr	r3, [r7, #16]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	40021000 	.word	0x40021000
 80078c8:	00f42400 	.word	0x00f42400
 80078cc:	007a1200 	.word	0x007a1200

080078d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078d4:	4b03      	ldr	r3, [pc, #12]	@ (80078e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078d6:	681b      	ldr	r3, [r3, #0]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000004 	.word	0x20000004

080078e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078ec:	f7ff fff0 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 80078f0:	4602      	mov	r2, r0
 80078f2:	4b06      	ldr	r3, [pc, #24]	@ (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	4904      	ldr	r1, [pc, #16]	@ (8007910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078fe:	5ccb      	ldrb	r3, [r1, r3]
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40021000 	.word	0x40021000
 8007910:	08010db0 	.word	0x08010db0

08007914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007918:	f7ff ffda 	bl	80078d0 <HAL_RCC_GetHCLKFreq>
 800791c:	4602      	mov	r2, r0
 800791e:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	0adb      	lsrs	r3, r3, #11
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	4904      	ldr	r1, [pc, #16]	@ (800793c <HAL_RCC_GetPCLK2Freq+0x28>)
 800792a:	5ccb      	ldrb	r3, [r1, r3]
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007934:	4618      	mov	r0, r3
 8007936:	bd80      	pop	{r7, pc}
 8007938:	40021000 	.word	0x40021000
 800793c:	08010db0 	.word	0x08010db0

08007940 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007946:	4b1e      	ldr	r3, [pc, #120]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007950:	4b1b      	ldr	r3, [pc, #108]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	091b      	lsrs	r3, r3, #4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b03      	cmp	r3, #3
 8007962:	d10c      	bne.n	800797e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007964:	4a17      	ldr	r2, [pc, #92]	@ (80079c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	4a14      	ldr	r2, [pc, #80]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800796e:	68d2      	ldr	r2, [r2, #12]
 8007970:	0a12      	lsrs	r2, r2, #8
 8007972:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007976:	fb02 f303 	mul.w	r3, r2, r3
 800797a:	617b      	str	r3, [r7, #20]
    break;
 800797c:	e00c      	b.n	8007998 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800797e:	4a12      	ldr	r2, [pc, #72]	@ (80079c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	4a0e      	ldr	r2, [pc, #56]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007988:	68d2      	ldr	r2, [r2, #12]
 800798a:	0a12      	lsrs	r2, r2, #8
 800798c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007990:	fb02 f303 	mul.w	r3, r2, r3
 8007994:	617b      	str	r3, [r7, #20]
    break;
 8007996:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007998:	4b09      	ldr	r3, [pc, #36]	@ (80079c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	0e5b      	lsrs	r3, r3, #25
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	3301      	adds	r3, #1
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80079b2:	687b      	ldr	r3, [r7, #4]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	40021000 	.word	0x40021000
 80079c4:	007a1200 	.word	0x007a1200
 80079c8:	00f42400 	.word	0x00f42400

080079cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079d4:	2300      	movs	r3, #0
 80079d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079d8:	2300      	movs	r3, #0
 80079da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8098 	beq.w	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ea:	2300      	movs	r3, #0
 80079ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ee:	4b43      	ldr	r3, [pc, #268]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10d      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079fa:	4b40      	ldr	r3, [pc, #256]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fe:	4a3f      	ldr	r2, [pc, #252]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a06:	4b3d      	ldr	r3, [pc, #244]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a12:	2301      	movs	r3, #1
 8007a14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a16:	4b3a      	ldr	r3, [pc, #232]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a39      	ldr	r2, [pc, #228]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a22:	f7fd f80f 	bl	8004a44 <HAL_GetTick>
 8007a26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a28:	e009      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a2a:	f7fd f80b 	bl	8004a44 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d902      	bls.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	74fb      	strb	r3, [r7, #19]
        break;
 8007a3c:	e005      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a3e:	4b30      	ldr	r3, [pc, #192]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0ef      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a4a:	7cfb      	ldrb	r3, [r7, #19]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d159      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a50:	4b2a      	ldr	r3, [pc, #168]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d01e      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d019      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a6c:	4b23      	ldr	r3, [pc, #140]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a78:	4b20      	ldr	r3, [pc, #128]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a88:	4b1c      	ldr	r3, [pc, #112]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a98:	4a18      	ldr	r2, [pc, #96]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d016      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aaa:	f7fc ffcb 	bl	8004a44 <HAL_GetTick>
 8007aae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ab0:	e00b      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ab2:	f7fc ffc7 	bl	8004a44 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d902      	bls.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	74fb      	strb	r3, [r7, #19]
            break;
 8007ac8:	e006      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aca:	4b0c      	ldr	r3, [pc, #48]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0ec      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007ad8:	7cfb      	ldrb	r3, [r7, #19]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10b      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ade:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aec:	4903      	ldr	r1, [pc, #12]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007af4:	e008      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007af6:	7cfb      	ldrb	r3, [r7, #19]
 8007af8:	74bb      	strb	r3, [r7, #18]
 8007afa:	e005      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007afc:	40021000 	.word	0x40021000
 8007b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	7cfb      	ldrb	r3, [r7, #19]
 8007b06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b08:	7c7b      	ldrb	r3, [r7, #17]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d105      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b0e:	4ba7      	ldr	r3, [pc, #668]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b12:	4aa6      	ldr	r2, [pc, #664]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b26:	4ba1      	ldr	r3, [pc, #644]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b2c:	f023 0203 	bic.w	r2, r3, #3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	499d      	ldr	r1, [pc, #628]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b48:	4b98      	ldr	r3, [pc, #608]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4e:	f023 020c 	bic.w	r2, r3, #12
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	4995      	ldr	r1, [pc, #596]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b6a:	4b90      	ldr	r3, [pc, #576]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	498c      	ldr	r1, [pc, #560]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b8c:	4b87      	ldr	r3, [pc, #540]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	4984      	ldr	r1, [pc, #528]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bae:	4b7f      	ldr	r3, [pc, #508]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	497b      	ldr	r1, [pc, #492]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bd0:	4b76      	ldr	r3, [pc, #472]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	4973      	ldr	r1, [pc, #460]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	496a      	ldr	r1, [pc, #424]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c14:	4b65      	ldr	r3, [pc, #404]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	4962      	ldr	r1, [pc, #392]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c36:	4b5d      	ldr	r3, [pc, #372]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	4959      	ldr	r1, [pc, #356]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c58:	4b54      	ldr	r3, [pc, #336]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c5e:	f023 0203 	bic.w	r2, r3, #3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c66:	4951      	ldr	r1, [pc, #324]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4948      	ldr	r1, [pc, #288]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c9c:	4b43      	ldr	r3, [pc, #268]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007caa:	4940      	ldr	r1, [pc, #256]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cba:	d105      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cd4:	4b35      	ldr	r3, [pc, #212]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce2:	4932      	ldr	r1, [pc, #200]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cf2:	d105      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d0c:	4b27      	ldr	r3, [pc, #156]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1a:	4924      	ldr	r1, [pc, #144]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d2a:	d105      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4a1e      	ldr	r2, [pc, #120]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d015      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d44:	4b19      	ldr	r3, [pc, #100]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d52:	4916      	ldr	r1, [pc, #88]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d62:	d105      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d64:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4a10      	ldr	r2, [pc, #64]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d019      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8a:	4908      	ldr	r1, [pc, #32]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d9a:	d109      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d9c:	4b03      	ldr	r3, [pc, #12]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4a02      	ldr	r2, [pc, #8]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007da6:	60d3      	str	r3, [r2, #12]
 8007da8:	e002      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007daa:	bf00      	nop
 8007dac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d015      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007dbc:	4b29      	ldr	r3, [pc, #164]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dca:	4926      	ldr	r1, [pc, #152]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dda:	d105      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ddc:	4b21      	ldr	r3, [pc, #132]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4a20      	ldr	r2, [pc, #128]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007de6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d015      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007df4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e02:	4918      	ldr	r1, [pc, #96]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e12:	d105      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e14:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4a12      	ldr	r2, [pc, #72]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e1e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d015      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e3a:	490a      	ldr	r1, [pc, #40]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e4a:	d105      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e4c:	4b05      	ldr	r3, [pc, #20]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	4a04      	ldr	r2, [pc, #16]	@ (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e58:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40021000 	.word	0x40021000

08007e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e09d      	b.n	8007fb6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d108      	bne.n	8007e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e8a:	d009      	beq.n	8007ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	61da      	str	r2, [r3, #28]
 8007e92:	e005      	b.n	8007ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d106      	bne.n	8007ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7fb fdec 	bl	8003a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ed6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ee0:	d902      	bls.n	8007ee8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	e002      	b.n	8007eee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007eec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007ef6:	d007      	beq.n	8007f08 <HAL_SPI_Init+0xa0>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f00:	d002      	beq.n	8007f08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f36:	431a      	orrs	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f40:	431a      	orrs	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f4a:	ea42 0103 	orr.w	r1, r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	f003 0204 	and.w	r2, r3, #4
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	431a      	orrs	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f76:	f003 0308 	and.w	r3, r3, #8
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f84:	ea42 0103 	orr.w	r1, r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69da      	ldr	r2, [r3, #28]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b088      	sub	sp, #32
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	603b      	str	r3, [r7, #0]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_SPI_Transmit+0x22>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e15f      	b.n	80082a0 <HAL_SPI_Transmit+0x2e2>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fe8:	f7fc fd2c 	bl	8004a44 <HAL_GetTick>
 8007fec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d002      	beq.n	8008004 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ffe:	2302      	movs	r3, #2
 8008000:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008002:	e148      	b.n	8008296 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <HAL_SPI_Transmit+0x52>
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008014:	e13f      	b.n	8008296 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2203      	movs	r2, #3
 800801a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	88fa      	ldrh	r2, [r7, #6]
 800802e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	88fa      	ldrh	r2, [r7, #6]
 8008034:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008060:	d10f      	bne.n	8008082 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008070:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008080:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800808c:	2b40      	cmp	r3, #64	@ 0x40
 800808e:	d007      	beq.n	80080a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800809e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80080a8:	d94f      	bls.n	800814a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <HAL_SPI_Transmit+0xfa>
 80080b2:	8afb      	ldrh	r3, [r7, #22]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d142      	bne.n	800813e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080bc:	881a      	ldrh	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c8:	1c9a      	adds	r2, r3, #2
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	3b01      	subs	r3, #1
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080dc:	e02f      	b.n	800813e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d112      	bne.n	8008112 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f0:	881a      	ldrh	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fc:	1c9a      	adds	r2, r3, #2
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008106:	b29b      	uxth	r3, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008110:	e015      	b.n	800813e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008112:	f7fc fc97 	bl	8004a44 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d803      	bhi.n	800812a <HAL_SPI_Transmit+0x16c>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008128:	d102      	bne.n	8008130 <HAL_SPI_Transmit+0x172>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d106      	bne.n	800813e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800813c:	e0ab      	b.n	8008296 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008142:	b29b      	uxth	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1ca      	bne.n	80080de <HAL_SPI_Transmit+0x120>
 8008148:	e080      	b.n	800824c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_SPI_Transmit+0x19a>
 8008152:	8afb      	ldrh	r3, [r7, #22]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d174      	bne.n	8008242 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b01      	cmp	r3, #1
 8008160:	d912      	bls.n	8008188 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008166:	881a      	ldrh	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008172:	1c9a      	adds	r2, r3, #2
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b02      	subs	r3, #2
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008186:	e05c      	b.n	8008242 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	330c      	adds	r3, #12
 8008192:	7812      	ldrb	r2, [r2, #0]
 8008194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80081ae:	e048      	b.n	8008242 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d12b      	bne.n	8008216 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d912      	bls.n	80081ee <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081cc:	881a      	ldrh	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d8:	1c9a      	adds	r2, r3, #2
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b02      	subs	r3, #2
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081ec:	e029      	b.n	8008242 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	330c      	adds	r3, #12
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800820a:	b29b      	uxth	r3, r3
 800820c:	3b01      	subs	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008214:	e015      	b.n	8008242 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008216:	f7fc fc15 	bl	8004a44 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d803      	bhi.n	800822e <HAL_SPI_Transmit+0x270>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d102      	bne.n	8008234 <HAL_SPI_Transmit+0x276>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008240:	e029      	b.n	8008296 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008246:	b29b      	uxth	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1b1      	bne.n	80081b0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 fc7d 	bl	8008b50 <SPI_EndRxTxTransaction>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10a      	bne.n	8008280 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	613b      	str	r3, [r7, #16]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	613b      	str	r3, [r7, #16]
 800827e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	77fb      	strb	r3, [r7, #31]
 800828c:	e003      	b.n	8008296 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800829e:	7ffb      	ldrb	r3, [r7, #31]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	@ 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082b6:	2301      	movs	r3, #1
 80082b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_SPI_TransmitReceive+0x26>
 80082ca:	2302      	movs	r3, #2
 80082cc:	e20a      	b.n	80086e4 <HAL_SPI_TransmitReceive+0x43c>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082d6:	f7fc fbb5 	bl	8004a44 <HAL_GetTick>
 80082da:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80082e2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80082ea:	887b      	ldrh	r3, [r7, #2]
 80082ec:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80082ee:	887b      	ldrh	r3, [r7, #2]
 80082f0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082f2:	7efb      	ldrb	r3, [r7, #27]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d00e      	beq.n	8008316 <HAL_SPI_TransmitReceive+0x6e>
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082fe:	d106      	bne.n	800830e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d102      	bne.n	800830e <HAL_SPI_TransmitReceive+0x66>
 8008308:	7efb      	ldrb	r3, [r7, #27]
 800830a:	2b04      	cmp	r3, #4
 800830c:	d003      	beq.n	8008316 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800830e:	2302      	movs	r3, #2
 8008310:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008314:	e1e0      	b.n	80086d8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <HAL_SPI_TransmitReceive+0x80>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_SPI_TransmitReceive+0x80>
 8008322:	887b      	ldrh	r3, [r7, #2]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d103      	bne.n	8008330 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800832e:	e1d3      	b.n	80086d8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b04      	cmp	r3, #4
 800833a:	d003      	beq.n	8008344 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2205      	movs	r2, #5
 8008340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	887a      	ldrh	r2, [r7, #2]
 8008354:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	887a      	ldrh	r2, [r7, #2]
 800835c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	887a      	ldrh	r2, [r7, #2]
 800836a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	887a      	ldrh	r2, [r7, #2]
 8008370:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008386:	d802      	bhi.n	800838e <HAL_SPI_TransmitReceive+0xe6>
 8008388:	8a3b      	ldrh	r3, [r7, #16]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d908      	bls.n	80083a0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	e007      	b.n	80083b0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80083ae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ba:	2b40      	cmp	r3, #64	@ 0x40
 80083bc:	d007      	beq.n	80083ce <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80083d6:	f240 8081 	bls.w	80084dc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <HAL_SPI_TransmitReceive+0x140>
 80083e2:	8a7b      	ldrh	r3, [r7, #18]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d16d      	bne.n	80084c4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ec:	881a      	ldrh	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f8:	1c9a      	adds	r2, r3, #2
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008402:	b29b      	uxth	r3, r3
 8008404:	3b01      	subs	r3, #1
 8008406:	b29a      	uxth	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800840c:	e05a      	b.n	80084c4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b02      	cmp	r3, #2
 800841a:	d11b      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x1ac>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d016      	beq.n	8008454 <HAL_SPI_TransmitReceive+0x1ac>
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	2b01      	cmp	r3, #1
 800842a:	d113      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008430:	881a      	ldrh	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843c:	1c9a      	adds	r2, r3, #2
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008446:	b29b      	uxth	r3, r3
 8008448:	3b01      	subs	r3, #1
 800844a:	b29a      	uxth	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b01      	cmp	r3, #1
 8008460:	d11c      	bne.n	800849c <HAL_SPI_TransmitReceive+0x1f4>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d016      	beq.n	800849c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008478:	b292      	uxth	r2, r2
 800847a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008480:	1c9a      	adds	r2, r3, #2
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008498:	2301      	movs	r3, #1
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800849c:	f7fc fad2 	bl	8004a44 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d80b      	bhi.n	80084c4 <HAL_SPI_TransmitReceive+0x21c>
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d007      	beq.n	80084c4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80084c2:	e109      	b.n	80086d8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d19f      	bne.n	800840e <HAL_SPI_TransmitReceive+0x166>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d199      	bne.n	800840e <HAL_SPI_TransmitReceive+0x166>
 80084da:	e0e3      	b.n	80086a4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_SPI_TransmitReceive+0x244>
 80084e4:	8a7b      	ldrh	r3, [r7, #18]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	f040 80cf 	bne.w	800868a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d912      	bls.n	800851c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fa:	881a      	ldrh	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008506:	1c9a      	adds	r2, r3, #2
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008510:	b29b      	uxth	r3, r3
 8008512:	3b02      	subs	r3, #2
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800851a:	e0b6      	b.n	800868a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	330c      	adds	r3, #12
 8008526:	7812      	ldrb	r2, [r2, #0]
 8008528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008542:	e0a2      	b.n	800868a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b02      	cmp	r3, #2
 8008550:	d134      	bne.n	80085bc <HAL_SPI_TransmitReceive+0x314>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008556:	b29b      	uxth	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d02f      	beq.n	80085bc <HAL_SPI_TransmitReceive+0x314>
 800855c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855e:	2b01      	cmp	r3, #1
 8008560:	d12c      	bne.n	80085bc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008566:	b29b      	uxth	r3, r3
 8008568:	2b01      	cmp	r3, #1
 800856a:	d912      	bls.n	8008592 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008570:	881a      	ldrh	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857c:	1c9a      	adds	r2, r3, #2
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008586:	b29b      	uxth	r3, r3
 8008588:	3b02      	subs	r3, #2
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008590:	e012      	b.n	80085b8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	330c      	adds	r3, #12
 800859c:	7812      	ldrb	r2, [r2, #0]
 800859e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d148      	bne.n	800865c <HAL_SPI_TransmitReceive+0x3b4>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d042      	beq.n	800865c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d923      	bls.n	800862a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ec:	b292      	uxth	r2, r2
 80085ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f4:	1c9a      	adds	r2, r3, #2
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008600:	b29b      	uxth	r3, r3
 8008602:	3b02      	subs	r3, #2
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008612:	b29b      	uxth	r3, r3
 8008614:	2b01      	cmp	r3, #1
 8008616:	d81f      	bhi.n	8008658 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008626:	605a      	str	r2, [r3, #4]
 8008628:	e016      	b.n	8008658 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f103 020c 	add.w	r2, r3, #12
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008636:	7812      	ldrb	r2, [r2, #0]
 8008638:	b2d2      	uxtb	r2, r2
 800863a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800864c:	b29b      	uxth	r3, r3
 800864e:	3b01      	subs	r3, #1
 8008650:	b29a      	uxth	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008658:	2301      	movs	r3, #1
 800865a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800865c:	f7fc f9f2 	bl	8004a44 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008668:	429a      	cmp	r2, r3
 800866a:	d803      	bhi.n	8008674 <HAL_SPI_TransmitReceive+0x3cc>
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d102      	bne.n	800867a <HAL_SPI_TransmitReceive+0x3d2>
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	2b00      	cmp	r3, #0
 8008678:	d107      	bne.n	800868a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008688:	e026      	b.n	80086d8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800868e:	b29b      	uxth	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	f47f af57 	bne.w	8008544 <HAL_SPI_TransmitReceive+0x29c>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f47f af50 	bne.w	8008544 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086a4:	69fa      	ldr	r2, [r7, #28]
 80086a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 fa51 	bl	8008b50 <SPI_EndRxTxTransaction>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2220      	movs	r2, #32
 80086be:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ce:	e003      	b.n	80086d8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80086e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3728      	adds	r7, #40	@ 0x28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10e      	bne.n	800872c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008714:	2b00      	cmp	r3, #0
 8008716:	d009      	beq.n	800872c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	4798      	blx	r3
    return;
 800872a:	e0ce      	b.n	80088ca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <HAL_SPI_IRQHandler+0x5e>
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873c:	2b00      	cmp	r3, #0
 800873e:	d004      	beq.n	800874a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	4798      	blx	r3
    return;
 8008748:	e0bf      	b.n	80088ca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	f003 0320 	and.w	r3, r3, #32
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <HAL_SPI_IRQHandler+0x7e>
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800875a:	2b00      	cmp	r3, #0
 800875c:	d105      	bne.n	800876a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 80b0 	beq.w	80088ca <HAL_SPI_IRQHandler+0x1de>
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	f003 0320 	and.w	r3, r3, #32
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 80aa 	beq.w	80088ca <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d023      	beq.n	80087c8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b03      	cmp	r3, #3
 800878a:	d011      	beq.n	80087b0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008790:	f043 0204 	orr.w	r2, r3, #4
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008798:	2300      	movs	r3, #0
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	617b      	str	r3, [r7, #20]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	e00b      	b.n	80087c8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087b0:	2300      	movs	r3, #0
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	613b      	str	r3, [r7, #16]
 80087c4:	693b      	ldr	r3, [r7, #16]
        return;
 80087c6:	e080      	b.n	80088ca <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	f003 0320 	and.w	r3, r3, #32
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d014      	beq.n	80087fc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087d6:	f043 0201 	orr.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00c      	beq.n	8008820 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800880a:	f043 0208 	orr.w	r2, r3, #8
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008812:	2300      	movs	r3, #0
 8008814:	60bb      	str	r3, [r7, #8]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	60bb      	str	r3, [r7, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008824:	2b00      	cmp	r3, #0
 8008826:	d04f      	beq.n	80088c8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008836:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d104      	bne.n	8008854 <HAL_SPI_IRQHandler+0x168>
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d034      	beq.n	80088be <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0203 	bic.w	r2, r2, #3
 8008862:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008868:	2b00      	cmp	r3, #0
 800886a:	d011      	beq.n	8008890 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008870:	4a17      	ldr	r2, [pc, #92]	@ (80088d0 <HAL_SPI_IRQHandler+0x1e4>)
 8008872:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008878:	4618      	mov	r0, r3
 800887a:	f7fc fb22 	bl	8004ec2 <HAL_DMA_Abort_IT>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008888:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008894:	2b00      	cmp	r3, #0
 8008896:	d016      	beq.n	80088c6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889c:	4a0c      	ldr	r2, [pc, #48]	@ (80088d0 <HAL_SPI_IRQHandler+0x1e4>)
 800889e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fc fb0c 	bl	8004ec2 <HAL_DMA_Abort_IT>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80088bc:	e003      	b.n	80088c6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f808 	bl	80088d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80088c4:	e000      	b.n	80088c8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80088c6:	bf00      	nop
    return;
 80088c8:	bf00      	nop
  }
}
 80088ca:	3720      	adds	r7, #32
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	080088e9 	.word	0x080088e9

080088d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f7ff ffe5 	bl	80088d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	4613      	mov	r3, r2
 8008922:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008924:	f7fc f88e 	bl	8004a44 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	4413      	add	r3, r2
 8008932:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008934:	f7fc f886 	bl	8004a44 <HAL_GetTick>
 8008938:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800893a:	4b39      	ldr	r3, [pc, #228]	@ (8008a20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	015b      	lsls	r3, r3, #5
 8008940:	0d1b      	lsrs	r3, r3, #20
 8008942:	69fa      	ldr	r2, [r7, #28]
 8008944:	fb02 f303 	mul.w	r3, r2, r3
 8008948:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800894a:	e054      	b.n	80089f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d050      	beq.n	80089f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008954:	f7fc f876 	bl	8004a44 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	429a      	cmp	r2, r3
 8008962:	d902      	bls.n	800896a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d13d      	bne.n	80089e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008978:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008982:	d111      	bne.n	80089a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800898c:	d004      	beq.n	8008998 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008996:	d107      	bne.n	80089a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089b0:	d10f      	bne.n	80089d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e017      	b.n	8008a16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689a      	ldr	r2, [r3, #8]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4013      	ands	r3, r2
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	bf0c      	ite	eq
 8008a06:	2301      	moveq	r3, #1
 8008a08:	2300      	movne	r3, #0
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d19b      	bne.n	800894c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3720      	adds	r7, #32
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000004 	.word	0x20000004

08008a24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08a      	sub	sp, #40	@ 0x28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a36:	f7fc f805 	bl	8004a44 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	4413      	add	r3, r2
 8008a44:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008a46:	f7fb fffd 	bl	8004a44 <HAL_GetTick>
 8008a4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	330c      	adds	r3, #12
 8008a52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a54:	4b3d      	ldr	r3, [pc, #244]	@ (8008b4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	00da      	lsls	r2, r3, #3
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	0d1b      	lsrs	r3, r3, #20
 8008a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
 8008a6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008a6c:	e060      	b.n	8008b30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a74:	d107      	bne.n	8008a86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d104      	bne.n	8008a86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d050      	beq.n	8008b30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a8e:	f7fb ffd9 	bl	8004a44 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d902      	bls.n	8008aa4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d13d      	bne.n	8008b20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ab2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008abc:	d111      	bne.n	8008ae2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ac6:	d004      	beq.n	8008ad2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ad0:	d107      	bne.n	8008ae2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ae0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aea:	d10f      	bne.n	8008b0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e010      	b.n	8008b42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d196      	bne.n	8008a6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3728      	adds	r7, #40	@ 0x28
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000004 	.word	0x20000004

08008b50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af02      	add	r7, sp, #8
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f7ff ff5b 	bl	8008a24 <SPI_WaitFifoStateUntilTimeout>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d007      	beq.n	8008b84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b78:	f043 0220 	orr.w	r2, r3, #32
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e027      	b.n	8008bd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2180      	movs	r1, #128	@ 0x80
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f7ff fec0 	bl	8008914 <SPI_WaitFlagStateUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d007      	beq.n	8008baa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b9e:	f043 0220 	orr.w	r2, r3, #32
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e014      	b.n	8008bd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f7ff ff34 	bl	8008a24 <SPI_WaitFifoStateUntilTimeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d007      	beq.n	8008bd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bc6:	f043 0220 	orr.w	r2, r3, #32
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e000      	b.n	8008bd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e049      	b.n	8008c82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d106      	bne.n	8008c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7fb fa0a 	bl	800401c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3304      	adds	r3, #4
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	f000 facc 	bl	80091b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d001      	beq.n	8008ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e054      	b.n	8008d4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0201 	orr.w	r2, r2, #1
 8008cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a26      	ldr	r2, [pc, #152]	@ (8008d5c <HAL_TIM_Base_Start_IT+0xd0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d022      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cce:	d01d      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a22      	ldr	r2, [pc, #136]	@ (8008d60 <HAL_TIM_Base_Start_IT+0xd4>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d018      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a21      	ldr	r2, [pc, #132]	@ (8008d64 <HAL_TIM_Base_Start_IT+0xd8>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d013      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8008d68 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00e      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8008d6c <HAL_TIM_Base_Start_IT+0xe0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d009      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8008d70 <HAL_TIM_Base_Start_IT+0xe4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d004      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x80>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a1b      	ldr	r2, [pc, #108]	@ (8008d74 <HAL_TIM_Base_Start_IT+0xe8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d115      	bne.n	8008d38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	4b19      	ldr	r3, [pc, #100]	@ (8008d78 <HAL_TIM_Base_Start_IT+0xec>)
 8008d14:	4013      	ands	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b06      	cmp	r3, #6
 8008d1c:	d015      	beq.n	8008d4a <HAL_TIM_Base_Start_IT+0xbe>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d24:	d011      	beq.n	8008d4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0201 	orr.w	r2, r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d36:	e008      	b.n	8008d4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0201 	orr.w	r2, r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	e000      	b.n	8008d4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	40012c00 	.word	0x40012c00
 8008d60:	40000400 	.word	0x40000400
 8008d64:	40000800 	.word	0x40000800
 8008d68:	40000c00 	.word	0x40000c00
 8008d6c:	40013400 	.word	0x40013400
 8008d70:	40014000 	.word	0x40014000
 8008d74:	40015000 	.word	0x40015000
 8008d78:	00010007 	.word	0x00010007

08008d7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e097      	b.n	8008ec0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d106      	bne.n	8008daa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7fb f97b 	bl	80040a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2202      	movs	r2, #2
 8008dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008dc0:	f023 0307 	bic.w	r3, r3, #7
 8008dc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f000 f9f1 	bl	80091b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dfe:	f023 0303 	bic.w	r3, r3, #3
 8008e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	689a      	ldr	r2, [r3, #8]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008e1c:	f023 030c 	bic.w	r3, r3, #12
 8008e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	021b      	lsls	r3, r3, #8
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	011a      	lsls	r2, r3, #4
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	031b      	lsls	r3, r3, #12
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008e5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008e62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	011b      	lsls	r3, r3, #4
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d020      	beq.n	8008f2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01b      	beq.n	8008f2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f06f 0202 	mvn.w	r2, #2
 8008efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	f003 0303 	and.w	r3, r3, #3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f931 	bl	800917a <HAL_TIM_IC_CaptureCallback>
 8008f18:	e005      	b.n	8008f26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f923 	bl	8009166 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f934 	bl	800918e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d020      	beq.n	8008f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d01b      	beq.n	8008f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0204 	mvn.w	r2, #4
 8008f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f90b 	bl	800917a <HAL_TIM_IC_CaptureCallback>
 8008f64:	e005      	b.n	8008f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f8fd 	bl	8009166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f90e 	bl	800918e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f003 0308 	and.w	r3, r3, #8
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d020      	beq.n	8008fc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01b      	beq.n	8008fc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f06f 0208 	mvn.w	r2, #8
 8008f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2204      	movs	r2, #4
 8008f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f8e5 	bl	800917a <HAL_TIM_IC_CaptureCallback>
 8008fb0:	e005      	b.n	8008fbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f8d7 	bl	8009166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f8e8 	bl	800918e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f003 0310 	and.w	r3, r3, #16
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d020      	beq.n	8009010 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f003 0310 	and.w	r3, r3, #16
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01b      	beq.n	8009010 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f06f 0210 	mvn.w	r2, #16
 8008fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f8bf 	bl	800917a <HAL_TIM_IC_CaptureCallback>
 8008ffc:	e005      	b.n	800900a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f8b1 	bl	8009166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f8c2 	bl	800918e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00c      	beq.n	8009034 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b00      	cmp	r3, #0
 8009022:	d007      	beq.n	8009034 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f06f 0201 	mvn.w	r2, #1
 800902c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7f9 ffd6 	bl	8002fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800903a:	2b00      	cmp	r3, #0
 800903c:	d104      	bne.n	8009048 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00c      	beq.n	8009062 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800904e:	2b00      	cmp	r3, #0
 8009050:	d007      	beq.n	8009062 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800905a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f9ff 	bl	8009460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00c      	beq.n	8009086 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009072:	2b00      	cmp	r3, #0
 8009074:	d007      	beq.n	8009086 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800907e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f9f7 	bl	8009474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00c      	beq.n	80090aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f87c 	bl	80091a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f003 0320 	and.w	r3, r3, #32
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00c      	beq.n	80090ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f06f 0220 	mvn.w	r2, #32
 80090c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f9bf 	bl	800944c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00c      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80090ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f9cb 	bl	8009488 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00c      	beq.n	8009116 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800910e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f9c3 	bl	800949c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00c      	beq.n	800913a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d007      	beq.n	800913a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f9bb 	bl	80094b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00c      	beq.n	800915e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f9b3 	bl	80094c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800915e:	bf00      	nop
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091aa:	bf00      	nop
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
	...

080091b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a4c      	ldr	r2, [pc, #304]	@ (80092fc <TIM_Base_SetConfig+0x144>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d017      	beq.n	8009200 <TIM_Base_SetConfig+0x48>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d6:	d013      	beq.n	8009200 <TIM_Base_SetConfig+0x48>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a49      	ldr	r2, [pc, #292]	@ (8009300 <TIM_Base_SetConfig+0x148>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d00f      	beq.n	8009200 <TIM_Base_SetConfig+0x48>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a48      	ldr	r2, [pc, #288]	@ (8009304 <TIM_Base_SetConfig+0x14c>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d00b      	beq.n	8009200 <TIM_Base_SetConfig+0x48>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a47      	ldr	r2, [pc, #284]	@ (8009308 <TIM_Base_SetConfig+0x150>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d007      	beq.n	8009200 <TIM_Base_SetConfig+0x48>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a46      	ldr	r2, [pc, #280]	@ (800930c <TIM_Base_SetConfig+0x154>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d003      	beq.n	8009200 <TIM_Base_SetConfig+0x48>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a45      	ldr	r2, [pc, #276]	@ (8009310 <TIM_Base_SetConfig+0x158>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d108      	bne.n	8009212 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a39      	ldr	r2, [pc, #228]	@ (80092fc <TIM_Base_SetConfig+0x144>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d023      	beq.n	8009262 <TIM_Base_SetConfig+0xaa>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009220:	d01f      	beq.n	8009262 <TIM_Base_SetConfig+0xaa>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a36      	ldr	r2, [pc, #216]	@ (8009300 <TIM_Base_SetConfig+0x148>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d01b      	beq.n	8009262 <TIM_Base_SetConfig+0xaa>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a35      	ldr	r2, [pc, #212]	@ (8009304 <TIM_Base_SetConfig+0x14c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d017      	beq.n	8009262 <TIM_Base_SetConfig+0xaa>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a34      	ldr	r2, [pc, #208]	@ (8009308 <TIM_Base_SetConfig+0x150>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d013      	beq.n	8009262 <TIM_Base_SetConfig+0xaa>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a33      	ldr	r2, [pc, #204]	@ (800930c <TIM_Base_SetConfig+0x154>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00f      	beq.n	8009262 <TIM_Base_SetConfig+0xaa>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a33      	ldr	r2, [pc, #204]	@ (8009314 <TIM_Base_SetConfig+0x15c>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00b      	beq.n	8009262 <TIM_Base_SetConfig+0xaa>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a32      	ldr	r2, [pc, #200]	@ (8009318 <TIM_Base_SetConfig+0x160>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d007      	beq.n	8009262 <TIM_Base_SetConfig+0xaa>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a31      	ldr	r2, [pc, #196]	@ (800931c <TIM_Base_SetConfig+0x164>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d003      	beq.n	8009262 <TIM_Base_SetConfig+0xaa>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a2c      	ldr	r2, [pc, #176]	@ (8009310 <TIM_Base_SetConfig+0x158>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d108      	bne.n	8009274 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a18      	ldr	r2, [pc, #96]	@ (80092fc <TIM_Base_SetConfig+0x144>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d013      	beq.n	80092c8 <TIM_Base_SetConfig+0x110>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a1a      	ldr	r2, [pc, #104]	@ (800930c <TIM_Base_SetConfig+0x154>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00f      	beq.n	80092c8 <TIM_Base_SetConfig+0x110>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a1a      	ldr	r2, [pc, #104]	@ (8009314 <TIM_Base_SetConfig+0x15c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00b      	beq.n	80092c8 <TIM_Base_SetConfig+0x110>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a19      	ldr	r2, [pc, #100]	@ (8009318 <TIM_Base_SetConfig+0x160>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d007      	beq.n	80092c8 <TIM_Base_SetConfig+0x110>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a18      	ldr	r2, [pc, #96]	@ (800931c <TIM_Base_SetConfig+0x164>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_Base_SetConfig+0x110>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a13      	ldr	r2, [pc, #76]	@ (8009310 <TIM_Base_SetConfig+0x158>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d103      	bne.n	80092d0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	691a      	ldr	r2, [r3, #16]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d105      	bne.n	80092ee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	f023 0201 	bic.w	r2, r3, #1
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	611a      	str	r2, [r3, #16]
  }
}
 80092ee:	bf00      	nop
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	40012c00 	.word	0x40012c00
 8009300:	40000400 	.word	0x40000400
 8009304:	40000800 	.word	0x40000800
 8009308:	40000c00 	.word	0x40000c00
 800930c:	40013400 	.word	0x40013400
 8009310:	40015000 	.word	0x40015000
 8009314:	40014000 	.word	0x40014000
 8009318:	40014400 	.word	0x40014400
 800931c:	40014800 	.word	0x40014800

08009320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009330:	2b01      	cmp	r3, #1
 8009332:	d101      	bne.n	8009338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009334:	2302      	movs	r3, #2
 8009336:	e074      	b.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2202      	movs	r2, #2
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a34      	ldr	r2, [pc, #208]	@ (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d009      	beq.n	8009376 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a33      	ldr	r2, [pc, #204]	@ (8009434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d004      	beq.n	8009376 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a31      	ldr	r2, [pc, #196]	@ (8009438 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d108      	bne.n	8009388 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800937c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	4313      	orrs	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800938e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	4313      	orrs	r3, r2
 800939c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a21      	ldr	r2, [pc, #132]	@ (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d022      	beq.n	80093f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093b8:	d01d      	beq.n	80093f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a1f      	ldr	r2, [pc, #124]	@ (800943c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d018      	beq.n	80093f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009440 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d013      	beq.n	80093f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009444 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d00e      	beq.n	80093f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a15      	ldr	r2, [pc, #84]	@ (8009434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d009      	beq.n	80093f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a18      	ldr	r2, [pc, #96]	@ (8009448 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d004      	beq.n	80093f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a11      	ldr	r2, [pc, #68]	@ (8009438 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d10c      	bne.n	8009410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	4313      	orrs	r3, r2
 8009406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	40012c00 	.word	0x40012c00
 8009434:	40013400 	.word	0x40013400
 8009438:	40015000 	.word	0x40015000
 800943c:	40000400 	.word	0x40000400
 8009440:	40000800 	.word	0x40000800
 8009444:	40000c00 	.word	0x40000c00
 8009448:	40014000 	.word	0x40014000

0800944c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e042      	b.n	8009570 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d106      	bne.n	8009502 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7fb f91f 	bl	8004740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2224      	movs	r2, #36	@ 0x24
 8009506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 0201 	bic.w	r2, r2, #1
 8009518:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fe68 	bl	800a1f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fb69 	bl	8009c00 <UART_SetConfig>
 800952e:	4603      	mov	r3, r0
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e01b      	b.n	8009570 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689a      	ldr	r2, [r3, #8]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f042 0201 	orr.w	r2, r2, #1
 8009566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fee7 	bl	800a33c <UART_CheckIdleState>
 800956e:	4603      	mov	r3, r0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b0ba      	sub	sp, #232	@ 0xe8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800959e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80095a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80095a6:	4013      	ands	r3, r2
 80095a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80095ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d11b      	bne.n	80095ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b8:	f003 0320 	and.w	r3, r3, #32
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d015      	beq.n	80095ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80095c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c4:	f003 0320 	and.w	r3, r3, #32
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d105      	bne.n	80095d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d009      	beq.n	80095ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 82e3 	beq.w	8009ba8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
      }
      return;
 80095ea:	e2dd      	b.n	8009ba8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80095ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 8123 	beq.w	800983c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80095f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80095fa:	4b8d      	ldr	r3, [pc, #564]	@ (8009830 <HAL_UART_IRQHandler+0x2b8>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009602:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009606:	4b8b      	ldr	r3, [pc, #556]	@ (8009834 <HAL_UART_IRQHandler+0x2bc>)
 8009608:	4013      	ands	r3, r2
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 8116 	beq.w	800983c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	2b00      	cmp	r3, #0
 800961a:	d011      	beq.n	8009640 <HAL_UART_IRQHandler+0xc8>
 800961c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2201      	movs	r2, #1
 800962e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009636:	f043 0201 	orr.w	r2, r3, #1
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009644:	f003 0302 	and.w	r3, r3, #2
 8009648:	2b00      	cmp	r3, #0
 800964a:	d011      	beq.n	8009670 <HAL_UART_IRQHandler+0xf8>
 800964c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2202      	movs	r2, #2
 800965e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009666:	f043 0204 	orr.w	r2, r3, #4
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b00      	cmp	r3, #0
 800967a:	d011      	beq.n	80096a0 <HAL_UART_IRQHandler+0x128>
 800967c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2204      	movs	r2, #4
 800968e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009696:	f043 0202 	orr.w	r2, r3, #2
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a4:	f003 0308 	and.w	r3, r3, #8
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d017      	beq.n	80096dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b0:	f003 0320 	and.w	r3, r3, #32
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d105      	bne.n	80096c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80096b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80096bc:	4b5c      	ldr	r3, [pc, #368]	@ (8009830 <HAL_UART_IRQHandler+0x2b8>)
 80096be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00b      	beq.n	80096dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2208      	movs	r2, #8
 80096ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d2:	f043 0208 	orr.w	r2, r3, #8
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d012      	beq.n	800970e <HAL_UART_IRQHandler+0x196>
 80096e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00c      	beq.n	800970e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009704:	f043 0220 	orr.w	r2, r3, #32
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 8249 	beq.w	8009bac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800971a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800971e:	f003 0320 	and.w	r3, r3, #32
 8009722:	2b00      	cmp	r3, #0
 8009724:	d013      	beq.n	800974e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800972a:	f003 0320 	and.w	r3, r3, #32
 800972e:	2b00      	cmp	r3, #0
 8009730:	d105      	bne.n	800973e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d007      	beq.n	800974e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009754:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009762:	2b40      	cmp	r3, #64	@ 0x40
 8009764:	d005      	beq.n	8009772 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800976a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800976e:	2b00      	cmp	r3, #0
 8009770:	d054      	beq.n	800981c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fef9 	bl	800a56a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009782:	2b40      	cmp	r3, #64	@ 0x40
 8009784:	d146      	bne.n	8009814 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3308      	adds	r3, #8
 800978c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800979c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3308      	adds	r3, #8
 80097ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80097b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80097b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80097be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80097c2:	e841 2300 	strex	r3, r2, [r1]
 80097c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80097ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1d9      	bne.n	8009786 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d017      	beq.n	800980c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e2:	4a15      	ldr	r2, [pc, #84]	@ (8009838 <HAL_UART_IRQHandler+0x2c0>)
 80097e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fb fb68 	bl	8004ec2 <HAL_DMA_Abort_IT>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d019      	beq.n	800982c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009806:	4610      	mov	r0, r2
 8009808:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800980a:	e00f      	b.n	800982c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f9e1 	bl	8009bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009812:	e00b      	b.n	800982c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f9dd 	bl	8009bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800981a:	e007      	b.n	800982c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f9d9 	bl	8009bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800982a:	e1bf      	b.n	8009bac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982c:	bf00      	nop
    return;
 800982e:	e1bd      	b.n	8009bac <HAL_UART_IRQHandler+0x634>
 8009830:	10000001 	.word	0x10000001
 8009834:	04000120 	.word	0x04000120
 8009838:	0800a637 	.word	0x0800a637

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009840:	2b01      	cmp	r3, #1
 8009842:	f040 8153 	bne.w	8009aec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800984a:	f003 0310 	and.w	r3, r3, #16
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 814c 	beq.w	8009aec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 8145 	beq.w	8009aec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2210      	movs	r2, #16
 8009868:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009874:	2b40      	cmp	r3, #64	@ 0x40
 8009876:	f040 80bb 	bne.w	80099f0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 818f 	beq.w	8009bb0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800989c:	429a      	cmp	r2, r3
 800989e:	f080 8187 	bcs.w	8009bb0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0320 	and.w	r3, r3, #32
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f040 8087 	bne.w	80099ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098cc:	e853 3f00 	ldrex	r3, [r3]
 80098d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80098d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80098f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098fa:	e841 2300 	strex	r3, r2, [r1]
 80098fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1da      	bne.n	80098c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3308      	adds	r3, #8
 8009910:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800991a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800991c:	f023 0301 	bic.w	r3, r3, #1
 8009920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3308      	adds	r3, #8
 800992a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800992e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009932:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009936:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e1      	bne.n	800990a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3308      	adds	r3, #8
 800994c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800995c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3308      	adds	r3, #8
 8009966:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800996a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800996c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009970:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e3      	bne.n	8009946 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2220      	movs	r2, #32
 8009982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800999a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800999c:	f023 0310 	bic.w	r3, r3, #16
 80099a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	461a      	mov	r2, r3
 80099aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e4      	bne.n	800998c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fb fa21 	bl	8004e10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2202      	movs	r2, #2
 80099d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f8fd 	bl	8009be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099ee:	e0df      	b.n	8009bb0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 80d1 	beq.w	8009bb4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009a12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80cc 	beq.w	8009bb4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a40:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e4      	bne.n	8009a1c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3308      	adds	r3, #8
 8009a58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	623b      	str	r3, [r7, #32]
   return(result);
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a68:	f023 0301 	bic.w	r3, r3, #1
 8009a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a82:	e841 2300 	strex	r3, r2, [r1]
 8009a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1e1      	bne.n	8009a52 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0310 	bic.w	r3, r3, #16
 8009ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	69b9      	ldr	r1, [r7, #24]
 8009aca:	69fa      	ldr	r2, [r7, #28]
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e4      	bne.n	8009aa2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f87f 	bl	8009be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009aea:	e063      	b.n	8009bb4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00e      	beq.n	8009b16 <HAL_UART_IRQHandler+0x59e>
 8009af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009afc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d008      	beq.n	8009b16 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fdd2 	bl	800a6b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b14:	e051      	b.n	8009bba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d014      	beq.n	8009b4c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d105      	bne.n	8009b3a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d008      	beq.n	8009b4c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d03a      	beq.n	8009bb8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	4798      	blx	r3
    }
    return;
 8009b4a:	e035      	b.n	8009bb8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d009      	beq.n	8009b6c <HAL_UART_IRQHandler+0x5f4>
 8009b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fd7c 	bl	800a662 <UART_EndTransmit_IT>
    return;
 8009b6a:	e026      	b.n	8009bba <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d009      	beq.n	8009b8c <HAL_UART_IRQHandler+0x614>
 8009b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fdab 	bl	800a6e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b8a:	e016      	b.n	8009bba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d010      	beq.n	8009bba <HAL_UART_IRQHandler+0x642>
 8009b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	da0c      	bge.n	8009bba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fd93 	bl	800a6cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ba6:	e008      	b.n	8009bba <HAL_UART_IRQHandler+0x642>
      return;
 8009ba8:	bf00      	nop
 8009baa:	e006      	b.n	8009bba <HAL_UART_IRQHandler+0x642>
    return;
 8009bac:	bf00      	nop
 8009bae:	e004      	b.n	8009bba <HAL_UART_IRQHandler+0x642>
      return;
 8009bb0:	bf00      	nop
 8009bb2:	e002      	b.n	8009bba <HAL_UART_IRQHandler+0x642>
      return;
 8009bb4:	bf00      	nop
 8009bb6:	e000      	b.n	8009bba <HAL_UART_IRQHandler+0x642>
    return;
 8009bb8:	bf00      	nop
  }
}
 8009bba:	37e8      	adds	r7, #232	@ 0xe8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c04:	b08c      	sub	sp, #48	@ 0x30
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	4baa      	ldr	r3, [pc, #680]	@ (8009ed8 <UART_SetConfig+0x2d8>)
 8009c30:	4013      	ands	r3, r2
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	6812      	ldr	r2, [r2, #0]
 8009c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	68da      	ldr	r2, [r3, #12]
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a9f      	ldr	r2, [pc, #636]	@ (8009edc <UART_SetConfig+0x2dc>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d004      	beq.n	8009c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009c76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	6812      	ldr	r2, [r2, #0]
 8009c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8a:	f023 010f 	bic.w	r1, r3, #15
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a90      	ldr	r2, [pc, #576]	@ (8009ee0 <UART_SetConfig+0x2e0>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d125      	bne.n	8009cf0 <UART_SetConfig+0xf0>
 8009ca4:	4b8f      	ldr	r3, [pc, #572]	@ (8009ee4 <UART_SetConfig+0x2e4>)
 8009ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d81a      	bhi.n	8009ce8 <UART_SetConfig+0xe8>
 8009cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb8 <UART_SetConfig+0xb8>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009cc9 	.word	0x08009cc9
 8009cbc:	08009cd9 	.word	0x08009cd9
 8009cc0:	08009cd1 	.word	0x08009cd1
 8009cc4:	08009ce1 	.word	0x08009ce1
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cce:	e116      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cd6:	e112      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009cd8:	2304      	movs	r3, #4
 8009cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cde:	e10e      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ce6:	e10a      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009ce8:	2310      	movs	r3, #16
 8009cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cee:	e106      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a7c      	ldr	r2, [pc, #496]	@ (8009ee8 <UART_SetConfig+0x2e8>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d138      	bne.n	8009d6c <UART_SetConfig+0x16c>
 8009cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8009ee4 <UART_SetConfig+0x2e4>)
 8009cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d00:	f003 030c 	and.w	r3, r3, #12
 8009d04:	2b0c      	cmp	r3, #12
 8009d06:	d82d      	bhi.n	8009d64 <UART_SetConfig+0x164>
 8009d08:	a201      	add	r2, pc, #4	@ (adr r2, 8009d10 <UART_SetConfig+0x110>)
 8009d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0e:	bf00      	nop
 8009d10:	08009d45 	.word	0x08009d45
 8009d14:	08009d65 	.word	0x08009d65
 8009d18:	08009d65 	.word	0x08009d65
 8009d1c:	08009d65 	.word	0x08009d65
 8009d20:	08009d55 	.word	0x08009d55
 8009d24:	08009d65 	.word	0x08009d65
 8009d28:	08009d65 	.word	0x08009d65
 8009d2c:	08009d65 	.word	0x08009d65
 8009d30:	08009d4d 	.word	0x08009d4d
 8009d34:	08009d65 	.word	0x08009d65
 8009d38:	08009d65 	.word	0x08009d65
 8009d3c:	08009d65 	.word	0x08009d65
 8009d40:	08009d5d 	.word	0x08009d5d
 8009d44:	2300      	movs	r3, #0
 8009d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d4a:	e0d8      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d52:	e0d4      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009d54:	2304      	movs	r3, #4
 8009d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d5a:	e0d0      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d62:	e0cc      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009d64:	2310      	movs	r3, #16
 8009d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d6a:	e0c8      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a5e      	ldr	r2, [pc, #376]	@ (8009eec <UART_SetConfig+0x2ec>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d125      	bne.n	8009dc2 <UART_SetConfig+0x1c2>
 8009d76:	4b5b      	ldr	r3, [pc, #364]	@ (8009ee4 <UART_SetConfig+0x2e4>)
 8009d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d80:	2b30      	cmp	r3, #48	@ 0x30
 8009d82:	d016      	beq.n	8009db2 <UART_SetConfig+0x1b2>
 8009d84:	2b30      	cmp	r3, #48	@ 0x30
 8009d86:	d818      	bhi.n	8009dba <UART_SetConfig+0x1ba>
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	d00a      	beq.n	8009da2 <UART_SetConfig+0x1a2>
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	d814      	bhi.n	8009dba <UART_SetConfig+0x1ba>
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <UART_SetConfig+0x19a>
 8009d94:	2b10      	cmp	r3, #16
 8009d96:	d008      	beq.n	8009daa <UART_SetConfig+0x1aa>
 8009d98:	e00f      	b.n	8009dba <UART_SetConfig+0x1ba>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009da0:	e0ad      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009da2:	2302      	movs	r3, #2
 8009da4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009da8:	e0a9      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009daa:	2304      	movs	r3, #4
 8009dac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db0:	e0a5      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009db2:	2308      	movs	r3, #8
 8009db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db8:	e0a1      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009dba:	2310      	movs	r3, #16
 8009dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dc0:	e09d      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8009ef0 <UART_SetConfig+0x2f0>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d125      	bne.n	8009e18 <UART_SetConfig+0x218>
 8009dcc:	4b45      	ldr	r3, [pc, #276]	@ (8009ee4 <UART_SetConfig+0x2e4>)
 8009dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dd8:	d016      	beq.n	8009e08 <UART_SetConfig+0x208>
 8009dda:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ddc:	d818      	bhi.n	8009e10 <UART_SetConfig+0x210>
 8009dde:	2b80      	cmp	r3, #128	@ 0x80
 8009de0:	d00a      	beq.n	8009df8 <UART_SetConfig+0x1f8>
 8009de2:	2b80      	cmp	r3, #128	@ 0x80
 8009de4:	d814      	bhi.n	8009e10 <UART_SetConfig+0x210>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <UART_SetConfig+0x1f0>
 8009dea:	2b40      	cmp	r3, #64	@ 0x40
 8009dec:	d008      	beq.n	8009e00 <UART_SetConfig+0x200>
 8009dee:	e00f      	b.n	8009e10 <UART_SetConfig+0x210>
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009df6:	e082      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009df8:	2302      	movs	r3, #2
 8009dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dfe:	e07e      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009e00:	2304      	movs	r3, #4
 8009e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e06:	e07a      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009e08:	2308      	movs	r3, #8
 8009e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e0e:	e076      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009e10:	2310      	movs	r3, #16
 8009e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e16:	e072      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a35      	ldr	r2, [pc, #212]	@ (8009ef4 <UART_SetConfig+0x2f4>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d12a      	bne.n	8009e78 <UART_SetConfig+0x278>
 8009e22:	4b30      	ldr	r3, [pc, #192]	@ (8009ee4 <UART_SetConfig+0x2e4>)
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e30:	d01a      	beq.n	8009e68 <UART_SetConfig+0x268>
 8009e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e36:	d81b      	bhi.n	8009e70 <UART_SetConfig+0x270>
 8009e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e3c:	d00c      	beq.n	8009e58 <UART_SetConfig+0x258>
 8009e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e42:	d815      	bhi.n	8009e70 <UART_SetConfig+0x270>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <UART_SetConfig+0x250>
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e4c:	d008      	beq.n	8009e60 <UART_SetConfig+0x260>
 8009e4e:	e00f      	b.n	8009e70 <UART_SetConfig+0x270>
 8009e50:	2300      	movs	r3, #0
 8009e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e56:	e052      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5e:	e04e      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009e60:	2304      	movs	r3, #4
 8009e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e66:	e04a      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009e68:	2308      	movs	r3, #8
 8009e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6e:	e046      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009e70:	2310      	movs	r3, #16
 8009e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e76:	e042      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a17      	ldr	r2, [pc, #92]	@ (8009edc <UART_SetConfig+0x2dc>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d13a      	bne.n	8009ef8 <UART_SetConfig+0x2f8>
 8009e82:	4b18      	ldr	r3, [pc, #96]	@ (8009ee4 <UART_SetConfig+0x2e4>)
 8009e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e90:	d01a      	beq.n	8009ec8 <UART_SetConfig+0x2c8>
 8009e92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e96:	d81b      	bhi.n	8009ed0 <UART_SetConfig+0x2d0>
 8009e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e9c:	d00c      	beq.n	8009eb8 <UART_SetConfig+0x2b8>
 8009e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ea2:	d815      	bhi.n	8009ed0 <UART_SetConfig+0x2d0>
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <UART_SetConfig+0x2b0>
 8009ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eac:	d008      	beq.n	8009ec0 <UART_SetConfig+0x2c0>
 8009eae:	e00f      	b.n	8009ed0 <UART_SetConfig+0x2d0>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eb6:	e022      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009eb8:	2302      	movs	r3, #2
 8009eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ebe:	e01e      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009ec0:	2304      	movs	r3, #4
 8009ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ec6:	e01a      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009ec8:	2308      	movs	r3, #8
 8009eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ece:	e016      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ed6:	e012      	b.n	8009efe <UART_SetConfig+0x2fe>
 8009ed8:	cfff69f3 	.word	0xcfff69f3
 8009edc:	40008000 	.word	0x40008000
 8009ee0:	40013800 	.word	0x40013800
 8009ee4:	40021000 	.word	0x40021000
 8009ee8:	40004400 	.word	0x40004400
 8009eec:	40004800 	.word	0x40004800
 8009ef0:	40004c00 	.word	0x40004c00
 8009ef4:	40005000 	.word	0x40005000
 8009ef8:	2310      	movs	r3, #16
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4aae      	ldr	r2, [pc, #696]	@ (800a1bc <UART_SetConfig+0x5bc>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	f040 8097 	bne.w	800a038 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f0e:	2b08      	cmp	r3, #8
 8009f10:	d823      	bhi.n	8009f5a <UART_SetConfig+0x35a>
 8009f12:	a201      	add	r2, pc, #4	@ (adr r2, 8009f18 <UART_SetConfig+0x318>)
 8009f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f18:	08009f3d 	.word	0x08009f3d
 8009f1c:	08009f5b 	.word	0x08009f5b
 8009f20:	08009f45 	.word	0x08009f45
 8009f24:	08009f5b 	.word	0x08009f5b
 8009f28:	08009f4b 	.word	0x08009f4b
 8009f2c:	08009f5b 	.word	0x08009f5b
 8009f30:	08009f5b 	.word	0x08009f5b
 8009f34:	08009f5b 	.word	0x08009f5b
 8009f38:	08009f53 	.word	0x08009f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f3c:	f7fd fcd4 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 8009f40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f42:	e010      	b.n	8009f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f44:	4b9e      	ldr	r3, [pc, #632]	@ (800a1c0 <UART_SetConfig+0x5c0>)
 8009f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f48:	e00d      	b.n	8009f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f4a:	f7fd fc5f 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8009f4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f50:	e009      	b.n	8009f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f58:	e005      	b.n	8009f66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 8130 	beq.w	800a1ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f72:	4a94      	ldr	r2, [pc, #592]	@ (800a1c4 <UART_SetConfig+0x5c4>)
 8009f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	4613      	mov	r3, r2
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	4413      	add	r3, r2
 8009f8c:	69ba      	ldr	r2, [r7, #24]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d305      	bcc.n	8009f9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d903      	bls.n	8009fa6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fa4:	e113      	b.n	800a1ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa8:	2200      	movs	r2, #0
 8009faa:	60bb      	str	r3, [r7, #8]
 8009fac:	60fa      	str	r2, [r7, #12]
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb2:	4a84      	ldr	r2, [pc, #528]	@ (800a1c4 <UART_SetConfig+0x5c4>)
 8009fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2200      	movs	r2, #0
 8009fbc:	603b      	str	r3, [r7, #0]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fc8:	f7f6 fe86 	bl	8000cd8 <__aeabi_uldivmod>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	f04f 0200 	mov.w	r2, #0
 8009fd8:	f04f 0300 	mov.w	r3, #0
 8009fdc:	020b      	lsls	r3, r1, #8
 8009fde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fe2:	0202      	lsls	r2, r0, #8
 8009fe4:	6979      	ldr	r1, [r7, #20]
 8009fe6:	6849      	ldr	r1, [r1, #4]
 8009fe8:	0849      	lsrs	r1, r1, #1
 8009fea:	2000      	movs	r0, #0
 8009fec:	460c      	mov	r4, r1
 8009fee:	4605      	mov	r5, r0
 8009ff0:	eb12 0804 	adds.w	r8, r2, r4
 8009ff4:	eb43 0905 	adc.w	r9, r3, r5
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	469a      	mov	sl, r3
 800a000:	4693      	mov	fp, r2
 800a002:	4652      	mov	r2, sl
 800a004:	465b      	mov	r3, fp
 800a006:	4640      	mov	r0, r8
 800a008:	4649      	mov	r1, r9
 800a00a:	f7f6 fe65 	bl	8000cd8 <__aeabi_uldivmod>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4613      	mov	r3, r2
 800a014:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a01c:	d308      	bcc.n	800a030 <UART_SetConfig+0x430>
 800a01e:	6a3b      	ldr	r3, [r7, #32]
 800a020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a024:	d204      	bcs.n	800a030 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6a3a      	ldr	r2, [r7, #32]
 800a02c:	60da      	str	r2, [r3, #12]
 800a02e:	e0ce      	b.n	800a1ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a036:	e0ca      	b.n	800a1ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a040:	d166      	bne.n	800a110 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a042:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a046:	2b08      	cmp	r3, #8
 800a048:	d827      	bhi.n	800a09a <UART_SetConfig+0x49a>
 800a04a:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <UART_SetConfig+0x450>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a075 	.word	0x0800a075
 800a054:	0800a07d 	.word	0x0800a07d
 800a058:	0800a085 	.word	0x0800a085
 800a05c:	0800a09b 	.word	0x0800a09b
 800a060:	0800a08b 	.word	0x0800a08b
 800a064:	0800a09b 	.word	0x0800a09b
 800a068:	0800a09b 	.word	0x0800a09b
 800a06c:	0800a09b 	.word	0x0800a09b
 800a070:	0800a093 	.word	0x0800a093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a074:	f7fd fc38 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800a078:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a07a:	e014      	b.n	800a0a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a07c:	f7fd fc4a 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 800a080:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a082:	e010      	b.n	800a0a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a084:	4b4e      	ldr	r3, [pc, #312]	@ (800a1c0 <UART_SetConfig+0x5c0>)
 800a086:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a088:	e00d      	b.n	800a0a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a08a:	f7fd fbbf 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800a08e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a090:	e009      	b.n	800a0a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a098:	e005      	b.n	800a0a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a0a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 8090 	beq.w	800a1ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b2:	4a44      	ldr	r2, [pc, #272]	@ (800a1c4 <UART_SetConfig+0x5c4>)
 800a0b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0c0:	005a      	lsls	r2, r3, #1
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	085b      	lsrs	r3, r3, #1
 800a0c8:	441a      	add	r2, r3
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	2b0f      	cmp	r3, #15
 800a0d8:	d916      	bls.n	800a108 <UART_SetConfig+0x508>
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0e0:	d212      	bcs.n	800a108 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f023 030f 	bic.w	r3, r3, #15
 800a0ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	085b      	lsrs	r3, r3, #1
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	f003 0307 	and.w	r3, r3, #7
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	8bfb      	ldrh	r3, [r7, #30]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	8bfa      	ldrh	r2, [r7, #30]
 800a104:	60da      	str	r2, [r3, #12]
 800a106:	e062      	b.n	800a1ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a10e:	e05e      	b.n	800a1ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a110:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a114:	2b08      	cmp	r3, #8
 800a116:	d828      	bhi.n	800a16a <UART_SetConfig+0x56a>
 800a118:	a201      	add	r2, pc, #4	@ (adr r2, 800a120 <UART_SetConfig+0x520>)
 800a11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11e:	bf00      	nop
 800a120:	0800a145 	.word	0x0800a145
 800a124:	0800a14d 	.word	0x0800a14d
 800a128:	0800a155 	.word	0x0800a155
 800a12c:	0800a16b 	.word	0x0800a16b
 800a130:	0800a15b 	.word	0x0800a15b
 800a134:	0800a16b 	.word	0x0800a16b
 800a138:	0800a16b 	.word	0x0800a16b
 800a13c:	0800a16b 	.word	0x0800a16b
 800a140:	0800a163 	.word	0x0800a163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a144:	f7fd fbd0 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 800a148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a14a:	e014      	b.n	800a176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a14c:	f7fd fbe2 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 800a150:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a152:	e010      	b.n	800a176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a154:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c0 <UART_SetConfig+0x5c0>)
 800a156:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a158:	e00d      	b.n	800a176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a15a:	f7fd fb57 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800a15e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a160:	e009      	b.n	800a176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a168:	e005      	b.n	800a176 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a174:	bf00      	nop
    }

    if (pclk != 0U)
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d028      	beq.n	800a1ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a180:	4a10      	ldr	r2, [pc, #64]	@ (800a1c4 <UART_SetConfig+0x5c4>)
 800a182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a186:	461a      	mov	r2, r3
 800a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	085b      	lsrs	r3, r3, #1
 800a194:	441a      	add	r2, r3
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a19e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	2b0f      	cmp	r3, #15
 800a1a4:	d910      	bls.n	800a1c8 <UART_SetConfig+0x5c8>
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1ac:	d20c      	bcs.n	800a1c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60da      	str	r2, [r3, #12]
 800a1b8:	e009      	b.n	800a1ce <UART_SetConfig+0x5ce>
 800a1ba:	bf00      	nop
 800a1bc:	40008000 	.word	0x40008000
 800a1c0:	00f42400 	.word	0x00f42400
 800a1c4:	08010db8 	.word	0x08010db8
      }
      else
      {
        ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a1ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3730      	adds	r7, #48	@ 0x30
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a1f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a204:	f003 0308 	and.w	r3, r3, #8
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00a      	beq.n	800a222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	430a      	orrs	r2, r1
 800a242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00a      	beq.n	800a266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26a:	f003 0304 	and.w	r3, r3, #4
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00a      	beq.n	800a288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	430a      	orrs	r2, r1
 800a286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28c:	f003 0310 	and.w	r3, r3, #16
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00a      	beq.n	800a2aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00a      	beq.n	800a2cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d01a      	beq.n	800a30e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2f6:	d10a      	bne.n	800a30e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	430a      	orrs	r2, r1
 800a30c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00a      	beq.n	800a330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	605a      	str	r2, [r3, #4]
  }
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b098      	sub	sp, #96	@ 0x60
 800a340:	af02      	add	r7, sp, #8
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a34c:	f7fa fb7a 	bl	8004a44 <HAL_GetTick>
 800a350:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0308 	and.w	r3, r3, #8
 800a35c:	2b08      	cmp	r3, #8
 800a35e:	d12f      	bne.n	800a3c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a368:	2200      	movs	r2, #0
 800a36a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f88e 	bl	800a490 <UART_WaitOnFlagUntilTimeout>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d022      	beq.n	800a3c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a382:	e853 3f00 	ldrex	r3, [r3]
 800a386:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a38e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	461a      	mov	r2, r3
 800a396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a398:	647b      	str	r3, [r7, #68]	@ 0x44
 800a39a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a39e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3a0:	e841 2300 	strex	r3, r2, [r1]
 800a3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a3a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e6      	bne.n	800a37a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e063      	b.n	800a488 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0304 	and.w	r3, r3, #4
 800a3ca:	2b04      	cmp	r3, #4
 800a3cc:	d149      	bne.n	800a462 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f857 	bl	800a490 <UART_WaitOnFlagUntilTimeout>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d03c      	beq.n	800a462 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a406:	633b      	str	r3, [r7, #48]	@ 0x30
 800a408:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a40c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e6      	bne.n	800a3e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3308      	adds	r3, #8
 800a420:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	60fb      	str	r3, [r7, #12]
   return(result);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f023 0301 	bic.w	r3, r3, #1
 800a430:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3308      	adds	r3, #8
 800a438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a43a:	61fa      	str	r2, [r7, #28]
 800a43c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43e:	69b9      	ldr	r1, [r7, #24]
 800a440:	69fa      	ldr	r2, [r7, #28]
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	617b      	str	r3, [r7, #20]
   return(result);
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e5      	bne.n	800a41a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2220      	movs	r2, #32
 800a452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e012      	b.n	800a488 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2220      	movs	r2, #32
 800a466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2220      	movs	r2, #32
 800a46e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3758      	adds	r7, #88	@ 0x58
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	603b      	str	r3, [r7, #0]
 800a49c:	4613      	mov	r3, r2
 800a49e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4a0:	e04f      	b.n	800a542 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a8:	d04b      	beq.n	800a542 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4aa:	f7fa facb 	bl	8004a44 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d302      	bcc.n	800a4c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e04e      	b.n	800a562 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0304 	and.w	r3, r3, #4
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d037      	beq.n	800a542 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b80      	cmp	r3, #128	@ 0x80
 800a4d6:	d034      	beq.n	800a542 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2b40      	cmp	r3, #64	@ 0x40
 800a4dc:	d031      	beq.n	800a542 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	f003 0308 	and.w	r3, r3, #8
 800a4e8:	2b08      	cmp	r3, #8
 800a4ea:	d110      	bne.n	800a50e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2208      	movs	r2, #8
 800a4f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 f838 	bl	800a56a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2208      	movs	r2, #8
 800a4fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e029      	b.n	800a562 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	69db      	ldr	r3, [r3, #28]
 800a514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a51c:	d111      	bne.n	800a542 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 f81e 	bl	800a56a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e00f      	b.n	800a562 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69da      	ldr	r2, [r3, #28]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	4013      	ands	r3, r2
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	429a      	cmp	r2, r3
 800a550:	bf0c      	ite	eq
 800a552:	2301      	moveq	r3, #1
 800a554:	2300      	movne	r3, #0
 800a556:	b2db      	uxtb	r3, r3
 800a558:	461a      	mov	r2, r3
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d0a0      	beq.n	800a4a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b095      	sub	sp, #84	@ 0x54
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a57a:	e853 3f00 	ldrex	r3, [r3]
 800a57e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	461a      	mov	r2, r3
 800a58e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a590:	643b      	str	r3, [r7, #64]	@ 0x40
 800a592:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a594:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a598:	e841 2300 	strex	r3, r2, [r1]
 800a59c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1e6      	bne.n	800a572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	3308      	adds	r3, #8
 800a5aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
 800a5ae:	e853 3f00 	ldrex	r3, [r3]
 800a5b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5ba:	f023 0301 	bic.w	r3, r3, #1
 800a5be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5d0:	e841 2300 	strex	r3, r2, [r1]
 800a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1e3      	bne.n	800a5a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d118      	bne.n	800a616 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	e853 3f00 	ldrex	r3, [r3]
 800a5f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	f023 0310 	bic.w	r3, r3, #16
 800a5f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a602:	61bb      	str	r3, [r7, #24]
 800a604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a606:	6979      	ldr	r1, [r7, #20]
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	e841 2300 	strex	r3, r2, [r1]
 800a60e:	613b      	str	r3, [r7, #16]
   return(result);
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1e6      	bne.n	800a5e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2220      	movs	r2, #32
 800a61a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a62a:	bf00      	nop
 800a62c:	3754      	adds	r7, #84	@ 0x54
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7ff fabd 	bl	8009bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a65a:	bf00      	nop
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b088      	sub	sp, #32
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	e853 3f00 	ldrex	r3, [r3]
 800a676:	60bb      	str	r3, [r7, #8]
   return(result);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a67e:	61fb      	str	r3, [r7, #28]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	461a      	mov	r2, r3
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	61bb      	str	r3, [r7, #24]
 800a68a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68c:	6979      	ldr	r1, [r7, #20]
 800a68e:	69ba      	ldr	r2, [r7, #24]
 800a690:	e841 2300 	strex	r3, r2, [r1]
 800a694:	613b      	str	r3, [r7, #16]
   return(result);
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1e6      	bne.n	800a66a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff fa88 	bl	8009bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6b0:	bf00      	nop
 800a6b2:	3720      	adds	r7, #32
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a702:	2b01      	cmp	r3, #1
 800a704:	d101      	bne.n	800a70a <HAL_UARTEx_DisableFifoMode+0x16>
 800a706:	2302      	movs	r3, #2
 800a708:	e027      	b.n	800a75a <HAL_UARTEx_DisableFifoMode+0x66>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2224      	movs	r2, #36	@ 0x24
 800a716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 0201 	bic.w	r2, r2, #1
 800a730:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2220      	movs	r2, #32
 800a74c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a776:	2b01      	cmp	r3, #1
 800a778:	d101      	bne.n	800a77e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a77a:	2302      	movs	r3, #2
 800a77c:	e02d      	b.n	800a7da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2224      	movs	r2, #36	@ 0x24
 800a78a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f022 0201 	bic.w	r2, r2, #1
 800a7a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f850 	bl	800a860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b084      	sub	sp, #16
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d101      	bne.n	800a7fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e02d      	b.n	800a856 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2224      	movs	r2, #36	@ 0x24
 800a806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f022 0201 	bic.w	r2, r2, #1
 800a820:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f812 	bl	800a860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2220      	movs	r2, #32
 800a848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
	...

0800a860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d108      	bne.n	800a882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a880:	e031      	b.n	800a8e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a882:	2308      	movs	r3, #8
 800a884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a886:	2308      	movs	r3, #8
 800a888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	0e5b      	lsrs	r3, r3, #25
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 0307 	and.w	r3, r3, #7
 800a898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	0f5b      	lsrs	r3, r3, #29
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	f003 0307 	and.w	r3, r3, #7
 800a8a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8aa:	7bbb      	ldrb	r3, [r7, #14]
 800a8ac:	7b3a      	ldrb	r2, [r7, #12]
 800a8ae:	4911      	ldr	r1, [pc, #68]	@ (800a8f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a8b0:	5c8a      	ldrb	r2, [r1, r2]
 800a8b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8b6:	7b3a      	ldrb	r2, [r7, #12]
 800a8b8:	490f      	ldr	r1, [pc, #60]	@ (800a8f8 <UARTEx_SetNbDataToProcess+0x98>)
 800a8ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ca:	7b7a      	ldrb	r2, [r7, #13]
 800a8cc:	4909      	ldr	r1, [pc, #36]	@ (800a8f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a8ce:	5c8a      	ldrb	r2, [r1, r2]
 800a8d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8d4:	7b7a      	ldrb	r2, [r7, #13]
 800a8d6:	4908      	ldr	r1, [pc, #32]	@ (800a8f8 <UARTEx_SetNbDataToProcess+0x98>)
 800a8d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8da:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a8e6:	bf00      	nop
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	08010dd0 	.word	0x08010dd0
 800a8f8:	08010dd8 	.word	0x08010dd8

0800a8fc <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv>:
void CyphalInterface::push(
    const CanardMicrosecond tx_deadline_usec,
    const CanardTransferMetadata* const metadata,
    const size_t payload_size,
    const void* const payload
) const {
 800a8fc:	b590      	push	{r4, r7, lr}
 800a8fe:	b08b      	sub	sp, #44	@ 0x2c
 800a900:	af04      	add	r7, sp, #16
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t push_state = canardTxPush(
        &provider->queue,
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	3308      	adds	r3, #8
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 f841 	bl	800a994 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800a912:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800a914:	f103 040c 	add.w	r4, r3, #12
        &provider->canard,
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	3308      	adds	r3, #8
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 f839 	bl	800a994 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800a922:	4603      	mov	r3, r0
    int32_t push_state = canardTxPush(
 800a924:	f103 0120 	add.w	r1, r3, #32
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	9302      	str	r3, [sp, #8]
 800a92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92e:	9301      	str	r3, [sp, #4]
 800a930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a938:	4620      	mov	r0, r4
 800a93a:	f001 f8ed 	bl	800bb18 <canardTxPush>
 800a93e:	6178      	str	r0, [r7, #20]
        tx_deadline_usec,
        metadata,
        payload_size,
        payload
    );
    if (push_state == -CANARD_ERROR_OUT_OF_MEMORY) {
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f113 0f03 	cmn.w	r3, #3
 800a946:	d106      	bne.n	800a956 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x5a>
#ifdef __linux__
        std::cerr << "[Error: OOM] Tried to send to port: " << metadata->port_id << ", node: " << +metadata->remote_node_id << std::endl;
#else
        utilities.error_handler();
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	3310      	adds	r3, #16
 800a94e:	4618      	mov	r0, r3
 800a950:	f7f7 ff2d 	bl	80027ae <_ZNKSt8functionIFvvEEclEv>
#endif
        return;
 800a954:	e008      	b.n	800a968 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
    }
    if (push_state < 0) {
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	da05      	bge.n	800a968 <_ZNK15CyphalInterface4pushEyPK22CanardTransferMetadatajPKv+0x6c>
        utilities.error_handler();
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	3310      	adds	r3, #16
 800a962:	4618      	mov	r0, r3
 800a964:	f7f7 ff23 	bl	80027ae <_ZNKSt8functionIFvvEEclEv>
    }
}
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd90      	pop	{r4, r7, pc}

0800a96e <_ZN15CyphalInterface4loopEv>:
        ) != 1) {
        utilities.error_handler();
    }
}

void CyphalInterface::loop() {
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
    provider->can_loop();
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3308      	adds	r3, #8
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 f80a 	bl	800a994 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>
 800a980:	4603      	mov	r3, r0
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	3208      	adds	r2, #8
 800a986:	6812      	ldr	r2, [r2, #0]
 800a988:	4618      	mov	r0, r3
 800a98a:	4790      	blx	r2
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
	return get();
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f805 	bl	800a9ac <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>
 800a9a2:	4603      	mov	r3, r0
      }
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <_ZNKSt10unique_ptrI19AbstractCANProviderSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f805 	bl	800a9c6 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <_ZNKSt15__uniq_ptr_implI19AbstractCANProviderSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b082      	sub	sp, #8
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 f806 	bl	800a9e2 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <_ZSt3getILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b082      	sub	sp, #8
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 f805 	bl	800a9fc <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <_ZSt12__get_helperILj0EP19AbstractCANProviderJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f805 	bl	800aa14 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <_ZNSt11_Tuple_implILj0EJP19AbstractCANProviderSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 f805 	bl	800aa2e <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>
 800aa24:	4603      	mov	r3, r0
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <_ZNSt10_Head_baseILj0EP19AbstractCANProviderLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <_Z41__static_initialization_and_destruction_0ii>:
    }
}

AbstractCANProvider::~AbstractCANProvider() {

}
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d107      	bne.n	800aa64 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d102      	bne.n	800aa64 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800aa5e:	4803      	ldr	r0, [pc, #12]	@ (800aa6c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800aa60:	f000 f806 	bl	800aa70 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	2000069c 	.word	0x2000069c

0800aa70 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800aa70:	b590      	push	{r4, r7, lr}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7f8 f998 	bl	8002db0 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 800aa80:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00c      	beq.n	800aaa4 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7f8 f96b 	bl	8002d66 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 800aa90:	4604      	mov	r4, r0
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7f8 f974 	bl	8002d80 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7f8 f993 	bl	8002dca <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
      }
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd90      	pop	{r4, r7, pc}

0800aab4 <_GLOBAL__sub_I_queue>:
 800aab4:	b580      	push	{r7, lr}
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800aabc:	2001      	movs	r0, #1
 800aabe:	f7ff ffc1 	bl	800aa44 <_Z41__static_initialization_and_destruction_0ii>
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <_GLOBAL__sub_D_queue>:
 800aac4:	b580      	push	{r7, lr}
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800aacc:	2000      	movs	r0, #0
 800aace:	f7ff ffb9 	bl	800aa44 <_Z41__static_initialization_and_destruction_0ii>
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d014      	beq.n	800ab10 <cavlPrivateRotate+0x3c>
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	f083 0301 	eor.w	r3, r3, #1
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <cavlPrivateRotate+0x3c>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ab00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab04:	db04      	blt.n	800ab10 <cavlPrivateRotate+0x3c>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	dd05      	ble.n	800ab1c <cavlPrivateRotate+0x48>
 800ab10:	4b2a      	ldr	r3, [pc, #168]	@ (800abbc <cavlPrivateRotate+0xe8>)
 800ab12:	4a2b      	ldr	r2, [pc, #172]	@ (800abc0 <cavlPrivateRotate+0xec>)
 800ab14:	2162      	movs	r1, #98	@ 0x62
 800ab16:	482b      	ldr	r0, [pc, #172]	@ (800abc4 <cavlPrivateRotate+0xf0>)
 800ab18:	f001 f896 	bl	800bc48 <__assert_func>
    Cavl* const z = x->lr[!r];
 800ab1c:	78fb      	ldrb	r3, [r7, #3]
 800ab1e:	f083 0301 	eor.w	r3, r3, #1
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00e      	beq.n	800ab54 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	6879      	ldr	r1, [r7, #4]
 800ab42:	4299      	cmp	r1, r3
 800ab44:	bf0c      	ite	eq
 800ab46:	2301      	moveq	r3, #1
 800ab48:	2300      	movne	r3, #0
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	601a      	str	r2, [r3, #0]
    x->up     = z;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800ab62:	78fb      	ldrb	r3, [r7, #3]
 800ab64:	78fa      	ldrb	r2, [r7, #3]
 800ab66:	f082 0201 	eor.w	r2, r2, #1
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	0083      	lsls	r3, r0, #2
 800ab7a:	440b      	add	r3, r1
 800ab7c:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 800ab7e:	78fb      	ldrb	r3, [r7, #3]
 800ab80:	f083 0301 	eor.w	r3, r3, #1
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d009      	beq.n	800aba6 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800ab92:	78fb      	ldrb	r3, [r7, #3]
 800ab94:	f083 0301 	eor.w	r3, r3, #1
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	605a      	str	r2, [r3, #4]
}
 800abb2:	bf00      	nop
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	08010368 	.word	0x08010368
 800abc0:	08011140 	.word	0x08011140
 800abc4:	080103b0 	.word	0x080103b0

0800abc8 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00a      	beq.n	800abf0 <cavlPrivateAdjustBalance+0x28>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800abe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe4:	db04      	blt.n	800abf0 <cavlPrivateAdjustBalance+0x28>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800abec:	2b01      	cmp	r3, #1
 800abee:	dd05      	ble.n	800abfc <cavlPrivateAdjustBalance+0x34>
 800abf0:	4b61      	ldr	r3, [pc, #388]	@ (800ad78 <cavlPrivateAdjustBalance+0x1b0>)
 800abf2:	4a62      	ldr	r2, [pc, #392]	@ (800ad7c <cavlPrivateAdjustBalance+0x1b4>)
 800abf4:	2177      	movs	r1, #119	@ 0x77
 800abf6:	4862      	ldr	r0, [pc, #392]	@ (800ad80 <cavlPrivateAdjustBalance+0x1b8>)
 800abf8:	f001 f826 	bl	800bc48 <__assert_func>
    Cavl*        out    = x;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	78fa      	ldrb	r2, [r7, #3]
 800ac0a:	2a00      	cmp	r2, #0
 800ac0c:	d001      	beq.n	800ac12 <cavlPrivateAdjustBalance+0x4a>
 800ac0e:	2201      	movs	r2, #1
 800ac10:	e000      	b.n	800ac14 <cavlPrivateAdjustBalance+0x4c>
 800ac12:	22ff      	movs	r2, #255	@ 0xff
 800ac14:	4413      	add	r3, r2
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 800ac1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac22:	db04      	blt.n	800ac2e <cavlPrivateAdjustBalance+0x66>
 800ac24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	f340 809c 	ble.w	800ad66 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 800ac2e:	7cfb      	ldrb	r3, [r7, #19]
 800ac30:	09db      	lsrs	r3, r3, #7
 800ac32:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800ac34:	7cbb      	ldrb	r3, [r7, #18]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <cavlPrivateAdjustBalance+0x76>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e001      	b.n	800ac42 <cavlPrivateAdjustBalance+0x7a>
 800ac3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac42:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800ac44:	7cbb      	ldrb	r3, [r7, #18]
 800ac46:	f083 0301 	eor.w	r3, r3, #1
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d105      	bne.n	800ac68 <cavlPrivateAdjustBalance+0xa0>
 800ac5c:	4b49      	ldr	r3, [pc, #292]	@ (800ad84 <cavlPrivateAdjustBalance+0x1bc>)
 800ac5e:	4a47      	ldr	r2, [pc, #284]	@ (800ad7c <cavlPrivateAdjustBalance+0x1b4>)
 800ac60:	217f      	movs	r1, #127	@ 0x7f
 800ac62:	4847      	ldr	r0, [pc, #284]	@ (800ad80 <cavlPrivateAdjustBalance+0x1b8>)
 800ac64:	f000 fff0 	bl	800bc48 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800ac74:	fb02 f303 	mul.w	r3, r2, r3
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dc1c      	bgt.n	800acb6 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 800ac80:	7cbb      	ldrb	r3, [r7, #18]
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff ff25 	bl	800aad4 <cavlPrivateRotate>
            if (0 == z->bf)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d109      	bne.n	800aca8 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800ac94:	7c7b      	ldrb	r3, [r7, #17]
 800ac96:	425b      	negs	r3, r3
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	b25a      	sxtb	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	7c7a      	ldrb	r2, [r7, #17]
 800aca4:	731a      	strb	r2, [r3, #12]
    {
 800aca6:	e061      	b.n	800ad6c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	731a      	strb	r2, [r3, #12]
    {
 800acb4:	e05a      	b.n	800ad6c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800acb6:	7cbb      	ldrb	r3, [r7, #18]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d105      	bne.n	800acd4 <cavlPrivateAdjustBalance+0x10c>
 800acc8:	4b2f      	ldr	r3, [pc, #188]	@ (800ad88 <cavlPrivateAdjustBalance+0x1c0>)
 800acca:	4a2c      	ldr	r2, [pc, #176]	@ (800ad7c <cavlPrivateAdjustBalance+0x1b4>)
 800accc:	2192      	movs	r1, #146	@ 0x92
 800acce:	482c      	ldr	r0, [pc, #176]	@ (800ad80 <cavlPrivateAdjustBalance+0x1b8>)
 800acd0:	f000 ffba 	bl	800bc48 <__assert_func>
            out = y;
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800acd8:	7cbb      	ldrb	r3, [r7, #18]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	bf14      	ite	ne
 800acde:	2301      	movne	r3, #1
 800ace0:	2300      	moveq	r3, #0
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	f083 0301 	eor.w	r3, r3, #1
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	4619      	mov	r1, r3
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f7ff feee 	bl	800aad4 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800acf8:	7cbb      	ldrb	r3, [r7, #18]
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff fee9 	bl	800aad4 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800ad0e:	fb02 f303 	mul.w	r3, r2, r3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	da09      	bge.n	800ad2a <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	7c7a      	ldrb	r2, [r7, #17]
 800ad1a:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	731a      	strb	r2, [r3, #12]
    {
 800ad28:	e020      	b.n	800ad6c <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ad30:	461a      	mov	r2, r3
 800ad32:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800ad36:	fb02 f303 	mul.w	r3, r2, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	dd0c      	ble.n	800ad58 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2200      	movs	r2, #0
 800ad48:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 800ad4a:	7c7b      	ldrb	r3, [r7, #17]
 800ad4c:	425b      	negs	r3, r3
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	b25a      	sxtb	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	731a      	strb	r2, [r3, #12]
    {
 800ad56:	e009      	b.n	800ad6c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	731a      	strb	r2, [r3, #12]
    {
 800ad64:	e002      	b.n	800ad6c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	7cfa      	ldrb	r2, [r7, #19]
 800ad6a:	731a      	strb	r2, [r3, #12]
    }
    return out;
 800ad6c:	697b      	ldr	r3, [r7, #20]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	080103dc 	.word	0x080103dc
 800ad7c:	08011124 	.word	0x08011124
 800ad80:	080103b0 	.word	0x080103b0
 800ad84:	0801040c 	.word	0x0801040c
 800ad88:	08010418 	.word	0x08010418

0800ad8c <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d004      	beq.n	800ada4 <cavlPrivateRetraceOnGrowth+0x18>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d005      	beq.n	800adb0 <cavlPrivateRetraceOnGrowth+0x24>
 800ada4:	4b23      	ldr	r3, [pc, #140]	@ (800ae34 <cavlPrivateRetraceOnGrowth+0xa8>)
 800ada6:	4a24      	ldr	r2, [pc, #144]	@ (800ae38 <cavlPrivateRetraceOnGrowth+0xac>)
 800ada8:	21b5      	movs	r1, #181	@ 0xb5
 800adaa:	4824      	ldr	r0, [pc, #144]	@ (800ae3c <cavlPrivateRetraceOnGrowth+0xb0>)
 800adac:	f000 ff4c 	bl	800bc48 <__assert_func>
    Cavl* c = added;      // Child
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800adba:	e023      	b.n	800ae04 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	bf0c      	ite	eq
 800adc6:	2301      	moveq	r3, #1
 800adc8:	2300      	movne	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	429a      	cmp	r2, r3
 800adda:	d005      	beq.n	800ade8 <cavlPrivateRetraceOnGrowth+0x5c>
 800addc:	4b18      	ldr	r3, [pc, #96]	@ (800ae40 <cavlPrivateRetraceOnGrowth+0xb4>)
 800adde:	4a16      	ldr	r2, [pc, #88]	@ (800ae38 <cavlPrivateRetraceOnGrowth+0xac>)
 800ade0:	21bb      	movs	r1, #187	@ 0xbb
 800ade2:	4816      	ldr	r0, [pc, #88]	@ (800ae3c <cavlPrivateRetraceOnGrowth+0xb0>)
 800ade4:	f000 ff30 	bl	800bc48 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	4619      	mov	r1, r3
 800adec:	6938      	ldr	r0, [r7, #16]
 800adee:	f7ff feeb 	bl	800abc8 <cavlPrivateAdjustBalance>
 800adf2:	6178      	str	r0, [r7, #20]
        p = c->up;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d003      	beq.n	800ae0c <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1d8      	bne.n	800adbc <cavlPrivateRetraceOnGrowth+0x30>
 800ae0a:	e000      	b.n	800ae0e <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 800ae0c:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d105      	bne.n	800ae20 <cavlPrivateRetraceOnGrowth+0x94>
 800ae14:	4b0b      	ldr	r3, [pc, #44]	@ (800ae44 <cavlPrivateRetraceOnGrowth+0xb8>)
 800ae16:	4a08      	ldr	r2, [pc, #32]	@ (800ae38 <cavlPrivateRetraceOnGrowth+0xac>)
 800ae18:	21c3      	movs	r1, #195	@ 0xc3
 800ae1a:	4808      	ldr	r0, [pc, #32]	@ (800ae3c <cavlPrivateRetraceOnGrowth+0xb0>)
 800ae1c:	f000 ff14 	bl	800bc48 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <cavlPrivateRetraceOnGrowth+0x9e>
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	e000      	b.n	800ae2c <cavlPrivateRetraceOnGrowth+0xa0>
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	08010424 	.word	0x08010424
 800ae38:	08011108 	.word	0x08011108
 800ae3c:	080103b0 	.word	0x080103b0
 800ae40:	08010448 	.word	0x08010448
 800ae44:	08010458 	.word	0x08010458

0800ae48 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08a      	sub	sp, #40	@ 0x28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d065      	beq.n	800af2c <cavlSearch+0xe4>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d062      	beq.n	800af2c <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 800ae70:	e02f      	b.n	800aed2 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4611      	mov	r1, r2
 800ae7a:	68b8      	ldr	r0, [r7, #8]
 800ae7c:	4798      	blx	r3
 800ae7e:	4603      	mov	r3, r0
 800ae80:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800ae82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d103      	bne.n	800ae92 <cavlSearch+0x4a>
            {
                out = *n;
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800ae90:	e023      	b.n	800aeda <cavlSearch+0x92>
            }
            up = *n;
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	bfcc      	ite	gt
 800aea4:	2301      	movgt	r3, #1
 800aea6:	2300      	movle	r3, #0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	3304      	adds	r3, #4
 800aeb0:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00b      	beq.n	800aed2 <cavlSearch+0x8a>
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6a3a      	ldr	r2, [r7, #32]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d005      	beq.n	800aed2 <cavlSearch+0x8a>
 800aec6:	4b1c      	ldr	r3, [pc, #112]	@ (800af38 <cavlSearch+0xf0>)
 800aec8:	4a1c      	ldr	r2, [pc, #112]	@ (800af3c <cavlSearch+0xf4>)
 800aeca:	21db      	movs	r1, #219	@ 0xdb
 800aecc:	481c      	ldr	r0, [pc, #112]	@ (800af40 <cavlSearch+0xf8>)
 800aece:	f000 febb 	bl	800bc48 <__assert_func>
        while (*n != NULL)
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1cb      	bne.n	800ae72 <cavlSearch+0x2a>
        }
        if (NULL == out)
 800aeda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d125      	bne.n	800af2c <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d004      	beq.n	800aef0 <cavlSearch+0xa8>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	68b8      	ldr	r0, [r7, #8]
 800aeea:	4798      	blx	r3
 800aeec:	4603      	mov	r3, r0
 800aeee:	e000      	b.n	800aef2 <cavlSearch+0xaa>
 800aef0:	2300      	movs	r3, #0
 800aef2:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 800aef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aefe:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 800af00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af02:	2200      	movs	r2, #0
 800af04:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800af06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af08:	2200      	movs	r2, #0
 800af0a:	609a      	str	r2, [r3, #8]
                out->up        = up;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0e:	6a3a      	ldr	r2, [r7, #32]
 800af10:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800af12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af14:	2200      	movs	r2, #0
 800af16:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 800af18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af1a:	f7ff ff37 	bl	800ad8c <cavlPrivateRetraceOnGrowth>
 800af1e:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <cavlSearch+0xe4>
                {
                    *root = rt;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 800af2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3728      	adds	r7, #40	@ 0x28
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	08010464 	.word	0x08010464
 800af3c:	080110fc 	.word	0x080110fc
 800af40:	080103b0 	.word	0x080103b0

0800af44 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 800af4c:	687b      	ldr	r3, [r7, #4]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
	...

0800af5c <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	4603      	mov	r3, r0
 800af64:	460a      	mov	r2, r1
 800af66:	80fb      	strh	r3, [r7, #6]
 800af68:	4613      	mov	r3, r2
 800af6a:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	021b      	lsls	r3, r3, #8
 800af70:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800af72:	88fb      	ldrh	r3, [r7, #6]
 800af74:	0a1b      	lsrs	r3, r3, #8
 800af76:	b299      	uxth	r1, r3
 800af78:	797b      	ldrb	r3, [r7, #5]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	404b      	eors	r3, r1
 800af7e:	b29b      	uxth	r3, r3
 800af80:	b2db      	uxtb	r3, r3
 800af82:	4905      	ldr	r1, [pc, #20]	@ (800af98 <crcAddByte+0x3c>)
 800af84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 800af88:	4053      	eors	r3, r2
 800af8a:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	08010de0 	.word	0x08010de0

0800af9c <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d108      	bne.n	800afc2 <crcAdd+0x26>
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d005      	beq.n	800afc2 <crcAdd+0x26>
 800afb6:	4b12      	ldr	r3, [pc, #72]	@ (800b000 <crcAdd+0x64>)
 800afb8:	4a12      	ldr	r2, [pc, #72]	@ (800b004 <crcAdd+0x68>)
 800afba:	2185      	movs	r1, #133	@ 0x85
 800afbc:	4812      	ldr	r0, [pc, #72]	@ (800b008 <crcAdd+0x6c>)
 800afbe:	f000 fe43 	bl	800bc48 <__assert_func>
    TransferCRC    out = crc;
 800afc2:	89fb      	ldrh	r3, [r7, #14]
 800afc4:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800afca:	2300      	movs	r3, #0
 800afcc:	617b      	str	r3, [r7, #20]
 800afce:	e00e      	b.n	800afee <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	781a      	ldrb	r2, [r3, #0]
 800afd4:	8bfb      	ldrh	r3, [r7, #30]
 800afd6:	4611      	mov	r1, r2
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff ffbf 	bl	800af5c <crcAddByte>
 800afde:	4603      	mov	r3, r0
 800afe0:	83fb      	strh	r3, [r7, #30]
        ++p;
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	3301      	adds	r3, #1
 800afe6:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	3301      	adds	r3, #1
 800afec:	617b      	str	r3, [r7, #20]
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d3ec      	bcc.n	800afd0 <crcAdd+0x34>
    }
    return out;
 800aff6:	8bfb      	ldrh	r3, [r7, #30]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3720      	adds	r7, #32
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	08010508 	.word	0x08010508
 800b004:	08011050 	.word	0x08011050
 800b008:	08010530 	.word	0x08010530

0800b00c <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	4603      	mov	r3, r0
 800b014:	460a      	mov	r2, r1
 800b016:	80fb      	strh	r3, [r7, #6]
 800b018:	4613      	mov	r3, r2
 800b01a:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800b01c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800b020:	2b00      	cmp	r3, #0
 800b022:	da05      	bge.n	800b030 <txMakeMessageSessionSpecifier+0x24>
 800b024:	4b0e      	ldr	r3, [pc, #56]	@ (800b060 <txMakeMessageSessionSpecifier+0x54>)
 800b026:	4a0f      	ldr	r2, [pc, #60]	@ (800b064 <txMakeMessageSessionSpecifier+0x58>)
 800b028:	21ac      	movs	r1, #172	@ 0xac
 800b02a:	480f      	ldr	r0, [pc, #60]	@ (800b068 <txMakeMessageSessionSpecifier+0x5c>)
 800b02c:	f000 fe0c 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800b030:	88fb      	ldrh	r3, [r7, #6]
 800b032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b036:	d305      	bcc.n	800b044 <txMakeMessageSessionSpecifier+0x38>
 800b038:	4b0c      	ldr	r3, [pc, #48]	@ (800b06c <txMakeMessageSessionSpecifier+0x60>)
 800b03a:	4a0a      	ldr	r2, [pc, #40]	@ (800b064 <txMakeMessageSessionSpecifier+0x58>)
 800b03c:	21ad      	movs	r1, #173	@ 0xad
 800b03e:	480a      	ldr	r0, [pc, #40]	@ (800b068 <txMakeMessageSessionSpecifier+0x5c>)
 800b040:	f000 fe02 	bl	800bc48 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 800b044:	88fb      	ldrh	r3, [r7, #6]
 800b046:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800b04e:	797a      	ldrb	r2, [r7, #5]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	021b      	lsls	r3, r3, #8
 800b054:	4313      	orrs	r3, r2
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	08010560 	.word	0x08010560
 800b064:	08011058 	.word	0x08011058
 800b068:	08010530 	.word	0x08010530
 800b06c:	08010574 	.word	0x08010574

0800b070 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800b070:	b590      	push	{r4, r7, lr}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	4611      	mov	r1, r2
 800b07c:	461a      	mov	r2, r3
 800b07e:	4623      	mov	r3, r4
 800b080:	80fb      	strh	r3, [r7, #6]
 800b082:	4603      	mov	r3, r0
 800b084:	717b      	strb	r3, [r7, #5]
 800b086:	460b      	mov	r3, r1
 800b088:	713b      	strb	r3, [r7, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800b08e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	da05      	bge.n	800b0a2 <txMakeServiceSessionSpecifier+0x32>
 800b096:	4b17      	ldr	r3, [pc, #92]	@ (800b0f4 <txMakeServiceSessionSpecifier+0x84>)
 800b098:	4a17      	ldr	r2, [pc, #92]	@ (800b0f8 <txMakeServiceSessionSpecifier+0x88>)
 800b09a:	21b7      	movs	r1, #183	@ 0xb7
 800b09c:	4817      	ldr	r0, [pc, #92]	@ (800b0fc <txMakeServiceSessionSpecifier+0x8c>)
 800b09e:	f000 fdd3 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800b0a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	da05      	bge.n	800b0b6 <txMakeServiceSessionSpecifier+0x46>
 800b0aa:	4b15      	ldr	r3, [pc, #84]	@ (800b100 <txMakeServiceSessionSpecifier+0x90>)
 800b0ac:	4a12      	ldr	r2, [pc, #72]	@ (800b0f8 <txMakeServiceSessionSpecifier+0x88>)
 800b0ae:	21b8      	movs	r1, #184	@ 0xb8
 800b0b0:	4812      	ldr	r0, [pc, #72]	@ (800b0fc <txMakeServiceSessionSpecifier+0x8c>)
 800b0b2:	f000 fdc9 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800b0b6:	88fb      	ldrh	r3, [r7, #6]
 800b0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0bc:	d305      	bcc.n	800b0ca <txMakeServiceSessionSpecifier+0x5a>
 800b0be:	4b11      	ldr	r3, [pc, #68]	@ (800b104 <txMakeServiceSessionSpecifier+0x94>)
 800b0c0:	4a0d      	ldr	r2, [pc, #52]	@ (800b0f8 <txMakeServiceSessionSpecifier+0x88>)
 800b0c2:	21b9      	movs	r1, #185	@ 0xb9
 800b0c4:	480d      	ldr	r0, [pc, #52]	@ (800b0fc <txMakeServiceSessionSpecifier+0x8c>)
 800b0c6:	f000 fdbf 	bl	800bc48 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800b0ca:	793a      	ldrb	r2, [r7, #4]
 800b0cc:	78fb      	ldrb	r3, [r7, #3]
 800b0ce:	01db      	lsls	r3, r3, #7
 800b0d0:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800b0d2:	88fb      	ldrh	r3, [r7, #6]
 800b0d4:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800b0d6:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800b0d8:	797a      	ldrb	r2, [r7, #5]
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	d002      	beq.n	800b0e4 <txMakeServiceSessionSpecifier+0x74>
 800b0de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b0e2:	e000      	b.n	800b0e6 <txMakeServiceSessionSpecifier+0x76>
 800b0e4:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800b0e6:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800b0e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd90      	pop	{r4, r7, pc}
 800b0f4:	08010560 	.word	0x08010560
 800b0f8:	08011078 	.word	0x08011078
 800b0fc:	08010530 	.word	0x08010530
 800b100:	08010588 	.word	0x08010588
 800b104:	0801059c 	.word	0x0801059c

0800b108 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800b110:	2340      	movs	r3, #64	@ 0x40
 800b112:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b07      	cmp	r3, #7
 800b11c:	d802      	bhi.n	800b124 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800b11e:	2308      	movs	r3, #8
 800b120:	60fb      	str	r3, [r7, #12]
 800b122:	e014      	b.n	800b14e <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d808      	bhi.n	800b13e <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 800b12c:	4a0c      	ldr	r2, [pc, #48]	@ (800b160 <adjustPresentationLayerMTU+0x58>)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4413      	add	r3, r2
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	461a      	mov	r2, r3
 800b136:	4b0b      	ldr	r3, [pc, #44]	@ (800b164 <adjustPresentationLayerMTU+0x5c>)
 800b138:	5c9b      	ldrb	r3, [r3, r2]
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	e007      	b.n	800b14e <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800b13e:	4a08      	ldr	r2, [pc, #32]	@ (800b160 <adjustPresentationLayerMTU+0x58>)
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	4413      	add	r3, r2
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	4b06      	ldr	r3, [pc, #24]	@ (800b164 <adjustPresentationLayerMTU+0x5c>)
 800b14a:	5c9b      	ldrb	r3, [r3, r2]
 800b14c:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	3b01      	subs	r3, #1
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	08010ff0 	.word	0x08010ff0
 800b164:	08010fe0 	.word	0x08010fe0

0800b168 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b08a      	sub	sp, #40	@ 0x28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d105      	bne.n	800b188 <txMakeCANID+0x20>
 800b17c:	4b60      	ldr	r3, [pc, #384]	@ (800b300 <txMakeCANID+0x198>)
 800b17e:	4a61      	ldr	r2, [pc, #388]	@ (800b304 <txMakeCANID+0x19c>)
 800b180:	21d9      	movs	r1, #217	@ 0xd9
 800b182:	4861      	ldr	r0, [pc, #388]	@ (800b308 <txMakeCANID+0x1a0>)
 800b184:	f000 fd60 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800b188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d105      	bne.n	800b19a <txMakeCANID+0x32>
 800b18e:	4b5f      	ldr	r3, [pc, #380]	@ (800b30c <txMakeCANID+0x1a4>)
 800b190:	4a5c      	ldr	r2, [pc, #368]	@ (800b304 <txMakeCANID+0x19c>)
 800b192:	21da      	movs	r1, #218	@ 0xda
 800b194:	485c      	ldr	r0, [pc, #368]	@ (800b308 <txMakeCANID+0x1a0>)
 800b196:	f000 fd57 	bl	800bc48 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b19a:	f06f 0301 	mvn.w	r3, #1
 800b19e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	785b      	ldrb	r3, [r3, #1]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d157      	bne.n	800b258 <txMakeCANID+0xf0>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	791b      	ldrb	r3, [r3, #4]
 800b1ac:	2bff      	cmp	r3, #255	@ 0xff
 800b1ae:	d153      	bne.n	800b258 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800b1b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1b8:	d24e      	bcs.n	800b258 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b1ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	db11      	blt.n	800b1e6 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	885b      	ldrh	r3, [r3, #2]
 800b1c6:	78fa      	ldrb	r2, [r7, #3]
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7ff ff1e 	bl	800b00c <txMakeMessageSessionSpecifier>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da75      	bge.n	800b2c6 <txMakeCANID+0x15e>
 800b1da:	4b4d      	ldr	r3, [pc, #308]	@ (800b310 <txMakeCANID+0x1a8>)
 800b1dc:	4a49      	ldr	r2, [pc, #292]	@ (800b304 <txMakeCANID+0x19c>)
 800b1de:	21e2      	movs	r1, #226	@ 0xe2
 800b1e0:	4849      	ldr	r0, [pc, #292]	@ (800b308 <txMakeCANID+0x1a0>)
 800b1e2:	f000 fd31 	bl	800bc48 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d830      	bhi.n	800b250 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d108      	bne.n	800b206 <txMakeCANID+0x9e>
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <txMakeCANID+0x9e>
 800b1fa:	4b46      	ldr	r3, [pc, #280]	@ (800b314 <txMakeCANID+0x1ac>)
 800b1fc:	4a41      	ldr	r2, [pc, #260]	@ (800b304 <txMakeCANID+0x19c>)
 800b1fe:	21e6      	movs	r1, #230	@ 0xe6
 800b200:	4841      	ldr	r0, [pc, #260]	@ (800b308 <txMakeCANID+0x1a0>)
 800b202:	f000 fd21 	bl	800bc48 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b20e:	f7ff fec5 	bl	800af9c <crcAdd>
 800b212:	4603      	mov	r3, r0
 800b214:	b2db      	uxtb	r3, r3
 800b216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b21a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	885b      	ldrh	r3, [r3, #2]
 800b222:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b226:	4611      	mov	r1, r2
 800b228:	4618      	mov	r0, r3
 800b22a:	f7ff feef 	bl	800b00c <txMakeMessageSessionSpecifier>
 800b22e:	4603      	mov	r3, r0
 800b230:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b234:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b23c:	d305      	bcc.n	800b24a <txMakeCANID+0xe2>
 800b23e:	4b36      	ldr	r3, [pc, #216]	@ (800b318 <txMakeCANID+0x1b0>)
 800b240:	4a30      	ldr	r2, [pc, #192]	@ (800b304 <txMakeCANID+0x19c>)
 800b242:	21e9      	movs	r1, #233	@ 0xe9
 800b244:	4830      	ldr	r0, [pc, #192]	@ (800b308 <txMakeCANID+0x1a0>)
 800b246:	f000 fcff 	bl	800bc48 <__assert_func>
            out = (int32_t) spec;
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b24e:	e03a      	b.n	800b2c6 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800b250:	f06f 0301 	mvn.w	r3, #1
 800b254:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b256:	e036      	b.n	800b2c6 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	785b      	ldrb	r3, [r3, #1]
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d003      	beq.n	800b268 <txMakeCANID+0x100>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	785b      	ldrb	r3, [r3, #1]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d12a      	bne.n	800b2be <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	791b      	ldrb	r3, [r3, #4]
 800b26c:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800b26e:	2b00      	cmp	r3, #0
 800b270:	db25      	blt.n	800b2be <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	885b      	ldrh	r3, [r3, #2]
 800b276:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b27a:	d220      	bcs.n	800b2be <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b27c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b280:	2b00      	cmp	r3, #0
 800b282:	db18      	blt.n	800b2b6 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	bf0c      	ite	eq
 800b290:	2301      	moveq	r3, #1
 800b292:	2300      	movne	r3, #0
 800b294:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800b29a:	78fa      	ldrb	r2, [r7, #3]
 800b29c:	f7ff fee8 	bl	800b070 <txMakeServiceSessionSpecifier>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	da0f      	bge.n	800b2ca <txMakeCANID+0x162>
 800b2aa:	4b19      	ldr	r3, [pc, #100]	@ (800b310 <txMakeCANID+0x1a8>)
 800b2ac:	4a15      	ldr	r2, [pc, #84]	@ (800b304 <txMakeCANID+0x19c>)
 800b2ae:	21fa      	movs	r1, #250	@ 0xfa
 800b2b0:	4815      	ldr	r0, [pc, #84]	@ (800b308 <txMakeCANID+0x1a0>)
 800b2b2:	f000 fcc9 	bl	800bc48 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800b2b6:	f06f 0301 	mvn.w	r3, #1
 800b2ba:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b2bc:	e005      	b.n	800b2ca <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b2be:	f06f 0301 	mvn.w	r3, #1
 800b2c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2c4:	e002      	b.n	800b2cc <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b2c6:	bf00      	nop
 800b2c8:	e000      	b.n	800b2cc <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800b2ca:	bf00      	nop
    }

    if (out >= 0)
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	db10      	blt.n	800b2f4 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	2b07      	cmp	r3, #7
 800b2dc:	d807      	bhi.n	800b2ee <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	069a      	lsls	r2, r3, #26
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2ec:	e002      	b.n	800b2f4 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 800b2ee:	f06f 0301 	mvn.w	r3, #1
 800b2f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3728      	adds	r7, #40	@ 0x28
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	080105b0 	.word	0x080105b0
 800b304:	08011044 	.word	0x08011044
 800b308:	08010530 	.word	0x08010530
 800b30c:	080105c4 	.word	0x080105c4
 800b310:	080105e0 	.word	0x080105e0
 800b314:	080105ec 	.word	0x080105ec
 800b318:	08010620 	.word	0x08010620

0800b31c <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 800b31c:	b590      	push	{r4, r7, lr}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	4604      	mov	r4, r0
 800b324:	4608      	mov	r0, r1
 800b326:	4611      	mov	r1, r2
 800b328:	461a      	mov	r2, r3
 800b32a:	4623      	mov	r3, r4
 800b32c:	71fb      	strb	r3, [r7, #7]
 800b32e:	4603      	mov	r3, r0
 800b330:	71bb      	strb	r3, [r7, #6]
 800b332:	460b      	mov	r3, r1
 800b334:	717b      	strb	r3, [r7, #5]
 800b336:	4613      	mov	r3, r2
 800b338:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800b33a:	79fb      	ldrb	r3, [r7, #7]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d009      	beq.n	800b354 <txMakeTailByte+0x38>
 800b340:	797b      	ldrb	r3, [r7, #5]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d006      	beq.n	800b354 <txMakeTailByte+0x38>
 800b346:	4b13      	ldr	r3, [pc, #76]	@ (800b394 <txMakeTailByte+0x78>)
 800b348:	4a13      	ldr	r2, [pc, #76]	@ (800b398 <txMakeTailByte+0x7c>)
 800b34a:	f240 111b 	movw	r1, #283	@ 0x11b
 800b34e:	4813      	ldr	r0, [pc, #76]	@ (800b39c <txMakeTailByte+0x80>)
 800b350:	f000 fc7a 	bl	800bc48 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <txMakeTailByte+0x42>
 800b35a:	2280      	movs	r2, #128	@ 0x80
 800b35c:	e000      	b.n	800b360 <txMakeTailByte+0x44>
 800b35e:	2200      	movs	r2, #0
 800b360:	79bb      	ldrb	r3, [r7, #6]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <txMakeTailByte+0x4e>
 800b366:	2340      	movs	r3, #64	@ 0x40
 800b368:	e000      	b.n	800b36c <txMakeTailByte+0x50>
 800b36a:	2300      	movs	r3, #0
 800b36c:	4313      	orrs	r3, r2
 800b36e:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800b370:	797a      	ldrb	r2, [r7, #5]
 800b372:	2a00      	cmp	r2, #0
 800b374:	d001      	beq.n	800b37a <txMakeTailByte+0x5e>
 800b376:	2220      	movs	r2, #32
 800b378:	e000      	b.n	800b37c <txMakeTailByte+0x60>
 800b37a:	2200      	movs	r2, #0
 800b37c:	4313      	orrs	r3, r2
 800b37e:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800b380:	793b      	ldrb	r3, [r7, #4]
 800b382:	f003 031f 	and.w	r3, r3, #31
 800b386:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800b388:	4313      	orrs	r3, r2
 800b38a:	b2db      	uxtb	r3, r3
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	bd90      	pop	{r4, r7, pc}
 800b394:	0801063c 	.word	0x0801063c
 800b398:	080110ec 	.word	0x080110ec
 800b39c:	08010530 	.word	0x08010530

0800b3a0 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b40      	cmp	r3, #64	@ 0x40
 800b3ac:	d906      	bls.n	800b3bc <txRoundFramePayloadSizeUp+0x1c>
 800b3ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b3ec <txRoundFramePayloadSizeUp+0x4c>)
 800b3b0:	4a0f      	ldr	r2, [pc, #60]	@ (800b3f0 <txRoundFramePayloadSizeUp+0x50>)
 800b3b2:	f44f 7192 	mov.w	r1, #292	@ 0x124
 800b3b6:	480f      	ldr	r0, [pc, #60]	@ (800b3f4 <txRoundFramePayloadSizeUp+0x54>)
 800b3b8:	f000 fc46 	bl	800bc48 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 800b3bc:	4a0e      	ldr	r2, [pc, #56]	@ (800b3f8 <txRoundFramePayloadSizeUp+0x58>)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b0f      	cmp	r3, #15
 800b3ca:	d906      	bls.n	800b3da <txRoundFramePayloadSizeUp+0x3a>
 800b3cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b3fc <txRoundFramePayloadSizeUp+0x5c>)
 800b3ce:	4a08      	ldr	r2, [pc, #32]	@ (800b3f0 <txRoundFramePayloadSizeUp+0x50>)
 800b3d0:	f240 1127 	movw	r1, #295	@ 0x127
 800b3d4:	4807      	ldr	r0, [pc, #28]	@ (800b3f4 <txRoundFramePayloadSizeUp+0x54>)
 800b3d6:	f000 fc37 	bl	800bc48 <__assert_func>
    return CanardCANDLCToLength[y];
 800b3da:	4a09      	ldr	r2, [pc, #36]	@ (800b400 <txRoundFramePayloadSizeUp+0x60>)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	4413      	add	r3, r2
 800b3e0:	781b      	ldrb	r3, [r3, #0]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	08010664 	.word	0x08010664
 800b3f0:	080110bc 	.word	0x080110bc
 800b3f4:	08010530 	.word	0x08010530
 800b3f8:	08010ff0 	.word	0x08010ff0
 800b3fc:	080106ac 	.word	0x080106ac
 800b400:	08010fe0 	.word	0x08010fe0

0800b404 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <txAllocateQueueItem+0x22>
 800b418:	4b1f      	ldr	r3, [pc, #124]	@ (800b498 <txAllocateQueueItem+0x94>)
 800b41a:	4a20      	ldr	r2, [pc, #128]	@ (800b49c <txAllocateQueueItem+0x98>)
 800b41c:	f240 1131 	movw	r1, #305	@ 0x131
 800b420:	481f      	ldr	r0, [pc, #124]	@ (800b4a0 <txAllocateQueueItem+0x9c>)
 800b422:	f000 fc11 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800b426:	6a3b      	ldr	r3, [r7, #32]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d106      	bne.n	800b43a <txAllocateQueueItem+0x36>
 800b42c:	4b1d      	ldr	r3, [pc, #116]	@ (800b4a4 <txAllocateQueueItem+0xa0>)
 800b42e:	4a1b      	ldr	r2, [pc, #108]	@ (800b49c <txAllocateQueueItem+0x98>)
 800b430:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800b434:	481a      	ldr	r0, [pc, #104]	@ (800b4a0 <txAllocateQueueItem+0x9c>)
 800b436:	f000 fc07 	bl	800bc48 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	6a3a      	ldr	r2, [r7, #32]
 800b440:	3230      	adds	r2, #48	@ 0x30
 800b442:	4611      	mov	r1, r2
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	4798      	blx	r3
 800b448:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01e      	beq.n	800b48e <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2200      	movs	r2, #0
 800b45a:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2200      	movs	r2, #0
 800b460:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2200      	movs	r2, #0
 800b466:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	2200      	movs	r2, #0
 800b46c:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800b46e:	6979      	ldr	r1, [r7, #20]
 800b470:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b474:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	6a3a      	ldr	r2, [r7, #32]
 800b47c:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	621a      	str	r2, [r3, #32]
    }
    return out;
 800b48e:	697b      	ldr	r3, [r7, #20]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	080106f4 	.word	0x080106f4
 800b49c:	080110d8 	.word	0x080110d8
 800b4a0:	08010530 	.word	0x08010530
 800b4a4:	08010708 	.word	0x08010708

0800b4a8 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <txAVLPredicate+0x1e>
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d106      	bne.n	800b4d4 <txAVLPredicate+0x2c>
 800b4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f0 <txAVLPredicate+0x48>)
 800b4c8:	4a0a      	ldr	r2, [pc, #40]	@ (800b4f4 <txAVLPredicate+0x4c>)
 800b4ca:	f240 114d 	movw	r1, #333	@ 0x14d
 800b4ce:	480a      	ldr	r0, [pc, #40]	@ (800b4f8 <txAVLPredicate+0x50>)
 800b4d0:	f000 fbba 	bl	800bc48 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6a1a      	ldr	r2, [r3, #32]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	6a1b      	ldr	r3, [r3, #32]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d301      	bcc.n	800b4e4 <txAVLPredicate+0x3c>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e001      	b.n	800b4e8 <txAVLPredicate+0x40>
 800b4e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	0801071c 	.word	0x0801071c
 800b4f4:	080110ac 	.word	0x080110ac
 800b4f8:	08010530 	.word	0x08010530

0800b4fc <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 800b4fc:	b590      	push	{r4, r7, lr}
 800b4fe:	b08d      	sub	sp, #52	@ 0x34
 800b500:	af02      	add	r7, sp, #8
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d106      	bne.n	800b51e <txPushSingleFrame+0x22>
 800b510:	4b5c      	ldr	r3, [pc, #368]	@ (800b684 <txPushSingleFrame+0x188>)
 800b512:	4a5d      	ldr	r2, [pc, #372]	@ (800b688 <txPushSingleFrame+0x18c>)
 800b514:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 800b518:	485c      	ldr	r0, [pc, #368]	@ (800b68c <txPushSingleFrame+0x190>)
 800b51a:	f000 fb95 	bl	800bc48 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800b51e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b520:	2b00      	cmp	r3, #0
 800b522:	d109      	bne.n	800b538 <txPushSingleFrame+0x3c>
 800b524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b526:	2b00      	cmp	r3, #0
 800b528:	d006      	beq.n	800b538 <txPushSingleFrame+0x3c>
 800b52a:	4b59      	ldr	r3, [pc, #356]	@ (800b690 <txPushSingleFrame+0x194>)
 800b52c:	4a56      	ldr	r2, [pc, #344]	@ (800b688 <txPushSingleFrame+0x18c>)
 800b52e:	f240 115b 	movw	r1, #347	@ 0x15b
 800b532:	4856      	ldr	r0, [pc, #344]	@ (800b68c <txPushSingleFrame+0x190>)
 800b534:	f000 fb88 	bl	800bc48 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800b538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b53a:	3301      	adds	r3, #1
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff ff2f 	bl	800b3a0 <txRoundFramePayloadSizeUp>
 800b542:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 800b544:	6a3a      	ldr	r2, [r7, #32]
 800b546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b548:	429a      	cmp	r2, r3
 800b54a:	d806      	bhi.n	800b55a <txPushSingleFrame+0x5e>
 800b54c:	4b51      	ldr	r3, [pc, #324]	@ (800b694 <txPushSingleFrame+0x198>)
 800b54e:	4a4e      	ldr	r2, [pc, #312]	@ (800b688 <txPushSingleFrame+0x18c>)
 800b550:	f240 115d 	movw	r1, #349	@ 0x15d
 800b554:	484d      	ldr	r0, [pc, #308]	@ (800b68c <txPushSingleFrame+0x190>)
 800b556:	f000 fb77 	bl	800bc48 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800b55a:	6a3a      	ldr	r2, [r7, #32]
 800b55c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	3b01      	subs	r3, #1
 800b562:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 800b564:	69fa      	ldr	r2, [r7, #28]
 800b566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b568:	4413      	add	r3, r2
 800b56a:	3301      	adds	r3, #1
 800b56c:	6a3a      	ldr	r2, [r7, #32]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d006      	beq.n	800b580 <txPushSingleFrame+0x84>
 800b572:	4b49      	ldr	r3, [pc, #292]	@ (800b698 <txPushSingleFrame+0x19c>)
 800b574:	4a44      	ldr	r2, [pc, #272]	@ (800b688 <txPushSingleFrame+0x18c>)
 800b576:	f240 115f 	movw	r1, #351	@ 0x15f
 800b57a:	4844      	ldr	r0, [pc, #272]	@ (800b68c <txPushSingleFrame+0x190>)
 800b57c:	f000 fb64 	bl	800bc48 <__assert_func>
    int32_t       out = 0;
 800b580:	2300      	movs	r3, #0
 800b582:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	689a      	ldr	r2, [r3, #8]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d209      	bcs.n	800b5a4 <txPushSingleFrame+0xa8>
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b598:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b59a:	68b8      	ldr	r0, [r7, #8]
 800b59c:	f7ff ff32 	bl	800b404 <txAllocateQueueItem>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	e000      	b.n	800b5a6 <txPushSingleFrame+0xaa>
 800b5a4:	2300      	movs	r3, #0
    TxItem* const tqi =
 800b5a6:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d054      	beq.n	800b658 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 800b5ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d010      	beq.n	800b5d6 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 800b5b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d106      	bne.n	800b5c8 <txPushSingleFrame+0xcc>
 800b5ba:	4b38      	ldr	r3, [pc, #224]	@ (800b69c <txPushSingleFrame+0x1a0>)
 800b5bc:	4a32      	ldr	r2, [pc, #200]	@ (800b688 <txPushSingleFrame+0x18c>)
 800b5be:	f240 1167 	movw	r1, #359	@ 0x167
 800b5c2:	4832      	ldr	r0, [pc, #200]	@ (800b68c <txPushSingleFrame+0x190>)
 800b5c4:	f000 fb40 	bl	800bc48 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	3330      	adds	r3, #48	@ 0x30
 800b5cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f001 fcb8 	bl	800cf46 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800b5d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5d8:	3330      	adds	r3, #48	@ 0x30
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	4413      	add	r3, r2
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f001 fbc9 	bl	800cd7a <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	1e5c      	subs	r4, r3, #1
 800b5ec:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	2001      	movs	r0, #1
 800b5f6:	f7ff fe91 	bl	800b31c <txMakeTailByte>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	4423      	add	r3, r4
 800b602:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f103 000c 	add.w	r0, r3, #12
 800b60c:	69b9      	ldr	r1, [r7, #24]
 800b60e:	4b24      	ldr	r3, [pc, #144]	@ (800b6a0 <txPushSingleFrame+0x1a4>)
 800b610:	4a24      	ldr	r2, [pc, #144]	@ (800b6a4 <txPushSingleFrame+0x1a8>)
 800b612:	f7ff fc19 	bl	800ae48 <cavlSearch>
 800b616:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	697a      	ldr	r2, [r7, #20]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d006      	beq.n	800b62e <txPushSingleFrame+0x132>
 800b620:	4b21      	ldr	r3, [pc, #132]	@ (800b6a8 <txPushSingleFrame+0x1ac>)
 800b622:	4a19      	ldr	r2, [pc, #100]	@ (800b688 <txPushSingleFrame+0x18c>)
 800b624:	f240 1173 	movw	r1, #371	@ 0x173
 800b628:	4818      	ldr	r0, [pc, #96]	@ (800b68c <txPushSingleFrame+0x190>)
 800b62a:	f000 fb0d 	bl	800bc48 <__assert_func>
        que->size++;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	1c5a      	adds	r2, r3, #1
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	689a      	ldr	r2, [r3, #8]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d906      	bls.n	800b652 <txPushSingleFrame+0x156>
 800b644:	4b19      	ldr	r3, [pc, #100]	@ (800b6ac <txPushSingleFrame+0x1b0>)
 800b646:	4a10      	ldr	r2, [pc, #64]	@ (800b688 <txPushSingleFrame+0x18c>)
 800b648:	f240 1175 	movw	r1, #373	@ 0x175
 800b64c:	480f      	ldr	r0, [pc, #60]	@ (800b68c <txPushSingleFrame+0x190>)
 800b64e:	f000 fafb 	bl	800bc48 <__assert_func>
        out = 1;  // One frame enqueued.
 800b652:	2301      	movs	r3, #1
 800b654:	627b      	str	r3, [r7, #36]	@ 0x24
 800b656:	e002      	b.n	800b65e <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800b658:	f06f 0302 	mvn.w	r3, #2
 800b65c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	2b00      	cmp	r3, #0
 800b662:	db09      	blt.n	800b678 <txPushSingleFrame+0x17c>
 800b664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b666:	2b01      	cmp	r3, #1
 800b668:	d006      	beq.n	800b678 <txPushSingleFrame+0x17c>
 800b66a:	4b11      	ldr	r3, [pc, #68]	@ (800b6b0 <txPushSingleFrame+0x1b4>)
 800b66c:	4a06      	ldr	r2, [pc, #24]	@ (800b688 <txPushSingleFrame+0x18c>)
 800b66e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b672:	4806      	ldr	r0, [pc, #24]	@ (800b68c <txPushSingleFrame+0x190>)
 800b674:	f000 fae8 	bl	800bc48 <__assert_func>
    return out;
 800b678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	372c      	adds	r7, #44	@ 0x2c
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd90      	pop	{r4, r7, pc}
 800b682:	bf00      	nop
 800b684:	080106f4 	.word	0x080106f4
 800b688:	08011098 	.word	0x08011098
 800b68c:	08010530 	.word	0x08010530
 800b690:	08010750 	.word	0x08010750
 800b694:	08010780 	.word	0x08010780
 800b698:	080107a4 	.word	0x080107a4
 800b69c:	080107e0 	.word	0x080107e0
 800b6a0:	0800af45 	.word	0x0800af45
 800b6a4:	0800b4a9 	.word	0x0800b4a9
 800b6a8:	080107f8 	.word	0x080107f8
 800b6ac:	08010810 	.word	0x08010810
 800b6b0:	0801082c 	.word	0x0801082c

0800b6b4 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 800b6b4:	b590      	push	{r4, r7, lr}
 800b6b6:	b093      	sub	sp, #76	@ 0x4c
 800b6b8:	af02      	add	r7, sp, #8
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <txGenerateMultiFrameChain+0x20>
 800b6c6:	4b93      	ldr	r3, [pc, #588]	@ (800b914 <txGenerateMultiFrameChain+0x260>)
 800b6c8:	4a93      	ldr	r2, [pc, #588]	@ (800b918 <txGenerateMultiFrameChain+0x264>)
 800b6ca:	f240 1189 	movw	r1, #393	@ 0x189
 800b6ce:	4893      	ldr	r0, [pc, #588]	@ (800b91c <txGenerateMultiFrameChain+0x268>)
 800b6d0:	f000 faba 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <txGenerateMultiFrameChain+0x34>
 800b6da:	4b91      	ldr	r3, [pc, #580]	@ (800b920 <txGenerateMultiFrameChain+0x26c>)
 800b6dc:	4a8e      	ldr	r2, [pc, #568]	@ (800b918 <txGenerateMultiFrameChain+0x264>)
 800b6de:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800b6e2:	488e      	ldr	r0, [pc, #568]	@ (800b91c <txGenerateMultiFrameChain+0x268>)
 800b6e4:	f000 fab0 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800b6e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d806      	bhi.n	800b6fe <txGenerateMultiFrameChain+0x4a>
 800b6f0:	4b8c      	ldr	r3, [pc, #560]	@ (800b924 <txGenerateMultiFrameChain+0x270>)
 800b6f2:	4a89      	ldr	r2, [pc, #548]	@ (800b918 <txGenerateMultiFrameChain+0x264>)
 800b6f4:	f240 118b 	movw	r1, #395	@ 0x18b
 800b6f8:	4888      	ldr	r0, [pc, #544]	@ (800b91c <txGenerateMultiFrameChain+0x268>)
 800b6fa:	f000 faa5 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800b6fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b700:	2b00      	cmp	r3, #0
 800b702:	d106      	bne.n	800b712 <txGenerateMultiFrameChain+0x5e>
 800b704:	4b88      	ldr	r3, [pc, #544]	@ (800b928 <txGenerateMultiFrameChain+0x274>)
 800b706:	4a84      	ldr	r2, [pc, #528]	@ (800b918 <txGenerateMultiFrameChain+0x264>)
 800b708:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800b70c:	4883      	ldr	r0, [pc, #524]	@ (800b91c <txGenerateMultiFrameChain+0x268>)
 800b70e:	f000 fa9b 	bl	800bc48 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800b712:	2300      	movs	r3, #0
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	2300      	movs	r3, #0
 800b71c:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800b71e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b720:	3302      	adds	r3, #2
 800b722:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 800b724:	2300      	movs	r3, #0
 800b726:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 800b728:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b72a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b72c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b730:	f7ff fc34 	bl	800af9c <crcAdd>
 800b734:	4603      	mov	r3, r0
 800b736:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 800b738:	2301      	movs	r3, #1
 800b73a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800b73e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b740:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 800b742:	e0d4      	b.n	800b8ee <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	3301      	adds	r3, #1
 800b748:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 800b74a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b74c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b74e:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	429a      	cmp	r2, r3
 800b754:	d908      	bls.n	800b768 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800b756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	3301      	adds	r3, #1
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff fe1e 	bl	800b3a0 <txRoundFramePayloadSizeUp>
 800b764:	4603      	mov	r3, r0
 800b766:	e001      	b.n	800b76c <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 800b76c:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800b76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b776:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b778:	68b8      	ldr	r0, [r7, #8]
 800b77a:	f7ff fe43 	bl	800b404 <txAllocateQueueItem>
 800b77e:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d102      	bne.n	800b78c <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	613b      	str	r3, [r7, #16]
 800b78a:	e002      	b.n	800b792 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	6a3a      	ldr	r2, [r7, #32]
 800b790:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f000 80ae 	beq.w	800b8fa <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 800b7a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d21c      	bcs.n	800b7ea <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 800b7b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 800b7b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d901      	bls.n	800b7c4 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	3330      	adds	r3, #48	@ 0x30
 800b7c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f001 fbba 	bl	800cf46 <memcpy>
            frame_offset = frame_offset + move_size;
 800b7d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7d6:	4413      	add	r3, r2
 800b7d8:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 800b7da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7de:	4413      	add	r3, r2
 800b7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 800b7e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e6:	4413      	add	r3, r2
 800b7e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 800b7ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d343      	bcc.n	800b87a <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800b7f2:	e00f      	b.n	800b814 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f8:	4413      	add	r3, r2
 800b7fa:	3330      	adds	r3, #48	@ 0x30
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800b800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b802:	3301      	adds	r3, #1
 800b804:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 800b806:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b808:	2100      	movs	r1, #0
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fba6 	bl	800af5c <crcAddByte>
 800b810:	4603      	mov	r3, r0
 800b812:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800b814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b816:	3302      	adds	r3, #2
 800b818:	69fa      	ldr	r2, [r7, #28]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d8ea      	bhi.n	800b7f4 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800b81e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	429a      	cmp	r2, r3
 800b824:	d213      	bcs.n	800b84e <txGenerateMultiFrameChain+0x19a>
 800b826:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b828:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d10f      	bne.n	800b84e <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800b82e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b830:	0a1b      	lsrs	r3, r3, #8
 800b832:	b29b      	uxth	r3, r3
 800b834:	697a      	ldr	r2, [r7, #20]
 800b836:	b2d9      	uxtb	r1, r3
 800b838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b83a:	4413      	add	r3, r2
 800b83c:	3330      	adds	r3, #48	@ 0x30
 800b83e:	460a      	mov	r2, r1
 800b840:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800b842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b844:	3301      	adds	r3, #1
 800b846:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 800b848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b84a:	3301      	adds	r3, #1
 800b84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800b84e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	429a      	cmp	r2, r3
 800b854:	d211      	bcs.n	800b87a <txGenerateMultiFrameChain+0x1c6>
 800b856:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b858:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d90d      	bls.n	800b87a <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b862:	b2d9      	uxtb	r1, r3
 800b864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b866:	4413      	add	r3, r2
 800b868:	3330      	adds	r3, #48	@ 0x30
 800b86a:	460a      	mov	r2, r1
 800b86c:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800b86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b870:	3301      	adds	r3, #1
 800b872:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 800b874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b876:	3301      	adds	r3, #1
 800b878:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 800b87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87c:	1c5a      	adds	r2, r3, #1
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b882:	429a      	cmp	r2, r3
 800b884:	d006      	beq.n	800b894 <txGenerateMultiFrameChain+0x1e0>
 800b886:	4b29      	ldr	r3, [pc, #164]	@ (800b92c <txGenerateMultiFrameChain+0x278>)
 800b888:	4a23      	ldr	r2, [pc, #140]	@ (800b918 <txGenerateMultiFrameChain+0x264>)
 800b88a:	f240 11d9 	movw	r1, #473	@ 0x1d9
 800b88e:	4823      	ldr	r0, [pc, #140]	@ (800b91c <txGenerateMultiFrameChain+0x268>)
 800b890:	f000 f9da 	bl	800bc48 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	429a      	cmp	r2, r3
 800b89a:	bf0c      	ite	eq
 800b89c:	2301      	moveq	r3, #1
 800b89e:	2300      	movne	r3, #0
 800b8a0:	b2d8      	uxtb	r0, r3
 800b8a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	bf2c      	ite	cs
 800b8aa:	2301      	movcs	r3, #1
 800b8ac:	2300      	movcc	r3, #0
 800b8ae:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800b8b0:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800b8b2:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800b8b6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800b8ba:	f7ff fd2f 	bl	800b31c <txMakeTailByte>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c4:	4423      	add	r3, r4
 800b8c6:	3330      	adds	r3, #48	@ 0x30
 800b8c8:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 800b8ca:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bf14      	ite	ne
 800b8d2:	2301      	movne	r3, #1
 800b8d4:	2300      	moveq	r3, #0
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f083 0301 	eor.w	r3, r3, #1
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800b8e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b8e6:	f003 0301 	and.w	r3, r3, #1
 800b8ea:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 800b8ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	f4ff af26 	bcc.w	800b744 <txGenerateMultiFrameChain+0x90>
 800b8f8:	e000      	b.n	800b8fc <txGenerateMultiFrameChain+0x248>
            break;
 800b8fa:	bf00      	nop
    }
    return out;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	461c      	mov	r4, r3
 800b900:	f107 0310 	add.w	r3, r7, #16
 800b904:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b908:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	3744      	adds	r7, #68	@ 0x44
 800b910:	46bd      	mov	sp, r7
 800b912:	bd90      	pop	{r4, r7, pc}
 800b914:	080106f4 	.word	0x080106f4
 800b918:	08011168 	.word	0x08011168
 800b91c:	08010530 	.word	0x08010530
 800b920:	08010844 	.word	0x08010844
 800b924:	08010860 	.word	0x08010860
 800b928:	080107e0 	.word	0x080107e0
 800b92c:	08010888 	.word	0x08010888

0800b930 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b094      	sub	sp, #80	@ 0x50
 800b934:	af06      	add	r7, sp, #24
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d002      	beq.n	800b948 <txPushMultiFrame+0x18>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d106      	bne.n	800b956 <txPushMultiFrame+0x26>
 800b948:	4b65      	ldr	r3, [pc, #404]	@ (800bae0 <txPushMultiFrame+0x1b0>)
 800b94a:	4a66      	ldr	r2, [pc, #408]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800b94c:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 800b950:	4865      	ldr	r0, [pc, #404]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800b952:	f000 f979 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d106      	bne.n	800b96a <txPushMultiFrame+0x3a>
 800b95c:	4b63      	ldr	r3, [pc, #396]	@ (800baec <txPushMultiFrame+0x1bc>)
 800b95e:	4a61      	ldr	r2, [pc, #388]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800b960:	f240 11ed 	movw	r1, #493	@ 0x1ed
 800b964:	4860      	ldr	r0, [pc, #384]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800b966:	f000 f96f 	bl	800bc48 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 800b96a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d806      	bhi.n	800b980 <txPushMultiFrame+0x50>
 800b972:	4b5f      	ldr	r3, [pc, #380]	@ (800baf0 <txPushMultiFrame+0x1c0>)
 800b974:	4a5b      	ldr	r2, [pc, #364]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800b976:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 800b97a:	485b      	ldr	r0, [pc, #364]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800b97c:	f000 f964 	bl	800bc48 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800b980:	2300      	movs	r3, #0
 800b982:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800b984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b986:	3302      	adds	r3, #2
 800b988:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 800b98a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4413      	add	r3, r2
 800b990:	1e5a      	subs	r2, r3, #1
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	fbb2 f3f3 	udiv	r3, r2, r3
 800b998:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 800b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d806      	bhi.n	800b9ae <txPushMultiFrame+0x7e>
 800b9a0:	4b54      	ldr	r3, [pc, #336]	@ (800baf4 <txPushMultiFrame+0x1c4>)
 800b9a2:	4a50      	ldr	r2, [pc, #320]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800b9a4:	f240 11f3 	movw	r1, #499	@ 0x1f3
 800b9a8:	484f      	ldr	r0, [pc, #316]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800b9aa:	f000 f94d 	bl	800bc48 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	689a      	ldr	r2, [r3, #8]
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b4:	441a      	add	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d87b      	bhi.n	800bab6 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 800b9be:	f107 0010 	add.w	r0, r7, #16
 800b9c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9c4:	9305      	str	r3, [sp, #20]
 800b9c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9c8:	9304      	str	r3, [sp, #16]
 800b9ca:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b9ce:	9303      	str	r3, [sp, #12]
 800b9d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9d2:	9302      	str	r3, [sp, #8]
 800b9d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b9d8:	e9cd 2300 	strd	r2, r3, [sp]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	f7ff fe68 	bl	800b6b4 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d051      	beq.n	800ba8e <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f103 000c 	add.w	r0, r3, #12
 800b9f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b9f6:	4b40      	ldr	r3, [pc, #256]	@ (800baf8 <txPushMultiFrame+0x1c8>)
 800b9f8:	4a40      	ldr	r2, [pc, #256]	@ (800bafc <txPushMultiFrame+0x1cc>)
 800b9fa:	f7ff fa25 	bl	800ae48 <cavlSearch>
 800b9fe:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800ba00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba02:	69fa      	ldr	r2, [r7, #28]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d006      	beq.n	800ba16 <txPushMultiFrame+0xe6>
 800ba08:	4b3d      	ldr	r3, [pc, #244]	@ (800bb00 <txPushMultiFrame+0x1d0>)
 800ba0a:	4a36      	ldr	r2, [pc, #216]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800ba0c:	f240 2105 	movw	r1, #517	@ 0x205
 800ba10:	4835      	ldr	r0, [pc, #212]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800ba12:	f000 f919 	bl	800bc48 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <txPushMultiFrame+0xfc>
 800ba1e:	4b39      	ldr	r3, [pc, #228]	@ (800bb04 <txPushMultiFrame+0x1d4>)
 800ba20:	4a30      	ldr	r2, [pc, #192]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800ba22:	f240 2106 	movw	r1, #518	@ 0x206
 800ba26:	4830      	ldr	r0, [pc, #192]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800ba28:	f000 f90e 	bl	800bc48 <__assert_func>
                next = next->next_in_transfer;
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 800ba32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1da      	bne.n	800b9ee <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d006      	beq.n	800ba4e <txPushMultiFrame+0x11e>
 800ba40:	4b31      	ldr	r3, [pc, #196]	@ (800bb08 <txPushMultiFrame+0x1d8>)
 800ba42:	4a28      	ldr	r2, [pc, #160]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800ba44:	f240 2109 	movw	r1, #521	@ 0x209
 800ba48:	4827      	ldr	r0, [pc, #156]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800ba4a:	f000 f8fd 	bl	800bc48 <__assert_func>
            que->size += sq.size;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	689a      	ldr	r2, [r3, #8]
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	441a      	add	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	689a      	ldr	r2, [r3, #8]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d906      	bls.n	800ba74 <txPushMultiFrame+0x144>
 800ba66:	4b29      	ldr	r3, [pc, #164]	@ (800bb0c <txPushMultiFrame+0x1dc>)
 800ba68:	4a1e      	ldr	r2, [pc, #120]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800ba6a:	f240 210b 	movw	r1, #523	@ 0x20b
 800ba6e:	481e      	ldr	r0, [pc, #120]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800ba70:	f000 f8ea 	bl	800bc48 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	da06      	bge.n	800ba88 <txPushMultiFrame+0x158>
 800ba7a:	4b25      	ldr	r3, [pc, #148]	@ (800bb10 <txPushMultiFrame+0x1e0>)
 800ba7c:	4a19      	ldr	r2, [pc, #100]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800ba7e:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 800ba82:	4819      	ldr	r0, [pc, #100]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800ba84:	f000 f8e0 	bl	800bc48 <__assert_func>
            out = (int32_t) sq.size;
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba8c:	e016      	b.n	800babc <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 800ba8e:	f06f 0302 	mvn.w	r3, #2
 800ba92:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 800ba98:	e009      	b.n	800baae <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 800ba9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800baa6:	68b8      	ldr	r0, [r7, #8]
 800baa8:	4798      	blx	r3
                head = next;
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 800baae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1f2      	bne.n	800ba9a <txPushMultiFrame+0x16a>
 800bab4:	e002      	b.n	800babc <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800bab6:	f06f 0302 	mvn.w	r3, #2
 800baba:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 800babc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800babe:	2b00      	cmp	r3, #0
 800bac0:	db09      	blt.n	800bad6 <txPushMultiFrame+0x1a6>
 800bac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	dc06      	bgt.n	800bad6 <txPushMultiFrame+0x1a6>
 800bac8:	4b12      	ldr	r3, [pc, #72]	@ (800bb14 <txPushMultiFrame+0x1e4>)
 800baca:	4a06      	ldr	r2, [pc, #24]	@ (800bae4 <txPushMultiFrame+0x1b4>)
 800bacc:	f240 211f 	movw	r1, #543	@ 0x21f
 800bad0:	4805      	ldr	r0, [pc, #20]	@ (800bae8 <txPushMultiFrame+0x1b8>)
 800bad2:	f000 f8b9 	bl	800bc48 <__assert_func>
    return out;
 800bad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3738      	adds	r7, #56	@ 0x38
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	080108c4 	.word	0x080108c4
 800bae4:	08011154 	.word	0x08011154
 800bae8:	08010530 	.word	0x08010530
 800baec:	08010844 	.word	0x08010844
 800baf0:	08010860 	.word	0x08010860
 800baf4:	080108f4 	.word	0x080108f4
 800baf8:	0800af45 	.word	0x0800af45
 800bafc:	0800b4a9 	.word	0x0800b4a9
 800bb00:	08010904 	.word	0x08010904
 800bb04:	08010918 	.word	0x08010918
 800bb08:	08010934 	.word	0x08010934
 800bb0c:	08010810 	.word	0x08010810
 800bb10:	0801094c 	.word	0x0801094c
 800bb14:	08010970 	.word	0x08010970

0800bb18 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08e      	sub	sp, #56	@ 0x38
 800bb1c:	af06      	add	r7, sp, #24
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800bb26:	f06f 0301 	mvn.w	r3, #1
 800bb2a:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d062      	beq.n	800bbf8 <canardTxPush+0xe0>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d05f      	beq.n	800bbf8 <canardTxPush+0xe0>
 800bb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d05c      	beq.n	800bbf8 <canardTxPush+0xe0>
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <canardTxPush+0x32>
 800bb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d156      	bne.n	800bbf8 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7ff fada 	bl	800b108 <adjustPresentationLayerMTU>
 800bb54:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	791a      	ldrb	r2, [r3, #4]
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb66:	f7ff faff 	bl	800b168 <txMakeCANID>
 800bb6a:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	db40      	blt.n	800bbf4 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800bb72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d81c      	bhi.n	800bbb4 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800bb7a:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800bb7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb7e:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800bb80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb82:	9103      	str	r1, [sp, #12]
 800bb84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb86:	9102      	str	r1, [sp, #8]
 800bb88:	9201      	str	r2, [sp, #4]
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f7ff fcb2 	bl	800b4fc <txPushSingleFrame>
 800bb98:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	db2b      	blt.n	800bbf8 <canardTxPush+0xe0>
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d028      	beq.n	800bbf8 <canardTxPush+0xe0>
 800bba6:	4b1c      	ldr	r3, [pc, #112]	@ (800bc18 <canardTxPush+0x100>)
 800bba8:	4a1c      	ldr	r2, [pc, #112]	@ (800bc1c <canardTxPush+0x104>)
 800bbaa:	f240 4105 	movw	r1, #1029	@ 0x405
 800bbae:	481c      	ldr	r0, [pc, #112]	@ (800bc20 <canardTxPush+0x108>)
 800bbb0:	f000 f84a 	bl	800bc48 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 800bbb4:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 800bbb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbb8:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800bbba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bbbc:	9105      	str	r1, [sp, #20]
 800bbbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbc0:	9104      	str	r1, [sp, #16]
 800bbc2:	9203      	str	r2, [sp, #12]
 800bbc4:	9302      	str	r3, [sp, #8]
 800bbc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbca:	e9cd 2300 	strd	r2, r3, [sp]
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	68b9      	ldr	r1, [r7, #8]
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f7ff feac 	bl	800b930 <txPushMultiFrame>
 800bbd8:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	db0b      	blt.n	800bbf8 <canardTxPush+0xe0>
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	dc08      	bgt.n	800bbf8 <canardTxPush+0xe0>
 800bbe6:	4b0f      	ldr	r3, [pc, #60]	@ (800bc24 <canardTxPush+0x10c>)
 800bbe8:	4a0c      	ldr	r2, [pc, #48]	@ (800bc1c <canardTxPush+0x104>)
 800bbea:	f240 4111 	movw	r1, #1041	@ 0x411
 800bbee:	480c      	ldr	r0, [pc, #48]	@ (800bc20 <canardTxPush+0x108>)
 800bbf0:	f000 f82a 	bl	800bc48 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <canardTxPush+0xf4>
 800bbfe:	4b0a      	ldr	r3, [pc, #40]	@ (800bc28 <canardTxPush+0x110>)
 800bc00:	4a06      	ldr	r2, [pc, #24]	@ (800bc1c <canardTxPush+0x104>)
 800bc02:	f240 4119 	movw	r1, #1049	@ 0x419
 800bc06:	4806      	ldr	r0, [pc, #24]	@ (800bc20 <canardTxPush+0x108>)
 800bc08:	f000 f81e 	bl	800bc48 <__assert_func>
    return out;
 800bc0c:	69fb      	ldr	r3, [r7, #28]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3720      	adds	r7, #32
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	0801082c 	.word	0x0801082c
 800bc1c:	08011034 	.word	0x08011034
 800bc20:	08010530 	.word	0x08010530
 800bc24:	08010970 	.word	0x08010970
 800bc28:	08010cf8 	.word	0x08010cf8

0800bc2c <_ZdlPvj>:
 800bc2c:	f000 b803 	b.w	800bc36 <_ZdlPv>

0800bc30 <_ZSt25__throw_bad_function_callv>:
 800bc30:	b508      	push	{r3, lr}
 800bc32:	f000 f802 	bl	800bc3a <abort>

0800bc36 <_ZdlPv>:
 800bc36:	f000 b82d 	b.w	800bc94 <free>

0800bc3a <abort>:
 800bc3a:	b508      	push	{r3, lr}
 800bc3c:	2006      	movs	r0, #6
 800bc3e:	f001 f8df 	bl	800ce00 <raise>
 800bc42:	2001      	movs	r0, #1
 800bc44:	f7f8 f862 	bl	8003d0c <_exit>

0800bc48 <__assert_func>:
 800bc48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc4a:	4614      	mov	r4, r2
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	4b09      	ldr	r3, [pc, #36]	@ (800bc74 <__assert_func+0x2c>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4605      	mov	r5, r0
 800bc54:	68d8      	ldr	r0, [r3, #12]
 800bc56:	b954      	cbnz	r4, 800bc6e <__assert_func+0x26>
 800bc58:	4b07      	ldr	r3, [pc, #28]	@ (800bc78 <__assert_func+0x30>)
 800bc5a:	461c      	mov	r4, r3
 800bc5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc60:	9100      	str	r1, [sp, #0]
 800bc62:	462b      	mov	r3, r5
 800bc64:	4905      	ldr	r1, [pc, #20]	@ (800bc7c <__assert_func+0x34>)
 800bc66:	f000 ffdb 	bl	800cc20 <fiprintf>
 800bc6a:	f7ff ffe6 	bl	800bc3a <abort>
 800bc6e:	4b04      	ldr	r3, [pc, #16]	@ (800bc80 <__assert_func+0x38>)
 800bc70:	e7f4      	b.n	800bc5c <__assert_func+0x14>
 800bc72:	bf00      	nop
 800bc74:	2000001c 	.word	0x2000001c
 800bc78:	080111bd 	.word	0x080111bd
 800bc7c:	0801118f 	.word	0x0801118f
 800bc80:	08011182 	.word	0x08011182

0800bc84 <malloc>:
 800bc84:	4b02      	ldr	r3, [pc, #8]	@ (800bc90 <malloc+0xc>)
 800bc86:	4601      	mov	r1, r0
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	f000 b82d 	b.w	800bce8 <_malloc_r>
 800bc8e:	bf00      	nop
 800bc90:	2000001c 	.word	0x2000001c

0800bc94 <free>:
 800bc94:	4b02      	ldr	r3, [pc, #8]	@ (800bca0 <free+0xc>)
 800bc96:	4601      	mov	r1, r0
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	f001 bfb5 	b.w	800dc08 <_free_r>
 800bc9e:	bf00      	nop
 800bca0:	2000001c 	.word	0x2000001c

0800bca4 <sbrk_aligned>:
 800bca4:	b570      	push	{r4, r5, r6, lr}
 800bca6:	4e0f      	ldr	r6, [pc, #60]	@ (800bce4 <sbrk_aligned+0x40>)
 800bca8:	460c      	mov	r4, r1
 800bcaa:	6831      	ldr	r1, [r6, #0]
 800bcac:	4605      	mov	r5, r0
 800bcae:	b911      	cbnz	r1, 800bcb6 <sbrk_aligned+0x12>
 800bcb0:	f001 f8fa 	bl	800cea8 <_sbrk_r>
 800bcb4:	6030      	str	r0, [r6, #0]
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f001 f8f5 	bl	800cea8 <_sbrk_r>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	d103      	bne.n	800bcca <sbrk_aligned+0x26>
 800bcc2:	f04f 34ff 	mov.w	r4, #4294967295
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	bd70      	pop	{r4, r5, r6, pc}
 800bcca:	1cc4      	adds	r4, r0, #3
 800bccc:	f024 0403 	bic.w	r4, r4, #3
 800bcd0:	42a0      	cmp	r0, r4
 800bcd2:	d0f8      	beq.n	800bcc6 <sbrk_aligned+0x22>
 800bcd4:	1a21      	subs	r1, r4, r0
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f001 f8e6 	bl	800cea8 <_sbrk_r>
 800bcdc:	3001      	adds	r0, #1
 800bcde:	d1f2      	bne.n	800bcc6 <sbrk_aligned+0x22>
 800bce0:	e7ef      	b.n	800bcc2 <sbrk_aligned+0x1e>
 800bce2:	bf00      	nop
 800bce4:	200006a0 	.word	0x200006a0

0800bce8 <_malloc_r>:
 800bce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcec:	1ccd      	adds	r5, r1, #3
 800bcee:	f025 0503 	bic.w	r5, r5, #3
 800bcf2:	3508      	adds	r5, #8
 800bcf4:	2d0c      	cmp	r5, #12
 800bcf6:	bf38      	it	cc
 800bcf8:	250c      	movcc	r5, #12
 800bcfa:	2d00      	cmp	r5, #0
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	db01      	blt.n	800bd04 <_malloc_r+0x1c>
 800bd00:	42a9      	cmp	r1, r5
 800bd02:	d904      	bls.n	800bd0e <_malloc_r+0x26>
 800bd04:	230c      	movs	r3, #12
 800bd06:	6033      	str	r3, [r6, #0]
 800bd08:	2000      	movs	r0, #0
 800bd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bde4 <_malloc_r+0xfc>
 800bd12:	f000 f869 	bl	800bde8 <__malloc_lock>
 800bd16:	f8d8 3000 	ldr.w	r3, [r8]
 800bd1a:	461c      	mov	r4, r3
 800bd1c:	bb44      	cbnz	r4, 800bd70 <_malloc_r+0x88>
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4630      	mov	r0, r6
 800bd22:	f7ff ffbf 	bl	800bca4 <sbrk_aligned>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	4604      	mov	r4, r0
 800bd2a:	d158      	bne.n	800bdde <_malloc_r+0xf6>
 800bd2c:	f8d8 4000 	ldr.w	r4, [r8]
 800bd30:	4627      	mov	r7, r4
 800bd32:	2f00      	cmp	r7, #0
 800bd34:	d143      	bne.n	800bdbe <_malloc_r+0xd6>
 800bd36:	2c00      	cmp	r4, #0
 800bd38:	d04b      	beq.n	800bdd2 <_malloc_r+0xea>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4630      	mov	r0, r6
 800bd40:	eb04 0903 	add.w	r9, r4, r3
 800bd44:	f001 f8b0 	bl	800cea8 <_sbrk_r>
 800bd48:	4581      	cmp	r9, r0
 800bd4a:	d142      	bne.n	800bdd2 <_malloc_r+0xea>
 800bd4c:	6821      	ldr	r1, [r4, #0]
 800bd4e:	1a6d      	subs	r5, r5, r1
 800bd50:	4629      	mov	r1, r5
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7ff ffa6 	bl	800bca4 <sbrk_aligned>
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d03a      	beq.n	800bdd2 <_malloc_r+0xea>
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	442b      	add	r3, r5
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	f8d8 3000 	ldr.w	r3, [r8]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	bb62      	cbnz	r2, 800bdc4 <_malloc_r+0xdc>
 800bd6a:	f8c8 7000 	str.w	r7, [r8]
 800bd6e:	e00f      	b.n	800bd90 <_malloc_r+0xa8>
 800bd70:	6822      	ldr	r2, [r4, #0]
 800bd72:	1b52      	subs	r2, r2, r5
 800bd74:	d420      	bmi.n	800bdb8 <_malloc_r+0xd0>
 800bd76:	2a0b      	cmp	r2, #11
 800bd78:	d917      	bls.n	800bdaa <_malloc_r+0xc2>
 800bd7a:	1961      	adds	r1, r4, r5
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	6025      	str	r5, [r4, #0]
 800bd80:	bf18      	it	ne
 800bd82:	6059      	strne	r1, [r3, #4]
 800bd84:	6863      	ldr	r3, [r4, #4]
 800bd86:	bf08      	it	eq
 800bd88:	f8c8 1000 	streq.w	r1, [r8]
 800bd8c:	5162      	str	r2, [r4, r5]
 800bd8e:	604b      	str	r3, [r1, #4]
 800bd90:	4630      	mov	r0, r6
 800bd92:	f000 f82f 	bl	800bdf4 <__malloc_unlock>
 800bd96:	f104 000b 	add.w	r0, r4, #11
 800bd9a:	1d23      	adds	r3, r4, #4
 800bd9c:	f020 0007 	bic.w	r0, r0, #7
 800bda0:	1ac2      	subs	r2, r0, r3
 800bda2:	bf1c      	itt	ne
 800bda4:	1a1b      	subne	r3, r3, r0
 800bda6:	50a3      	strne	r3, [r4, r2]
 800bda8:	e7af      	b.n	800bd0a <_malloc_r+0x22>
 800bdaa:	6862      	ldr	r2, [r4, #4]
 800bdac:	42a3      	cmp	r3, r4
 800bdae:	bf0c      	ite	eq
 800bdb0:	f8c8 2000 	streq.w	r2, [r8]
 800bdb4:	605a      	strne	r2, [r3, #4]
 800bdb6:	e7eb      	b.n	800bd90 <_malloc_r+0xa8>
 800bdb8:	4623      	mov	r3, r4
 800bdba:	6864      	ldr	r4, [r4, #4]
 800bdbc:	e7ae      	b.n	800bd1c <_malloc_r+0x34>
 800bdbe:	463c      	mov	r4, r7
 800bdc0:	687f      	ldr	r7, [r7, #4]
 800bdc2:	e7b6      	b.n	800bd32 <_malloc_r+0x4a>
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	42a3      	cmp	r3, r4
 800bdca:	d1fb      	bne.n	800bdc4 <_malloc_r+0xdc>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	6053      	str	r3, [r2, #4]
 800bdd0:	e7de      	b.n	800bd90 <_malloc_r+0xa8>
 800bdd2:	230c      	movs	r3, #12
 800bdd4:	6033      	str	r3, [r6, #0]
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f000 f80c 	bl	800bdf4 <__malloc_unlock>
 800bddc:	e794      	b.n	800bd08 <_malloc_r+0x20>
 800bdde:	6005      	str	r5, [r0, #0]
 800bde0:	e7d6      	b.n	800bd90 <_malloc_r+0xa8>
 800bde2:	bf00      	nop
 800bde4:	200006a4 	.word	0x200006a4

0800bde8 <__malloc_lock>:
 800bde8:	4801      	ldr	r0, [pc, #4]	@ (800bdf0 <__malloc_lock+0x8>)
 800bdea:	f001 b8aa 	b.w	800cf42 <__retarget_lock_acquire_recursive>
 800bdee:	bf00      	nop
 800bdf0:	200007e8 	.word	0x200007e8

0800bdf4 <__malloc_unlock>:
 800bdf4:	4801      	ldr	r0, [pc, #4]	@ (800bdfc <__malloc_unlock+0x8>)
 800bdf6:	f001 b8a5 	b.w	800cf44 <__retarget_lock_release_recursive>
 800bdfa:	bf00      	nop
 800bdfc:	200007e8 	.word	0x200007e8

0800be00 <__cvt>:
 800be00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be04:	ec57 6b10 	vmov	r6, r7, d0
 800be08:	2f00      	cmp	r7, #0
 800be0a:	460c      	mov	r4, r1
 800be0c:	4619      	mov	r1, r3
 800be0e:	463b      	mov	r3, r7
 800be10:	bfbb      	ittet	lt
 800be12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800be16:	461f      	movlt	r7, r3
 800be18:	2300      	movge	r3, #0
 800be1a:	232d      	movlt	r3, #45	@ 0x2d
 800be1c:	700b      	strb	r3, [r1, #0]
 800be1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800be24:	4691      	mov	r9, r2
 800be26:	f023 0820 	bic.w	r8, r3, #32
 800be2a:	bfbc      	itt	lt
 800be2c:	4632      	movlt	r2, r6
 800be2e:	4616      	movlt	r6, r2
 800be30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800be34:	d005      	beq.n	800be42 <__cvt+0x42>
 800be36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800be3a:	d100      	bne.n	800be3e <__cvt+0x3e>
 800be3c:	3401      	adds	r4, #1
 800be3e:	2102      	movs	r1, #2
 800be40:	e000      	b.n	800be44 <__cvt+0x44>
 800be42:	2103      	movs	r1, #3
 800be44:	ab03      	add	r3, sp, #12
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	ab02      	add	r3, sp, #8
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	ec47 6b10 	vmov	d0, r6, r7
 800be50:	4653      	mov	r3, sl
 800be52:	4622      	mov	r2, r4
 800be54:	f001 f914 	bl	800d080 <_dtoa_r>
 800be58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800be5c:	4605      	mov	r5, r0
 800be5e:	d119      	bne.n	800be94 <__cvt+0x94>
 800be60:	f019 0f01 	tst.w	r9, #1
 800be64:	d00e      	beq.n	800be84 <__cvt+0x84>
 800be66:	eb00 0904 	add.w	r9, r0, r4
 800be6a:	2200      	movs	r2, #0
 800be6c:	2300      	movs	r3, #0
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	f7f4 fe51 	bl	8000b18 <__aeabi_dcmpeq>
 800be76:	b108      	cbz	r0, 800be7c <__cvt+0x7c>
 800be78:	f8cd 900c 	str.w	r9, [sp, #12]
 800be7c:	2230      	movs	r2, #48	@ 0x30
 800be7e:	9b03      	ldr	r3, [sp, #12]
 800be80:	454b      	cmp	r3, r9
 800be82:	d31e      	bcc.n	800bec2 <__cvt+0xc2>
 800be84:	9b03      	ldr	r3, [sp, #12]
 800be86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be88:	1b5b      	subs	r3, r3, r5
 800be8a:	4628      	mov	r0, r5
 800be8c:	6013      	str	r3, [r2, #0]
 800be8e:	b004      	add	sp, #16
 800be90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800be98:	eb00 0904 	add.w	r9, r0, r4
 800be9c:	d1e5      	bne.n	800be6a <__cvt+0x6a>
 800be9e:	7803      	ldrb	r3, [r0, #0]
 800bea0:	2b30      	cmp	r3, #48	@ 0x30
 800bea2:	d10a      	bne.n	800beba <__cvt+0xba>
 800bea4:	2200      	movs	r2, #0
 800bea6:	2300      	movs	r3, #0
 800bea8:	4630      	mov	r0, r6
 800beaa:	4639      	mov	r1, r7
 800beac:	f7f4 fe34 	bl	8000b18 <__aeabi_dcmpeq>
 800beb0:	b918      	cbnz	r0, 800beba <__cvt+0xba>
 800beb2:	f1c4 0401 	rsb	r4, r4, #1
 800beb6:	f8ca 4000 	str.w	r4, [sl]
 800beba:	f8da 3000 	ldr.w	r3, [sl]
 800bebe:	4499      	add	r9, r3
 800bec0:	e7d3      	b.n	800be6a <__cvt+0x6a>
 800bec2:	1c59      	adds	r1, r3, #1
 800bec4:	9103      	str	r1, [sp, #12]
 800bec6:	701a      	strb	r2, [r3, #0]
 800bec8:	e7d9      	b.n	800be7e <__cvt+0x7e>

0800beca <__exponent>:
 800beca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800becc:	2900      	cmp	r1, #0
 800bece:	bfba      	itte	lt
 800bed0:	4249      	neglt	r1, r1
 800bed2:	232d      	movlt	r3, #45	@ 0x2d
 800bed4:	232b      	movge	r3, #43	@ 0x2b
 800bed6:	2909      	cmp	r1, #9
 800bed8:	7002      	strb	r2, [r0, #0]
 800beda:	7043      	strb	r3, [r0, #1]
 800bedc:	dd29      	ble.n	800bf32 <__exponent+0x68>
 800bede:	f10d 0307 	add.w	r3, sp, #7
 800bee2:	461d      	mov	r5, r3
 800bee4:	270a      	movs	r7, #10
 800bee6:	461a      	mov	r2, r3
 800bee8:	fbb1 f6f7 	udiv	r6, r1, r7
 800beec:	fb07 1416 	mls	r4, r7, r6, r1
 800bef0:	3430      	adds	r4, #48	@ 0x30
 800bef2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bef6:	460c      	mov	r4, r1
 800bef8:	2c63      	cmp	r4, #99	@ 0x63
 800befa:	f103 33ff 	add.w	r3, r3, #4294967295
 800befe:	4631      	mov	r1, r6
 800bf00:	dcf1      	bgt.n	800bee6 <__exponent+0x1c>
 800bf02:	3130      	adds	r1, #48	@ 0x30
 800bf04:	1e94      	subs	r4, r2, #2
 800bf06:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf0a:	1c41      	adds	r1, r0, #1
 800bf0c:	4623      	mov	r3, r4
 800bf0e:	42ab      	cmp	r3, r5
 800bf10:	d30a      	bcc.n	800bf28 <__exponent+0x5e>
 800bf12:	f10d 0309 	add.w	r3, sp, #9
 800bf16:	1a9b      	subs	r3, r3, r2
 800bf18:	42ac      	cmp	r4, r5
 800bf1a:	bf88      	it	hi
 800bf1c:	2300      	movhi	r3, #0
 800bf1e:	3302      	adds	r3, #2
 800bf20:	4403      	add	r3, r0
 800bf22:	1a18      	subs	r0, r3, r0
 800bf24:	b003      	add	sp, #12
 800bf26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf28:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bf2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bf30:	e7ed      	b.n	800bf0e <__exponent+0x44>
 800bf32:	2330      	movs	r3, #48	@ 0x30
 800bf34:	3130      	adds	r1, #48	@ 0x30
 800bf36:	7083      	strb	r3, [r0, #2]
 800bf38:	70c1      	strb	r1, [r0, #3]
 800bf3a:	1d03      	adds	r3, r0, #4
 800bf3c:	e7f1      	b.n	800bf22 <__exponent+0x58>
	...

0800bf40 <_printf_float>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	b08d      	sub	sp, #52	@ 0x34
 800bf46:	460c      	mov	r4, r1
 800bf48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bf4c:	4616      	mov	r6, r2
 800bf4e:	461f      	mov	r7, r3
 800bf50:	4605      	mov	r5, r0
 800bf52:	f000 ff5d 	bl	800ce10 <_localeconv_r>
 800bf56:	6803      	ldr	r3, [r0, #0]
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f4 f9b0 	bl	80002c0 <strlen>
 800bf60:	2300      	movs	r3, #0
 800bf62:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf64:	f8d8 3000 	ldr.w	r3, [r8]
 800bf68:	9005      	str	r0, [sp, #20]
 800bf6a:	3307      	adds	r3, #7
 800bf6c:	f023 0307 	bic.w	r3, r3, #7
 800bf70:	f103 0208 	add.w	r2, r3, #8
 800bf74:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bf78:	f8d4 b000 	ldr.w	fp, [r4]
 800bf7c:	f8c8 2000 	str.w	r2, [r8]
 800bf80:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bf88:	9307      	str	r3, [sp, #28]
 800bf8a:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bf92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf96:	4b9c      	ldr	r3, [pc, #624]	@ (800c208 <_printf_float+0x2c8>)
 800bf98:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9c:	f7f4 fdee 	bl	8000b7c <__aeabi_dcmpun>
 800bfa0:	bb70      	cbnz	r0, 800c000 <_printf_float+0xc0>
 800bfa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfa6:	4b98      	ldr	r3, [pc, #608]	@ (800c208 <_printf_float+0x2c8>)
 800bfa8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfac:	f7f4 fdc8 	bl	8000b40 <__aeabi_dcmple>
 800bfb0:	bb30      	cbnz	r0, 800c000 <_printf_float+0xc0>
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	4649      	mov	r1, r9
 800bfba:	f7f4 fdb7 	bl	8000b2c <__aeabi_dcmplt>
 800bfbe:	b110      	cbz	r0, 800bfc6 <_printf_float+0x86>
 800bfc0:	232d      	movs	r3, #45	@ 0x2d
 800bfc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfc6:	4a91      	ldr	r2, [pc, #580]	@ (800c20c <_printf_float+0x2cc>)
 800bfc8:	4b91      	ldr	r3, [pc, #580]	@ (800c210 <_printf_float+0x2d0>)
 800bfca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bfce:	bf94      	ite	ls
 800bfd0:	4690      	movls	r8, r2
 800bfd2:	4698      	movhi	r8, r3
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	6123      	str	r3, [r4, #16]
 800bfd8:	f02b 0304 	bic.w	r3, fp, #4
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	f04f 0900 	mov.w	r9, #0
 800bfe2:	9700      	str	r7, [sp, #0]
 800bfe4:	4633      	mov	r3, r6
 800bfe6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 f9d2 	bl	800c394 <_printf_common>
 800bff0:	3001      	adds	r0, #1
 800bff2:	f040 808d 	bne.w	800c110 <_printf_float+0x1d0>
 800bff6:	f04f 30ff 	mov.w	r0, #4294967295
 800bffa:	b00d      	add	sp, #52	@ 0x34
 800bffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	4640      	mov	r0, r8
 800c006:	4649      	mov	r1, r9
 800c008:	f7f4 fdb8 	bl	8000b7c <__aeabi_dcmpun>
 800c00c:	b140      	cbz	r0, 800c020 <_printf_float+0xe0>
 800c00e:	464b      	mov	r3, r9
 800c010:	2b00      	cmp	r3, #0
 800c012:	bfbc      	itt	lt
 800c014:	232d      	movlt	r3, #45	@ 0x2d
 800c016:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c01a:	4a7e      	ldr	r2, [pc, #504]	@ (800c214 <_printf_float+0x2d4>)
 800c01c:	4b7e      	ldr	r3, [pc, #504]	@ (800c218 <_printf_float+0x2d8>)
 800c01e:	e7d4      	b.n	800bfca <_printf_float+0x8a>
 800c020:	6863      	ldr	r3, [r4, #4]
 800c022:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c026:	9206      	str	r2, [sp, #24]
 800c028:	1c5a      	adds	r2, r3, #1
 800c02a:	d13b      	bne.n	800c0a4 <_printf_float+0x164>
 800c02c:	2306      	movs	r3, #6
 800c02e:	6063      	str	r3, [r4, #4]
 800c030:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c034:	2300      	movs	r3, #0
 800c036:	6022      	str	r2, [r4, #0]
 800c038:	9303      	str	r3, [sp, #12]
 800c03a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c03c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c040:	ab09      	add	r3, sp, #36	@ 0x24
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	6861      	ldr	r1, [r4, #4]
 800c046:	ec49 8b10 	vmov	d0, r8, r9
 800c04a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c04e:	4628      	mov	r0, r5
 800c050:	f7ff fed6 	bl	800be00 <__cvt>
 800c054:	9b06      	ldr	r3, [sp, #24]
 800c056:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c058:	2b47      	cmp	r3, #71	@ 0x47
 800c05a:	4680      	mov	r8, r0
 800c05c:	d129      	bne.n	800c0b2 <_printf_float+0x172>
 800c05e:	1cc8      	adds	r0, r1, #3
 800c060:	db02      	blt.n	800c068 <_printf_float+0x128>
 800c062:	6863      	ldr	r3, [r4, #4]
 800c064:	4299      	cmp	r1, r3
 800c066:	dd41      	ble.n	800c0ec <_printf_float+0x1ac>
 800c068:	f1aa 0a02 	sub.w	sl, sl, #2
 800c06c:	fa5f fa8a 	uxtb.w	sl, sl
 800c070:	3901      	subs	r1, #1
 800c072:	4652      	mov	r2, sl
 800c074:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c078:	9109      	str	r1, [sp, #36]	@ 0x24
 800c07a:	f7ff ff26 	bl	800beca <__exponent>
 800c07e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c080:	1813      	adds	r3, r2, r0
 800c082:	2a01      	cmp	r2, #1
 800c084:	4681      	mov	r9, r0
 800c086:	6123      	str	r3, [r4, #16]
 800c088:	dc02      	bgt.n	800c090 <_printf_float+0x150>
 800c08a:	6822      	ldr	r2, [r4, #0]
 800c08c:	07d2      	lsls	r2, r2, #31
 800c08e:	d501      	bpl.n	800c094 <_printf_float+0x154>
 800c090:	3301      	adds	r3, #1
 800c092:	6123      	str	r3, [r4, #16]
 800c094:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d0a2      	beq.n	800bfe2 <_printf_float+0xa2>
 800c09c:	232d      	movs	r3, #45	@ 0x2d
 800c09e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0a2:	e79e      	b.n	800bfe2 <_printf_float+0xa2>
 800c0a4:	9a06      	ldr	r2, [sp, #24]
 800c0a6:	2a47      	cmp	r2, #71	@ 0x47
 800c0a8:	d1c2      	bne.n	800c030 <_printf_float+0xf0>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1c0      	bne.n	800c030 <_printf_float+0xf0>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e7bd      	b.n	800c02e <_printf_float+0xee>
 800c0b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c0b6:	d9db      	bls.n	800c070 <_printf_float+0x130>
 800c0b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c0bc:	d118      	bne.n	800c0f0 <_printf_float+0x1b0>
 800c0be:	2900      	cmp	r1, #0
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	dd0b      	ble.n	800c0dc <_printf_float+0x19c>
 800c0c4:	6121      	str	r1, [r4, #16]
 800c0c6:	b913      	cbnz	r3, 800c0ce <_printf_float+0x18e>
 800c0c8:	6822      	ldr	r2, [r4, #0]
 800c0ca:	07d0      	lsls	r0, r2, #31
 800c0cc:	d502      	bpl.n	800c0d4 <_printf_float+0x194>
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	440b      	add	r3, r1
 800c0d2:	6123      	str	r3, [r4, #16]
 800c0d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c0d6:	f04f 0900 	mov.w	r9, #0
 800c0da:	e7db      	b.n	800c094 <_printf_float+0x154>
 800c0dc:	b913      	cbnz	r3, 800c0e4 <_printf_float+0x1a4>
 800c0de:	6822      	ldr	r2, [r4, #0]
 800c0e0:	07d2      	lsls	r2, r2, #31
 800c0e2:	d501      	bpl.n	800c0e8 <_printf_float+0x1a8>
 800c0e4:	3302      	adds	r3, #2
 800c0e6:	e7f4      	b.n	800c0d2 <_printf_float+0x192>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e7f2      	b.n	800c0d2 <_printf_float+0x192>
 800c0ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c0f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0f2:	4299      	cmp	r1, r3
 800c0f4:	db05      	blt.n	800c102 <_printf_float+0x1c2>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	6121      	str	r1, [r4, #16]
 800c0fa:	07d8      	lsls	r0, r3, #31
 800c0fc:	d5ea      	bpl.n	800c0d4 <_printf_float+0x194>
 800c0fe:	1c4b      	adds	r3, r1, #1
 800c100:	e7e7      	b.n	800c0d2 <_printf_float+0x192>
 800c102:	2900      	cmp	r1, #0
 800c104:	bfd4      	ite	le
 800c106:	f1c1 0202 	rsble	r2, r1, #2
 800c10a:	2201      	movgt	r2, #1
 800c10c:	4413      	add	r3, r2
 800c10e:	e7e0      	b.n	800c0d2 <_printf_float+0x192>
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	055a      	lsls	r2, r3, #21
 800c114:	d407      	bmi.n	800c126 <_printf_float+0x1e6>
 800c116:	6923      	ldr	r3, [r4, #16]
 800c118:	4642      	mov	r2, r8
 800c11a:	4631      	mov	r1, r6
 800c11c:	4628      	mov	r0, r5
 800c11e:	47b8      	blx	r7
 800c120:	3001      	adds	r0, #1
 800c122:	d12b      	bne.n	800c17c <_printf_float+0x23c>
 800c124:	e767      	b.n	800bff6 <_printf_float+0xb6>
 800c126:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c12a:	f240 80dd 	bls.w	800c2e8 <_printf_float+0x3a8>
 800c12e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c132:	2200      	movs	r2, #0
 800c134:	2300      	movs	r3, #0
 800c136:	f7f4 fcef 	bl	8000b18 <__aeabi_dcmpeq>
 800c13a:	2800      	cmp	r0, #0
 800c13c:	d033      	beq.n	800c1a6 <_printf_float+0x266>
 800c13e:	4a37      	ldr	r2, [pc, #220]	@ (800c21c <_printf_float+0x2dc>)
 800c140:	2301      	movs	r3, #1
 800c142:	4631      	mov	r1, r6
 800c144:	4628      	mov	r0, r5
 800c146:	47b8      	blx	r7
 800c148:	3001      	adds	r0, #1
 800c14a:	f43f af54 	beq.w	800bff6 <_printf_float+0xb6>
 800c14e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c152:	4543      	cmp	r3, r8
 800c154:	db02      	blt.n	800c15c <_printf_float+0x21c>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	07d8      	lsls	r0, r3, #31
 800c15a:	d50f      	bpl.n	800c17c <_printf_float+0x23c>
 800c15c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c160:	4631      	mov	r1, r6
 800c162:	4628      	mov	r0, r5
 800c164:	47b8      	blx	r7
 800c166:	3001      	adds	r0, #1
 800c168:	f43f af45 	beq.w	800bff6 <_printf_float+0xb6>
 800c16c:	f04f 0900 	mov.w	r9, #0
 800c170:	f108 38ff 	add.w	r8, r8, #4294967295
 800c174:	f104 0a1a 	add.w	sl, r4, #26
 800c178:	45c8      	cmp	r8, r9
 800c17a:	dc09      	bgt.n	800c190 <_printf_float+0x250>
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	079b      	lsls	r3, r3, #30
 800c180:	f100 8103 	bmi.w	800c38a <_printf_float+0x44a>
 800c184:	68e0      	ldr	r0, [r4, #12]
 800c186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c188:	4298      	cmp	r0, r3
 800c18a:	bfb8      	it	lt
 800c18c:	4618      	movlt	r0, r3
 800c18e:	e734      	b.n	800bffa <_printf_float+0xba>
 800c190:	2301      	movs	r3, #1
 800c192:	4652      	mov	r2, sl
 800c194:	4631      	mov	r1, r6
 800c196:	4628      	mov	r0, r5
 800c198:	47b8      	blx	r7
 800c19a:	3001      	adds	r0, #1
 800c19c:	f43f af2b 	beq.w	800bff6 <_printf_float+0xb6>
 800c1a0:	f109 0901 	add.w	r9, r9, #1
 800c1a4:	e7e8      	b.n	800c178 <_printf_float+0x238>
 800c1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	dc39      	bgt.n	800c220 <_printf_float+0x2e0>
 800c1ac:	4a1b      	ldr	r2, [pc, #108]	@ (800c21c <_printf_float+0x2dc>)
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	47b8      	blx	r7
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f43f af1d 	beq.w	800bff6 <_printf_float+0xb6>
 800c1bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c1c0:	ea59 0303 	orrs.w	r3, r9, r3
 800c1c4:	d102      	bne.n	800c1cc <_printf_float+0x28c>
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	07d9      	lsls	r1, r3, #31
 800c1ca:	d5d7      	bpl.n	800c17c <_printf_float+0x23c>
 800c1cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	47b8      	blx	r7
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	f43f af0d 	beq.w	800bff6 <_printf_float+0xb6>
 800c1dc:	f04f 0a00 	mov.w	sl, #0
 800c1e0:	f104 0b1a 	add.w	fp, r4, #26
 800c1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e6:	425b      	negs	r3, r3
 800c1e8:	4553      	cmp	r3, sl
 800c1ea:	dc01      	bgt.n	800c1f0 <_printf_float+0x2b0>
 800c1ec:	464b      	mov	r3, r9
 800c1ee:	e793      	b.n	800c118 <_printf_float+0x1d8>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	465a      	mov	r2, fp
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	47b8      	blx	r7
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	f43f aefb 	beq.w	800bff6 <_printf_float+0xb6>
 800c200:	f10a 0a01 	add.w	sl, sl, #1
 800c204:	e7ee      	b.n	800c1e4 <_printf_float+0x2a4>
 800c206:	bf00      	nop
 800c208:	7fefffff 	.word	0x7fefffff
 800c20c:	080111be 	.word	0x080111be
 800c210:	080111c2 	.word	0x080111c2
 800c214:	080111c6 	.word	0x080111c6
 800c218:	080111ca 	.word	0x080111ca
 800c21c:	080111ce 	.word	0x080111ce
 800c220:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c222:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c226:	4553      	cmp	r3, sl
 800c228:	bfa8      	it	ge
 800c22a:	4653      	movge	r3, sl
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	4699      	mov	r9, r3
 800c230:	dc36      	bgt.n	800c2a0 <_printf_float+0x360>
 800c232:	f04f 0b00 	mov.w	fp, #0
 800c236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c23a:	f104 021a 	add.w	r2, r4, #26
 800c23e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c240:	9306      	str	r3, [sp, #24]
 800c242:	eba3 0309 	sub.w	r3, r3, r9
 800c246:	455b      	cmp	r3, fp
 800c248:	dc31      	bgt.n	800c2ae <_printf_float+0x36e>
 800c24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c24c:	459a      	cmp	sl, r3
 800c24e:	dc3a      	bgt.n	800c2c6 <_printf_float+0x386>
 800c250:	6823      	ldr	r3, [r4, #0]
 800c252:	07da      	lsls	r2, r3, #31
 800c254:	d437      	bmi.n	800c2c6 <_printf_float+0x386>
 800c256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c258:	ebaa 0903 	sub.w	r9, sl, r3
 800c25c:	9b06      	ldr	r3, [sp, #24]
 800c25e:	ebaa 0303 	sub.w	r3, sl, r3
 800c262:	4599      	cmp	r9, r3
 800c264:	bfa8      	it	ge
 800c266:	4699      	movge	r9, r3
 800c268:	f1b9 0f00 	cmp.w	r9, #0
 800c26c:	dc33      	bgt.n	800c2d6 <_printf_float+0x396>
 800c26e:	f04f 0800 	mov.w	r8, #0
 800c272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c276:	f104 0b1a 	add.w	fp, r4, #26
 800c27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c27c:	ebaa 0303 	sub.w	r3, sl, r3
 800c280:	eba3 0309 	sub.w	r3, r3, r9
 800c284:	4543      	cmp	r3, r8
 800c286:	f77f af79 	ble.w	800c17c <_printf_float+0x23c>
 800c28a:	2301      	movs	r3, #1
 800c28c:	465a      	mov	r2, fp
 800c28e:	4631      	mov	r1, r6
 800c290:	4628      	mov	r0, r5
 800c292:	47b8      	blx	r7
 800c294:	3001      	adds	r0, #1
 800c296:	f43f aeae 	beq.w	800bff6 <_printf_float+0xb6>
 800c29a:	f108 0801 	add.w	r8, r8, #1
 800c29e:	e7ec      	b.n	800c27a <_printf_float+0x33a>
 800c2a0:	4642      	mov	r2, r8
 800c2a2:	4631      	mov	r1, r6
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	47b8      	blx	r7
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	d1c2      	bne.n	800c232 <_printf_float+0x2f2>
 800c2ac:	e6a3      	b.n	800bff6 <_printf_float+0xb6>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	4631      	mov	r1, r6
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	9206      	str	r2, [sp, #24]
 800c2b6:	47b8      	blx	r7
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	f43f ae9c 	beq.w	800bff6 <_printf_float+0xb6>
 800c2be:	9a06      	ldr	r2, [sp, #24]
 800c2c0:	f10b 0b01 	add.w	fp, fp, #1
 800c2c4:	e7bb      	b.n	800c23e <_printf_float+0x2fe>
 800c2c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	47b8      	blx	r7
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d1c0      	bne.n	800c256 <_printf_float+0x316>
 800c2d4:	e68f      	b.n	800bff6 <_printf_float+0xb6>
 800c2d6:	9a06      	ldr	r2, [sp, #24]
 800c2d8:	464b      	mov	r3, r9
 800c2da:	4442      	add	r2, r8
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4628      	mov	r0, r5
 800c2e0:	47b8      	blx	r7
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	d1c3      	bne.n	800c26e <_printf_float+0x32e>
 800c2e6:	e686      	b.n	800bff6 <_printf_float+0xb6>
 800c2e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c2ec:	f1ba 0f01 	cmp.w	sl, #1
 800c2f0:	dc01      	bgt.n	800c2f6 <_printf_float+0x3b6>
 800c2f2:	07db      	lsls	r3, r3, #31
 800c2f4:	d536      	bpl.n	800c364 <_printf_float+0x424>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	4642      	mov	r2, r8
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	47b8      	blx	r7
 800c300:	3001      	adds	r0, #1
 800c302:	f43f ae78 	beq.w	800bff6 <_printf_float+0xb6>
 800c306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c30a:	4631      	mov	r1, r6
 800c30c:	4628      	mov	r0, r5
 800c30e:	47b8      	blx	r7
 800c310:	3001      	adds	r0, #1
 800c312:	f43f ae70 	beq.w	800bff6 <_printf_float+0xb6>
 800c316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c31a:	2200      	movs	r2, #0
 800c31c:	2300      	movs	r3, #0
 800c31e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c322:	f7f4 fbf9 	bl	8000b18 <__aeabi_dcmpeq>
 800c326:	b9c0      	cbnz	r0, 800c35a <_printf_float+0x41a>
 800c328:	4653      	mov	r3, sl
 800c32a:	f108 0201 	add.w	r2, r8, #1
 800c32e:	4631      	mov	r1, r6
 800c330:	4628      	mov	r0, r5
 800c332:	47b8      	blx	r7
 800c334:	3001      	adds	r0, #1
 800c336:	d10c      	bne.n	800c352 <_printf_float+0x412>
 800c338:	e65d      	b.n	800bff6 <_printf_float+0xb6>
 800c33a:	2301      	movs	r3, #1
 800c33c:	465a      	mov	r2, fp
 800c33e:	4631      	mov	r1, r6
 800c340:	4628      	mov	r0, r5
 800c342:	47b8      	blx	r7
 800c344:	3001      	adds	r0, #1
 800c346:	f43f ae56 	beq.w	800bff6 <_printf_float+0xb6>
 800c34a:	f108 0801 	add.w	r8, r8, #1
 800c34e:	45d0      	cmp	r8, sl
 800c350:	dbf3      	blt.n	800c33a <_printf_float+0x3fa>
 800c352:	464b      	mov	r3, r9
 800c354:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c358:	e6df      	b.n	800c11a <_printf_float+0x1da>
 800c35a:	f04f 0800 	mov.w	r8, #0
 800c35e:	f104 0b1a 	add.w	fp, r4, #26
 800c362:	e7f4      	b.n	800c34e <_printf_float+0x40e>
 800c364:	2301      	movs	r3, #1
 800c366:	4642      	mov	r2, r8
 800c368:	e7e1      	b.n	800c32e <_printf_float+0x3ee>
 800c36a:	2301      	movs	r3, #1
 800c36c:	464a      	mov	r2, r9
 800c36e:	4631      	mov	r1, r6
 800c370:	4628      	mov	r0, r5
 800c372:	47b8      	blx	r7
 800c374:	3001      	adds	r0, #1
 800c376:	f43f ae3e 	beq.w	800bff6 <_printf_float+0xb6>
 800c37a:	f108 0801 	add.w	r8, r8, #1
 800c37e:	68e3      	ldr	r3, [r4, #12]
 800c380:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c382:	1a5b      	subs	r3, r3, r1
 800c384:	4543      	cmp	r3, r8
 800c386:	dcf0      	bgt.n	800c36a <_printf_float+0x42a>
 800c388:	e6fc      	b.n	800c184 <_printf_float+0x244>
 800c38a:	f04f 0800 	mov.w	r8, #0
 800c38e:	f104 0919 	add.w	r9, r4, #25
 800c392:	e7f4      	b.n	800c37e <_printf_float+0x43e>

0800c394 <_printf_common>:
 800c394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c398:	4616      	mov	r6, r2
 800c39a:	4698      	mov	r8, r3
 800c39c:	688a      	ldr	r2, [r1, #8]
 800c39e:	690b      	ldr	r3, [r1, #16]
 800c3a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	bfb8      	it	lt
 800c3a8:	4613      	movlt	r3, r2
 800c3aa:	6033      	str	r3, [r6, #0]
 800c3ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	b10a      	cbz	r2, 800c3ba <_printf_common+0x26>
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	6033      	str	r3, [r6, #0]
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	0699      	lsls	r1, r3, #26
 800c3be:	bf42      	ittt	mi
 800c3c0:	6833      	ldrmi	r3, [r6, #0]
 800c3c2:	3302      	addmi	r3, #2
 800c3c4:	6033      	strmi	r3, [r6, #0]
 800c3c6:	6825      	ldr	r5, [r4, #0]
 800c3c8:	f015 0506 	ands.w	r5, r5, #6
 800c3cc:	d106      	bne.n	800c3dc <_printf_common+0x48>
 800c3ce:	f104 0a19 	add.w	sl, r4, #25
 800c3d2:	68e3      	ldr	r3, [r4, #12]
 800c3d4:	6832      	ldr	r2, [r6, #0]
 800c3d6:	1a9b      	subs	r3, r3, r2
 800c3d8:	42ab      	cmp	r3, r5
 800c3da:	dc26      	bgt.n	800c42a <_printf_common+0x96>
 800c3dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c3e0:	6822      	ldr	r2, [r4, #0]
 800c3e2:	3b00      	subs	r3, #0
 800c3e4:	bf18      	it	ne
 800c3e6:	2301      	movne	r3, #1
 800c3e8:	0692      	lsls	r2, r2, #26
 800c3ea:	d42b      	bmi.n	800c444 <_printf_common+0xb0>
 800c3ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c3f0:	4641      	mov	r1, r8
 800c3f2:	4638      	mov	r0, r7
 800c3f4:	47c8      	blx	r9
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	d01e      	beq.n	800c438 <_printf_common+0xa4>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	6922      	ldr	r2, [r4, #16]
 800c3fe:	f003 0306 	and.w	r3, r3, #6
 800c402:	2b04      	cmp	r3, #4
 800c404:	bf02      	ittt	eq
 800c406:	68e5      	ldreq	r5, [r4, #12]
 800c408:	6833      	ldreq	r3, [r6, #0]
 800c40a:	1aed      	subeq	r5, r5, r3
 800c40c:	68a3      	ldr	r3, [r4, #8]
 800c40e:	bf0c      	ite	eq
 800c410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c414:	2500      	movne	r5, #0
 800c416:	4293      	cmp	r3, r2
 800c418:	bfc4      	itt	gt
 800c41a:	1a9b      	subgt	r3, r3, r2
 800c41c:	18ed      	addgt	r5, r5, r3
 800c41e:	2600      	movs	r6, #0
 800c420:	341a      	adds	r4, #26
 800c422:	42b5      	cmp	r5, r6
 800c424:	d11a      	bne.n	800c45c <_printf_common+0xc8>
 800c426:	2000      	movs	r0, #0
 800c428:	e008      	b.n	800c43c <_printf_common+0xa8>
 800c42a:	2301      	movs	r3, #1
 800c42c:	4652      	mov	r2, sl
 800c42e:	4641      	mov	r1, r8
 800c430:	4638      	mov	r0, r7
 800c432:	47c8      	blx	r9
 800c434:	3001      	adds	r0, #1
 800c436:	d103      	bne.n	800c440 <_printf_common+0xac>
 800c438:	f04f 30ff 	mov.w	r0, #4294967295
 800c43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c440:	3501      	adds	r5, #1
 800c442:	e7c6      	b.n	800c3d2 <_printf_common+0x3e>
 800c444:	18e1      	adds	r1, r4, r3
 800c446:	1c5a      	adds	r2, r3, #1
 800c448:	2030      	movs	r0, #48	@ 0x30
 800c44a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c44e:	4422      	add	r2, r4
 800c450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c458:	3302      	adds	r3, #2
 800c45a:	e7c7      	b.n	800c3ec <_printf_common+0x58>
 800c45c:	2301      	movs	r3, #1
 800c45e:	4622      	mov	r2, r4
 800c460:	4641      	mov	r1, r8
 800c462:	4638      	mov	r0, r7
 800c464:	47c8      	blx	r9
 800c466:	3001      	adds	r0, #1
 800c468:	d0e6      	beq.n	800c438 <_printf_common+0xa4>
 800c46a:	3601      	adds	r6, #1
 800c46c:	e7d9      	b.n	800c422 <_printf_common+0x8e>
	...

0800c470 <_printf_i>:
 800c470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c474:	7e0f      	ldrb	r7, [r1, #24]
 800c476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c478:	2f78      	cmp	r7, #120	@ 0x78
 800c47a:	4691      	mov	r9, r2
 800c47c:	4680      	mov	r8, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	469a      	mov	sl, r3
 800c482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c486:	d807      	bhi.n	800c498 <_printf_i+0x28>
 800c488:	2f62      	cmp	r7, #98	@ 0x62
 800c48a:	d80a      	bhi.n	800c4a2 <_printf_i+0x32>
 800c48c:	2f00      	cmp	r7, #0
 800c48e:	f000 80d2 	beq.w	800c636 <_printf_i+0x1c6>
 800c492:	2f58      	cmp	r7, #88	@ 0x58
 800c494:	f000 80b9 	beq.w	800c60a <_printf_i+0x19a>
 800c498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c49c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c4a0:	e03a      	b.n	800c518 <_printf_i+0xa8>
 800c4a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c4a6:	2b15      	cmp	r3, #21
 800c4a8:	d8f6      	bhi.n	800c498 <_printf_i+0x28>
 800c4aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c4b0 <_printf_i+0x40>)
 800c4ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4b0:	0800c509 	.word	0x0800c509
 800c4b4:	0800c51d 	.word	0x0800c51d
 800c4b8:	0800c499 	.word	0x0800c499
 800c4bc:	0800c499 	.word	0x0800c499
 800c4c0:	0800c499 	.word	0x0800c499
 800c4c4:	0800c499 	.word	0x0800c499
 800c4c8:	0800c51d 	.word	0x0800c51d
 800c4cc:	0800c499 	.word	0x0800c499
 800c4d0:	0800c499 	.word	0x0800c499
 800c4d4:	0800c499 	.word	0x0800c499
 800c4d8:	0800c499 	.word	0x0800c499
 800c4dc:	0800c61d 	.word	0x0800c61d
 800c4e0:	0800c547 	.word	0x0800c547
 800c4e4:	0800c5d7 	.word	0x0800c5d7
 800c4e8:	0800c499 	.word	0x0800c499
 800c4ec:	0800c499 	.word	0x0800c499
 800c4f0:	0800c63f 	.word	0x0800c63f
 800c4f4:	0800c499 	.word	0x0800c499
 800c4f8:	0800c547 	.word	0x0800c547
 800c4fc:	0800c499 	.word	0x0800c499
 800c500:	0800c499 	.word	0x0800c499
 800c504:	0800c5df 	.word	0x0800c5df
 800c508:	6833      	ldr	r3, [r6, #0]
 800c50a:	1d1a      	adds	r2, r3, #4
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6032      	str	r2, [r6, #0]
 800c510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c518:	2301      	movs	r3, #1
 800c51a:	e09d      	b.n	800c658 <_printf_i+0x1e8>
 800c51c:	6833      	ldr	r3, [r6, #0]
 800c51e:	6820      	ldr	r0, [r4, #0]
 800c520:	1d19      	adds	r1, r3, #4
 800c522:	6031      	str	r1, [r6, #0]
 800c524:	0606      	lsls	r6, r0, #24
 800c526:	d501      	bpl.n	800c52c <_printf_i+0xbc>
 800c528:	681d      	ldr	r5, [r3, #0]
 800c52a:	e003      	b.n	800c534 <_printf_i+0xc4>
 800c52c:	0645      	lsls	r5, r0, #25
 800c52e:	d5fb      	bpl.n	800c528 <_printf_i+0xb8>
 800c530:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c534:	2d00      	cmp	r5, #0
 800c536:	da03      	bge.n	800c540 <_printf_i+0xd0>
 800c538:	232d      	movs	r3, #45	@ 0x2d
 800c53a:	426d      	negs	r5, r5
 800c53c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c540:	4859      	ldr	r0, [pc, #356]	@ (800c6a8 <_printf_i+0x238>)
 800c542:	230a      	movs	r3, #10
 800c544:	e011      	b.n	800c56a <_printf_i+0xfa>
 800c546:	6821      	ldr	r1, [r4, #0]
 800c548:	6833      	ldr	r3, [r6, #0]
 800c54a:	0608      	lsls	r0, r1, #24
 800c54c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c550:	d402      	bmi.n	800c558 <_printf_i+0xe8>
 800c552:	0649      	lsls	r1, r1, #25
 800c554:	bf48      	it	mi
 800c556:	b2ad      	uxthmi	r5, r5
 800c558:	2f6f      	cmp	r7, #111	@ 0x6f
 800c55a:	4853      	ldr	r0, [pc, #332]	@ (800c6a8 <_printf_i+0x238>)
 800c55c:	6033      	str	r3, [r6, #0]
 800c55e:	bf14      	ite	ne
 800c560:	230a      	movne	r3, #10
 800c562:	2308      	moveq	r3, #8
 800c564:	2100      	movs	r1, #0
 800c566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c56a:	6866      	ldr	r6, [r4, #4]
 800c56c:	60a6      	str	r6, [r4, #8]
 800c56e:	2e00      	cmp	r6, #0
 800c570:	bfa2      	ittt	ge
 800c572:	6821      	ldrge	r1, [r4, #0]
 800c574:	f021 0104 	bicge.w	r1, r1, #4
 800c578:	6021      	strge	r1, [r4, #0]
 800c57a:	b90d      	cbnz	r5, 800c580 <_printf_i+0x110>
 800c57c:	2e00      	cmp	r6, #0
 800c57e:	d04b      	beq.n	800c618 <_printf_i+0x1a8>
 800c580:	4616      	mov	r6, r2
 800c582:	fbb5 f1f3 	udiv	r1, r5, r3
 800c586:	fb03 5711 	mls	r7, r3, r1, r5
 800c58a:	5dc7      	ldrb	r7, [r0, r7]
 800c58c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c590:	462f      	mov	r7, r5
 800c592:	42bb      	cmp	r3, r7
 800c594:	460d      	mov	r5, r1
 800c596:	d9f4      	bls.n	800c582 <_printf_i+0x112>
 800c598:	2b08      	cmp	r3, #8
 800c59a:	d10b      	bne.n	800c5b4 <_printf_i+0x144>
 800c59c:	6823      	ldr	r3, [r4, #0]
 800c59e:	07df      	lsls	r7, r3, #31
 800c5a0:	d508      	bpl.n	800c5b4 <_printf_i+0x144>
 800c5a2:	6923      	ldr	r3, [r4, #16]
 800c5a4:	6861      	ldr	r1, [r4, #4]
 800c5a6:	4299      	cmp	r1, r3
 800c5a8:	bfde      	ittt	le
 800c5aa:	2330      	movle	r3, #48	@ 0x30
 800c5ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5b4:	1b92      	subs	r2, r2, r6
 800c5b6:	6122      	str	r2, [r4, #16]
 800c5b8:	f8cd a000 	str.w	sl, [sp]
 800c5bc:	464b      	mov	r3, r9
 800c5be:	aa03      	add	r2, sp, #12
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	4640      	mov	r0, r8
 800c5c4:	f7ff fee6 	bl	800c394 <_printf_common>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d14a      	bne.n	800c662 <_printf_i+0x1f2>
 800c5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d0:	b004      	add	sp, #16
 800c5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	f043 0320 	orr.w	r3, r3, #32
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	4833      	ldr	r0, [pc, #204]	@ (800c6ac <_printf_i+0x23c>)
 800c5e0:	2778      	movs	r7, #120	@ 0x78
 800c5e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	6831      	ldr	r1, [r6, #0]
 800c5ea:	061f      	lsls	r7, r3, #24
 800c5ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800c5f0:	d402      	bmi.n	800c5f8 <_printf_i+0x188>
 800c5f2:	065f      	lsls	r7, r3, #25
 800c5f4:	bf48      	it	mi
 800c5f6:	b2ad      	uxthmi	r5, r5
 800c5f8:	6031      	str	r1, [r6, #0]
 800c5fa:	07d9      	lsls	r1, r3, #31
 800c5fc:	bf44      	itt	mi
 800c5fe:	f043 0320 	orrmi.w	r3, r3, #32
 800c602:	6023      	strmi	r3, [r4, #0]
 800c604:	b11d      	cbz	r5, 800c60e <_printf_i+0x19e>
 800c606:	2310      	movs	r3, #16
 800c608:	e7ac      	b.n	800c564 <_printf_i+0xf4>
 800c60a:	4827      	ldr	r0, [pc, #156]	@ (800c6a8 <_printf_i+0x238>)
 800c60c:	e7e9      	b.n	800c5e2 <_printf_i+0x172>
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	f023 0320 	bic.w	r3, r3, #32
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	e7f6      	b.n	800c606 <_printf_i+0x196>
 800c618:	4616      	mov	r6, r2
 800c61a:	e7bd      	b.n	800c598 <_printf_i+0x128>
 800c61c:	6833      	ldr	r3, [r6, #0]
 800c61e:	6825      	ldr	r5, [r4, #0]
 800c620:	6961      	ldr	r1, [r4, #20]
 800c622:	1d18      	adds	r0, r3, #4
 800c624:	6030      	str	r0, [r6, #0]
 800c626:	062e      	lsls	r6, r5, #24
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	d501      	bpl.n	800c630 <_printf_i+0x1c0>
 800c62c:	6019      	str	r1, [r3, #0]
 800c62e:	e002      	b.n	800c636 <_printf_i+0x1c6>
 800c630:	0668      	lsls	r0, r5, #25
 800c632:	d5fb      	bpl.n	800c62c <_printf_i+0x1bc>
 800c634:	8019      	strh	r1, [r3, #0]
 800c636:	2300      	movs	r3, #0
 800c638:	6123      	str	r3, [r4, #16]
 800c63a:	4616      	mov	r6, r2
 800c63c:	e7bc      	b.n	800c5b8 <_printf_i+0x148>
 800c63e:	6833      	ldr	r3, [r6, #0]
 800c640:	1d1a      	adds	r2, r3, #4
 800c642:	6032      	str	r2, [r6, #0]
 800c644:	681e      	ldr	r6, [r3, #0]
 800c646:	6862      	ldr	r2, [r4, #4]
 800c648:	2100      	movs	r1, #0
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7f3 fde8 	bl	8000220 <memchr>
 800c650:	b108      	cbz	r0, 800c656 <_printf_i+0x1e6>
 800c652:	1b80      	subs	r0, r0, r6
 800c654:	6060      	str	r0, [r4, #4]
 800c656:	6863      	ldr	r3, [r4, #4]
 800c658:	6123      	str	r3, [r4, #16]
 800c65a:	2300      	movs	r3, #0
 800c65c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c660:	e7aa      	b.n	800c5b8 <_printf_i+0x148>
 800c662:	6923      	ldr	r3, [r4, #16]
 800c664:	4632      	mov	r2, r6
 800c666:	4649      	mov	r1, r9
 800c668:	4640      	mov	r0, r8
 800c66a:	47d0      	blx	sl
 800c66c:	3001      	adds	r0, #1
 800c66e:	d0ad      	beq.n	800c5cc <_printf_i+0x15c>
 800c670:	6823      	ldr	r3, [r4, #0]
 800c672:	079b      	lsls	r3, r3, #30
 800c674:	d413      	bmi.n	800c69e <_printf_i+0x22e>
 800c676:	68e0      	ldr	r0, [r4, #12]
 800c678:	9b03      	ldr	r3, [sp, #12]
 800c67a:	4298      	cmp	r0, r3
 800c67c:	bfb8      	it	lt
 800c67e:	4618      	movlt	r0, r3
 800c680:	e7a6      	b.n	800c5d0 <_printf_i+0x160>
 800c682:	2301      	movs	r3, #1
 800c684:	4632      	mov	r2, r6
 800c686:	4649      	mov	r1, r9
 800c688:	4640      	mov	r0, r8
 800c68a:	47d0      	blx	sl
 800c68c:	3001      	adds	r0, #1
 800c68e:	d09d      	beq.n	800c5cc <_printf_i+0x15c>
 800c690:	3501      	adds	r5, #1
 800c692:	68e3      	ldr	r3, [r4, #12]
 800c694:	9903      	ldr	r1, [sp, #12]
 800c696:	1a5b      	subs	r3, r3, r1
 800c698:	42ab      	cmp	r3, r5
 800c69a:	dcf2      	bgt.n	800c682 <_printf_i+0x212>
 800c69c:	e7eb      	b.n	800c676 <_printf_i+0x206>
 800c69e:	2500      	movs	r5, #0
 800c6a0:	f104 0619 	add.w	r6, r4, #25
 800c6a4:	e7f5      	b.n	800c692 <_printf_i+0x222>
 800c6a6:	bf00      	nop
 800c6a8:	080111d0 	.word	0x080111d0
 800c6ac:	080111e1 	.word	0x080111e1

0800c6b0 <_scanf_float>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	b087      	sub	sp, #28
 800c6b6:	4617      	mov	r7, r2
 800c6b8:	9303      	str	r3, [sp, #12]
 800c6ba:	688b      	ldr	r3, [r1, #8]
 800c6bc:	1e5a      	subs	r2, r3, #1
 800c6be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c6c2:	bf81      	itttt	hi
 800c6c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c6c8:	eb03 0b05 	addhi.w	fp, r3, r5
 800c6cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c6d0:	608b      	strhi	r3, [r1, #8]
 800c6d2:	680b      	ldr	r3, [r1, #0]
 800c6d4:	460a      	mov	r2, r1
 800c6d6:	f04f 0500 	mov.w	r5, #0
 800c6da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c6de:	f842 3b1c 	str.w	r3, [r2], #28
 800c6e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c6e6:	4680      	mov	r8, r0
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	bf98      	it	ls
 800c6ec:	f04f 0b00 	movls.w	fp, #0
 800c6f0:	9201      	str	r2, [sp, #4]
 800c6f2:	4616      	mov	r6, r2
 800c6f4:	46aa      	mov	sl, r5
 800c6f6:	46a9      	mov	r9, r5
 800c6f8:	9502      	str	r5, [sp, #8]
 800c6fa:	68a2      	ldr	r2, [r4, #8]
 800c6fc:	b152      	cbz	r2, 800c714 <_scanf_float+0x64>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	2b4e      	cmp	r3, #78	@ 0x4e
 800c704:	d864      	bhi.n	800c7d0 <_scanf_float+0x120>
 800c706:	2b40      	cmp	r3, #64	@ 0x40
 800c708:	d83c      	bhi.n	800c784 <_scanf_float+0xd4>
 800c70a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c70e:	b2c8      	uxtb	r0, r1
 800c710:	280e      	cmp	r0, #14
 800c712:	d93a      	bls.n	800c78a <_scanf_float+0xda>
 800c714:	f1b9 0f00 	cmp.w	r9, #0
 800c718:	d003      	beq.n	800c722 <_scanf_float+0x72>
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c726:	f1ba 0f01 	cmp.w	sl, #1
 800c72a:	f200 8117 	bhi.w	800c95c <_scanf_float+0x2ac>
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	429e      	cmp	r6, r3
 800c732:	f200 8108 	bhi.w	800c946 <_scanf_float+0x296>
 800c736:	2001      	movs	r0, #1
 800c738:	b007      	add	sp, #28
 800c73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c742:	2a0d      	cmp	r2, #13
 800c744:	d8e6      	bhi.n	800c714 <_scanf_float+0x64>
 800c746:	a101      	add	r1, pc, #4	@ (adr r1, 800c74c <_scanf_float+0x9c>)
 800c748:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c74c:	0800c893 	.word	0x0800c893
 800c750:	0800c715 	.word	0x0800c715
 800c754:	0800c715 	.word	0x0800c715
 800c758:	0800c715 	.word	0x0800c715
 800c75c:	0800c8f3 	.word	0x0800c8f3
 800c760:	0800c8cb 	.word	0x0800c8cb
 800c764:	0800c715 	.word	0x0800c715
 800c768:	0800c715 	.word	0x0800c715
 800c76c:	0800c8a1 	.word	0x0800c8a1
 800c770:	0800c715 	.word	0x0800c715
 800c774:	0800c715 	.word	0x0800c715
 800c778:	0800c715 	.word	0x0800c715
 800c77c:	0800c715 	.word	0x0800c715
 800c780:	0800c859 	.word	0x0800c859
 800c784:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c788:	e7db      	b.n	800c742 <_scanf_float+0x92>
 800c78a:	290e      	cmp	r1, #14
 800c78c:	d8c2      	bhi.n	800c714 <_scanf_float+0x64>
 800c78e:	a001      	add	r0, pc, #4	@ (adr r0, 800c794 <_scanf_float+0xe4>)
 800c790:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c794:	0800c849 	.word	0x0800c849
 800c798:	0800c715 	.word	0x0800c715
 800c79c:	0800c849 	.word	0x0800c849
 800c7a0:	0800c8df 	.word	0x0800c8df
 800c7a4:	0800c715 	.word	0x0800c715
 800c7a8:	0800c7f1 	.word	0x0800c7f1
 800c7ac:	0800c82f 	.word	0x0800c82f
 800c7b0:	0800c82f 	.word	0x0800c82f
 800c7b4:	0800c82f 	.word	0x0800c82f
 800c7b8:	0800c82f 	.word	0x0800c82f
 800c7bc:	0800c82f 	.word	0x0800c82f
 800c7c0:	0800c82f 	.word	0x0800c82f
 800c7c4:	0800c82f 	.word	0x0800c82f
 800c7c8:	0800c82f 	.word	0x0800c82f
 800c7cc:	0800c82f 	.word	0x0800c82f
 800c7d0:	2b6e      	cmp	r3, #110	@ 0x6e
 800c7d2:	d809      	bhi.n	800c7e8 <_scanf_float+0x138>
 800c7d4:	2b60      	cmp	r3, #96	@ 0x60
 800c7d6:	d8b2      	bhi.n	800c73e <_scanf_float+0x8e>
 800c7d8:	2b54      	cmp	r3, #84	@ 0x54
 800c7da:	d07b      	beq.n	800c8d4 <_scanf_float+0x224>
 800c7dc:	2b59      	cmp	r3, #89	@ 0x59
 800c7de:	d199      	bne.n	800c714 <_scanf_float+0x64>
 800c7e0:	2d07      	cmp	r5, #7
 800c7e2:	d197      	bne.n	800c714 <_scanf_float+0x64>
 800c7e4:	2508      	movs	r5, #8
 800c7e6:	e02c      	b.n	800c842 <_scanf_float+0x192>
 800c7e8:	2b74      	cmp	r3, #116	@ 0x74
 800c7ea:	d073      	beq.n	800c8d4 <_scanf_float+0x224>
 800c7ec:	2b79      	cmp	r3, #121	@ 0x79
 800c7ee:	e7f6      	b.n	800c7de <_scanf_float+0x12e>
 800c7f0:	6821      	ldr	r1, [r4, #0]
 800c7f2:	05c8      	lsls	r0, r1, #23
 800c7f4:	d51b      	bpl.n	800c82e <_scanf_float+0x17e>
 800c7f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c7fa:	6021      	str	r1, [r4, #0]
 800c7fc:	f109 0901 	add.w	r9, r9, #1
 800c800:	f1bb 0f00 	cmp.w	fp, #0
 800c804:	d003      	beq.n	800c80e <_scanf_float+0x15e>
 800c806:	3201      	adds	r2, #1
 800c808:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c80c:	60a2      	str	r2, [r4, #8]
 800c80e:	68a3      	ldr	r3, [r4, #8]
 800c810:	3b01      	subs	r3, #1
 800c812:	60a3      	str	r3, [r4, #8]
 800c814:	6923      	ldr	r3, [r4, #16]
 800c816:	3301      	adds	r3, #1
 800c818:	6123      	str	r3, [r4, #16]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	2b00      	cmp	r3, #0
 800c820:	607b      	str	r3, [r7, #4]
 800c822:	f340 8087 	ble.w	800c934 <_scanf_float+0x284>
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	3301      	adds	r3, #1
 800c82a:	603b      	str	r3, [r7, #0]
 800c82c:	e765      	b.n	800c6fa <_scanf_float+0x4a>
 800c82e:	eb1a 0105 	adds.w	r1, sl, r5
 800c832:	f47f af6f 	bne.w	800c714 <_scanf_float+0x64>
 800c836:	6822      	ldr	r2, [r4, #0]
 800c838:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c83c:	6022      	str	r2, [r4, #0]
 800c83e:	460d      	mov	r5, r1
 800c840:	468a      	mov	sl, r1
 800c842:	f806 3b01 	strb.w	r3, [r6], #1
 800c846:	e7e2      	b.n	800c80e <_scanf_float+0x15e>
 800c848:	6822      	ldr	r2, [r4, #0]
 800c84a:	0610      	lsls	r0, r2, #24
 800c84c:	f57f af62 	bpl.w	800c714 <_scanf_float+0x64>
 800c850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c854:	6022      	str	r2, [r4, #0]
 800c856:	e7f4      	b.n	800c842 <_scanf_float+0x192>
 800c858:	f1ba 0f00 	cmp.w	sl, #0
 800c85c:	d10e      	bne.n	800c87c <_scanf_float+0x1cc>
 800c85e:	f1b9 0f00 	cmp.w	r9, #0
 800c862:	d10e      	bne.n	800c882 <_scanf_float+0x1d2>
 800c864:	6822      	ldr	r2, [r4, #0]
 800c866:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c86a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c86e:	d108      	bne.n	800c882 <_scanf_float+0x1d2>
 800c870:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c874:	6022      	str	r2, [r4, #0]
 800c876:	f04f 0a01 	mov.w	sl, #1
 800c87a:	e7e2      	b.n	800c842 <_scanf_float+0x192>
 800c87c:	f1ba 0f02 	cmp.w	sl, #2
 800c880:	d055      	beq.n	800c92e <_scanf_float+0x27e>
 800c882:	2d01      	cmp	r5, #1
 800c884:	d002      	beq.n	800c88c <_scanf_float+0x1dc>
 800c886:	2d04      	cmp	r5, #4
 800c888:	f47f af44 	bne.w	800c714 <_scanf_float+0x64>
 800c88c:	3501      	adds	r5, #1
 800c88e:	b2ed      	uxtb	r5, r5
 800c890:	e7d7      	b.n	800c842 <_scanf_float+0x192>
 800c892:	f1ba 0f01 	cmp.w	sl, #1
 800c896:	f47f af3d 	bne.w	800c714 <_scanf_float+0x64>
 800c89a:	f04f 0a02 	mov.w	sl, #2
 800c89e:	e7d0      	b.n	800c842 <_scanf_float+0x192>
 800c8a0:	b97d      	cbnz	r5, 800c8c2 <_scanf_float+0x212>
 800c8a2:	f1b9 0f00 	cmp.w	r9, #0
 800c8a6:	f47f af38 	bne.w	800c71a <_scanf_float+0x6a>
 800c8aa:	6822      	ldr	r2, [r4, #0]
 800c8ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c8b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c8b4:	f040 8108 	bne.w	800cac8 <_scanf_float+0x418>
 800c8b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c8bc:	6022      	str	r2, [r4, #0]
 800c8be:	2501      	movs	r5, #1
 800c8c0:	e7bf      	b.n	800c842 <_scanf_float+0x192>
 800c8c2:	2d03      	cmp	r5, #3
 800c8c4:	d0e2      	beq.n	800c88c <_scanf_float+0x1dc>
 800c8c6:	2d05      	cmp	r5, #5
 800c8c8:	e7de      	b.n	800c888 <_scanf_float+0x1d8>
 800c8ca:	2d02      	cmp	r5, #2
 800c8cc:	f47f af22 	bne.w	800c714 <_scanf_float+0x64>
 800c8d0:	2503      	movs	r5, #3
 800c8d2:	e7b6      	b.n	800c842 <_scanf_float+0x192>
 800c8d4:	2d06      	cmp	r5, #6
 800c8d6:	f47f af1d 	bne.w	800c714 <_scanf_float+0x64>
 800c8da:	2507      	movs	r5, #7
 800c8dc:	e7b1      	b.n	800c842 <_scanf_float+0x192>
 800c8de:	6822      	ldr	r2, [r4, #0]
 800c8e0:	0591      	lsls	r1, r2, #22
 800c8e2:	f57f af17 	bpl.w	800c714 <_scanf_float+0x64>
 800c8e6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c8ea:	6022      	str	r2, [r4, #0]
 800c8ec:	f8cd 9008 	str.w	r9, [sp, #8]
 800c8f0:	e7a7      	b.n	800c842 <_scanf_float+0x192>
 800c8f2:	6822      	ldr	r2, [r4, #0]
 800c8f4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c8f8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c8fc:	d006      	beq.n	800c90c <_scanf_float+0x25c>
 800c8fe:	0550      	lsls	r0, r2, #21
 800c900:	f57f af08 	bpl.w	800c714 <_scanf_float+0x64>
 800c904:	f1b9 0f00 	cmp.w	r9, #0
 800c908:	f000 80de 	beq.w	800cac8 <_scanf_float+0x418>
 800c90c:	0591      	lsls	r1, r2, #22
 800c90e:	bf58      	it	pl
 800c910:	9902      	ldrpl	r1, [sp, #8]
 800c912:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c916:	bf58      	it	pl
 800c918:	eba9 0101 	subpl.w	r1, r9, r1
 800c91c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c920:	bf58      	it	pl
 800c922:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c926:	6022      	str	r2, [r4, #0]
 800c928:	f04f 0900 	mov.w	r9, #0
 800c92c:	e789      	b.n	800c842 <_scanf_float+0x192>
 800c92e:	f04f 0a03 	mov.w	sl, #3
 800c932:	e786      	b.n	800c842 <_scanf_float+0x192>
 800c934:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c938:	4639      	mov	r1, r7
 800c93a:	4640      	mov	r0, r8
 800c93c:	4798      	blx	r3
 800c93e:	2800      	cmp	r0, #0
 800c940:	f43f aedb 	beq.w	800c6fa <_scanf_float+0x4a>
 800c944:	e6e6      	b.n	800c714 <_scanf_float+0x64>
 800c946:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c94a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c94e:	463a      	mov	r2, r7
 800c950:	4640      	mov	r0, r8
 800c952:	4798      	blx	r3
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	3b01      	subs	r3, #1
 800c958:	6123      	str	r3, [r4, #16]
 800c95a:	e6e8      	b.n	800c72e <_scanf_float+0x7e>
 800c95c:	1e6b      	subs	r3, r5, #1
 800c95e:	2b06      	cmp	r3, #6
 800c960:	d824      	bhi.n	800c9ac <_scanf_float+0x2fc>
 800c962:	2d02      	cmp	r5, #2
 800c964:	d836      	bhi.n	800c9d4 <_scanf_float+0x324>
 800c966:	9b01      	ldr	r3, [sp, #4]
 800c968:	429e      	cmp	r6, r3
 800c96a:	f67f aee4 	bls.w	800c736 <_scanf_float+0x86>
 800c96e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c976:	463a      	mov	r2, r7
 800c978:	4640      	mov	r0, r8
 800c97a:	4798      	blx	r3
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	3b01      	subs	r3, #1
 800c980:	6123      	str	r3, [r4, #16]
 800c982:	e7f0      	b.n	800c966 <_scanf_float+0x2b6>
 800c984:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c988:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c98c:	463a      	mov	r2, r7
 800c98e:	4640      	mov	r0, r8
 800c990:	4798      	blx	r3
 800c992:	6923      	ldr	r3, [r4, #16]
 800c994:	3b01      	subs	r3, #1
 800c996:	6123      	str	r3, [r4, #16]
 800c998:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c99c:	fa5f fa8a 	uxtb.w	sl, sl
 800c9a0:	f1ba 0f02 	cmp.w	sl, #2
 800c9a4:	d1ee      	bne.n	800c984 <_scanf_float+0x2d4>
 800c9a6:	3d03      	subs	r5, #3
 800c9a8:	b2ed      	uxtb	r5, r5
 800c9aa:	1b76      	subs	r6, r6, r5
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	05da      	lsls	r2, r3, #23
 800c9b0:	d530      	bpl.n	800ca14 <_scanf_float+0x364>
 800c9b2:	055b      	lsls	r3, r3, #21
 800c9b4:	d511      	bpl.n	800c9da <_scanf_float+0x32a>
 800c9b6:	9b01      	ldr	r3, [sp, #4]
 800c9b8:	429e      	cmp	r6, r3
 800c9ba:	f67f aebc 	bls.w	800c736 <_scanf_float+0x86>
 800c9be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9c6:	463a      	mov	r2, r7
 800c9c8:	4640      	mov	r0, r8
 800c9ca:	4798      	blx	r3
 800c9cc:	6923      	ldr	r3, [r4, #16]
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	6123      	str	r3, [r4, #16]
 800c9d2:	e7f0      	b.n	800c9b6 <_scanf_float+0x306>
 800c9d4:	46aa      	mov	sl, r5
 800c9d6:	46b3      	mov	fp, r6
 800c9d8:	e7de      	b.n	800c998 <_scanf_float+0x2e8>
 800c9da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c9de:	6923      	ldr	r3, [r4, #16]
 800c9e0:	2965      	cmp	r1, #101	@ 0x65
 800c9e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9e6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c9ea:	6123      	str	r3, [r4, #16]
 800c9ec:	d00c      	beq.n	800ca08 <_scanf_float+0x358>
 800c9ee:	2945      	cmp	r1, #69	@ 0x45
 800c9f0:	d00a      	beq.n	800ca08 <_scanf_float+0x358>
 800c9f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9f6:	463a      	mov	r2, r7
 800c9f8:	4640      	mov	r0, r8
 800c9fa:	4798      	blx	r3
 800c9fc:	6923      	ldr	r3, [r4, #16]
 800c9fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ca02:	3b01      	subs	r3, #1
 800ca04:	1eb5      	subs	r5, r6, #2
 800ca06:	6123      	str	r3, [r4, #16]
 800ca08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca0c:	463a      	mov	r2, r7
 800ca0e:	4640      	mov	r0, r8
 800ca10:	4798      	blx	r3
 800ca12:	462e      	mov	r6, r5
 800ca14:	6822      	ldr	r2, [r4, #0]
 800ca16:	f012 0210 	ands.w	r2, r2, #16
 800ca1a:	d001      	beq.n	800ca20 <_scanf_float+0x370>
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	e68b      	b.n	800c738 <_scanf_float+0x88>
 800ca20:	7032      	strb	r2, [r6, #0]
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ca28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca2c:	d11c      	bne.n	800ca68 <_scanf_float+0x3b8>
 800ca2e:	9b02      	ldr	r3, [sp, #8]
 800ca30:	454b      	cmp	r3, r9
 800ca32:	eba3 0209 	sub.w	r2, r3, r9
 800ca36:	d123      	bne.n	800ca80 <_scanf_float+0x3d0>
 800ca38:	9901      	ldr	r1, [sp, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	4640      	mov	r0, r8
 800ca3e:	f002 fbe3 	bl	800f208 <_strtod_r>
 800ca42:	9b03      	ldr	r3, [sp, #12]
 800ca44:	6821      	ldr	r1, [r4, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f011 0f02 	tst.w	r1, #2
 800ca4c:	ec57 6b10 	vmov	r6, r7, d0
 800ca50:	f103 0204 	add.w	r2, r3, #4
 800ca54:	d01f      	beq.n	800ca96 <_scanf_float+0x3e6>
 800ca56:	9903      	ldr	r1, [sp, #12]
 800ca58:	600a      	str	r2, [r1, #0]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	e9c3 6700 	strd	r6, r7, [r3]
 800ca60:	68e3      	ldr	r3, [r4, #12]
 800ca62:	3301      	adds	r3, #1
 800ca64:	60e3      	str	r3, [r4, #12]
 800ca66:	e7d9      	b.n	800ca1c <_scanf_float+0x36c>
 800ca68:	9b04      	ldr	r3, [sp, #16]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0e4      	beq.n	800ca38 <_scanf_float+0x388>
 800ca6e:	9905      	ldr	r1, [sp, #20]
 800ca70:	230a      	movs	r3, #10
 800ca72:	3101      	adds	r1, #1
 800ca74:	4640      	mov	r0, r8
 800ca76:	f002 fc47 	bl	800f308 <_strtol_r>
 800ca7a:	9b04      	ldr	r3, [sp, #16]
 800ca7c:	9e05      	ldr	r6, [sp, #20]
 800ca7e:	1ac2      	subs	r2, r0, r3
 800ca80:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ca84:	429e      	cmp	r6, r3
 800ca86:	bf28      	it	cs
 800ca88:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ca8c:	4910      	ldr	r1, [pc, #64]	@ (800cad0 <_scanf_float+0x420>)
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f000 f8f6 	bl	800cc80 <siprintf>
 800ca94:	e7d0      	b.n	800ca38 <_scanf_float+0x388>
 800ca96:	f011 0f04 	tst.w	r1, #4
 800ca9a:	9903      	ldr	r1, [sp, #12]
 800ca9c:	600a      	str	r2, [r1, #0]
 800ca9e:	d1dc      	bne.n	800ca5a <_scanf_float+0x3aa>
 800caa0:	681d      	ldr	r5, [r3, #0]
 800caa2:	4632      	mov	r2, r6
 800caa4:	463b      	mov	r3, r7
 800caa6:	4630      	mov	r0, r6
 800caa8:	4639      	mov	r1, r7
 800caaa:	f7f4 f867 	bl	8000b7c <__aeabi_dcmpun>
 800caae:	b128      	cbz	r0, 800cabc <_scanf_float+0x40c>
 800cab0:	4808      	ldr	r0, [pc, #32]	@ (800cad4 <_scanf_float+0x424>)
 800cab2:	f000 fa57 	bl	800cf64 <nanf>
 800cab6:	ed85 0a00 	vstr	s0, [r5]
 800caba:	e7d1      	b.n	800ca60 <_scanf_float+0x3b0>
 800cabc:	4630      	mov	r0, r6
 800cabe:	4639      	mov	r1, r7
 800cac0:	f7f4 f8ba 	bl	8000c38 <__aeabi_d2f>
 800cac4:	6028      	str	r0, [r5, #0]
 800cac6:	e7cb      	b.n	800ca60 <_scanf_float+0x3b0>
 800cac8:	f04f 0900 	mov.w	r9, #0
 800cacc:	e629      	b.n	800c722 <_scanf_float+0x72>
 800cace:	bf00      	nop
 800cad0:	080111f2 	.word	0x080111f2
 800cad4:	080111bd 	.word	0x080111bd

0800cad8 <std>:
 800cad8:	2300      	movs	r3, #0
 800cada:	b510      	push	{r4, lr}
 800cadc:	4604      	mov	r4, r0
 800cade:	e9c0 3300 	strd	r3, r3, [r0]
 800cae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cae6:	6083      	str	r3, [r0, #8]
 800cae8:	8181      	strh	r1, [r0, #12]
 800caea:	6643      	str	r3, [r0, #100]	@ 0x64
 800caec:	81c2      	strh	r2, [r0, #14]
 800caee:	6183      	str	r3, [r0, #24]
 800caf0:	4619      	mov	r1, r3
 800caf2:	2208      	movs	r2, #8
 800caf4:	305c      	adds	r0, #92	@ 0x5c
 800caf6:	f000 f940 	bl	800cd7a <memset>
 800cafa:	4b0d      	ldr	r3, [pc, #52]	@ (800cb30 <std+0x58>)
 800cafc:	6263      	str	r3, [r4, #36]	@ 0x24
 800cafe:	4b0d      	ldr	r3, [pc, #52]	@ (800cb34 <std+0x5c>)
 800cb00:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb02:	4b0d      	ldr	r3, [pc, #52]	@ (800cb38 <std+0x60>)
 800cb04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb06:	4b0d      	ldr	r3, [pc, #52]	@ (800cb3c <std+0x64>)
 800cb08:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb0a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb40 <std+0x68>)
 800cb0c:	6224      	str	r4, [r4, #32]
 800cb0e:	429c      	cmp	r4, r3
 800cb10:	d006      	beq.n	800cb20 <std+0x48>
 800cb12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb16:	4294      	cmp	r4, r2
 800cb18:	d002      	beq.n	800cb20 <std+0x48>
 800cb1a:	33d0      	adds	r3, #208	@ 0xd0
 800cb1c:	429c      	cmp	r4, r3
 800cb1e:	d105      	bne.n	800cb2c <std+0x54>
 800cb20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb28:	f000 ba0a 	b.w	800cf40 <__retarget_lock_init_recursive>
 800cb2c:	bd10      	pop	{r4, pc}
 800cb2e:	bf00      	nop
 800cb30:	0800ccc1 	.word	0x0800ccc1
 800cb34:	0800cce3 	.word	0x0800cce3
 800cb38:	0800cd1b 	.word	0x0800cd1b
 800cb3c:	0800cd3f 	.word	0x0800cd3f
 800cb40:	200006a8 	.word	0x200006a8

0800cb44 <stdio_exit_handler>:
 800cb44:	4a02      	ldr	r2, [pc, #8]	@ (800cb50 <stdio_exit_handler+0xc>)
 800cb46:	4903      	ldr	r1, [pc, #12]	@ (800cb54 <stdio_exit_handler+0x10>)
 800cb48:	4803      	ldr	r0, [pc, #12]	@ (800cb58 <stdio_exit_handler+0x14>)
 800cb4a:	f000 b87b 	b.w	800cc44 <_fwalk_sglue>
 800cb4e:	bf00      	nop
 800cb50:	20000010 	.word	0x20000010
 800cb54:	0800f949 	.word	0x0800f949
 800cb58:	20000020 	.word	0x20000020

0800cb5c <cleanup_stdio>:
 800cb5c:	6841      	ldr	r1, [r0, #4]
 800cb5e:	4b0c      	ldr	r3, [pc, #48]	@ (800cb90 <cleanup_stdio+0x34>)
 800cb60:	4299      	cmp	r1, r3
 800cb62:	b510      	push	{r4, lr}
 800cb64:	4604      	mov	r4, r0
 800cb66:	d001      	beq.n	800cb6c <cleanup_stdio+0x10>
 800cb68:	f002 feee 	bl	800f948 <_fflush_r>
 800cb6c:	68a1      	ldr	r1, [r4, #8]
 800cb6e:	4b09      	ldr	r3, [pc, #36]	@ (800cb94 <cleanup_stdio+0x38>)
 800cb70:	4299      	cmp	r1, r3
 800cb72:	d002      	beq.n	800cb7a <cleanup_stdio+0x1e>
 800cb74:	4620      	mov	r0, r4
 800cb76:	f002 fee7 	bl	800f948 <_fflush_r>
 800cb7a:	68e1      	ldr	r1, [r4, #12]
 800cb7c:	4b06      	ldr	r3, [pc, #24]	@ (800cb98 <cleanup_stdio+0x3c>)
 800cb7e:	4299      	cmp	r1, r3
 800cb80:	d004      	beq.n	800cb8c <cleanup_stdio+0x30>
 800cb82:	4620      	mov	r0, r4
 800cb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb88:	f002 bede 	b.w	800f948 <_fflush_r>
 800cb8c:	bd10      	pop	{r4, pc}
 800cb8e:	bf00      	nop
 800cb90:	200006a8 	.word	0x200006a8
 800cb94:	20000710 	.word	0x20000710
 800cb98:	20000778 	.word	0x20000778

0800cb9c <global_stdio_init.part.0>:
 800cb9c:	b510      	push	{r4, lr}
 800cb9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cbcc <global_stdio_init.part.0+0x30>)
 800cba0:	4c0b      	ldr	r4, [pc, #44]	@ (800cbd0 <global_stdio_init.part.0+0x34>)
 800cba2:	4a0c      	ldr	r2, [pc, #48]	@ (800cbd4 <global_stdio_init.part.0+0x38>)
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	4620      	mov	r0, r4
 800cba8:	2200      	movs	r2, #0
 800cbaa:	2104      	movs	r1, #4
 800cbac:	f7ff ff94 	bl	800cad8 <std>
 800cbb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	2109      	movs	r1, #9
 800cbb8:	f7ff ff8e 	bl	800cad8 <std>
 800cbbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc6:	2112      	movs	r1, #18
 800cbc8:	f7ff bf86 	b.w	800cad8 <std>
 800cbcc:	200007e0 	.word	0x200007e0
 800cbd0:	200006a8 	.word	0x200006a8
 800cbd4:	0800cb45 	.word	0x0800cb45

0800cbd8 <__sfp_lock_acquire>:
 800cbd8:	4801      	ldr	r0, [pc, #4]	@ (800cbe0 <__sfp_lock_acquire+0x8>)
 800cbda:	f000 b9b2 	b.w	800cf42 <__retarget_lock_acquire_recursive>
 800cbde:	bf00      	nop
 800cbe0:	200007e9 	.word	0x200007e9

0800cbe4 <__sfp_lock_release>:
 800cbe4:	4801      	ldr	r0, [pc, #4]	@ (800cbec <__sfp_lock_release+0x8>)
 800cbe6:	f000 b9ad 	b.w	800cf44 <__retarget_lock_release_recursive>
 800cbea:	bf00      	nop
 800cbec:	200007e9 	.word	0x200007e9

0800cbf0 <__sinit>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	f7ff fff0 	bl	800cbd8 <__sfp_lock_acquire>
 800cbf8:	6a23      	ldr	r3, [r4, #32]
 800cbfa:	b11b      	cbz	r3, 800cc04 <__sinit+0x14>
 800cbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc00:	f7ff bff0 	b.w	800cbe4 <__sfp_lock_release>
 800cc04:	4b04      	ldr	r3, [pc, #16]	@ (800cc18 <__sinit+0x28>)
 800cc06:	6223      	str	r3, [r4, #32]
 800cc08:	4b04      	ldr	r3, [pc, #16]	@ (800cc1c <__sinit+0x2c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f5      	bne.n	800cbfc <__sinit+0xc>
 800cc10:	f7ff ffc4 	bl	800cb9c <global_stdio_init.part.0>
 800cc14:	e7f2      	b.n	800cbfc <__sinit+0xc>
 800cc16:	bf00      	nop
 800cc18:	0800cb5d 	.word	0x0800cb5d
 800cc1c:	200007e0 	.word	0x200007e0

0800cc20 <fiprintf>:
 800cc20:	b40e      	push	{r1, r2, r3}
 800cc22:	b503      	push	{r0, r1, lr}
 800cc24:	4601      	mov	r1, r0
 800cc26:	ab03      	add	r3, sp, #12
 800cc28:	4805      	ldr	r0, [pc, #20]	@ (800cc40 <fiprintf+0x20>)
 800cc2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc2e:	6800      	ldr	r0, [r0, #0]
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	f002 fced 	bl	800f610 <_vfiprintf_r>
 800cc36:	b002      	add	sp, #8
 800cc38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc3c:	b003      	add	sp, #12
 800cc3e:	4770      	bx	lr
 800cc40:	2000001c 	.word	0x2000001c

0800cc44 <_fwalk_sglue>:
 800cc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc48:	4607      	mov	r7, r0
 800cc4a:	4688      	mov	r8, r1
 800cc4c:	4614      	mov	r4, r2
 800cc4e:	2600      	movs	r6, #0
 800cc50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc54:	f1b9 0901 	subs.w	r9, r9, #1
 800cc58:	d505      	bpl.n	800cc66 <_fwalk_sglue+0x22>
 800cc5a:	6824      	ldr	r4, [r4, #0]
 800cc5c:	2c00      	cmp	r4, #0
 800cc5e:	d1f7      	bne.n	800cc50 <_fwalk_sglue+0xc>
 800cc60:	4630      	mov	r0, r6
 800cc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc66:	89ab      	ldrh	r3, [r5, #12]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d907      	bls.n	800cc7c <_fwalk_sglue+0x38>
 800cc6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc70:	3301      	adds	r3, #1
 800cc72:	d003      	beq.n	800cc7c <_fwalk_sglue+0x38>
 800cc74:	4629      	mov	r1, r5
 800cc76:	4638      	mov	r0, r7
 800cc78:	47c0      	blx	r8
 800cc7a:	4306      	orrs	r6, r0
 800cc7c:	3568      	adds	r5, #104	@ 0x68
 800cc7e:	e7e9      	b.n	800cc54 <_fwalk_sglue+0x10>

0800cc80 <siprintf>:
 800cc80:	b40e      	push	{r1, r2, r3}
 800cc82:	b500      	push	{lr}
 800cc84:	b09c      	sub	sp, #112	@ 0x70
 800cc86:	ab1d      	add	r3, sp, #116	@ 0x74
 800cc88:	9002      	str	r0, [sp, #8]
 800cc8a:	9006      	str	r0, [sp, #24]
 800cc8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cc90:	4809      	ldr	r0, [pc, #36]	@ (800ccb8 <siprintf+0x38>)
 800cc92:	9107      	str	r1, [sp, #28]
 800cc94:	9104      	str	r1, [sp, #16]
 800cc96:	4909      	ldr	r1, [pc, #36]	@ (800ccbc <siprintf+0x3c>)
 800cc98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc9c:	9105      	str	r1, [sp, #20]
 800cc9e:	6800      	ldr	r0, [r0, #0]
 800cca0:	9301      	str	r3, [sp, #4]
 800cca2:	a902      	add	r1, sp, #8
 800cca4:	f002 fb8e 	bl	800f3c4 <_svfiprintf_r>
 800cca8:	9b02      	ldr	r3, [sp, #8]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	701a      	strb	r2, [r3, #0]
 800ccae:	b01c      	add	sp, #112	@ 0x70
 800ccb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccb4:	b003      	add	sp, #12
 800ccb6:	4770      	bx	lr
 800ccb8:	2000001c 	.word	0x2000001c
 800ccbc:	ffff0208 	.word	0xffff0208

0800ccc0 <__sread>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc8:	f000 f8c8 	bl	800ce5c <_read_r>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	bfab      	itete	ge
 800ccd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ccd2:	89a3      	ldrhlt	r3, [r4, #12]
 800ccd4:	181b      	addge	r3, r3, r0
 800ccd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ccda:	bfac      	ite	ge
 800ccdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ccde:	81a3      	strhlt	r3, [r4, #12]
 800cce0:	bd10      	pop	{r4, pc}

0800cce2 <__swrite>:
 800cce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce6:	461f      	mov	r7, r3
 800cce8:	898b      	ldrh	r3, [r1, #12]
 800ccea:	05db      	lsls	r3, r3, #23
 800ccec:	4605      	mov	r5, r0
 800ccee:	460c      	mov	r4, r1
 800ccf0:	4616      	mov	r6, r2
 800ccf2:	d505      	bpl.n	800cd00 <__swrite+0x1e>
 800ccf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f000 f89c 	bl	800ce38 <_lseek_r>
 800cd00:	89a3      	ldrh	r3, [r4, #12]
 800cd02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd0a:	81a3      	strh	r3, [r4, #12]
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	463b      	mov	r3, r7
 800cd10:	4628      	mov	r0, r5
 800cd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd16:	f000 b8d7 	b.w	800cec8 <_write_r>

0800cd1a <__sseek>:
 800cd1a:	b510      	push	{r4, lr}
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd22:	f000 f889 	bl	800ce38 <_lseek_r>
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	bf15      	itete	ne
 800cd2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd36:	81a3      	strheq	r3, [r4, #12]
 800cd38:	bf18      	it	ne
 800cd3a:	81a3      	strhne	r3, [r4, #12]
 800cd3c:	bd10      	pop	{r4, pc}

0800cd3e <__sclose>:
 800cd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd42:	f000 b869 	b.w	800ce18 <_close_r>

0800cd46 <memmove>:
 800cd46:	4288      	cmp	r0, r1
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	eb01 0402 	add.w	r4, r1, r2
 800cd4e:	d902      	bls.n	800cd56 <memmove+0x10>
 800cd50:	4284      	cmp	r4, r0
 800cd52:	4623      	mov	r3, r4
 800cd54:	d807      	bhi.n	800cd66 <memmove+0x20>
 800cd56:	1e43      	subs	r3, r0, #1
 800cd58:	42a1      	cmp	r1, r4
 800cd5a:	d008      	beq.n	800cd6e <memmove+0x28>
 800cd5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd60:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd64:	e7f8      	b.n	800cd58 <memmove+0x12>
 800cd66:	4402      	add	r2, r0
 800cd68:	4601      	mov	r1, r0
 800cd6a:	428a      	cmp	r2, r1
 800cd6c:	d100      	bne.n	800cd70 <memmove+0x2a>
 800cd6e:	bd10      	pop	{r4, pc}
 800cd70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd78:	e7f7      	b.n	800cd6a <memmove+0x24>

0800cd7a <memset>:
 800cd7a:	4402      	add	r2, r0
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d100      	bne.n	800cd84 <memset+0xa>
 800cd82:	4770      	bx	lr
 800cd84:	f803 1b01 	strb.w	r1, [r3], #1
 800cd88:	e7f9      	b.n	800cd7e <memset+0x4>

0800cd8a <strncpy>:
 800cd8a:	b510      	push	{r4, lr}
 800cd8c:	3901      	subs	r1, #1
 800cd8e:	4603      	mov	r3, r0
 800cd90:	b132      	cbz	r2, 800cda0 <strncpy+0x16>
 800cd92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd96:	f803 4b01 	strb.w	r4, [r3], #1
 800cd9a:	3a01      	subs	r2, #1
 800cd9c:	2c00      	cmp	r4, #0
 800cd9e:	d1f7      	bne.n	800cd90 <strncpy+0x6>
 800cda0:	441a      	add	r2, r3
 800cda2:	2100      	movs	r1, #0
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d100      	bne.n	800cdaa <strncpy+0x20>
 800cda8:	bd10      	pop	{r4, pc}
 800cdaa:	f803 1b01 	strb.w	r1, [r3], #1
 800cdae:	e7f9      	b.n	800cda4 <strncpy+0x1a>

0800cdb0 <_raise_r>:
 800cdb0:	291f      	cmp	r1, #31
 800cdb2:	b538      	push	{r3, r4, r5, lr}
 800cdb4:	4605      	mov	r5, r0
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	d904      	bls.n	800cdc4 <_raise_r+0x14>
 800cdba:	2316      	movs	r3, #22
 800cdbc:	6003      	str	r3, [r0, #0]
 800cdbe:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cdc6:	b112      	cbz	r2, 800cdce <_raise_r+0x1e>
 800cdc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdcc:	b94b      	cbnz	r3, 800cde2 <_raise_r+0x32>
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f000 f868 	bl	800cea4 <_getpid_r>
 800cdd4:	4622      	mov	r2, r4
 800cdd6:	4601      	mov	r1, r0
 800cdd8:	4628      	mov	r0, r5
 800cdda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdde:	f000 b84f 	b.w	800ce80 <_kill_r>
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d00a      	beq.n	800cdfc <_raise_r+0x4c>
 800cde6:	1c59      	adds	r1, r3, #1
 800cde8:	d103      	bne.n	800cdf2 <_raise_r+0x42>
 800cdea:	2316      	movs	r3, #22
 800cdec:	6003      	str	r3, [r0, #0]
 800cdee:	2001      	movs	r0, #1
 800cdf0:	e7e7      	b.n	800cdc2 <_raise_r+0x12>
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	4798      	blx	r3
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	e7e0      	b.n	800cdc2 <_raise_r+0x12>

0800ce00 <raise>:
 800ce00:	4b02      	ldr	r3, [pc, #8]	@ (800ce0c <raise+0xc>)
 800ce02:	4601      	mov	r1, r0
 800ce04:	6818      	ldr	r0, [r3, #0]
 800ce06:	f7ff bfd3 	b.w	800cdb0 <_raise_r>
 800ce0a:	bf00      	nop
 800ce0c:	2000001c 	.word	0x2000001c

0800ce10 <_localeconv_r>:
 800ce10:	4800      	ldr	r0, [pc, #0]	@ (800ce14 <_localeconv_r+0x4>)
 800ce12:	4770      	bx	lr
 800ce14:	2000015c 	.word	0x2000015c

0800ce18 <_close_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4d06      	ldr	r5, [pc, #24]	@ (800ce34 <_close_r+0x1c>)
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4604      	mov	r4, r0
 800ce20:	4608      	mov	r0, r1
 800ce22:	602b      	str	r3, [r5, #0]
 800ce24:	f7f6 ffb6 	bl	8003d94 <_close>
 800ce28:	1c43      	adds	r3, r0, #1
 800ce2a:	d102      	bne.n	800ce32 <_close_r+0x1a>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	b103      	cbz	r3, 800ce32 <_close_r+0x1a>
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	200007e4 	.word	0x200007e4

0800ce38 <_lseek_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4d07      	ldr	r5, [pc, #28]	@ (800ce58 <_lseek_r+0x20>)
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	4608      	mov	r0, r1
 800ce40:	4611      	mov	r1, r2
 800ce42:	2200      	movs	r2, #0
 800ce44:	602a      	str	r2, [r5, #0]
 800ce46:	461a      	mov	r2, r3
 800ce48:	f7f6 ffcb 	bl	8003de2 <_lseek>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d102      	bne.n	800ce56 <_lseek_r+0x1e>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b103      	cbz	r3, 800ce56 <_lseek_r+0x1e>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	200007e4 	.word	0x200007e4

0800ce5c <_read_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4d07      	ldr	r5, [pc, #28]	@ (800ce7c <_read_r+0x20>)
 800ce60:	4604      	mov	r4, r0
 800ce62:	4608      	mov	r0, r1
 800ce64:	4611      	mov	r1, r2
 800ce66:	2200      	movs	r2, #0
 800ce68:	602a      	str	r2, [r5, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	f7f6 ff59 	bl	8003d22 <_read>
 800ce70:	1c43      	adds	r3, r0, #1
 800ce72:	d102      	bne.n	800ce7a <_read_r+0x1e>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	b103      	cbz	r3, 800ce7a <_read_r+0x1e>
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	200007e4 	.word	0x200007e4

0800ce80 <_kill_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4d07      	ldr	r5, [pc, #28]	@ (800cea0 <_kill_r+0x20>)
 800ce84:	2300      	movs	r3, #0
 800ce86:	4604      	mov	r4, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	602b      	str	r3, [r5, #0]
 800ce8e:	f7f6 ff2d 	bl	8003cec <_kill>
 800ce92:	1c43      	adds	r3, r0, #1
 800ce94:	d102      	bne.n	800ce9c <_kill_r+0x1c>
 800ce96:	682b      	ldr	r3, [r5, #0]
 800ce98:	b103      	cbz	r3, 800ce9c <_kill_r+0x1c>
 800ce9a:	6023      	str	r3, [r4, #0]
 800ce9c:	bd38      	pop	{r3, r4, r5, pc}
 800ce9e:	bf00      	nop
 800cea0:	200007e4 	.word	0x200007e4

0800cea4 <_getpid_r>:
 800cea4:	f7f6 bf1a 	b.w	8003cdc <_getpid>

0800cea8 <_sbrk_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d06      	ldr	r5, [pc, #24]	@ (800cec4 <_sbrk_r+0x1c>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	f7f6 ffa2 	bl	8003dfc <_sbrk>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_sbrk_r+0x1a>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_sbrk_r+0x1a>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	200007e4 	.word	0x200007e4

0800cec8 <_write_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	4d07      	ldr	r5, [pc, #28]	@ (800cee8 <_write_r+0x20>)
 800cecc:	4604      	mov	r4, r0
 800cece:	4608      	mov	r0, r1
 800ced0:	4611      	mov	r1, r2
 800ced2:	2200      	movs	r2, #0
 800ced4:	602a      	str	r2, [r5, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	f7f6 ff40 	bl	8003d5c <_write>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_write_r+0x1e>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_write_r+0x1e>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	200007e4 	.word	0x200007e4

0800ceec <__errno>:
 800ceec:	4b01      	ldr	r3, [pc, #4]	@ (800cef4 <__errno+0x8>)
 800ceee:	6818      	ldr	r0, [r3, #0]
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	2000001c 	.word	0x2000001c

0800cef8 <__libc_init_array>:
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	4d0d      	ldr	r5, [pc, #52]	@ (800cf30 <__libc_init_array+0x38>)
 800cefc:	4c0d      	ldr	r4, [pc, #52]	@ (800cf34 <__libc_init_array+0x3c>)
 800cefe:	1b64      	subs	r4, r4, r5
 800cf00:	10a4      	asrs	r4, r4, #2
 800cf02:	2600      	movs	r6, #0
 800cf04:	42a6      	cmp	r6, r4
 800cf06:	d109      	bne.n	800cf1c <__libc_init_array+0x24>
 800cf08:	4d0b      	ldr	r5, [pc, #44]	@ (800cf38 <__libc_init_array+0x40>)
 800cf0a:	4c0c      	ldr	r4, [pc, #48]	@ (800cf3c <__libc_init_array+0x44>)
 800cf0c:	f003 fa1a 	bl	8010344 <_init>
 800cf10:	1b64      	subs	r4, r4, r5
 800cf12:	10a4      	asrs	r4, r4, #2
 800cf14:	2600      	movs	r6, #0
 800cf16:	42a6      	cmp	r6, r4
 800cf18:	d105      	bne.n	800cf26 <__libc_init_array+0x2e>
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}
 800cf1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf20:	4798      	blx	r3
 800cf22:	3601      	adds	r6, #1
 800cf24:	e7ee      	b.n	800cf04 <__libc_init_array+0xc>
 800cf26:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf2a:	4798      	blx	r3
 800cf2c:	3601      	adds	r6, #1
 800cf2e:	e7f2      	b.n	800cf16 <__libc_init_array+0x1e>
 800cf30:	080115bc 	.word	0x080115bc
 800cf34:	080115bc 	.word	0x080115bc
 800cf38:	080115bc 	.word	0x080115bc
 800cf3c:	080115d0 	.word	0x080115d0

0800cf40 <__retarget_lock_init_recursive>:
 800cf40:	4770      	bx	lr

0800cf42 <__retarget_lock_acquire_recursive>:
 800cf42:	4770      	bx	lr

0800cf44 <__retarget_lock_release_recursive>:
 800cf44:	4770      	bx	lr

0800cf46 <memcpy>:
 800cf46:	440a      	add	r2, r1
 800cf48:	4291      	cmp	r1, r2
 800cf4a:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf4e:	d100      	bne.n	800cf52 <memcpy+0xc>
 800cf50:	4770      	bx	lr
 800cf52:	b510      	push	{r4, lr}
 800cf54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf5c:	4291      	cmp	r1, r2
 800cf5e:	d1f9      	bne.n	800cf54 <memcpy+0xe>
 800cf60:	bd10      	pop	{r4, pc}
	...

0800cf64 <nanf>:
 800cf64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cf6c <nanf+0x8>
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	7fc00000 	.word	0x7fc00000

0800cf70 <quorem>:
 800cf70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf74:	6903      	ldr	r3, [r0, #16]
 800cf76:	690c      	ldr	r4, [r1, #16]
 800cf78:	42a3      	cmp	r3, r4
 800cf7a:	4607      	mov	r7, r0
 800cf7c:	db7e      	blt.n	800d07c <quorem+0x10c>
 800cf7e:	3c01      	subs	r4, #1
 800cf80:	f101 0814 	add.w	r8, r1, #20
 800cf84:	00a3      	lsls	r3, r4, #2
 800cf86:	f100 0514 	add.w	r5, r0, #20
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cfa2:	fbb2 f6f3 	udiv	r6, r2, r3
 800cfa6:	d32e      	bcc.n	800d006 <quorem+0x96>
 800cfa8:	f04f 0a00 	mov.w	sl, #0
 800cfac:	46c4      	mov	ip, r8
 800cfae:	46ae      	mov	lr, r5
 800cfb0:	46d3      	mov	fp, sl
 800cfb2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cfb6:	b298      	uxth	r0, r3
 800cfb8:	fb06 a000 	mla	r0, r6, r0, sl
 800cfbc:	0c02      	lsrs	r2, r0, #16
 800cfbe:	0c1b      	lsrs	r3, r3, #16
 800cfc0:	fb06 2303 	mla	r3, r6, r3, r2
 800cfc4:	f8de 2000 	ldr.w	r2, [lr]
 800cfc8:	b280      	uxth	r0, r0
 800cfca:	b292      	uxth	r2, r2
 800cfcc:	1a12      	subs	r2, r2, r0
 800cfce:	445a      	add	r2, fp
 800cfd0:	f8de 0000 	ldr.w	r0, [lr]
 800cfd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cfde:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cfe2:	b292      	uxth	r2, r2
 800cfe4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cfe8:	45e1      	cmp	r9, ip
 800cfea:	f84e 2b04 	str.w	r2, [lr], #4
 800cfee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cff2:	d2de      	bcs.n	800cfb2 <quorem+0x42>
 800cff4:	9b00      	ldr	r3, [sp, #0]
 800cff6:	58eb      	ldr	r3, [r5, r3]
 800cff8:	b92b      	cbnz	r3, 800d006 <quorem+0x96>
 800cffa:	9b01      	ldr	r3, [sp, #4]
 800cffc:	3b04      	subs	r3, #4
 800cffe:	429d      	cmp	r5, r3
 800d000:	461a      	mov	r2, r3
 800d002:	d32f      	bcc.n	800d064 <quorem+0xf4>
 800d004:	613c      	str	r4, [r7, #16]
 800d006:	4638      	mov	r0, r7
 800d008:	f001 f90c 	bl	800e224 <__mcmp>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	db25      	blt.n	800d05c <quorem+0xec>
 800d010:	4629      	mov	r1, r5
 800d012:	2000      	movs	r0, #0
 800d014:	f858 2b04 	ldr.w	r2, [r8], #4
 800d018:	f8d1 c000 	ldr.w	ip, [r1]
 800d01c:	fa1f fe82 	uxth.w	lr, r2
 800d020:	fa1f f38c 	uxth.w	r3, ip
 800d024:	eba3 030e 	sub.w	r3, r3, lr
 800d028:	4403      	add	r3, r0
 800d02a:	0c12      	lsrs	r2, r2, #16
 800d02c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d030:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d034:	b29b      	uxth	r3, r3
 800d036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d03a:	45c1      	cmp	r9, r8
 800d03c:	f841 3b04 	str.w	r3, [r1], #4
 800d040:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d044:	d2e6      	bcs.n	800d014 <quorem+0xa4>
 800d046:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d04a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d04e:	b922      	cbnz	r2, 800d05a <quorem+0xea>
 800d050:	3b04      	subs	r3, #4
 800d052:	429d      	cmp	r5, r3
 800d054:	461a      	mov	r2, r3
 800d056:	d30b      	bcc.n	800d070 <quorem+0x100>
 800d058:	613c      	str	r4, [r7, #16]
 800d05a:	3601      	adds	r6, #1
 800d05c:	4630      	mov	r0, r6
 800d05e:	b003      	add	sp, #12
 800d060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d064:	6812      	ldr	r2, [r2, #0]
 800d066:	3b04      	subs	r3, #4
 800d068:	2a00      	cmp	r2, #0
 800d06a:	d1cb      	bne.n	800d004 <quorem+0x94>
 800d06c:	3c01      	subs	r4, #1
 800d06e:	e7c6      	b.n	800cffe <quorem+0x8e>
 800d070:	6812      	ldr	r2, [r2, #0]
 800d072:	3b04      	subs	r3, #4
 800d074:	2a00      	cmp	r2, #0
 800d076:	d1ef      	bne.n	800d058 <quorem+0xe8>
 800d078:	3c01      	subs	r4, #1
 800d07a:	e7ea      	b.n	800d052 <quorem+0xe2>
 800d07c:	2000      	movs	r0, #0
 800d07e:	e7ee      	b.n	800d05e <quorem+0xee>

0800d080 <_dtoa_r>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	69c7      	ldr	r7, [r0, #28]
 800d086:	b099      	sub	sp, #100	@ 0x64
 800d088:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d08c:	ec55 4b10 	vmov	r4, r5, d0
 800d090:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d092:	9109      	str	r1, [sp, #36]	@ 0x24
 800d094:	4683      	mov	fp, r0
 800d096:	920e      	str	r2, [sp, #56]	@ 0x38
 800d098:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d09a:	b97f      	cbnz	r7, 800d0bc <_dtoa_r+0x3c>
 800d09c:	2010      	movs	r0, #16
 800d09e:	f7fe fdf1 	bl	800bc84 <malloc>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d0a8:	b920      	cbnz	r0, 800d0b4 <_dtoa_r+0x34>
 800d0aa:	4ba7      	ldr	r3, [pc, #668]	@ (800d348 <_dtoa_r+0x2c8>)
 800d0ac:	21ef      	movs	r1, #239	@ 0xef
 800d0ae:	48a7      	ldr	r0, [pc, #668]	@ (800d34c <_dtoa_r+0x2cc>)
 800d0b0:	f7fe fdca 	bl	800bc48 <__assert_func>
 800d0b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d0b8:	6007      	str	r7, [r0, #0]
 800d0ba:	60c7      	str	r7, [r0, #12]
 800d0bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0c0:	6819      	ldr	r1, [r3, #0]
 800d0c2:	b159      	cbz	r1, 800d0dc <_dtoa_r+0x5c>
 800d0c4:	685a      	ldr	r2, [r3, #4]
 800d0c6:	604a      	str	r2, [r1, #4]
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	4093      	lsls	r3, r2
 800d0cc:	608b      	str	r3, [r1, #8]
 800d0ce:	4658      	mov	r0, fp
 800d0d0:	f000 fe24 	bl	800dd1c <_Bfree>
 800d0d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	1e2b      	subs	r3, r5, #0
 800d0de:	bfb9      	ittee	lt
 800d0e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d0e4:	9303      	strlt	r3, [sp, #12]
 800d0e6:	2300      	movge	r3, #0
 800d0e8:	6033      	strge	r3, [r6, #0]
 800d0ea:	9f03      	ldr	r7, [sp, #12]
 800d0ec:	4b98      	ldr	r3, [pc, #608]	@ (800d350 <_dtoa_r+0x2d0>)
 800d0ee:	bfbc      	itt	lt
 800d0f0:	2201      	movlt	r2, #1
 800d0f2:	6032      	strlt	r2, [r6, #0]
 800d0f4:	43bb      	bics	r3, r7
 800d0f6:	d112      	bne.n	800d11e <_dtoa_r+0x9e>
 800d0f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d0fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d0fe:	6013      	str	r3, [r2, #0]
 800d100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d104:	4323      	orrs	r3, r4
 800d106:	f000 854d 	beq.w	800dba4 <_dtoa_r+0xb24>
 800d10a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d10c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d364 <_dtoa_r+0x2e4>
 800d110:	2b00      	cmp	r3, #0
 800d112:	f000 854f 	beq.w	800dbb4 <_dtoa_r+0xb34>
 800d116:	f10a 0303 	add.w	r3, sl, #3
 800d11a:	f000 bd49 	b.w	800dbb0 <_dtoa_r+0xb30>
 800d11e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d122:	2200      	movs	r2, #0
 800d124:	ec51 0b17 	vmov	r0, r1, d7
 800d128:	2300      	movs	r3, #0
 800d12a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d12e:	f7f3 fcf3 	bl	8000b18 <__aeabi_dcmpeq>
 800d132:	4680      	mov	r8, r0
 800d134:	b158      	cbz	r0, 800d14e <_dtoa_r+0xce>
 800d136:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d138:	2301      	movs	r3, #1
 800d13a:	6013      	str	r3, [r2, #0]
 800d13c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d13e:	b113      	cbz	r3, 800d146 <_dtoa_r+0xc6>
 800d140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d142:	4b84      	ldr	r3, [pc, #528]	@ (800d354 <_dtoa_r+0x2d4>)
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d368 <_dtoa_r+0x2e8>
 800d14a:	f000 bd33 	b.w	800dbb4 <_dtoa_r+0xb34>
 800d14e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d152:	aa16      	add	r2, sp, #88	@ 0x58
 800d154:	a917      	add	r1, sp, #92	@ 0x5c
 800d156:	4658      	mov	r0, fp
 800d158:	f001 f984 	bl	800e464 <__d2b>
 800d15c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d160:	4681      	mov	r9, r0
 800d162:	2e00      	cmp	r6, #0
 800d164:	d077      	beq.n	800d256 <_dtoa_r+0x1d6>
 800d166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d168:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d16c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d174:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d178:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d17c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d180:	4619      	mov	r1, r3
 800d182:	2200      	movs	r2, #0
 800d184:	4b74      	ldr	r3, [pc, #464]	@ (800d358 <_dtoa_r+0x2d8>)
 800d186:	f7f3 f8a7 	bl	80002d8 <__aeabi_dsub>
 800d18a:	a369      	add	r3, pc, #420	@ (adr r3, 800d330 <_dtoa_r+0x2b0>)
 800d18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d190:	f7f3 fa5a 	bl	8000648 <__aeabi_dmul>
 800d194:	a368      	add	r3, pc, #416	@ (adr r3, 800d338 <_dtoa_r+0x2b8>)
 800d196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19a:	f7f3 f89f 	bl	80002dc <__adddf3>
 800d19e:	4604      	mov	r4, r0
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	f7f3 f9e6 	bl	8000574 <__aeabi_i2d>
 800d1a8:	a365      	add	r3, pc, #404	@ (adr r3, 800d340 <_dtoa_r+0x2c0>)
 800d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ae:	f7f3 fa4b 	bl	8000648 <__aeabi_dmul>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 f88f 	bl	80002dc <__adddf3>
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	f7f3 fcf1 	bl	8000ba8 <__aeabi_d2iz>
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	4607      	mov	r7, r0
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	4629      	mov	r1, r5
 800d1d0:	f7f3 fcac 	bl	8000b2c <__aeabi_dcmplt>
 800d1d4:	b140      	cbz	r0, 800d1e8 <_dtoa_r+0x168>
 800d1d6:	4638      	mov	r0, r7
 800d1d8:	f7f3 f9cc 	bl	8000574 <__aeabi_i2d>
 800d1dc:	4622      	mov	r2, r4
 800d1de:	462b      	mov	r3, r5
 800d1e0:	f7f3 fc9a 	bl	8000b18 <__aeabi_dcmpeq>
 800d1e4:	b900      	cbnz	r0, 800d1e8 <_dtoa_r+0x168>
 800d1e6:	3f01      	subs	r7, #1
 800d1e8:	2f16      	cmp	r7, #22
 800d1ea:	d851      	bhi.n	800d290 <_dtoa_r+0x210>
 800d1ec:	4b5b      	ldr	r3, [pc, #364]	@ (800d35c <_dtoa_r+0x2dc>)
 800d1ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1fa:	f7f3 fc97 	bl	8000b2c <__aeabi_dcmplt>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d048      	beq.n	800d294 <_dtoa_r+0x214>
 800d202:	3f01      	subs	r7, #1
 800d204:	2300      	movs	r3, #0
 800d206:	9312      	str	r3, [sp, #72]	@ 0x48
 800d208:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d20a:	1b9b      	subs	r3, r3, r6
 800d20c:	1e5a      	subs	r2, r3, #1
 800d20e:	bf44      	itt	mi
 800d210:	f1c3 0801 	rsbmi	r8, r3, #1
 800d214:	2300      	movmi	r3, #0
 800d216:	9208      	str	r2, [sp, #32]
 800d218:	bf54      	ite	pl
 800d21a:	f04f 0800 	movpl.w	r8, #0
 800d21e:	9308      	strmi	r3, [sp, #32]
 800d220:	2f00      	cmp	r7, #0
 800d222:	db39      	blt.n	800d298 <_dtoa_r+0x218>
 800d224:	9b08      	ldr	r3, [sp, #32]
 800d226:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d228:	443b      	add	r3, r7
 800d22a:	9308      	str	r3, [sp, #32]
 800d22c:	2300      	movs	r3, #0
 800d22e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d232:	2b09      	cmp	r3, #9
 800d234:	d864      	bhi.n	800d300 <_dtoa_r+0x280>
 800d236:	2b05      	cmp	r3, #5
 800d238:	bfc4      	itt	gt
 800d23a:	3b04      	subgt	r3, #4
 800d23c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d240:	f1a3 0302 	sub.w	r3, r3, #2
 800d244:	bfcc      	ite	gt
 800d246:	2400      	movgt	r4, #0
 800d248:	2401      	movle	r4, #1
 800d24a:	2b03      	cmp	r3, #3
 800d24c:	d863      	bhi.n	800d316 <_dtoa_r+0x296>
 800d24e:	e8df f003 	tbb	[pc, r3]
 800d252:	372a      	.short	0x372a
 800d254:	5535      	.short	0x5535
 800d256:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d25a:	441e      	add	r6, r3
 800d25c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d260:	2b20      	cmp	r3, #32
 800d262:	bfc1      	itttt	gt
 800d264:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d268:	409f      	lslgt	r7, r3
 800d26a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d26e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d272:	bfd6      	itet	le
 800d274:	f1c3 0320 	rsble	r3, r3, #32
 800d278:	ea47 0003 	orrgt.w	r0, r7, r3
 800d27c:	fa04 f003 	lslle.w	r0, r4, r3
 800d280:	f7f3 f968 	bl	8000554 <__aeabi_ui2d>
 800d284:	2201      	movs	r2, #1
 800d286:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d28a:	3e01      	subs	r6, #1
 800d28c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d28e:	e777      	b.n	800d180 <_dtoa_r+0x100>
 800d290:	2301      	movs	r3, #1
 800d292:	e7b8      	b.n	800d206 <_dtoa_r+0x186>
 800d294:	9012      	str	r0, [sp, #72]	@ 0x48
 800d296:	e7b7      	b.n	800d208 <_dtoa_r+0x188>
 800d298:	427b      	negs	r3, r7
 800d29a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d29c:	2300      	movs	r3, #0
 800d29e:	eba8 0807 	sub.w	r8, r8, r7
 800d2a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2a4:	e7c4      	b.n	800d230 <_dtoa_r+0x1b0>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	dc35      	bgt.n	800d31c <_dtoa_r+0x29c>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	9300      	str	r3, [sp, #0]
 800d2b4:	9307      	str	r3, [sp, #28]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2ba:	e00b      	b.n	800d2d4 <_dtoa_r+0x254>
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e7f3      	b.n	800d2a8 <_dtoa_r+0x228>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2c6:	18fb      	adds	r3, r7, r3
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	9307      	str	r3, [sp, #28]
 800d2d0:	bfb8      	it	lt
 800d2d2:	2301      	movlt	r3, #1
 800d2d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d2d8:	2100      	movs	r1, #0
 800d2da:	2204      	movs	r2, #4
 800d2dc:	f102 0514 	add.w	r5, r2, #20
 800d2e0:	429d      	cmp	r5, r3
 800d2e2:	d91f      	bls.n	800d324 <_dtoa_r+0x2a4>
 800d2e4:	6041      	str	r1, [r0, #4]
 800d2e6:	4658      	mov	r0, fp
 800d2e8:	f000 fcd8 	bl	800dc9c <_Balloc>
 800d2ec:	4682      	mov	sl, r0
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d13c      	bne.n	800d36c <_dtoa_r+0x2ec>
 800d2f2:	4b1b      	ldr	r3, [pc, #108]	@ (800d360 <_dtoa_r+0x2e0>)
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d2fa:	e6d8      	b.n	800d0ae <_dtoa_r+0x2e>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e7e0      	b.n	800d2c2 <_dtoa_r+0x242>
 800d300:	2401      	movs	r4, #1
 800d302:	2300      	movs	r3, #0
 800d304:	9309      	str	r3, [sp, #36]	@ 0x24
 800d306:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d308:	f04f 33ff 	mov.w	r3, #4294967295
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	9307      	str	r3, [sp, #28]
 800d310:	2200      	movs	r2, #0
 800d312:	2312      	movs	r3, #18
 800d314:	e7d0      	b.n	800d2b8 <_dtoa_r+0x238>
 800d316:	2301      	movs	r3, #1
 800d318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d31a:	e7f5      	b.n	800d308 <_dtoa_r+0x288>
 800d31c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	9307      	str	r3, [sp, #28]
 800d322:	e7d7      	b.n	800d2d4 <_dtoa_r+0x254>
 800d324:	3101      	adds	r1, #1
 800d326:	0052      	lsls	r2, r2, #1
 800d328:	e7d8      	b.n	800d2dc <_dtoa_r+0x25c>
 800d32a:	bf00      	nop
 800d32c:	f3af 8000 	nop.w
 800d330:	636f4361 	.word	0x636f4361
 800d334:	3fd287a7 	.word	0x3fd287a7
 800d338:	8b60c8b3 	.word	0x8b60c8b3
 800d33c:	3fc68a28 	.word	0x3fc68a28
 800d340:	509f79fb 	.word	0x509f79fb
 800d344:	3fd34413 	.word	0x3fd34413
 800d348:	08011204 	.word	0x08011204
 800d34c:	0801121b 	.word	0x0801121b
 800d350:	7ff00000 	.word	0x7ff00000
 800d354:	080111cf 	.word	0x080111cf
 800d358:	3ff80000 	.word	0x3ff80000
 800d35c:	08011318 	.word	0x08011318
 800d360:	08011273 	.word	0x08011273
 800d364:	08011200 	.word	0x08011200
 800d368:	080111ce 	.word	0x080111ce
 800d36c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d370:	6018      	str	r0, [r3, #0]
 800d372:	9b07      	ldr	r3, [sp, #28]
 800d374:	2b0e      	cmp	r3, #14
 800d376:	f200 80a4 	bhi.w	800d4c2 <_dtoa_r+0x442>
 800d37a:	2c00      	cmp	r4, #0
 800d37c:	f000 80a1 	beq.w	800d4c2 <_dtoa_r+0x442>
 800d380:	2f00      	cmp	r7, #0
 800d382:	dd33      	ble.n	800d3ec <_dtoa_r+0x36c>
 800d384:	4bad      	ldr	r3, [pc, #692]	@ (800d63c <_dtoa_r+0x5bc>)
 800d386:	f007 020f 	and.w	r2, r7, #15
 800d38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d38e:	ed93 7b00 	vldr	d7, [r3]
 800d392:	05f8      	lsls	r0, r7, #23
 800d394:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d398:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d39c:	d516      	bpl.n	800d3cc <_dtoa_r+0x34c>
 800d39e:	4ba8      	ldr	r3, [pc, #672]	@ (800d640 <_dtoa_r+0x5c0>)
 800d3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d3a8:	f7f3 fa78 	bl	800089c <__aeabi_ddiv>
 800d3ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3b0:	f004 040f 	and.w	r4, r4, #15
 800d3b4:	2603      	movs	r6, #3
 800d3b6:	4da2      	ldr	r5, [pc, #648]	@ (800d640 <_dtoa_r+0x5c0>)
 800d3b8:	b954      	cbnz	r4, 800d3d0 <_dtoa_r+0x350>
 800d3ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3c2:	f7f3 fa6b 	bl	800089c <__aeabi_ddiv>
 800d3c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3ca:	e028      	b.n	800d41e <_dtoa_r+0x39e>
 800d3cc:	2602      	movs	r6, #2
 800d3ce:	e7f2      	b.n	800d3b6 <_dtoa_r+0x336>
 800d3d0:	07e1      	lsls	r1, r4, #31
 800d3d2:	d508      	bpl.n	800d3e6 <_dtoa_r+0x366>
 800d3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3dc:	f7f3 f934 	bl	8000648 <__aeabi_dmul>
 800d3e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3e4:	3601      	adds	r6, #1
 800d3e6:	1064      	asrs	r4, r4, #1
 800d3e8:	3508      	adds	r5, #8
 800d3ea:	e7e5      	b.n	800d3b8 <_dtoa_r+0x338>
 800d3ec:	f000 80d2 	beq.w	800d594 <_dtoa_r+0x514>
 800d3f0:	427c      	negs	r4, r7
 800d3f2:	4b92      	ldr	r3, [pc, #584]	@ (800d63c <_dtoa_r+0x5bc>)
 800d3f4:	4d92      	ldr	r5, [pc, #584]	@ (800d640 <_dtoa_r+0x5c0>)
 800d3f6:	f004 020f 	and.w	r2, r4, #15
 800d3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d402:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d406:	f7f3 f91f 	bl	8000648 <__aeabi_dmul>
 800d40a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d40e:	1124      	asrs	r4, r4, #4
 800d410:	2300      	movs	r3, #0
 800d412:	2602      	movs	r6, #2
 800d414:	2c00      	cmp	r4, #0
 800d416:	f040 80b2 	bne.w	800d57e <_dtoa_r+0x4fe>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1d3      	bne.n	800d3c6 <_dtoa_r+0x346>
 800d41e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d420:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 80b7 	beq.w	800d598 <_dtoa_r+0x518>
 800d42a:	4b86      	ldr	r3, [pc, #536]	@ (800d644 <_dtoa_r+0x5c4>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	4620      	mov	r0, r4
 800d430:	4629      	mov	r1, r5
 800d432:	f7f3 fb7b 	bl	8000b2c <__aeabi_dcmplt>
 800d436:	2800      	cmp	r0, #0
 800d438:	f000 80ae 	beq.w	800d598 <_dtoa_r+0x518>
 800d43c:	9b07      	ldr	r3, [sp, #28]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f000 80aa 	beq.w	800d598 <_dtoa_r+0x518>
 800d444:	9b00      	ldr	r3, [sp, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	dd37      	ble.n	800d4ba <_dtoa_r+0x43a>
 800d44a:	1e7b      	subs	r3, r7, #1
 800d44c:	9304      	str	r3, [sp, #16]
 800d44e:	4620      	mov	r0, r4
 800d450:	4b7d      	ldr	r3, [pc, #500]	@ (800d648 <_dtoa_r+0x5c8>)
 800d452:	2200      	movs	r2, #0
 800d454:	4629      	mov	r1, r5
 800d456:	f7f3 f8f7 	bl	8000648 <__aeabi_dmul>
 800d45a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d45e:	9c00      	ldr	r4, [sp, #0]
 800d460:	3601      	adds	r6, #1
 800d462:	4630      	mov	r0, r6
 800d464:	f7f3 f886 	bl	8000574 <__aeabi_i2d>
 800d468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d46c:	f7f3 f8ec 	bl	8000648 <__aeabi_dmul>
 800d470:	4b76      	ldr	r3, [pc, #472]	@ (800d64c <_dtoa_r+0x5cc>)
 800d472:	2200      	movs	r2, #0
 800d474:	f7f2 ff32 	bl	80002dc <__adddf3>
 800d478:	4605      	mov	r5, r0
 800d47a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d47e:	2c00      	cmp	r4, #0
 800d480:	f040 808d 	bne.w	800d59e <_dtoa_r+0x51e>
 800d484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d488:	4b71      	ldr	r3, [pc, #452]	@ (800d650 <_dtoa_r+0x5d0>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	f7f2 ff24 	bl	80002d8 <__aeabi_dsub>
 800d490:	4602      	mov	r2, r0
 800d492:	460b      	mov	r3, r1
 800d494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d498:	462a      	mov	r2, r5
 800d49a:	4633      	mov	r3, r6
 800d49c:	f7f3 fb64 	bl	8000b68 <__aeabi_dcmpgt>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	f040 828b 	bne.w	800d9bc <_dtoa_r+0x93c>
 800d4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4aa:	462a      	mov	r2, r5
 800d4ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d4b0:	f7f3 fb3c 	bl	8000b2c <__aeabi_dcmplt>
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	f040 8128 	bne.w	800d70a <_dtoa_r+0x68a>
 800d4ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d4be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d4c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f2c0 815a 	blt.w	800d77e <_dtoa_r+0x6fe>
 800d4ca:	2f0e      	cmp	r7, #14
 800d4cc:	f300 8157 	bgt.w	800d77e <_dtoa_r+0x6fe>
 800d4d0:	4b5a      	ldr	r3, [pc, #360]	@ (800d63c <_dtoa_r+0x5bc>)
 800d4d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4d6:	ed93 7b00 	vldr	d7, [r3]
 800d4da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	ed8d 7b00 	vstr	d7, [sp]
 800d4e2:	da03      	bge.n	800d4ec <_dtoa_r+0x46c>
 800d4e4:	9b07      	ldr	r3, [sp, #28]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f340 8101 	ble.w	800d6ee <_dtoa_r+0x66e>
 800d4ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d4f0:	4656      	mov	r6, sl
 800d4f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	f7f3 f9cf 	bl	800089c <__aeabi_ddiv>
 800d4fe:	f7f3 fb53 	bl	8000ba8 <__aeabi_d2iz>
 800d502:	4680      	mov	r8, r0
 800d504:	f7f3 f836 	bl	8000574 <__aeabi_i2d>
 800d508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d50c:	f7f3 f89c 	bl	8000648 <__aeabi_dmul>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4620      	mov	r0, r4
 800d516:	4629      	mov	r1, r5
 800d518:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d51c:	f7f2 fedc 	bl	80002d8 <__aeabi_dsub>
 800d520:	f806 4b01 	strb.w	r4, [r6], #1
 800d524:	9d07      	ldr	r5, [sp, #28]
 800d526:	eba6 040a 	sub.w	r4, r6, sl
 800d52a:	42a5      	cmp	r5, r4
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	f040 8117 	bne.w	800d762 <_dtoa_r+0x6e2>
 800d534:	f7f2 fed2 	bl	80002dc <__adddf3>
 800d538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d53c:	4604      	mov	r4, r0
 800d53e:	460d      	mov	r5, r1
 800d540:	f7f3 fb12 	bl	8000b68 <__aeabi_dcmpgt>
 800d544:	2800      	cmp	r0, #0
 800d546:	f040 80f9 	bne.w	800d73c <_dtoa_r+0x6bc>
 800d54a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d54e:	4620      	mov	r0, r4
 800d550:	4629      	mov	r1, r5
 800d552:	f7f3 fae1 	bl	8000b18 <__aeabi_dcmpeq>
 800d556:	b118      	cbz	r0, 800d560 <_dtoa_r+0x4e0>
 800d558:	f018 0f01 	tst.w	r8, #1
 800d55c:	f040 80ee 	bne.w	800d73c <_dtoa_r+0x6bc>
 800d560:	4649      	mov	r1, r9
 800d562:	4658      	mov	r0, fp
 800d564:	f000 fbda 	bl	800dd1c <_Bfree>
 800d568:	2300      	movs	r3, #0
 800d56a:	7033      	strb	r3, [r6, #0]
 800d56c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d56e:	3701      	adds	r7, #1
 800d570:	601f      	str	r7, [r3, #0]
 800d572:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d574:	2b00      	cmp	r3, #0
 800d576:	f000 831d 	beq.w	800dbb4 <_dtoa_r+0xb34>
 800d57a:	601e      	str	r6, [r3, #0]
 800d57c:	e31a      	b.n	800dbb4 <_dtoa_r+0xb34>
 800d57e:	07e2      	lsls	r2, r4, #31
 800d580:	d505      	bpl.n	800d58e <_dtoa_r+0x50e>
 800d582:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d586:	f7f3 f85f 	bl	8000648 <__aeabi_dmul>
 800d58a:	3601      	adds	r6, #1
 800d58c:	2301      	movs	r3, #1
 800d58e:	1064      	asrs	r4, r4, #1
 800d590:	3508      	adds	r5, #8
 800d592:	e73f      	b.n	800d414 <_dtoa_r+0x394>
 800d594:	2602      	movs	r6, #2
 800d596:	e742      	b.n	800d41e <_dtoa_r+0x39e>
 800d598:	9c07      	ldr	r4, [sp, #28]
 800d59a:	9704      	str	r7, [sp, #16]
 800d59c:	e761      	b.n	800d462 <_dtoa_r+0x3e2>
 800d59e:	4b27      	ldr	r3, [pc, #156]	@ (800d63c <_dtoa_r+0x5bc>)
 800d5a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d5aa:	4454      	add	r4, sl
 800d5ac:	2900      	cmp	r1, #0
 800d5ae:	d053      	beq.n	800d658 <_dtoa_r+0x5d8>
 800d5b0:	4928      	ldr	r1, [pc, #160]	@ (800d654 <_dtoa_r+0x5d4>)
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	f7f3 f972 	bl	800089c <__aeabi_ddiv>
 800d5b8:	4633      	mov	r3, r6
 800d5ba:	462a      	mov	r2, r5
 800d5bc:	f7f2 fe8c 	bl	80002d8 <__aeabi_dsub>
 800d5c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5c4:	4656      	mov	r6, sl
 800d5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ca:	f7f3 faed 	bl	8000ba8 <__aeabi_d2iz>
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	f7f2 ffd0 	bl	8000574 <__aeabi_i2d>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5dc:	f7f2 fe7c 	bl	80002d8 <__aeabi_dsub>
 800d5e0:	3530      	adds	r5, #48	@ 0x30
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5ea:	f806 5b01 	strb.w	r5, [r6], #1
 800d5ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d5f2:	f7f3 fa9b 	bl	8000b2c <__aeabi_dcmplt>
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d171      	bne.n	800d6de <_dtoa_r+0x65e>
 800d5fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5fe:	4911      	ldr	r1, [pc, #68]	@ (800d644 <_dtoa_r+0x5c4>)
 800d600:	2000      	movs	r0, #0
 800d602:	f7f2 fe69 	bl	80002d8 <__aeabi_dsub>
 800d606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d60a:	f7f3 fa8f 	bl	8000b2c <__aeabi_dcmplt>
 800d60e:	2800      	cmp	r0, #0
 800d610:	f040 8095 	bne.w	800d73e <_dtoa_r+0x6be>
 800d614:	42a6      	cmp	r6, r4
 800d616:	f43f af50 	beq.w	800d4ba <_dtoa_r+0x43a>
 800d61a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d61e:	4b0a      	ldr	r3, [pc, #40]	@ (800d648 <_dtoa_r+0x5c8>)
 800d620:	2200      	movs	r2, #0
 800d622:	f7f3 f811 	bl	8000648 <__aeabi_dmul>
 800d626:	4b08      	ldr	r3, [pc, #32]	@ (800d648 <_dtoa_r+0x5c8>)
 800d628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d62c:	2200      	movs	r2, #0
 800d62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d632:	f7f3 f809 	bl	8000648 <__aeabi_dmul>
 800d636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d63a:	e7c4      	b.n	800d5c6 <_dtoa_r+0x546>
 800d63c:	08011318 	.word	0x08011318
 800d640:	080112f0 	.word	0x080112f0
 800d644:	3ff00000 	.word	0x3ff00000
 800d648:	40240000 	.word	0x40240000
 800d64c:	401c0000 	.word	0x401c0000
 800d650:	40140000 	.word	0x40140000
 800d654:	3fe00000 	.word	0x3fe00000
 800d658:	4631      	mov	r1, r6
 800d65a:	4628      	mov	r0, r5
 800d65c:	f7f2 fff4 	bl	8000648 <__aeabi_dmul>
 800d660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d664:	9415      	str	r4, [sp, #84]	@ 0x54
 800d666:	4656      	mov	r6, sl
 800d668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d66c:	f7f3 fa9c 	bl	8000ba8 <__aeabi_d2iz>
 800d670:	4605      	mov	r5, r0
 800d672:	f7f2 ff7f 	bl	8000574 <__aeabi_i2d>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d67e:	f7f2 fe2b 	bl	80002d8 <__aeabi_dsub>
 800d682:	3530      	adds	r5, #48	@ 0x30
 800d684:	f806 5b01 	strb.w	r5, [r6], #1
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	42a6      	cmp	r6, r4
 800d68e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d692:	f04f 0200 	mov.w	r2, #0
 800d696:	d124      	bne.n	800d6e2 <_dtoa_r+0x662>
 800d698:	4bac      	ldr	r3, [pc, #688]	@ (800d94c <_dtoa_r+0x8cc>)
 800d69a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d69e:	f7f2 fe1d 	bl	80002dc <__adddf3>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6aa:	f7f3 fa5d 	bl	8000b68 <__aeabi_dcmpgt>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d145      	bne.n	800d73e <_dtoa_r+0x6be>
 800d6b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6b6:	49a5      	ldr	r1, [pc, #660]	@ (800d94c <_dtoa_r+0x8cc>)
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	f7f2 fe0d 	bl	80002d8 <__aeabi_dsub>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6c6:	f7f3 fa31 	bl	8000b2c <__aeabi_dcmplt>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	f43f aef5 	beq.w	800d4ba <_dtoa_r+0x43a>
 800d6d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d6d2:	1e73      	subs	r3, r6, #1
 800d6d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d6d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d6da:	2b30      	cmp	r3, #48	@ 0x30
 800d6dc:	d0f8      	beq.n	800d6d0 <_dtoa_r+0x650>
 800d6de:	9f04      	ldr	r7, [sp, #16]
 800d6e0:	e73e      	b.n	800d560 <_dtoa_r+0x4e0>
 800d6e2:	4b9b      	ldr	r3, [pc, #620]	@ (800d950 <_dtoa_r+0x8d0>)
 800d6e4:	f7f2 ffb0 	bl	8000648 <__aeabi_dmul>
 800d6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6ec:	e7bc      	b.n	800d668 <_dtoa_r+0x5e8>
 800d6ee:	d10c      	bne.n	800d70a <_dtoa_r+0x68a>
 800d6f0:	4b98      	ldr	r3, [pc, #608]	@ (800d954 <_dtoa_r+0x8d4>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6f8:	f7f2 ffa6 	bl	8000648 <__aeabi_dmul>
 800d6fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d700:	f7f3 fa28 	bl	8000b54 <__aeabi_dcmpge>
 800d704:	2800      	cmp	r0, #0
 800d706:	f000 8157 	beq.w	800d9b8 <_dtoa_r+0x938>
 800d70a:	2400      	movs	r4, #0
 800d70c:	4625      	mov	r5, r4
 800d70e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d710:	43db      	mvns	r3, r3
 800d712:	9304      	str	r3, [sp, #16]
 800d714:	4656      	mov	r6, sl
 800d716:	2700      	movs	r7, #0
 800d718:	4621      	mov	r1, r4
 800d71a:	4658      	mov	r0, fp
 800d71c:	f000 fafe 	bl	800dd1c <_Bfree>
 800d720:	2d00      	cmp	r5, #0
 800d722:	d0dc      	beq.n	800d6de <_dtoa_r+0x65e>
 800d724:	b12f      	cbz	r7, 800d732 <_dtoa_r+0x6b2>
 800d726:	42af      	cmp	r7, r5
 800d728:	d003      	beq.n	800d732 <_dtoa_r+0x6b2>
 800d72a:	4639      	mov	r1, r7
 800d72c:	4658      	mov	r0, fp
 800d72e:	f000 faf5 	bl	800dd1c <_Bfree>
 800d732:	4629      	mov	r1, r5
 800d734:	4658      	mov	r0, fp
 800d736:	f000 faf1 	bl	800dd1c <_Bfree>
 800d73a:	e7d0      	b.n	800d6de <_dtoa_r+0x65e>
 800d73c:	9704      	str	r7, [sp, #16]
 800d73e:	4633      	mov	r3, r6
 800d740:	461e      	mov	r6, r3
 800d742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d746:	2a39      	cmp	r2, #57	@ 0x39
 800d748:	d107      	bne.n	800d75a <_dtoa_r+0x6da>
 800d74a:	459a      	cmp	sl, r3
 800d74c:	d1f8      	bne.n	800d740 <_dtoa_r+0x6c0>
 800d74e:	9a04      	ldr	r2, [sp, #16]
 800d750:	3201      	adds	r2, #1
 800d752:	9204      	str	r2, [sp, #16]
 800d754:	2230      	movs	r2, #48	@ 0x30
 800d756:	f88a 2000 	strb.w	r2, [sl]
 800d75a:	781a      	ldrb	r2, [r3, #0]
 800d75c:	3201      	adds	r2, #1
 800d75e:	701a      	strb	r2, [r3, #0]
 800d760:	e7bd      	b.n	800d6de <_dtoa_r+0x65e>
 800d762:	4b7b      	ldr	r3, [pc, #492]	@ (800d950 <_dtoa_r+0x8d0>)
 800d764:	2200      	movs	r2, #0
 800d766:	f7f2 ff6f 	bl	8000648 <__aeabi_dmul>
 800d76a:	2200      	movs	r2, #0
 800d76c:	2300      	movs	r3, #0
 800d76e:	4604      	mov	r4, r0
 800d770:	460d      	mov	r5, r1
 800d772:	f7f3 f9d1 	bl	8000b18 <__aeabi_dcmpeq>
 800d776:	2800      	cmp	r0, #0
 800d778:	f43f aebb 	beq.w	800d4f2 <_dtoa_r+0x472>
 800d77c:	e6f0      	b.n	800d560 <_dtoa_r+0x4e0>
 800d77e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d780:	2a00      	cmp	r2, #0
 800d782:	f000 80db 	beq.w	800d93c <_dtoa_r+0x8bc>
 800d786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d788:	2a01      	cmp	r2, #1
 800d78a:	f300 80bf 	bgt.w	800d90c <_dtoa_r+0x88c>
 800d78e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d790:	2a00      	cmp	r2, #0
 800d792:	f000 80b7 	beq.w	800d904 <_dtoa_r+0x884>
 800d796:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d79a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d79c:	4646      	mov	r6, r8
 800d79e:	9a08      	ldr	r2, [sp, #32]
 800d7a0:	2101      	movs	r1, #1
 800d7a2:	441a      	add	r2, r3
 800d7a4:	4658      	mov	r0, fp
 800d7a6:	4498      	add	r8, r3
 800d7a8:	9208      	str	r2, [sp, #32]
 800d7aa:	f000 fbb5 	bl	800df18 <__i2b>
 800d7ae:	4605      	mov	r5, r0
 800d7b0:	b15e      	cbz	r6, 800d7ca <_dtoa_r+0x74a>
 800d7b2:	9b08      	ldr	r3, [sp, #32]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	dd08      	ble.n	800d7ca <_dtoa_r+0x74a>
 800d7b8:	42b3      	cmp	r3, r6
 800d7ba:	9a08      	ldr	r2, [sp, #32]
 800d7bc:	bfa8      	it	ge
 800d7be:	4633      	movge	r3, r6
 800d7c0:	eba8 0803 	sub.w	r8, r8, r3
 800d7c4:	1af6      	subs	r6, r6, r3
 800d7c6:	1ad3      	subs	r3, r2, r3
 800d7c8:	9308      	str	r3, [sp, #32]
 800d7ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7cc:	b1f3      	cbz	r3, 800d80c <_dtoa_r+0x78c>
 800d7ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 80b7 	beq.w	800d944 <_dtoa_r+0x8c4>
 800d7d6:	b18c      	cbz	r4, 800d7fc <_dtoa_r+0x77c>
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4622      	mov	r2, r4
 800d7dc:	4658      	mov	r0, fp
 800d7de:	f000 fc5b 	bl	800e098 <__pow5mult>
 800d7e2:	464a      	mov	r2, r9
 800d7e4:	4601      	mov	r1, r0
 800d7e6:	4605      	mov	r5, r0
 800d7e8:	4658      	mov	r0, fp
 800d7ea:	f000 fbab 	bl	800df44 <__multiply>
 800d7ee:	4649      	mov	r1, r9
 800d7f0:	9004      	str	r0, [sp, #16]
 800d7f2:	4658      	mov	r0, fp
 800d7f4:	f000 fa92 	bl	800dd1c <_Bfree>
 800d7f8:	9b04      	ldr	r3, [sp, #16]
 800d7fa:	4699      	mov	r9, r3
 800d7fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7fe:	1b1a      	subs	r2, r3, r4
 800d800:	d004      	beq.n	800d80c <_dtoa_r+0x78c>
 800d802:	4649      	mov	r1, r9
 800d804:	4658      	mov	r0, fp
 800d806:	f000 fc47 	bl	800e098 <__pow5mult>
 800d80a:	4681      	mov	r9, r0
 800d80c:	2101      	movs	r1, #1
 800d80e:	4658      	mov	r0, fp
 800d810:	f000 fb82 	bl	800df18 <__i2b>
 800d814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d816:	4604      	mov	r4, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 81cf 	beq.w	800dbbc <_dtoa_r+0xb3c>
 800d81e:	461a      	mov	r2, r3
 800d820:	4601      	mov	r1, r0
 800d822:	4658      	mov	r0, fp
 800d824:	f000 fc38 	bl	800e098 <__pow5mult>
 800d828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	4604      	mov	r4, r0
 800d82e:	f300 8095 	bgt.w	800d95c <_dtoa_r+0x8dc>
 800d832:	9b02      	ldr	r3, [sp, #8]
 800d834:	2b00      	cmp	r3, #0
 800d836:	f040 8087 	bne.w	800d948 <_dtoa_r+0x8c8>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d840:	2b00      	cmp	r3, #0
 800d842:	f040 8089 	bne.w	800d958 <_dtoa_r+0x8d8>
 800d846:	9b03      	ldr	r3, [sp, #12]
 800d848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d84c:	0d1b      	lsrs	r3, r3, #20
 800d84e:	051b      	lsls	r3, r3, #20
 800d850:	b12b      	cbz	r3, 800d85e <_dtoa_r+0x7de>
 800d852:	9b08      	ldr	r3, [sp, #32]
 800d854:	3301      	adds	r3, #1
 800d856:	9308      	str	r3, [sp, #32]
 800d858:	f108 0801 	add.w	r8, r8, #1
 800d85c:	2301      	movs	r3, #1
 800d85e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d862:	2b00      	cmp	r3, #0
 800d864:	f000 81b0 	beq.w	800dbc8 <_dtoa_r+0xb48>
 800d868:	6923      	ldr	r3, [r4, #16]
 800d86a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d86e:	6918      	ldr	r0, [r3, #16]
 800d870:	f000 fb06 	bl	800de80 <__hi0bits>
 800d874:	f1c0 0020 	rsb	r0, r0, #32
 800d878:	9b08      	ldr	r3, [sp, #32]
 800d87a:	4418      	add	r0, r3
 800d87c:	f010 001f 	ands.w	r0, r0, #31
 800d880:	d077      	beq.n	800d972 <_dtoa_r+0x8f2>
 800d882:	f1c0 0320 	rsb	r3, r0, #32
 800d886:	2b04      	cmp	r3, #4
 800d888:	dd6b      	ble.n	800d962 <_dtoa_r+0x8e2>
 800d88a:	9b08      	ldr	r3, [sp, #32]
 800d88c:	f1c0 001c 	rsb	r0, r0, #28
 800d890:	4403      	add	r3, r0
 800d892:	4480      	add	r8, r0
 800d894:	4406      	add	r6, r0
 800d896:	9308      	str	r3, [sp, #32]
 800d898:	f1b8 0f00 	cmp.w	r8, #0
 800d89c:	dd05      	ble.n	800d8aa <_dtoa_r+0x82a>
 800d89e:	4649      	mov	r1, r9
 800d8a0:	4642      	mov	r2, r8
 800d8a2:	4658      	mov	r0, fp
 800d8a4:	f000 fc52 	bl	800e14c <__lshift>
 800d8a8:	4681      	mov	r9, r0
 800d8aa:	9b08      	ldr	r3, [sp, #32]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	dd05      	ble.n	800d8bc <_dtoa_r+0x83c>
 800d8b0:	4621      	mov	r1, r4
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	4658      	mov	r0, fp
 800d8b6:	f000 fc49 	bl	800e14c <__lshift>
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d059      	beq.n	800d976 <_dtoa_r+0x8f6>
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	4648      	mov	r0, r9
 800d8c6:	f000 fcad 	bl	800e224 <__mcmp>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	da53      	bge.n	800d976 <_dtoa_r+0x8f6>
 800d8ce:	1e7b      	subs	r3, r7, #1
 800d8d0:	9304      	str	r3, [sp, #16]
 800d8d2:	4649      	mov	r1, r9
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	220a      	movs	r2, #10
 800d8d8:	4658      	mov	r0, fp
 800d8da:	f000 fa41 	bl	800dd60 <__multadd>
 800d8de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8e0:	4681      	mov	r9, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f000 8172 	beq.w	800dbcc <_dtoa_r+0xb4c>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	220a      	movs	r2, #10
 800d8ee:	4658      	mov	r0, fp
 800d8f0:	f000 fa36 	bl	800dd60 <__multadd>
 800d8f4:	9b00      	ldr	r3, [sp, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	4605      	mov	r5, r0
 800d8fa:	dc67      	bgt.n	800d9cc <_dtoa_r+0x94c>
 800d8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	dc41      	bgt.n	800d986 <_dtoa_r+0x906>
 800d902:	e063      	b.n	800d9cc <_dtoa_r+0x94c>
 800d904:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d906:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d90a:	e746      	b.n	800d79a <_dtoa_r+0x71a>
 800d90c:	9b07      	ldr	r3, [sp, #28]
 800d90e:	1e5c      	subs	r4, r3, #1
 800d910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d912:	42a3      	cmp	r3, r4
 800d914:	bfbf      	itttt	lt
 800d916:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d918:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d91a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d91c:	1ae3      	sublt	r3, r4, r3
 800d91e:	bfb4      	ite	lt
 800d920:	18d2      	addlt	r2, r2, r3
 800d922:	1b1c      	subge	r4, r3, r4
 800d924:	9b07      	ldr	r3, [sp, #28]
 800d926:	bfbc      	itt	lt
 800d928:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d92a:	2400      	movlt	r4, #0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	bfb5      	itete	lt
 800d930:	eba8 0603 	sublt.w	r6, r8, r3
 800d934:	9b07      	ldrge	r3, [sp, #28]
 800d936:	2300      	movlt	r3, #0
 800d938:	4646      	movge	r6, r8
 800d93a:	e730      	b.n	800d79e <_dtoa_r+0x71e>
 800d93c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d93e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d940:	4646      	mov	r6, r8
 800d942:	e735      	b.n	800d7b0 <_dtoa_r+0x730>
 800d944:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d946:	e75c      	b.n	800d802 <_dtoa_r+0x782>
 800d948:	2300      	movs	r3, #0
 800d94a:	e788      	b.n	800d85e <_dtoa_r+0x7de>
 800d94c:	3fe00000 	.word	0x3fe00000
 800d950:	40240000 	.word	0x40240000
 800d954:	40140000 	.word	0x40140000
 800d958:	9b02      	ldr	r3, [sp, #8]
 800d95a:	e780      	b.n	800d85e <_dtoa_r+0x7de>
 800d95c:	2300      	movs	r3, #0
 800d95e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d960:	e782      	b.n	800d868 <_dtoa_r+0x7e8>
 800d962:	d099      	beq.n	800d898 <_dtoa_r+0x818>
 800d964:	9a08      	ldr	r2, [sp, #32]
 800d966:	331c      	adds	r3, #28
 800d968:	441a      	add	r2, r3
 800d96a:	4498      	add	r8, r3
 800d96c:	441e      	add	r6, r3
 800d96e:	9208      	str	r2, [sp, #32]
 800d970:	e792      	b.n	800d898 <_dtoa_r+0x818>
 800d972:	4603      	mov	r3, r0
 800d974:	e7f6      	b.n	800d964 <_dtoa_r+0x8e4>
 800d976:	9b07      	ldr	r3, [sp, #28]
 800d978:	9704      	str	r7, [sp, #16]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	dc20      	bgt.n	800d9c0 <_dtoa_r+0x940>
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d982:	2b02      	cmp	r3, #2
 800d984:	dd1e      	ble.n	800d9c4 <_dtoa_r+0x944>
 800d986:	9b00      	ldr	r3, [sp, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f47f aec0 	bne.w	800d70e <_dtoa_r+0x68e>
 800d98e:	4621      	mov	r1, r4
 800d990:	2205      	movs	r2, #5
 800d992:	4658      	mov	r0, fp
 800d994:	f000 f9e4 	bl	800dd60 <__multadd>
 800d998:	4601      	mov	r1, r0
 800d99a:	4604      	mov	r4, r0
 800d99c:	4648      	mov	r0, r9
 800d99e:	f000 fc41 	bl	800e224 <__mcmp>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	f77f aeb3 	ble.w	800d70e <_dtoa_r+0x68e>
 800d9a8:	4656      	mov	r6, sl
 800d9aa:	2331      	movs	r3, #49	@ 0x31
 800d9ac:	f806 3b01 	strb.w	r3, [r6], #1
 800d9b0:	9b04      	ldr	r3, [sp, #16]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	9304      	str	r3, [sp, #16]
 800d9b6:	e6ae      	b.n	800d716 <_dtoa_r+0x696>
 800d9b8:	9c07      	ldr	r4, [sp, #28]
 800d9ba:	9704      	str	r7, [sp, #16]
 800d9bc:	4625      	mov	r5, r4
 800d9be:	e7f3      	b.n	800d9a8 <_dtoa_r+0x928>
 800d9c0:	9b07      	ldr	r3, [sp, #28]
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	f000 8104 	beq.w	800dbd4 <_dtoa_r+0xb54>
 800d9cc:	2e00      	cmp	r6, #0
 800d9ce:	dd05      	ble.n	800d9dc <_dtoa_r+0x95c>
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	4632      	mov	r2, r6
 800d9d4:	4658      	mov	r0, fp
 800d9d6:	f000 fbb9 	bl	800e14c <__lshift>
 800d9da:	4605      	mov	r5, r0
 800d9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d05a      	beq.n	800da98 <_dtoa_r+0xa18>
 800d9e2:	6869      	ldr	r1, [r5, #4]
 800d9e4:	4658      	mov	r0, fp
 800d9e6:	f000 f959 	bl	800dc9c <_Balloc>
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	b928      	cbnz	r0, 800d9fa <_dtoa_r+0x97a>
 800d9ee:	4b84      	ldr	r3, [pc, #528]	@ (800dc00 <_dtoa_r+0xb80>)
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d9f6:	f7ff bb5a 	b.w	800d0ae <_dtoa_r+0x2e>
 800d9fa:	692a      	ldr	r2, [r5, #16]
 800d9fc:	3202      	adds	r2, #2
 800d9fe:	0092      	lsls	r2, r2, #2
 800da00:	f105 010c 	add.w	r1, r5, #12
 800da04:	300c      	adds	r0, #12
 800da06:	f7ff fa9e 	bl	800cf46 <memcpy>
 800da0a:	2201      	movs	r2, #1
 800da0c:	4631      	mov	r1, r6
 800da0e:	4658      	mov	r0, fp
 800da10:	f000 fb9c 	bl	800e14c <__lshift>
 800da14:	f10a 0301 	add.w	r3, sl, #1
 800da18:	9307      	str	r3, [sp, #28]
 800da1a:	9b00      	ldr	r3, [sp, #0]
 800da1c:	4453      	add	r3, sl
 800da1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da20:	9b02      	ldr	r3, [sp, #8]
 800da22:	f003 0301 	and.w	r3, r3, #1
 800da26:	462f      	mov	r7, r5
 800da28:	930a      	str	r3, [sp, #40]	@ 0x28
 800da2a:	4605      	mov	r5, r0
 800da2c:	9b07      	ldr	r3, [sp, #28]
 800da2e:	4621      	mov	r1, r4
 800da30:	3b01      	subs	r3, #1
 800da32:	4648      	mov	r0, r9
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	f7ff fa9b 	bl	800cf70 <quorem>
 800da3a:	4639      	mov	r1, r7
 800da3c:	9002      	str	r0, [sp, #8]
 800da3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800da42:	4648      	mov	r0, r9
 800da44:	f000 fbee 	bl	800e224 <__mcmp>
 800da48:	462a      	mov	r2, r5
 800da4a:	9008      	str	r0, [sp, #32]
 800da4c:	4621      	mov	r1, r4
 800da4e:	4658      	mov	r0, fp
 800da50:	f000 fc04 	bl	800e25c <__mdiff>
 800da54:	68c2      	ldr	r2, [r0, #12]
 800da56:	4606      	mov	r6, r0
 800da58:	bb02      	cbnz	r2, 800da9c <_dtoa_r+0xa1c>
 800da5a:	4601      	mov	r1, r0
 800da5c:	4648      	mov	r0, r9
 800da5e:	f000 fbe1 	bl	800e224 <__mcmp>
 800da62:	4602      	mov	r2, r0
 800da64:	4631      	mov	r1, r6
 800da66:	4658      	mov	r0, fp
 800da68:	920e      	str	r2, [sp, #56]	@ 0x38
 800da6a:	f000 f957 	bl	800dd1c <_Bfree>
 800da6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da72:	9e07      	ldr	r6, [sp, #28]
 800da74:	ea43 0102 	orr.w	r1, r3, r2
 800da78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da7a:	4319      	orrs	r1, r3
 800da7c:	d110      	bne.n	800daa0 <_dtoa_r+0xa20>
 800da7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800da82:	d029      	beq.n	800dad8 <_dtoa_r+0xa58>
 800da84:	9b08      	ldr	r3, [sp, #32]
 800da86:	2b00      	cmp	r3, #0
 800da88:	dd02      	ble.n	800da90 <_dtoa_r+0xa10>
 800da8a:	9b02      	ldr	r3, [sp, #8]
 800da8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800da90:	9b00      	ldr	r3, [sp, #0]
 800da92:	f883 8000 	strb.w	r8, [r3]
 800da96:	e63f      	b.n	800d718 <_dtoa_r+0x698>
 800da98:	4628      	mov	r0, r5
 800da9a:	e7bb      	b.n	800da14 <_dtoa_r+0x994>
 800da9c:	2201      	movs	r2, #1
 800da9e:	e7e1      	b.n	800da64 <_dtoa_r+0x9e4>
 800daa0:	9b08      	ldr	r3, [sp, #32]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	db04      	blt.n	800dab0 <_dtoa_r+0xa30>
 800daa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800daa8:	430b      	orrs	r3, r1
 800daaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800daac:	430b      	orrs	r3, r1
 800daae:	d120      	bne.n	800daf2 <_dtoa_r+0xa72>
 800dab0:	2a00      	cmp	r2, #0
 800dab2:	dded      	ble.n	800da90 <_dtoa_r+0xa10>
 800dab4:	4649      	mov	r1, r9
 800dab6:	2201      	movs	r2, #1
 800dab8:	4658      	mov	r0, fp
 800daba:	f000 fb47 	bl	800e14c <__lshift>
 800dabe:	4621      	mov	r1, r4
 800dac0:	4681      	mov	r9, r0
 800dac2:	f000 fbaf 	bl	800e224 <__mcmp>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	dc03      	bgt.n	800dad2 <_dtoa_r+0xa52>
 800daca:	d1e1      	bne.n	800da90 <_dtoa_r+0xa10>
 800dacc:	f018 0f01 	tst.w	r8, #1
 800dad0:	d0de      	beq.n	800da90 <_dtoa_r+0xa10>
 800dad2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dad6:	d1d8      	bne.n	800da8a <_dtoa_r+0xa0a>
 800dad8:	9a00      	ldr	r2, [sp, #0]
 800dada:	2339      	movs	r3, #57	@ 0x39
 800dadc:	7013      	strb	r3, [r2, #0]
 800dade:	4633      	mov	r3, r6
 800dae0:	461e      	mov	r6, r3
 800dae2:	3b01      	subs	r3, #1
 800dae4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dae8:	2a39      	cmp	r2, #57	@ 0x39
 800daea:	d052      	beq.n	800db92 <_dtoa_r+0xb12>
 800daec:	3201      	adds	r2, #1
 800daee:	701a      	strb	r2, [r3, #0]
 800daf0:	e612      	b.n	800d718 <_dtoa_r+0x698>
 800daf2:	2a00      	cmp	r2, #0
 800daf4:	dd07      	ble.n	800db06 <_dtoa_r+0xa86>
 800daf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dafa:	d0ed      	beq.n	800dad8 <_dtoa_r+0xa58>
 800dafc:	9a00      	ldr	r2, [sp, #0]
 800dafe:	f108 0301 	add.w	r3, r8, #1
 800db02:	7013      	strb	r3, [r2, #0]
 800db04:	e608      	b.n	800d718 <_dtoa_r+0x698>
 800db06:	9b07      	ldr	r3, [sp, #28]
 800db08:	9a07      	ldr	r2, [sp, #28]
 800db0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800db0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db10:	4293      	cmp	r3, r2
 800db12:	d028      	beq.n	800db66 <_dtoa_r+0xae6>
 800db14:	4649      	mov	r1, r9
 800db16:	2300      	movs	r3, #0
 800db18:	220a      	movs	r2, #10
 800db1a:	4658      	mov	r0, fp
 800db1c:	f000 f920 	bl	800dd60 <__multadd>
 800db20:	42af      	cmp	r7, r5
 800db22:	4681      	mov	r9, r0
 800db24:	f04f 0300 	mov.w	r3, #0
 800db28:	f04f 020a 	mov.w	r2, #10
 800db2c:	4639      	mov	r1, r7
 800db2e:	4658      	mov	r0, fp
 800db30:	d107      	bne.n	800db42 <_dtoa_r+0xac2>
 800db32:	f000 f915 	bl	800dd60 <__multadd>
 800db36:	4607      	mov	r7, r0
 800db38:	4605      	mov	r5, r0
 800db3a:	9b07      	ldr	r3, [sp, #28]
 800db3c:	3301      	adds	r3, #1
 800db3e:	9307      	str	r3, [sp, #28]
 800db40:	e774      	b.n	800da2c <_dtoa_r+0x9ac>
 800db42:	f000 f90d 	bl	800dd60 <__multadd>
 800db46:	4629      	mov	r1, r5
 800db48:	4607      	mov	r7, r0
 800db4a:	2300      	movs	r3, #0
 800db4c:	220a      	movs	r2, #10
 800db4e:	4658      	mov	r0, fp
 800db50:	f000 f906 	bl	800dd60 <__multadd>
 800db54:	4605      	mov	r5, r0
 800db56:	e7f0      	b.n	800db3a <_dtoa_r+0xaba>
 800db58:	9b00      	ldr	r3, [sp, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	bfcc      	ite	gt
 800db5e:	461e      	movgt	r6, r3
 800db60:	2601      	movle	r6, #1
 800db62:	4456      	add	r6, sl
 800db64:	2700      	movs	r7, #0
 800db66:	4649      	mov	r1, r9
 800db68:	2201      	movs	r2, #1
 800db6a:	4658      	mov	r0, fp
 800db6c:	f000 faee 	bl	800e14c <__lshift>
 800db70:	4621      	mov	r1, r4
 800db72:	4681      	mov	r9, r0
 800db74:	f000 fb56 	bl	800e224 <__mcmp>
 800db78:	2800      	cmp	r0, #0
 800db7a:	dcb0      	bgt.n	800dade <_dtoa_r+0xa5e>
 800db7c:	d102      	bne.n	800db84 <_dtoa_r+0xb04>
 800db7e:	f018 0f01 	tst.w	r8, #1
 800db82:	d1ac      	bne.n	800dade <_dtoa_r+0xa5e>
 800db84:	4633      	mov	r3, r6
 800db86:	461e      	mov	r6, r3
 800db88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db8c:	2a30      	cmp	r2, #48	@ 0x30
 800db8e:	d0fa      	beq.n	800db86 <_dtoa_r+0xb06>
 800db90:	e5c2      	b.n	800d718 <_dtoa_r+0x698>
 800db92:	459a      	cmp	sl, r3
 800db94:	d1a4      	bne.n	800dae0 <_dtoa_r+0xa60>
 800db96:	9b04      	ldr	r3, [sp, #16]
 800db98:	3301      	adds	r3, #1
 800db9a:	9304      	str	r3, [sp, #16]
 800db9c:	2331      	movs	r3, #49	@ 0x31
 800db9e:	f88a 3000 	strb.w	r3, [sl]
 800dba2:	e5b9      	b.n	800d718 <_dtoa_r+0x698>
 800dba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dba6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dc04 <_dtoa_r+0xb84>
 800dbaa:	b11b      	cbz	r3, 800dbb4 <_dtoa_r+0xb34>
 800dbac:	f10a 0308 	add.w	r3, sl, #8
 800dbb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dbb2:	6013      	str	r3, [r2, #0]
 800dbb4:	4650      	mov	r0, sl
 800dbb6:	b019      	add	sp, #100	@ 0x64
 800dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	f77f ae37 	ble.w	800d832 <_dtoa_r+0x7b2>
 800dbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbc8:	2001      	movs	r0, #1
 800dbca:	e655      	b.n	800d878 <_dtoa_r+0x7f8>
 800dbcc:	9b00      	ldr	r3, [sp, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f77f aed6 	ble.w	800d980 <_dtoa_r+0x900>
 800dbd4:	4656      	mov	r6, sl
 800dbd6:	4621      	mov	r1, r4
 800dbd8:	4648      	mov	r0, r9
 800dbda:	f7ff f9c9 	bl	800cf70 <quorem>
 800dbde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dbe2:	f806 8b01 	strb.w	r8, [r6], #1
 800dbe6:	9b00      	ldr	r3, [sp, #0]
 800dbe8:	eba6 020a 	sub.w	r2, r6, sl
 800dbec:	4293      	cmp	r3, r2
 800dbee:	ddb3      	ble.n	800db58 <_dtoa_r+0xad8>
 800dbf0:	4649      	mov	r1, r9
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	220a      	movs	r2, #10
 800dbf6:	4658      	mov	r0, fp
 800dbf8:	f000 f8b2 	bl	800dd60 <__multadd>
 800dbfc:	4681      	mov	r9, r0
 800dbfe:	e7ea      	b.n	800dbd6 <_dtoa_r+0xb56>
 800dc00:	08011273 	.word	0x08011273
 800dc04:	080111f7 	.word	0x080111f7

0800dc08 <_free_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	2900      	cmp	r1, #0
 800dc0e:	d041      	beq.n	800dc94 <_free_r+0x8c>
 800dc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc14:	1f0c      	subs	r4, r1, #4
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bfb8      	it	lt
 800dc1a:	18e4      	addlt	r4, r4, r3
 800dc1c:	f7fe f8e4 	bl	800bde8 <__malloc_lock>
 800dc20:	4a1d      	ldr	r2, [pc, #116]	@ (800dc98 <_free_r+0x90>)
 800dc22:	6813      	ldr	r3, [r2, #0]
 800dc24:	b933      	cbnz	r3, 800dc34 <_free_r+0x2c>
 800dc26:	6063      	str	r3, [r4, #4]
 800dc28:	6014      	str	r4, [r2, #0]
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc30:	f7fe b8e0 	b.w	800bdf4 <__malloc_unlock>
 800dc34:	42a3      	cmp	r3, r4
 800dc36:	d908      	bls.n	800dc4a <_free_r+0x42>
 800dc38:	6820      	ldr	r0, [r4, #0]
 800dc3a:	1821      	adds	r1, r4, r0
 800dc3c:	428b      	cmp	r3, r1
 800dc3e:	bf01      	itttt	eq
 800dc40:	6819      	ldreq	r1, [r3, #0]
 800dc42:	685b      	ldreq	r3, [r3, #4]
 800dc44:	1809      	addeq	r1, r1, r0
 800dc46:	6021      	streq	r1, [r4, #0]
 800dc48:	e7ed      	b.n	800dc26 <_free_r+0x1e>
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	b10b      	cbz	r3, 800dc54 <_free_r+0x4c>
 800dc50:	42a3      	cmp	r3, r4
 800dc52:	d9fa      	bls.n	800dc4a <_free_r+0x42>
 800dc54:	6811      	ldr	r1, [r2, #0]
 800dc56:	1850      	adds	r0, r2, r1
 800dc58:	42a0      	cmp	r0, r4
 800dc5a:	d10b      	bne.n	800dc74 <_free_r+0x6c>
 800dc5c:	6820      	ldr	r0, [r4, #0]
 800dc5e:	4401      	add	r1, r0
 800dc60:	1850      	adds	r0, r2, r1
 800dc62:	4283      	cmp	r3, r0
 800dc64:	6011      	str	r1, [r2, #0]
 800dc66:	d1e0      	bne.n	800dc2a <_free_r+0x22>
 800dc68:	6818      	ldr	r0, [r3, #0]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	6053      	str	r3, [r2, #4]
 800dc6e:	4408      	add	r0, r1
 800dc70:	6010      	str	r0, [r2, #0]
 800dc72:	e7da      	b.n	800dc2a <_free_r+0x22>
 800dc74:	d902      	bls.n	800dc7c <_free_r+0x74>
 800dc76:	230c      	movs	r3, #12
 800dc78:	602b      	str	r3, [r5, #0]
 800dc7a:	e7d6      	b.n	800dc2a <_free_r+0x22>
 800dc7c:	6820      	ldr	r0, [r4, #0]
 800dc7e:	1821      	adds	r1, r4, r0
 800dc80:	428b      	cmp	r3, r1
 800dc82:	bf04      	itt	eq
 800dc84:	6819      	ldreq	r1, [r3, #0]
 800dc86:	685b      	ldreq	r3, [r3, #4]
 800dc88:	6063      	str	r3, [r4, #4]
 800dc8a:	bf04      	itt	eq
 800dc8c:	1809      	addeq	r1, r1, r0
 800dc8e:	6021      	streq	r1, [r4, #0]
 800dc90:	6054      	str	r4, [r2, #4]
 800dc92:	e7ca      	b.n	800dc2a <_free_r+0x22>
 800dc94:	bd38      	pop	{r3, r4, r5, pc}
 800dc96:	bf00      	nop
 800dc98:	200006a4 	.word	0x200006a4

0800dc9c <_Balloc>:
 800dc9c:	b570      	push	{r4, r5, r6, lr}
 800dc9e:	69c6      	ldr	r6, [r0, #28]
 800dca0:	4604      	mov	r4, r0
 800dca2:	460d      	mov	r5, r1
 800dca4:	b976      	cbnz	r6, 800dcc4 <_Balloc+0x28>
 800dca6:	2010      	movs	r0, #16
 800dca8:	f7fd ffec 	bl	800bc84 <malloc>
 800dcac:	4602      	mov	r2, r0
 800dcae:	61e0      	str	r0, [r4, #28]
 800dcb0:	b920      	cbnz	r0, 800dcbc <_Balloc+0x20>
 800dcb2:	4b18      	ldr	r3, [pc, #96]	@ (800dd14 <_Balloc+0x78>)
 800dcb4:	4818      	ldr	r0, [pc, #96]	@ (800dd18 <_Balloc+0x7c>)
 800dcb6:	216b      	movs	r1, #107	@ 0x6b
 800dcb8:	f7fd ffc6 	bl	800bc48 <__assert_func>
 800dcbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcc0:	6006      	str	r6, [r0, #0]
 800dcc2:	60c6      	str	r6, [r0, #12]
 800dcc4:	69e6      	ldr	r6, [r4, #28]
 800dcc6:	68f3      	ldr	r3, [r6, #12]
 800dcc8:	b183      	cbz	r3, 800dcec <_Balloc+0x50>
 800dcca:	69e3      	ldr	r3, [r4, #28]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dcd2:	b9b8      	cbnz	r0, 800dd04 <_Balloc+0x68>
 800dcd4:	2101      	movs	r1, #1
 800dcd6:	fa01 f605 	lsl.w	r6, r1, r5
 800dcda:	1d72      	adds	r2, r6, #5
 800dcdc:	0092      	lsls	r2, r2, #2
 800dcde:	4620      	mov	r0, r4
 800dce0:	f001 ff0a 	bl	800faf8 <_calloc_r>
 800dce4:	b160      	cbz	r0, 800dd00 <_Balloc+0x64>
 800dce6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcea:	e00e      	b.n	800dd0a <_Balloc+0x6e>
 800dcec:	2221      	movs	r2, #33	@ 0x21
 800dcee:	2104      	movs	r1, #4
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f001 ff01 	bl	800faf8 <_calloc_r>
 800dcf6:	69e3      	ldr	r3, [r4, #28]
 800dcf8:	60f0      	str	r0, [r6, #12]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1e4      	bne.n	800dcca <_Balloc+0x2e>
 800dd00:	2000      	movs	r0, #0
 800dd02:	bd70      	pop	{r4, r5, r6, pc}
 800dd04:	6802      	ldr	r2, [r0, #0]
 800dd06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd10:	e7f7      	b.n	800dd02 <_Balloc+0x66>
 800dd12:	bf00      	nop
 800dd14:	08011204 	.word	0x08011204
 800dd18:	08011284 	.word	0x08011284

0800dd1c <_Bfree>:
 800dd1c:	b570      	push	{r4, r5, r6, lr}
 800dd1e:	69c6      	ldr	r6, [r0, #28]
 800dd20:	4605      	mov	r5, r0
 800dd22:	460c      	mov	r4, r1
 800dd24:	b976      	cbnz	r6, 800dd44 <_Bfree+0x28>
 800dd26:	2010      	movs	r0, #16
 800dd28:	f7fd ffac 	bl	800bc84 <malloc>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	61e8      	str	r0, [r5, #28]
 800dd30:	b920      	cbnz	r0, 800dd3c <_Bfree+0x20>
 800dd32:	4b09      	ldr	r3, [pc, #36]	@ (800dd58 <_Bfree+0x3c>)
 800dd34:	4809      	ldr	r0, [pc, #36]	@ (800dd5c <_Bfree+0x40>)
 800dd36:	218f      	movs	r1, #143	@ 0x8f
 800dd38:	f7fd ff86 	bl	800bc48 <__assert_func>
 800dd3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd40:	6006      	str	r6, [r0, #0]
 800dd42:	60c6      	str	r6, [r0, #12]
 800dd44:	b13c      	cbz	r4, 800dd56 <_Bfree+0x3a>
 800dd46:	69eb      	ldr	r3, [r5, #28]
 800dd48:	6862      	ldr	r2, [r4, #4]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd50:	6021      	str	r1, [r4, #0]
 800dd52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd56:	bd70      	pop	{r4, r5, r6, pc}
 800dd58:	08011204 	.word	0x08011204
 800dd5c:	08011284 	.word	0x08011284

0800dd60 <__multadd>:
 800dd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd64:	690d      	ldr	r5, [r1, #16]
 800dd66:	4607      	mov	r7, r0
 800dd68:	460c      	mov	r4, r1
 800dd6a:	461e      	mov	r6, r3
 800dd6c:	f101 0c14 	add.w	ip, r1, #20
 800dd70:	2000      	movs	r0, #0
 800dd72:	f8dc 3000 	ldr.w	r3, [ip]
 800dd76:	b299      	uxth	r1, r3
 800dd78:	fb02 6101 	mla	r1, r2, r1, r6
 800dd7c:	0c1e      	lsrs	r6, r3, #16
 800dd7e:	0c0b      	lsrs	r3, r1, #16
 800dd80:	fb02 3306 	mla	r3, r2, r6, r3
 800dd84:	b289      	uxth	r1, r1
 800dd86:	3001      	adds	r0, #1
 800dd88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd8c:	4285      	cmp	r5, r0
 800dd8e:	f84c 1b04 	str.w	r1, [ip], #4
 800dd92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd96:	dcec      	bgt.n	800dd72 <__multadd+0x12>
 800dd98:	b30e      	cbz	r6, 800ddde <__multadd+0x7e>
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	42ab      	cmp	r3, r5
 800dd9e:	dc19      	bgt.n	800ddd4 <__multadd+0x74>
 800dda0:	6861      	ldr	r1, [r4, #4]
 800dda2:	4638      	mov	r0, r7
 800dda4:	3101      	adds	r1, #1
 800dda6:	f7ff ff79 	bl	800dc9c <_Balloc>
 800ddaa:	4680      	mov	r8, r0
 800ddac:	b928      	cbnz	r0, 800ddba <__multadd+0x5a>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	4b0c      	ldr	r3, [pc, #48]	@ (800dde4 <__multadd+0x84>)
 800ddb2:	480d      	ldr	r0, [pc, #52]	@ (800dde8 <__multadd+0x88>)
 800ddb4:	21ba      	movs	r1, #186	@ 0xba
 800ddb6:	f7fd ff47 	bl	800bc48 <__assert_func>
 800ddba:	6922      	ldr	r2, [r4, #16]
 800ddbc:	3202      	adds	r2, #2
 800ddbe:	f104 010c 	add.w	r1, r4, #12
 800ddc2:	0092      	lsls	r2, r2, #2
 800ddc4:	300c      	adds	r0, #12
 800ddc6:	f7ff f8be 	bl	800cf46 <memcpy>
 800ddca:	4621      	mov	r1, r4
 800ddcc:	4638      	mov	r0, r7
 800ddce:	f7ff ffa5 	bl	800dd1c <_Bfree>
 800ddd2:	4644      	mov	r4, r8
 800ddd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ddd8:	3501      	adds	r5, #1
 800ddda:	615e      	str	r6, [r3, #20]
 800dddc:	6125      	str	r5, [r4, #16]
 800ddde:	4620      	mov	r0, r4
 800dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde4:	08011273 	.word	0x08011273
 800dde8:	08011284 	.word	0x08011284

0800ddec <__s2b>:
 800ddec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	4615      	mov	r5, r2
 800ddf4:	461f      	mov	r7, r3
 800ddf6:	2209      	movs	r2, #9
 800ddf8:	3308      	adds	r3, #8
 800ddfa:	4606      	mov	r6, r0
 800ddfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800de00:	2100      	movs	r1, #0
 800de02:	2201      	movs	r2, #1
 800de04:	429a      	cmp	r2, r3
 800de06:	db09      	blt.n	800de1c <__s2b+0x30>
 800de08:	4630      	mov	r0, r6
 800de0a:	f7ff ff47 	bl	800dc9c <_Balloc>
 800de0e:	b940      	cbnz	r0, 800de22 <__s2b+0x36>
 800de10:	4602      	mov	r2, r0
 800de12:	4b19      	ldr	r3, [pc, #100]	@ (800de78 <__s2b+0x8c>)
 800de14:	4819      	ldr	r0, [pc, #100]	@ (800de7c <__s2b+0x90>)
 800de16:	21d3      	movs	r1, #211	@ 0xd3
 800de18:	f7fd ff16 	bl	800bc48 <__assert_func>
 800de1c:	0052      	lsls	r2, r2, #1
 800de1e:	3101      	adds	r1, #1
 800de20:	e7f0      	b.n	800de04 <__s2b+0x18>
 800de22:	9b08      	ldr	r3, [sp, #32]
 800de24:	6143      	str	r3, [r0, #20]
 800de26:	2d09      	cmp	r5, #9
 800de28:	f04f 0301 	mov.w	r3, #1
 800de2c:	6103      	str	r3, [r0, #16]
 800de2e:	dd16      	ble.n	800de5e <__s2b+0x72>
 800de30:	f104 0909 	add.w	r9, r4, #9
 800de34:	46c8      	mov	r8, r9
 800de36:	442c      	add	r4, r5
 800de38:	f818 3b01 	ldrb.w	r3, [r8], #1
 800de3c:	4601      	mov	r1, r0
 800de3e:	3b30      	subs	r3, #48	@ 0x30
 800de40:	220a      	movs	r2, #10
 800de42:	4630      	mov	r0, r6
 800de44:	f7ff ff8c 	bl	800dd60 <__multadd>
 800de48:	45a0      	cmp	r8, r4
 800de4a:	d1f5      	bne.n	800de38 <__s2b+0x4c>
 800de4c:	f1a5 0408 	sub.w	r4, r5, #8
 800de50:	444c      	add	r4, r9
 800de52:	1b2d      	subs	r5, r5, r4
 800de54:	1963      	adds	r3, r4, r5
 800de56:	42bb      	cmp	r3, r7
 800de58:	db04      	blt.n	800de64 <__s2b+0x78>
 800de5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de5e:	340a      	adds	r4, #10
 800de60:	2509      	movs	r5, #9
 800de62:	e7f6      	b.n	800de52 <__s2b+0x66>
 800de64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800de68:	4601      	mov	r1, r0
 800de6a:	3b30      	subs	r3, #48	@ 0x30
 800de6c:	220a      	movs	r2, #10
 800de6e:	4630      	mov	r0, r6
 800de70:	f7ff ff76 	bl	800dd60 <__multadd>
 800de74:	e7ee      	b.n	800de54 <__s2b+0x68>
 800de76:	bf00      	nop
 800de78:	08011273 	.word	0x08011273
 800de7c:	08011284 	.word	0x08011284

0800de80 <__hi0bits>:
 800de80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800de84:	4603      	mov	r3, r0
 800de86:	bf36      	itet	cc
 800de88:	0403      	lslcc	r3, r0, #16
 800de8a:	2000      	movcs	r0, #0
 800de8c:	2010      	movcc	r0, #16
 800de8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de92:	bf3c      	itt	cc
 800de94:	021b      	lslcc	r3, r3, #8
 800de96:	3008      	addcc	r0, #8
 800de98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de9c:	bf3c      	itt	cc
 800de9e:	011b      	lslcc	r3, r3, #4
 800dea0:	3004      	addcc	r0, #4
 800dea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dea6:	bf3c      	itt	cc
 800dea8:	009b      	lslcc	r3, r3, #2
 800deaa:	3002      	addcc	r0, #2
 800deac:	2b00      	cmp	r3, #0
 800deae:	db05      	blt.n	800debc <__hi0bits+0x3c>
 800deb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800deb4:	f100 0001 	add.w	r0, r0, #1
 800deb8:	bf08      	it	eq
 800deba:	2020      	moveq	r0, #32
 800debc:	4770      	bx	lr

0800debe <__lo0bits>:
 800debe:	6803      	ldr	r3, [r0, #0]
 800dec0:	4602      	mov	r2, r0
 800dec2:	f013 0007 	ands.w	r0, r3, #7
 800dec6:	d00b      	beq.n	800dee0 <__lo0bits+0x22>
 800dec8:	07d9      	lsls	r1, r3, #31
 800deca:	d421      	bmi.n	800df10 <__lo0bits+0x52>
 800decc:	0798      	lsls	r0, r3, #30
 800dece:	bf49      	itett	mi
 800ded0:	085b      	lsrmi	r3, r3, #1
 800ded2:	089b      	lsrpl	r3, r3, #2
 800ded4:	2001      	movmi	r0, #1
 800ded6:	6013      	strmi	r3, [r2, #0]
 800ded8:	bf5c      	itt	pl
 800deda:	6013      	strpl	r3, [r2, #0]
 800dedc:	2002      	movpl	r0, #2
 800dede:	4770      	bx	lr
 800dee0:	b299      	uxth	r1, r3
 800dee2:	b909      	cbnz	r1, 800dee8 <__lo0bits+0x2a>
 800dee4:	0c1b      	lsrs	r3, r3, #16
 800dee6:	2010      	movs	r0, #16
 800dee8:	b2d9      	uxtb	r1, r3
 800deea:	b909      	cbnz	r1, 800def0 <__lo0bits+0x32>
 800deec:	3008      	adds	r0, #8
 800deee:	0a1b      	lsrs	r3, r3, #8
 800def0:	0719      	lsls	r1, r3, #28
 800def2:	bf04      	itt	eq
 800def4:	091b      	lsreq	r3, r3, #4
 800def6:	3004      	addeq	r0, #4
 800def8:	0799      	lsls	r1, r3, #30
 800defa:	bf04      	itt	eq
 800defc:	089b      	lsreq	r3, r3, #2
 800defe:	3002      	addeq	r0, #2
 800df00:	07d9      	lsls	r1, r3, #31
 800df02:	d403      	bmi.n	800df0c <__lo0bits+0x4e>
 800df04:	085b      	lsrs	r3, r3, #1
 800df06:	f100 0001 	add.w	r0, r0, #1
 800df0a:	d003      	beq.n	800df14 <__lo0bits+0x56>
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	4770      	bx	lr
 800df10:	2000      	movs	r0, #0
 800df12:	4770      	bx	lr
 800df14:	2020      	movs	r0, #32
 800df16:	4770      	bx	lr

0800df18 <__i2b>:
 800df18:	b510      	push	{r4, lr}
 800df1a:	460c      	mov	r4, r1
 800df1c:	2101      	movs	r1, #1
 800df1e:	f7ff febd 	bl	800dc9c <_Balloc>
 800df22:	4602      	mov	r2, r0
 800df24:	b928      	cbnz	r0, 800df32 <__i2b+0x1a>
 800df26:	4b05      	ldr	r3, [pc, #20]	@ (800df3c <__i2b+0x24>)
 800df28:	4805      	ldr	r0, [pc, #20]	@ (800df40 <__i2b+0x28>)
 800df2a:	f240 1145 	movw	r1, #325	@ 0x145
 800df2e:	f7fd fe8b 	bl	800bc48 <__assert_func>
 800df32:	2301      	movs	r3, #1
 800df34:	6144      	str	r4, [r0, #20]
 800df36:	6103      	str	r3, [r0, #16]
 800df38:	bd10      	pop	{r4, pc}
 800df3a:	bf00      	nop
 800df3c:	08011273 	.word	0x08011273
 800df40:	08011284 	.word	0x08011284

0800df44 <__multiply>:
 800df44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df48:	4614      	mov	r4, r2
 800df4a:	690a      	ldr	r2, [r1, #16]
 800df4c:	6923      	ldr	r3, [r4, #16]
 800df4e:	429a      	cmp	r2, r3
 800df50:	bfa8      	it	ge
 800df52:	4623      	movge	r3, r4
 800df54:	460f      	mov	r7, r1
 800df56:	bfa4      	itt	ge
 800df58:	460c      	movge	r4, r1
 800df5a:	461f      	movge	r7, r3
 800df5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800df60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800df64:	68a3      	ldr	r3, [r4, #8]
 800df66:	6861      	ldr	r1, [r4, #4]
 800df68:	eb0a 0609 	add.w	r6, sl, r9
 800df6c:	42b3      	cmp	r3, r6
 800df6e:	b085      	sub	sp, #20
 800df70:	bfb8      	it	lt
 800df72:	3101      	addlt	r1, #1
 800df74:	f7ff fe92 	bl	800dc9c <_Balloc>
 800df78:	b930      	cbnz	r0, 800df88 <__multiply+0x44>
 800df7a:	4602      	mov	r2, r0
 800df7c:	4b44      	ldr	r3, [pc, #272]	@ (800e090 <__multiply+0x14c>)
 800df7e:	4845      	ldr	r0, [pc, #276]	@ (800e094 <__multiply+0x150>)
 800df80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800df84:	f7fd fe60 	bl	800bc48 <__assert_func>
 800df88:	f100 0514 	add.w	r5, r0, #20
 800df8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df90:	462b      	mov	r3, r5
 800df92:	2200      	movs	r2, #0
 800df94:	4543      	cmp	r3, r8
 800df96:	d321      	bcc.n	800dfdc <__multiply+0x98>
 800df98:	f107 0114 	add.w	r1, r7, #20
 800df9c:	f104 0214 	add.w	r2, r4, #20
 800dfa0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dfa4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dfa8:	9302      	str	r3, [sp, #8]
 800dfaa:	1b13      	subs	r3, r2, r4
 800dfac:	3b15      	subs	r3, #21
 800dfae:	f023 0303 	bic.w	r3, r3, #3
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	f104 0715 	add.w	r7, r4, #21
 800dfb8:	42ba      	cmp	r2, r7
 800dfba:	bf38      	it	cc
 800dfbc:	2304      	movcc	r3, #4
 800dfbe:	9301      	str	r3, [sp, #4]
 800dfc0:	9b02      	ldr	r3, [sp, #8]
 800dfc2:	9103      	str	r1, [sp, #12]
 800dfc4:	428b      	cmp	r3, r1
 800dfc6:	d80c      	bhi.n	800dfe2 <__multiply+0x9e>
 800dfc8:	2e00      	cmp	r6, #0
 800dfca:	dd03      	ble.n	800dfd4 <__multiply+0x90>
 800dfcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d05b      	beq.n	800e08c <__multiply+0x148>
 800dfd4:	6106      	str	r6, [r0, #16]
 800dfd6:	b005      	add	sp, #20
 800dfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfdc:	f843 2b04 	str.w	r2, [r3], #4
 800dfe0:	e7d8      	b.n	800df94 <__multiply+0x50>
 800dfe2:	f8b1 a000 	ldrh.w	sl, [r1]
 800dfe6:	f1ba 0f00 	cmp.w	sl, #0
 800dfea:	d024      	beq.n	800e036 <__multiply+0xf2>
 800dfec:	f104 0e14 	add.w	lr, r4, #20
 800dff0:	46a9      	mov	r9, r5
 800dff2:	f04f 0c00 	mov.w	ip, #0
 800dff6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dffa:	f8d9 3000 	ldr.w	r3, [r9]
 800dffe:	fa1f fb87 	uxth.w	fp, r7
 800e002:	b29b      	uxth	r3, r3
 800e004:	fb0a 330b 	mla	r3, sl, fp, r3
 800e008:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e00c:	f8d9 7000 	ldr.w	r7, [r9]
 800e010:	4463      	add	r3, ip
 800e012:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e016:	fb0a c70b 	mla	r7, sl, fp, ip
 800e01a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e01e:	b29b      	uxth	r3, r3
 800e020:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e024:	4572      	cmp	r2, lr
 800e026:	f849 3b04 	str.w	r3, [r9], #4
 800e02a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e02e:	d8e2      	bhi.n	800dff6 <__multiply+0xb2>
 800e030:	9b01      	ldr	r3, [sp, #4]
 800e032:	f845 c003 	str.w	ip, [r5, r3]
 800e036:	9b03      	ldr	r3, [sp, #12]
 800e038:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e03c:	3104      	adds	r1, #4
 800e03e:	f1b9 0f00 	cmp.w	r9, #0
 800e042:	d021      	beq.n	800e088 <__multiply+0x144>
 800e044:	682b      	ldr	r3, [r5, #0]
 800e046:	f104 0c14 	add.w	ip, r4, #20
 800e04a:	46ae      	mov	lr, r5
 800e04c:	f04f 0a00 	mov.w	sl, #0
 800e050:	f8bc b000 	ldrh.w	fp, [ip]
 800e054:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e058:	fb09 770b 	mla	r7, r9, fp, r7
 800e05c:	4457      	add	r7, sl
 800e05e:	b29b      	uxth	r3, r3
 800e060:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e064:	f84e 3b04 	str.w	r3, [lr], #4
 800e068:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e06c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e070:	f8be 3000 	ldrh.w	r3, [lr]
 800e074:	fb09 330a 	mla	r3, r9, sl, r3
 800e078:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e07c:	4562      	cmp	r2, ip
 800e07e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e082:	d8e5      	bhi.n	800e050 <__multiply+0x10c>
 800e084:	9f01      	ldr	r7, [sp, #4]
 800e086:	51eb      	str	r3, [r5, r7]
 800e088:	3504      	adds	r5, #4
 800e08a:	e799      	b.n	800dfc0 <__multiply+0x7c>
 800e08c:	3e01      	subs	r6, #1
 800e08e:	e79b      	b.n	800dfc8 <__multiply+0x84>
 800e090:	08011273 	.word	0x08011273
 800e094:	08011284 	.word	0x08011284

0800e098 <__pow5mult>:
 800e098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e09c:	4615      	mov	r5, r2
 800e09e:	f012 0203 	ands.w	r2, r2, #3
 800e0a2:	4607      	mov	r7, r0
 800e0a4:	460e      	mov	r6, r1
 800e0a6:	d007      	beq.n	800e0b8 <__pow5mult+0x20>
 800e0a8:	4c25      	ldr	r4, [pc, #148]	@ (800e140 <__pow5mult+0xa8>)
 800e0aa:	3a01      	subs	r2, #1
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0b2:	f7ff fe55 	bl	800dd60 <__multadd>
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	10ad      	asrs	r5, r5, #2
 800e0ba:	d03d      	beq.n	800e138 <__pow5mult+0xa0>
 800e0bc:	69fc      	ldr	r4, [r7, #28]
 800e0be:	b97c      	cbnz	r4, 800e0e0 <__pow5mult+0x48>
 800e0c0:	2010      	movs	r0, #16
 800e0c2:	f7fd fddf 	bl	800bc84 <malloc>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	61f8      	str	r0, [r7, #28]
 800e0ca:	b928      	cbnz	r0, 800e0d8 <__pow5mult+0x40>
 800e0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e144 <__pow5mult+0xac>)
 800e0ce:	481e      	ldr	r0, [pc, #120]	@ (800e148 <__pow5mult+0xb0>)
 800e0d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e0d4:	f7fd fdb8 	bl	800bc48 <__assert_func>
 800e0d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e0dc:	6004      	str	r4, [r0, #0]
 800e0de:	60c4      	str	r4, [r0, #12]
 800e0e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e0e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e0e8:	b94c      	cbnz	r4, 800e0fe <__pow5mult+0x66>
 800e0ea:	f240 2171 	movw	r1, #625	@ 0x271
 800e0ee:	4638      	mov	r0, r7
 800e0f0:	f7ff ff12 	bl	800df18 <__i2b>
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	6003      	str	r3, [r0, #0]
 800e0fe:	f04f 0900 	mov.w	r9, #0
 800e102:	07eb      	lsls	r3, r5, #31
 800e104:	d50a      	bpl.n	800e11c <__pow5mult+0x84>
 800e106:	4631      	mov	r1, r6
 800e108:	4622      	mov	r2, r4
 800e10a:	4638      	mov	r0, r7
 800e10c:	f7ff ff1a 	bl	800df44 <__multiply>
 800e110:	4631      	mov	r1, r6
 800e112:	4680      	mov	r8, r0
 800e114:	4638      	mov	r0, r7
 800e116:	f7ff fe01 	bl	800dd1c <_Bfree>
 800e11a:	4646      	mov	r6, r8
 800e11c:	106d      	asrs	r5, r5, #1
 800e11e:	d00b      	beq.n	800e138 <__pow5mult+0xa0>
 800e120:	6820      	ldr	r0, [r4, #0]
 800e122:	b938      	cbnz	r0, 800e134 <__pow5mult+0x9c>
 800e124:	4622      	mov	r2, r4
 800e126:	4621      	mov	r1, r4
 800e128:	4638      	mov	r0, r7
 800e12a:	f7ff ff0b 	bl	800df44 <__multiply>
 800e12e:	6020      	str	r0, [r4, #0]
 800e130:	f8c0 9000 	str.w	r9, [r0]
 800e134:	4604      	mov	r4, r0
 800e136:	e7e4      	b.n	800e102 <__pow5mult+0x6a>
 800e138:	4630      	mov	r0, r6
 800e13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e13e:	bf00      	nop
 800e140:	080112e0 	.word	0x080112e0
 800e144:	08011204 	.word	0x08011204
 800e148:	08011284 	.word	0x08011284

0800e14c <__lshift>:
 800e14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e150:	460c      	mov	r4, r1
 800e152:	6849      	ldr	r1, [r1, #4]
 800e154:	6923      	ldr	r3, [r4, #16]
 800e156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e15a:	68a3      	ldr	r3, [r4, #8]
 800e15c:	4607      	mov	r7, r0
 800e15e:	4691      	mov	r9, r2
 800e160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e164:	f108 0601 	add.w	r6, r8, #1
 800e168:	42b3      	cmp	r3, r6
 800e16a:	db0b      	blt.n	800e184 <__lshift+0x38>
 800e16c:	4638      	mov	r0, r7
 800e16e:	f7ff fd95 	bl	800dc9c <_Balloc>
 800e172:	4605      	mov	r5, r0
 800e174:	b948      	cbnz	r0, 800e18a <__lshift+0x3e>
 800e176:	4602      	mov	r2, r0
 800e178:	4b28      	ldr	r3, [pc, #160]	@ (800e21c <__lshift+0xd0>)
 800e17a:	4829      	ldr	r0, [pc, #164]	@ (800e220 <__lshift+0xd4>)
 800e17c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e180:	f7fd fd62 	bl	800bc48 <__assert_func>
 800e184:	3101      	adds	r1, #1
 800e186:	005b      	lsls	r3, r3, #1
 800e188:	e7ee      	b.n	800e168 <__lshift+0x1c>
 800e18a:	2300      	movs	r3, #0
 800e18c:	f100 0114 	add.w	r1, r0, #20
 800e190:	f100 0210 	add.w	r2, r0, #16
 800e194:	4618      	mov	r0, r3
 800e196:	4553      	cmp	r3, sl
 800e198:	db33      	blt.n	800e202 <__lshift+0xb6>
 800e19a:	6920      	ldr	r0, [r4, #16]
 800e19c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1a0:	f104 0314 	add.w	r3, r4, #20
 800e1a4:	f019 091f 	ands.w	r9, r9, #31
 800e1a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1b0:	d02b      	beq.n	800e20a <__lshift+0xbe>
 800e1b2:	f1c9 0e20 	rsb	lr, r9, #32
 800e1b6:	468a      	mov	sl, r1
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	6818      	ldr	r0, [r3, #0]
 800e1bc:	fa00 f009 	lsl.w	r0, r0, r9
 800e1c0:	4310      	orrs	r0, r2
 800e1c2:	f84a 0b04 	str.w	r0, [sl], #4
 800e1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1ca:	459c      	cmp	ip, r3
 800e1cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e1d0:	d8f3      	bhi.n	800e1ba <__lshift+0x6e>
 800e1d2:	ebac 0304 	sub.w	r3, ip, r4
 800e1d6:	3b15      	subs	r3, #21
 800e1d8:	f023 0303 	bic.w	r3, r3, #3
 800e1dc:	3304      	adds	r3, #4
 800e1de:	f104 0015 	add.w	r0, r4, #21
 800e1e2:	4584      	cmp	ip, r0
 800e1e4:	bf38      	it	cc
 800e1e6:	2304      	movcc	r3, #4
 800e1e8:	50ca      	str	r2, [r1, r3]
 800e1ea:	b10a      	cbz	r2, 800e1f0 <__lshift+0xa4>
 800e1ec:	f108 0602 	add.w	r6, r8, #2
 800e1f0:	3e01      	subs	r6, #1
 800e1f2:	4638      	mov	r0, r7
 800e1f4:	612e      	str	r6, [r5, #16]
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	f7ff fd90 	bl	800dd1c <_Bfree>
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e202:	f842 0f04 	str.w	r0, [r2, #4]!
 800e206:	3301      	adds	r3, #1
 800e208:	e7c5      	b.n	800e196 <__lshift+0x4a>
 800e20a:	3904      	subs	r1, #4
 800e20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e210:	f841 2f04 	str.w	r2, [r1, #4]!
 800e214:	459c      	cmp	ip, r3
 800e216:	d8f9      	bhi.n	800e20c <__lshift+0xc0>
 800e218:	e7ea      	b.n	800e1f0 <__lshift+0xa4>
 800e21a:	bf00      	nop
 800e21c:	08011273 	.word	0x08011273
 800e220:	08011284 	.word	0x08011284

0800e224 <__mcmp>:
 800e224:	690a      	ldr	r2, [r1, #16]
 800e226:	4603      	mov	r3, r0
 800e228:	6900      	ldr	r0, [r0, #16]
 800e22a:	1a80      	subs	r0, r0, r2
 800e22c:	b530      	push	{r4, r5, lr}
 800e22e:	d10e      	bne.n	800e24e <__mcmp+0x2a>
 800e230:	3314      	adds	r3, #20
 800e232:	3114      	adds	r1, #20
 800e234:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e238:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e23c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e244:	4295      	cmp	r5, r2
 800e246:	d003      	beq.n	800e250 <__mcmp+0x2c>
 800e248:	d205      	bcs.n	800e256 <__mcmp+0x32>
 800e24a:	f04f 30ff 	mov.w	r0, #4294967295
 800e24e:	bd30      	pop	{r4, r5, pc}
 800e250:	42a3      	cmp	r3, r4
 800e252:	d3f3      	bcc.n	800e23c <__mcmp+0x18>
 800e254:	e7fb      	b.n	800e24e <__mcmp+0x2a>
 800e256:	2001      	movs	r0, #1
 800e258:	e7f9      	b.n	800e24e <__mcmp+0x2a>
	...

0800e25c <__mdiff>:
 800e25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e260:	4689      	mov	r9, r1
 800e262:	4606      	mov	r6, r0
 800e264:	4611      	mov	r1, r2
 800e266:	4648      	mov	r0, r9
 800e268:	4614      	mov	r4, r2
 800e26a:	f7ff ffdb 	bl	800e224 <__mcmp>
 800e26e:	1e05      	subs	r5, r0, #0
 800e270:	d112      	bne.n	800e298 <__mdiff+0x3c>
 800e272:	4629      	mov	r1, r5
 800e274:	4630      	mov	r0, r6
 800e276:	f7ff fd11 	bl	800dc9c <_Balloc>
 800e27a:	4602      	mov	r2, r0
 800e27c:	b928      	cbnz	r0, 800e28a <__mdiff+0x2e>
 800e27e:	4b3f      	ldr	r3, [pc, #252]	@ (800e37c <__mdiff+0x120>)
 800e280:	f240 2137 	movw	r1, #567	@ 0x237
 800e284:	483e      	ldr	r0, [pc, #248]	@ (800e380 <__mdiff+0x124>)
 800e286:	f7fd fcdf 	bl	800bc48 <__assert_func>
 800e28a:	2301      	movs	r3, #1
 800e28c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e290:	4610      	mov	r0, r2
 800e292:	b003      	add	sp, #12
 800e294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e298:	bfbc      	itt	lt
 800e29a:	464b      	movlt	r3, r9
 800e29c:	46a1      	movlt	r9, r4
 800e29e:	4630      	mov	r0, r6
 800e2a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e2a4:	bfba      	itte	lt
 800e2a6:	461c      	movlt	r4, r3
 800e2a8:	2501      	movlt	r5, #1
 800e2aa:	2500      	movge	r5, #0
 800e2ac:	f7ff fcf6 	bl	800dc9c <_Balloc>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	b918      	cbnz	r0, 800e2bc <__mdiff+0x60>
 800e2b4:	4b31      	ldr	r3, [pc, #196]	@ (800e37c <__mdiff+0x120>)
 800e2b6:	f240 2145 	movw	r1, #581	@ 0x245
 800e2ba:	e7e3      	b.n	800e284 <__mdiff+0x28>
 800e2bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e2c0:	6926      	ldr	r6, [r4, #16]
 800e2c2:	60c5      	str	r5, [r0, #12]
 800e2c4:	f109 0310 	add.w	r3, r9, #16
 800e2c8:	f109 0514 	add.w	r5, r9, #20
 800e2cc:	f104 0e14 	add.w	lr, r4, #20
 800e2d0:	f100 0b14 	add.w	fp, r0, #20
 800e2d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e2d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	46d9      	mov	r9, fp
 800e2e0:	f04f 0c00 	mov.w	ip, #0
 800e2e4:	9b01      	ldr	r3, [sp, #4]
 800e2e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e2ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e2ee:	9301      	str	r3, [sp, #4]
 800e2f0:	fa1f f38a 	uxth.w	r3, sl
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	b283      	uxth	r3, r0
 800e2f8:	1acb      	subs	r3, r1, r3
 800e2fa:	0c00      	lsrs	r0, r0, #16
 800e2fc:	4463      	add	r3, ip
 800e2fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e302:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e306:	b29b      	uxth	r3, r3
 800e308:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e30c:	4576      	cmp	r6, lr
 800e30e:	f849 3b04 	str.w	r3, [r9], #4
 800e312:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e316:	d8e5      	bhi.n	800e2e4 <__mdiff+0x88>
 800e318:	1b33      	subs	r3, r6, r4
 800e31a:	3b15      	subs	r3, #21
 800e31c:	f023 0303 	bic.w	r3, r3, #3
 800e320:	3415      	adds	r4, #21
 800e322:	3304      	adds	r3, #4
 800e324:	42a6      	cmp	r6, r4
 800e326:	bf38      	it	cc
 800e328:	2304      	movcc	r3, #4
 800e32a:	441d      	add	r5, r3
 800e32c:	445b      	add	r3, fp
 800e32e:	461e      	mov	r6, r3
 800e330:	462c      	mov	r4, r5
 800e332:	4544      	cmp	r4, r8
 800e334:	d30e      	bcc.n	800e354 <__mdiff+0xf8>
 800e336:	f108 0103 	add.w	r1, r8, #3
 800e33a:	1b49      	subs	r1, r1, r5
 800e33c:	f021 0103 	bic.w	r1, r1, #3
 800e340:	3d03      	subs	r5, #3
 800e342:	45a8      	cmp	r8, r5
 800e344:	bf38      	it	cc
 800e346:	2100      	movcc	r1, #0
 800e348:	440b      	add	r3, r1
 800e34a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e34e:	b191      	cbz	r1, 800e376 <__mdiff+0x11a>
 800e350:	6117      	str	r7, [r2, #16]
 800e352:	e79d      	b.n	800e290 <__mdiff+0x34>
 800e354:	f854 1b04 	ldr.w	r1, [r4], #4
 800e358:	46e6      	mov	lr, ip
 800e35a:	0c08      	lsrs	r0, r1, #16
 800e35c:	fa1c fc81 	uxtah	ip, ip, r1
 800e360:	4471      	add	r1, lr
 800e362:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e366:	b289      	uxth	r1, r1
 800e368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e36c:	f846 1b04 	str.w	r1, [r6], #4
 800e370:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e374:	e7dd      	b.n	800e332 <__mdiff+0xd6>
 800e376:	3f01      	subs	r7, #1
 800e378:	e7e7      	b.n	800e34a <__mdiff+0xee>
 800e37a:	bf00      	nop
 800e37c:	08011273 	.word	0x08011273
 800e380:	08011284 	.word	0x08011284

0800e384 <__ulp>:
 800e384:	b082      	sub	sp, #8
 800e386:	ed8d 0b00 	vstr	d0, [sp]
 800e38a:	9a01      	ldr	r2, [sp, #4]
 800e38c:	4b0f      	ldr	r3, [pc, #60]	@ (800e3cc <__ulp+0x48>)
 800e38e:	4013      	ands	r3, r2
 800e390:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e394:	2b00      	cmp	r3, #0
 800e396:	dc08      	bgt.n	800e3aa <__ulp+0x26>
 800e398:	425b      	negs	r3, r3
 800e39a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e39e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e3a2:	da04      	bge.n	800e3ae <__ulp+0x2a>
 800e3a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e3a8:	4113      	asrs	r3, r2
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	e008      	b.n	800e3c0 <__ulp+0x3c>
 800e3ae:	f1a2 0314 	sub.w	r3, r2, #20
 800e3b2:	2b1e      	cmp	r3, #30
 800e3b4:	bfda      	itte	le
 800e3b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e3ba:	40da      	lsrle	r2, r3
 800e3bc:	2201      	movgt	r2, #1
 800e3be:	2300      	movs	r3, #0
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	4610      	mov	r0, r2
 800e3c4:	ec41 0b10 	vmov	d0, r0, r1
 800e3c8:	b002      	add	sp, #8
 800e3ca:	4770      	bx	lr
 800e3cc:	7ff00000 	.word	0x7ff00000

0800e3d0 <__b2d>:
 800e3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d4:	6906      	ldr	r6, [r0, #16]
 800e3d6:	f100 0814 	add.w	r8, r0, #20
 800e3da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e3de:	1f37      	subs	r7, r6, #4
 800e3e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	f7ff fd4b 	bl	800de80 <__hi0bits>
 800e3ea:	f1c0 0320 	rsb	r3, r0, #32
 800e3ee:	280a      	cmp	r0, #10
 800e3f0:	600b      	str	r3, [r1, #0]
 800e3f2:	491b      	ldr	r1, [pc, #108]	@ (800e460 <__b2d+0x90>)
 800e3f4:	dc15      	bgt.n	800e422 <__b2d+0x52>
 800e3f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800e3fa:	fa22 f30c 	lsr.w	r3, r2, ip
 800e3fe:	45b8      	cmp	r8, r7
 800e400:	ea43 0501 	orr.w	r5, r3, r1
 800e404:	bf34      	ite	cc
 800e406:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e40a:	2300      	movcs	r3, #0
 800e40c:	3015      	adds	r0, #21
 800e40e:	fa02 f000 	lsl.w	r0, r2, r0
 800e412:	fa23 f30c 	lsr.w	r3, r3, ip
 800e416:	4303      	orrs	r3, r0
 800e418:	461c      	mov	r4, r3
 800e41a:	ec45 4b10 	vmov	d0, r4, r5
 800e41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e422:	45b8      	cmp	r8, r7
 800e424:	bf3a      	itte	cc
 800e426:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e42a:	f1a6 0708 	subcc.w	r7, r6, #8
 800e42e:	2300      	movcs	r3, #0
 800e430:	380b      	subs	r0, #11
 800e432:	d012      	beq.n	800e45a <__b2d+0x8a>
 800e434:	f1c0 0120 	rsb	r1, r0, #32
 800e438:	fa23 f401 	lsr.w	r4, r3, r1
 800e43c:	4082      	lsls	r2, r0
 800e43e:	4322      	orrs	r2, r4
 800e440:	4547      	cmp	r7, r8
 800e442:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e446:	bf8c      	ite	hi
 800e448:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e44c:	2200      	movls	r2, #0
 800e44e:	4083      	lsls	r3, r0
 800e450:	40ca      	lsrs	r2, r1
 800e452:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e456:	4313      	orrs	r3, r2
 800e458:	e7de      	b.n	800e418 <__b2d+0x48>
 800e45a:	ea42 0501 	orr.w	r5, r2, r1
 800e45e:	e7db      	b.n	800e418 <__b2d+0x48>
 800e460:	3ff00000 	.word	0x3ff00000

0800e464 <__d2b>:
 800e464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e468:	460f      	mov	r7, r1
 800e46a:	2101      	movs	r1, #1
 800e46c:	ec59 8b10 	vmov	r8, r9, d0
 800e470:	4616      	mov	r6, r2
 800e472:	f7ff fc13 	bl	800dc9c <_Balloc>
 800e476:	4604      	mov	r4, r0
 800e478:	b930      	cbnz	r0, 800e488 <__d2b+0x24>
 800e47a:	4602      	mov	r2, r0
 800e47c:	4b23      	ldr	r3, [pc, #140]	@ (800e50c <__d2b+0xa8>)
 800e47e:	4824      	ldr	r0, [pc, #144]	@ (800e510 <__d2b+0xac>)
 800e480:	f240 310f 	movw	r1, #783	@ 0x30f
 800e484:	f7fd fbe0 	bl	800bc48 <__assert_func>
 800e488:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e48c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e490:	b10d      	cbz	r5, 800e496 <__d2b+0x32>
 800e492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e496:	9301      	str	r3, [sp, #4]
 800e498:	f1b8 0300 	subs.w	r3, r8, #0
 800e49c:	d023      	beq.n	800e4e6 <__d2b+0x82>
 800e49e:	4668      	mov	r0, sp
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	f7ff fd0c 	bl	800debe <__lo0bits>
 800e4a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e4aa:	b1d0      	cbz	r0, 800e4e2 <__d2b+0x7e>
 800e4ac:	f1c0 0320 	rsb	r3, r0, #32
 800e4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4b4:	430b      	orrs	r3, r1
 800e4b6:	40c2      	lsrs	r2, r0
 800e4b8:	6163      	str	r3, [r4, #20]
 800e4ba:	9201      	str	r2, [sp, #4]
 800e4bc:	9b01      	ldr	r3, [sp, #4]
 800e4be:	61a3      	str	r3, [r4, #24]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	bf0c      	ite	eq
 800e4c4:	2201      	moveq	r2, #1
 800e4c6:	2202      	movne	r2, #2
 800e4c8:	6122      	str	r2, [r4, #16]
 800e4ca:	b1a5      	cbz	r5, 800e4f6 <__d2b+0x92>
 800e4cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e4d0:	4405      	add	r5, r0
 800e4d2:	603d      	str	r5, [r7, #0]
 800e4d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e4d8:	6030      	str	r0, [r6, #0]
 800e4da:	4620      	mov	r0, r4
 800e4dc:	b003      	add	sp, #12
 800e4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4e2:	6161      	str	r1, [r4, #20]
 800e4e4:	e7ea      	b.n	800e4bc <__d2b+0x58>
 800e4e6:	a801      	add	r0, sp, #4
 800e4e8:	f7ff fce9 	bl	800debe <__lo0bits>
 800e4ec:	9b01      	ldr	r3, [sp, #4]
 800e4ee:	6163      	str	r3, [r4, #20]
 800e4f0:	3020      	adds	r0, #32
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	e7e8      	b.n	800e4c8 <__d2b+0x64>
 800e4f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e4fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e4fe:	6038      	str	r0, [r7, #0]
 800e500:	6918      	ldr	r0, [r3, #16]
 800e502:	f7ff fcbd 	bl	800de80 <__hi0bits>
 800e506:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e50a:	e7e5      	b.n	800e4d8 <__d2b+0x74>
 800e50c:	08011273 	.word	0x08011273
 800e510:	08011284 	.word	0x08011284

0800e514 <__ratio>:
 800e514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e518:	b085      	sub	sp, #20
 800e51a:	e9cd 1000 	strd	r1, r0, [sp]
 800e51e:	a902      	add	r1, sp, #8
 800e520:	f7ff ff56 	bl	800e3d0 <__b2d>
 800e524:	9800      	ldr	r0, [sp, #0]
 800e526:	a903      	add	r1, sp, #12
 800e528:	ec55 4b10 	vmov	r4, r5, d0
 800e52c:	f7ff ff50 	bl	800e3d0 <__b2d>
 800e530:	9b01      	ldr	r3, [sp, #4]
 800e532:	6919      	ldr	r1, [r3, #16]
 800e534:	9b00      	ldr	r3, [sp, #0]
 800e536:	691b      	ldr	r3, [r3, #16]
 800e538:	1ac9      	subs	r1, r1, r3
 800e53a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e53e:	1a9b      	subs	r3, r3, r2
 800e540:	ec5b ab10 	vmov	sl, fp, d0
 800e544:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e548:	2b00      	cmp	r3, #0
 800e54a:	bfce      	itee	gt
 800e54c:	462a      	movgt	r2, r5
 800e54e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e552:	465a      	movle	r2, fp
 800e554:	462f      	mov	r7, r5
 800e556:	46d9      	mov	r9, fp
 800e558:	bfcc      	ite	gt
 800e55a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e55e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e562:	464b      	mov	r3, r9
 800e564:	4652      	mov	r2, sl
 800e566:	4620      	mov	r0, r4
 800e568:	4639      	mov	r1, r7
 800e56a:	f7f2 f997 	bl	800089c <__aeabi_ddiv>
 800e56e:	ec41 0b10 	vmov	d0, r0, r1
 800e572:	b005      	add	sp, #20
 800e574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e578 <__copybits>:
 800e578:	3901      	subs	r1, #1
 800e57a:	b570      	push	{r4, r5, r6, lr}
 800e57c:	1149      	asrs	r1, r1, #5
 800e57e:	6914      	ldr	r4, [r2, #16]
 800e580:	3101      	adds	r1, #1
 800e582:	f102 0314 	add.w	r3, r2, #20
 800e586:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e58a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e58e:	1f05      	subs	r5, r0, #4
 800e590:	42a3      	cmp	r3, r4
 800e592:	d30c      	bcc.n	800e5ae <__copybits+0x36>
 800e594:	1aa3      	subs	r3, r4, r2
 800e596:	3b11      	subs	r3, #17
 800e598:	f023 0303 	bic.w	r3, r3, #3
 800e59c:	3211      	adds	r2, #17
 800e59e:	42a2      	cmp	r2, r4
 800e5a0:	bf88      	it	hi
 800e5a2:	2300      	movhi	r3, #0
 800e5a4:	4418      	add	r0, r3
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	4288      	cmp	r0, r1
 800e5aa:	d305      	bcc.n	800e5b8 <__copybits+0x40>
 800e5ac:	bd70      	pop	{r4, r5, r6, pc}
 800e5ae:	f853 6b04 	ldr.w	r6, [r3], #4
 800e5b2:	f845 6f04 	str.w	r6, [r5, #4]!
 800e5b6:	e7eb      	b.n	800e590 <__copybits+0x18>
 800e5b8:	f840 3b04 	str.w	r3, [r0], #4
 800e5bc:	e7f4      	b.n	800e5a8 <__copybits+0x30>

0800e5be <__any_on>:
 800e5be:	f100 0214 	add.w	r2, r0, #20
 800e5c2:	6900      	ldr	r0, [r0, #16]
 800e5c4:	114b      	asrs	r3, r1, #5
 800e5c6:	4298      	cmp	r0, r3
 800e5c8:	b510      	push	{r4, lr}
 800e5ca:	db11      	blt.n	800e5f0 <__any_on+0x32>
 800e5cc:	dd0a      	ble.n	800e5e4 <__any_on+0x26>
 800e5ce:	f011 011f 	ands.w	r1, r1, #31
 800e5d2:	d007      	beq.n	800e5e4 <__any_on+0x26>
 800e5d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e5d8:	fa24 f001 	lsr.w	r0, r4, r1
 800e5dc:	fa00 f101 	lsl.w	r1, r0, r1
 800e5e0:	428c      	cmp	r4, r1
 800e5e2:	d10b      	bne.n	800e5fc <__any_on+0x3e>
 800e5e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d803      	bhi.n	800e5f4 <__any_on+0x36>
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	bd10      	pop	{r4, pc}
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	e7f7      	b.n	800e5e4 <__any_on+0x26>
 800e5f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5f8:	2900      	cmp	r1, #0
 800e5fa:	d0f5      	beq.n	800e5e8 <__any_on+0x2a>
 800e5fc:	2001      	movs	r0, #1
 800e5fe:	e7f6      	b.n	800e5ee <__any_on+0x30>

0800e600 <sulp>:
 800e600:	b570      	push	{r4, r5, r6, lr}
 800e602:	4604      	mov	r4, r0
 800e604:	460d      	mov	r5, r1
 800e606:	ec45 4b10 	vmov	d0, r4, r5
 800e60a:	4616      	mov	r6, r2
 800e60c:	f7ff feba 	bl	800e384 <__ulp>
 800e610:	ec51 0b10 	vmov	r0, r1, d0
 800e614:	b17e      	cbz	r6, 800e636 <sulp+0x36>
 800e616:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e61a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e61e:	2b00      	cmp	r3, #0
 800e620:	dd09      	ble.n	800e636 <sulp+0x36>
 800e622:	051b      	lsls	r3, r3, #20
 800e624:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e628:	2400      	movs	r4, #0
 800e62a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e62e:	4622      	mov	r2, r4
 800e630:	462b      	mov	r3, r5
 800e632:	f7f2 f809 	bl	8000648 <__aeabi_dmul>
 800e636:	ec41 0b10 	vmov	d0, r0, r1
 800e63a:	bd70      	pop	{r4, r5, r6, pc}
 800e63c:	0000      	movs	r0, r0
	...

0800e640 <_strtod_l>:
 800e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	b09f      	sub	sp, #124	@ 0x7c
 800e646:	460c      	mov	r4, r1
 800e648:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e64a:	2200      	movs	r2, #0
 800e64c:	921a      	str	r2, [sp, #104]	@ 0x68
 800e64e:	9005      	str	r0, [sp, #20]
 800e650:	f04f 0a00 	mov.w	sl, #0
 800e654:	f04f 0b00 	mov.w	fp, #0
 800e658:	460a      	mov	r2, r1
 800e65a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e65c:	7811      	ldrb	r1, [r2, #0]
 800e65e:	292b      	cmp	r1, #43	@ 0x2b
 800e660:	d04a      	beq.n	800e6f8 <_strtod_l+0xb8>
 800e662:	d838      	bhi.n	800e6d6 <_strtod_l+0x96>
 800e664:	290d      	cmp	r1, #13
 800e666:	d832      	bhi.n	800e6ce <_strtod_l+0x8e>
 800e668:	2908      	cmp	r1, #8
 800e66a:	d832      	bhi.n	800e6d2 <_strtod_l+0x92>
 800e66c:	2900      	cmp	r1, #0
 800e66e:	d03b      	beq.n	800e6e8 <_strtod_l+0xa8>
 800e670:	2200      	movs	r2, #0
 800e672:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e674:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e676:	782a      	ldrb	r2, [r5, #0]
 800e678:	2a30      	cmp	r2, #48	@ 0x30
 800e67a:	f040 80b3 	bne.w	800e7e4 <_strtod_l+0x1a4>
 800e67e:	786a      	ldrb	r2, [r5, #1]
 800e680:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e684:	2a58      	cmp	r2, #88	@ 0x58
 800e686:	d16e      	bne.n	800e766 <_strtod_l+0x126>
 800e688:	9302      	str	r3, [sp, #8]
 800e68a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e68c:	9301      	str	r3, [sp, #4]
 800e68e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	4a8e      	ldr	r2, [pc, #568]	@ (800e8cc <_strtod_l+0x28c>)
 800e694:	9805      	ldr	r0, [sp, #20]
 800e696:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e698:	a919      	add	r1, sp, #100	@ 0x64
 800e69a:	f001 faa9 	bl	800fbf0 <__gethex>
 800e69e:	f010 060f 	ands.w	r6, r0, #15
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	d005      	beq.n	800e6b2 <_strtod_l+0x72>
 800e6a6:	2e06      	cmp	r6, #6
 800e6a8:	d128      	bne.n	800e6fc <_strtod_l+0xbc>
 800e6aa:	3501      	adds	r5, #1
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800e6b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f040 858e 	bne.w	800f1d6 <_strtod_l+0xb96>
 800e6ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6bc:	b1cb      	cbz	r3, 800e6f2 <_strtod_l+0xb2>
 800e6be:	4652      	mov	r2, sl
 800e6c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e6c4:	ec43 2b10 	vmov	d0, r2, r3
 800e6c8:	b01f      	add	sp, #124	@ 0x7c
 800e6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ce:	2920      	cmp	r1, #32
 800e6d0:	d1ce      	bne.n	800e670 <_strtod_l+0x30>
 800e6d2:	3201      	adds	r2, #1
 800e6d4:	e7c1      	b.n	800e65a <_strtod_l+0x1a>
 800e6d6:	292d      	cmp	r1, #45	@ 0x2d
 800e6d8:	d1ca      	bne.n	800e670 <_strtod_l+0x30>
 800e6da:	2101      	movs	r1, #1
 800e6dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e6de:	1c51      	adds	r1, r2, #1
 800e6e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800e6e2:	7852      	ldrb	r2, [r2, #1]
 800e6e4:	2a00      	cmp	r2, #0
 800e6e6:	d1c5      	bne.n	800e674 <_strtod_l+0x34>
 800e6e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e6ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f040 8570 	bne.w	800f1d2 <_strtod_l+0xb92>
 800e6f2:	4652      	mov	r2, sl
 800e6f4:	465b      	mov	r3, fp
 800e6f6:	e7e5      	b.n	800e6c4 <_strtod_l+0x84>
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	e7ef      	b.n	800e6dc <_strtod_l+0x9c>
 800e6fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e6fe:	b13a      	cbz	r2, 800e710 <_strtod_l+0xd0>
 800e700:	2135      	movs	r1, #53	@ 0x35
 800e702:	a81c      	add	r0, sp, #112	@ 0x70
 800e704:	f7ff ff38 	bl	800e578 <__copybits>
 800e708:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e70a:	9805      	ldr	r0, [sp, #20]
 800e70c:	f7ff fb06 	bl	800dd1c <_Bfree>
 800e710:	3e01      	subs	r6, #1
 800e712:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e714:	2e04      	cmp	r6, #4
 800e716:	d806      	bhi.n	800e726 <_strtod_l+0xe6>
 800e718:	e8df f006 	tbb	[pc, r6]
 800e71c:	201d0314 	.word	0x201d0314
 800e720:	14          	.byte	0x14
 800e721:	00          	.byte	0x00
 800e722:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e726:	05e1      	lsls	r1, r4, #23
 800e728:	bf48      	it	mi
 800e72a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e72e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e732:	0d1b      	lsrs	r3, r3, #20
 800e734:	051b      	lsls	r3, r3, #20
 800e736:	2b00      	cmp	r3, #0
 800e738:	d1bb      	bne.n	800e6b2 <_strtod_l+0x72>
 800e73a:	f7fe fbd7 	bl	800ceec <__errno>
 800e73e:	2322      	movs	r3, #34	@ 0x22
 800e740:	6003      	str	r3, [r0, #0]
 800e742:	e7b6      	b.n	800e6b2 <_strtod_l+0x72>
 800e744:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e748:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e74c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e750:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e754:	e7e7      	b.n	800e726 <_strtod_l+0xe6>
 800e756:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e8d4 <_strtod_l+0x294>
 800e75a:	e7e4      	b.n	800e726 <_strtod_l+0xe6>
 800e75c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e760:	f04f 3aff 	mov.w	sl, #4294967295
 800e764:	e7df      	b.n	800e726 <_strtod_l+0xe6>
 800e766:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e768:	1c5a      	adds	r2, r3, #1
 800e76a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e76c:	785b      	ldrb	r3, [r3, #1]
 800e76e:	2b30      	cmp	r3, #48	@ 0x30
 800e770:	d0f9      	beq.n	800e766 <_strtod_l+0x126>
 800e772:	2b00      	cmp	r3, #0
 800e774:	d09d      	beq.n	800e6b2 <_strtod_l+0x72>
 800e776:	2301      	movs	r3, #1
 800e778:	9309      	str	r3, [sp, #36]	@ 0x24
 800e77a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e77c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e77e:	2300      	movs	r3, #0
 800e780:	9308      	str	r3, [sp, #32]
 800e782:	930a      	str	r3, [sp, #40]	@ 0x28
 800e784:	461f      	mov	r7, r3
 800e786:	220a      	movs	r2, #10
 800e788:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e78a:	7805      	ldrb	r5, [r0, #0]
 800e78c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e790:	b2d9      	uxtb	r1, r3
 800e792:	2909      	cmp	r1, #9
 800e794:	d928      	bls.n	800e7e8 <_strtod_l+0x1a8>
 800e796:	494e      	ldr	r1, [pc, #312]	@ (800e8d0 <_strtod_l+0x290>)
 800e798:	2201      	movs	r2, #1
 800e79a:	f001 f991 	bl	800fac0 <strncmp>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d032      	beq.n	800e808 <_strtod_l+0x1c8>
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	462a      	mov	r2, r5
 800e7a6:	4681      	mov	r9, r0
 800e7a8:	463d      	mov	r5, r7
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2a65      	cmp	r2, #101	@ 0x65
 800e7ae:	d001      	beq.n	800e7b4 <_strtod_l+0x174>
 800e7b0:	2a45      	cmp	r2, #69	@ 0x45
 800e7b2:	d114      	bne.n	800e7de <_strtod_l+0x19e>
 800e7b4:	b91d      	cbnz	r5, 800e7be <_strtod_l+0x17e>
 800e7b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7b8:	4302      	orrs	r2, r0
 800e7ba:	d095      	beq.n	800e6e8 <_strtod_l+0xa8>
 800e7bc:	2500      	movs	r5, #0
 800e7be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e7c0:	1c62      	adds	r2, r4, #1
 800e7c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e7c4:	7862      	ldrb	r2, [r4, #1]
 800e7c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800e7c8:	d077      	beq.n	800e8ba <_strtod_l+0x27a>
 800e7ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800e7cc:	d07b      	beq.n	800e8c6 <_strtod_l+0x286>
 800e7ce:	f04f 0c00 	mov.w	ip, #0
 800e7d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e7d6:	2909      	cmp	r1, #9
 800e7d8:	f240 8082 	bls.w	800e8e0 <_strtod_l+0x2a0>
 800e7dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800e7de:	f04f 0800 	mov.w	r8, #0
 800e7e2:	e0a2      	b.n	800e92a <_strtod_l+0x2ea>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	e7c7      	b.n	800e778 <_strtod_l+0x138>
 800e7e8:	2f08      	cmp	r7, #8
 800e7ea:	bfd5      	itete	le
 800e7ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e7ee:	9908      	ldrgt	r1, [sp, #32]
 800e7f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e7f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e7f8:	f100 0001 	add.w	r0, r0, #1
 800e7fc:	bfd4      	ite	le
 800e7fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e800:	9308      	strgt	r3, [sp, #32]
 800e802:	3701      	adds	r7, #1
 800e804:	9019      	str	r0, [sp, #100]	@ 0x64
 800e806:	e7bf      	b.n	800e788 <_strtod_l+0x148>
 800e808:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e80e:	785a      	ldrb	r2, [r3, #1]
 800e810:	b37f      	cbz	r7, 800e872 <_strtod_l+0x232>
 800e812:	4681      	mov	r9, r0
 800e814:	463d      	mov	r5, r7
 800e816:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e81a:	2b09      	cmp	r3, #9
 800e81c:	d912      	bls.n	800e844 <_strtod_l+0x204>
 800e81e:	2301      	movs	r3, #1
 800e820:	e7c4      	b.n	800e7ac <_strtod_l+0x16c>
 800e822:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e824:	1c5a      	adds	r2, r3, #1
 800e826:	9219      	str	r2, [sp, #100]	@ 0x64
 800e828:	785a      	ldrb	r2, [r3, #1]
 800e82a:	3001      	adds	r0, #1
 800e82c:	2a30      	cmp	r2, #48	@ 0x30
 800e82e:	d0f8      	beq.n	800e822 <_strtod_l+0x1e2>
 800e830:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e834:	2b08      	cmp	r3, #8
 800e836:	f200 84d3 	bhi.w	800f1e0 <_strtod_l+0xba0>
 800e83a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e83c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e83e:	4681      	mov	r9, r0
 800e840:	2000      	movs	r0, #0
 800e842:	4605      	mov	r5, r0
 800e844:	3a30      	subs	r2, #48	@ 0x30
 800e846:	f100 0301 	add.w	r3, r0, #1
 800e84a:	d02a      	beq.n	800e8a2 <_strtod_l+0x262>
 800e84c:	4499      	add	r9, r3
 800e84e:	eb00 0c05 	add.w	ip, r0, r5
 800e852:	462b      	mov	r3, r5
 800e854:	210a      	movs	r1, #10
 800e856:	4563      	cmp	r3, ip
 800e858:	d10d      	bne.n	800e876 <_strtod_l+0x236>
 800e85a:	1c69      	adds	r1, r5, #1
 800e85c:	4401      	add	r1, r0
 800e85e:	4428      	add	r0, r5
 800e860:	2808      	cmp	r0, #8
 800e862:	dc16      	bgt.n	800e892 <_strtod_l+0x252>
 800e864:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e866:	230a      	movs	r3, #10
 800e868:	fb03 2300 	mla	r3, r3, r0, r2
 800e86c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e86e:	2300      	movs	r3, #0
 800e870:	e018      	b.n	800e8a4 <_strtod_l+0x264>
 800e872:	4638      	mov	r0, r7
 800e874:	e7da      	b.n	800e82c <_strtod_l+0x1ec>
 800e876:	2b08      	cmp	r3, #8
 800e878:	f103 0301 	add.w	r3, r3, #1
 800e87c:	dc03      	bgt.n	800e886 <_strtod_l+0x246>
 800e87e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e880:	434e      	muls	r6, r1
 800e882:	960a      	str	r6, [sp, #40]	@ 0x28
 800e884:	e7e7      	b.n	800e856 <_strtod_l+0x216>
 800e886:	2b10      	cmp	r3, #16
 800e888:	bfde      	ittt	le
 800e88a:	9e08      	ldrle	r6, [sp, #32]
 800e88c:	434e      	mulle	r6, r1
 800e88e:	9608      	strle	r6, [sp, #32]
 800e890:	e7e1      	b.n	800e856 <_strtod_l+0x216>
 800e892:	280f      	cmp	r0, #15
 800e894:	dceb      	bgt.n	800e86e <_strtod_l+0x22e>
 800e896:	9808      	ldr	r0, [sp, #32]
 800e898:	230a      	movs	r3, #10
 800e89a:	fb03 2300 	mla	r3, r3, r0, r2
 800e89e:	9308      	str	r3, [sp, #32]
 800e8a0:	e7e5      	b.n	800e86e <_strtod_l+0x22e>
 800e8a2:	4629      	mov	r1, r5
 800e8a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e8a6:	1c50      	adds	r0, r2, #1
 800e8a8:	9019      	str	r0, [sp, #100]	@ 0x64
 800e8aa:	7852      	ldrb	r2, [r2, #1]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	460d      	mov	r5, r1
 800e8b0:	e7b1      	b.n	800e816 <_strtod_l+0x1d6>
 800e8b2:	f04f 0900 	mov.w	r9, #0
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e77d      	b.n	800e7b6 <_strtod_l+0x176>
 800e8ba:	f04f 0c00 	mov.w	ip, #0
 800e8be:	1ca2      	adds	r2, r4, #2
 800e8c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8c2:	78a2      	ldrb	r2, [r4, #2]
 800e8c4:	e785      	b.n	800e7d2 <_strtod_l+0x192>
 800e8c6:	f04f 0c01 	mov.w	ip, #1
 800e8ca:	e7f8      	b.n	800e8be <_strtod_l+0x27e>
 800e8cc:	080113f8 	.word	0x080113f8
 800e8d0:	080113e0 	.word	0x080113e0
 800e8d4:	7ff00000 	.word	0x7ff00000
 800e8d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e8da:	1c51      	adds	r1, r2, #1
 800e8dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e8de:	7852      	ldrb	r2, [r2, #1]
 800e8e0:	2a30      	cmp	r2, #48	@ 0x30
 800e8e2:	d0f9      	beq.n	800e8d8 <_strtod_l+0x298>
 800e8e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e8e8:	2908      	cmp	r1, #8
 800e8ea:	f63f af78 	bhi.w	800e7de <_strtod_l+0x19e>
 800e8ee:	3a30      	subs	r2, #48	@ 0x30
 800e8f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e8f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e8f6:	f04f 080a 	mov.w	r8, #10
 800e8fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e8fc:	1c56      	adds	r6, r2, #1
 800e8fe:	9619      	str	r6, [sp, #100]	@ 0x64
 800e900:	7852      	ldrb	r2, [r2, #1]
 800e902:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e906:	f1be 0f09 	cmp.w	lr, #9
 800e90a:	d939      	bls.n	800e980 <_strtod_l+0x340>
 800e90c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e90e:	1a76      	subs	r6, r6, r1
 800e910:	2e08      	cmp	r6, #8
 800e912:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e916:	dc03      	bgt.n	800e920 <_strtod_l+0x2e0>
 800e918:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e91a:	4588      	cmp	r8, r1
 800e91c:	bfa8      	it	ge
 800e91e:	4688      	movge	r8, r1
 800e920:	f1bc 0f00 	cmp.w	ip, #0
 800e924:	d001      	beq.n	800e92a <_strtod_l+0x2ea>
 800e926:	f1c8 0800 	rsb	r8, r8, #0
 800e92a:	2d00      	cmp	r5, #0
 800e92c:	d14e      	bne.n	800e9cc <_strtod_l+0x38c>
 800e92e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e930:	4308      	orrs	r0, r1
 800e932:	f47f aebe 	bne.w	800e6b2 <_strtod_l+0x72>
 800e936:	2b00      	cmp	r3, #0
 800e938:	f47f aed6 	bne.w	800e6e8 <_strtod_l+0xa8>
 800e93c:	2a69      	cmp	r2, #105	@ 0x69
 800e93e:	d028      	beq.n	800e992 <_strtod_l+0x352>
 800e940:	dc25      	bgt.n	800e98e <_strtod_l+0x34e>
 800e942:	2a49      	cmp	r2, #73	@ 0x49
 800e944:	d025      	beq.n	800e992 <_strtod_l+0x352>
 800e946:	2a4e      	cmp	r2, #78	@ 0x4e
 800e948:	f47f aece 	bne.w	800e6e8 <_strtod_l+0xa8>
 800e94c:	499b      	ldr	r1, [pc, #620]	@ (800ebbc <_strtod_l+0x57c>)
 800e94e:	a819      	add	r0, sp, #100	@ 0x64
 800e950:	f001 fb70 	bl	8010034 <__match>
 800e954:	2800      	cmp	r0, #0
 800e956:	f43f aec7 	beq.w	800e6e8 <_strtod_l+0xa8>
 800e95a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	2b28      	cmp	r3, #40	@ 0x28
 800e960:	d12e      	bne.n	800e9c0 <_strtod_l+0x380>
 800e962:	4997      	ldr	r1, [pc, #604]	@ (800ebc0 <_strtod_l+0x580>)
 800e964:	aa1c      	add	r2, sp, #112	@ 0x70
 800e966:	a819      	add	r0, sp, #100	@ 0x64
 800e968:	f001 fb78 	bl	801005c <__hexnan>
 800e96c:	2805      	cmp	r0, #5
 800e96e:	d127      	bne.n	800e9c0 <_strtod_l+0x380>
 800e970:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e972:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e976:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e97a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e97e:	e698      	b.n	800e6b2 <_strtod_l+0x72>
 800e980:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e982:	fb08 2101 	mla	r1, r8, r1, r2
 800e986:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e98a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e98c:	e7b5      	b.n	800e8fa <_strtod_l+0x2ba>
 800e98e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e990:	e7da      	b.n	800e948 <_strtod_l+0x308>
 800e992:	498c      	ldr	r1, [pc, #560]	@ (800ebc4 <_strtod_l+0x584>)
 800e994:	a819      	add	r0, sp, #100	@ 0x64
 800e996:	f001 fb4d 	bl	8010034 <__match>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	f43f aea4 	beq.w	800e6e8 <_strtod_l+0xa8>
 800e9a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9a2:	4989      	ldr	r1, [pc, #548]	@ (800ebc8 <_strtod_l+0x588>)
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	a819      	add	r0, sp, #100	@ 0x64
 800e9a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800e9aa:	f001 fb43 	bl	8010034 <__match>
 800e9ae:	b910      	cbnz	r0, 800e9b6 <_strtod_l+0x376>
 800e9b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e9b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ebd8 <_strtod_l+0x598>
 800e9ba:	f04f 0a00 	mov.w	sl, #0
 800e9be:	e678      	b.n	800e6b2 <_strtod_l+0x72>
 800e9c0:	4882      	ldr	r0, [pc, #520]	@ (800ebcc <_strtod_l+0x58c>)
 800e9c2:	f001 f891 	bl	800fae8 <nan>
 800e9c6:	ec5b ab10 	vmov	sl, fp, d0
 800e9ca:	e672      	b.n	800e6b2 <_strtod_l+0x72>
 800e9cc:	eba8 0309 	sub.w	r3, r8, r9
 800e9d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9d4:	2f00      	cmp	r7, #0
 800e9d6:	bf08      	it	eq
 800e9d8:	462f      	moveq	r7, r5
 800e9da:	2d10      	cmp	r5, #16
 800e9dc:	462c      	mov	r4, r5
 800e9de:	bfa8      	it	ge
 800e9e0:	2410      	movge	r4, #16
 800e9e2:	f7f1 fdb7 	bl	8000554 <__aeabi_ui2d>
 800e9e6:	2d09      	cmp	r5, #9
 800e9e8:	4682      	mov	sl, r0
 800e9ea:	468b      	mov	fp, r1
 800e9ec:	dc13      	bgt.n	800ea16 <_strtod_l+0x3d6>
 800e9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f43f ae5e 	beq.w	800e6b2 <_strtod_l+0x72>
 800e9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f8:	dd78      	ble.n	800eaec <_strtod_l+0x4ac>
 800e9fa:	2b16      	cmp	r3, #22
 800e9fc:	dc5f      	bgt.n	800eabe <_strtod_l+0x47e>
 800e9fe:	4974      	ldr	r1, [pc, #464]	@ (800ebd0 <_strtod_l+0x590>)
 800ea00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea08:	4652      	mov	r2, sl
 800ea0a:	465b      	mov	r3, fp
 800ea0c:	f7f1 fe1c 	bl	8000648 <__aeabi_dmul>
 800ea10:	4682      	mov	sl, r0
 800ea12:	468b      	mov	fp, r1
 800ea14:	e64d      	b.n	800e6b2 <_strtod_l+0x72>
 800ea16:	4b6e      	ldr	r3, [pc, #440]	@ (800ebd0 <_strtod_l+0x590>)
 800ea18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ea20:	f7f1 fe12 	bl	8000648 <__aeabi_dmul>
 800ea24:	4682      	mov	sl, r0
 800ea26:	9808      	ldr	r0, [sp, #32]
 800ea28:	468b      	mov	fp, r1
 800ea2a:	f7f1 fd93 	bl	8000554 <__aeabi_ui2d>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	4650      	mov	r0, sl
 800ea34:	4659      	mov	r1, fp
 800ea36:	f7f1 fc51 	bl	80002dc <__adddf3>
 800ea3a:	2d0f      	cmp	r5, #15
 800ea3c:	4682      	mov	sl, r0
 800ea3e:	468b      	mov	fp, r1
 800ea40:	ddd5      	ble.n	800e9ee <_strtod_l+0x3ae>
 800ea42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea44:	1b2c      	subs	r4, r5, r4
 800ea46:	441c      	add	r4, r3
 800ea48:	2c00      	cmp	r4, #0
 800ea4a:	f340 8096 	ble.w	800eb7a <_strtod_l+0x53a>
 800ea4e:	f014 030f 	ands.w	r3, r4, #15
 800ea52:	d00a      	beq.n	800ea6a <_strtod_l+0x42a>
 800ea54:	495e      	ldr	r1, [pc, #376]	@ (800ebd0 <_strtod_l+0x590>)
 800ea56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea5a:	4652      	mov	r2, sl
 800ea5c:	465b      	mov	r3, fp
 800ea5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea62:	f7f1 fdf1 	bl	8000648 <__aeabi_dmul>
 800ea66:	4682      	mov	sl, r0
 800ea68:	468b      	mov	fp, r1
 800ea6a:	f034 040f 	bics.w	r4, r4, #15
 800ea6e:	d073      	beq.n	800eb58 <_strtod_l+0x518>
 800ea70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ea74:	dd48      	ble.n	800eb08 <_strtod_l+0x4c8>
 800ea76:	2400      	movs	r4, #0
 800ea78:	46a0      	mov	r8, r4
 800ea7a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ea7c:	46a1      	mov	r9, r4
 800ea7e:	9a05      	ldr	r2, [sp, #20]
 800ea80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ebd8 <_strtod_l+0x598>
 800ea84:	2322      	movs	r3, #34	@ 0x22
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	f04f 0a00 	mov.w	sl, #0
 800ea8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f43f ae0f 	beq.w	800e6b2 <_strtod_l+0x72>
 800ea94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea96:	9805      	ldr	r0, [sp, #20]
 800ea98:	f7ff f940 	bl	800dd1c <_Bfree>
 800ea9c:	9805      	ldr	r0, [sp, #20]
 800ea9e:	4649      	mov	r1, r9
 800eaa0:	f7ff f93c 	bl	800dd1c <_Bfree>
 800eaa4:	9805      	ldr	r0, [sp, #20]
 800eaa6:	4641      	mov	r1, r8
 800eaa8:	f7ff f938 	bl	800dd1c <_Bfree>
 800eaac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eaae:	9805      	ldr	r0, [sp, #20]
 800eab0:	f7ff f934 	bl	800dd1c <_Bfree>
 800eab4:	9805      	ldr	r0, [sp, #20]
 800eab6:	4621      	mov	r1, r4
 800eab8:	f7ff f930 	bl	800dd1c <_Bfree>
 800eabc:	e5f9      	b.n	800e6b2 <_strtod_l+0x72>
 800eabe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eac0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800eac4:	4293      	cmp	r3, r2
 800eac6:	dbbc      	blt.n	800ea42 <_strtod_l+0x402>
 800eac8:	4c41      	ldr	r4, [pc, #260]	@ (800ebd0 <_strtod_l+0x590>)
 800eaca:	f1c5 050f 	rsb	r5, r5, #15
 800eace:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ead2:	4652      	mov	r2, sl
 800ead4:	465b      	mov	r3, fp
 800ead6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eada:	f7f1 fdb5 	bl	8000648 <__aeabi_dmul>
 800eade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae0:	1b5d      	subs	r5, r3, r5
 800eae2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800eae6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eaea:	e78f      	b.n	800ea0c <_strtod_l+0x3cc>
 800eaec:	3316      	adds	r3, #22
 800eaee:	dba8      	blt.n	800ea42 <_strtod_l+0x402>
 800eaf0:	4b37      	ldr	r3, [pc, #220]	@ (800ebd0 <_strtod_l+0x590>)
 800eaf2:	eba9 0808 	sub.w	r8, r9, r8
 800eaf6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800eafa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800eafe:	4650      	mov	r0, sl
 800eb00:	4659      	mov	r1, fp
 800eb02:	f7f1 fecb 	bl	800089c <__aeabi_ddiv>
 800eb06:	e783      	b.n	800ea10 <_strtod_l+0x3d0>
 800eb08:	4b32      	ldr	r3, [pc, #200]	@ (800ebd4 <_strtod_l+0x594>)
 800eb0a:	9308      	str	r3, [sp, #32]
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	1124      	asrs	r4, r4, #4
 800eb10:	4650      	mov	r0, sl
 800eb12:	4659      	mov	r1, fp
 800eb14:	461e      	mov	r6, r3
 800eb16:	2c01      	cmp	r4, #1
 800eb18:	dc21      	bgt.n	800eb5e <_strtod_l+0x51e>
 800eb1a:	b10b      	cbz	r3, 800eb20 <_strtod_l+0x4e0>
 800eb1c:	4682      	mov	sl, r0
 800eb1e:	468b      	mov	fp, r1
 800eb20:	492c      	ldr	r1, [pc, #176]	@ (800ebd4 <_strtod_l+0x594>)
 800eb22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800eb26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800eb2a:	4652      	mov	r2, sl
 800eb2c:	465b      	mov	r3, fp
 800eb2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb32:	f7f1 fd89 	bl	8000648 <__aeabi_dmul>
 800eb36:	4b28      	ldr	r3, [pc, #160]	@ (800ebd8 <_strtod_l+0x598>)
 800eb38:	460a      	mov	r2, r1
 800eb3a:	400b      	ands	r3, r1
 800eb3c:	4927      	ldr	r1, [pc, #156]	@ (800ebdc <_strtod_l+0x59c>)
 800eb3e:	428b      	cmp	r3, r1
 800eb40:	4682      	mov	sl, r0
 800eb42:	d898      	bhi.n	800ea76 <_strtod_l+0x436>
 800eb44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800eb48:	428b      	cmp	r3, r1
 800eb4a:	bf86      	itte	hi
 800eb4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ebe0 <_strtod_l+0x5a0>
 800eb50:	f04f 3aff 	movhi.w	sl, #4294967295
 800eb54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800eb58:	2300      	movs	r3, #0
 800eb5a:	9308      	str	r3, [sp, #32]
 800eb5c:	e07a      	b.n	800ec54 <_strtod_l+0x614>
 800eb5e:	07e2      	lsls	r2, r4, #31
 800eb60:	d505      	bpl.n	800eb6e <_strtod_l+0x52e>
 800eb62:	9b08      	ldr	r3, [sp, #32]
 800eb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb68:	f7f1 fd6e 	bl	8000648 <__aeabi_dmul>
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	9a08      	ldr	r2, [sp, #32]
 800eb70:	3208      	adds	r2, #8
 800eb72:	3601      	adds	r6, #1
 800eb74:	1064      	asrs	r4, r4, #1
 800eb76:	9208      	str	r2, [sp, #32]
 800eb78:	e7cd      	b.n	800eb16 <_strtod_l+0x4d6>
 800eb7a:	d0ed      	beq.n	800eb58 <_strtod_l+0x518>
 800eb7c:	4264      	negs	r4, r4
 800eb7e:	f014 020f 	ands.w	r2, r4, #15
 800eb82:	d00a      	beq.n	800eb9a <_strtod_l+0x55a>
 800eb84:	4b12      	ldr	r3, [pc, #72]	@ (800ebd0 <_strtod_l+0x590>)
 800eb86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb8a:	4650      	mov	r0, sl
 800eb8c:	4659      	mov	r1, fp
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	f7f1 fe83 	bl	800089c <__aeabi_ddiv>
 800eb96:	4682      	mov	sl, r0
 800eb98:	468b      	mov	fp, r1
 800eb9a:	1124      	asrs	r4, r4, #4
 800eb9c:	d0dc      	beq.n	800eb58 <_strtod_l+0x518>
 800eb9e:	2c1f      	cmp	r4, #31
 800eba0:	dd20      	ble.n	800ebe4 <_strtod_l+0x5a4>
 800eba2:	2400      	movs	r4, #0
 800eba4:	46a0      	mov	r8, r4
 800eba6:	940a      	str	r4, [sp, #40]	@ 0x28
 800eba8:	46a1      	mov	r9, r4
 800ebaa:	9a05      	ldr	r2, [sp, #20]
 800ebac:	2322      	movs	r3, #34	@ 0x22
 800ebae:	f04f 0a00 	mov.w	sl, #0
 800ebb2:	f04f 0b00 	mov.w	fp, #0
 800ebb6:	6013      	str	r3, [r2, #0]
 800ebb8:	e768      	b.n	800ea8c <_strtod_l+0x44c>
 800ebba:	bf00      	nop
 800ebbc:	080111cb 	.word	0x080111cb
 800ebc0:	080113e4 	.word	0x080113e4
 800ebc4:	080111c3 	.word	0x080111c3
 800ebc8:	080111fa 	.word	0x080111fa
 800ebcc:	080111bd 	.word	0x080111bd
 800ebd0:	08011318 	.word	0x08011318
 800ebd4:	080112f0 	.word	0x080112f0
 800ebd8:	7ff00000 	.word	0x7ff00000
 800ebdc:	7ca00000 	.word	0x7ca00000
 800ebe0:	7fefffff 	.word	0x7fefffff
 800ebe4:	f014 0310 	ands.w	r3, r4, #16
 800ebe8:	bf18      	it	ne
 800ebea:	236a      	movne	r3, #106	@ 0x6a
 800ebec:	4ea9      	ldr	r6, [pc, #676]	@ (800ee94 <_strtod_l+0x854>)
 800ebee:	9308      	str	r3, [sp, #32]
 800ebf0:	4650      	mov	r0, sl
 800ebf2:	4659      	mov	r1, fp
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	07e2      	lsls	r2, r4, #31
 800ebf8:	d504      	bpl.n	800ec04 <_strtod_l+0x5c4>
 800ebfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ebfe:	f7f1 fd23 	bl	8000648 <__aeabi_dmul>
 800ec02:	2301      	movs	r3, #1
 800ec04:	1064      	asrs	r4, r4, #1
 800ec06:	f106 0608 	add.w	r6, r6, #8
 800ec0a:	d1f4      	bne.n	800ebf6 <_strtod_l+0x5b6>
 800ec0c:	b10b      	cbz	r3, 800ec12 <_strtod_l+0x5d2>
 800ec0e:	4682      	mov	sl, r0
 800ec10:	468b      	mov	fp, r1
 800ec12:	9b08      	ldr	r3, [sp, #32]
 800ec14:	b1b3      	cbz	r3, 800ec44 <_strtod_l+0x604>
 800ec16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ec1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	4659      	mov	r1, fp
 800ec22:	dd0f      	ble.n	800ec44 <_strtod_l+0x604>
 800ec24:	2b1f      	cmp	r3, #31
 800ec26:	dd55      	ble.n	800ecd4 <_strtod_l+0x694>
 800ec28:	2b34      	cmp	r3, #52	@ 0x34
 800ec2a:	bfde      	ittt	le
 800ec2c:	f04f 33ff 	movle.w	r3, #4294967295
 800ec30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ec34:	4093      	lslle	r3, r2
 800ec36:	f04f 0a00 	mov.w	sl, #0
 800ec3a:	bfcc      	ite	gt
 800ec3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ec40:	ea03 0b01 	andle.w	fp, r3, r1
 800ec44:	2200      	movs	r2, #0
 800ec46:	2300      	movs	r3, #0
 800ec48:	4650      	mov	r0, sl
 800ec4a:	4659      	mov	r1, fp
 800ec4c:	f7f1 ff64 	bl	8000b18 <__aeabi_dcmpeq>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d1a6      	bne.n	800eba2 <_strtod_l+0x562>
 800ec54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ec5a:	9805      	ldr	r0, [sp, #20]
 800ec5c:	462b      	mov	r3, r5
 800ec5e:	463a      	mov	r2, r7
 800ec60:	f7ff f8c4 	bl	800ddec <__s2b>
 800ec64:	900a      	str	r0, [sp, #40]	@ 0x28
 800ec66:	2800      	cmp	r0, #0
 800ec68:	f43f af05 	beq.w	800ea76 <_strtod_l+0x436>
 800ec6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec6e:	2a00      	cmp	r2, #0
 800ec70:	eba9 0308 	sub.w	r3, r9, r8
 800ec74:	bfa8      	it	ge
 800ec76:	2300      	movge	r3, #0
 800ec78:	9312      	str	r3, [sp, #72]	@ 0x48
 800ec7a:	2400      	movs	r4, #0
 800ec7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ec80:	9316      	str	r3, [sp, #88]	@ 0x58
 800ec82:	46a0      	mov	r8, r4
 800ec84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec86:	9805      	ldr	r0, [sp, #20]
 800ec88:	6859      	ldr	r1, [r3, #4]
 800ec8a:	f7ff f807 	bl	800dc9c <_Balloc>
 800ec8e:	4681      	mov	r9, r0
 800ec90:	2800      	cmp	r0, #0
 800ec92:	f43f aef4 	beq.w	800ea7e <_strtod_l+0x43e>
 800ec96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec98:	691a      	ldr	r2, [r3, #16]
 800ec9a:	3202      	adds	r2, #2
 800ec9c:	f103 010c 	add.w	r1, r3, #12
 800eca0:	0092      	lsls	r2, r2, #2
 800eca2:	300c      	adds	r0, #12
 800eca4:	f7fe f94f 	bl	800cf46 <memcpy>
 800eca8:	ec4b ab10 	vmov	d0, sl, fp
 800ecac:	9805      	ldr	r0, [sp, #20]
 800ecae:	aa1c      	add	r2, sp, #112	@ 0x70
 800ecb0:	a91b      	add	r1, sp, #108	@ 0x6c
 800ecb2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ecb6:	f7ff fbd5 	bl	800e464 <__d2b>
 800ecba:	901a      	str	r0, [sp, #104]	@ 0x68
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	f43f aede 	beq.w	800ea7e <_strtod_l+0x43e>
 800ecc2:	9805      	ldr	r0, [sp, #20]
 800ecc4:	2101      	movs	r1, #1
 800ecc6:	f7ff f927 	bl	800df18 <__i2b>
 800ecca:	4680      	mov	r8, r0
 800eccc:	b948      	cbnz	r0, 800ece2 <_strtod_l+0x6a2>
 800ecce:	f04f 0800 	mov.w	r8, #0
 800ecd2:	e6d4      	b.n	800ea7e <_strtod_l+0x43e>
 800ecd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecd8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecdc:	ea03 0a0a 	and.w	sl, r3, sl
 800ece0:	e7b0      	b.n	800ec44 <_strtod_l+0x604>
 800ece2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ece4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ece6:	2d00      	cmp	r5, #0
 800ece8:	bfab      	itete	ge
 800ecea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ecec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ecee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ecf0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ecf2:	bfac      	ite	ge
 800ecf4:	18ef      	addge	r7, r5, r3
 800ecf6:	1b5e      	sublt	r6, r3, r5
 800ecf8:	9b08      	ldr	r3, [sp, #32]
 800ecfa:	1aed      	subs	r5, r5, r3
 800ecfc:	4415      	add	r5, r2
 800ecfe:	4b66      	ldr	r3, [pc, #408]	@ (800ee98 <_strtod_l+0x858>)
 800ed00:	3d01      	subs	r5, #1
 800ed02:	429d      	cmp	r5, r3
 800ed04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ed08:	da50      	bge.n	800edac <_strtod_l+0x76c>
 800ed0a:	1b5b      	subs	r3, r3, r5
 800ed0c:	2b1f      	cmp	r3, #31
 800ed0e:	eba2 0203 	sub.w	r2, r2, r3
 800ed12:	f04f 0101 	mov.w	r1, #1
 800ed16:	dc3d      	bgt.n	800ed94 <_strtod_l+0x754>
 800ed18:	fa01 f303 	lsl.w	r3, r1, r3
 800ed1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ed1e:	2300      	movs	r3, #0
 800ed20:	9310      	str	r3, [sp, #64]	@ 0x40
 800ed22:	18bd      	adds	r5, r7, r2
 800ed24:	9b08      	ldr	r3, [sp, #32]
 800ed26:	42af      	cmp	r7, r5
 800ed28:	4416      	add	r6, r2
 800ed2a:	441e      	add	r6, r3
 800ed2c:	463b      	mov	r3, r7
 800ed2e:	bfa8      	it	ge
 800ed30:	462b      	movge	r3, r5
 800ed32:	42b3      	cmp	r3, r6
 800ed34:	bfa8      	it	ge
 800ed36:	4633      	movge	r3, r6
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	bfc2      	ittt	gt
 800ed3c:	1aed      	subgt	r5, r5, r3
 800ed3e:	1af6      	subgt	r6, r6, r3
 800ed40:	1aff      	subgt	r7, r7, r3
 800ed42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	dd16      	ble.n	800ed76 <_strtod_l+0x736>
 800ed48:	4641      	mov	r1, r8
 800ed4a:	9805      	ldr	r0, [sp, #20]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	f7ff f9a3 	bl	800e098 <__pow5mult>
 800ed52:	4680      	mov	r8, r0
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d0ba      	beq.n	800ecce <_strtod_l+0x68e>
 800ed58:	4601      	mov	r1, r0
 800ed5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ed5c:	9805      	ldr	r0, [sp, #20]
 800ed5e:	f7ff f8f1 	bl	800df44 <__multiply>
 800ed62:	900e      	str	r0, [sp, #56]	@ 0x38
 800ed64:	2800      	cmp	r0, #0
 800ed66:	f43f ae8a 	beq.w	800ea7e <_strtod_l+0x43e>
 800ed6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed6c:	9805      	ldr	r0, [sp, #20]
 800ed6e:	f7fe ffd5 	bl	800dd1c <_Bfree>
 800ed72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed74:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed76:	2d00      	cmp	r5, #0
 800ed78:	dc1d      	bgt.n	800edb6 <_strtod_l+0x776>
 800ed7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	dd23      	ble.n	800edc8 <_strtod_l+0x788>
 800ed80:	4649      	mov	r1, r9
 800ed82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ed84:	9805      	ldr	r0, [sp, #20]
 800ed86:	f7ff f987 	bl	800e098 <__pow5mult>
 800ed8a:	4681      	mov	r9, r0
 800ed8c:	b9e0      	cbnz	r0, 800edc8 <_strtod_l+0x788>
 800ed8e:	f04f 0900 	mov.w	r9, #0
 800ed92:	e674      	b.n	800ea7e <_strtod_l+0x43e>
 800ed94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ed98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ed9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800eda0:	35e2      	adds	r5, #226	@ 0xe2
 800eda2:	fa01 f305 	lsl.w	r3, r1, r5
 800eda6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eda8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800edaa:	e7ba      	b.n	800ed22 <_strtod_l+0x6e2>
 800edac:	2300      	movs	r3, #0
 800edae:	9310      	str	r3, [sp, #64]	@ 0x40
 800edb0:	2301      	movs	r3, #1
 800edb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800edb4:	e7b5      	b.n	800ed22 <_strtod_l+0x6e2>
 800edb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800edb8:	9805      	ldr	r0, [sp, #20]
 800edba:	462a      	mov	r2, r5
 800edbc:	f7ff f9c6 	bl	800e14c <__lshift>
 800edc0:	901a      	str	r0, [sp, #104]	@ 0x68
 800edc2:	2800      	cmp	r0, #0
 800edc4:	d1d9      	bne.n	800ed7a <_strtod_l+0x73a>
 800edc6:	e65a      	b.n	800ea7e <_strtod_l+0x43e>
 800edc8:	2e00      	cmp	r6, #0
 800edca:	dd07      	ble.n	800eddc <_strtod_l+0x79c>
 800edcc:	4649      	mov	r1, r9
 800edce:	9805      	ldr	r0, [sp, #20]
 800edd0:	4632      	mov	r2, r6
 800edd2:	f7ff f9bb 	bl	800e14c <__lshift>
 800edd6:	4681      	mov	r9, r0
 800edd8:	2800      	cmp	r0, #0
 800edda:	d0d8      	beq.n	800ed8e <_strtod_l+0x74e>
 800eddc:	2f00      	cmp	r7, #0
 800edde:	dd08      	ble.n	800edf2 <_strtod_l+0x7b2>
 800ede0:	4641      	mov	r1, r8
 800ede2:	9805      	ldr	r0, [sp, #20]
 800ede4:	463a      	mov	r2, r7
 800ede6:	f7ff f9b1 	bl	800e14c <__lshift>
 800edea:	4680      	mov	r8, r0
 800edec:	2800      	cmp	r0, #0
 800edee:	f43f ae46 	beq.w	800ea7e <_strtod_l+0x43e>
 800edf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800edf4:	9805      	ldr	r0, [sp, #20]
 800edf6:	464a      	mov	r2, r9
 800edf8:	f7ff fa30 	bl	800e25c <__mdiff>
 800edfc:	4604      	mov	r4, r0
 800edfe:	2800      	cmp	r0, #0
 800ee00:	f43f ae3d 	beq.w	800ea7e <_strtod_l+0x43e>
 800ee04:	68c3      	ldr	r3, [r0, #12]
 800ee06:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee08:	2300      	movs	r3, #0
 800ee0a:	60c3      	str	r3, [r0, #12]
 800ee0c:	4641      	mov	r1, r8
 800ee0e:	f7ff fa09 	bl	800e224 <__mcmp>
 800ee12:	2800      	cmp	r0, #0
 800ee14:	da46      	bge.n	800eea4 <_strtod_l+0x864>
 800ee16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee18:	ea53 030a 	orrs.w	r3, r3, sl
 800ee1c:	d16c      	bne.n	800eef8 <_strtod_l+0x8b8>
 800ee1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d168      	bne.n	800eef8 <_strtod_l+0x8b8>
 800ee26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ee2a:	0d1b      	lsrs	r3, r3, #20
 800ee2c:	051b      	lsls	r3, r3, #20
 800ee2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ee32:	d961      	bls.n	800eef8 <_strtod_l+0x8b8>
 800ee34:	6963      	ldr	r3, [r4, #20]
 800ee36:	b913      	cbnz	r3, 800ee3e <_strtod_l+0x7fe>
 800ee38:	6923      	ldr	r3, [r4, #16]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	dd5c      	ble.n	800eef8 <_strtod_l+0x8b8>
 800ee3e:	4621      	mov	r1, r4
 800ee40:	2201      	movs	r2, #1
 800ee42:	9805      	ldr	r0, [sp, #20]
 800ee44:	f7ff f982 	bl	800e14c <__lshift>
 800ee48:	4641      	mov	r1, r8
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	f7ff f9ea 	bl	800e224 <__mcmp>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	dd51      	ble.n	800eef8 <_strtod_l+0x8b8>
 800ee54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ee58:	9a08      	ldr	r2, [sp, #32]
 800ee5a:	0d1b      	lsrs	r3, r3, #20
 800ee5c:	051b      	lsls	r3, r3, #20
 800ee5e:	2a00      	cmp	r2, #0
 800ee60:	d06b      	beq.n	800ef3a <_strtod_l+0x8fa>
 800ee62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ee66:	d868      	bhi.n	800ef3a <_strtod_l+0x8fa>
 800ee68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ee6c:	f67f ae9d 	bls.w	800ebaa <_strtod_l+0x56a>
 800ee70:	4b0a      	ldr	r3, [pc, #40]	@ (800ee9c <_strtod_l+0x85c>)
 800ee72:	4650      	mov	r0, sl
 800ee74:	4659      	mov	r1, fp
 800ee76:	2200      	movs	r2, #0
 800ee78:	f7f1 fbe6 	bl	8000648 <__aeabi_dmul>
 800ee7c:	4b08      	ldr	r3, [pc, #32]	@ (800eea0 <_strtod_l+0x860>)
 800ee7e:	400b      	ands	r3, r1
 800ee80:	4682      	mov	sl, r0
 800ee82:	468b      	mov	fp, r1
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f47f ae05 	bne.w	800ea94 <_strtod_l+0x454>
 800ee8a:	9a05      	ldr	r2, [sp, #20]
 800ee8c:	2322      	movs	r3, #34	@ 0x22
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	e600      	b.n	800ea94 <_strtod_l+0x454>
 800ee92:	bf00      	nop
 800ee94:	08011410 	.word	0x08011410
 800ee98:	fffffc02 	.word	0xfffffc02
 800ee9c:	39500000 	.word	0x39500000
 800eea0:	7ff00000 	.word	0x7ff00000
 800eea4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eea8:	d165      	bne.n	800ef76 <_strtod_l+0x936>
 800eeaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eeac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eeb0:	b35a      	cbz	r2, 800ef0a <_strtod_l+0x8ca>
 800eeb2:	4a9f      	ldr	r2, [pc, #636]	@ (800f130 <_strtod_l+0xaf0>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d12b      	bne.n	800ef10 <_strtod_l+0x8d0>
 800eeb8:	9b08      	ldr	r3, [sp, #32]
 800eeba:	4651      	mov	r1, sl
 800eebc:	b303      	cbz	r3, 800ef00 <_strtod_l+0x8c0>
 800eebe:	4b9d      	ldr	r3, [pc, #628]	@ (800f134 <_strtod_l+0xaf4>)
 800eec0:	465a      	mov	r2, fp
 800eec2:	4013      	ands	r3, r2
 800eec4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800eec8:	f04f 32ff 	mov.w	r2, #4294967295
 800eecc:	d81b      	bhi.n	800ef06 <_strtod_l+0x8c6>
 800eece:	0d1b      	lsrs	r3, r3, #20
 800eed0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eed4:	fa02 f303 	lsl.w	r3, r2, r3
 800eed8:	4299      	cmp	r1, r3
 800eeda:	d119      	bne.n	800ef10 <_strtod_l+0x8d0>
 800eedc:	4b96      	ldr	r3, [pc, #600]	@ (800f138 <_strtod_l+0xaf8>)
 800eede:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d102      	bne.n	800eeea <_strtod_l+0x8aa>
 800eee4:	3101      	adds	r1, #1
 800eee6:	f43f adca 	beq.w	800ea7e <_strtod_l+0x43e>
 800eeea:	4b92      	ldr	r3, [pc, #584]	@ (800f134 <_strtod_l+0xaf4>)
 800eeec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eeee:	401a      	ands	r2, r3
 800eef0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800eef4:	f04f 0a00 	mov.w	sl, #0
 800eef8:	9b08      	ldr	r3, [sp, #32]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1b8      	bne.n	800ee70 <_strtod_l+0x830>
 800eefe:	e5c9      	b.n	800ea94 <_strtod_l+0x454>
 800ef00:	f04f 33ff 	mov.w	r3, #4294967295
 800ef04:	e7e8      	b.n	800eed8 <_strtod_l+0x898>
 800ef06:	4613      	mov	r3, r2
 800ef08:	e7e6      	b.n	800eed8 <_strtod_l+0x898>
 800ef0a:	ea53 030a 	orrs.w	r3, r3, sl
 800ef0e:	d0a1      	beq.n	800ee54 <_strtod_l+0x814>
 800ef10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef12:	b1db      	cbz	r3, 800ef4c <_strtod_l+0x90c>
 800ef14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef16:	4213      	tst	r3, r2
 800ef18:	d0ee      	beq.n	800eef8 <_strtod_l+0x8b8>
 800ef1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef1c:	9a08      	ldr	r2, [sp, #32]
 800ef1e:	4650      	mov	r0, sl
 800ef20:	4659      	mov	r1, fp
 800ef22:	b1bb      	cbz	r3, 800ef54 <_strtod_l+0x914>
 800ef24:	f7ff fb6c 	bl	800e600 <sulp>
 800ef28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef2c:	ec53 2b10 	vmov	r2, r3, d0
 800ef30:	f7f1 f9d4 	bl	80002dc <__adddf3>
 800ef34:	4682      	mov	sl, r0
 800ef36:	468b      	mov	fp, r1
 800ef38:	e7de      	b.n	800eef8 <_strtod_l+0x8b8>
 800ef3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ef3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ef42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ef46:	f04f 3aff 	mov.w	sl, #4294967295
 800ef4a:	e7d5      	b.n	800eef8 <_strtod_l+0x8b8>
 800ef4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ef4e:	ea13 0f0a 	tst.w	r3, sl
 800ef52:	e7e1      	b.n	800ef18 <_strtod_l+0x8d8>
 800ef54:	f7ff fb54 	bl	800e600 <sulp>
 800ef58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef5c:	ec53 2b10 	vmov	r2, r3, d0
 800ef60:	f7f1 f9ba 	bl	80002d8 <__aeabi_dsub>
 800ef64:	2200      	movs	r2, #0
 800ef66:	2300      	movs	r3, #0
 800ef68:	4682      	mov	sl, r0
 800ef6a:	468b      	mov	fp, r1
 800ef6c:	f7f1 fdd4 	bl	8000b18 <__aeabi_dcmpeq>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d0c1      	beq.n	800eef8 <_strtod_l+0x8b8>
 800ef74:	e619      	b.n	800ebaa <_strtod_l+0x56a>
 800ef76:	4641      	mov	r1, r8
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f7ff facb 	bl	800e514 <__ratio>
 800ef7e:	ec57 6b10 	vmov	r6, r7, d0
 800ef82:	2200      	movs	r2, #0
 800ef84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ef88:	4630      	mov	r0, r6
 800ef8a:	4639      	mov	r1, r7
 800ef8c:	f7f1 fdd8 	bl	8000b40 <__aeabi_dcmple>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d06f      	beq.n	800f074 <_strtod_l+0xa34>
 800ef94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d17a      	bne.n	800f090 <_strtod_l+0xa50>
 800ef9a:	f1ba 0f00 	cmp.w	sl, #0
 800ef9e:	d158      	bne.n	800f052 <_strtod_l+0xa12>
 800efa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d15a      	bne.n	800f060 <_strtod_l+0xa20>
 800efaa:	4b64      	ldr	r3, [pc, #400]	@ (800f13c <_strtod_l+0xafc>)
 800efac:	2200      	movs	r2, #0
 800efae:	4630      	mov	r0, r6
 800efb0:	4639      	mov	r1, r7
 800efb2:	f7f1 fdbb 	bl	8000b2c <__aeabi_dcmplt>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d159      	bne.n	800f06e <_strtod_l+0xa2e>
 800efba:	4630      	mov	r0, r6
 800efbc:	4639      	mov	r1, r7
 800efbe:	4b60      	ldr	r3, [pc, #384]	@ (800f140 <_strtod_l+0xb00>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	f7f1 fb41 	bl	8000648 <__aeabi_dmul>
 800efc6:	4606      	mov	r6, r0
 800efc8:	460f      	mov	r7, r1
 800efca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800efce:	9606      	str	r6, [sp, #24]
 800efd0:	9307      	str	r3, [sp, #28]
 800efd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800efd6:	4d57      	ldr	r5, [pc, #348]	@ (800f134 <_strtod_l+0xaf4>)
 800efd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800efdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efde:	401d      	ands	r5, r3
 800efe0:	4b58      	ldr	r3, [pc, #352]	@ (800f144 <_strtod_l+0xb04>)
 800efe2:	429d      	cmp	r5, r3
 800efe4:	f040 80b2 	bne.w	800f14c <_strtod_l+0xb0c>
 800efe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800efee:	ec4b ab10 	vmov	d0, sl, fp
 800eff2:	f7ff f9c7 	bl	800e384 <__ulp>
 800eff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800effa:	ec51 0b10 	vmov	r0, r1, d0
 800effe:	f7f1 fb23 	bl	8000648 <__aeabi_dmul>
 800f002:	4652      	mov	r2, sl
 800f004:	465b      	mov	r3, fp
 800f006:	f7f1 f969 	bl	80002dc <__adddf3>
 800f00a:	460b      	mov	r3, r1
 800f00c:	4949      	ldr	r1, [pc, #292]	@ (800f134 <_strtod_l+0xaf4>)
 800f00e:	4a4e      	ldr	r2, [pc, #312]	@ (800f148 <_strtod_l+0xb08>)
 800f010:	4019      	ands	r1, r3
 800f012:	4291      	cmp	r1, r2
 800f014:	4682      	mov	sl, r0
 800f016:	d942      	bls.n	800f09e <_strtod_l+0xa5e>
 800f018:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f01a:	4b47      	ldr	r3, [pc, #284]	@ (800f138 <_strtod_l+0xaf8>)
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d103      	bne.n	800f028 <_strtod_l+0x9e8>
 800f020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f022:	3301      	adds	r3, #1
 800f024:	f43f ad2b 	beq.w	800ea7e <_strtod_l+0x43e>
 800f028:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f138 <_strtod_l+0xaf8>
 800f02c:	f04f 3aff 	mov.w	sl, #4294967295
 800f030:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f032:	9805      	ldr	r0, [sp, #20]
 800f034:	f7fe fe72 	bl	800dd1c <_Bfree>
 800f038:	9805      	ldr	r0, [sp, #20]
 800f03a:	4649      	mov	r1, r9
 800f03c:	f7fe fe6e 	bl	800dd1c <_Bfree>
 800f040:	9805      	ldr	r0, [sp, #20]
 800f042:	4641      	mov	r1, r8
 800f044:	f7fe fe6a 	bl	800dd1c <_Bfree>
 800f048:	9805      	ldr	r0, [sp, #20]
 800f04a:	4621      	mov	r1, r4
 800f04c:	f7fe fe66 	bl	800dd1c <_Bfree>
 800f050:	e618      	b.n	800ec84 <_strtod_l+0x644>
 800f052:	f1ba 0f01 	cmp.w	sl, #1
 800f056:	d103      	bne.n	800f060 <_strtod_l+0xa20>
 800f058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f43f ada5 	beq.w	800ebaa <_strtod_l+0x56a>
 800f060:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f110 <_strtod_l+0xad0>
 800f064:	4f35      	ldr	r7, [pc, #212]	@ (800f13c <_strtod_l+0xafc>)
 800f066:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f06a:	2600      	movs	r6, #0
 800f06c:	e7b1      	b.n	800efd2 <_strtod_l+0x992>
 800f06e:	4f34      	ldr	r7, [pc, #208]	@ (800f140 <_strtod_l+0xb00>)
 800f070:	2600      	movs	r6, #0
 800f072:	e7aa      	b.n	800efca <_strtod_l+0x98a>
 800f074:	4b32      	ldr	r3, [pc, #200]	@ (800f140 <_strtod_l+0xb00>)
 800f076:	4630      	mov	r0, r6
 800f078:	4639      	mov	r1, r7
 800f07a:	2200      	movs	r2, #0
 800f07c:	f7f1 fae4 	bl	8000648 <__aeabi_dmul>
 800f080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f082:	4606      	mov	r6, r0
 800f084:	460f      	mov	r7, r1
 800f086:	2b00      	cmp	r3, #0
 800f088:	d09f      	beq.n	800efca <_strtod_l+0x98a>
 800f08a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f08e:	e7a0      	b.n	800efd2 <_strtod_l+0x992>
 800f090:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f118 <_strtod_l+0xad8>
 800f094:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f098:	ec57 6b17 	vmov	r6, r7, d7
 800f09c:	e799      	b.n	800efd2 <_strtod_l+0x992>
 800f09e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f0a2:	9b08      	ldr	r3, [sp, #32]
 800f0a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d1c1      	bne.n	800f030 <_strtod_l+0x9f0>
 800f0ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f0b0:	0d1b      	lsrs	r3, r3, #20
 800f0b2:	051b      	lsls	r3, r3, #20
 800f0b4:	429d      	cmp	r5, r3
 800f0b6:	d1bb      	bne.n	800f030 <_strtod_l+0x9f0>
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	4639      	mov	r1, r7
 800f0bc:	f7f1 fe24 	bl	8000d08 <__aeabi_d2lz>
 800f0c0:	f7f1 fa94 	bl	80005ec <__aeabi_l2d>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	4639      	mov	r1, r7
 800f0cc:	f7f1 f904 	bl	80002d8 <__aeabi_dsub>
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f0d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0de:	ea46 060a 	orr.w	r6, r6, sl
 800f0e2:	431e      	orrs	r6, r3
 800f0e4:	d06f      	beq.n	800f1c6 <_strtod_l+0xb86>
 800f0e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f120 <_strtod_l+0xae0>)
 800f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ec:	f7f1 fd1e 	bl	8000b2c <__aeabi_dcmplt>
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	f47f accf 	bne.w	800ea94 <_strtod_l+0x454>
 800f0f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f128 <_strtod_l+0xae8>)
 800f0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f100:	f7f1 fd32 	bl	8000b68 <__aeabi_dcmpgt>
 800f104:	2800      	cmp	r0, #0
 800f106:	d093      	beq.n	800f030 <_strtod_l+0x9f0>
 800f108:	e4c4      	b.n	800ea94 <_strtod_l+0x454>
 800f10a:	bf00      	nop
 800f10c:	f3af 8000 	nop.w
 800f110:	00000000 	.word	0x00000000
 800f114:	bff00000 	.word	0xbff00000
 800f118:	00000000 	.word	0x00000000
 800f11c:	3ff00000 	.word	0x3ff00000
 800f120:	94a03595 	.word	0x94a03595
 800f124:	3fdfffff 	.word	0x3fdfffff
 800f128:	35afe535 	.word	0x35afe535
 800f12c:	3fe00000 	.word	0x3fe00000
 800f130:	000fffff 	.word	0x000fffff
 800f134:	7ff00000 	.word	0x7ff00000
 800f138:	7fefffff 	.word	0x7fefffff
 800f13c:	3ff00000 	.word	0x3ff00000
 800f140:	3fe00000 	.word	0x3fe00000
 800f144:	7fe00000 	.word	0x7fe00000
 800f148:	7c9fffff 	.word	0x7c9fffff
 800f14c:	9b08      	ldr	r3, [sp, #32]
 800f14e:	b323      	cbz	r3, 800f19a <_strtod_l+0xb5a>
 800f150:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f154:	d821      	bhi.n	800f19a <_strtod_l+0xb5a>
 800f156:	a328      	add	r3, pc, #160	@ (adr r3, 800f1f8 <_strtod_l+0xbb8>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	4630      	mov	r0, r6
 800f15e:	4639      	mov	r1, r7
 800f160:	f7f1 fcee 	bl	8000b40 <__aeabi_dcmple>
 800f164:	b1a0      	cbz	r0, 800f190 <_strtod_l+0xb50>
 800f166:	4639      	mov	r1, r7
 800f168:	4630      	mov	r0, r6
 800f16a:	f7f1 fd45 	bl	8000bf8 <__aeabi_d2uiz>
 800f16e:	2801      	cmp	r0, #1
 800f170:	bf38      	it	cc
 800f172:	2001      	movcc	r0, #1
 800f174:	f7f1 f9ee 	bl	8000554 <__aeabi_ui2d>
 800f178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f17a:	4606      	mov	r6, r0
 800f17c:	460f      	mov	r7, r1
 800f17e:	b9fb      	cbnz	r3, 800f1c0 <_strtod_l+0xb80>
 800f180:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f184:	9014      	str	r0, [sp, #80]	@ 0x50
 800f186:	9315      	str	r3, [sp, #84]	@ 0x54
 800f188:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f18c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f190:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f192:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f196:	1b5b      	subs	r3, r3, r5
 800f198:	9311      	str	r3, [sp, #68]	@ 0x44
 800f19a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f19e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f1a2:	f7ff f8ef 	bl	800e384 <__ulp>
 800f1a6:	4650      	mov	r0, sl
 800f1a8:	ec53 2b10 	vmov	r2, r3, d0
 800f1ac:	4659      	mov	r1, fp
 800f1ae:	f7f1 fa4b 	bl	8000648 <__aeabi_dmul>
 800f1b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f1b6:	f7f1 f891 	bl	80002dc <__adddf3>
 800f1ba:	4682      	mov	sl, r0
 800f1bc:	468b      	mov	fp, r1
 800f1be:	e770      	b.n	800f0a2 <_strtod_l+0xa62>
 800f1c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f1c4:	e7e0      	b.n	800f188 <_strtod_l+0xb48>
 800f1c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f200 <_strtod_l+0xbc0>)
 800f1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1cc:	f7f1 fcae 	bl	8000b2c <__aeabi_dcmplt>
 800f1d0:	e798      	b.n	800f104 <_strtod_l+0xac4>
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f1d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	f7ff ba6d 	b.w	800e6ba <_strtod_l+0x7a>
 800f1e0:	2a65      	cmp	r2, #101	@ 0x65
 800f1e2:	f43f ab66 	beq.w	800e8b2 <_strtod_l+0x272>
 800f1e6:	2a45      	cmp	r2, #69	@ 0x45
 800f1e8:	f43f ab63 	beq.w	800e8b2 <_strtod_l+0x272>
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	f7ff bb9e 	b.w	800e92e <_strtod_l+0x2ee>
 800f1f2:	bf00      	nop
 800f1f4:	f3af 8000 	nop.w
 800f1f8:	ffc00000 	.word	0xffc00000
 800f1fc:	41dfffff 	.word	0x41dfffff
 800f200:	94a03595 	.word	0x94a03595
 800f204:	3fcfffff 	.word	0x3fcfffff

0800f208 <_strtod_r>:
 800f208:	4b01      	ldr	r3, [pc, #4]	@ (800f210 <_strtod_r+0x8>)
 800f20a:	f7ff ba19 	b.w	800e640 <_strtod_l>
 800f20e:	bf00      	nop
 800f210:	2000006c 	.word	0x2000006c

0800f214 <_strtol_l.constprop.0>:
 800f214:	2b24      	cmp	r3, #36	@ 0x24
 800f216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f21a:	4686      	mov	lr, r0
 800f21c:	4690      	mov	r8, r2
 800f21e:	d801      	bhi.n	800f224 <_strtol_l.constprop.0+0x10>
 800f220:	2b01      	cmp	r3, #1
 800f222:	d106      	bne.n	800f232 <_strtol_l.constprop.0+0x1e>
 800f224:	f7fd fe62 	bl	800ceec <__errno>
 800f228:	2316      	movs	r3, #22
 800f22a:	6003      	str	r3, [r0, #0]
 800f22c:	2000      	movs	r0, #0
 800f22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f232:	4834      	ldr	r0, [pc, #208]	@ (800f304 <_strtol_l.constprop.0+0xf0>)
 800f234:	460d      	mov	r5, r1
 800f236:	462a      	mov	r2, r5
 800f238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f23c:	5d06      	ldrb	r6, [r0, r4]
 800f23e:	f016 0608 	ands.w	r6, r6, #8
 800f242:	d1f8      	bne.n	800f236 <_strtol_l.constprop.0+0x22>
 800f244:	2c2d      	cmp	r4, #45	@ 0x2d
 800f246:	d12d      	bne.n	800f2a4 <_strtol_l.constprop.0+0x90>
 800f248:	782c      	ldrb	r4, [r5, #0]
 800f24a:	2601      	movs	r6, #1
 800f24c:	1c95      	adds	r5, r2, #2
 800f24e:	f033 0210 	bics.w	r2, r3, #16
 800f252:	d109      	bne.n	800f268 <_strtol_l.constprop.0+0x54>
 800f254:	2c30      	cmp	r4, #48	@ 0x30
 800f256:	d12a      	bne.n	800f2ae <_strtol_l.constprop.0+0x9a>
 800f258:	782a      	ldrb	r2, [r5, #0]
 800f25a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f25e:	2a58      	cmp	r2, #88	@ 0x58
 800f260:	d125      	bne.n	800f2ae <_strtol_l.constprop.0+0x9a>
 800f262:	786c      	ldrb	r4, [r5, #1]
 800f264:	2310      	movs	r3, #16
 800f266:	3502      	adds	r5, #2
 800f268:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f26c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f270:	2200      	movs	r2, #0
 800f272:	fbbc f9f3 	udiv	r9, ip, r3
 800f276:	4610      	mov	r0, r2
 800f278:	fb03 ca19 	mls	sl, r3, r9, ip
 800f27c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f280:	2f09      	cmp	r7, #9
 800f282:	d81b      	bhi.n	800f2bc <_strtol_l.constprop.0+0xa8>
 800f284:	463c      	mov	r4, r7
 800f286:	42a3      	cmp	r3, r4
 800f288:	dd27      	ble.n	800f2da <_strtol_l.constprop.0+0xc6>
 800f28a:	1c57      	adds	r7, r2, #1
 800f28c:	d007      	beq.n	800f29e <_strtol_l.constprop.0+0x8a>
 800f28e:	4581      	cmp	r9, r0
 800f290:	d320      	bcc.n	800f2d4 <_strtol_l.constprop.0+0xc0>
 800f292:	d101      	bne.n	800f298 <_strtol_l.constprop.0+0x84>
 800f294:	45a2      	cmp	sl, r4
 800f296:	db1d      	blt.n	800f2d4 <_strtol_l.constprop.0+0xc0>
 800f298:	fb00 4003 	mla	r0, r0, r3, r4
 800f29c:	2201      	movs	r2, #1
 800f29e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2a2:	e7eb      	b.n	800f27c <_strtol_l.constprop.0+0x68>
 800f2a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800f2a6:	bf04      	itt	eq
 800f2a8:	782c      	ldrbeq	r4, [r5, #0]
 800f2aa:	1c95      	addeq	r5, r2, #2
 800f2ac:	e7cf      	b.n	800f24e <_strtol_l.constprop.0+0x3a>
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1da      	bne.n	800f268 <_strtol_l.constprop.0+0x54>
 800f2b2:	2c30      	cmp	r4, #48	@ 0x30
 800f2b4:	bf0c      	ite	eq
 800f2b6:	2308      	moveq	r3, #8
 800f2b8:	230a      	movne	r3, #10
 800f2ba:	e7d5      	b.n	800f268 <_strtol_l.constprop.0+0x54>
 800f2bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f2c0:	2f19      	cmp	r7, #25
 800f2c2:	d801      	bhi.n	800f2c8 <_strtol_l.constprop.0+0xb4>
 800f2c4:	3c37      	subs	r4, #55	@ 0x37
 800f2c6:	e7de      	b.n	800f286 <_strtol_l.constprop.0+0x72>
 800f2c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f2cc:	2f19      	cmp	r7, #25
 800f2ce:	d804      	bhi.n	800f2da <_strtol_l.constprop.0+0xc6>
 800f2d0:	3c57      	subs	r4, #87	@ 0x57
 800f2d2:	e7d8      	b.n	800f286 <_strtol_l.constprop.0+0x72>
 800f2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d8:	e7e1      	b.n	800f29e <_strtol_l.constprop.0+0x8a>
 800f2da:	1c53      	adds	r3, r2, #1
 800f2dc:	d108      	bne.n	800f2f0 <_strtol_l.constprop.0+0xdc>
 800f2de:	2322      	movs	r3, #34	@ 0x22
 800f2e0:	f8ce 3000 	str.w	r3, [lr]
 800f2e4:	4660      	mov	r0, ip
 800f2e6:	f1b8 0f00 	cmp.w	r8, #0
 800f2ea:	d0a0      	beq.n	800f22e <_strtol_l.constprop.0+0x1a>
 800f2ec:	1e69      	subs	r1, r5, #1
 800f2ee:	e006      	b.n	800f2fe <_strtol_l.constprop.0+0xea>
 800f2f0:	b106      	cbz	r6, 800f2f4 <_strtol_l.constprop.0+0xe0>
 800f2f2:	4240      	negs	r0, r0
 800f2f4:	f1b8 0f00 	cmp.w	r8, #0
 800f2f8:	d099      	beq.n	800f22e <_strtol_l.constprop.0+0x1a>
 800f2fa:	2a00      	cmp	r2, #0
 800f2fc:	d1f6      	bne.n	800f2ec <_strtol_l.constprop.0+0xd8>
 800f2fe:	f8c8 1000 	str.w	r1, [r8]
 800f302:	e794      	b.n	800f22e <_strtol_l.constprop.0+0x1a>
 800f304:	08011439 	.word	0x08011439

0800f308 <_strtol_r>:
 800f308:	f7ff bf84 	b.w	800f214 <_strtol_l.constprop.0>

0800f30c <__ssputs_r>:
 800f30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f310:	688e      	ldr	r6, [r1, #8]
 800f312:	461f      	mov	r7, r3
 800f314:	42be      	cmp	r6, r7
 800f316:	680b      	ldr	r3, [r1, #0]
 800f318:	4682      	mov	sl, r0
 800f31a:	460c      	mov	r4, r1
 800f31c:	4690      	mov	r8, r2
 800f31e:	d82d      	bhi.n	800f37c <__ssputs_r+0x70>
 800f320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f328:	d026      	beq.n	800f378 <__ssputs_r+0x6c>
 800f32a:	6965      	ldr	r5, [r4, #20]
 800f32c:	6909      	ldr	r1, [r1, #16]
 800f32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f332:	eba3 0901 	sub.w	r9, r3, r1
 800f336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f33a:	1c7b      	adds	r3, r7, #1
 800f33c:	444b      	add	r3, r9
 800f33e:	106d      	asrs	r5, r5, #1
 800f340:	429d      	cmp	r5, r3
 800f342:	bf38      	it	cc
 800f344:	461d      	movcc	r5, r3
 800f346:	0553      	lsls	r3, r2, #21
 800f348:	d527      	bpl.n	800f39a <__ssputs_r+0x8e>
 800f34a:	4629      	mov	r1, r5
 800f34c:	f7fc fccc 	bl	800bce8 <_malloc_r>
 800f350:	4606      	mov	r6, r0
 800f352:	b360      	cbz	r0, 800f3ae <__ssputs_r+0xa2>
 800f354:	6921      	ldr	r1, [r4, #16]
 800f356:	464a      	mov	r2, r9
 800f358:	f7fd fdf5 	bl	800cf46 <memcpy>
 800f35c:	89a3      	ldrh	r3, [r4, #12]
 800f35e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f366:	81a3      	strh	r3, [r4, #12]
 800f368:	6126      	str	r6, [r4, #16]
 800f36a:	6165      	str	r5, [r4, #20]
 800f36c:	444e      	add	r6, r9
 800f36e:	eba5 0509 	sub.w	r5, r5, r9
 800f372:	6026      	str	r6, [r4, #0]
 800f374:	60a5      	str	r5, [r4, #8]
 800f376:	463e      	mov	r6, r7
 800f378:	42be      	cmp	r6, r7
 800f37a:	d900      	bls.n	800f37e <__ssputs_r+0x72>
 800f37c:	463e      	mov	r6, r7
 800f37e:	6820      	ldr	r0, [r4, #0]
 800f380:	4632      	mov	r2, r6
 800f382:	4641      	mov	r1, r8
 800f384:	f7fd fcdf 	bl	800cd46 <memmove>
 800f388:	68a3      	ldr	r3, [r4, #8]
 800f38a:	1b9b      	subs	r3, r3, r6
 800f38c:	60a3      	str	r3, [r4, #8]
 800f38e:	6823      	ldr	r3, [r4, #0]
 800f390:	4433      	add	r3, r6
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	2000      	movs	r0, #0
 800f396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f39a:	462a      	mov	r2, r5
 800f39c:	f000 ff0b 	bl	80101b6 <_realloc_r>
 800f3a0:	4606      	mov	r6, r0
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d1e0      	bne.n	800f368 <__ssputs_r+0x5c>
 800f3a6:	6921      	ldr	r1, [r4, #16]
 800f3a8:	4650      	mov	r0, sl
 800f3aa:	f7fe fc2d 	bl	800dc08 <_free_r>
 800f3ae:	230c      	movs	r3, #12
 800f3b0:	f8ca 3000 	str.w	r3, [sl]
 800f3b4:	89a3      	ldrh	r3, [r4, #12]
 800f3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3ba:	81a3      	strh	r3, [r4, #12]
 800f3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c0:	e7e9      	b.n	800f396 <__ssputs_r+0x8a>
	...

0800f3c4 <_svfiprintf_r>:
 800f3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c8:	4698      	mov	r8, r3
 800f3ca:	898b      	ldrh	r3, [r1, #12]
 800f3cc:	061b      	lsls	r3, r3, #24
 800f3ce:	b09d      	sub	sp, #116	@ 0x74
 800f3d0:	4607      	mov	r7, r0
 800f3d2:	460d      	mov	r5, r1
 800f3d4:	4614      	mov	r4, r2
 800f3d6:	d510      	bpl.n	800f3fa <_svfiprintf_r+0x36>
 800f3d8:	690b      	ldr	r3, [r1, #16]
 800f3da:	b973      	cbnz	r3, 800f3fa <_svfiprintf_r+0x36>
 800f3dc:	2140      	movs	r1, #64	@ 0x40
 800f3de:	f7fc fc83 	bl	800bce8 <_malloc_r>
 800f3e2:	6028      	str	r0, [r5, #0]
 800f3e4:	6128      	str	r0, [r5, #16]
 800f3e6:	b930      	cbnz	r0, 800f3f6 <_svfiprintf_r+0x32>
 800f3e8:	230c      	movs	r3, #12
 800f3ea:	603b      	str	r3, [r7, #0]
 800f3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f0:	b01d      	add	sp, #116	@ 0x74
 800f3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f6:	2340      	movs	r3, #64	@ 0x40
 800f3f8:	616b      	str	r3, [r5, #20]
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3fe:	2320      	movs	r3, #32
 800f400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f404:	f8cd 800c 	str.w	r8, [sp, #12]
 800f408:	2330      	movs	r3, #48	@ 0x30
 800f40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f5a8 <_svfiprintf_r+0x1e4>
 800f40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f412:	f04f 0901 	mov.w	r9, #1
 800f416:	4623      	mov	r3, r4
 800f418:	469a      	mov	sl, r3
 800f41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f41e:	b10a      	cbz	r2, 800f424 <_svfiprintf_r+0x60>
 800f420:	2a25      	cmp	r2, #37	@ 0x25
 800f422:	d1f9      	bne.n	800f418 <_svfiprintf_r+0x54>
 800f424:	ebba 0b04 	subs.w	fp, sl, r4
 800f428:	d00b      	beq.n	800f442 <_svfiprintf_r+0x7e>
 800f42a:	465b      	mov	r3, fp
 800f42c:	4622      	mov	r2, r4
 800f42e:	4629      	mov	r1, r5
 800f430:	4638      	mov	r0, r7
 800f432:	f7ff ff6b 	bl	800f30c <__ssputs_r>
 800f436:	3001      	adds	r0, #1
 800f438:	f000 80a7 	beq.w	800f58a <_svfiprintf_r+0x1c6>
 800f43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f43e:	445a      	add	r2, fp
 800f440:	9209      	str	r2, [sp, #36]	@ 0x24
 800f442:	f89a 3000 	ldrb.w	r3, [sl]
 800f446:	2b00      	cmp	r3, #0
 800f448:	f000 809f 	beq.w	800f58a <_svfiprintf_r+0x1c6>
 800f44c:	2300      	movs	r3, #0
 800f44e:	f04f 32ff 	mov.w	r2, #4294967295
 800f452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f456:	f10a 0a01 	add.w	sl, sl, #1
 800f45a:	9304      	str	r3, [sp, #16]
 800f45c:	9307      	str	r3, [sp, #28]
 800f45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f462:	931a      	str	r3, [sp, #104]	@ 0x68
 800f464:	4654      	mov	r4, sl
 800f466:	2205      	movs	r2, #5
 800f468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f46c:	484e      	ldr	r0, [pc, #312]	@ (800f5a8 <_svfiprintf_r+0x1e4>)
 800f46e:	f7f0 fed7 	bl	8000220 <memchr>
 800f472:	9a04      	ldr	r2, [sp, #16]
 800f474:	b9d8      	cbnz	r0, 800f4ae <_svfiprintf_r+0xea>
 800f476:	06d0      	lsls	r0, r2, #27
 800f478:	bf44      	itt	mi
 800f47a:	2320      	movmi	r3, #32
 800f47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f480:	0711      	lsls	r1, r2, #28
 800f482:	bf44      	itt	mi
 800f484:	232b      	movmi	r3, #43	@ 0x2b
 800f486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f48a:	f89a 3000 	ldrb.w	r3, [sl]
 800f48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f490:	d015      	beq.n	800f4be <_svfiprintf_r+0xfa>
 800f492:	9a07      	ldr	r2, [sp, #28]
 800f494:	4654      	mov	r4, sl
 800f496:	2000      	movs	r0, #0
 800f498:	f04f 0c0a 	mov.w	ip, #10
 800f49c:	4621      	mov	r1, r4
 800f49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4a2:	3b30      	subs	r3, #48	@ 0x30
 800f4a4:	2b09      	cmp	r3, #9
 800f4a6:	d94b      	bls.n	800f540 <_svfiprintf_r+0x17c>
 800f4a8:	b1b0      	cbz	r0, 800f4d8 <_svfiprintf_r+0x114>
 800f4aa:	9207      	str	r2, [sp, #28]
 800f4ac:	e014      	b.n	800f4d8 <_svfiprintf_r+0x114>
 800f4ae:	eba0 0308 	sub.w	r3, r0, r8
 800f4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	9304      	str	r3, [sp, #16]
 800f4ba:	46a2      	mov	sl, r4
 800f4bc:	e7d2      	b.n	800f464 <_svfiprintf_r+0xa0>
 800f4be:	9b03      	ldr	r3, [sp, #12]
 800f4c0:	1d19      	adds	r1, r3, #4
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	9103      	str	r1, [sp, #12]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	bfbb      	ittet	lt
 800f4ca:	425b      	neglt	r3, r3
 800f4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800f4d0:	9307      	strge	r3, [sp, #28]
 800f4d2:	9307      	strlt	r3, [sp, #28]
 800f4d4:	bfb8      	it	lt
 800f4d6:	9204      	strlt	r2, [sp, #16]
 800f4d8:	7823      	ldrb	r3, [r4, #0]
 800f4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4dc:	d10a      	bne.n	800f4f4 <_svfiprintf_r+0x130>
 800f4de:	7863      	ldrb	r3, [r4, #1]
 800f4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4e2:	d132      	bne.n	800f54a <_svfiprintf_r+0x186>
 800f4e4:	9b03      	ldr	r3, [sp, #12]
 800f4e6:	1d1a      	adds	r2, r3, #4
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	9203      	str	r2, [sp, #12]
 800f4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4f0:	3402      	adds	r4, #2
 800f4f2:	9305      	str	r3, [sp, #20]
 800f4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f5b8 <_svfiprintf_r+0x1f4>
 800f4f8:	7821      	ldrb	r1, [r4, #0]
 800f4fa:	2203      	movs	r2, #3
 800f4fc:	4650      	mov	r0, sl
 800f4fe:	f7f0 fe8f 	bl	8000220 <memchr>
 800f502:	b138      	cbz	r0, 800f514 <_svfiprintf_r+0x150>
 800f504:	9b04      	ldr	r3, [sp, #16]
 800f506:	eba0 000a 	sub.w	r0, r0, sl
 800f50a:	2240      	movs	r2, #64	@ 0x40
 800f50c:	4082      	lsls	r2, r0
 800f50e:	4313      	orrs	r3, r2
 800f510:	3401      	adds	r4, #1
 800f512:	9304      	str	r3, [sp, #16]
 800f514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f518:	4824      	ldr	r0, [pc, #144]	@ (800f5ac <_svfiprintf_r+0x1e8>)
 800f51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f51e:	2206      	movs	r2, #6
 800f520:	f7f0 fe7e 	bl	8000220 <memchr>
 800f524:	2800      	cmp	r0, #0
 800f526:	d036      	beq.n	800f596 <_svfiprintf_r+0x1d2>
 800f528:	4b21      	ldr	r3, [pc, #132]	@ (800f5b0 <_svfiprintf_r+0x1ec>)
 800f52a:	bb1b      	cbnz	r3, 800f574 <_svfiprintf_r+0x1b0>
 800f52c:	9b03      	ldr	r3, [sp, #12]
 800f52e:	3307      	adds	r3, #7
 800f530:	f023 0307 	bic.w	r3, r3, #7
 800f534:	3308      	adds	r3, #8
 800f536:	9303      	str	r3, [sp, #12]
 800f538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f53a:	4433      	add	r3, r6
 800f53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f53e:	e76a      	b.n	800f416 <_svfiprintf_r+0x52>
 800f540:	fb0c 3202 	mla	r2, ip, r2, r3
 800f544:	460c      	mov	r4, r1
 800f546:	2001      	movs	r0, #1
 800f548:	e7a8      	b.n	800f49c <_svfiprintf_r+0xd8>
 800f54a:	2300      	movs	r3, #0
 800f54c:	3401      	adds	r4, #1
 800f54e:	9305      	str	r3, [sp, #20]
 800f550:	4619      	mov	r1, r3
 800f552:	f04f 0c0a 	mov.w	ip, #10
 800f556:	4620      	mov	r0, r4
 800f558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f55c:	3a30      	subs	r2, #48	@ 0x30
 800f55e:	2a09      	cmp	r2, #9
 800f560:	d903      	bls.n	800f56a <_svfiprintf_r+0x1a6>
 800f562:	2b00      	cmp	r3, #0
 800f564:	d0c6      	beq.n	800f4f4 <_svfiprintf_r+0x130>
 800f566:	9105      	str	r1, [sp, #20]
 800f568:	e7c4      	b.n	800f4f4 <_svfiprintf_r+0x130>
 800f56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f56e:	4604      	mov	r4, r0
 800f570:	2301      	movs	r3, #1
 800f572:	e7f0      	b.n	800f556 <_svfiprintf_r+0x192>
 800f574:	ab03      	add	r3, sp, #12
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	462a      	mov	r2, r5
 800f57a:	4b0e      	ldr	r3, [pc, #56]	@ (800f5b4 <_svfiprintf_r+0x1f0>)
 800f57c:	a904      	add	r1, sp, #16
 800f57e:	4638      	mov	r0, r7
 800f580:	f7fc fcde 	bl	800bf40 <_printf_float>
 800f584:	1c42      	adds	r2, r0, #1
 800f586:	4606      	mov	r6, r0
 800f588:	d1d6      	bne.n	800f538 <_svfiprintf_r+0x174>
 800f58a:	89ab      	ldrh	r3, [r5, #12]
 800f58c:	065b      	lsls	r3, r3, #25
 800f58e:	f53f af2d 	bmi.w	800f3ec <_svfiprintf_r+0x28>
 800f592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f594:	e72c      	b.n	800f3f0 <_svfiprintf_r+0x2c>
 800f596:	ab03      	add	r3, sp, #12
 800f598:	9300      	str	r3, [sp, #0]
 800f59a:	462a      	mov	r2, r5
 800f59c:	4b05      	ldr	r3, [pc, #20]	@ (800f5b4 <_svfiprintf_r+0x1f0>)
 800f59e:	a904      	add	r1, sp, #16
 800f5a0:	4638      	mov	r0, r7
 800f5a2:	f7fc ff65 	bl	800c470 <_printf_i>
 800f5a6:	e7ed      	b.n	800f584 <_svfiprintf_r+0x1c0>
 800f5a8:	08011539 	.word	0x08011539
 800f5ac:	08011543 	.word	0x08011543
 800f5b0:	0800bf41 	.word	0x0800bf41
 800f5b4:	0800f30d 	.word	0x0800f30d
 800f5b8:	0801153f 	.word	0x0801153f

0800f5bc <__sfputc_r>:
 800f5bc:	6893      	ldr	r3, [r2, #8]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	b410      	push	{r4}
 800f5c4:	6093      	str	r3, [r2, #8]
 800f5c6:	da08      	bge.n	800f5da <__sfputc_r+0x1e>
 800f5c8:	6994      	ldr	r4, [r2, #24]
 800f5ca:	42a3      	cmp	r3, r4
 800f5cc:	db01      	blt.n	800f5d2 <__sfputc_r+0x16>
 800f5ce:	290a      	cmp	r1, #10
 800f5d0:	d103      	bne.n	800f5da <__sfputc_r+0x1e>
 800f5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5d6:	f000 b9df 	b.w	800f998 <__swbuf_r>
 800f5da:	6813      	ldr	r3, [r2, #0]
 800f5dc:	1c58      	adds	r0, r3, #1
 800f5de:	6010      	str	r0, [r2, #0]
 800f5e0:	7019      	strb	r1, [r3, #0]
 800f5e2:	4608      	mov	r0, r1
 800f5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5e8:	4770      	bx	lr

0800f5ea <__sfputs_r>:
 800f5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	460f      	mov	r7, r1
 800f5f0:	4614      	mov	r4, r2
 800f5f2:	18d5      	adds	r5, r2, r3
 800f5f4:	42ac      	cmp	r4, r5
 800f5f6:	d101      	bne.n	800f5fc <__sfputs_r+0x12>
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	e007      	b.n	800f60c <__sfputs_r+0x22>
 800f5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f600:	463a      	mov	r2, r7
 800f602:	4630      	mov	r0, r6
 800f604:	f7ff ffda 	bl	800f5bc <__sfputc_r>
 800f608:	1c43      	adds	r3, r0, #1
 800f60a:	d1f3      	bne.n	800f5f4 <__sfputs_r+0xa>
 800f60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f610 <_vfiprintf_r>:
 800f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f614:	460d      	mov	r5, r1
 800f616:	b09d      	sub	sp, #116	@ 0x74
 800f618:	4614      	mov	r4, r2
 800f61a:	4698      	mov	r8, r3
 800f61c:	4606      	mov	r6, r0
 800f61e:	b118      	cbz	r0, 800f628 <_vfiprintf_r+0x18>
 800f620:	6a03      	ldr	r3, [r0, #32]
 800f622:	b90b      	cbnz	r3, 800f628 <_vfiprintf_r+0x18>
 800f624:	f7fd fae4 	bl	800cbf0 <__sinit>
 800f628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f62a:	07d9      	lsls	r1, r3, #31
 800f62c:	d405      	bmi.n	800f63a <_vfiprintf_r+0x2a>
 800f62e:	89ab      	ldrh	r3, [r5, #12]
 800f630:	059a      	lsls	r2, r3, #22
 800f632:	d402      	bmi.n	800f63a <_vfiprintf_r+0x2a>
 800f634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f636:	f7fd fc84 	bl	800cf42 <__retarget_lock_acquire_recursive>
 800f63a:	89ab      	ldrh	r3, [r5, #12]
 800f63c:	071b      	lsls	r3, r3, #28
 800f63e:	d501      	bpl.n	800f644 <_vfiprintf_r+0x34>
 800f640:	692b      	ldr	r3, [r5, #16]
 800f642:	b99b      	cbnz	r3, 800f66c <_vfiprintf_r+0x5c>
 800f644:	4629      	mov	r1, r5
 800f646:	4630      	mov	r0, r6
 800f648:	f000 f9e4 	bl	800fa14 <__swsetup_r>
 800f64c:	b170      	cbz	r0, 800f66c <_vfiprintf_r+0x5c>
 800f64e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f650:	07dc      	lsls	r4, r3, #31
 800f652:	d504      	bpl.n	800f65e <_vfiprintf_r+0x4e>
 800f654:	f04f 30ff 	mov.w	r0, #4294967295
 800f658:	b01d      	add	sp, #116	@ 0x74
 800f65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65e:	89ab      	ldrh	r3, [r5, #12]
 800f660:	0598      	lsls	r0, r3, #22
 800f662:	d4f7      	bmi.n	800f654 <_vfiprintf_r+0x44>
 800f664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f666:	f7fd fc6d 	bl	800cf44 <__retarget_lock_release_recursive>
 800f66a:	e7f3      	b.n	800f654 <_vfiprintf_r+0x44>
 800f66c:	2300      	movs	r3, #0
 800f66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f670:	2320      	movs	r3, #32
 800f672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f676:	f8cd 800c 	str.w	r8, [sp, #12]
 800f67a:	2330      	movs	r3, #48	@ 0x30
 800f67c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f82c <_vfiprintf_r+0x21c>
 800f680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f684:	f04f 0901 	mov.w	r9, #1
 800f688:	4623      	mov	r3, r4
 800f68a:	469a      	mov	sl, r3
 800f68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f690:	b10a      	cbz	r2, 800f696 <_vfiprintf_r+0x86>
 800f692:	2a25      	cmp	r2, #37	@ 0x25
 800f694:	d1f9      	bne.n	800f68a <_vfiprintf_r+0x7a>
 800f696:	ebba 0b04 	subs.w	fp, sl, r4
 800f69a:	d00b      	beq.n	800f6b4 <_vfiprintf_r+0xa4>
 800f69c:	465b      	mov	r3, fp
 800f69e:	4622      	mov	r2, r4
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f7ff ffa1 	bl	800f5ea <__sfputs_r>
 800f6a8:	3001      	adds	r0, #1
 800f6aa:	f000 80a7 	beq.w	800f7fc <_vfiprintf_r+0x1ec>
 800f6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6b0:	445a      	add	r2, fp
 800f6b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 809f 	beq.w	800f7fc <_vfiprintf_r+0x1ec>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6c8:	f10a 0a01 	add.w	sl, sl, #1
 800f6cc:	9304      	str	r3, [sp, #16]
 800f6ce:	9307      	str	r3, [sp, #28]
 800f6d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6d6:	4654      	mov	r4, sl
 800f6d8:	2205      	movs	r2, #5
 800f6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6de:	4853      	ldr	r0, [pc, #332]	@ (800f82c <_vfiprintf_r+0x21c>)
 800f6e0:	f7f0 fd9e 	bl	8000220 <memchr>
 800f6e4:	9a04      	ldr	r2, [sp, #16]
 800f6e6:	b9d8      	cbnz	r0, 800f720 <_vfiprintf_r+0x110>
 800f6e8:	06d1      	lsls	r1, r2, #27
 800f6ea:	bf44      	itt	mi
 800f6ec:	2320      	movmi	r3, #32
 800f6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6f2:	0713      	lsls	r3, r2, #28
 800f6f4:	bf44      	itt	mi
 800f6f6:	232b      	movmi	r3, #43	@ 0x2b
 800f6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f700:	2b2a      	cmp	r3, #42	@ 0x2a
 800f702:	d015      	beq.n	800f730 <_vfiprintf_r+0x120>
 800f704:	9a07      	ldr	r2, [sp, #28]
 800f706:	4654      	mov	r4, sl
 800f708:	2000      	movs	r0, #0
 800f70a:	f04f 0c0a 	mov.w	ip, #10
 800f70e:	4621      	mov	r1, r4
 800f710:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f714:	3b30      	subs	r3, #48	@ 0x30
 800f716:	2b09      	cmp	r3, #9
 800f718:	d94b      	bls.n	800f7b2 <_vfiprintf_r+0x1a2>
 800f71a:	b1b0      	cbz	r0, 800f74a <_vfiprintf_r+0x13a>
 800f71c:	9207      	str	r2, [sp, #28]
 800f71e:	e014      	b.n	800f74a <_vfiprintf_r+0x13a>
 800f720:	eba0 0308 	sub.w	r3, r0, r8
 800f724:	fa09 f303 	lsl.w	r3, r9, r3
 800f728:	4313      	orrs	r3, r2
 800f72a:	9304      	str	r3, [sp, #16]
 800f72c:	46a2      	mov	sl, r4
 800f72e:	e7d2      	b.n	800f6d6 <_vfiprintf_r+0xc6>
 800f730:	9b03      	ldr	r3, [sp, #12]
 800f732:	1d19      	adds	r1, r3, #4
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	9103      	str	r1, [sp, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	bfbb      	ittet	lt
 800f73c:	425b      	neglt	r3, r3
 800f73e:	f042 0202 	orrlt.w	r2, r2, #2
 800f742:	9307      	strge	r3, [sp, #28]
 800f744:	9307      	strlt	r3, [sp, #28]
 800f746:	bfb8      	it	lt
 800f748:	9204      	strlt	r2, [sp, #16]
 800f74a:	7823      	ldrb	r3, [r4, #0]
 800f74c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f74e:	d10a      	bne.n	800f766 <_vfiprintf_r+0x156>
 800f750:	7863      	ldrb	r3, [r4, #1]
 800f752:	2b2a      	cmp	r3, #42	@ 0x2a
 800f754:	d132      	bne.n	800f7bc <_vfiprintf_r+0x1ac>
 800f756:	9b03      	ldr	r3, [sp, #12]
 800f758:	1d1a      	adds	r2, r3, #4
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	9203      	str	r2, [sp, #12]
 800f75e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f762:	3402      	adds	r4, #2
 800f764:	9305      	str	r3, [sp, #20]
 800f766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f83c <_vfiprintf_r+0x22c>
 800f76a:	7821      	ldrb	r1, [r4, #0]
 800f76c:	2203      	movs	r2, #3
 800f76e:	4650      	mov	r0, sl
 800f770:	f7f0 fd56 	bl	8000220 <memchr>
 800f774:	b138      	cbz	r0, 800f786 <_vfiprintf_r+0x176>
 800f776:	9b04      	ldr	r3, [sp, #16]
 800f778:	eba0 000a 	sub.w	r0, r0, sl
 800f77c:	2240      	movs	r2, #64	@ 0x40
 800f77e:	4082      	lsls	r2, r0
 800f780:	4313      	orrs	r3, r2
 800f782:	3401      	adds	r4, #1
 800f784:	9304      	str	r3, [sp, #16]
 800f786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f78a:	4829      	ldr	r0, [pc, #164]	@ (800f830 <_vfiprintf_r+0x220>)
 800f78c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f790:	2206      	movs	r2, #6
 800f792:	f7f0 fd45 	bl	8000220 <memchr>
 800f796:	2800      	cmp	r0, #0
 800f798:	d03f      	beq.n	800f81a <_vfiprintf_r+0x20a>
 800f79a:	4b26      	ldr	r3, [pc, #152]	@ (800f834 <_vfiprintf_r+0x224>)
 800f79c:	bb1b      	cbnz	r3, 800f7e6 <_vfiprintf_r+0x1d6>
 800f79e:	9b03      	ldr	r3, [sp, #12]
 800f7a0:	3307      	adds	r3, #7
 800f7a2:	f023 0307 	bic.w	r3, r3, #7
 800f7a6:	3308      	adds	r3, #8
 800f7a8:	9303      	str	r3, [sp, #12]
 800f7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7ac:	443b      	add	r3, r7
 800f7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7b0:	e76a      	b.n	800f688 <_vfiprintf_r+0x78>
 800f7b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	2001      	movs	r0, #1
 800f7ba:	e7a8      	b.n	800f70e <_vfiprintf_r+0xfe>
 800f7bc:	2300      	movs	r3, #0
 800f7be:	3401      	adds	r4, #1
 800f7c0:	9305      	str	r3, [sp, #20]
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	f04f 0c0a 	mov.w	ip, #10
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7ce:	3a30      	subs	r2, #48	@ 0x30
 800f7d0:	2a09      	cmp	r2, #9
 800f7d2:	d903      	bls.n	800f7dc <_vfiprintf_r+0x1cc>
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d0c6      	beq.n	800f766 <_vfiprintf_r+0x156>
 800f7d8:	9105      	str	r1, [sp, #20]
 800f7da:	e7c4      	b.n	800f766 <_vfiprintf_r+0x156>
 800f7dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7e0:	4604      	mov	r4, r0
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e7f0      	b.n	800f7c8 <_vfiprintf_r+0x1b8>
 800f7e6:	ab03      	add	r3, sp, #12
 800f7e8:	9300      	str	r3, [sp, #0]
 800f7ea:	462a      	mov	r2, r5
 800f7ec:	4b12      	ldr	r3, [pc, #72]	@ (800f838 <_vfiprintf_r+0x228>)
 800f7ee:	a904      	add	r1, sp, #16
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	f7fc fba5 	bl	800bf40 <_printf_float>
 800f7f6:	4607      	mov	r7, r0
 800f7f8:	1c78      	adds	r0, r7, #1
 800f7fa:	d1d6      	bne.n	800f7aa <_vfiprintf_r+0x19a>
 800f7fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7fe:	07d9      	lsls	r1, r3, #31
 800f800:	d405      	bmi.n	800f80e <_vfiprintf_r+0x1fe>
 800f802:	89ab      	ldrh	r3, [r5, #12]
 800f804:	059a      	lsls	r2, r3, #22
 800f806:	d402      	bmi.n	800f80e <_vfiprintf_r+0x1fe>
 800f808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f80a:	f7fd fb9b 	bl	800cf44 <__retarget_lock_release_recursive>
 800f80e:	89ab      	ldrh	r3, [r5, #12]
 800f810:	065b      	lsls	r3, r3, #25
 800f812:	f53f af1f 	bmi.w	800f654 <_vfiprintf_r+0x44>
 800f816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f818:	e71e      	b.n	800f658 <_vfiprintf_r+0x48>
 800f81a:	ab03      	add	r3, sp, #12
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	462a      	mov	r2, r5
 800f820:	4b05      	ldr	r3, [pc, #20]	@ (800f838 <_vfiprintf_r+0x228>)
 800f822:	a904      	add	r1, sp, #16
 800f824:	4630      	mov	r0, r6
 800f826:	f7fc fe23 	bl	800c470 <_printf_i>
 800f82a:	e7e4      	b.n	800f7f6 <_vfiprintf_r+0x1e6>
 800f82c:	08011539 	.word	0x08011539
 800f830:	08011543 	.word	0x08011543
 800f834:	0800bf41 	.word	0x0800bf41
 800f838:	0800f5eb 	.word	0x0800f5eb
 800f83c:	0801153f 	.word	0x0801153f

0800f840 <__sflush_r>:
 800f840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f848:	0716      	lsls	r6, r2, #28
 800f84a:	4605      	mov	r5, r0
 800f84c:	460c      	mov	r4, r1
 800f84e:	d454      	bmi.n	800f8fa <__sflush_r+0xba>
 800f850:	684b      	ldr	r3, [r1, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	dc02      	bgt.n	800f85c <__sflush_r+0x1c>
 800f856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f858:	2b00      	cmp	r3, #0
 800f85a:	dd48      	ble.n	800f8ee <__sflush_r+0xae>
 800f85c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f85e:	2e00      	cmp	r6, #0
 800f860:	d045      	beq.n	800f8ee <__sflush_r+0xae>
 800f862:	2300      	movs	r3, #0
 800f864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f868:	682f      	ldr	r7, [r5, #0]
 800f86a:	6a21      	ldr	r1, [r4, #32]
 800f86c:	602b      	str	r3, [r5, #0]
 800f86e:	d030      	beq.n	800f8d2 <__sflush_r+0x92>
 800f870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f872:	89a3      	ldrh	r3, [r4, #12]
 800f874:	0759      	lsls	r1, r3, #29
 800f876:	d505      	bpl.n	800f884 <__sflush_r+0x44>
 800f878:	6863      	ldr	r3, [r4, #4]
 800f87a:	1ad2      	subs	r2, r2, r3
 800f87c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f87e:	b10b      	cbz	r3, 800f884 <__sflush_r+0x44>
 800f880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f882:	1ad2      	subs	r2, r2, r3
 800f884:	2300      	movs	r3, #0
 800f886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f888:	6a21      	ldr	r1, [r4, #32]
 800f88a:	4628      	mov	r0, r5
 800f88c:	47b0      	blx	r6
 800f88e:	1c43      	adds	r3, r0, #1
 800f890:	89a3      	ldrh	r3, [r4, #12]
 800f892:	d106      	bne.n	800f8a2 <__sflush_r+0x62>
 800f894:	6829      	ldr	r1, [r5, #0]
 800f896:	291d      	cmp	r1, #29
 800f898:	d82b      	bhi.n	800f8f2 <__sflush_r+0xb2>
 800f89a:	4a2a      	ldr	r2, [pc, #168]	@ (800f944 <__sflush_r+0x104>)
 800f89c:	410a      	asrs	r2, r1
 800f89e:	07d6      	lsls	r6, r2, #31
 800f8a0:	d427      	bmi.n	800f8f2 <__sflush_r+0xb2>
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	6062      	str	r2, [r4, #4]
 800f8a6:	04d9      	lsls	r1, r3, #19
 800f8a8:	6922      	ldr	r2, [r4, #16]
 800f8aa:	6022      	str	r2, [r4, #0]
 800f8ac:	d504      	bpl.n	800f8b8 <__sflush_r+0x78>
 800f8ae:	1c42      	adds	r2, r0, #1
 800f8b0:	d101      	bne.n	800f8b6 <__sflush_r+0x76>
 800f8b2:	682b      	ldr	r3, [r5, #0]
 800f8b4:	b903      	cbnz	r3, 800f8b8 <__sflush_r+0x78>
 800f8b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8ba:	602f      	str	r7, [r5, #0]
 800f8bc:	b1b9      	cbz	r1, 800f8ee <__sflush_r+0xae>
 800f8be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8c2:	4299      	cmp	r1, r3
 800f8c4:	d002      	beq.n	800f8cc <__sflush_r+0x8c>
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	f7fe f99e 	bl	800dc08 <_free_r>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8d0:	e00d      	b.n	800f8ee <__sflush_r+0xae>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	47b0      	blx	r6
 800f8d8:	4602      	mov	r2, r0
 800f8da:	1c50      	adds	r0, r2, #1
 800f8dc:	d1c9      	bne.n	800f872 <__sflush_r+0x32>
 800f8de:	682b      	ldr	r3, [r5, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d0c6      	beq.n	800f872 <__sflush_r+0x32>
 800f8e4:	2b1d      	cmp	r3, #29
 800f8e6:	d001      	beq.n	800f8ec <__sflush_r+0xac>
 800f8e8:	2b16      	cmp	r3, #22
 800f8ea:	d11e      	bne.n	800f92a <__sflush_r+0xea>
 800f8ec:	602f      	str	r7, [r5, #0]
 800f8ee:	2000      	movs	r0, #0
 800f8f0:	e022      	b.n	800f938 <__sflush_r+0xf8>
 800f8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8f6:	b21b      	sxth	r3, r3
 800f8f8:	e01b      	b.n	800f932 <__sflush_r+0xf2>
 800f8fa:	690f      	ldr	r7, [r1, #16]
 800f8fc:	2f00      	cmp	r7, #0
 800f8fe:	d0f6      	beq.n	800f8ee <__sflush_r+0xae>
 800f900:	0793      	lsls	r3, r2, #30
 800f902:	680e      	ldr	r6, [r1, #0]
 800f904:	bf08      	it	eq
 800f906:	694b      	ldreq	r3, [r1, #20]
 800f908:	600f      	str	r7, [r1, #0]
 800f90a:	bf18      	it	ne
 800f90c:	2300      	movne	r3, #0
 800f90e:	eba6 0807 	sub.w	r8, r6, r7
 800f912:	608b      	str	r3, [r1, #8]
 800f914:	f1b8 0f00 	cmp.w	r8, #0
 800f918:	dde9      	ble.n	800f8ee <__sflush_r+0xae>
 800f91a:	6a21      	ldr	r1, [r4, #32]
 800f91c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f91e:	4643      	mov	r3, r8
 800f920:	463a      	mov	r2, r7
 800f922:	4628      	mov	r0, r5
 800f924:	47b0      	blx	r6
 800f926:	2800      	cmp	r0, #0
 800f928:	dc08      	bgt.n	800f93c <__sflush_r+0xfc>
 800f92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f932:	81a3      	strh	r3, [r4, #12]
 800f934:	f04f 30ff 	mov.w	r0, #4294967295
 800f938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93c:	4407      	add	r7, r0
 800f93e:	eba8 0800 	sub.w	r8, r8, r0
 800f942:	e7e7      	b.n	800f914 <__sflush_r+0xd4>
 800f944:	dfbffffe 	.word	0xdfbffffe

0800f948 <_fflush_r>:
 800f948:	b538      	push	{r3, r4, r5, lr}
 800f94a:	690b      	ldr	r3, [r1, #16]
 800f94c:	4605      	mov	r5, r0
 800f94e:	460c      	mov	r4, r1
 800f950:	b913      	cbnz	r3, 800f958 <_fflush_r+0x10>
 800f952:	2500      	movs	r5, #0
 800f954:	4628      	mov	r0, r5
 800f956:	bd38      	pop	{r3, r4, r5, pc}
 800f958:	b118      	cbz	r0, 800f962 <_fflush_r+0x1a>
 800f95a:	6a03      	ldr	r3, [r0, #32]
 800f95c:	b90b      	cbnz	r3, 800f962 <_fflush_r+0x1a>
 800f95e:	f7fd f947 	bl	800cbf0 <__sinit>
 800f962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d0f3      	beq.n	800f952 <_fflush_r+0xa>
 800f96a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f96c:	07d0      	lsls	r0, r2, #31
 800f96e:	d404      	bmi.n	800f97a <_fflush_r+0x32>
 800f970:	0599      	lsls	r1, r3, #22
 800f972:	d402      	bmi.n	800f97a <_fflush_r+0x32>
 800f974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f976:	f7fd fae4 	bl	800cf42 <__retarget_lock_acquire_recursive>
 800f97a:	4628      	mov	r0, r5
 800f97c:	4621      	mov	r1, r4
 800f97e:	f7ff ff5f 	bl	800f840 <__sflush_r>
 800f982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f984:	07da      	lsls	r2, r3, #31
 800f986:	4605      	mov	r5, r0
 800f988:	d4e4      	bmi.n	800f954 <_fflush_r+0xc>
 800f98a:	89a3      	ldrh	r3, [r4, #12]
 800f98c:	059b      	lsls	r3, r3, #22
 800f98e:	d4e1      	bmi.n	800f954 <_fflush_r+0xc>
 800f990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f992:	f7fd fad7 	bl	800cf44 <__retarget_lock_release_recursive>
 800f996:	e7dd      	b.n	800f954 <_fflush_r+0xc>

0800f998 <__swbuf_r>:
 800f998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99a:	460e      	mov	r6, r1
 800f99c:	4614      	mov	r4, r2
 800f99e:	4605      	mov	r5, r0
 800f9a0:	b118      	cbz	r0, 800f9aa <__swbuf_r+0x12>
 800f9a2:	6a03      	ldr	r3, [r0, #32]
 800f9a4:	b90b      	cbnz	r3, 800f9aa <__swbuf_r+0x12>
 800f9a6:	f7fd f923 	bl	800cbf0 <__sinit>
 800f9aa:	69a3      	ldr	r3, [r4, #24]
 800f9ac:	60a3      	str	r3, [r4, #8]
 800f9ae:	89a3      	ldrh	r3, [r4, #12]
 800f9b0:	071a      	lsls	r2, r3, #28
 800f9b2:	d501      	bpl.n	800f9b8 <__swbuf_r+0x20>
 800f9b4:	6923      	ldr	r3, [r4, #16]
 800f9b6:	b943      	cbnz	r3, 800f9ca <__swbuf_r+0x32>
 800f9b8:	4621      	mov	r1, r4
 800f9ba:	4628      	mov	r0, r5
 800f9bc:	f000 f82a 	bl	800fa14 <__swsetup_r>
 800f9c0:	b118      	cbz	r0, 800f9ca <__swbuf_r+0x32>
 800f9c2:	f04f 37ff 	mov.w	r7, #4294967295
 800f9c6:	4638      	mov	r0, r7
 800f9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ca:	6823      	ldr	r3, [r4, #0]
 800f9cc:	6922      	ldr	r2, [r4, #16]
 800f9ce:	1a98      	subs	r0, r3, r2
 800f9d0:	6963      	ldr	r3, [r4, #20]
 800f9d2:	b2f6      	uxtb	r6, r6
 800f9d4:	4283      	cmp	r3, r0
 800f9d6:	4637      	mov	r7, r6
 800f9d8:	dc05      	bgt.n	800f9e6 <__swbuf_r+0x4e>
 800f9da:	4621      	mov	r1, r4
 800f9dc:	4628      	mov	r0, r5
 800f9de:	f7ff ffb3 	bl	800f948 <_fflush_r>
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	d1ed      	bne.n	800f9c2 <__swbuf_r+0x2a>
 800f9e6:	68a3      	ldr	r3, [r4, #8]
 800f9e8:	3b01      	subs	r3, #1
 800f9ea:	60a3      	str	r3, [r4, #8]
 800f9ec:	6823      	ldr	r3, [r4, #0]
 800f9ee:	1c5a      	adds	r2, r3, #1
 800f9f0:	6022      	str	r2, [r4, #0]
 800f9f2:	701e      	strb	r6, [r3, #0]
 800f9f4:	6962      	ldr	r2, [r4, #20]
 800f9f6:	1c43      	adds	r3, r0, #1
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d004      	beq.n	800fa06 <__swbuf_r+0x6e>
 800f9fc:	89a3      	ldrh	r3, [r4, #12]
 800f9fe:	07db      	lsls	r3, r3, #31
 800fa00:	d5e1      	bpl.n	800f9c6 <__swbuf_r+0x2e>
 800fa02:	2e0a      	cmp	r6, #10
 800fa04:	d1df      	bne.n	800f9c6 <__swbuf_r+0x2e>
 800fa06:	4621      	mov	r1, r4
 800fa08:	4628      	mov	r0, r5
 800fa0a:	f7ff ff9d 	bl	800f948 <_fflush_r>
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d0d9      	beq.n	800f9c6 <__swbuf_r+0x2e>
 800fa12:	e7d6      	b.n	800f9c2 <__swbuf_r+0x2a>

0800fa14 <__swsetup_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	4b29      	ldr	r3, [pc, #164]	@ (800fabc <__swsetup_r+0xa8>)
 800fa18:	4605      	mov	r5, r0
 800fa1a:	6818      	ldr	r0, [r3, #0]
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	b118      	cbz	r0, 800fa28 <__swsetup_r+0x14>
 800fa20:	6a03      	ldr	r3, [r0, #32]
 800fa22:	b90b      	cbnz	r3, 800fa28 <__swsetup_r+0x14>
 800fa24:	f7fd f8e4 	bl	800cbf0 <__sinit>
 800fa28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa2c:	0719      	lsls	r1, r3, #28
 800fa2e:	d422      	bmi.n	800fa76 <__swsetup_r+0x62>
 800fa30:	06da      	lsls	r2, r3, #27
 800fa32:	d407      	bmi.n	800fa44 <__swsetup_r+0x30>
 800fa34:	2209      	movs	r2, #9
 800fa36:	602a      	str	r2, [r5, #0]
 800fa38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa3c:	81a3      	strh	r3, [r4, #12]
 800fa3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa42:	e033      	b.n	800faac <__swsetup_r+0x98>
 800fa44:	0758      	lsls	r0, r3, #29
 800fa46:	d512      	bpl.n	800fa6e <__swsetup_r+0x5a>
 800fa48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa4a:	b141      	cbz	r1, 800fa5e <__swsetup_r+0x4a>
 800fa4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa50:	4299      	cmp	r1, r3
 800fa52:	d002      	beq.n	800fa5a <__swsetup_r+0x46>
 800fa54:	4628      	mov	r0, r5
 800fa56:	f7fe f8d7 	bl	800dc08 <_free_r>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa5e:	89a3      	ldrh	r3, [r4, #12]
 800fa60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa64:	81a3      	strh	r3, [r4, #12]
 800fa66:	2300      	movs	r3, #0
 800fa68:	6063      	str	r3, [r4, #4]
 800fa6a:	6923      	ldr	r3, [r4, #16]
 800fa6c:	6023      	str	r3, [r4, #0]
 800fa6e:	89a3      	ldrh	r3, [r4, #12]
 800fa70:	f043 0308 	orr.w	r3, r3, #8
 800fa74:	81a3      	strh	r3, [r4, #12]
 800fa76:	6923      	ldr	r3, [r4, #16]
 800fa78:	b94b      	cbnz	r3, 800fa8e <__swsetup_r+0x7a>
 800fa7a:	89a3      	ldrh	r3, [r4, #12]
 800fa7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa84:	d003      	beq.n	800fa8e <__swsetup_r+0x7a>
 800fa86:	4621      	mov	r1, r4
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f000 fbf5 	bl	8010278 <__smakebuf_r>
 800fa8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa92:	f013 0201 	ands.w	r2, r3, #1
 800fa96:	d00a      	beq.n	800faae <__swsetup_r+0x9a>
 800fa98:	2200      	movs	r2, #0
 800fa9a:	60a2      	str	r2, [r4, #8]
 800fa9c:	6962      	ldr	r2, [r4, #20]
 800fa9e:	4252      	negs	r2, r2
 800faa0:	61a2      	str	r2, [r4, #24]
 800faa2:	6922      	ldr	r2, [r4, #16]
 800faa4:	b942      	cbnz	r2, 800fab8 <__swsetup_r+0xa4>
 800faa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800faaa:	d1c5      	bne.n	800fa38 <__swsetup_r+0x24>
 800faac:	bd38      	pop	{r3, r4, r5, pc}
 800faae:	0799      	lsls	r1, r3, #30
 800fab0:	bf58      	it	pl
 800fab2:	6962      	ldrpl	r2, [r4, #20]
 800fab4:	60a2      	str	r2, [r4, #8]
 800fab6:	e7f4      	b.n	800faa2 <__swsetup_r+0x8e>
 800fab8:	2000      	movs	r0, #0
 800faba:	e7f7      	b.n	800faac <__swsetup_r+0x98>
 800fabc:	2000001c 	.word	0x2000001c

0800fac0 <strncmp>:
 800fac0:	b510      	push	{r4, lr}
 800fac2:	b16a      	cbz	r2, 800fae0 <strncmp+0x20>
 800fac4:	3901      	subs	r1, #1
 800fac6:	1884      	adds	r4, r0, r2
 800fac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800facc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d103      	bne.n	800fadc <strncmp+0x1c>
 800fad4:	42a0      	cmp	r0, r4
 800fad6:	d001      	beq.n	800fadc <strncmp+0x1c>
 800fad8:	2a00      	cmp	r2, #0
 800fada:	d1f5      	bne.n	800fac8 <strncmp+0x8>
 800fadc:	1ad0      	subs	r0, r2, r3
 800fade:	bd10      	pop	{r4, pc}
 800fae0:	4610      	mov	r0, r2
 800fae2:	e7fc      	b.n	800fade <strncmp+0x1e>
 800fae4:	0000      	movs	r0, r0
	...

0800fae8 <nan>:
 800fae8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800faf0 <nan+0x8>
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	00000000 	.word	0x00000000
 800faf4:	7ff80000 	.word	0x7ff80000

0800faf8 <_calloc_r>:
 800faf8:	b570      	push	{r4, r5, r6, lr}
 800fafa:	fba1 5402 	umull	r5, r4, r1, r2
 800fafe:	b93c      	cbnz	r4, 800fb10 <_calloc_r+0x18>
 800fb00:	4629      	mov	r1, r5
 800fb02:	f7fc f8f1 	bl	800bce8 <_malloc_r>
 800fb06:	4606      	mov	r6, r0
 800fb08:	b928      	cbnz	r0, 800fb16 <_calloc_r+0x1e>
 800fb0a:	2600      	movs	r6, #0
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	bd70      	pop	{r4, r5, r6, pc}
 800fb10:	220c      	movs	r2, #12
 800fb12:	6002      	str	r2, [r0, #0]
 800fb14:	e7f9      	b.n	800fb0a <_calloc_r+0x12>
 800fb16:	462a      	mov	r2, r5
 800fb18:	4621      	mov	r1, r4
 800fb1a:	f7fd f92e 	bl	800cd7a <memset>
 800fb1e:	e7f5      	b.n	800fb0c <_calloc_r+0x14>

0800fb20 <rshift>:
 800fb20:	6903      	ldr	r3, [r0, #16]
 800fb22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fb26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fb2e:	f100 0414 	add.w	r4, r0, #20
 800fb32:	dd45      	ble.n	800fbc0 <rshift+0xa0>
 800fb34:	f011 011f 	ands.w	r1, r1, #31
 800fb38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fb3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fb40:	d10c      	bne.n	800fb5c <rshift+0x3c>
 800fb42:	f100 0710 	add.w	r7, r0, #16
 800fb46:	4629      	mov	r1, r5
 800fb48:	42b1      	cmp	r1, r6
 800fb4a:	d334      	bcc.n	800fbb6 <rshift+0x96>
 800fb4c:	1a9b      	subs	r3, r3, r2
 800fb4e:	009b      	lsls	r3, r3, #2
 800fb50:	1eea      	subs	r2, r5, #3
 800fb52:	4296      	cmp	r6, r2
 800fb54:	bf38      	it	cc
 800fb56:	2300      	movcc	r3, #0
 800fb58:	4423      	add	r3, r4
 800fb5a:	e015      	b.n	800fb88 <rshift+0x68>
 800fb5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fb60:	f1c1 0820 	rsb	r8, r1, #32
 800fb64:	40cf      	lsrs	r7, r1
 800fb66:	f105 0e04 	add.w	lr, r5, #4
 800fb6a:	46a1      	mov	r9, r4
 800fb6c:	4576      	cmp	r6, lr
 800fb6e:	46f4      	mov	ip, lr
 800fb70:	d815      	bhi.n	800fb9e <rshift+0x7e>
 800fb72:	1a9a      	subs	r2, r3, r2
 800fb74:	0092      	lsls	r2, r2, #2
 800fb76:	3a04      	subs	r2, #4
 800fb78:	3501      	adds	r5, #1
 800fb7a:	42ae      	cmp	r6, r5
 800fb7c:	bf38      	it	cc
 800fb7e:	2200      	movcc	r2, #0
 800fb80:	18a3      	adds	r3, r4, r2
 800fb82:	50a7      	str	r7, [r4, r2]
 800fb84:	b107      	cbz	r7, 800fb88 <rshift+0x68>
 800fb86:	3304      	adds	r3, #4
 800fb88:	1b1a      	subs	r2, r3, r4
 800fb8a:	42a3      	cmp	r3, r4
 800fb8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb90:	bf08      	it	eq
 800fb92:	2300      	moveq	r3, #0
 800fb94:	6102      	str	r2, [r0, #16]
 800fb96:	bf08      	it	eq
 800fb98:	6143      	streq	r3, [r0, #20]
 800fb9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb9e:	f8dc c000 	ldr.w	ip, [ip]
 800fba2:	fa0c fc08 	lsl.w	ip, ip, r8
 800fba6:	ea4c 0707 	orr.w	r7, ip, r7
 800fbaa:	f849 7b04 	str.w	r7, [r9], #4
 800fbae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fbb2:	40cf      	lsrs	r7, r1
 800fbb4:	e7da      	b.n	800fb6c <rshift+0x4c>
 800fbb6:	f851 cb04 	ldr.w	ip, [r1], #4
 800fbba:	f847 cf04 	str.w	ip, [r7, #4]!
 800fbbe:	e7c3      	b.n	800fb48 <rshift+0x28>
 800fbc0:	4623      	mov	r3, r4
 800fbc2:	e7e1      	b.n	800fb88 <rshift+0x68>

0800fbc4 <__hexdig_fun>:
 800fbc4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fbc8:	2b09      	cmp	r3, #9
 800fbca:	d802      	bhi.n	800fbd2 <__hexdig_fun+0xe>
 800fbcc:	3820      	subs	r0, #32
 800fbce:	b2c0      	uxtb	r0, r0
 800fbd0:	4770      	bx	lr
 800fbd2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fbd6:	2b05      	cmp	r3, #5
 800fbd8:	d801      	bhi.n	800fbde <__hexdig_fun+0x1a>
 800fbda:	3847      	subs	r0, #71	@ 0x47
 800fbdc:	e7f7      	b.n	800fbce <__hexdig_fun+0xa>
 800fbde:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fbe2:	2b05      	cmp	r3, #5
 800fbe4:	d801      	bhi.n	800fbea <__hexdig_fun+0x26>
 800fbe6:	3827      	subs	r0, #39	@ 0x27
 800fbe8:	e7f1      	b.n	800fbce <__hexdig_fun+0xa>
 800fbea:	2000      	movs	r0, #0
 800fbec:	4770      	bx	lr
	...

0800fbf0 <__gethex>:
 800fbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf4:	b085      	sub	sp, #20
 800fbf6:	468a      	mov	sl, r1
 800fbf8:	9302      	str	r3, [sp, #8]
 800fbfa:	680b      	ldr	r3, [r1, #0]
 800fbfc:	9001      	str	r0, [sp, #4]
 800fbfe:	4690      	mov	r8, r2
 800fc00:	1c9c      	adds	r4, r3, #2
 800fc02:	46a1      	mov	r9, r4
 800fc04:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fc08:	2830      	cmp	r0, #48	@ 0x30
 800fc0a:	d0fa      	beq.n	800fc02 <__gethex+0x12>
 800fc0c:	eba9 0303 	sub.w	r3, r9, r3
 800fc10:	f1a3 0b02 	sub.w	fp, r3, #2
 800fc14:	f7ff ffd6 	bl	800fbc4 <__hexdig_fun>
 800fc18:	4605      	mov	r5, r0
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	d168      	bne.n	800fcf0 <__gethex+0x100>
 800fc1e:	49a0      	ldr	r1, [pc, #640]	@ (800fea0 <__gethex+0x2b0>)
 800fc20:	2201      	movs	r2, #1
 800fc22:	4648      	mov	r0, r9
 800fc24:	f7ff ff4c 	bl	800fac0 <strncmp>
 800fc28:	4607      	mov	r7, r0
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d167      	bne.n	800fcfe <__gethex+0x10e>
 800fc2e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fc32:	4626      	mov	r6, r4
 800fc34:	f7ff ffc6 	bl	800fbc4 <__hexdig_fun>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	d062      	beq.n	800fd02 <__gethex+0x112>
 800fc3c:	4623      	mov	r3, r4
 800fc3e:	7818      	ldrb	r0, [r3, #0]
 800fc40:	2830      	cmp	r0, #48	@ 0x30
 800fc42:	4699      	mov	r9, r3
 800fc44:	f103 0301 	add.w	r3, r3, #1
 800fc48:	d0f9      	beq.n	800fc3e <__gethex+0x4e>
 800fc4a:	f7ff ffbb 	bl	800fbc4 <__hexdig_fun>
 800fc4e:	fab0 f580 	clz	r5, r0
 800fc52:	096d      	lsrs	r5, r5, #5
 800fc54:	f04f 0b01 	mov.w	fp, #1
 800fc58:	464a      	mov	r2, r9
 800fc5a:	4616      	mov	r6, r2
 800fc5c:	3201      	adds	r2, #1
 800fc5e:	7830      	ldrb	r0, [r6, #0]
 800fc60:	f7ff ffb0 	bl	800fbc4 <__hexdig_fun>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	d1f8      	bne.n	800fc5a <__gethex+0x6a>
 800fc68:	498d      	ldr	r1, [pc, #564]	@ (800fea0 <__gethex+0x2b0>)
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	f7ff ff27 	bl	800fac0 <strncmp>
 800fc72:	2800      	cmp	r0, #0
 800fc74:	d13f      	bne.n	800fcf6 <__gethex+0x106>
 800fc76:	b944      	cbnz	r4, 800fc8a <__gethex+0x9a>
 800fc78:	1c74      	adds	r4, r6, #1
 800fc7a:	4622      	mov	r2, r4
 800fc7c:	4616      	mov	r6, r2
 800fc7e:	3201      	adds	r2, #1
 800fc80:	7830      	ldrb	r0, [r6, #0]
 800fc82:	f7ff ff9f 	bl	800fbc4 <__hexdig_fun>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d1f8      	bne.n	800fc7c <__gethex+0x8c>
 800fc8a:	1ba4      	subs	r4, r4, r6
 800fc8c:	00a7      	lsls	r7, r4, #2
 800fc8e:	7833      	ldrb	r3, [r6, #0]
 800fc90:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fc94:	2b50      	cmp	r3, #80	@ 0x50
 800fc96:	d13e      	bne.n	800fd16 <__gethex+0x126>
 800fc98:	7873      	ldrb	r3, [r6, #1]
 800fc9a:	2b2b      	cmp	r3, #43	@ 0x2b
 800fc9c:	d033      	beq.n	800fd06 <__gethex+0x116>
 800fc9e:	2b2d      	cmp	r3, #45	@ 0x2d
 800fca0:	d034      	beq.n	800fd0c <__gethex+0x11c>
 800fca2:	1c71      	adds	r1, r6, #1
 800fca4:	2400      	movs	r4, #0
 800fca6:	7808      	ldrb	r0, [r1, #0]
 800fca8:	f7ff ff8c 	bl	800fbc4 <__hexdig_fun>
 800fcac:	1e43      	subs	r3, r0, #1
 800fcae:	b2db      	uxtb	r3, r3
 800fcb0:	2b18      	cmp	r3, #24
 800fcb2:	d830      	bhi.n	800fd16 <__gethex+0x126>
 800fcb4:	f1a0 0210 	sub.w	r2, r0, #16
 800fcb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fcbc:	f7ff ff82 	bl	800fbc4 <__hexdig_fun>
 800fcc0:	f100 3cff 	add.w	ip, r0, #4294967295
 800fcc4:	fa5f fc8c 	uxtb.w	ip, ip
 800fcc8:	f1bc 0f18 	cmp.w	ip, #24
 800fccc:	f04f 030a 	mov.w	r3, #10
 800fcd0:	d91e      	bls.n	800fd10 <__gethex+0x120>
 800fcd2:	b104      	cbz	r4, 800fcd6 <__gethex+0xe6>
 800fcd4:	4252      	negs	r2, r2
 800fcd6:	4417      	add	r7, r2
 800fcd8:	f8ca 1000 	str.w	r1, [sl]
 800fcdc:	b1ed      	cbz	r5, 800fd1a <__gethex+0x12a>
 800fcde:	f1bb 0f00 	cmp.w	fp, #0
 800fce2:	bf0c      	ite	eq
 800fce4:	2506      	moveq	r5, #6
 800fce6:	2500      	movne	r5, #0
 800fce8:	4628      	mov	r0, r5
 800fcea:	b005      	add	sp, #20
 800fcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf0:	2500      	movs	r5, #0
 800fcf2:	462c      	mov	r4, r5
 800fcf4:	e7b0      	b.n	800fc58 <__gethex+0x68>
 800fcf6:	2c00      	cmp	r4, #0
 800fcf8:	d1c7      	bne.n	800fc8a <__gethex+0x9a>
 800fcfa:	4627      	mov	r7, r4
 800fcfc:	e7c7      	b.n	800fc8e <__gethex+0x9e>
 800fcfe:	464e      	mov	r6, r9
 800fd00:	462f      	mov	r7, r5
 800fd02:	2501      	movs	r5, #1
 800fd04:	e7c3      	b.n	800fc8e <__gethex+0x9e>
 800fd06:	2400      	movs	r4, #0
 800fd08:	1cb1      	adds	r1, r6, #2
 800fd0a:	e7cc      	b.n	800fca6 <__gethex+0xb6>
 800fd0c:	2401      	movs	r4, #1
 800fd0e:	e7fb      	b.n	800fd08 <__gethex+0x118>
 800fd10:	fb03 0002 	mla	r0, r3, r2, r0
 800fd14:	e7ce      	b.n	800fcb4 <__gethex+0xc4>
 800fd16:	4631      	mov	r1, r6
 800fd18:	e7de      	b.n	800fcd8 <__gethex+0xe8>
 800fd1a:	eba6 0309 	sub.w	r3, r6, r9
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	4629      	mov	r1, r5
 800fd22:	2b07      	cmp	r3, #7
 800fd24:	dc0a      	bgt.n	800fd3c <__gethex+0x14c>
 800fd26:	9801      	ldr	r0, [sp, #4]
 800fd28:	f7fd ffb8 	bl	800dc9c <_Balloc>
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	b940      	cbnz	r0, 800fd42 <__gethex+0x152>
 800fd30:	4b5c      	ldr	r3, [pc, #368]	@ (800fea4 <__gethex+0x2b4>)
 800fd32:	4602      	mov	r2, r0
 800fd34:	21e4      	movs	r1, #228	@ 0xe4
 800fd36:	485c      	ldr	r0, [pc, #368]	@ (800fea8 <__gethex+0x2b8>)
 800fd38:	f7fb ff86 	bl	800bc48 <__assert_func>
 800fd3c:	3101      	adds	r1, #1
 800fd3e:	105b      	asrs	r3, r3, #1
 800fd40:	e7ef      	b.n	800fd22 <__gethex+0x132>
 800fd42:	f100 0a14 	add.w	sl, r0, #20
 800fd46:	2300      	movs	r3, #0
 800fd48:	4655      	mov	r5, sl
 800fd4a:	469b      	mov	fp, r3
 800fd4c:	45b1      	cmp	r9, r6
 800fd4e:	d337      	bcc.n	800fdc0 <__gethex+0x1d0>
 800fd50:	f845 bb04 	str.w	fp, [r5], #4
 800fd54:	eba5 050a 	sub.w	r5, r5, sl
 800fd58:	10ad      	asrs	r5, r5, #2
 800fd5a:	6125      	str	r5, [r4, #16]
 800fd5c:	4658      	mov	r0, fp
 800fd5e:	f7fe f88f 	bl	800de80 <__hi0bits>
 800fd62:	016d      	lsls	r5, r5, #5
 800fd64:	f8d8 6000 	ldr.w	r6, [r8]
 800fd68:	1a2d      	subs	r5, r5, r0
 800fd6a:	42b5      	cmp	r5, r6
 800fd6c:	dd54      	ble.n	800fe18 <__gethex+0x228>
 800fd6e:	1bad      	subs	r5, r5, r6
 800fd70:	4629      	mov	r1, r5
 800fd72:	4620      	mov	r0, r4
 800fd74:	f7fe fc23 	bl	800e5be <__any_on>
 800fd78:	4681      	mov	r9, r0
 800fd7a:	b178      	cbz	r0, 800fd9c <__gethex+0x1ac>
 800fd7c:	1e6b      	subs	r3, r5, #1
 800fd7e:	1159      	asrs	r1, r3, #5
 800fd80:	f003 021f 	and.w	r2, r3, #31
 800fd84:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fd88:	f04f 0901 	mov.w	r9, #1
 800fd8c:	fa09 f202 	lsl.w	r2, r9, r2
 800fd90:	420a      	tst	r2, r1
 800fd92:	d003      	beq.n	800fd9c <__gethex+0x1ac>
 800fd94:	454b      	cmp	r3, r9
 800fd96:	dc36      	bgt.n	800fe06 <__gethex+0x216>
 800fd98:	f04f 0902 	mov.w	r9, #2
 800fd9c:	4629      	mov	r1, r5
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f7ff febe 	bl	800fb20 <rshift>
 800fda4:	442f      	add	r7, r5
 800fda6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdaa:	42bb      	cmp	r3, r7
 800fdac:	da42      	bge.n	800fe34 <__gethex+0x244>
 800fdae:	9801      	ldr	r0, [sp, #4]
 800fdb0:	4621      	mov	r1, r4
 800fdb2:	f7fd ffb3 	bl	800dd1c <_Bfree>
 800fdb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fdb8:	2300      	movs	r3, #0
 800fdba:	6013      	str	r3, [r2, #0]
 800fdbc:	25a3      	movs	r5, #163	@ 0xa3
 800fdbe:	e793      	b.n	800fce8 <__gethex+0xf8>
 800fdc0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fdc4:	2a2e      	cmp	r2, #46	@ 0x2e
 800fdc6:	d012      	beq.n	800fdee <__gethex+0x1fe>
 800fdc8:	2b20      	cmp	r3, #32
 800fdca:	d104      	bne.n	800fdd6 <__gethex+0x1e6>
 800fdcc:	f845 bb04 	str.w	fp, [r5], #4
 800fdd0:	f04f 0b00 	mov.w	fp, #0
 800fdd4:	465b      	mov	r3, fp
 800fdd6:	7830      	ldrb	r0, [r6, #0]
 800fdd8:	9303      	str	r3, [sp, #12]
 800fdda:	f7ff fef3 	bl	800fbc4 <__hexdig_fun>
 800fdde:	9b03      	ldr	r3, [sp, #12]
 800fde0:	f000 000f 	and.w	r0, r0, #15
 800fde4:	4098      	lsls	r0, r3
 800fde6:	ea4b 0b00 	orr.w	fp, fp, r0
 800fdea:	3304      	adds	r3, #4
 800fdec:	e7ae      	b.n	800fd4c <__gethex+0x15c>
 800fdee:	45b1      	cmp	r9, r6
 800fdf0:	d8ea      	bhi.n	800fdc8 <__gethex+0x1d8>
 800fdf2:	492b      	ldr	r1, [pc, #172]	@ (800fea0 <__gethex+0x2b0>)
 800fdf4:	9303      	str	r3, [sp, #12]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7ff fe61 	bl	800fac0 <strncmp>
 800fdfe:	9b03      	ldr	r3, [sp, #12]
 800fe00:	2800      	cmp	r0, #0
 800fe02:	d1e1      	bne.n	800fdc8 <__gethex+0x1d8>
 800fe04:	e7a2      	b.n	800fd4c <__gethex+0x15c>
 800fe06:	1ea9      	subs	r1, r5, #2
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f7fe fbd8 	bl	800e5be <__any_on>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d0c2      	beq.n	800fd98 <__gethex+0x1a8>
 800fe12:	f04f 0903 	mov.w	r9, #3
 800fe16:	e7c1      	b.n	800fd9c <__gethex+0x1ac>
 800fe18:	da09      	bge.n	800fe2e <__gethex+0x23e>
 800fe1a:	1b75      	subs	r5, r6, r5
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	9801      	ldr	r0, [sp, #4]
 800fe20:	462a      	mov	r2, r5
 800fe22:	f7fe f993 	bl	800e14c <__lshift>
 800fe26:	1b7f      	subs	r7, r7, r5
 800fe28:	4604      	mov	r4, r0
 800fe2a:	f100 0a14 	add.w	sl, r0, #20
 800fe2e:	f04f 0900 	mov.w	r9, #0
 800fe32:	e7b8      	b.n	800fda6 <__gethex+0x1b6>
 800fe34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fe38:	42bd      	cmp	r5, r7
 800fe3a:	dd6f      	ble.n	800ff1c <__gethex+0x32c>
 800fe3c:	1bed      	subs	r5, r5, r7
 800fe3e:	42ae      	cmp	r6, r5
 800fe40:	dc34      	bgt.n	800feac <__gethex+0x2bc>
 800fe42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d022      	beq.n	800fe90 <__gethex+0x2a0>
 800fe4a:	2b03      	cmp	r3, #3
 800fe4c:	d024      	beq.n	800fe98 <__gethex+0x2a8>
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d115      	bne.n	800fe7e <__gethex+0x28e>
 800fe52:	42ae      	cmp	r6, r5
 800fe54:	d113      	bne.n	800fe7e <__gethex+0x28e>
 800fe56:	2e01      	cmp	r6, #1
 800fe58:	d10b      	bne.n	800fe72 <__gethex+0x282>
 800fe5a:	9a02      	ldr	r2, [sp, #8]
 800fe5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe60:	6013      	str	r3, [r2, #0]
 800fe62:	2301      	movs	r3, #1
 800fe64:	6123      	str	r3, [r4, #16]
 800fe66:	f8ca 3000 	str.w	r3, [sl]
 800fe6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe6c:	2562      	movs	r5, #98	@ 0x62
 800fe6e:	601c      	str	r4, [r3, #0]
 800fe70:	e73a      	b.n	800fce8 <__gethex+0xf8>
 800fe72:	1e71      	subs	r1, r6, #1
 800fe74:	4620      	mov	r0, r4
 800fe76:	f7fe fba2 	bl	800e5be <__any_on>
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d1ed      	bne.n	800fe5a <__gethex+0x26a>
 800fe7e:	9801      	ldr	r0, [sp, #4]
 800fe80:	4621      	mov	r1, r4
 800fe82:	f7fd ff4b 	bl	800dd1c <_Bfree>
 800fe86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe88:	2300      	movs	r3, #0
 800fe8a:	6013      	str	r3, [r2, #0]
 800fe8c:	2550      	movs	r5, #80	@ 0x50
 800fe8e:	e72b      	b.n	800fce8 <__gethex+0xf8>
 800fe90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1f3      	bne.n	800fe7e <__gethex+0x28e>
 800fe96:	e7e0      	b.n	800fe5a <__gethex+0x26a>
 800fe98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d1dd      	bne.n	800fe5a <__gethex+0x26a>
 800fe9e:	e7ee      	b.n	800fe7e <__gethex+0x28e>
 800fea0:	080113e0 	.word	0x080113e0
 800fea4:	08011273 	.word	0x08011273
 800fea8:	08011552 	.word	0x08011552
 800feac:	1e6f      	subs	r7, r5, #1
 800feae:	f1b9 0f00 	cmp.w	r9, #0
 800feb2:	d130      	bne.n	800ff16 <__gethex+0x326>
 800feb4:	b127      	cbz	r7, 800fec0 <__gethex+0x2d0>
 800feb6:	4639      	mov	r1, r7
 800feb8:	4620      	mov	r0, r4
 800feba:	f7fe fb80 	bl	800e5be <__any_on>
 800febe:	4681      	mov	r9, r0
 800fec0:	117a      	asrs	r2, r7, #5
 800fec2:	2301      	movs	r3, #1
 800fec4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fec8:	f007 071f 	and.w	r7, r7, #31
 800fecc:	40bb      	lsls	r3, r7
 800fece:	4213      	tst	r3, r2
 800fed0:	4629      	mov	r1, r5
 800fed2:	4620      	mov	r0, r4
 800fed4:	bf18      	it	ne
 800fed6:	f049 0902 	orrne.w	r9, r9, #2
 800feda:	f7ff fe21 	bl	800fb20 <rshift>
 800fede:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fee2:	1b76      	subs	r6, r6, r5
 800fee4:	2502      	movs	r5, #2
 800fee6:	f1b9 0f00 	cmp.w	r9, #0
 800feea:	d047      	beq.n	800ff7c <__gethex+0x38c>
 800feec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fef0:	2b02      	cmp	r3, #2
 800fef2:	d015      	beq.n	800ff20 <__gethex+0x330>
 800fef4:	2b03      	cmp	r3, #3
 800fef6:	d017      	beq.n	800ff28 <__gethex+0x338>
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d109      	bne.n	800ff10 <__gethex+0x320>
 800fefc:	f019 0f02 	tst.w	r9, #2
 800ff00:	d006      	beq.n	800ff10 <__gethex+0x320>
 800ff02:	f8da 3000 	ldr.w	r3, [sl]
 800ff06:	ea49 0903 	orr.w	r9, r9, r3
 800ff0a:	f019 0f01 	tst.w	r9, #1
 800ff0e:	d10e      	bne.n	800ff2e <__gethex+0x33e>
 800ff10:	f045 0510 	orr.w	r5, r5, #16
 800ff14:	e032      	b.n	800ff7c <__gethex+0x38c>
 800ff16:	f04f 0901 	mov.w	r9, #1
 800ff1a:	e7d1      	b.n	800fec0 <__gethex+0x2d0>
 800ff1c:	2501      	movs	r5, #1
 800ff1e:	e7e2      	b.n	800fee6 <__gethex+0x2f6>
 800ff20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff22:	f1c3 0301 	rsb	r3, r3, #1
 800ff26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d0f0      	beq.n	800ff10 <__gethex+0x320>
 800ff2e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff32:	f104 0314 	add.w	r3, r4, #20
 800ff36:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ff3a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ff3e:	f04f 0c00 	mov.w	ip, #0
 800ff42:	4618      	mov	r0, r3
 800ff44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff48:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff4c:	d01b      	beq.n	800ff86 <__gethex+0x396>
 800ff4e:	3201      	adds	r2, #1
 800ff50:	6002      	str	r2, [r0, #0]
 800ff52:	2d02      	cmp	r5, #2
 800ff54:	f104 0314 	add.w	r3, r4, #20
 800ff58:	d13c      	bne.n	800ffd4 <__gethex+0x3e4>
 800ff5a:	f8d8 2000 	ldr.w	r2, [r8]
 800ff5e:	3a01      	subs	r2, #1
 800ff60:	42b2      	cmp	r2, r6
 800ff62:	d109      	bne.n	800ff78 <__gethex+0x388>
 800ff64:	1171      	asrs	r1, r6, #5
 800ff66:	2201      	movs	r2, #1
 800ff68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff6c:	f006 061f 	and.w	r6, r6, #31
 800ff70:	fa02 f606 	lsl.w	r6, r2, r6
 800ff74:	421e      	tst	r6, r3
 800ff76:	d13a      	bne.n	800ffee <__gethex+0x3fe>
 800ff78:	f045 0520 	orr.w	r5, r5, #32
 800ff7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff7e:	601c      	str	r4, [r3, #0]
 800ff80:	9b02      	ldr	r3, [sp, #8]
 800ff82:	601f      	str	r7, [r3, #0]
 800ff84:	e6b0      	b.n	800fce8 <__gethex+0xf8>
 800ff86:	4299      	cmp	r1, r3
 800ff88:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff8c:	d8d9      	bhi.n	800ff42 <__gethex+0x352>
 800ff8e:	68a3      	ldr	r3, [r4, #8]
 800ff90:	459b      	cmp	fp, r3
 800ff92:	db17      	blt.n	800ffc4 <__gethex+0x3d4>
 800ff94:	6861      	ldr	r1, [r4, #4]
 800ff96:	9801      	ldr	r0, [sp, #4]
 800ff98:	3101      	adds	r1, #1
 800ff9a:	f7fd fe7f 	bl	800dc9c <_Balloc>
 800ff9e:	4681      	mov	r9, r0
 800ffa0:	b918      	cbnz	r0, 800ffaa <__gethex+0x3ba>
 800ffa2:	4b1a      	ldr	r3, [pc, #104]	@ (801000c <__gethex+0x41c>)
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	2184      	movs	r1, #132	@ 0x84
 800ffa8:	e6c5      	b.n	800fd36 <__gethex+0x146>
 800ffaa:	6922      	ldr	r2, [r4, #16]
 800ffac:	3202      	adds	r2, #2
 800ffae:	f104 010c 	add.w	r1, r4, #12
 800ffb2:	0092      	lsls	r2, r2, #2
 800ffb4:	300c      	adds	r0, #12
 800ffb6:	f7fc ffc6 	bl	800cf46 <memcpy>
 800ffba:	4621      	mov	r1, r4
 800ffbc:	9801      	ldr	r0, [sp, #4]
 800ffbe:	f7fd fead 	bl	800dd1c <_Bfree>
 800ffc2:	464c      	mov	r4, r9
 800ffc4:	6923      	ldr	r3, [r4, #16]
 800ffc6:	1c5a      	adds	r2, r3, #1
 800ffc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ffcc:	6122      	str	r2, [r4, #16]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	615a      	str	r2, [r3, #20]
 800ffd2:	e7be      	b.n	800ff52 <__gethex+0x362>
 800ffd4:	6922      	ldr	r2, [r4, #16]
 800ffd6:	455a      	cmp	r2, fp
 800ffd8:	dd0b      	ble.n	800fff2 <__gethex+0x402>
 800ffda:	2101      	movs	r1, #1
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f7ff fd9f 	bl	800fb20 <rshift>
 800ffe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffe6:	3701      	adds	r7, #1
 800ffe8:	42bb      	cmp	r3, r7
 800ffea:	f6ff aee0 	blt.w	800fdae <__gethex+0x1be>
 800ffee:	2501      	movs	r5, #1
 800fff0:	e7c2      	b.n	800ff78 <__gethex+0x388>
 800fff2:	f016 061f 	ands.w	r6, r6, #31
 800fff6:	d0fa      	beq.n	800ffee <__gethex+0x3fe>
 800fff8:	4453      	add	r3, sl
 800fffa:	f1c6 0620 	rsb	r6, r6, #32
 800fffe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010002:	f7fd ff3d 	bl	800de80 <__hi0bits>
 8010006:	42b0      	cmp	r0, r6
 8010008:	dbe7      	blt.n	800ffda <__gethex+0x3ea>
 801000a:	e7f0      	b.n	800ffee <__gethex+0x3fe>
 801000c:	08011273 	.word	0x08011273

08010010 <L_shift>:
 8010010:	f1c2 0208 	rsb	r2, r2, #8
 8010014:	0092      	lsls	r2, r2, #2
 8010016:	b570      	push	{r4, r5, r6, lr}
 8010018:	f1c2 0620 	rsb	r6, r2, #32
 801001c:	6843      	ldr	r3, [r0, #4]
 801001e:	6804      	ldr	r4, [r0, #0]
 8010020:	fa03 f506 	lsl.w	r5, r3, r6
 8010024:	432c      	orrs	r4, r5
 8010026:	40d3      	lsrs	r3, r2
 8010028:	6004      	str	r4, [r0, #0]
 801002a:	f840 3f04 	str.w	r3, [r0, #4]!
 801002e:	4288      	cmp	r0, r1
 8010030:	d3f4      	bcc.n	801001c <L_shift+0xc>
 8010032:	bd70      	pop	{r4, r5, r6, pc}

08010034 <__match>:
 8010034:	b530      	push	{r4, r5, lr}
 8010036:	6803      	ldr	r3, [r0, #0]
 8010038:	3301      	adds	r3, #1
 801003a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801003e:	b914      	cbnz	r4, 8010046 <__match+0x12>
 8010040:	6003      	str	r3, [r0, #0]
 8010042:	2001      	movs	r0, #1
 8010044:	bd30      	pop	{r4, r5, pc}
 8010046:	f813 2b01 	ldrb.w	r2, [r3], #1
 801004a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801004e:	2d19      	cmp	r5, #25
 8010050:	bf98      	it	ls
 8010052:	3220      	addls	r2, #32
 8010054:	42a2      	cmp	r2, r4
 8010056:	d0f0      	beq.n	801003a <__match+0x6>
 8010058:	2000      	movs	r0, #0
 801005a:	e7f3      	b.n	8010044 <__match+0x10>

0801005c <__hexnan>:
 801005c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010060:	680b      	ldr	r3, [r1, #0]
 8010062:	6801      	ldr	r1, [r0, #0]
 8010064:	115e      	asrs	r6, r3, #5
 8010066:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801006a:	f013 031f 	ands.w	r3, r3, #31
 801006e:	b087      	sub	sp, #28
 8010070:	bf18      	it	ne
 8010072:	3604      	addne	r6, #4
 8010074:	2500      	movs	r5, #0
 8010076:	1f37      	subs	r7, r6, #4
 8010078:	4682      	mov	sl, r0
 801007a:	4690      	mov	r8, r2
 801007c:	9301      	str	r3, [sp, #4]
 801007e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010082:	46b9      	mov	r9, r7
 8010084:	463c      	mov	r4, r7
 8010086:	9502      	str	r5, [sp, #8]
 8010088:	46ab      	mov	fp, r5
 801008a:	784a      	ldrb	r2, [r1, #1]
 801008c:	1c4b      	adds	r3, r1, #1
 801008e:	9303      	str	r3, [sp, #12]
 8010090:	b342      	cbz	r2, 80100e4 <__hexnan+0x88>
 8010092:	4610      	mov	r0, r2
 8010094:	9105      	str	r1, [sp, #20]
 8010096:	9204      	str	r2, [sp, #16]
 8010098:	f7ff fd94 	bl	800fbc4 <__hexdig_fun>
 801009c:	2800      	cmp	r0, #0
 801009e:	d151      	bne.n	8010144 <__hexnan+0xe8>
 80100a0:	9a04      	ldr	r2, [sp, #16]
 80100a2:	9905      	ldr	r1, [sp, #20]
 80100a4:	2a20      	cmp	r2, #32
 80100a6:	d818      	bhi.n	80100da <__hexnan+0x7e>
 80100a8:	9b02      	ldr	r3, [sp, #8]
 80100aa:	459b      	cmp	fp, r3
 80100ac:	dd13      	ble.n	80100d6 <__hexnan+0x7a>
 80100ae:	454c      	cmp	r4, r9
 80100b0:	d206      	bcs.n	80100c0 <__hexnan+0x64>
 80100b2:	2d07      	cmp	r5, #7
 80100b4:	dc04      	bgt.n	80100c0 <__hexnan+0x64>
 80100b6:	462a      	mov	r2, r5
 80100b8:	4649      	mov	r1, r9
 80100ba:	4620      	mov	r0, r4
 80100bc:	f7ff ffa8 	bl	8010010 <L_shift>
 80100c0:	4544      	cmp	r4, r8
 80100c2:	d952      	bls.n	801016a <__hexnan+0x10e>
 80100c4:	2300      	movs	r3, #0
 80100c6:	f1a4 0904 	sub.w	r9, r4, #4
 80100ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80100ce:	f8cd b008 	str.w	fp, [sp, #8]
 80100d2:	464c      	mov	r4, r9
 80100d4:	461d      	mov	r5, r3
 80100d6:	9903      	ldr	r1, [sp, #12]
 80100d8:	e7d7      	b.n	801008a <__hexnan+0x2e>
 80100da:	2a29      	cmp	r2, #41	@ 0x29
 80100dc:	d157      	bne.n	801018e <__hexnan+0x132>
 80100de:	3102      	adds	r1, #2
 80100e0:	f8ca 1000 	str.w	r1, [sl]
 80100e4:	f1bb 0f00 	cmp.w	fp, #0
 80100e8:	d051      	beq.n	801018e <__hexnan+0x132>
 80100ea:	454c      	cmp	r4, r9
 80100ec:	d206      	bcs.n	80100fc <__hexnan+0xa0>
 80100ee:	2d07      	cmp	r5, #7
 80100f0:	dc04      	bgt.n	80100fc <__hexnan+0xa0>
 80100f2:	462a      	mov	r2, r5
 80100f4:	4649      	mov	r1, r9
 80100f6:	4620      	mov	r0, r4
 80100f8:	f7ff ff8a 	bl	8010010 <L_shift>
 80100fc:	4544      	cmp	r4, r8
 80100fe:	d936      	bls.n	801016e <__hexnan+0x112>
 8010100:	f1a8 0204 	sub.w	r2, r8, #4
 8010104:	4623      	mov	r3, r4
 8010106:	f853 1b04 	ldr.w	r1, [r3], #4
 801010a:	f842 1f04 	str.w	r1, [r2, #4]!
 801010e:	429f      	cmp	r7, r3
 8010110:	d2f9      	bcs.n	8010106 <__hexnan+0xaa>
 8010112:	1b3b      	subs	r3, r7, r4
 8010114:	f023 0303 	bic.w	r3, r3, #3
 8010118:	3304      	adds	r3, #4
 801011a:	3401      	adds	r4, #1
 801011c:	3e03      	subs	r6, #3
 801011e:	42b4      	cmp	r4, r6
 8010120:	bf88      	it	hi
 8010122:	2304      	movhi	r3, #4
 8010124:	4443      	add	r3, r8
 8010126:	2200      	movs	r2, #0
 8010128:	f843 2b04 	str.w	r2, [r3], #4
 801012c:	429f      	cmp	r7, r3
 801012e:	d2fb      	bcs.n	8010128 <__hexnan+0xcc>
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	b91b      	cbnz	r3, 801013c <__hexnan+0xe0>
 8010134:	4547      	cmp	r7, r8
 8010136:	d128      	bne.n	801018a <__hexnan+0x12e>
 8010138:	2301      	movs	r3, #1
 801013a:	603b      	str	r3, [r7, #0]
 801013c:	2005      	movs	r0, #5
 801013e:	b007      	add	sp, #28
 8010140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010144:	3501      	adds	r5, #1
 8010146:	2d08      	cmp	r5, #8
 8010148:	f10b 0b01 	add.w	fp, fp, #1
 801014c:	dd06      	ble.n	801015c <__hexnan+0x100>
 801014e:	4544      	cmp	r4, r8
 8010150:	d9c1      	bls.n	80100d6 <__hexnan+0x7a>
 8010152:	2300      	movs	r3, #0
 8010154:	f844 3c04 	str.w	r3, [r4, #-4]
 8010158:	2501      	movs	r5, #1
 801015a:	3c04      	subs	r4, #4
 801015c:	6822      	ldr	r2, [r4, #0]
 801015e:	f000 000f 	and.w	r0, r0, #15
 8010162:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010166:	6020      	str	r0, [r4, #0]
 8010168:	e7b5      	b.n	80100d6 <__hexnan+0x7a>
 801016a:	2508      	movs	r5, #8
 801016c:	e7b3      	b.n	80100d6 <__hexnan+0x7a>
 801016e:	9b01      	ldr	r3, [sp, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d0dd      	beq.n	8010130 <__hexnan+0xd4>
 8010174:	f1c3 0320 	rsb	r3, r3, #32
 8010178:	f04f 32ff 	mov.w	r2, #4294967295
 801017c:	40da      	lsrs	r2, r3
 801017e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010182:	4013      	ands	r3, r2
 8010184:	f846 3c04 	str.w	r3, [r6, #-4]
 8010188:	e7d2      	b.n	8010130 <__hexnan+0xd4>
 801018a:	3f04      	subs	r7, #4
 801018c:	e7d0      	b.n	8010130 <__hexnan+0xd4>
 801018e:	2004      	movs	r0, #4
 8010190:	e7d5      	b.n	801013e <__hexnan+0xe2>

08010192 <__ascii_mbtowc>:
 8010192:	b082      	sub	sp, #8
 8010194:	b901      	cbnz	r1, 8010198 <__ascii_mbtowc+0x6>
 8010196:	a901      	add	r1, sp, #4
 8010198:	b142      	cbz	r2, 80101ac <__ascii_mbtowc+0x1a>
 801019a:	b14b      	cbz	r3, 80101b0 <__ascii_mbtowc+0x1e>
 801019c:	7813      	ldrb	r3, [r2, #0]
 801019e:	600b      	str	r3, [r1, #0]
 80101a0:	7812      	ldrb	r2, [r2, #0]
 80101a2:	1e10      	subs	r0, r2, #0
 80101a4:	bf18      	it	ne
 80101a6:	2001      	movne	r0, #1
 80101a8:	b002      	add	sp, #8
 80101aa:	4770      	bx	lr
 80101ac:	4610      	mov	r0, r2
 80101ae:	e7fb      	b.n	80101a8 <__ascii_mbtowc+0x16>
 80101b0:	f06f 0001 	mvn.w	r0, #1
 80101b4:	e7f8      	b.n	80101a8 <__ascii_mbtowc+0x16>

080101b6 <_realloc_r>:
 80101b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ba:	4680      	mov	r8, r0
 80101bc:	4615      	mov	r5, r2
 80101be:	460c      	mov	r4, r1
 80101c0:	b921      	cbnz	r1, 80101cc <_realloc_r+0x16>
 80101c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101c6:	4611      	mov	r1, r2
 80101c8:	f7fb bd8e 	b.w	800bce8 <_malloc_r>
 80101cc:	b92a      	cbnz	r2, 80101da <_realloc_r+0x24>
 80101ce:	f7fd fd1b 	bl	800dc08 <_free_r>
 80101d2:	2400      	movs	r4, #0
 80101d4:	4620      	mov	r0, r4
 80101d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101da:	f000 f8ab 	bl	8010334 <_malloc_usable_size_r>
 80101de:	4285      	cmp	r5, r0
 80101e0:	4606      	mov	r6, r0
 80101e2:	d802      	bhi.n	80101ea <_realloc_r+0x34>
 80101e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80101e8:	d8f4      	bhi.n	80101d4 <_realloc_r+0x1e>
 80101ea:	4629      	mov	r1, r5
 80101ec:	4640      	mov	r0, r8
 80101ee:	f7fb fd7b 	bl	800bce8 <_malloc_r>
 80101f2:	4607      	mov	r7, r0
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d0ec      	beq.n	80101d2 <_realloc_r+0x1c>
 80101f8:	42b5      	cmp	r5, r6
 80101fa:	462a      	mov	r2, r5
 80101fc:	4621      	mov	r1, r4
 80101fe:	bf28      	it	cs
 8010200:	4632      	movcs	r2, r6
 8010202:	f7fc fea0 	bl	800cf46 <memcpy>
 8010206:	4621      	mov	r1, r4
 8010208:	4640      	mov	r0, r8
 801020a:	f7fd fcfd 	bl	800dc08 <_free_r>
 801020e:	463c      	mov	r4, r7
 8010210:	e7e0      	b.n	80101d4 <_realloc_r+0x1e>

08010212 <__ascii_wctomb>:
 8010212:	4603      	mov	r3, r0
 8010214:	4608      	mov	r0, r1
 8010216:	b141      	cbz	r1, 801022a <__ascii_wctomb+0x18>
 8010218:	2aff      	cmp	r2, #255	@ 0xff
 801021a:	d904      	bls.n	8010226 <__ascii_wctomb+0x14>
 801021c:	228a      	movs	r2, #138	@ 0x8a
 801021e:	601a      	str	r2, [r3, #0]
 8010220:	f04f 30ff 	mov.w	r0, #4294967295
 8010224:	4770      	bx	lr
 8010226:	700a      	strb	r2, [r1, #0]
 8010228:	2001      	movs	r0, #1
 801022a:	4770      	bx	lr

0801022c <__swhatbuf_r>:
 801022c:	b570      	push	{r4, r5, r6, lr}
 801022e:	460c      	mov	r4, r1
 8010230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010234:	2900      	cmp	r1, #0
 8010236:	b096      	sub	sp, #88	@ 0x58
 8010238:	4615      	mov	r5, r2
 801023a:	461e      	mov	r6, r3
 801023c:	da0d      	bge.n	801025a <__swhatbuf_r+0x2e>
 801023e:	89a3      	ldrh	r3, [r4, #12]
 8010240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010244:	f04f 0100 	mov.w	r1, #0
 8010248:	bf14      	ite	ne
 801024a:	2340      	movne	r3, #64	@ 0x40
 801024c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010250:	2000      	movs	r0, #0
 8010252:	6031      	str	r1, [r6, #0]
 8010254:	602b      	str	r3, [r5, #0]
 8010256:	b016      	add	sp, #88	@ 0x58
 8010258:	bd70      	pop	{r4, r5, r6, pc}
 801025a:	466a      	mov	r2, sp
 801025c:	f000 f848 	bl	80102f0 <_fstat_r>
 8010260:	2800      	cmp	r0, #0
 8010262:	dbec      	blt.n	801023e <__swhatbuf_r+0x12>
 8010264:	9901      	ldr	r1, [sp, #4]
 8010266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801026a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801026e:	4259      	negs	r1, r3
 8010270:	4159      	adcs	r1, r3
 8010272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010276:	e7eb      	b.n	8010250 <__swhatbuf_r+0x24>

08010278 <__smakebuf_r>:
 8010278:	898b      	ldrh	r3, [r1, #12]
 801027a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801027c:	079d      	lsls	r5, r3, #30
 801027e:	4606      	mov	r6, r0
 8010280:	460c      	mov	r4, r1
 8010282:	d507      	bpl.n	8010294 <__smakebuf_r+0x1c>
 8010284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010288:	6023      	str	r3, [r4, #0]
 801028a:	6123      	str	r3, [r4, #16]
 801028c:	2301      	movs	r3, #1
 801028e:	6163      	str	r3, [r4, #20]
 8010290:	b003      	add	sp, #12
 8010292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010294:	ab01      	add	r3, sp, #4
 8010296:	466a      	mov	r2, sp
 8010298:	f7ff ffc8 	bl	801022c <__swhatbuf_r>
 801029c:	9f00      	ldr	r7, [sp, #0]
 801029e:	4605      	mov	r5, r0
 80102a0:	4639      	mov	r1, r7
 80102a2:	4630      	mov	r0, r6
 80102a4:	f7fb fd20 	bl	800bce8 <_malloc_r>
 80102a8:	b948      	cbnz	r0, 80102be <__smakebuf_r+0x46>
 80102aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ae:	059a      	lsls	r2, r3, #22
 80102b0:	d4ee      	bmi.n	8010290 <__smakebuf_r+0x18>
 80102b2:	f023 0303 	bic.w	r3, r3, #3
 80102b6:	f043 0302 	orr.w	r3, r3, #2
 80102ba:	81a3      	strh	r3, [r4, #12]
 80102bc:	e7e2      	b.n	8010284 <__smakebuf_r+0xc>
 80102be:	89a3      	ldrh	r3, [r4, #12]
 80102c0:	6020      	str	r0, [r4, #0]
 80102c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102c6:	81a3      	strh	r3, [r4, #12]
 80102c8:	9b01      	ldr	r3, [sp, #4]
 80102ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80102ce:	b15b      	cbz	r3, 80102e8 <__smakebuf_r+0x70>
 80102d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102d4:	4630      	mov	r0, r6
 80102d6:	f000 f81d 	bl	8010314 <_isatty_r>
 80102da:	b128      	cbz	r0, 80102e8 <__smakebuf_r+0x70>
 80102dc:	89a3      	ldrh	r3, [r4, #12]
 80102de:	f023 0303 	bic.w	r3, r3, #3
 80102e2:	f043 0301 	orr.w	r3, r3, #1
 80102e6:	81a3      	strh	r3, [r4, #12]
 80102e8:	89a3      	ldrh	r3, [r4, #12]
 80102ea:	431d      	orrs	r5, r3
 80102ec:	81a5      	strh	r5, [r4, #12]
 80102ee:	e7cf      	b.n	8010290 <__smakebuf_r+0x18>

080102f0 <_fstat_r>:
 80102f0:	b538      	push	{r3, r4, r5, lr}
 80102f2:	4d07      	ldr	r5, [pc, #28]	@ (8010310 <_fstat_r+0x20>)
 80102f4:	2300      	movs	r3, #0
 80102f6:	4604      	mov	r4, r0
 80102f8:	4608      	mov	r0, r1
 80102fa:	4611      	mov	r1, r2
 80102fc:	602b      	str	r3, [r5, #0]
 80102fe:	f7f3 fd55 	bl	8003dac <_fstat>
 8010302:	1c43      	adds	r3, r0, #1
 8010304:	d102      	bne.n	801030c <_fstat_r+0x1c>
 8010306:	682b      	ldr	r3, [r5, #0]
 8010308:	b103      	cbz	r3, 801030c <_fstat_r+0x1c>
 801030a:	6023      	str	r3, [r4, #0]
 801030c:	bd38      	pop	{r3, r4, r5, pc}
 801030e:	bf00      	nop
 8010310:	200007e4 	.word	0x200007e4

08010314 <_isatty_r>:
 8010314:	b538      	push	{r3, r4, r5, lr}
 8010316:	4d06      	ldr	r5, [pc, #24]	@ (8010330 <_isatty_r+0x1c>)
 8010318:	2300      	movs	r3, #0
 801031a:	4604      	mov	r4, r0
 801031c:	4608      	mov	r0, r1
 801031e:	602b      	str	r3, [r5, #0]
 8010320:	f7f3 fd54 	bl	8003dcc <_isatty>
 8010324:	1c43      	adds	r3, r0, #1
 8010326:	d102      	bne.n	801032e <_isatty_r+0x1a>
 8010328:	682b      	ldr	r3, [r5, #0]
 801032a:	b103      	cbz	r3, 801032e <_isatty_r+0x1a>
 801032c:	6023      	str	r3, [r4, #0]
 801032e:	bd38      	pop	{r3, r4, r5, pc}
 8010330:	200007e4 	.word	0x200007e4

08010334 <_malloc_usable_size_r>:
 8010334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010338:	1f18      	subs	r0, r3, #4
 801033a:	2b00      	cmp	r3, #0
 801033c:	bfbc      	itt	lt
 801033e:	580b      	ldrlt	r3, [r1, r0]
 8010340:	18c0      	addlt	r0, r0, r3
 8010342:	4770      	bx	lr

08010344 <_init>:
 8010344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010346:	bf00      	nop
 8010348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801034a:	bc08      	pop	{r3}
 801034c:	469e      	mov	lr, r3
 801034e:	4770      	bx	lr

08010350 <_fini>:
 8010350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010352:	bf00      	nop
 8010354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010356:	bc08      	pop	{r3}
 8010358:	469e      	mov	lr, r3
 801035a:	4770      	bx	lr
