
Ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e034  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800e218  0800e218  0000f218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6c4  0800e6c4  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6c4  0800e6c4  0000f6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6cc  0800e6cc  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0800e6cc  0800e6cc  0000f6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800e6e0  0800e6e0  0000f6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800e6f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  200001d8  0800e8c8  000101d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  0800e8c8  000107c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040b9a  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e64  00000000  00000000  00050da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002738  00000000  00000000  00057c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e6d  00000000  00000000  0005a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031ec9  00000000  00000000  0005c1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030ca3  00000000  00000000  0008e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128dc4  00000000  00000000  000bed19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e7add  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf30  00000000  00000000  001e7b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001f3a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e1fc 	.word	0x0800e1fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800e1fc 	.word	0x0800e1fc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_ZN15Adafruit_SensorC1Ev>:
} sensor_t;

class Adafruit_Sensor {
 public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	0800e244 	.word	0x0800e244

08001054 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	0800e244 	.word	0x0800e244

08001074 <_ZN15Adafruit_SensorD0Ev>:
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe9 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001082:	2108      	movs	r1, #8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f008 fd2f 	bl	8009ae8 <_ZdlPvj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_ZN15Adafruit_BNO055C1Elh>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_BNO055 class
*/
/**************************************************************************/
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address)
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ffb9 	bl	8001034 <_ZN15Adafruit_SensorC1Ev>
 80010c2:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <_ZN15Adafruit_BNO055C1Elh+0x34>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	601a      	str	r2, [r3, #0]
{
  _sensorID = sensorID;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	609a      	str	r2, [r3, #8]
  _address = address;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	715a      	strb	r2, [r3, #5]
}
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	0800e228 	.word	0x0800e228

080010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
/*!
    @brief  Gets a vector reading from the specified source
*/
/**************************************************************************/
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	4613      	mov	r3, r2
 80010f0:	71fb      	strb	r3, [r7, #7]
  imu::Vector<3> xyz;
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 fa5c 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
  uint8_t buffer[6];
  memset (buffer, 0, 6);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2206      	movs	r2, #6
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f009 fd96 	bl	800ac32 <memset>

  int16_t x, y, z;
  x = y = z = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	83fb      	strh	r3, [r7, #30]
 800110a:	8bfb      	ldrh	r3, [r7, #30]
 800110c:	83bb      	strh	r3, [r7, #28]
 800110e:	8bbb      	ldrh	r3, [r7, #28]
 8001110:	837b      	strh	r3, [r7, #26]

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
 8001112:	f107 0214 	add.w	r2, r7, #20
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	2306      	movs	r3, #6
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f000 fa05 	bl	800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8001120:	7d3b      	ldrb	r3, [r7, #20]
 8001122:	b21a      	sxth	r2, r3
 8001124:	7d7b      	ldrb	r3, [r7, #21]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	837b      	strh	r3, [r7, #26]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800112e:	7dbb      	ldrb	r3, [r7, #22]
 8001130:	b21a      	sxth	r2, r3
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	83bb      	strh	r3, [r7, #28]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 800113c:	7e3b      	ldrb	r3, [r7, #24]
 800113e:	b21a      	sxth	r2, r3
 8001140:	7e7b      	ldrb	r3, [r7, #25]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	83fb      	strh	r3, [r7, #30]

  /* Convert the value to an appropriate range (section 3.6.4) */
  /* and assign the value to the Vector type */
  switch(vector_type)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3b08      	subs	r3, #8
 800114e:	2b26      	cmp	r3, #38	@ 0x26
 8001150:	f200 8152 	bhi.w	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
 8001154:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x78>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001379 	.word	0x08001379
 8001160:	080013f9 	.word	0x080013f9
 8001164:	080013f9 	.word	0x080013f9
 8001168:	080013f9 	.word	0x080013f9
 800116c:	080013f9 	.word	0x080013f9
 8001170:	080013f9 	.word	0x080013f9
 8001174:	080011f9 	.word	0x080011f9
 8001178:	080013f9 	.word	0x080013f9
 800117c:	080013f9 	.word	0x080013f9
 8001180:	080013f9 	.word	0x080013f9
 8001184:	080013f9 	.word	0x080013f9
 8001188:	080013f9 	.word	0x080013f9
 800118c:	08001279 	.word	0x08001279
 8001190:	080013f9 	.word	0x080013f9
 8001194:	080013f9 	.word	0x080013f9
 8001198:	080013f9 	.word	0x080013f9
 800119c:	080013f9 	.word	0x080013f9
 80011a0:	080013f9 	.word	0x080013f9
 80011a4:	080012f9 	.word	0x080012f9
 80011a8:	080013f9 	.word	0x080013f9
 80011ac:	080013f9 	.word	0x080013f9
 80011b0:	080013f9 	.word	0x080013f9
 80011b4:	080013f9 	.word	0x080013f9
 80011b8:	080013f9 	.word	0x080013f9
 80011bc:	080013f9 	.word	0x080013f9
 80011c0:	080013f9 	.word	0x080013f9
 80011c4:	080013f9 	.word	0x080013f9
 80011c8:	080013f9 	.word	0x080013f9
 80011cc:	080013f9 	.word	0x080013f9
 80011d0:	080013f9 	.word	0x080013f9
 80011d4:	080013f9 	.word	0x080013f9
 80011d8:	080013f9 	.word	0x080013f9
 80011dc:	08001379 	.word	0x08001379
 80011e0:	080013f9 	.word	0x080013f9
 80011e4:	080013f9 	.word	0x080013f9
 80011e8:	080013f9 	.word	0x080013f9
 80011ec:	080013f9 	.word	0x080013f9
 80011f0:	080013f9 	.word	0x080013f9
 80011f4:	08001379 	.word	0x08001379
  {
    case VECTOR_MAGNETOMETER:
      /* 1uT = 16 LSB */
      xyz[0] = ((double)x)/16.0;
 80011f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9b9 	bl	8000574 <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b7f      	ldr	r3, [pc, #508]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001208:	f7ff fb48 	bl	800089c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4614      	mov	r4, r2
 8001212:	461d      	mov	r5, r3
 8001214:	2100      	movs	r1, #0
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f9d9 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800121c:	4603      	mov	r3, r0
 800121e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/16.0;
 8001222:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9a4 	bl	8000574 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b74      	ldr	r3, [pc, #464]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 8001232:	f7ff fb33 	bl	800089c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4614      	mov	r4, r2
 800123c:	461d      	mov	r5, r3
 800123e:	2101      	movs	r1, #1
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f9c4 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001246:	4603      	mov	r3, r0
 8001248:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/16.0;
 800124c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f98f 	bl	8000574 <__aeabi_i2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b6a      	ldr	r3, [pc, #424]	@ (8001404 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x320>)
 800125c:	f7ff fb1e 	bl	800089c <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	2102      	movs	r1, #2
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f9af 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001270:	4603      	mov	r3, r0
 8001272:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001276:	e0bf      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_GYROSCOPE:
      /* 1dps = 16 LSB */
      /* 1rps = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 8001278:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f979 	bl	8000574 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b60      	ldr	r3, [pc, #384]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001288:	f7ff fb08 	bl	800089c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	461d      	mov	r5, r3
 8001294:	2100      	movs	r1, #0
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f999 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800129c:	4603      	mov	r3, r0
 800129e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 80012a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f964 	bl	8000574 <__aeabi_i2d>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b55      	ldr	r3, [pc, #340]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012b2:	f7ff faf3 	bl	800089c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f984 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012c6:	4603      	mov	r3, r0
 80012c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 80012cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f94f 	bl	8000574 <__aeabi_i2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 80012dc:	f7ff fade 	bl	800089c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	2102      	movs	r1, #2
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f96f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80012f0:	4603      	mov	r3, r0
 80012f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80012f6:	e07f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_EULER:
      /* 1 rad = 900 LSB */
      xyz[0] = ((double)x)/900.0;
 80012f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f939 	bl	8000574 <__aeabi_i2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	461d      	mov	r5, r3
 8001314:	2100      	movs	r1, #0
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f959 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800131c:	4603      	mov	r3, r0
 800131e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/900.0;
 8001322:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f924 	bl	8000574 <__aeabi_i2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b35      	ldr	r3, [pc, #212]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 8001332:	f7ff fab3 	bl	800089c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	2101      	movs	r1, #1
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f944 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001346:	4603      	mov	r3, r0
 8001348:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/900.0;
 800134c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f90f 	bl	8000574 <__aeabi_i2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x324>)
 800135c:	f7ff fa9e 	bl	800089c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	2102      	movs	r1, #2
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f92f 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 8001370:	4603      	mov	r3, r0
 8001372:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 8001376:	e03f      	b.n	80013f8 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x314>
    case VECTOR_ACCELEROMETER:
    case VECTOR_LINEARACCEL:
    case VECTOR_GRAVITY:
      /* 1m/s^2 = 100 LSB */
      xyz[0] = ((double)x)/100.0;
 8001378:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8f9 	bl	8000574 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 8001388:	f7ff fa88 	bl	800089c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	2100      	movs	r1, #0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 f919 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 800139c:	4603      	mov	r3, r0
 800139e:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[1] = ((double)y)/100.0;
 80013a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8e4 	bl	8000574 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013b2:	f7ff fa73 	bl	800089c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	2101      	movs	r1, #1
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f904 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013c6:	4603      	mov	r3, r0
 80013c8:	e9c3 4500 	strd	r4, r5, [r3]
      xyz[2] = ((double)z)/100.0;
 80013cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8cf 	bl	8000574 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x328>)
 80013dc:	f7ff fa5e 	bl	800089c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	2102      	movs	r1, #2
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f8ef 	bl	80015ce <_ZN3imu6VectorILh3EEixEi>
 80013f0:	4603      	mov	r3, r0
 80013f2:	e9c3 4500 	strd	r4, r5, [r3]
      break;
 80013f6:	bf00      	nop
  }

  return xyz;
 80013f8:	bf00      	nop
}
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bdb0      	pop	{r4, r5, r7, pc}
 8001402:	bf00      	nop
 8001404:	40300000 	.word	0x40300000
 8001408:	408c2000 	.word	0x408c2000
 800140c:	40590000 	.word	0x40590000

08001410 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:
/*!
    @brief  Provides the sensor_t data for this sensor
*/
/**************************************************************************/
void Adafruit_BNO055::getSensor(sensor_t *sensor)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 800141a:	2228      	movs	r2, #40	@ 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f009 fc07 	bl	800ac32 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "BNO055", sizeof(sensor->name) - 1);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	220b      	movs	r2, #11
 8001428:	4911      	ldr	r1, [pc, #68]	@ (8001470 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x60>)
 800142a:	4618      	mov	r0, r3
 800142c:	f009 fc09 	bl	800ac42 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2200      	movs	r2, #0
 8001434:	72da      	strb	r2, [r3, #11]
  sensor->version     = 1;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  sensor->sensor_id   = _sensorID;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	611a      	str	r2, [r3, #16]
  sensor->type        = SENSOR_TYPE_ORIENTATION;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2203      	movs	r2, #3
 8001448:	615a      	str	r2, [r3, #20]
  sensor->min_delay   = 0;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
  sensor->max_value   = 0.0F;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0.0F;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0.01F;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x64>)
 8001464:	621a      	str	r2, [r3, #32]
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	0800e218 	.word	0x0800e218
 8001474:	3c23d70a 	.word	0x3c23d70a

08001478 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
    @brief  Reads the sensor and returns the data as a sensors_event_t
*/
/**************************************************************************/
bool Adafruit_BNO055::getEvent(sensors_event_t *event)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	2100      	movs	r1, #0
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f009 fbd3 	bl	800ac32 <memset>

  event->version   = sizeof(sensors_event_t);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2224      	movs	r2, #36	@ 0x24
 8001490:	601a      	str	r2, [r3, #0]
  event->sensor_id = _sensorID;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	605a      	str	r2, [r3, #4]
  event->type      = SENSOR_TYPE_ORIENTATION;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2203      	movs	r2, #3
 800149e:	609a      	str	r2, [r3, #8]
  event->timestamp = HAL_GetTick();
 80014a0:	f002 fb7e 	bl	8003ba0 <HAL_GetTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	611a      	str	r2, [r3, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	221a      	movs	r2, #26
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe15 	bl	80010e4 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f853 	bl	800156a <_ZN3imu6VectorILh3EE1xEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbb3 	bl	8000c38 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	615a      	str	r2, [r3, #20]
  event->orientation.y = euler.y();
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f84f 	bl	8001580 <_ZN3imu6VectorILh3EE1yEv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fba4 	bl	8000c38 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	619a      	str	r2, [r3, #24]
  event->orientation.z = euler.z();
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f84c 	bl	8001598 <_ZN3imu6VectorILh3EE1zEv>
 8001500:	4603      	mov	r3, r0
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	61da      	str	r2, [r3, #28]

  return true;
 8001514:	2401      	movs	r4, #1
}
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f81a 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
  return true;
 8001520:	4623      	mov	r3, r4
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	@ 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:
/*!
    @brief  Reads the specified number of bytes over I2C
*/
/**************************************************************************/
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte * buffer, uint8_t len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	461a      	mov	r2, r3
 8001536:	460b      	mov	r3, r1
 8001538:	72fb      	strb	r3, [r7, #11]
 800153a:	4613      	mov	r3, r2
 800153c:	72bb      	strb	r3, [r7, #10]
  I2C_n_byte_receive((uint8_t)reg, buffer, len);
 800153e:	7aba      	ldrb	r2, [r7, #10]
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f89b 	bl	8001680 <I2C_n_byte_receive>

  /* ToDo: Check for errors! */
  return true;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZN3imu6VectorILh3EED1Ev>:
    {
        for (int x = 0; x < N; x++)
            p_vec[x] = v.p_vec[x];
    }

    ~Vector()
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    {
    }
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN3imu6VectorILh3EE1xEv>:
    {
        for(int i = 0; i < N; i++)
            p_vec[i] *= 0.01745329251;  //pi/180
    }

    double& x() { return p_vec[0]; }
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_ZN3imu6VectorILh3EE1yEv>:
    double& y() { return p_vec[1]; }
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3308      	adds	r3, #8
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_ZN3imu6VectorILh3EE1zEv>:
    double& z() { return p_vec[2]; }
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3310      	adds	r3, #16
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN3imu6VectorILh3EEC1Ev>:
    Vector()
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
        memset(p_vec, 0, sizeof(double)*N);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2218      	movs	r2, #24
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f009 fb37 	bl	800ac32 <memset>
    }
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZN3imu6VectorILh3EEixEi>:
    double& operator [](int n)
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
        return p_vec[n];
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
    }
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_ZN15Adafruit_BNO055D1Ev>:

    int16_t accel_radius;
    int16_t mag_radius;
} adafruit_bno055_offsets_t;

class Adafruit_BNO055 : public Adafruit_Sensor
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_ZN15Adafruit_BNO055D1Ev+0x20>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd29 	bl	8001054 <_ZN15Adafruit_SensorD1Ev>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	0800e228 	.word	0x0800e228

08001610 <_ZN15Adafruit_BNO055D0Ev>:
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
 800161e:	2110      	movs	r1, #16
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f008 fa61 	bl	8009ae8 <_ZdlPvj>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_ZN3imu10QuaternionC1Ev>:
{

class Quaternion
{
public:
    Quaternion(): _w(1.0), _x(0.0), _y(0.0), _z(0.0) {}
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <_ZN3imu10QuaternionC1Ev+0x4c>)
 8001640:	e9c1 2300 	strd	r2, r3, [r1]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	3ff00000 	.word	0x3ff00000

08001680 <I2C_n_byte_receive>:

  return 0;
}

uint8_t I2C_n_byte_receive(uint8_t address, uint8_t * buffer, uint8_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c4, BNO055<<1, address, 1, buffer, len, 100);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	b29a      	uxth	r2, r3
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	b29b      	uxth	r3, r3
 8001698:	2164      	movs	r1, #100	@ 0x64
 800169a:	9102      	str	r1, [sp, #8]
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2152      	movs	r1, #82	@ 0x52
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016a8:	f003 fa56 	bl	8004b58 <HAL_I2C_Mem_Read>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]
  while( HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY ){}
 80016b0:	bf00      	nop
 80016b2:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <I2C_n_byte_receive+0x54>)
 80016b4:	f003 fc1f 	bl	8004ef6 <HAL_I2C_GetState>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f4      	bne.n	80016b2 <I2C_n_byte_receive+0x32>

  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200002cc 	.word	0x200002cc

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
vec_4ax createQuaternionMsgFromYaw(float yaw)
{
  vec_4ax quat = {0};
  setRPY(0,0,yaw, &quat);
  return quat;
}
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10f      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 80016f2:	2229      	movs	r2, #41	@ 0x29
 80016f4:	2137      	movs	r1, #55	@ 0x37
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80016f8:	f7ff fcd8 	bl	80010ac <_ZN15Adafruit_BNO055C1Elh>
imu::Quaternion quat;
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016fe:	f7ff ff97 	bl	8001630 <_ZN3imu10QuaternionC1Ev>
imu::Vector<3> vec;
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001704:	f7ff ff54 	bl	80015b0 <_ZN3imu6VectorILh3EEC1Ev>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d105      	bne.n	8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001718:	4806      	ldr	r0, [pc, #24]	@ (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800171a:	f7ff ff1b 	bl	8001554 <_ZN3imu6VectorILh3EED1Ev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001720:	f7ff ff64 	bl	80015ec <_ZN15Adafruit_BNO055D1Ev>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200001f4 	.word	0x200001f4
 8001730:	20000208 	.word	0x20000208
 8001734:	20000228 	.word	0x20000228

08001738 <_GLOBAL__sub_I_bno>:
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffc9 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001746:	bd80      	pop	{r7, pc}

08001748 <_GLOBAL__sub_D_bno>:
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
 800174c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ffc1 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001756:	bd80      	pop	{r7, pc}

08001758 <as50_readAngle>:

	return (parity & 0x1);
}

void as50_readAngle(uint16_t * data, uint32_t timeout)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af02      	add	r7, sp, #8
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176c:	f003 f926 	bl	80049bc <HAL_GPIO_WritePin>
	  if (HAL_SPI_TransmitReceive(&_ENCODER_SPI, (uint8_t*)&read_angle_register, (uint8_t*)data, 1, timeout) == HAL_OK)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4910      	ldr	r1, [pc, #64]	@ (80017bc <as50_readAngle+0x64>)
 800177a:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <as50_readAngle+0x68>)
 800177c:	f005 fe42 	bl	8007404 <HAL_SPI_TransmitReceive>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10e      	bne.n	80017a4 <as50_readAngle+0x4c>
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800178c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001790:	f003 f914 	bl	80049bc <HAL_GPIO_WritePin>
		  *data &= _ENCODER_READMASK;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800179c:	b29a      	uxth	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	801a      	strh	r2, [r3, #0]
	  }
	  else
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
	  }
}
 80017a2:	e006      	b.n	80017b2 <as50_readAngle+0x5a>
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ae:	f003 f905 	bl	80049bc <HAL_GPIO_WritePin>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000490 	.word	0x20000490

080017c4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf0c      	ite	eq
 80017f6:	2301      	moveq	r3, #1
 80017f8:	2300      	movne	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d019      	beq.n	8001834 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3308      	adds	r3, #8
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	330c      	adds	r3, #12
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
        }
    }
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	4798      	blx	r3
    }
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_ZNSt8functionIFyvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ffd4 	bl	8001868 <_ZNSt14_Function_baseD1Ev>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_ZNSt8functionIFvvEED1Ev>:
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ffc7 	bl	8001868 <_ZNSt14_Function_baseD1Ev>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>:

struct UtilityConfig {
    const std::function<uint64_t()> micros_64;
    const std::function<void()> error_handler;

    explicit UtilityConfig(std::function<uint64_t()>&& micros, std::function<void()>&& handler):
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
        micros_64(micros),
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f850 	bl	800199a <_ZNSt8functionIFyvEEC1ERKS1_>
        error_handler(handler)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3310      	adds	r3, #16
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f875 	bl	80019f0 <_ZNSt8functionIFvvEEC1ERKS1_>
    {};
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3304      	adds	r3, #4
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f892 	bl	8001a46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <error_handler>:

std::byte buffer[sizeof(CyphalInterface) + sizeof(G4CAN) + sizeof(SystemAllocator)];
std::shared_ptr<CyphalInterface> interface;


void error_handler() { Error_Handler(); }
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
 8001930:	f001 f88b 	bl	8002a4a <Error_Handler>
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <micros_64>:
uint64_t micros_64() { return HAL_GetTick() * 1000; }
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	af00      	add	r7, sp, #0
 800193c:	f002 f930 	bl	8003ba0 <HAL_GetTick>
 8001940:	4603      	mov	r3, r0
 8001942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	2200      	movs	r2, #0
 800194c:	461c      	mov	r4, r3
 800194e:	4615      	mov	r5, r2
 8001950:	4622      	mov	r2, r4
 8001952:	462b      	mov	r3, r5
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	bdb0      	pop	{r4, r5, r7, pc}

0800195a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ffd3 	bl	8001910 <_ZNSt12__shared_ptrI15CyphalInterfaceLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	461a      	mov	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	6053      	str	r3, [r2, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_ZNSt8functionIFyvEEC1ERKS1_>:
       *  @post `bool(*this) == bool(__x)`
       *
       *  The newly-created %function contains a copy of the target of
       *  `__x` (if it has one).
       */
      function(const function& __x)
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	461a      	mov	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	6053      	str	r3, [r2, #4]
 80019ae:	6093      	str	r3, [r2, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ffde 	bl	8001974 <_ZNSt14_Function_baseC1Ev>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
      {
	if (static_cast<bool>(__x))
 80019be:	6838      	ldr	r0, [r7, #0]
 80019c0:	f000 f8b4 	bl	8001b2c <_ZNKSt8functionIFyvEEcvbEv>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <_ZNSt8functionIFyvEEC1ERKS1_+0x4c>
	  {
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	2202      	movs	r2, #2
 80019d4:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]
	  }
      }
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_ZNSt8functionIFvvEEC1ERKS1_>:
      function(const function& __x)
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	461a      	mov	r2, r3
 80019fe:	2300      	movs	r3, #0
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	6053      	str	r3, [r2, #4]
 8001a04:	6093      	str	r3, [r2, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ffb3 	bl	8001974 <_ZNSt14_Function_baseC1Ev>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8001a14:	6838      	ldr	r0, [r7, #0]
 8001a16:	f000 f899 	bl	8001b4c <_ZNKSt8functionIFvvEEcvbEv>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00d      	beq.n	8001a3c <_ZNSt8functionIFvvEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
      }
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff febe 	bl	80017dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	6053      	str	r3, [r2, #4]
 8001a80:	6093      	str	r3, [r2, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff75 	bl	8001974 <_ZNSt14_Function_baseC1Ev>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8001a90:	6838      	ldr	r0, [r7, #0]
 8001a92:	f000 f86b 	bl	8001b6c <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00e      	beq.n	8001aba <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8001a9c:	687c      	ldr	r4, [r7, #4]
 8001a9e:	6838      	ldr	r0, [r7, #0]
 8001aa0:	f000 f874 	bl	8001b8c <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f000 f87a 	bl	8001ba2 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x58>)
 8001ab2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <_ZNSt8functionIFyvEEC1IRS0_vEEOT_+0x5c>)
 8001ab8:	609a      	str	r2, [r3, #8]
	    }
	}
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	08001bc7 	.word	0x08001bc7
 8001ac8:	08001beb 	.word	0x08001beb

08001acc <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>:
	function(_Functor&& __f)
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2300      	movs	r3, #0
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	6053      	str	r3, [r2, #4]
 8001ae0:	6093      	str	r3, [r2, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff45 	bl	8001974 <_ZNSt14_Function_baseC1Ev>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f000 f899 	bl	8001c28 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8001afc:	687c      	ldr	r4, [r7, #4]
 8001afe:	6838      	ldr	r0, [r7, #0]
 8001b00:	f000 f8a2 	bl	8001c48 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4619      	mov	r1, r3
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f000 f8a8 	bl	8001c5e <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x58>)
 8001b12:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <_ZNSt8functionIFvvEEC1IRS0_vEEOT_+0x5c>)
 8001b18:	609a      	str	r2, [r3, #8]
	}
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}
 8001b24:	08001c83 	.word	0x08001c83
 8001b28:	08001ca1 	.word	0x08001ca1

08001b2c <_ZNKSt8functionIFyvEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fea9 	bl	800188e <_ZNKSt14_Function_base8_M_emptyEv>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f083 0301 	eor.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fe99 	bl	800188e <_ZNKSt14_Function_base8_M_emptyEv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f083 0301 	eor.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZNSt14_Function_base13_Base_managerIPFyvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8001ba2:	b590      	push	{r4, r7, lr}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8001bac:	6838      	ldr	r0, [r7, #0]
 8001bae:	f7ff ffed 	bl	8001b8c <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f890 	bl	8001cde <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd90      	pop	{r4, r7, pc}

08001bc6 <_ZNSt17_Function_handlerIFyvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f89d 	bl	8001d0e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f8a9 	bl	8001d2e <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
      }
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8001bea:	b590      	push	{r4, r7, lr}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d109      	bne.n	8001c12 <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8001bfe:	68b8      	ldr	r0, [r7, #8]
 8001c00:	f000 f885 	bl	8001d0e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8001c04:	4604      	mov	r4, r0
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f8a4 	bl	8001d54 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	601c      	str	r4, [r3, #0]
	    break;
 8001c10:	e005      	b.n	8001c1e <_ZNSt17_Function_handlerIFyvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	461a      	mov	r2, r3
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f8a7 	bl	8001d6c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8001c1e:	2300      	movs	r3, #0
      }
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}

08001c28 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRS1_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8001c68:	6838      	ldr	r0, [r7, #0]
 8001c6a:	f7ff ffed 	bl	8001c48 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4622      	mov	r2, r4
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f8b3 	bl	8001de0 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}

08001c82 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8c0 	bl	8001e10 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f8cc 	bl	8001e30 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8001c98:	bf00      	nop
      }
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	4613      	mov	r3, r2
 8001cac:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d109      	bne.n	8001cc8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8001cb4:	68b8      	ldr	r0, [r7, #8]
 8001cb6:	f000 f8ab 	bl	8001e10 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8001cba:	4604      	mov	r4, r0
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f8c7 	bl	8001e50 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	601c      	str	r4, [r3, #0]
	    break;
 8001cc6:	e005      	b.n	8001cd4 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f8ca 	bl	8001e68 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8001cd4:	2300      	movs	r3, #0
      }
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd90      	pop	{r4, r7, pc}

08001cde <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8001cde:	b590      	push	{r4, r7, lr}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f7ff fda6 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	2004      	movs	r0, #4
 8001cf6:	f7ff fd65 	bl	80017c4 <_ZnwjPv>
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	68b8      	ldr	r0, [r7, #8]
 8001cfe:	f7ff ff45 	bl	8001b8c <_ZSt7forwardIRFyvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001d02:	4603      	mov	r3, r0
 8001d04:	6023      	str	r3, [r4, #0]
	  }
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}

08001d0e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8e0 	bl	8001edc <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>
 8001d1c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f8e8 	bl	8001ef4 <_ZSt11__addressofIKPFyvEEPT_RS3_>
 8001d24:	4603      	mov	r3, r0
	}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZSt10__invoke_rIyRPFyvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8001d2e:	b590      	push	{r4, r7, lr}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8e7 	bl	8001f0a <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4620      	mov	r0, r4
 8001d42:	f000 f8ed 	bl	8001f20 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}

08001d54 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>:
      _M_access() noexcept
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fd6d 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d82a      	bhi.n	8001dd6 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8001d80:	a201      	add	r2, pc, #4	@ (adr r2, 8001d88 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8001d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d86:	bf00      	nop
 8001d88:	08001d99 	.word	0x08001d99
 8001d8c:	08001da7 	.word	0x08001da7
 8001d90:	08001dbb 	.word	0x08001dbb
 8001d94:	08001dcd 	.word	0x08001dcd
	      __dest._M_access<const type_info*>() = nullptr;
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f8d3 	bl	8001f44 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
	      break;
 8001da4:	e017      	b.n	8001dd6 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f7ff ffb1 	bl	8001d0e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8001dac:	4604      	mov	r4, r0
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7ff ffd0 	bl	8001d54 <_ZNSt9_Any_data9_M_accessIPPFyvEEERT_v>
 8001db4:	4603      	mov	r3, r0
 8001db6:	601c      	str	r4, [r3, #0]
	      break;
 8001db8:	e00d      	b.n	8001dd6 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8001dba:	68b8      	ldr	r0, [r7, #8]
 8001dbc:	f7ff ffa7 	bl	8001d0e <_ZNSt14_Function_base13_Base_managerIPFyvEE14_M_get_pointerERKSt9_Any_data>
 8001dc0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f8c9 	bl	8001f5c <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8001dca:	e004      	b.n	8001dd6 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8001dcc:	4621      	mov	r1, r4
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f8d6 	bl	8001f80 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8001dd4:	bf00      	nop
	  return false;
 8001dd6:	2300      	movs	r3, #0
	}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}

08001de0 <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRS1_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7ff fd25 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4619      	mov	r1, r3
 8001df6:	2004      	movs	r0, #4
 8001df8:	f7ff fce4 	bl	80017c4 <_ZnwjPv>
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	68b8      	ldr	r0, [r7, #8]
 8001e00:	f7ff ff22 	bl	8001c48 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e04:	4603      	mov	r3, r0
 8001e06:	6023      	str	r3, [r4, #0]
	  }
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd90      	pop	{r4, r7, pc}

08001e10 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f8bd 	bl	8001f98 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8001e1e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f8c5 	bl	8001fb0 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8001e26:	4603      	mov	r3, r0
	}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f8c4 	bl	8001fc6 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4619      	mov	r1, r3
 8001e42:	4620      	mov	r0, r4
 8001e44:	f000 f8ca 	bl	8001fdc <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
    }
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}

08001e50 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access() noexcept
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fcef 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	4613      	mov	r3, r2
 8001e74:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d82a      	bhi.n	8001ed2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8001e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e84 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001e95 	.word	0x08001e95
 8001e88:	08001ea3 	.word	0x08001ea3
 8001e8c:	08001eb7 	.word	0x08001eb7
 8001e90:	08001ec9 	.word	0x08001ec9
	      __dest._M_access<const type_info*>() = nullptr;
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f855 	bl	8001f44 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
	      break;
 8001ea0:	e017      	b.n	8001ed2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8001ea2:	68b8      	ldr	r0, [r7, #8]
 8001ea4:	f7ff ffb4 	bl	8001e10 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7ff ffd0 	bl	8001e50 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	601c      	str	r4, [r3, #0]
	      break;
 8001eb4:	e00d      	b.n	8001ed2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8001eb6:	68b8      	ldr	r0, [r7, #8]
 8001eb8:	f7ff ffaa 	bl	8001e10 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8001ebc:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f89a 	bl	8001ffa <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8001ec6:	e004      	b.n	8001ed2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8001ec8:	4621      	mov	r1, r4
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f8a7 	bl	800201e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8001ed0:	bf00      	nop
	  return false;
 8001ed2:	2300      	movs	r3, #0
	}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}

08001edc <_ZNKSt9_Any_data9_M_accessIPFyvEEERKT_v>:
      _M_access() const noexcept
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff fcb4 	bl	8001852 <_ZNKSt9_Any_data9_M_accessEv>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_ZSt11__addressofIKPFyvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_ZSt13__invoke_implIyRPFyvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	7138      	strb	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001f2a:	6838      	ldr	r0, [r7, #0]
 8001f2c:	f7ff ffed 	bl	8001f0a <_ZSt7forwardIRPFyvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001f30:	4603      	mov	r3, r0
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4798      	blx	r3
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fc75 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_ZNSt14_Function_base13_Base_managerIPFyvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f000 f865 	bl	8002036 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4622      	mov	r2, r4
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f86a 	bl	800204c <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd90      	pop	{r4, r7, pc}

08001f80 <_ZNSt14_Function_base13_Base_managerIPFyvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f877 	bl	800207e <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>
	}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const noexcept
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fc56 	bl	8001852 <_ZNKSt9_Any_data9_M_accessEv>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	7138      	strb	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001fe6:	6838      	ldr	r0, [r7, #0]
 8001fe8:	f7ff ffed 	bl	8001fc6 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001fec:	4603      	mov	r3, r0
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4798      	blx	r3
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8001ffa:	b590      	push	{r4, r7, lr}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8002004:	6838      	ldr	r0, [r7, #0]
 8002006:	f000 f846 	bl	8002096 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 800200a:	4603      	mov	r3, r0
 800200c:	4622      	mov	r2, r4
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f84b 	bl	80020ac <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}

0800201e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f858 	bl	80020de <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_ZNSt14_Function_base13_Base_managerIPFyvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff fbef 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 800205e:	4603      	mov	r3, r0
 8002060:	4619      	mov	r1, r3
 8002062:	2004      	movs	r0, #4
 8002064:	f7ff fbae 	bl	80017c4 <_ZnwjPv>
 8002068:	4604      	mov	r4, r0
 800206a:	68b8      	ldr	r0, [r7, #8]
 800206c:	f7ff ffe3 	bl	8002036 <_ZSt7forwardIRKPFyvEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002070:	4603      	mov	r3, r0
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6023      	str	r3, [r4, #0]
	  }
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}

0800207e <_ZNSt9_Any_data9_M_accessIPFyvEEERT_v>:
      _M_access() noexcept
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fbd8 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 800208c:	4603      	mov	r3, r0
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_ZNSt14_Function_base13_Base_managerIPFvvEE9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff fbbf 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 80020be:	4603      	mov	r3, r0
 80020c0:	4619      	mov	r1, r3
 80020c2:	2004      	movs	r0, #4
 80020c4:	f7ff fb7e 	bl	80017c4 <_ZnwjPv>
 80020c8:	4604      	mov	r4, r0
 80020ca:	68b8      	ldr	r0, [r7, #8]
 80020cc:	f7ff ffe3 	bl	8002096 <_ZSt7forwardIRKPFvvEEOT_RNSt16remove_referenceIS4_E4typeE>
 80020d0:	4603      	mov	r3, r0
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6023      	str	r3, [r4, #0]
	  }
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}

080020de <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access() noexcept
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fba8 	bl	800183c <_ZNSt9_Any_data9_M_accessEv>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>:
      { return _M_t._M_ptr(); }

      /// Return a reference to the stored deleter.
      _GLIBCXX23_CONSTEXPR
      deleter_type&
      get_deleter() noexcept
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f810 	bl	8002126 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>
 8002106:	4603      	mov	r3, r0
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f823 	bl	800217c <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002136:	4603      	mov	r3, r0
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f822 	bl	8002194 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002150:	4603      	mov	r3, r0
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>:
      operator()(_Tp* __ptr) const
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_+0x1a>
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	320c      	adds	r2, #12
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	4790      	blx	r2
      }
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_ZSt3getILj1EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f812 	bl	80021ae <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800218a:	4603      	mov	r3, r0
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_ZSt3getILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f811 	bl	80021c6 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_ZSt12__get_helperILj1ESt14default_deleteI17AbstractAllocatorEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f811 	bl	80021de <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>
 80021bc:	4603      	mov	r3, r0
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_ZSt12__get_helperILj0EP17AbstractAllocatorJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f811 	bl	80021f6 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17AbstractAllocatorEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f812 	bl	8002210 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_ZNSt11_Tuple_implILj0EJP17AbstractAllocatorSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4618      	mov	r0, r3
 8002202:	f000 f810 	bl	8002226 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>
 8002206:	4603      	mov	r3, r0
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZNSt10_Head_baseILj1ESt14default_deleteI17AbstractAllocatorELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_ZNSt10_Head_baseILj0EP17AbstractAllocatorLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_ZN13UtilityConfigD1Ev>:
struct UtilityConfig {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3310      	adds	r3, #16
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fb3e 	bl	80018ca <_ZNSt8functionIFvvEED1Ev>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fb2d 	bl	80018b0 <_ZNSt8functionIFyvEED1Ev>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_Z41__static_initialization_and_destruction_0ii>:
}




}
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	@ 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d122      	bne.n	80022b6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002276:	4293      	cmp	r3, r2
 8002278:	d11d      	bne.n	80022b6 <_Z41__static_initialization_and_destruction_0ii+0x56>
UtilityConfig utilities(micros_64, error_handler);
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	4917      	ldr	r1, [pc, #92]	@ (80022dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fbf3 	bl	8001a6c <_ZNSt8functionIFyvEEC1IRS0_vEEOT_>
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	4915      	ldr	r1, [pc, #84]	@ (80022e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fc1d 	bl	8001acc <_ZNSt8functionIFvvEEC1IRS0_vEEOT_>
 8002292:	f107 0218 	add.w	r2, r7, #24
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	4619      	mov	r1, r3
 800229c:	4811      	ldr	r0, [pc, #68]	@ (80022e4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800229e:	f7ff fb21 	bl	80018e4 <_ZN13UtilityConfigC1EOSt8functionIFyvEEOS0_IFvvEE>
 80022a2:	f107 0318 	add.w	r3, r7, #24
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fb0f 	bl	80018ca <_ZNSt8functionIFvvEED1Ev>
 80022ac:	f107 0308 	add.w	r3, r7, #8
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fafd 	bl	80018b0 <_ZNSt8functionIFyvEED1Ev>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10a      	bne.n	80022d2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d105      	bne.n	80022d2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80022c6:	4807      	ldr	r0, [pc, #28]	@ (80022e4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80022c8:	f7ff ffb8 	bl	800223c <_ZN13UtilityConfigD1Ev>
std::shared_ptr<CyphalInterface> interface;
 80022cc:	4806      	ldr	r0, [pc, #24]	@ (80022e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80022ce:	f7ff fb44 	bl	800195a <_ZNSt10shared_ptrI15CyphalInterfaceED1Ev>
}
 80022d2:	bf00      	nop
 80022d4:	3728      	adds	r7, #40	@ 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	08001939 	.word	0x08001939
 80022e0:	0800192d 	.word	0x0800192d
 80022e4:	20000248 	.word	0x20000248
 80022e8:	20000240 	.word	0x20000240

080022ec <_GLOBAL__sub_I_buffer>:
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7ff ffb3 	bl	8002260 <_Z41__static_initialization_and_destruction_0ii>
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_GLOBAL__sub_D_buffer>:
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
 8002300:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff ffab 	bl	8002260 <_Z41__static_initialization_and_destruction_0ii>
 800230a:	bd80      	pop	{r7, pc}

0800230c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002312:	4b16      	ldr	r3, [pc, #88]	@ (800236c <MX_DMA_Init+0x60>)
 8002314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002316:	4a15      	ldr	r2, [pc, #84]	@ (800236c <MX_DMA_Init+0x60>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6493      	str	r3, [r2, #72]	@ 0x48
 800231e:	4b13      	ldr	r3, [pc, #76]	@ (800236c <MX_DMA_Init+0x60>)
 8002320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800232a:	4b10      	ldr	r3, [pc, #64]	@ (800236c <MX_DMA_Init+0x60>)
 800232c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232e:	4a0f      	ldr	r2, [pc, #60]	@ (800236c <MX_DMA_Init+0x60>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6493      	str	r3, [r2, #72]	@ 0x48
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <MX_DMA_Init+0x60>)
 8002338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	200b      	movs	r0, #11
 8002348:	f001 fd33 	bl	8003db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800234c:	200b      	movs	r0, #11
 800234e:	f001 fd4a 	bl	8003de6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	200c      	movs	r0, #12
 8002358:	f001 fd2b 	bl	8003db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800235c:	200c      	movs	r0, #12
 800235e:	f001 fd42 	bl	8003de6 <HAL_NVIC_EnableIRQ>

}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000

08002370 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002374:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 8002376:	4a21      	ldr	r2, [pc, #132]	@ (80023fc <MX_FDCAN1_Init+0x8c>)
 8002378:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800237a:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 8002382:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002386:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002388:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800238e:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 8002390:	2201      	movs	r2, #1
 8002392:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 8002396:	2201      	movs	r2, #1
 8002398:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800239a:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 800239c:	2200      	movs	r2, #0
 800239e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80023a0:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023a2:	2204      	movs	r2, #4
 80023a4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80023a6:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023ae:	221d      	movs	r2, #29
 80023b0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 80023b2:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023b4:	220a      	movs	r2, #10
 80023b6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023ba:	2204      	movs	r2, #4
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80023be:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023c6:	2202      	movs	r2, #2
 80023c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023cc:	2202      	movs	r2, #2
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 3;
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023d8:	2203      	movs	r2, #3
 80023da:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023de:	2200      	movs	r2, #0
 80023e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <MX_FDCAN1_Init+0x88>)
 80023e4:	f001 ffa2 	bl	800432c <HAL_FDCAN_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80023ee:	f000 fb2c 	bl	8002a4a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000268 	.word	0x20000268
 80023fc:	40006400 	.word	0x40006400

08002400 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b09e      	sub	sp, #120	@ 0x78
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002418:	f107 0310 	add.w	r3, r7, #16
 800241c:	2254      	movs	r2, #84	@ 0x54
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f008 fc06 	bl	800ac32 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a20      	ldr	r2, [pc, #128]	@ (80024ac <HAL_FDCAN_MspInit+0xac>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d138      	bne.n	80024a2 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002434:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002436:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800243a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4618      	mov	r0, r3
 8002442:	f004 fb71 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800244c:	f000 fafd 	bl	8002a4a <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002450:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <HAL_FDCAN_MspInit+0xb0>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002454:	4a16      	ldr	r2, [pc, #88]	@ (80024b0 <HAL_FDCAN_MspInit+0xb0>)
 8002456:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800245a:	6593      	str	r3, [r2, #88]	@ 0x58
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <HAL_FDCAN_MspInit+0xb0>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <HAL_FDCAN_MspInit+0xb0>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246c:	4a10      	ldr	r2, [pc, #64]	@ (80024b0 <HAL_FDCAN_MspInit+0xb0>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002474:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <HAL_FDCAN_MspInit+0xb0>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002480:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002484:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002492:	2309      	movs	r3, #9
 8002494:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <HAL_FDCAN_MspInit+0xb4>)
 800249e:	f002 f90b 	bl	80046b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80024a2:	bf00      	nop
 80024a4:	3778      	adds	r7, #120	@ 0x78
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40006400 	.word	0x40006400
 80024b0:	40021000 	.word	0x40021000
 80024b4:	48000400 	.word	0x48000400

080024b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	60da      	str	r2, [r3, #12]
 80024cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ce:	4b4a      	ldr	r3, [pc, #296]	@ (80025f8 <MX_GPIO_Init+0x140>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	4a49      	ldr	r2, [pc, #292]	@ (80025f8 <MX_GPIO_Init+0x140>)
 80024d4:	f043 0320 	orr.w	r3, r3, #32
 80024d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024da:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <MX_GPIO_Init+0x140>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	4b44      	ldr	r3, [pc, #272]	@ (80025f8 <MX_GPIO_Init+0x140>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	4a43      	ldr	r2, [pc, #268]	@ (80025f8 <MX_GPIO_Init+0x140>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f2:	4b41      	ldr	r3, [pc, #260]	@ (80025f8 <MX_GPIO_Init+0x140>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	4b3e      	ldr	r3, [pc, #248]	@ (80025f8 <MX_GPIO_Init+0x140>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002502:	4a3d      	ldr	r2, [pc, #244]	@ (80025f8 <MX_GPIO_Init+0x140>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800250a:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <MX_GPIO_Init+0x140>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002516:	4b38      	ldr	r3, [pc, #224]	@ (80025f8 <MX_GPIO_Init+0x140>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	4a37      	ldr	r2, [pc, #220]	@ (80025f8 <MX_GPIO_Init+0x140>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002522:	4b35      	ldr	r3, [pc, #212]	@ (80025f8 <MX_GPIO_Init+0x140>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	4b32      	ldr	r3, [pc, #200]	@ (80025f8 <MX_GPIO_Init+0x140>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002532:	4a31      	ldr	r2, [pc, #196]	@ (80025f8 <MX_GPIO_Init+0x140>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800253a:	4b2f      	ldr	r3, [pc, #188]	@ (80025f8 <MX_GPIO_Init+0x140>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8002546:	2200      	movs	r2, #0
 8002548:	f649 3110 	movw	r1, #39696	@ 0x9b10
 800254c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002550:	f002 fa34 	bl	80049bc <HAL_GPIO_WritePin>
                          |SD_MODE_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8002554:	2200      	movs	r2, #0
 8002556:	2120      	movs	r1, #32
 8002558:	4828      	ldr	r0, [pc, #160]	@ (80025fc <MX_GPIO_Init+0x144>)
 800255a:	f002 fa2f 	bl	80049bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800255e:	2200      	movs	r2, #0
 8002560:	2104      	movs	r1, #4
 8002562:	4827      	ldr	r0, [pc, #156]	@ (8002600 <MX_GPIO_Init+0x148>)
 8002564:	f002 fa2a 	bl	80049bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VC_CONTROL_Pin;
 8002568:	2301      	movs	r3, #1
 800256a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256c:	2303      	movs	r3, #3
 800256e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VC_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	4820      	ldr	r0, [pc, #128]	@ (80025fc <MX_GPIO_Init+0x144>)
 800257c:	f002 f89c 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIAG0_SWN_Pin|DIAG1_SWP_Pin;
 8002580:	230c      	movs	r3, #12
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	481a      	ldr	r0, [pc, #104]	@ (80025fc <MX_GPIO_Init+0x144>)
 8002594:	f002 f890 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|DIR_Pin|SPI_MODE_Pin
 8002598:	f649 3310 	movw	r3, #39696	@ 0x9b10
 800259c:	617b      	str	r3, [r7, #20]
                          |SD_MODE_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025b4:	f002 f880 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 80025b8:	2320      	movs	r3, #32
 80025ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	2301      	movs	r3, #1
 80025be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	480b      	ldr	r0, [pc, #44]	@ (80025fc <MX_GPIO_Init+0x144>)
 80025d0:	f002 f872 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80025d4:	2304      	movs	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d8:	2301      	movs	r3, #1
 80025da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4619      	mov	r1, r3
 80025ea:	4805      	ldr	r0, [pc, #20]	@ (8002600 <MX_GPIO_Init+0x148>)
 80025ec:	f002 f864 	bl	80046b8 <HAL_GPIO_Init>

}
 80025f0:	bf00      	nop
 80025f2:	3728      	adds	r7, #40	@ 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	48000800 	.word	0x48000800
 8002600:	48000c00 	.word	0x48000c00

08002604 <MX_I2C4_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <MX_I2C4_Init+0x74>)
 800260a:	4a1c      	ldr	r2, [pc, #112]	@ (800267c <MX_I2C4_Init+0x78>)
 800260c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702991;
 800260e:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <MX_I2C4_Init+0x74>)
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <MX_I2C4_Init+0x7c>)
 8002612:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002614:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <MX_I2C4_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800261a:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <MX_I2C4_Init+0x74>)
 800261c:	2201      	movs	r2, #1
 800261e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002620:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <MX_I2C4_Init+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002626:	4b14      	ldr	r3, [pc, #80]	@ (8002678 <MX_I2C4_Init+0x74>)
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800262c:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <MX_I2C4_Init+0x74>)
 800262e:	2200      	movs	r2, #0
 8002630:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <MX_I2C4_Init+0x74>)
 8002634:	2200      	movs	r2, #0
 8002636:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <MX_I2C4_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800263e:	480e      	ldr	r0, [pc, #56]	@ (8002678 <MX_I2C4_Init+0x74>)
 8002640:	f002 f9ee 	bl	8004a20 <HAL_I2C_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800264a:	f000 f9fe 	bl	8002a4a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800264e:	2100      	movs	r1, #0
 8002650:	4809      	ldr	r0, [pc, #36]	@ (8002678 <MX_I2C4_Init+0x74>)
 8002652:	f003 fbef 	bl	8005e34 <HAL_I2CEx_ConfigAnalogFilter>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800265c:	f000 f9f5 	bl	8002a4a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002660:	2100      	movs	r1, #0
 8002662:	4805      	ldr	r0, [pc, #20]	@ (8002678 <MX_I2C4_Init+0x74>)
 8002664:	f003 fc31 	bl	8005eca <HAL_I2CEx_ConfigDigitalFilter>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800266e:	f000 f9ec 	bl	8002a4a <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200002cc 	.word	0x200002cc
 800267c:	40008400 	.word	0x40008400
 8002680:	00702991 	.word	0x00702991

08002684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b0a0      	sub	sp, #128	@ 0x80
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	2254      	movs	r2, #84	@ 0x54
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f008 fac4 	bl	800ac32 <memset>
  if(i2cHandle->Instance==I2C4)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002828 <HAL_I2C_MspInit+0x1a4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	f040 80b5 	bne.w	8002820 <HAL_I2C_MspInit+0x19c>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80026b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80026bc:	2300      	movs	r3, #0
 80026be:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c0:	f107 0318 	add.w	r3, r7, #24
 80026c4:	4618      	mov	r0, r3
 80026c6:	f004 fa2f 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80026d0:	f000 f9bb 	bl	8002a4a <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d4:	4b55      	ldr	r3, [pc, #340]	@ (800282c <HAL_I2C_MspInit+0x1a8>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d8:	4a54      	ldr	r2, [pc, #336]	@ (800282c <HAL_I2C_MspInit+0x1a8>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e0:	4b52      	ldr	r3, [pc, #328]	@ (800282c <HAL_I2C_MspInit+0x1a8>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b4f      	ldr	r3, [pc, #316]	@ (800282c <HAL_I2C_MspInit+0x1a8>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f0:	4a4e      	ldr	r2, [pc, #312]	@ (800282c <HAL_I2C_MspInit+0x1a8>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f8:	4b4c      	ldr	r3, [pc, #304]	@ (800282c <HAL_I2C_MspInit+0x1a8>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002704:	2340      	movs	r3, #64	@ 0x40
 8002706:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002708:	2312      	movs	r3, #18
 800270a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8002714:	2308      	movs	r3, #8
 8002716:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002718:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800271c:	4619      	mov	r1, r3
 800271e:	4844      	ldr	r0, [pc, #272]	@ (8002830 <HAL_I2C_MspInit+0x1ac>)
 8002720:	f001 ffca 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002728:	2312      	movs	r3, #18
 800272a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8002734:	2303      	movs	r3, #3
 8002736:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800273c:	4619      	mov	r1, r3
 800273e:	483d      	ldr	r0, [pc, #244]	@ (8002834 <HAL_I2C_MspInit+0x1b0>)
 8002740:	f001 ffba 	bl	80046b8 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002744:	4b39      	ldr	r3, [pc, #228]	@ (800282c <HAL_I2C_MspInit+0x1a8>)
 8002746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002748:	4a38      	ldr	r2, [pc, #224]	@ (800282c <HAL_I2C_MspInit+0x1a8>)
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002750:	4b36      	ldr	r3, [pc, #216]	@ (800282c <HAL_I2C_MspInit+0x1a8>)
 8002752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 800275c:	4b36      	ldr	r3, [pc, #216]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 800275e:	4a37      	ldr	r2, [pc, #220]	@ (800283c <HAL_I2C_MspInit+0x1b8>)
 8002760:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 8002762:	4b35      	ldr	r3, [pc, #212]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 8002764:	2216      	movs	r2, #22
 8002766:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002768:	4b33      	ldr	r3, [pc, #204]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800276e:	4b32      	ldr	r3, [pc, #200]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 8002770:	2200      	movs	r2, #0
 8002772:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002774:	4b30      	ldr	r3, [pc, #192]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800277a:	4b2f      	ldr	r3, [pc, #188]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 800277c:	2200      	movs	r2, #0
 800277e:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002780:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 8002782:	2200      	movs	r2, #0
 8002784:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8002786:	4b2c      	ldr	r3, [pc, #176]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 8002788:	2200      	movs	r2, #0
 800278a:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8002792:	4829      	ldr	r0, [pc, #164]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 8002794:	f001 fb42 	bl	8003e1c <HAL_DMA_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 800279e:	f000 f954 	bl	8002a4a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a24      	ldr	r2, [pc, #144]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 80027a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027a8:	4a23      	ldr	r2, [pc, #140]	@ (8002838 <HAL_I2C_MspInit+0x1b4>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 80027ae:	4b24      	ldr	r3, [pc, #144]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027b0:	4a24      	ldr	r2, [pc, #144]	@ (8002844 <HAL_I2C_MspInit+0x1c0>)
 80027b2:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 80027b4:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027b6:	2217      	movs	r2, #23
 80027b8:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027ba:	4b21      	ldr	r3, [pc, #132]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027bc:	2210      	movs	r2, #16
 80027be:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027c8:	2280      	movs	r2, #128	@ 0x80
 80027ca:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027de:	4b18      	ldr	r3, [pc, #96]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80027e4:	4816      	ldr	r0, [pc, #88]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027e6:	f001 fb19 	bl	8003e1c <HAL_DMA_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_I2C_MspInit+0x170>
    {
      Error_Handler();
 80027f0:	f000 f92b 	bl	8002a4a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80027fa:	4a11      	ldr	r2, [pc, #68]	@ (8002840 <HAL_I2C_MspInit+0x1bc>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	2100      	movs	r1, #0
 8002804:	2052      	movs	r0, #82	@ 0x52
 8002806:	f001 fad4 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800280a:	2052      	movs	r0, #82	@ 0x52
 800280c:	f001 faeb 	bl	8003de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8002810:	2200      	movs	r2, #0
 8002812:	2100      	movs	r1, #0
 8002814:	2053      	movs	r0, #83	@ 0x53
 8002816:	f001 facc 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800281a:	2053      	movs	r0, #83	@ 0x53
 800281c:	f001 fae3 	bl	8003de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8002820:	bf00      	nop
 8002822:	3780      	adds	r7, #128	@ 0x80
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40008400 	.word	0x40008400
 800282c:	40021000 	.word	0x40021000
 8002830:	48000800 	.word	0x48000800
 8002834:	48000400 	.word	0x48000400
 8002838:	20000320 	.word	0x20000320
 800283c:	40020008 	.word	0x40020008
 8002840:	20000380 	.word	0x20000380
 8002844:	4002001c 	.word	0x4002001c

08002848 <motor_config_assembler>:
	  domain_id_selector(jconf);
#endif
}

void motor_config_assembler(motor_config * mc, joint_config * jc)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	{
		mc->motor_type = 14;
	}
	else if (JOINT_N == 6)
	{
		mc->motor_type = 14;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	220e      	movs	r2, #14
 8002856:	701a      	strb	r2, [r3, #0]
	}

	switch(mc->motor_type)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f993 3000 	ldrsb.w	r3, [r3]
 800285e:	2b17      	cmp	r3, #23
 8002860:	d01b      	beq.n	800289a <motor_config_assembler+0x52>
 8002862:	2b17      	cmp	r3, #23
 8002864:	dc23      	bgt.n	80028ae <motor_config_assembler+0x66>
 8002866:	2b0e      	cmp	r3, #14
 8002868:	d002      	beq.n	8002870 <motor_config_assembler+0x28>
 800286a:	2b11      	cmp	r3, #17
 800286c:	d00b      	beq.n	8002886 <motor_config_assembler+0x3e>
 800286e:	e01e      	b.n	80028ae <motor_config_assembler+0x66>
	{
	case 14:
		mc->max_irun_scaler = 34;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2222      	movs	r2, #34	@ 0x22
 8002874:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 0.5;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800287c:	605a      	str	r2, [r3, #4]
		mc->init_irun = 2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	725a      	strb	r2, [r3, #9]
		break;
 8002884:	e013      	b.n	80028ae <motor_config_assembler+0x66>
	case 17:
		mc->max_irun_scaler = 0;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 3.9;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <motor_config_assembler+0x7c>)
 8002890:	605a      	str	r2, [r3, #4]
		mc->init_irun = 6;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2206      	movs	r2, #6
 8002896:	725a      	strb	r2, [r3, #9]
		break;
 8002898:	e009      	b.n	80028ae <motor_config_assembler+0x66>
	case 23:
		mc->max_irun_scaler = 0;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	721a      	strb	r2, [r3, #8]
		mc->max_effort = 10.2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a09      	ldr	r2, [pc, #36]	@ (80028c8 <motor_config_assembler+0x80>)
 80028a4:	605a      	str	r2, [r3, #4]
		mc->init_irun = 15;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	220f      	movs	r2, #15
 80028aa:	725a      	strb	r2, [r3, #9]
		break;
 80028ac:	bf00      	nop
	}
	mc->direction = jc->direction;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	729a      	strb	r2, [r3, #10]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	4079999a 	.word	0x4079999a
 80028c8:	41233333 	.word	0x41233333

080028cc <joint_config_assembler>:


void joint_config_assembler(joint_config * jconf, joint_config_address * jc_a)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
		jconf->lower_limit_ticks = 0;
		jconf->upper_limit_ticks = 0;
	}
	else if (JOINT_N == 6)
	{
		jconf->motor_gear_ratio = 19.203208;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a20      	ldr	r2, [pc, #128]	@ (800295c <joint_config_assembler+0x90>)
 80028da:	60da      	str	r2, [r3, #12]
		jconf->joint_gear_ratio = 1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80028e2:	609a      	str	r2, [r3, #8]
		jconf->full_steps = (uint32_t)(256 * 200* jconf->motor_gear_ratio * jconf->joint_gear_ratio);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80028ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002960 <joint_config_assembler+0x94>
 80028ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80028f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002900:	ee17 2a90 	vmov	r2, s15
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	605a      	str	r2, [r3, #4]
		jconf->direction = -1;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	22ff      	movs	r2, #255	@ 0xff
 800290c:	705a      	strb	r2, [r3, #1]
		jconf->lower_limit_ticks = 0;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
		jconf->upper_limit_ticks = 0;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
	}

	//TODO!!!!!!!!!!!!!!!!!!!!!!!!! from config read
	jconf->lower_limit_enc = 0.0;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
	jconf->upper_limit_enc = 0.0;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
	jconf->zero_enc = 0;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]
	//TODO!!!!!!!!!!!!!!!!!!!!!!!!!

	jc_a->address_of_upper_limit_enc = 0x00;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	801a      	strh	r2, [r3, #0]
	jc_a->address_of_lower_limit_enc = jc_a->address_of_upper_limit_enc + sizeof(jconf->upper_limit_enc);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	3304      	adds	r3, #4
 800293c:	b29a      	uxth	r2, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	805a      	strh	r2, [r3, #2]
	jc_a->address_of_zero_enc = jc_a->address_of_lower_limit_enc + sizeof(jconf->lower_limit_enc);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	885b      	ldrh	r3, [r3, #2]
 8002946:	3304      	adds	r3, #4
 8002948:	b29a      	uxth	r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	809a      	strh	r2, [r3, #4]

}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	4199a02c 	.word	0x4199a02c
 8002960:	47480000 	.word	0x47480000

08002964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002968:	f001 f8b5 	bl	8003ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800296c:	f000 f822 	bl	80029b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002970:	f7ff fda2 	bl	80024b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002974:	f7ff fcca 	bl	800230c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002978:	f7ff fcfa 	bl	8002370 <MX_FDCAN1_Init>
  MX_I2C4_Init();
 800297c:	f7ff fe42 	bl	8002604 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8002980:	f000 ffd4 	bl	800392c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002984:	f000 f976 	bl	8002c74 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002988:	f000 f9b2 	bl	8002cf0 <MX_SPI3_Init>
  MX_TIM8_Init();
 800298c:	f000 fc56 	bl	800323c <MX_TIM8_Init>
  MX_TIM7_Init();
 8002990:	f000 fc1c 	bl	80031cc <MX_TIM7_Init>
  MX_TIM6_Init();
 8002994:	f000 fbe4 	bl	8003160 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8002998:	4804      	ldr	r0, [pc, #16]	@ (80029ac <main+0x48>)
 800299a:	f005 fa25 	bl	8007de8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800299e:	4804      	ldr	r0, [pc, #16]	@ (80029b0 <main+0x4c>)
 80029a0:	f005 fa22 	bl	8007de8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  main_cpp();
 80029a4:	f000 f858 	bl	8002a58 <main_cpp>

  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <main+0x44>
 80029ac:	20000544 	.word	0x20000544
 80029b0:	200004f8 	.word	0x200004f8

080029b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b094      	sub	sp, #80	@ 0x50
 80029b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ba:	f107 0318 	add.w	r3, r7, #24
 80029be:	2238      	movs	r2, #56	@ 0x38
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f008 f935 	bl	800ac32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f003 fac4 	bl	8005f64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029dc:	2301      	movs	r3, #1
 80029de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029e4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e6:	2302      	movs	r3, #2
 80029e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029ea:	2303      	movs	r3, #3
 80029ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80029f2:	2328      	movs	r3, #40	@ 0x28
 80029f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029f6:	2302      	movs	r3, #2
 80029f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029fa:	2302      	movs	r3, #2
 80029fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029fe:	2302      	movs	r3, #2
 8002a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a02:	f107 0318 	add.w	r3, r7, #24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 fb60 	bl	80060cc <HAL_RCC_OscConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002a12:	f000 f81a 	bl	8002a4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a16:	230f      	movs	r3, #15
 8002a18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	2104      	movs	r1, #4
 8002a32:	4618      	mov	r0, r3
 8002a34:	f003 fe5c 	bl	80066f0 <HAL_RCC_ClockConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002a3e:	f000 f804 	bl	8002a4a <Error_Handler>
  }
}
 8002a42:	bf00      	nop
 8002a44:	3750      	adds	r7, #80	@ 0x50
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a4e:	b672      	cpsid	i
}
 8002a50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a52:	bf00      	nop
 8002a54:	e7fd      	b.n	8002a52 <Error_Handler+0x8>
	...

08002a58 <main_cpp>:
joint_config jc;
joint_config_address jc_a;
uint16_t enc_angle = 0;

void main_cpp()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b090      	sub	sp, #64	@ 0x40
 8002a5c:	af00      	add	r7, sp, #0
	//cyphal_can_starter(&hfdcan1);
	//setup_cyphal(&hfdcan1);
	HAL_Delay(10);
 8002a5e:	200a      	movs	r0, #10
 8002a60:	f001 f8aa 	bl	8003bb8 <HAL_Delay>
	joint_config_assembler(&jc, &jc_a);
 8002a64:	491a      	ldr	r1, [pc, #104]	@ (8002ad0 <main_cpp+0x78>)
 8002a66:	481b      	ldr	r0, [pc, #108]	@ (8002ad4 <main_cpp+0x7c>)
 8002a68:	f7ff ff30 	bl	80028cc <joint_config_assembler>
	motor_config_assembler(&mc, &jc);
 8002a6c:	4919      	ldr	r1, [pc, #100]	@ (8002ad4 <main_cpp+0x7c>)
 8002a6e:	481a      	ldr	r0, [pc, #104]	@ (8002ad8 <main_cpp+0x80>)
 8002a70:	f7ff feea 	bl	8002848 <motor_config_assembler>
	//joint_config_read(&jc, &jc_a);
	HAL_Delay(10);
 8002a74:	200a      	movs	r0, #10
 8002a76:	f001 f89f 	bl	8003bb8 <HAL_Delay>
	tmc5160_init(&mc);
 8002a7a:	4817      	ldr	r0, [pc, #92]	@ (8002ad8 <main_cpp+0x80>)
 8002a7c:	f000 fdec 	bl	8003658 <tmc5160_init>
	//js_init();
	HAL_Delay(10);
 8002a80:	200a      	movs	r0, #10
 8002a82:	f001 f899 	bl	8003bb8 <HAL_Delay>
	//uint8_t msg[10];
	//int i = 0;

	HAL_StatusTypeDef rv;

	uint32_t last_hbeat = HAL_GetTick();
 8002a86:	f001 f88b 	bl	8003ba0 <HAL_GetTick>
 8002a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	uint32_t last_js = HAL_GetTick();
 8002a8c:	f001 f888 	bl	8003ba0 <HAL_GetTick>
 8002a90:	63b8      	str	r0, [r7, #56]	@ 0x38
	uint32_t last_AR = HAL_GetTick();
 8002a92:	f001 f885 	bl	8003ba0 <HAL_GetTick>
 8002a96:	6378      	str	r0, [r7, #52]	@ 0x34

	vec_4ax linear = {0};
 8002a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
	vec_4ax quat = {0};
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
	vec_4ax gyro = {0};
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]

	tmc5160_move(50000);
 8002ac0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ac4:	f000 fcb8 	bl	8003438 <tmc5160_move>
//	    	  //as50_readAngle(&enc_angle, 100);
//	    	  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
//	      }
//	      cyphal_loop();
//	}
};
 8002ac8:	bf00      	nop
 8002aca:	3740      	adds	r7, #64	@ 0x40
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000410 	.word	0x20000410
 8002ad4:	200003ec 	.word	0x200003ec
 8002ad8:	200003e0 	.word	0x200003e0

08002adc <HAL_TIM_PeriodElapsedCallback>:

static float angle_enc_read_for_debug = 0.0;
static uint16_t enc_ticks_read_for_debug = 0;

//Основной цикл управления 1кГц здесь читается энкодер, к нему применяется фильтр и выдется управление на мотор в зависимости от уставки пришедшей сверху через cyphal
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d102      	bne.n	8002af4 <HAL_TIM_PeriodElapsedCallback+0x18>
        m.update();
 8002aee:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002af0:	f000 f833 	bl	8002b5a <_ZN5motor6updateEv>
    }
    if (htim->Instance == TIM6) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b28 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10b      	bne.n	8002b16 <HAL_TIM_PeriodElapsedCallback+0x3a>
    	angle_enc_read_for_debug = m.read_encoder();
 8002afe:	4809      	ldr	r0, [pc, #36]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b00:	f000 f836 	bl	8002b70 <_ZN5motor12read_encoderEv>
 8002b04:	eef0 7a40 	vmov.f32	s15, s0
 8002b08:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b0a:	edc3 7a00 	vstr	s15, [r3]
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8002b0e:	2104      	movs	r1, #4
 8002b10:	4807      	ldr	r0, [pc, #28]	@ (8002b30 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002b12:	f001 ff6b 	bl	80049ec <HAL_GPIO_TogglePin>
    }
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40001400 	.word	0x40001400
 8002b24:	20000418 	.word	0x20000418
 8002b28:	40001000 	.word	0x40001000
 8002b2c:	20000424 	.word	0x20000424
 8002b30:	48000c00 	.word	0x48000c00

08002b34 <_ZN5motorC1Ev>:


motor::motor()
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8002b42:	815a      	strh	r2, [r3, #10]
	{
	as50_readAngle(&this->prev_ticks_from_encoder, 100); //encoder init
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3308      	adds	r3, #8
 8002b48:	2164      	movs	r1, #100	@ 0x64
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fe04 	bl	8001758 <as50_readAngle>
	};
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_ZN5motor6updateEv>:

void motor::update()
	{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]

	};
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <_ZN5motor12read_encoderEv>:
{
	return steps_to_rads(tmc5160_velocity_read(), jc.full_steps);
};

float motor::read_encoder()
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	uint16_t raw_ticks_from_encoder;
	uint16_t filtered_ticks_from_encoder;
	as50_readAngle(&raw_ticks_from_encoder, 100);
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	2164      	movs	r1, #100	@ 0x64
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fdea 	bl	8001758 <as50_readAngle>
	filtered_ticks_from_encoder = simple_filter(raw_ticks_from_encoder);
 8002b84:	89bb      	ldrh	r3, [r7, #12]
 8002b86:	4619      	mov	r1, r3
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f83b 	bl	8002c04 <_ZN5motor13simple_filterEt>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	81fb      	strh	r3, [r7, #14]
	enc_ticks_read_for_debug = filtered_ticks_from_encoder;
 8002b92:	4a1b      	ldr	r2, [pc, #108]	@ (8002c00 <_ZN5motor12read_encoderEv+0x90>)
 8002b94:	89fb      	ldrh	r3, [r7, #14]
 8002b96:	8013      	strh	r3, [r2, #0]
	raw_gear_angle_from_encoder = static_cast<float>(filtered_ticks_from_encoder) * ((M_PI * 2) / gear_encoder_CPR);
 8002b98:	89fb      	ldrh	r3, [r7, #14]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba2:	ee17 0a90 	vmov	r0, s15
 8002ba6:	f7fd fcf7 	bl	8000598 <__aeabi_f2d>
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	895b      	ldrh	r3, [r3, #10]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fcde 	bl	8000574 <__aeabi_i2d>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	a10e      	add	r1, pc, #56	@ (adr r1, 8002bf8 <_ZN5motor12read_encoderEv+0x88>)
 8002bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bc2:	f7fd fe6b 	bl	800089c <__aeabi_ddiv>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4620      	mov	r0, r4
 8002bcc:	4629      	mov	r1, r5
 8002bce:	f7fd fd3b 	bl	8000648 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7fe f82d 	bl	8000c38 <__aeabi_d2f>
 8002bde:	4602      	mov	r2, r0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	605a      	str	r2, [r3, #4]
	return raw_gear_angle_from_encoder;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	ee07 3a90 	vmov	s15, r3
};
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	54442d18 	.word	0x54442d18
 8002bfc:	401921fb 	.word	0x401921fb
 8002c00:	20000428 	.word	0x20000428

08002c04 <_ZN5motor13simple_filterEt>:
		tmc5160_stop();
		//tmc5160_set_zero();
};

uint16_t motor::simple_filter(uint16_t encoder_tics)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	807b      	strh	r3, [r7, #2]
	uint16_t filtered_encoder_value_tics = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	81fb      	strh	r3, [r7, #14]
	filtered_encoder_value_tics = (encoder_tics + this->prev_ticks_from_encoder)/2;
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	8912      	ldrh	r2, [r2, #8]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	0fda      	lsrs	r2, r3, #31
 8002c1e:	4413      	add	r3, r2
 8002c20:	105b      	asrs	r3, r3, #1
 8002c22:	81fb      	strh	r3, [r7, #14]
	this->prev_ticks_from_encoder = filtered_encoder_value_tics;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	89fa      	ldrh	r2, [r7, #14]
 8002c28:	811a      	strh	r2, [r3, #8]
	return filtered_encoder_value_tics;
 8002c2a:	89fb      	ldrh	r3, [r7, #14]
};
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_Z41__static_initialization_and_destruction_0ii>:



}
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d107      	bne.n	8002c58 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d102      	bne.n	8002c58 <_Z41__static_initialization_and_destruction_0ii+0x20>
motor m;
 8002c52:	4803      	ldr	r0, [pc, #12]	@ (8002c60 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002c54:	f7ff ff6e 	bl	8002b34 <_ZN5motorC1Ev>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000418 	.word	0x20000418

08002c64 <_GLOBAL__sub_I_m>:
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f7ff ffe3 	bl	8002c38 <_Z41__static_initialization_and_destruction_0ii>
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cec <MX_SPI1_Init+0x78>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002c80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c86:	4b18      	ldr	r3, [pc, #96]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002c8e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c94:	4b14      	ldr	r3, [pc, #80]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002c96:	2202      	movs	r2, #2
 8002c98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ca6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002caa:	2220      	movs	r2, #32
 8002cac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cc0:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cd2:	4805      	ldr	r0, [pc, #20]	@ (8002ce8 <MX_SPI1_Init+0x74>)
 8002cd4:	f004 f976 	bl	8006fc4 <HAL_SPI_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002cde:	f7ff feb4 	bl	8002a4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000042c 	.word	0x2000042c
 8002cec:	40013000 	.word	0x40013000

08002cf0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d68 <MX_SPI3_Init+0x78>)
 8002cf8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002cfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d02:	4b18      	ldr	r3, [pc, #96]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d08:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d0a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002d0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d10:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d16:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d26:	2218      	movs	r2, #24
 8002d28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002d3c:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d3e:	2207      	movs	r2, #7
 8002d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002d4e:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <MX_SPI3_Init+0x74>)
 8002d50:	f004 f938 	bl	8006fc4 <HAL_SPI_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002d5a:	f7ff fe76 	bl	8002a4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000490 	.word	0x20000490
 8002d68:	40003c00 	.word	0x40003c00

08002d6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08c      	sub	sp, #48	@ 0x30
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a33      	ldr	r2, [pc, #204]	@ (8002e58 <HAL_SPI_MspInit+0xec>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d131      	bne.n	8002df2 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d8e:	4b33      	ldr	r3, [pc, #204]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d92:	4a32      	ldr	r2, [pc, #200]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002d94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d98:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d9a:	4b30      	ldr	r3, [pc, #192]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	4a2c      	ldr	r2, [pc, #176]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002db2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002dbe:	23e0      	movs	r3, #224	@ 0xe0
 8002dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dce:	2305      	movs	r3, #5
 8002dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ddc:	f001 fc6c 	bl	80046b8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	2023      	movs	r0, #35	@ 0x23
 8002de6:	f000 ffe4 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002dea:	2023      	movs	r0, #35	@ 0x23
 8002dec:	f000 fffb 	bl	8003de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002df0:	e02d      	b.n	8002e4e <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e60 <HAL_SPI_MspInit+0xf4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d128      	bne.n	8002e4e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dfc:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e08:	4b14      	ldr	r3, [pc, #80]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e14:	4b11      	ldr	r3, [pc, #68]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e18:	4a10      	ldr	r2, [pc, #64]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <HAL_SPI_MspInit+0xf0>)
 8002e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002e2c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e3e:	2306      	movs	r3, #6
 8002e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e42:	f107 031c 	add.w	r3, r7, #28
 8002e46:	4619      	mov	r1, r3
 8002e48:	4806      	ldr	r0, [pc, #24]	@ (8002e64 <HAL_SPI_MspInit+0xf8>)
 8002e4a:	f001 fc35 	bl	80046b8 <HAL_GPIO_Init>
}
 8002e4e:	bf00      	nop
 8002e50:	3730      	adds	r7, #48	@ 0x30
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40013000 	.word	0x40013000
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40003c00 	.word	0x40003c00
 8002e64:	48000800 	.word	0x48000800

08002e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <HAL_MspInit+0x44>)
 8002e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e72:	4a0e      	ldr	r2, [pc, #56]	@ (8002eac <HAL_MspInit+0x44>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <HAL_MspInit+0x44>)
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <HAL_MspInit+0x44>)
 8002e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8a:	4a08      	ldr	r2, [pc, #32]	@ (8002eac <HAL_MspInit+0x44>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e92:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <HAL_MspInit+0x44>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002e9e:	f003 f905 	bl	80060ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <NMI_Handler+0x4>

08002eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <HardFault_Handler+0x4>

08002ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <MemManage_Handler+0x4>

08002ec8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f06:	f000 fe39 	bl	8003b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8002f14:	4802      	ldr	r0, [pc, #8]	@ (8002f20 <DMA1_Channel1_IRQHandler+0x10>)
 8002f16:	f001 f8e9 	bl	80040ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000320 	.word	0x20000320

08002f24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8002f28:	4802      	ldr	r0, [pc, #8]	@ (8002f34 <DMA1_Channel2_IRQHandler+0x10>)
 8002f2a:	f001 f8df 	bl	80040ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000380 	.word	0x20000380

08002f38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002f3c:	4802      	ldr	r0, [pc, #8]	@ (8002f48 <SPI1_IRQHandler+0x10>)
 8002f3e:	f004 fc83 	bl	8007848 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000042c 	.word	0x2000042c

08002f4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f50:	4802      	ldr	r0, [pc, #8]	@ (8002f5c <USART2_IRQHandler+0x10>)
 8002f52:	f005 fbbf 	bl	80086d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200005dc 	.word	0x200005dc

08002f60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f64:	4802      	ldr	r0, [pc, #8]	@ (8002f70 <TIM6_DAC_IRQHandler+0x10>)
 8002f66:	f005 f85d 	bl	8008024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200004f8 	.word	0x200004f8

08002f74 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f78:	4802      	ldr	r0, [pc, #8]	@ (8002f84 <TIM7_DAC_IRQHandler+0x10>)
 8002f7a:	f005 f853 	bl	8008024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000544 	.word	0x20000544

08002f88 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8002f8c:	4802      	ldr	r0, [pc, #8]	@ (8002f98 <I2C4_EV_IRQHandler+0x10>)
 8002f8e:	f001 fefd 	bl	8004d8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200002cc 	.word	0x200002cc

08002f9c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8002fa0:	4802      	ldr	r0, [pc, #8]	@ (8002fac <I2C4_ER_IRQHandler+0x10>)
 8002fa2:	f001 ff0d 	bl	8004dc0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200002cc 	.word	0x200002cc

08002fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return 1;
 8002fb4:	2301      	movs	r3, #1
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <_kill>:

int _kill(int pid, int sig)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fca:	f007 feeb 	bl	800ada4 <__errno>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2216      	movs	r2, #22
 8002fd2:	601a      	str	r2, [r3, #0]
  return -1;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_exit>:

void _exit (int status)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ffe7 	bl	8002fc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ff2:	bf00      	nop
 8002ff4:	e7fd      	b.n	8002ff2 <_exit+0x12>

08002ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e00a      	b.n	800301e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003008:	f3af 8000 	nop.w
 800300c:	4601      	mov	r1, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	60ba      	str	r2, [r7, #8]
 8003014:	b2ca      	uxtb	r2, r1
 8003016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3301      	adds	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	dbf0      	blt.n	8003008 <_read+0x12>
  }

  return len;
 8003026:	687b      	ldr	r3, [r7, #4]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e009      	b.n	8003056 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	60ba      	str	r2, [r7, #8]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3301      	adds	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	429a      	cmp	r2, r3
 800305c:	dbf1      	blt.n	8003042 <_write+0x12>
  }
  return len;
 800305e:	687b      	ldr	r3, [r7, #4]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <_close>:

int _close(int file)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003090:	605a      	str	r2, [r3, #4]
  return 0;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_isatty>:

int _isatty(int file)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030a8:	2301      	movs	r3, #1
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d8:	4a14      	ldr	r2, [pc, #80]	@ (800312c <_sbrk+0x5c>)
 80030da:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <_sbrk+0x60>)
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e4:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <_sbrk+0x64>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030ec:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <_sbrk+0x64>)
 80030ee:	4a12      	ldr	r2, [pc, #72]	@ (8003138 <_sbrk+0x68>)
 80030f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f2:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d207      	bcs.n	8003110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003100:	f007 fe50 	bl	800ada4 <__errno>
 8003104:	4603      	mov	r3, r0
 8003106:	220c      	movs	r2, #12
 8003108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	e009      	b.n	8003124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003110:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <_sbrk+0x64>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003116:	4b07      	ldr	r3, [pc, #28]	@ (8003134 <_sbrk+0x64>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	4a05      	ldr	r2, [pc, #20]	@ (8003134 <_sbrk+0x64>)
 8003120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20020000 	.word	0x20020000
 8003130:	00000400 	.word	0x00000400
 8003134:	200004f4 	.word	0x200004f4
 8003138:	200007c8 	.word	0x200007c8

0800313c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <SystemInit+0x20>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003146:	4a05      	ldr	r2, [pc, #20]	@ (800315c <SystemInit+0x20>)
 8003148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800314c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003166:	1d3b      	adds	r3, r7, #4
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <MX_TIM6_Init+0x64>)
 8003172:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <MX_TIM6_Init+0x68>)
 8003174:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 8003176:	4b13      	ldr	r3, [pc, #76]	@ (80031c4 <MX_TIM6_Init+0x64>)
 8003178:	229f      	movs	r2, #159	@ 0x9f
 800317a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317c:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <MX_TIM6_Init+0x64>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003182:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <MX_TIM6_Init+0x64>)
 8003184:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003188:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318a:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <MX_TIM6_Init+0x64>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003190:	480c      	ldr	r0, [pc, #48]	@ (80031c4 <MX_TIM6_Init+0x64>)
 8003192:	f004 fdd1 	bl	8007d38 <HAL_TIM_Base_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800319c:	f7ff fc55 	bl	8002a4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a0:	2300      	movs	r3, #0
 80031a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	4619      	mov	r1, r3
 80031ac:	4805      	ldr	r0, [pc, #20]	@ (80031c4 <MX_TIM6_Init+0x64>)
 80031ae:	f005 f965 	bl	800847c <HAL_TIMEx_MasterConfigSynchronization>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80031b8:	f7ff fc47 	bl	8002a4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200004f8 	.word	0x200004f8
 80031c8:	40001000 	.word	0x40001000

080031cc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80031dc:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <MX_TIM7_Init+0x68>)
 80031de:	4a16      	ldr	r2, [pc, #88]	@ (8003238 <MX_TIM7_Init+0x6c>)
 80031e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1599;
 80031e2:	4b14      	ldr	r3, [pc, #80]	@ (8003234 <MX_TIM7_Init+0x68>)
 80031e4:	f240 623f 	movw	r2, #1599	@ 0x63f
 80031e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ea:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <MX_TIM7_Init+0x68>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80031f0:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <MX_TIM7_Init+0x68>)
 80031f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80031f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003234 <MX_TIM7_Init+0x68>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80031fe:	480d      	ldr	r0, [pc, #52]	@ (8003234 <MX_TIM7_Init+0x68>)
 8003200:	f004 fd9a 	bl	8007d38 <HAL_TIM_Base_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800320a:	f7ff fc1e 	bl	8002a4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4806      	ldr	r0, [pc, #24]	@ (8003234 <MX_TIM7_Init+0x68>)
 800321c:	f005 f92e 	bl	800847c <HAL_TIMEx_MasterConfigSynchronization>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003226:	f7ff fc10 	bl	8002a4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000544 	.word	0x20000544
 8003238:	40001400 	.word	0x40001400

0800323c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	@ 0x30
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003242:	f107 030c 	add.w	r3, r7, #12
 8003246:	2224      	movs	r2, #36	@ 0x24
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f007 fcf1 	bl	800ac32 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003250:	463b      	mov	r3, r7
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800325a:	4b23      	ldr	r3, [pc, #140]	@ (80032e8 <MX_TIM8_Init+0xac>)
 800325c:	4a23      	ldr	r2, [pc, #140]	@ (80032ec <MX_TIM8_Init+0xb0>)
 800325e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003260:	4b21      	ldr	r3, [pc, #132]	@ (80032e8 <MX_TIM8_Init+0xac>)
 8003262:	2200      	movs	r2, #0
 8003264:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003266:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <MX_TIM8_Init+0xac>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800326c:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <MX_TIM8_Init+0xac>)
 800326e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003272:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003274:	4b1c      	ldr	r3, [pc, #112]	@ (80032e8 <MX_TIM8_Init+0xac>)
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800327a:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <MX_TIM8_Init+0xac>)
 800327c:	2200      	movs	r2, #0
 800327e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <MX_TIM8_Init+0xac>)
 8003282:	2200      	movs	r2, #0
 8003284:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003286:	2301      	movs	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800328e:	2301      	movs	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800329a:	2300      	movs	r3, #0
 800329c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800329e:	2301      	movs	r3, #1
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	4619      	mov	r1, r3
 80032b0:	480d      	ldr	r0, [pc, #52]	@ (80032e8 <MX_TIM8_Init+0xac>)
 80032b2:	f004 fe11 	bl	8007ed8 <HAL_TIM_Encoder_Init>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80032bc:	f7ff fbc5 	bl	8002a4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80032cc:	463b      	mov	r3, r7
 80032ce:	4619      	mov	r1, r3
 80032d0:	4805      	ldr	r0, [pc, #20]	@ (80032e8 <MX_TIM8_Init+0xac>)
 80032d2:	f005 f8d3 	bl	800847c <HAL_TIMEx_MasterConfigSynchronization>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80032dc:	f7ff fbb5 	bl	8002a4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80032e0:	bf00      	nop
 80032e2:	3730      	adds	r7, #48	@ 0x30
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000590 	.word	0x20000590
 80032ec:	40013400 	.word	0x40013400

080032f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003368 <HAL_TIM_Base_MspInit+0x78>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d114      	bne.n	800332c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003302:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <HAL_TIM_Base_MspInit+0x7c>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003306:	4a19      	ldr	r2, [pc, #100]	@ (800336c <HAL_TIM_Base_MspInit+0x7c>)
 8003308:	f043 0310 	orr.w	r3, r3, #16
 800330c:	6593      	str	r3, [r2, #88]	@ 0x58
 800330e:	4b17      	ldr	r3, [pc, #92]	@ (800336c <HAL_TIM_Base_MspInit+0x7c>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	2036      	movs	r0, #54	@ 0x36
 8003320:	f000 fd47 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003324:	2036      	movs	r0, #54	@ 0x36
 8003326:	f000 fd5e 	bl	8003de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800332a:	e018      	b.n	800335e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0f      	ldr	r2, [pc, #60]	@ (8003370 <HAL_TIM_Base_MspInit+0x80>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d113      	bne.n	800335e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003336:	4b0d      	ldr	r3, [pc, #52]	@ (800336c <HAL_TIM_Base_MspInit+0x7c>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	4a0c      	ldr	r2, [pc, #48]	@ (800336c <HAL_TIM_Base_MspInit+0x7c>)
 800333c:	f043 0320 	orr.w	r3, r3, #32
 8003340:	6593      	str	r3, [r2, #88]	@ 0x58
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_TIM_Base_MspInit+0x7c>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800334e:	2200      	movs	r2, #0
 8003350:	2100      	movs	r1, #0
 8003352:	2037      	movs	r0, #55	@ 0x37
 8003354:	f000 fd2d 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8003358:	2037      	movs	r0, #55	@ 0x37
 800335a:	f000 fd44 	bl	8003de6 <HAL_NVIC_EnableIRQ>
}
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40001000 	.word	0x40001000
 800336c:	40021000 	.word	0x40021000
 8003370:	40001400 	.word	0x40001400

08003374 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	@ 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a25      	ldr	r2, [pc, #148]	@ (8003428 <HAL_TIM_Encoder_MspInit+0xb4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d143      	bne.n	800341e <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003396:	4b25      	ldr	r3, [pc, #148]	@ (800342c <HAL_TIM_Encoder_MspInit+0xb8>)
 8003398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339a:	4a24      	ldr	r2, [pc, #144]	@ (800342c <HAL_TIM_Encoder_MspInit+0xb8>)
 800339c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80033a2:	4b22      	ldr	r3, [pc, #136]	@ (800342c <HAL_TIM_Encoder_MspInit+0xb8>)
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ae:	4b1f      	ldr	r3, [pc, #124]	@ (800342c <HAL_TIM_Encoder_MspInit+0xb8>)
 80033b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b2:	4a1e      	ldr	r2, [pc, #120]	@ (800342c <HAL_TIM_Encoder_MspInit+0xb8>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ba:	4b1c      	ldr	r3, [pc, #112]	@ (800342c <HAL_TIM_Encoder_MspInit+0xb8>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c6:	4b19      	ldr	r3, [pc, #100]	@ (800342c <HAL_TIM_Encoder_MspInit+0xb8>)
 80033c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ca:	4a18      	ldr	r2, [pc, #96]	@ (800342c <HAL_TIM_Encoder_MspInit+0xb8>)
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033d2:	4b16      	ldr	r3, [pc, #88]	@ (800342c <HAL_TIM_Encoder_MspInit+0xb8>)
 80033d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PB6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e2:	2302      	movs	r3, #2
 80033e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80033ee:	2304      	movs	r3, #4
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	4619      	mov	r1, r3
 80033f8:	480d      	ldr	r0, [pc, #52]	@ (8003430 <HAL_TIM_Encoder_MspInit+0xbc>)
 80033fa:	f001 f95d 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033fe:	2340      	movs	r3, #64	@ 0x40
 8003400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800340e:	2305      	movs	r3, #5
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4619      	mov	r1, r3
 8003418:	4806      	ldr	r0, [pc, #24]	@ (8003434 <HAL_TIM_Encoder_MspInit+0xc0>)
 800341a:	f001 f94d 	bl	80046b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800341e:	bf00      	nop
 8003420:	3728      	adds	r7, #40	@ 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40013400 	.word	0x40013400
 800342c:	40021000 	.word	0x40021000
 8003430:	48000800 	.word	0x48000800
 8003434:	48000400 	.word	0x48000400

08003438 <tmc5160_move>:
	WData[4] = (position & 0x000000FF);
	tmc5160_write(WData);
}

void tmc5160_move(int32_t vel)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

	int32_t vel_to_go;
	vel_to_go = (int32_t)(vel*1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fd f897 	bl	8000574 <__aeabi_i2d>
 8003446:	a33c      	add	r3, pc, #240	@ (adr r3, 8003538 <tmc5160_move+0x100>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f7fd f8fc 	bl	8000648 <__aeabi_dmul>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	f7fd fba6 	bl	8000ba8 <__aeabi_d2iz>
 800345c:	4603      	mov	r3, r0
 800345e:	617b      	str	r3, [r7, #20]

	uint8_t WData[5] = {0};
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	2300      	movs	r3, #0
 8003466:	733b      	strb	r3, [r7, #12]
	if (vel_to_go < 0) //select positive or negative mode depending on vel sign
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	da0f      	bge.n	800348e <tmc5160_move+0x56>
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x02; //SPI send: 0xA000000001; // RAMPMODE = 1 (positive velocity move)
 800346e:	23a0      	movs	r3, #160	@ 0xa0
 8003470:	723b      	strb	r3, [r7, #8]
 8003472:	2300      	movs	r3, #0
 8003474:	727b      	strb	r3, [r7, #9]
 8003476:	2300      	movs	r3, #0
 8003478:	72bb      	strb	r3, [r7, #10]
 800347a:	2300      	movs	r3, #0
 800347c:	72fb      	strb	r3, [r7, #11]
 800347e:	2302      	movs	r3, #2
 8003480:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 8003482:	f107 0308 	add.w	r3, r7, #8
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f8c6 	bl	8003618 <tmc5160_write>
 800348c:	e00e      	b.n	80034ac <tmc5160_move+0x74>
	}
	else
	{
		  WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x01; //SPI send: 0xA000000001; // RAMPMODE = 2 (negative velocity move)
 800348e:	23a0      	movs	r3, #160	@ 0xa0
 8003490:	723b      	strb	r3, [r7, #8]
 8003492:	2300      	movs	r3, #0
 8003494:	727b      	strb	r3, [r7, #9]
 8003496:	2300      	movs	r3, #0
 8003498:	72bb      	strb	r3, [r7, #10]
 800349a:	2300      	movs	r3, #0
 800349c:	72fb      	strb	r3, [r7, #11]
 800349e:	2301      	movs	r3, #1
 80034a0:	733b      	strb	r3, [r7, #12]
		  tmc5160_write(WData);
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f8b6 	bl	8003618 <tmc5160_write>
	}
	vel_to_go = abs(vel_to_go);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bfb8      	it	lt
 80034b2:	425b      	neglt	r3, r3
 80034b4:	617b      	str	r3, [r7, #20]

	int32_t v1;
	v1 = (int32_t)(vel_to_go*0.1);
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7fd f85c 	bl	8000574 <__aeabi_i2d>
 80034bc:	a320      	add	r3, pc, #128	@ (adr r3, 8003540 <tmc5160_move+0x108>)
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f7fd f8c1 	bl	8000648 <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	f7fd fb6b 	bl	8000ba8 <__aeabi_d2iz>
 80034d2:	4603      	mov	r3, r0
 80034d4:	613b      	str	r3, [r7, #16]


	//Acceleration threshold velocity V1
	WData[0] = 0xA5; //V1 speed register
 80034d6:	23a5      	movs	r3, #165	@ 0xa5
 80034d8:	723b      	strb	r3, [r7, #8]
	WData[1] = (v1 & 0xFF000000) >> 24;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	0e1b      	lsrs	r3, r3, #24
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	727b      	strb	r3, [r7, #9]
	WData[2] = (v1 & 0x00FF0000) >> 16;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	141b      	asrs	r3, r3, #16
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	72bb      	strb	r3, [r7, #10]
	WData[3] = (v1 & 0x0000FF00) >> 8;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	121b      	asrs	r3, r3, #8
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	72fb      	strb	r3, [r7, #11]
	WData[4] = (v1 & 0x000000FF);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80034f8:	f107 0308 	add.w	r3, r7, #8
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f88b 	bl	8003618 <tmc5160_write>

	//sending VMAX
	WData[0] = 0xA7; //VMAX speed register
 8003502:	23a7      	movs	r3, #167	@ 0xa7
 8003504:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel_to_go & 0xFF000000) >> 24;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	0e1b      	lsrs	r3, r3, #24
 800350a:	b2db      	uxtb	r3, r3
 800350c:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel_to_go & 0x00FF0000) >> 16;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	141b      	asrs	r3, r3, #16
 8003512:	b2db      	uxtb	r3, r3
 8003514:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel_to_go & 0x0000FF00) >> 8;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	121b      	asrs	r3, r3, #8
 800351a:	b2db      	uxtb	r3, r3
 800351c:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel_to_go & 0x000000FF);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 8003524:	f107 0308 	add.w	r3, r7, #8
 8003528:	4618      	mov	r0, r3
 800352a:	f000 f875 	bl	8003618 <tmc5160_write>
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	77ffebde 	.word	0x77ffebde
 800353c:	3ff65e9f 	.word	0x3ff65e9f
 8003540:	9999999a 	.word	0x9999999a
 8003544:	3fb99999 	.word	0x3fb99999

08003548 <tmc5160_velocity>:
	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
	tmc5160_write(WData);
}

void tmc5160_velocity(int32_t vel)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

	int32_t vel_to_go;
	vel_to_go = (int32_t)(vel*1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fd f80f 	bl	8000574 <__aeabi_i2d>
 8003556:	a32c      	add	r3, pc, #176	@ (adr r3, 8003608 <tmc5160_velocity+0xc0>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fd f874 	bl	8000648 <__aeabi_dmul>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fb1e 	bl	8000ba8 <__aeabi_d2iz>
 800356c:	4603      	mov	r3, r0
 800356e:	617b      	str	r3, [r7, #20]
	vel_to_go = abs(vel_to_go);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	bfb8      	it	lt
 8003576:	425b      	neglt	r3, r3
 8003578:	617b      	str	r3, [r7, #20]

	int32_t V1;
	V1 = (int32_t)(vel_to_go*0.1);
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7fc fffa 	bl	8000574 <__aeabi_i2d>
 8003580:	a323      	add	r3, pc, #140	@ (adr r3, 8003610 <tmc5160_velocity+0xc8>)
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f7fd f85f 	bl	8000648 <__aeabi_dmul>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	f7fd fb09 	bl	8000ba8 <__aeabi_d2iz>
 8003596:	4603      	mov	r3, r0
 8003598:	613b      	str	r3, [r7, #16]

	//Acceleration threshold velocity V1
	uint8_t WData[5] = {0};
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	2300      	movs	r3, #0
 80035a0:	733b      	strb	r3, [r7, #12]

	WData[0] = 0xA5; //V1 speed register
 80035a2:	23a5      	movs	r3, #165	@ 0xa5
 80035a4:	723b      	strb	r3, [r7, #8]
	WData[1] = (V1 & 0xFF000000) >> 24;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	0e1b      	lsrs	r3, r3, #24
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	727b      	strb	r3, [r7, #9]
	WData[2] = (V1 & 0x00FF0000) >> 16;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	141b      	asrs	r3, r3, #16
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	72bb      	strb	r3, [r7, #10]
	WData[3] = (V1 & 0x0000FF00) >> 8;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	121b      	asrs	r3, r3, #8
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	72fb      	strb	r3, [r7, #11]
	WData[4] = (V1 & 0x000000FF);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80035c4:	f107 0308 	add.w	r3, r7, #8
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f825 	bl	8003618 <tmc5160_write>

	//VMAX
	WData[0] = 0xA7; //VMAX speed register
 80035ce:	23a7      	movs	r3, #167	@ 0xa7
 80035d0:	723b      	strb	r3, [r7, #8]
	WData[1] = (vel_to_go & 0xFF000000) >> 24;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	0e1b      	lsrs	r3, r3, #24
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	727b      	strb	r3, [r7, #9]
	WData[2] = (vel_to_go & 0x00FF0000) >> 16;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	141b      	asrs	r3, r3, #16
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	72bb      	strb	r3, [r7, #10]
	WData[3] = (vel_to_go & 0x0000FF00) >> 8;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	121b      	asrs	r3, r3, #8
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	72fb      	strb	r3, [r7, #11]
	WData[4] = (vel_to_go & 0x000000FF);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	733b      	strb	r3, [r7, #12]
	tmc5160_write(WData);
 80035f0:	f107 0308 	add.w	r3, r7, #8
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f80f 	bl	8003618 <tmc5160_write>

}
 80035fa:	bf00      	nop
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	f3af 8000 	nop.w
 8003608:	77ffebde 	.word	0x77ffebde
 800360c:	3ff65e9f 	.word	0x3ff65e9f
 8003610:	9999999a 	.word	0x9999999a
 8003614:	3fb99999 	.word	0x3fb99999

08003618 <tmc5160_write>:
	tmc5160_write(WData);
}


void tmc5160_write(uint8_t* data)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_RESET); //CS LOW
 8003620:	2200      	movs	r2, #0
 8003622:	2110      	movs	r1, #16
 8003624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003628:	f001 f9c8 	bl	80049bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&_STEPPER_MOTOR_DRIVER_SPI, data, 5, HAL_MAX_DELAY);
 800362c:	f04f 33ff 	mov.w	r3, #4294967295
 8003630:	2205      	movs	r2, #5
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4806      	ldr	r0, [pc, #24]	@ (8003650 <tmc5160_write+0x38>)
 8003636:	f003 fd70 	bl	800711a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_STEPPER_MOTOR_DRIVER_NSS_GPIO, _STEPPER_MOTOR_DRIVER_NSS_PIN, GPIO_PIN_SET); //CS HIGH
 800363a:	2201      	movs	r2, #1
 800363c:	2110      	movs	r1, #16
 800363e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003642:	f001 f9bb 	bl	80049bc <HAL_GPIO_WritePin>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	2000042c 	.word	0x2000042c
 8003654:	00000000 	.word	0x00000000

08003658 <tmc5160_init>:

	return (int32_t)(rv / 1.3981013); //1.3981.. is the time ratio according to "Microstep velocity time reference t for velocities: TSTEP = fCLK / fSTEP" see ref on p. 81 of datasheet
}

void tmc5160_init(motor_config * mc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //DRV SLEEP 0 for power on, 1 for power off
 8003660:	2200      	movs	r2, #0
 8003662:	2120      	movs	r1, #32
 8003664:	4896      	ldr	r0, [pc, #600]	@ (80038c0 <tmc5160_init+0x268>)
 8003666:	f001 f9a9 	bl	80049bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET); //SPI_MODE ON
 800366a:	2201      	movs	r2, #1
 800366c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003674:	f001 f9a2 	bl	80049bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SD_MODE OFF INTERNAL RAMP GENERATOR ON
 8003678:	2200      	movs	r2, #0
 800367a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800367e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003682:	f001 f99b 	bl	80049bc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 8003686:	2201      	movs	r2, #1
 8003688:	2110      	movs	r1, #16
 800368a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800368e:	f001 f995 	bl	80049bc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //DIR
 8003692:	2200      	movs	r2, #0
 8003694:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800369c:	f001 f98e 	bl	80049bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //STEP
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036aa:	f001 f987 	bl	80049bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80036ae:	2064      	movs	r0, #100	@ 0x64
 80036b0:	f000 fa82 	bl	8003bb8 <HAL_Delay>

	uint8_t WData[5] = {0};
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	2300      	movs	r3, #0
 80036ba:	743b      	strb	r3, [r7, #16]

	WData[0] = 0xEC; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC3; // CHOPCONF: TOFF=3, HSTRT=4, HEND=1, TBL=2, CHM=0 (SpreadCycle)
 80036bc:	23ec      	movs	r3, #236	@ 0xec
 80036be:	733b      	strb	r3, [r7, #12]
 80036c0:	2300      	movs	r3, #0
 80036c2:	737b      	strb	r3, [r7, #13]
 80036c4:	2300      	movs	r3, #0
 80036c6:	73bb      	strb	r3, [r7, #14]
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	23c3      	movs	r3, #195	@ 0xc3
 80036ce:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff9f 	bl	8003618 <tmc5160_write>

	WData[0] = 0x8B; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = mc->max_irun_scaler; //GLOBAL CURRENT SCALER
 80036da:	238b      	movs	r3, #139	@ 0x8b
 80036dc:	733b      	strb	r3, [r7, #12]
 80036de:	2300      	movs	r3, #0
 80036e0:	737b      	strb	r3, [r7, #13]
 80036e2:	2300      	movs	r3, #0
 80036e4:	73bb      	strb	r3, [r7, #14]
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff8d 	bl	8003618 <tmc5160_write>

	int init_ihold = mc->init_irun * 0.7;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc ff35 	bl	8000574 <__aeabi_i2d>
 800370a:	a36b      	add	r3, pc, #428	@ (adr r3, 80038b8 <tmc5160_init+0x260>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f7fc ff9a 	bl	8000648 <__aeabi_dmul>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	f7fd fa44 	bl	8000ba8 <__aeabi_d2iz>
 8003720:	4603      	mov	r3, r0
 8003722:	617b      	str	r3, [r7, #20]
	WData[0] = 0x90; WData[1] = 0x00; WData[2] = 0x00; WData[3] = init_ihold; WData[4] = mc->init_irun; //  IHOLDDELAY=0,  IRUN=10/31,  IHOLD=02/31
 8003724:	2390      	movs	r3, #144	@ 0x90
 8003726:	733b      	strb	r3, [r7, #12]
 8003728:	2300      	movs	r3, #0
 800372a:	737b      	strb	r3, [r7, #13]
 800372c:	2300      	movs	r3, #0
 800372e:	73bb      	strb	r3, [r7, #14]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff67 	bl	8003618 <tmc5160_write>

	WData[0] = 0x91; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // TPOWERDOWN=10: Delay before power down in stand still
 800374a:	2391      	movs	r3, #145	@ 0x91
 800374c:	733b      	strb	r3, [r7, #12]
 800374e:	2300      	movs	r3, #0
 8003750:	737b      	strb	r3, [r7, #13]
 8003752:	2300      	movs	r3, #0
 8003754:	73bb      	strb	r3, [r7, #14]
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
 800375a:	230a      	movs	r3, #10
 800375c:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800375e:	f107 030c 	add.w	r3, r7, #12
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ff58 	bl	8003618 <tmc5160_write>

	//0xC40C001E default for 0x70 reg
	WData[0] = 0xF0; WData[1] = 0xC4; WData[2] = 0x0D; WData[3] = 0x00; WData[4] = 0x1E; // PWM_CONF PWM_FREQ 35kHz TODO
 8003768:	23f0      	movs	r3, #240	@ 0xf0
 800376a:	733b      	strb	r3, [r7, #12]
 800376c:	23c4      	movs	r3, #196	@ 0xc4
 800376e:	737b      	strb	r3, [r7, #13]
 8003770:	230d      	movs	r3, #13
 8003772:	73bb      	strb	r3, [r7, #14]
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	231e      	movs	r3, #30
 800377a:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff49 	bl	8003618 <tmc5160_write>

	WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8003786:	2380      	movs	r3, #128	@ 0x80
 8003788:	733b      	strb	r3, [r7, #12]
 800378a:	2300      	movs	r3, #0
 800378c:	737b      	strb	r3, [r7, #13]
 800378e:	2300      	movs	r3, #0
 8003790:	73bb      	strb	r3, [r7, #14]
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	2304      	movs	r3, #4
 8003798:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800379a:	f107 030c 	add.w	r3, r7, #12
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ff3a 	bl	8003618 <tmc5160_write>

	tmc5160_velocity(DEFAULT_VELOCITY_IN_STEPS); //initial vel config
 80037a4:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80037a8:	f7ff fece 	bl	8003548 <tmc5160_velocity>

	WData[0] = 0x93; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0xC8; // TPWM_THRS=200 yields a switching velocity about 35000 = ca. 30RPM
 80037ac:	2393      	movs	r3, #147	@ 0x93
 80037ae:	733b      	strb	r3, [r7, #12]
 80037b0:	2300      	movs	r3, #0
 80037b2:	737b      	strb	r3, [r7, #13]
 80037b4:	2300      	movs	r3, #0
 80037b6:	73bb      	strb	r3, [r7, #14]
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	23c8      	movs	r3, #200	@ 0xc8
 80037be:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80037c0:	f107 030c 	add.w	r3, r7, #12
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff27 	bl	8003618 <tmc5160_write>

	WData[0] = 0xA0; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x00; //SPI send: 0xA000000000; // RAMPMODE = 0 (Target position move)
 80037ca:	23a0      	movs	r3, #160	@ 0xa0
 80037cc:	733b      	strb	r3, [r7, #12]
 80037ce:	2300      	movs	r3, #0
 80037d0:	737b      	strb	r3, [r7, #13]
 80037d2:	2300      	movs	r3, #0
 80037d4:	73bb      	strb	r3, [r7, #14]
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	2300      	movs	r3, #0
 80037dc:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80037de:	f107 030c 	add.w	r3, r7, #12
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff18 	bl	8003618 <tmc5160_write>

	WData[0] = 0xA3; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0A; // Start acceleration = 10 (Near start)
 80037e8:	23a3      	movs	r3, #163	@ 0xa3
 80037ea:	733b      	strb	r3, [r7, #12]
 80037ec:	2300      	movs	r3, #0
 80037ee:	737b      	strb	r3, [r7, #13]
 80037f0:	2300      	movs	r3, #0
 80037f2:	73bb      	strb	r3, [r7, #14]
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	230a      	movs	r3, #10
 80037fa:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff09 	bl	8003618 <tmc5160_write>

	WData[0] = 0xA4; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0F; WData[4] = 0xFF; // A1 = 10 000 First acceleration
 8003806:	23a4      	movs	r3, #164	@ 0xa4
 8003808:	733b      	strb	r3, [r7, #12]
 800380a:	2300      	movs	r3, #0
 800380c:	737b      	strb	r3, [r7, #13]
 800380e:	2303      	movs	r3, #3
 8003810:	73bb      	strb	r3, [r7, #14]
 8003812:	230f      	movs	r3, #15
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	23ff      	movs	r3, #255	@ 0xff
 8003818:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 800381a:	f107 030c 	add.w	r3, r7, #12
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fefa 	bl	8003618 <tmc5160_write>

	WData[0] = 0xA6; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0F; WData[4] = 0xFF; // AMAX = 5 000 Acceleration above V1
 8003824:	23a6      	movs	r3, #166	@ 0xa6
 8003826:	733b      	strb	r3, [r7, #12]
 8003828:	2300      	movs	r3, #0
 800382a:	737b      	strb	r3, [r7, #13]
 800382c:	2300      	movs	r3, #0
 800382e:	73bb      	strb	r3, [r7, #14]
 8003830:	230f      	movs	r3, #15
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	23ff      	movs	r3, #255	@ 0xff
 8003836:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8003838:	f107 030c 	add.w	r3, r7, #12
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff feeb 	bl	8003618 <tmc5160_write>

	WData[0] = 0xA8; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x0F; WData[4] = 0xFF; // DMAX = 5 000 Deceleration above V1
 8003842:	23a8      	movs	r3, #168	@ 0xa8
 8003844:	733b      	strb	r3, [r7, #12]
 8003846:	2300      	movs	r3, #0
 8003848:	737b      	strb	r3, [r7, #13]
 800384a:	2300      	movs	r3, #0
 800384c:	73bb      	strb	r3, [r7, #14]
 800384e:	230f      	movs	r3, #15
 8003850:	73fb      	strb	r3, [r7, #15]
 8003852:	23ff      	movs	r3, #255	@ 0xff
 8003854:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fedc 	bl	8003618 <tmc5160_write>

	WData[0] = 0xAA; WData[1] = 0x00; WData[2] = 0x03; WData[3] = 0x0F; WData[4] = 0xFF; // D1 = 10 000 Deceleration below V1
 8003860:	23aa      	movs	r3, #170	@ 0xaa
 8003862:	733b      	strb	r3, [r7, #12]
 8003864:	2300      	movs	r3, #0
 8003866:	737b      	strb	r3, [r7, #13]
 8003868:	2303      	movs	r3, #3
 800386a:	73bb      	strb	r3, [r7, #14]
 800386c:	230f      	movs	r3, #15
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	23ff      	movs	r3, #255	@ 0xff
 8003872:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fecd 	bl	8003618 <tmc5160_write>

	WData[0] = 0xAB; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x0F; // VSTOP = 15 Stop velocity (Near to zero)
 800387e:	23ab      	movs	r3, #171	@ 0xab
 8003880:	733b      	strb	r3, [r7, #12]
 8003882:	2300      	movs	r3, #0
 8003884:	737b      	strb	r3, [r7, #13]
 8003886:	2300      	movs	r3, #0
 8003888:	73bb      	strb	r3, [r7, #14]
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	230f      	movs	r3, #15
 8003890:	743b      	strb	r3, [r7, #16]
	tmc5160_write(WData);
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff febe 	bl	8003618 <tmc5160_write>

	tmc5160_set_motor_direction(mc->direction);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f80e 	bl	80038c4 <tmc5160_set_motor_direction>

	HAL_Delay(100);
 80038a8:	2064      	movs	r0, #100	@ 0x64
 80038aa:	f000 f985 	bl	8003bb8 <HAL_Delay>
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	66666666 	.word	0x66666666
 80038bc:	3fe66666 	.word	0x3fe66666
 80038c0:	48000800 	.word	0x48000800

080038c4 <tmc5160_set_motor_direction>:


void tmc5160_set_motor_direction(int8_t dir)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
	if(dir <= 0)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	dc13      	bgt.n	80038fe <tmc5160_set_motor_direction+0x3a>
	{
	  uint8_t WData[5] = {0};
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	2300      	movs	r3, #0
 80038dc:	753b      	strb	r3, [r7, #20]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x14; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 80038de:	2380      	movs	r3, #128	@ 0x80
 80038e0:	743b      	strb	r3, [r7, #16]
 80038e2:	2300      	movs	r3, #0
 80038e4:	747b      	strb	r3, [r7, #17]
 80038e6:	2300      	movs	r3, #0
 80038e8:	74bb      	strb	r3, [r7, #18]
 80038ea:	2300      	movs	r3, #0
 80038ec:	74fb      	strb	r3, [r7, #19]
 80038ee:	2314      	movs	r3, #20
 80038f0:	753b      	strb	r3, [r7, #20]
	  tmc5160_write(WData);
 80038f2:	f107 0310 	add.w	r3, r7, #16
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fe8e 	bl	8003618 <tmc5160_write>
	{
	  uint8_t WData[5] = {0};
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
	  tmc5160_write(WData);
	}
}
 80038fc:	e012      	b.n	8003924 <tmc5160_set_motor_direction+0x60>
	  uint8_t WData[5] = {0};
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	2300      	movs	r3, #0
 8003904:	733b      	strb	r3, [r7, #12]
	  WData[0] = 0x80; WData[1] = 0x00; WData[2] = 0x00; WData[3] = 0x00; WData[4] = 0x04; // EN_PWM_MODE=1 enables StealthChop (with default PWMCONF)
 8003906:	2380      	movs	r3, #128	@ 0x80
 8003908:	723b      	strb	r3, [r7, #8]
 800390a:	2300      	movs	r3, #0
 800390c:	727b      	strb	r3, [r7, #9]
 800390e:	2300      	movs	r3, #0
 8003910:	72bb      	strb	r3, [r7, #10]
 8003912:	2300      	movs	r3, #0
 8003914:	72fb      	strb	r3, [r7, #11]
 8003916:	2304      	movs	r3, #4
 8003918:	733b      	strb	r3, [r7, #12]
	  tmc5160_write(WData);
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fe7a 	bl	8003618 <tmc5160_write>
}
 8003924:	bf00      	nop
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003930:	4b22      	ldr	r3, [pc, #136]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003932:	4a23      	ldr	r2, [pc, #140]	@ (80039c0 <MX_USART2_UART_Init+0x94>)
 8003934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003936:	4b21      	ldr	r3, [pc, #132]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800393c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800393e:	4b1f      	ldr	r3, [pc, #124]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003944:	4b1d      	ldr	r3, [pc, #116]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800394a:	4b1c      	ldr	r3, [pc, #112]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 800394c:	2200      	movs	r2, #0
 800394e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003950:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003952:	220c      	movs	r2, #12
 8003954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003956:	4b19      	ldr	r3, [pc, #100]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003958:	2200      	movs	r2, #0
 800395a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800395c:	4b17      	ldr	r3, [pc, #92]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 800395e:	2200      	movs	r2, #0
 8003960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003962:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003964:	2200      	movs	r2, #0
 8003966:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003968:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 800396a:	2200      	movs	r2, #0
 800396c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003970:	2200      	movs	r2, #0
 8003972:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003974:	4811      	ldr	r0, [pc, #68]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003976:	f004 fe5d 	bl	8008634 <HAL_UART_Init>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003980:	f7ff f863 	bl	8002a4a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003984:	2100      	movs	r1, #0
 8003986:	480d      	ldr	r0, [pc, #52]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 8003988:	f005 ff9b 	bl	80098c2 <HAL_UARTEx_SetTxFifoThreshold>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003992:	f7ff f85a 	bl	8002a4a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003996:	2100      	movs	r1, #0
 8003998:	4808      	ldr	r0, [pc, #32]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 800399a:	f005 ffd0 	bl	800993e <HAL_UARTEx_SetRxFifoThreshold>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80039a4:	f7ff f851 	bl	8002a4a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80039a8:	4804      	ldr	r0, [pc, #16]	@ (80039bc <MX_USART2_UART_Init+0x90>)
 80039aa:	f005 ff51 	bl	8009850 <HAL_UARTEx_DisableFifoMode>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80039b4:	f7ff f849 	bl	8002a4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200005dc 	.word	0x200005dc
 80039c0:	40004400 	.word	0x40004400

080039c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b09e      	sub	sp, #120	@ 0x78
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039dc:	f107 0310 	add.w	r3, r7, #16
 80039e0:	2254      	movs	r2, #84	@ 0x54
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f007 f924 	bl	800ac32 <memset>
  if(uartHandle->Instance==USART2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a23      	ldr	r2, [pc, #140]	@ (8003a7c <HAL_UART_MspInit+0xb8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d13e      	bne.n	8003a72 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039f4:	2302      	movs	r3, #2
 80039f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 f891 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a0c:	f7ff f81d 	bl	8002a4a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_UART_MspInit+0xbc>)
 8003a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a14:	4a1a      	ldr	r2, [pc, #104]	@ (8003a80 <HAL_UART_MspInit+0xbc>)
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a1c:	4b18      	ldr	r3, [pc, #96]	@ (8003a80 <HAL_UART_MspInit+0xbc>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a28:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <HAL_UART_MspInit+0xbc>)
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2c:	4a14      	ldr	r2, [pc, #80]	@ (8003a80 <HAL_UART_MspInit+0xbc>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a34:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <HAL_UART_MspInit+0xbc>)
 8003a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a40:	230c      	movs	r3, #12
 8003a42:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a50:	2307      	movs	r3, #7
 8003a52:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a5e:	f000 fe2b 	bl	80046b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2100      	movs	r1, #0
 8003a66:	2026      	movs	r0, #38	@ 0x26
 8003a68:	f000 f9a3 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a6c:	2026      	movs	r0, #38	@ 0x26
 8003a6e:	f000 f9ba 	bl	8003de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a72:	bf00      	nop
 8003a74:	3778      	adds	r7, #120	@ 0x78
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40004400 	.word	0x40004400
 8003a80:	40021000 	.word	0x40021000

08003a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a84:	480d      	ldr	r0, [pc, #52]	@ (8003abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a88:	f7ff fb58 	bl	800313c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a8c:	480c      	ldr	r0, [pc, #48]	@ (8003ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a8e:	490d      	ldr	r1, [pc, #52]	@ (8003ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a90:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac8 <LoopForever+0xe>)
  movs r3, #0
 8003a92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a94:	e002      	b.n	8003a9c <LoopCopyDataInit>

08003a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a9a:	3304      	adds	r3, #4

08003a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa0:	d3f9      	bcc.n	8003a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8003ad0 <LoopForever+0x16>)
  movs r3, #0
 8003aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aa8:	e001      	b.n	8003aae <LoopFillZerobss>

08003aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aac:	3204      	adds	r2, #4

08003aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab0:	d3fb      	bcc.n	8003aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ab2:	f007 f97d 	bl	800adb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ab6:	f7fe ff55 	bl	8002964 <main>

08003aba <LoopForever>:

LoopForever:
    b LoopForever
 8003aba:	e7fe      	b.n	8003aba <LoopForever>
  ldr   r0, =_estack
 8003abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ac4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003ac8:	0800e6f0 	.word	0x0800e6f0
  ldr r2, =_sbss
 8003acc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003ad0:	200007c4 	.word	0x200007c4

08003ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ad4:	e7fe      	b.n	8003ad4 <ADC1_2_IRQHandler>

08003ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	f000 f95b 	bl	8003d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ae6:	200f      	movs	r0, #15
 8003ae8:	f000 f80e 	bl	8003b08 <HAL_InitTick>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	71fb      	strb	r3, [r7, #7]
 8003af6:	e001      	b.n	8003afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003af8:	f7ff f9b6 	bl	8002e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003afc:	79fb      	ldrb	r3, [r7, #7]

}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003b14:	4b16      	ldr	r3, [pc, #88]	@ (8003b70 <HAL_InitTick+0x68>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d022      	beq.n	8003b62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003b1c:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <HAL_InitTick+0x6c>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b13      	ldr	r3, [pc, #76]	@ (8003b70 <HAL_InitTick+0x68>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 f966 	bl	8003e02 <HAL_SYSTICK_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10f      	bne.n	8003b5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b0f      	cmp	r3, #15
 8003b40:	d809      	bhi.n	8003b56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b42:	2200      	movs	r2, #0
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4a:	f000 f932 	bl	8003db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <HAL_InitTick+0x70>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e007      	b.n	8003b66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e004      	b.n	8003b66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	e001      	b.n	8003b66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	2000000c 	.word	0x2000000c
 8003b74:	20000004 	.word	0x20000004
 8003b78:	20000008 	.word	0x20000008

08003b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_IncTick+0x1c>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <HAL_IncTick+0x20>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	4a03      	ldr	r2, [pc, #12]	@ (8003b98 <HAL_IncTick+0x1c>)
 8003b8c:	6013      	str	r3, [r2, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	20000670 	.word	0x20000670
 8003b9c:	2000000c 	.word	0x2000000c

08003ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	@ (8003bb4 <HAL_GetTick+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000670 	.word	0x20000670

08003bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7ff ffee 	bl	8003ba0 <HAL_GetTick>
 8003bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d004      	beq.n	8003bdc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <HAL_Delay+0x40>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bdc:	bf00      	nop
 8003bde:	f7ff ffdf 	bl	8003ba0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d8f7      	bhi.n	8003bde <HAL_Delay+0x26>
  {
  }
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	2000000c 	.word	0x2000000c

08003bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c2e:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	60d3      	str	r3, [r2, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c48:	4b04      	ldr	r3, [pc, #16]	@ (8003c5c <__NVIC_GetPriorityGrouping+0x18>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	f003 0307 	and.w	r3, r3, #7
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	db0b      	blt.n	8003c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	f003 021f 	and.w	r2, r3, #31
 8003c78:	4907      	ldr	r1, [pc, #28]	@ (8003c98 <__NVIC_EnableIRQ+0x38>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2001      	movs	r0, #1
 8003c82:	fa00 f202 	lsl.w	r2, r0, r2
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000e100 	.word	0xe000e100

08003c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	6039      	str	r1, [r7, #0]
 8003ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	db0a      	blt.n	8003cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	490c      	ldr	r1, [pc, #48]	@ (8003ce8 <__NVIC_SetPriority+0x4c>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	0112      	lsls	r2, r2, #4
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc4:	e00a      	b.n	8003cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4908      	ldr	r1, [pc, #32]	@ (8003cec <__NVIC_SetPriority+0x50>)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	3b04      	subs	r3, #4
 8003cd4:	0112      	lsls	r2, r2, #4
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	440b      	add	r3, r1
 8003cda:	761a      	strb	r2, [r3, #24]
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000e100 	.word	0xe000e100
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b089      	sub	sp, #36	@ 0x24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f1c3 0307 	rsb	r3, r3, #7
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	bf28      	it	cs
 8003d0e:	2304      	movcs	r3, #4
 8003d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3304      	adds	r3, #4
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d902      	bls.n	8003d20 <NVIC_EncodePriority+0x30>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3b03      	subs	r3, #3
 8003d1e:	e000      	b.n	8003d22 <NVIC_EncodePriority+0x32>
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d24:	f04f 32ff 	mov.w	r2, #4294967295
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	401a      	ands	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d38:	f04f 31ff 	mov.w	r1, #4294967295
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	43d9      	mvns	r1, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	4313      	orrs	r3, r2
         );
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3724      	adds	r7, #36	@ 0x24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d68:	d301      	bcc.n	8003d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e00f      	b.n	8003d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <SysTick_Config+0x40>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d76:	210f      	movs	r1, #15
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7c:	f7ff ff8e 	bl	8003c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d80:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <SysTick_Config+0x40>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d86:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <SysTick_Config+0x40>)
 8003d88:	2207      	movs	r2, #7
 8003d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	e000e010 	.word	0xe000e010

08003d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff29 	bl	8003bfc <__NVIC_SetPriorityGrouping>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc0:	f7ff ff40 	bl	8003c44 <__NVIC_GetPriorityGrouping>
 8003dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	6978      	ldr	r0, [r7, #20]
 8003dcc:	f7ff ff90 	bl	8003cf0 <NVIC_EncodePriority>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff5f 	bl	8003c9c <__NVIC_SetPriority>
}
 8003dde:	bf00      	nop
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff33 	bl	8003c60 <__NVIC_EnableIRQ>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ffa4 	bl	8003d58 <SysTick_Config>
 8003e10:	4603      	mov	r3, r0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e08d      	b.n	8003f4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b47      	ldr	r3, [pc, #284]	@ (8003f54 <HAL_DMA_Init+0x138>)
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d80f      	bhi.n	8003e5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b45      	ldr	r3, [pc, #276]	@ (8003f58 <HAL_DMA_Init+0x13c>)
 8003e42:	4413      	add	r3, r2
 8003e44:	4a45      	ldr	r2, [pc, #276]	@ (8003f5c <HAL_DMA_Init+0x140>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	009a      	lsls	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a42      	ldr	r2, [pc, #264]	@ (8003f60 <HAL_DMA_Init+0x144>)
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e58:	e00e      	b.n	8003e78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b40      	ldr	r3, [pc, #256]	@ (8003f64 <HAL_DMA_Init+0x148>)
 8003e62:	4413      	add	r3, r2
 8003e64:	4a3d      	ldr	r2, [pc, #244]	@ (8003f5c <HAL_DMA_Init+0x140>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	009a      	lsls	r2, r3, #2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a3c      	ldr	r2, [pc, #240]	@ (8003f68 <HAL_DMA_Init+0x14c>)
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f9cc 	bl	8004268 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ed8:	d102      	bne.n	8003ee0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ef4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d010      	beq.n	8003f20 <HAL_DMA_Init+0x104>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d80c      	bhi.n	8003f20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9ec 	bl	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	e008      	b.n	8003f32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40020407 	.word	0x40020407
 8003f58:	bffdfff8 	.word	0xbffdfff8
 8003f5c:	cccccccd 	.word	0xcccccccd
 8003f60:	40020000 	.word	0x40020000
 8003f64:	bffdfbf8 	.word	0xbffdfbf8
 8003f68:	40020400 	.word	0x40020400

08003f6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d005      	beq.n	8003f90 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2204      	movs	r2, #4
 8003f88:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e037      	b.n	8004000 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 020e 	bic.w	r2, r2, #14
 8003f9e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003faa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fae:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fdc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00c      	beq.n	8004000 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ff4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ffe:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004010:	7bfb      	ldrb	r3, [r7, #15]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d00d      	beq.n	8004052 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2204      	movs	r2, #4
 800403a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e047      	b.n	80040e2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 020e 	bic.w	r2, r2, #14
 8004060:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004080:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	f003 021f 	and.w	r2, r3, #31
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	2101      	movs	r1, #1
 8004090:	fa01 f202 	lsl.w	r2, r1, r2
 8004094:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800409e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00c      	beq.n	80040c2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
    }
  }
  return status;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2204      	movs	r2, #4
 800410e:	409a      	lsls	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d026      	beq.n	8004166 <HAL_DMA_IRQHandler+0x7a>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d021      	beq.n	8004166 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	2104      	movs	r1, #4
 800414e:	fa01 f202 	lsl.w	r2, r1, r2
 8004152:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	2b00      	cmp	r3, #0
 800415a:	d071      	beq.n	8004240 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004164:	e06c      	b.n	8004240 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	2202      	movs	r2, #2
 8004170:	409a      	lsls	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d02e      	beq.n	80041d8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d029      	beq.n	80041d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 020a 	bic.w	r2, r2, #10
 80041a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	f003 021f 	and.w	r2, r3, #31
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	2102      	movs	r1, #2
 80041b8:	fa01 f202 	lsl.w	r2, r1, r2
 80041bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d038      	beq.n	8004240 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041d6:	e033      	b.n	8004240 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2208      	movs	r2, #8
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02a      	beq.n	8004242 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d025      	beq.n	8004242 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 020e 	bic.w	r2, r2, #14
 8004204:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	f003 021f 	and.w	r2, r3, #31
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f202 	lsl.w	r2, r1, r2
 8004218:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004240:	bf00      	nop
 8004242:	bf00      	nop
}
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004258:	b2db      	uxtb	r3, r3
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4b16      	ldr	r3, [pc, #88]	@ (80042d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004278:	429a      	cmp	r2, r3
 800427a:	d802      	bhi.n	8004282 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800427c:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e001      	b.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004282:	4b15      	ldr	r3, [pc, #84]	@ (80042d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004284:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	3b08      	subs	r3, #8
 8004292:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a0:	089b      	lsrs	r3, r3, #2
 80042a2:	009a      	lsls	r2, r3, #2
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4413      	add	r3, r2
 80042a8:	461a      	mov	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a0b      	ldr	r2, [pc, #44]	@ (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80042b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2201      	movs	r2, #1
 80042bc:	409a      	lsls	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40020407 	.word	0x40020407
 80042d4:	40020800 	.word	0x40020800
 80042d8:	40020820 	.word	0x40020820
 80042dc:	cccccccd 	.word	0xcccccccd
 80042e0:	40020880 	.word	0x40020880

080042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a08      	ldr	r2, [pc, #32]	@ (8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004306:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3b01      	subs	r3, #1
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2201      	movs	r2, #1
 8004312:	409a      	lsls	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	1000823f 	.word	0x1000823f
 8004328:	40020940 	.word	0x40020940

0800432c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e147      	b.n	80045ce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fe f854 	bl	8002400 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0210 	bic.w	r2, r2, #16
 8004366:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004368:	f7ff fc1a 	bl	8003ba0 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800436e:	e012      	b.n	8004396 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004370:	f7ff fc16 	bl	8003ba0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b0a      	cmp	r3, #10
 800437c:	d90b      	bls.n	8004396 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2203      	movs	r2, #3
 800438e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e11b      	b.n	80045ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d0e5      	beq.n	8004370 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043b4:	f7ff fbf4 	bl	8003ba0 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80043ba:	e012      	b.n	80043e2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80043bc:	f7ff fbf0 	bl	8003ba0 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b0a      	cmp	r3, #10
 80043c8:	d90b      	bls.n	80043e2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2203      	movs	r2, #3
 80043da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0f5      	b.n	80045ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0e5      	beq.n	80043bc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0202 	orr.w	r2, r2, #2
 80043fe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a74      	ldr	r2, [pc, #464]	@ (80045d8 <HAL_FDCAN_Init+0x2ac>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d103      	bne.n	8004412 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800440a:	4a74      	ldr	r2, [pc, #464]	@ (80045dc <HAL_FDCAN_Init+0x2b0>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7c1b      	ldrb	r3, [r3, #16]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d108      	bne.n	800442c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004428:	619a      	str	r2, [r3, #24]
 800442a:	e007      	b.n	800443c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800443a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7c5b      	ldrb	r3, [r3, #17]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d108      	bne.n	8004456 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004452:	619a      	str	r2, [r3, #24]
 8004454:	e007      	b.n	8004466 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004464:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7c9b      	ldrb	r3, [r3, #18]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d108      	bne.n	8004480 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800447c:	619a      	str	r2, [r3, #24]
 800447e:	e007      	b.n	8004490 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800448e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699a      	ldr	r2, [r3, #24]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80044b4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0210 	bic.w	r2, r2, #16
 80044c4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d108      	bne.n	80044e0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0204 	orr.w	r2, r2, #4
 80044dc:	619a      	str	r2, [r3, #24]
 80044de:	e02c      	b.n	800453a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d028      	beq.n	800453a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d01c      	beq.n	800452a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044fe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0210 	orr.w	r2, r2, #16
 800450e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d110      	bne.n	800453a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0220 	orr.w	r2, r2, #32
 8004526:	619a      	str	r2, [r3, #24]
 8004528:	e007      	b.n	800453a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0220 	orr.w	r2, r2, #32
 8004538:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	3b01      	subs	r3, #1
 8004540:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	3b01      	subs	r3, #1
 8004548:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800454a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004552:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	3b01      	subs	r3, #1
 800455c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004562:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004564:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800456e:	d115      	bne.n	800459c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	3b01      	subs	r3, #1
 800457c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800457e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	3b01      	subs	r3, #1
 8004586:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004588:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	3b01      	subs	r3, #1
 8004592:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004598:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800459a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f814 	bl	80045e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40006400 	.word	0x40006400
 80045dc:	40006500 	.word	0x40006500

080045e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80045e8:	4b30      	ldr	r3, [pc, #192]	@ (80046ac <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80045ea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2f      	ldr	r2, [pc, #188]	@ (80046b0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d103      	bne.n	80045fe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80045fc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2c      	ldr	r2, [pc, #176]	@ (80046b4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800460e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004626:	041a      	lsls	r2, r3, #16
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004644:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	061a      	lsls	r2, r3, #24
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e005      	b.n	8004692 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3304      	adds	r3, #4
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	429a      	cmp	r2, r3
 800469c:	d3f3      	bcc.n	8004686 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	4000a400 	.word	0x4000a400
 80046b0:	40006800 	.word	0x40006800
 80046b4:	40006c00 	.word	0x40006c00

080046b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046c6:	e15a      	b.n	800497e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2101      	movs	r1, #1
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	fa01 f303 	lsl.w	r3, r1, r3
 80046d4:	4013      	ands	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 814c 	beq.w	8004978 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d005      	beq.n	80046f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d130      	bne.n	800475a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	2203      	movs	r2, #3
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4013      	ands	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800472e:	2201      	movs	r2, #1
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4013      	ands	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	091b      	lsrs	r3, r3, #4
 8004744:	f003 0201 	and.w	r2, r3, #1
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b03      	cmp	r3, #3
 8004764:	d017      	beq.n	8004796 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	2203      	movs	r2, #3
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4013      	ands	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d123      	bne.n	80047ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	08da      	lsrs	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3208      	adds	r2, #8
 80047aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	220f      	movs	r2, #15
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	08da      	lsrs	r2, r3, #3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3208      	adds	r2, #8
 80047e4:	6939      	ldr	r1, [r7, #16]
 80047e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	2203      	movs	r2, #3
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 0203 	and.w	r2, r3, #3
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80a6 	beq.w	8004978 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482c:	4b5b      	ldr	r3, [pc, #364]	@ (800499c <HAL_GPIO_Init+0x2e4>)
 800482e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004830:	4a5a      	ldr	r2, [pc, #360]	@ (800499c <HAL_GPIO_Init+0x2e4>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6613      	str	r3, [r2, #96]	@ 0x60
 8004838:	4b58      	ldr	r3, [pc, #352]	@ (800499c <HAL_GPIO_Init+0x2e4>)
 800483a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004844:	4a56      	ldr	r2, [pc, #344]	@ (80049a0 <HAL_GPIO_Init+0x2e8>)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	3302      	adds	r3, #2
 800484c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	220f      	movs	r2, #15
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800486e:	d01f      	beq.n	80048b0 <HAL_GPIO_Init+0x1f8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a4c      	ldr	r2, [pc, #304]	@ (80049a4 <HAL_GPIO_Init+0x2ec>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d019      	beq.n	80048ac <HAL_GPIO_Init+0x1f4>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a4b      	ldr	r2, [pc, #300]	@ (80049a8 <HAL_GPIO_Init+0x2f0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_GPIO_Init+0x1f0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a4a      	ldr	r2, [pc, #296]	@ (80049ac <HAL_GPIO_Init+0x2f4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00d      	beq.n	80048a4 <HAL_GPIO_Init+0x1ec>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a49      	ldr	r2, [pc, #292]	@ (80049b0 <HAL_GPIO_Init+0x2f8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <HAL_GPIO_Init+0x1e8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a48      	ldr	r2, [pc, #288]	@ (80049b4 <HAL_GPIO_Init+0x2fc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <HAL_GPIO_Init+0x1e4>
 8004898:	2305      	movs	r3, #5
 800489a:	e00a      	b.n	80048b2 <HAL_GPIO_Init+0x1fa>
 800489c:	2306      	movs	r3, #6
 800489e:	e008      	b.n	80048b2 <HAL_GPIO_Init+0x1fa>
 80048a0:	2304      	movs	r3, #4
 80048a2:	e006      	b.n	80048b2 <HAL_GPIO_Init+0x1fa>
 80048a4:	2303      	movs	r3, #3
 80048a6:	e004      	b.n	80048b2 <HAL_GPIO_Init+0x1fa>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e002      	b.n	80048b2 <HAL_GPIO_Init+0x1fa>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_GPIO_Init+0x1fa>
 80048b0:	2300      	movs	r3, #0
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	f002 0203 	and.w	r2, r2, #3
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	4093      	lsls	r3, r2
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048c2:	4937      	ldr	r1, [pc, #220]	@ (80049a0 <HAL_GPIO_Init+0x2e8>)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	3302      	adds	r3, #2
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048d0:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <HAL_GPIO_Init+0x300>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	43db      	mvns	r3, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4013      	ands	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048f4:	4a30      	ldr	r2, [pc, #192]	@ (80049b8 <HAL_GPIO_Init+0x300>)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048fa:	4b2f      	ldr	r3, [pc, #188]	@ (80049b8 <HAL_GPIO_Init+0x300>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800491e:	4a26      	ldr	r2, [pc, #152]	@ (80049b8 <HAL_GPIO_Init+0x300>)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004924:	4b24      	ldr	r3, [pc, #144]	@ (80049b8 <HAL_GPIO_Init+0x300>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	43db      	mvns	r3, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4013      	ands	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004948:	4a1b      	ldr	r2, [pc, #108]	@ (80049b8 <HAL_GPIO_Init+0x300>)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800494e:	4b1a      	ldr	r3, [pc, #104]	@ (80049b8 <HAL_GPIO_Init+0x300>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	43db      	mvns	r3, r3
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004972:	4a11      	ldr	r2, [pc, #68]	@ (80049b8 <HAL_GPIO_Init+0x300>)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	3301      	adds	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f ae9d 	bne.w	80046c8 <HAL_GPIO_Init+0x10>
  }
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40021000 	.word	0x40021000
 80049a0:	40010000 	.word	0x40010000
 80049a4:	48000400 	.word	0x48000400
 80049a8:	48000800 	.word	0x48000800
 80049ac:	48000c00 	.word	0x48000c00
 80049b0:	48001000 	.word	0x48001000
 80049b4:	48001400 	.word	0x48001400
 80049b8:	40010400 	.word	0x40010400

080049bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	807b      	strh	r3, [r7, #2]
 80049c8:	4613      	mov	r3, r2
 80049ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049cc:	787b      	ldrb	r3, [r7, #1]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049d2:	887a      	ldrh	r2, [r7, #2]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049d8:	e002      	b.n	80049e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4013      	ands	r3, r2
 8004a04:	041a      	lsls	r2, r3, #16
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43d9      	mvns	r1, r3
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	400b      	ands	r3, r1
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e08d      	b.n	8004b4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fd fe1c 	bl	8002684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2224      	movs	r2, #36	@ 0x24
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d107      	bne.n	8004a9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	e006      	b.n	8004aa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004aa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d108      	bne.n	8004ac2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	e007      	b.n	8004ad2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004af4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69d9      	ldr	r1, [r3, #28]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	461a      	mov	r2, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	817b      	strh	r3, [r7, #10]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	813b      	strh	r3, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	f040 80fd 	bne.w	8004d7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_I2C_Mem_Read+0x34>
 8004b86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0f1      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_I2C_Mem_Read+0x4e>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e0ea      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bae:	f7fe fff7 	bl	8003ba0 <HAL_GetTick>
 8004bb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2319      	movs	r3, #25
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fee4 	bl	800598e <I2C_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0d5      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2222      	movs	r2, #34	@ 0x22
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2240      	movs	r2, #64	@ 0x40
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a3a      	ldr	r2, [r7, #32]
 8004bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bf8:	88f8      	ldrh	r0, [r7, #6]
 8004bfa:	893a      	ldrh	r2, [r7, #8]
 8004bfc:	8979      	ldrh	r1, [r7, #10]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	4603      	mov	r3, r0
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fa7b 	bl	8005104 <I2C_RequestMemoryRead>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0ad      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2bff      	cmp	r3, #255	@ 0xff
 8004c28:	d90e      	bls.n	8004c48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	22ff      	movs	r2, #255	@ 0xff
 8004c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	8979      	ldrh	r1, [r7, #10]
 8004c38:	4b52      	ldr	r3, [pc, #328]	@ (8004d84 <HAL_I2C_Mem_Read+0x22c>)
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f001 f867 	bl	8005d14 <I2C_TransferConfig>
 8004c46:	e00f      	b.n	8004c68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	8979      	ldrh	r1, [r7, #10]
 8004c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d84 <HAL_I2C_Mem_Read+0x22c>)
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f001 f856 	bl	8005d14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2104      	movs	r1, #4
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fe8b 	bl	800598e <I2C_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e07c      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d034      	beq.n	8004d28 <HAL_I2C_Mem_Read+0x1d0>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d130      	bne.n	8004d28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2180      	movs	r1, #128	@ 0x80
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fe5c 	bl	800598e <I2C_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e04d      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2bff      	cmp	r3, #255	@ 0xff
 8004ce8:	d90e      	bls.n	8004d08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	22ff      	movs	r2, #255	@ 0xff
 8004cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	8979      	ldrh	r1, [r7, #10]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f001 f807 	bl	8005d14 <I2C_TransferConfig>
 8004d06:	e00f      	b.n	8004d28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	8979      	ldrh	r1, [r7, #10]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fff6 	bl	8005d14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d19a      	bne.n	8004c68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fec9 	bl	8005ace <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e01a      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_I2C_Mem_Read+0x230>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e000      	b.n	8004d7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	80002400 	.word	0x80002400
 8004d88:	fe00e800 	.word	0xfe00e800

08004d8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
  }
}
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00f      	beq.n	8004e02 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df0:	f043 0201 	orr.w	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e00:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00f      	beq.n	8004e2c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1a:	f043 0208 	orr.w	r2, r3, #8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e2a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00f      	beq.n	8004e56 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e44:	f043 0202 	orr.w	r2, r3, #2
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e54:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 030b 	and.w	r3, r3, #11
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fc37 	bl	80056dc <I2C_ITError>
  }
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	70fb      	strb	r3, [r7, #3]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f04:	b2db      	uxtb	r3, r3
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <I2C_Slave_ISR_IT+0x24>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e0e2      	b.n	80050fc <I2C_Slave_ISR_IT+0x1ea>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d004      	beq.n	8004f5c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f52:	6939      	ldr	r1, [r7, #16]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fa09 	bl	800536c <I2C_ITSlaveCplt>
 8004f5a:	e0ca      	b.n	80050f2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d04b      	beq.n	8004ffe <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d046      	beq.n	8004ffe <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d128      	bne.n	8004fcc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b28      	cmp	r3, #40	@ 0x28
 8004f84:	d108      	bne.n	8004f98 <I2C_Slave_ISR_IT+0x86>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f8c:	d104      	bne.n	8004f98 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f8e:	6939      	ldr	r1, [r7, #16]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fb4f 	bl	8005634 <I2C_ITListenCplt>
 8004f96:	e031      	b.n	8004ffc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b29      	cmp	r3, #41	@ 0x29
 8004fa2:	d10e      	bne.n	8004fc2 <I2C_Slave_ISR_IT+0xb0>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004faa:	d00a      	beq.n	8004fc2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fca8 	bl	800590a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f97a 	bl	80052b4 <I2C_ITSlaveSeqCplt>
 8004fc0:	e01c      	b.n	8004ffc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2210      	movs	r2, #16
 8004fc8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004fca:	e08f      	b.n	80050ec <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd8:	f043 0204 	orr.w	r2, r3, #4
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <I2C_Slave_ISR_IT+0xdc>
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fec:	d17e      	bne.n	80050ec <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fb71 	bl	80056dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004ffa:	e077      	b.n	80050ec <I2C_Slave_ISR_IT+0x1da>
 8004ffc:	e076      	b.n	80050ec <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02f      	beq.n	8005068 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800500e:	2b00      	cmp	r3, #0
 8005010:	d02a      	beq.n	8005068 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d018      	beq.n	800504e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d14b      	bne.n	80050f0 <I2C_Slave_ISR_IT+0x1de>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800505e:	d047      	beq.n	80050f0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f927 	bl	80052b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005066:	e043      	b.n	80050f0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800507c:	6939      	ldr	r1, [r7, #16]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f894 	bl	80051ac <I2C_ITAddrCplt>
 8005084:	e035      	b.n	80050f2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d030      	beq.n	80050f2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005096:	2b00      	cmp	r3, #0
 8005098:	d02b      	beq.n	80050f2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d018      	beq.n	80050d6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80050d4:	e00d      	b.n	80050f2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050dc:	d002      	beq.n	80050e4 <I2C_Slave_ISR_IT+0x1d2>
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f8e5 	bl	80052b4 <I2C_ITSlaveSeqCplt>
 80050ea:	e002      	b.n	80050f2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80050ec:	bf00      	nop
 80050ee:	e000      	b.n	80050f2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80050f0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	4608      	mov	r0, r1
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	4603      	mov	r3, r0
 8005114:	817b      	strh	r3, [r7, #10]
 8005116:	460b      	mov	r3, r1
 8005118:	813b      	strh	r3, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	b2da      	uxtb	r2, r3
 8005122:	8979      	ldrh	r1, [r7, #10]
 8005124:	4b20      	ldr	r3, [pc, #128]	@ (80051a8 <I2C_RequestMemoryRead+0xa4>)
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2300      	movs	r3, #0
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fdf2 	bl	8005d14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	69b9      	ldr	r1, [r7, #24]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fc83 	bl	8005a40 <I2C_WaitOnTXISFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e02c      	b.n	800519e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d105      	bne.n	8005156 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800514a:	893b      	ldrh	r3, [r7, #8]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	629a      	str	r2, [r3, #40]	@ 0x28
 8005154:	e015      	b.n	8005182 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005156:	893b      	ldrh	r3, [r7, #8]
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	b29b      	uxth	r3, r3
 800515c:	b2da      	uxtb	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	69b9      	ldr	r1, [r7, #24]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fc69 	bl	8005a40 <I2C_WaitOnTXISFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e012      	b.n	800519e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005178:	893b      	ldrh	r3, [r7, #8]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2200      	movs	r2, #0
 800518a:	2140      	movs	r1, #64	@ 0x40
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fbfe 	bl	800598e <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	80002000 	.word	0x80002000

080051ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051c2:	2b28      	cmp	r3, #40	@ 0x28
 80051c4:	d16a      	bne.n	800529c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	0c1b      	lsrs	r3, r3, #16
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80051e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005200:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d138      	bne.n	800527c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800520a:	897b      	ldrh	r3, [r7, #10]
 800520c:	09db      	lsrs	r3, r3, #7
 800520e:	b29a      	uxth	r2, r3
 8005210:	89bb      	ldrh	r3, [r7, #12]
 8005212:	4053      	eors	r3, r2
 8005214:	b29b      	uxth	r3, r3
 8005216:	f003 0306 	and.w	r3, r3, #6
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11c      	bne.n	8005258 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005230:	2b02      	cmp	r3, #2
 8005232:	d13b      	bne.n	80052ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2208      	movs	r2, #8
 8005240:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800524a:	89ba      	ldrh	r2, [r7, #12]
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff fe24 	bl	8004e9e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005256:	e029      	b.n	80052ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005258:	893b      	ldrh	r3, [r7, #8]
 800525a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800525c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fd89 	bl	8005d78 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800526e:	89ba      	ldrh	r2, [r7, #12]
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff fe12 	bl	8004e9e <HAL_I2C_AddrCallback>
}
 800527a:	e017      	b.n	80052ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800527c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fd79 	bl	8005d78 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800528e:	89ba      	ldrh	r2, [r7, #12]
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fe02 	bl	8004e9e <HAL_I2C_AddrCallback>
}
 800529a:	e007      	b.n	80052ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2208      	movs	r2, #8
 80052a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e00c      	b.n	8005302 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005300:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b29      	cmp	r3, #41	@ 0x29
 800530c:	d112      	bne.n	8005334 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2228      	movs	r2, #40	@ 0x28
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2221      	movs	r2, #33	@ 0x21
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800531c:	2101      	movs	r1, #1
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fd2a 	bl	8005d78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff fda2 	bl	8004e76 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005332:	e017      	b.n	8005364 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b2a      	cmp	r3, #42	@ 0x2a
 800533e:	d111      	bne.n	8005364 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2228      	movs	r2, #40	@ 0x28
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2222      	movs	r2, #34	@ 0x22
 800534c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800534e:	2102      	movs	r1, #2
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fd11 	bl	8005d78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fd93 	bl	8004e8a <HAL_I2C_SlaveRxCpltCallback>
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800538e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2220      	movs	r2, #32
 8005396:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005398:	7afb      	ldrb	r3, [r7, #11]
 800539a:	2b21      	cmp	r3, #33	@ 0x21
 800539c:	d002      	beq.n	80053a4 <I2C_ITSlaveCplt+0x38>
 800539e:	7afb      	ldrb	r3, [r7, #11]
 80053a0:	2b29      	cmp	r3, #41	@ 0x29
 80053a2:	d108      	bne.n	80053b6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80053a4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fce5 	bl	8005d78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2221      	movs	r2, #33	@ 0x21
 80053b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80053b4:	e019      	b.n	80053ea <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053b6:	7afb      	ldrb	r3, [r7, #11]
 80053b8:	2b22      	cmp	r3, #34	@ 0x22
 80053ba:	d002      	beq.n	80053c2 <I2C_ITSlaveCplt+0x56>
 80053bc:	7afb      	ldrb	r3, [r7, #11]
 80053be:	2b2a      	cmp	r3, #42	@ 0x2a
 80053c0:	d108      	bne.n	80053d4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80053c2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fcd6 	bl	8005d78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2222      	movs	r2, #34	@ 0x22
 80053d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80053d2:	e00a      	b.n	80053ea <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80053d4:	7afb      	ldrb	r3, [r7, #11]
 80053d6:	2b28      	cmp	r3, #40	@ 0x28
 80053d8:	d107      	bne.n	80053ea <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80053da:	f248 0103 	movw	r1, #32771	@ 0x8003
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fcca 	bl	8005d78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053f8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	4b89      	ldr	r3, [pc, #548]	@ (800562c <I2C_ITSlaveCplt+0x2c0>)
 8005406:	400b      	ands	r3, r1
 8005408:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa7d 	bl	800590a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d013      	beq.n	8005442 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005428:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01f      	beq.n	8005472 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	b29a      	uxth	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005440:	e017      	b.n	8005472 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d012      	beq.n	8005472 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800545a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	b29a      	uxth	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d020      	beq.n	80054be <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0304 	bic.w	r3, r3, #4
 8005482:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00c      	beq.n	80054be <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054cc:	f043 0204 	orr.w	r2, r3, #4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d049      	beq.n	8005572 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d044      	beq.n	8005572 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d128      	bne.n	8005544 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b28      	cmp	r3, #40	@ 0x28
 80054fc:	d108      	bne.n	8005510 <I2C_ITSlaveCplt+0x1a4>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005504:	d104      	bne.n	8005510 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005506:	6979      	ldr	r1, [r7, #20]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f893 	bl	8005634 <I2C_ITListenCplt>
 800550e:	e030      	b.n	8005572 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b29      	cmp	r3, #41	@ 0x29
 800551a:	d10e      	bne.n	800553a <I2C_ITSlaveCplt+0x1ce>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005522:	d00a      	beq.n	800553a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2210      	movs	r2, #16
 800552a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f9ec 	bl	800590a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff febe 	bl	80052b4 <I2C_ITSlaveSeqCplt>
 8005538:	e01b      	b.n	8005572 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2210      	movs	r2, #16
 8005540:	61da      	str	r2, [r3, #28]
 8005542:	e016      	b.n	8005572 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2210      	movs	r2, #16
 800554a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005550:	f043 0204 	orr.w	r2, r3, #4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <I2C_ITSlaveCplt+0x1fa>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005564:	d105      	bne.n	8005572 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f8b5 	bl	80056dc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005584:	2b00      	cmp	r3, #0
 8005586:	d010      	beq.n	80055aa <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f8a4 	bl	80056dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b28      	cmp	r3, #40	@ 0x28
 800559e:	d141      	bne.n	8005624 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80055a0:	6979      	ldr	r1, [r7, #20]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f846 	bl	8005634 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055a8:	e03c      	b.n	8005624 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055b2:	d014      	beq.n	80055de <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fe7d 	bl	80052b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005630 <I2C_ITSlaveCplt+0x2c4>)
 80055be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff fc6f 	bl	8004eba <HAL_I2C_ListenCpltCallback>
}
 80055dc:	e022      	b.n	8005624 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b22      	cmp	r3, #34	@ 0x22
 80055e8:	d10e      	bne.n	8005608 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fc42 	bl	8004e8a <HAL_I2C_SlaveRxCpltCallback>
}
 8005606:	e00d      	b.n	8005624 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fc29 	bl	8004e76 <HAL_I2C_SlaveTxCpltCallback>
}
 8005624:	bf00      	nop
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	fe00e800 	.word	0xfe00e800
 8005630:	ffff0000 	.word	0xffff0000

08005634 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a25      	ldr	r2, [pc, #148]	@ (80056d8 <I2C_ITListenCplt+0xa4>)
 8005642:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d022      	beq.n	80056b0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d012      	beq.n	80056b0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a8:	f043 0204 	orr.w	r2, r3, #4
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056b0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fb5f 	bl	8005d78 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2210      	movs	r2, #16
 80056c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fbf5 	bl	8004eba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	ffff0000 	.word	0xffff0000

080056dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056ec:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a6d      	ldr	r2, [pc, #436]	@ (80058b0 <I2C_ITError+0x1d4>)
 80056fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b28      	cmp	r3, #40	@ 0x28
 8005712:	d005      	beq.n	8005720 <I2C_ITError+0x44>
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	2b29      	cmp	r3, #41	@ 0x29
 8005718:	d002      	beq.n	8005720 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	2b2a      	cmp	r3, #42	@ 0x2a
 800571e:	d10b      	bne.n	8005738 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005720:	2103      	movs	r1, #3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fb28 	bl	8005d78 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2228      	movs	r2, #40	@ 0x28
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a60      	ldr	r2, [pc, #384]	@ (80058b4 <I2C_ITError+0x1d8>)
 8005734:	635a      	str	r2, [r3, #52]	@ 0x34
 8005736:	e030      	b.n	800579a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005738:	f248 0103 	movw	r1, #32771	@ 0x8003
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fb1b 	bl	8005d78 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f8e1 	bl	800590a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b60      	cmp	r3, #96	@ 0x60
 8005752:	d01f      	beq.n	8005794 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b20      	cmp	r3, #32
 8005768:	d114      	bne.n	8005794 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b10      	cmp	r3, #16
 8005776:	d109      	bne.n	800578c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2210      	movs	r2, #16
 800577e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005784:	f043 0204 	orr.w	r2, r3, #4
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2220      	movs	r2, #32
 8005792:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d039      	beq.n	800581c <I2C_ITError+0x140>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b11      	cmp	r3, #17
 80057ac:	d002      	beq.n	80057b4 <I2C_ITError+0xd8>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b21      	cmp	r3, #33	@ 0x21
 80057b2:	d133      	bne.n	800581c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057c2:	d107      	bne.n	80057d4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fe fd36 	bl	800424a <HAL_DMA_GetState>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d017      	beq.n	8005814 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e8:	4a33      	ldr	r2, [pc, #204]	@ (80058b8 <I2C_ITError+0x1dc>)
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe fc10 	bl	800401e <HAL_DMA_Abort_IT>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d04d      	beq.n	80058a0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800580e:	4610      	mov	r0, r2
 8005810:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005812:	e045      	b.n	80058a0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f851 	bl	80058bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800581a:	e041      	b.n	80058a0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d039      	beq.n	8005898 <I2C_ITError+0x1bc>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b12      	cmp	r3, #18
 8005828:	d002      	beq.n	8005830 <I2C_ITError+0x154>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b22      	cmp	r3, #34	@ 0x22
 800582e:	d133      	bne.n	8005898 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800583a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583e:	d107      	bne.n	8005850 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800584e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fcf8 	bl	800424a <HAL_DMA_GetState>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d017      	beq.n	8005890 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005864:	4a14      	ldr	r2, [pc, #80]	@ (80058b8 <I2C_ITError+0x1dc>)
 8005866:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe fbd2 	bl	800401e <HAL_DMA_Abort_IT>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d011      	beq.n	80058a4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800588a:	4610      	mov	r0, r2
 800588c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800588e:	e009      	b.n	80058a4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f813 	bl	80058bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005896:	e005      	b.n	80058a4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f80f 	bl	80058bc <I2C_TreatErrorCallback>
  }
}
 800589e:	e002      	b.n	80058a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058a0:	bf00      	nop
 80058a2:	e000      	b.n	80058a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058a4:	bf00      	nop
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	ffff0000 	.word	0xffff0000
 80058b4:	08004f13 	.word	0x08004f13
 80058b8:	08005953 	.word	0x08005953

080058bc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b60      	cmp	r3, #96	@ 0x60
 80058ce:	d10e      	bne.n	80058ee <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fafb 	bl	8004ee2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058ec:	e009      	b.n	8005902 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fae6 	bl	8004ece <HAL_I2C_ErrorCallback>
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d103      	bne.n	8005928 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2200      	movs	r2, #0
 8005926:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d007      	beq.n	8005946 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	619a      	str	r2, [r3, #24]
  }
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	2200      	movs	r2, #0
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597c:	2200      	movs	r2, #0
 800597e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f7ff ff9b 	bl	80058bc <I2C_TreatErrorCallback>
}
 8005986:	bf00      	nop
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	603b      	str	r3, [r7, #0]
 800599a:	4613      	mov	r3, r2
 800599c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800599e:	e03b      	b.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f8d5 	bl	8005b54 <I2C_IsErrorOccurred>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e041      	b.n	8005a38 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d02d      	beq.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059bc:	f7fe f8f0 	bl	8003ba0 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d122      	bne.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4013      	ands	r3, r2
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	bf0c      	ite	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	2300      	movne	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d113      	bne.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f4:	f043 0220 	orr.w	r2, r3, #32
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e00f      	b.n	8005a38 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4013      	ands	r3, r2
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d0b4      	beq.n	80059a0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a4c:	e033      	b.n	8005ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f87e 	bl	8005b54 <I2C_IsErrorOccurred>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e031      	b.n	8005ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d025      	beq.n	8005ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6a:	f7fe f899 	bl	8003ba0 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11a      	bne.n	8005ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d013      	beq.n	8005ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a92:	f043 0220 	orr.w	r2, r3, #32
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e007      	b.n	8005ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d1c4      	bne.n	8005a4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ada:	e02f      	b.n	8005b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f837 	bl	8005b54 <I2C_IsErrorOccurred>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e02d      	b.n	8005b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af0:	f7fe f856 	bl	8003ba0 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d302      	bcc.n	8005b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d11a      	bne.n	8005b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d013      	beq.n	8005b3c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b18:	f043 0220 	orr.w	r2, r3, #32
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e007      	b.n	8005b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d1c8      	bne.n	8005adc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	@ 0x28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d068      	beq.n	8005c52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2210      	movs	r2, #16
 8005b86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b88:	e049      	b.n	8005c1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b90:	d045      	beq.n	8005c1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b92:	f7fe f805 	bl	8003ba0 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d302      	bcc.n	8005ba8 <I2C_IsErrorOccurred+0x54>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d13a      	bne.n	8005c1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bca:	d121      	bne.n	8005c10 <I2C_IsErrorOccurred+0xbc>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bd2:	d01d      	beq.n	8005c10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005bd4:	7cfb      	ldrb	r3, [r7, #19]
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d01a      	beq.n	8005c10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005be8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005bea:	f7fd ffd9 	bl	8003ba0 <HAL_GetTick>
 8005bee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bf0:	e00e      	b.n	8005c10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005bf2:	f7fd ffd5 	bl	8003ba0 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b19      	cmp	r3, #25
 8005bfe:	d907      	bls.n	8005c10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	f043 0320 	orr.w	r3, r3, #32
 8005c06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005c0e:	e006      	b.n	8005c1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d1e9      	bne.n	8005bf2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d003      	beq.n	8005c34 <I2C_IsErrorOccurred+0xe0>
 8005c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0aa      	beq.n	8005b8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d103      	bne.n	8005c44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2220      	movs	r2, #32
 8005c42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	f043 0304 	orr.w	r3, r3, #4
 8005c4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00b      	beq.n	8005c9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	f043 0308 	orr.w	r3, r3, #8
 8005c8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	f043 0302 	orr.w	r3, r3, #2
 8005cae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01c      	beq.n	8005d02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff fe1e 	bl	800590a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6859      	ldr	r1, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <I2C_IsErrorOccurred+0x1bc>)
 8005cda:	400b      	ands	r3, r1
 8005cdc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005d02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3728      	adds	r7, #40	@ 0x28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	fe00e800 	.word	0xfe00e800

08005d14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	817b      	strh	r3, [r7, #10]
 8005d22:	4613      	mov	r3, r2
 8005d24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d26:	897b      	ldrh	r3, [r7, #10]
 8005d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d2c:	7a7b      	ldrb	r3, [r7, #9]
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	0d5b      	lsrs	r3, r3, #21
 8005d4e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005d52:	4b08      	ldr	r3, [pc, #32]	@ (8005d74 <I2C_TransferConfig+0x60>)
 8005d54:	430b      	orrs	r3, r1
 8005d56:	43db      	mvns	r3, r3
 8005d58:	ea02 0103 	and.w	r1, r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	03ff63ff 	.word	0x03ff63ff

08005d78 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005d88:	887b      	ldrh	r3, [r7, #2]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00f      	beq.n	8005db2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005d98:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005da6:	2b28      	cmp	r3, #40	@ 0x28
 8005da8:	d003      	beq.n	8005db2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005db0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005db2:	887b      	ldrh	r3, [r7, #2]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00f      	beq.n	8005ddc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005dc2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dd0:	2b28      	cmp	r3, #40	@ 0x28
 8005dd2:	d003      	beq.n	8005ddc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005dda:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ddc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da03      	bge.n	8005dec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005dea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d103      	bne.n	8005dfa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005df8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005dfa:	887b      	ldrh	r3, [r7, #2]
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d103      	bne.n	8005e08 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f043 0320 	orr.w	r3, r3, #32
 8005e06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005e08:	887b      	ldrh	r3, [r7, #2]
 8005e0a:	2b40      	cmp	r3, #64	@ 0x40
 8005e0c:	d103      	bne.n	8005e16 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	43da      	mvns	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	400a      	ands	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d138      	bne.n	8005ebc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e032      	b.n	8005ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2224      	movs	r2, #36	@ 0x24
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0201 	bic.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e000      	b.n	8005ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d139      	bne.n	8005f54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e033      	b.n	8005f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2224      	movs	r2, #36	@ 0x24
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e000      	b.n	8005f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d141      	bne.n	8005ff6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f72:	4b4b      	ldr	r3, [pc, #300]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f7e:	d131      	bne.n	8005fe4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f80:	4b47      	ldr	r3, [pc, #284]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f86:	4a46      	ldr	r2, [pc, #280]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f90:	4b43      	ldr	r3, [pc, #268]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f98:	4a41      	ldr	r2, [pc, #260]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fa0:	4b40      	ldr	r3, [pc, #256]	@ (80060a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2232      	movs	r2, #50	@ 0x32
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	4a3f      	ldr	r2, [pc, #252]	@ (80060a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	0c9b      	lsrs	r3, r3, #18
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fb6:	e002      	b.n	8005fbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fbe:	4b38      	ldr	r3, [pc, #224]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fca:	d102      	bne.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f2      	bne.n	8005fb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fd2:	4b33      	ldr	r3, [pc, #204]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fde:	d158      	bne.n	8006092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e057      	b.n	8006094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fea:	4a2d      	ldr	r2, [pc, #180]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ff4:	e04d      	b.n	8006092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ffc:	d141      	bne.n	8006082 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ffe:	4b28      	ldr	r3, [pc, #160]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600a:	d131      	bne.n	8006070 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800600c:	4b24      	ldr	r3, [pc, #144]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800600e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006012:	4a23      	ldr	r2, [pc, #140]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006018:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800601c:	4b20      	ldr	r3, [pc, #128]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006024:	4a1e      	ldr	r2, [pc, #120]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800602a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800602c:	4b1d      	ldr	r3, [pc, #116]	@ (80060a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2232      	movs	r2, #50	@ 0x32
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	4a1c      	ldr	r2, [pc, #112]	@ (80060a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006038:	fba2 2303 	umull	r2, r3, r2, r3
 800603c:	0c9b      	lsrs	r3, r3, #18
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006042:	e002      	b.n	800604a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3b01      	subs	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800604a:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006056:	d102      	bne.n	800605e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f2      	bne.n	8006044 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800605e:	4b10      	ldr	r3, [pc, #64]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800606a:	d112      	bne.n	8006092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e011      	b.n	8006094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006070:	4b0b      	ldr	r3, [pc, #44]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006076:	4a0a      	ldr	r2, [pc, #40]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800607c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006080:	e007      	b.n	8006092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006082:	4b07      	ldr	r3, [pc, #28]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800608a:	4a05      	ldr	r2, [pc, #20]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800608c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006090:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	40007000 	.word	0x40007000
 80060a4:	20000004 	.word	0x20000004
 80060a8:	431bde83 	.word	0x431bde83

080060ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80060b0:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	4a04      	ldr	r2, [pc, #16]	@ (80060c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80060b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060ba:	6093      	str	r3, [r2, #8]
}
 80060bc:	bf00      	nop
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40007000 	.word	0x40007000

080060cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e2fe      	b.n	80066dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d075      	beq.n	80061d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ea:	4b97      	ldr	r3, [pc, #604]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060f4:	4b94      	ldr	r3, [pc, #592]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d102      	bne.n	800610a <HAL_RCC_OscConfig+0x3e>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b03      	cmp	r3, #3
 8006108:	d002      	beq.n	8006110 <HAL_RCC_OscConfig+0x44>
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d10b      	bne.n	8006128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006110:	4b8d      	ldr	r3, [pc, #564]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d05b      	beq.n	80061d4 <HAL_RCC_OscConfig+0x108>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d157      	bne.n	80061d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e2d9      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006130:	d106      	bne.n	8006140 <HAL_RCC_OscConfig+0x74>
 8006132:	4b85      	ldr	r3, [pc, #532]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a84      	ldr	r2, [pc, #528]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	e01d      	b.n	800617c <HAL_RCC_OscConfig+0xb0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006148:	d10c      	bne.n	8006164 <HAL_RCC_OscConfig+0x98>
 800614a:	4b7f      	ldr	r3, [pc, #508]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a7e      	ldr	r2, [pc, #504]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	4b7c      	ldr	r3, [pc, #496]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a7b      	ldr	r2, [pc, #492]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800615c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	e00b      	b.n	800617c <HAL_RCC_OscConfig+0xb0>
 8006164:	4b78      	ldr	r3, [pc, #480]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a77      	ldr	r2, [pc, #476]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800616a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	4b75      	ldr	r3, [pc, #468]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a74      	ldr	r2, [pc, #464]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800617a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d013      	beq.n	80061ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fd fd0c 	bl	8003ba0 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800618c:	f7fd fd08 	bl	8003ba0 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b64      	cmp	r3, #100	@ 0x64
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e29e      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800619e:	4b6a      	ldr	r3, [pc, #424]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0xc0>
 80061aa:	e014      	b.n	80061d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fd fcf8 	bl	8003ba0 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b4:	f7fd fcf4 	bl	8003ba0 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b64      	cmp	r3, #100	@ 0x64
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e28a      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061c6:	4b60      	ldr	r3, [pc, #384]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0xe8>
 80061d2:	e000      	b.n	80061d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d075      	beq.n	80062ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e2:	4b59      	ldr	r3, [pc, #356]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061ec:	4b56      	ldr	r3, [pc, #344]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b0c      	cmp	r3, #12
 80061fa:	d102      	bne.n	8006202 <HAL_RCC_OscConfig+0x136>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d002      	beq.n	8006208 <HAL_RCC_OscConfig+0x13c>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b04      	cmp	r3, #4
 8006206:	d11f      	bne.n	8006248 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006208:	4b4f      	ldr	r3, [pc, #316]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_RCC_OscConfig+0x154>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e25d      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006220:	4b49      	ldr	r3, [pc, #292]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	061b      	lsls	r3, r3, #24
 800622e:	4946      	ldr	r1, [pc, #280]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006230:	4313      	orrs	r3, r2
 8006232:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006234:	4b45      	ldr	r3, [pc, #276]	@ (800634c <HAL_RCC_OscConfig+0x280>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4618      	mov	r0, r3
 800623a:	f7fd fc65 	bl	8003b08 <HAL_InitTick>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d043      	beq.n	80062cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e249      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d023      	beq.n	8006298 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006250:	4b3d      	ldr	r3, [pc, #244]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a3c      	ldr	r2, [pc, #240]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800625a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625c:	f7fd fca0 	bl	8003ba0 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006264:	f7fd fc9c 	bl	8003ba0 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e232      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006276:	4b34      	ldr	r3, [pc, #208]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0f0      	beq.n	8006264 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006282:	4b31      	ldr	r3, [pc, #196]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	061b      	lsls	r3, r3, #24
 8006290:	492d      	ldr	r1, [pc, #180]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	604b      	str	r3, [r1, #4]
 8006296:	e01a      	b.n	80062ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006298:	4b2b      	ldr	r3, [pc, #172]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2a      	ldr	r2, [pc, #168]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800629e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fd fc7c 	bl	8003ba0 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ac:	f7fd fc78 	bl	8003ba0 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e20e      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062be:	4b22      	ldr	r3, [pc, #136]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x1e0>
 80062ca:	e000      	b.n	80062ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d041      	beq.n	800635e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01c      	beq.n	800631c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062e2:	4b19      	ldr	r3, [pc, #100]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80062e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062e8:	4a17      	ldr	r2, [pc, #92]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f2:	f7fd fc55 	bl	8003ba0 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062fa:	f7fd fc51 	bl	8003ba0 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e1e7      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800630c:	4b0e      	ldr	r3, [pc, #56]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800630e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0ef      	beq.n	80062fa <HAL_RCC_OscConfig+0x22e>
 800631a:	e020      	b.n	800635e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800631c:	4b0a      	ldr	r3, [pc, #40]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800631e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006322:	4a09      	ldr	r2, [pc, #36]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632c:	f7fd fc38 	bl	8003ba0 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006332:	e00d      	b.n	8006350 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006334:	f7fd fc34 	bl	8003ba0 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d906      	bls.n	8006350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e1ca      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
 8006346:	bf00      	nop
 8006348:	40021000 	.word	0x40021000
 800634c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006350:	4b8c      	ldr	r3, [pc, #560]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1ea      	bne.n	8006334 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 80a6 	beq.w	80064b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800636c:	2300      	movs	r3, #0
 800636e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006370:	4b84      	ldr	r3, [pc, #528]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_RCC_OscConfig+0x2b4>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <HAL_RCC_OscConfig+0x2b6>
 8006380:	2300      	movs	r3, #0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00d      	beq.n	80063a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006386:	4b7f      	ldr	r3, [pc, #508]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638a:	4a7e      	ldr	r2, [pc, #504]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800638c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006390:	6593      	str	r3, [r2, #88]	@ 0x58
 8006392:	4b7c      	ldr	r3, [pc, #496]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800639e:	2301      	movs	r3, #1
 80063a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063a2:	4b79      	ldr	r3, [pc, #484]	@ (8006588 <HAL_RCC_OscConfig+0x4bc>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d118      	bne.n	80063e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063ae:	4b76      	ldr	r3, [pc, #472]	@ (8006588 <HAL_RCC_OscConfig+0x4bc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a75      	ldr	r2, [pc, #468]	@ (8006588 <HAL_RCC_OscConfig+0x4bc>)
 80063b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063ba:	f7fd fbf1 	bl	8003ba0 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063c2:	f7fd fbed 	bl	8003ba0 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e183      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063d4:	4b6c      	ldr	r3, [pc, #432]	@ (8006588 <HAL_RCC_OscConfig+0x4bc>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d108      	bne.n	80063fa <HAL_RCC_OscConfig+0x32e>
 80063e8:	4b66      	ldr	r3, [pc, #408]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ee:	4a65      	ldr	r2, [pc, #404]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063f8:	e024      	b.n	8006444 <HAL_RCC_OscConfig+0x378>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b05      	cmp	r3, #5
 8006400:	d110      	bne.n	8006424 <HAL_RCC_OscConfig+0x358>
 8006402:	4b60      	ldr	r3, [pc, #384]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006408:	4a5e      	ldr	r2, [pc, #376]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800640a:	f043 0304 	orr.w	r3, r3, #4
 800640e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006412:	4b5c      	ldr	r3, [pc, #368]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006418:	4a5a      	ldr	r2, [pc, #360]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006422:	e00f      	b.n	8006444 <HAL_RCC_OscConfig+0x378>
 8006424:	4b57      	ldr	r3, [pc, #348]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642a:	4a56      	ldr	r2, [pc, #344]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800642c:	f023 0301 	bic.w	r3, r3, #1
 8006430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006434:	4b53      	ldr	r3, [pc, #332]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643a:	4a52      	ldr	r2, [pc, #328]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800643c:	f023 0304 	bic.w	r3, r3, #4
 8006440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d016      	beq.n	800647a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644c:	f7fd fba8 	bl	8003ba0 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006452:	e00a      	b.n	800646a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006454:	f7fd fba4 	bl	8003ba0 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006462:	4293      	cmp	r3, r2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e138      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800646a:	4b46      	ldr	r3, [pc, #280]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800646c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ed      	beq.n	8006454 <HAL_RCC_OscConfig+0x388>
 8006478:	e015      	b.n	80064a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647a:	f7fd fb91 	bl	8003ba0 <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006480:	e00a      	b.n	8006498 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006482:	f7fd fb8d 	bl	8003ba0 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006490:	4293      	cmp	r3, r2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e121      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006498:	4b3a      	ldr	r3, [pc, #232]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1ed      	bne.n	8006482 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064a6:	7ffb      	ldrb	r3, [r7, #31]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d105      	bne.n	80064b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ac:	4b35      	ldr	r3, [pc, #212]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b0:	4a34      	ldr	r2, [pc, #208]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d03c      	beq.n	800653e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01c      	beq.n	8006506 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064dc:	f7fd fb60 	bl	8003ba0 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064e4:	f7fd fb5c 	bl	8003ba0 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e0f2      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064f6:	4b23      	ldr	r3, [pc, #140]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0ef      	beq.n	80064e4 <HAL_RCC_OscConfig+0x418>
 8006504:	e01b      	b.n	800653e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006506:	4b1f      	ldr	r3, [pc, #124]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006508:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800650c:	4a1d      	ldr	r2, [pc, #116]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800650e:	f023 0301 	bic.w	r3, r3, #1
 8006512:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006516:	f7fd fb43 	bl	8003ba0 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800651e:	f7fd fb3f 	bl	8003ba0 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e0d5      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006530:	4b14      	ldr	r3, [pc, #80]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1ef      	bne.n	800651e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80c9 	beq.w	80066da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006548:	4b0e      	ldr	r3, [pc, #56]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 030c 	and.w	r3, r3, #12
 8006550:	2b0c      	cmp	r3, #12
 8006552:	f000 8083 	beq.w	800665c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d15e      	bne.n	800661c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655e:	4b09      	ldr	r3, [pc, #36]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a08      	ldr	r2, [pc, #32]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006564:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656a:	f7fd fb19 	bl	8003ba0 <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006570:	e00c      	b.n	800658c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006572:	f7fd fb15 	bl	8003ba0 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d905      	bls.n	800658c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0ab      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
 8006584:	40021000 	.word	0x40021000
 8006588:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800658c:	4b55      	ldr	r3, [pc, #340]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ec      	bne.n	8006572 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006598:	4b52      	ldr	r3, [pc, #328]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	4b52      	ldr	r3, [pc, #328]	@ (80066e8 <HAL_RCC_OscConfig+0x61c>)
 800659e:	4013      	ands	r3, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6a11      	ldr	r1, [r2, #32]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065a8:	3a01      	subs	r2, #1
 80065aa:	0112      	lsls	r2, r2, #4
 80065ac:	4311      	orrs	r1, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80065b2:	0212      	lsls	r2, r2, #8
 80065b4:	4311      	orrs	r1, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065ba:	0852      	lsrs	r2, r2, #1
 80065bc:	3a01      	subs	r2, #1
 80065be:	0552      	lsls	r2, r2, #21
 80065c0:	4311      	orrs	r1, r2
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065c6:	0852      	lsrs	r2, r2, #1
 80065c8:	3a01      	subs	r2, #1
 80065ca:	0652      	lsls	r2, r2, #25
 80065cc:	4311      	orrs	r1, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065d2:	06d2      	lsls	r2, r2, #27
 80065d4:	430a      	orrs	r2, r1
 80065d6:	4943      	ldr	r1, [pc, #268]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065dc:	4b41      	ldr	r3, [pc, #260]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a40      	ldr	r2, [pc, #256]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065e8:	4b3e      	ldr	r3, [pc, #248]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a3d      	ldr	r2, [pc, #244]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fd fad4 	bl	8003ba0 <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065fc:	f7fd fad0 	bl	8003ba0 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e066      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800660e:	4b35      	ldr	r3, [pc, #212]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f0      	beq.n	80065fc <HAL_RCC_OscConfig+0x530>
 800661a:	e05e      	b.n	80066da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661c:	4b31      	ldr	r3, [pc, #196]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a30      	ldr	r2, [pc, #192]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fd faba 	bl	8003ba0 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006630:	f7fd fab6 	bl	8003ba0 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e04c      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006642:	4b28      	ldr	r3, [pc, #160]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800664e:	4b25      	ldr	r3, [pc, #148]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	4924      	ldr	r1, [pc, #144]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006654:	4b25      	ldr	r3, [pc, #148]	@ (80066ec <HAL_RCC_OscConfig+0x620>)
 8006656:	4013      	ands	r3, r2
 8006658:	60cb      	str	r3, [r1, #12]
 800665a:	e03e      	b.n	80066da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e039      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006668:	4b1e      	ldr	r3, [pc, #120]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f003 0203 	and.w	r2, r3, #3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	429a      	cmp	r2, r3
 800667a:	d12c      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	3b01      	subs	r3, #1
 8006688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668a:	429a      	cmp	r2, r3
 800668c:	d123      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d11b      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d113      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d109      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	3b01      	subs	r3, #1
 80066d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d001      	beq.n	80066da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40021000 	.word	0x40021000
 80066e8:	019f800c 	.word	0x019f800c
 80066ec:	feeefffc 	.word	0xfeeefffc

080066f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e11e      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006708:	4b91      	ldr	r3, [pc, #580]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d910      	bls.n	8006738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006716:	4b8e      	ldr	r3, [pc, #568]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f023 020f 	bic.w	r2, r3, #15
 800671e:	498c      	ldr	r1, [pc, #560]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	4313      	orrs	r3, r2
 8006724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006726:	4b8a      	ldr	r3, [pc, #552]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d001      	beq.n	8006738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e106      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d073      	beq.n	800682c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d129      	bne.n	80067a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800674c:	4b81      	ldr	r3, [pc, #516]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0f4      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800675c:	f000 f99e 	bl	8006a9c <RCC_GetSysClockFreqFromPLLSource>
 8006760:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4a7c      	ldr	r2, [pc, #496]	@ (8006958 <HAL_RCC_ClockConfig+0x268>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d93f      	bls.n	80067ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800676a:	4b7a      	ldr	r3, [pc, #488]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d009      	beq.n	800678a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800677e:	2b00      	cmp	r3, #0
 8006780:	d033      	beq.n	80067ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006786:	2b00      	cmp	r3, #0
 8006788:	d12f      	bne.n	80067ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800678a:	4b72      	ldr	r3, [pc, #456]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006792:	4a70      	ldr	r2, [pc, #448]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006798:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800679a:	2380      	movs	r3, #128	@ 0x80
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	e024      	b.n	80067ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d107      	bne.n	80067b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0c6      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067b8:	4b66      	ldr	r3, [pc, #408]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e0be      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80067c8:	f000 f8ce 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 80067cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4a61      	ldr	r2, [pc, #388]	@ (8006958 <HAL_RCC_ClockConfig+0x268>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d909      	bls.n	80067ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067de:	4a5d      	ldr	r2, [pc, #372]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80067e6:	2380      	movs	r3, #128	@ 0x80
 80067e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f023 0203 	bic.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4957      	ldr	r1, [pc, #348]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067fc:	f7fd f9d0 	bl	8003ba0 <HAL_GetTick>
 8006800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	e00a      	b.n	800681a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006804:	f7fd f9cc 	bl	8003ba0 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e095      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681a:	4b4e      	ldr	r3, [pc, #312]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 020c 	and.w	r2, r3, #12
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	429a      	cmp	r2, r3
 800682a:	d1eb      	bne.n	8006804 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d023      	beq.n	8006880 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006844:	4b43      	ldr	r3, [pc, #268]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4a42      	ldr	r2, [pc, #264]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800684a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800684e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800685c:	4b3d      	ldr	r3, [pc, #244]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006864:	4a3b      	ldr	r2, [pc, #236]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800686a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800686c:	4b39      	ldr	r3, [pc, #228]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	4936      	ldr	r1, [pc, #216]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800687a:	4313      	orrs	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
 800687e:	e008      	b.n	8006892 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b80      	cmp	r3, #128	@ 0x80
 8006884:	d105      	bne.n	8006892 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006886:	4b33      	ldr	r3, [pc, #204]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4a32      	ldr	r2, [pc, #200]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800688c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006890:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006892:	4b2f      	ldr	r3, [pc, #188]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d21d      	bcs.n	80068dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f023 020f 	bic.w	r2, r3, #15
 80068a8:	4929      	ldr	r1, [pc, #164]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068b0:	f7fd f976 	bl	8003ba0 <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b6:	e00a      	b.n	80068ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b8:	f7fd f972 	bl	8003ba0 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e03b      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b20      	ldr	r3, [pc, #128]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d1ed      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d008      	beq.n	80068fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	4917      	ldr	r1, [pc, #92]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d009      	beq.n	800691a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006906:	4b13      	ldr	r3, [pc, #76]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	490f      	ldr	r1, [pc, #60]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006916:	4313      	orrs	r3, r2
 8006918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800691a:	f000 f825 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 800691e:	4602      	mov	r2, r0
 8006920:	4b0c      	ldr	r3, [pc, #48]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	091b      	lsrs	r3, r3, #4
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	490c      	ldr	r1, [pc, #48]	@ (800695c <HAL_RCC_ClockConfig+0x26c>)
 800692c:	5ccb      	ldrb	r3, [r1, r3]
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	fa22 f303 	lsr.w	r3, r2, r3
 8006936:	4a0a      	ldr	r2, [pc, #40]	@ (8006960 <HAL_RCC_ClockConfig+0x270>)
 8006938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800693a:	4b0a      	ldr	r3, [pc, #40]	@ (8006964 <HAL_RCC_ClockConfig+0x274>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7fd f8e2 	bl	8003b08 <HAL_InitTick>
 8006944:	4603      	mov	r3, r0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40022000 	.word	0x40022000
 8006954:	40021000 	.word	0x40021000
 8006958:	04c4b400 	.word	0x04c4b400
 800695c:	0800e258 	.word	0x0800e258
 8006960:	20000004 	.word	0x20000004
 8006964:	20000008 	.word	0x20000008

08006968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800696e:	4b2c      	ldr	r3, [pc, #176]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b04      	cmp	r3, #4
 8006978:	d102      	bne.n	8006980 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800697a:	4b2a      	ldr	r3, [pc, #168]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e047      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006980:	4b27      	ldr	r3, [pc, #156]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 030c 	and.w	r3, r3, #12
 8006988:	2b08      	cmp	r3, #8
 800698a:	d102      	bne.n	8006992 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800698c:	4b26      	ldr	r3, [pc, #152]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	e03e      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006992:	4b23      	ldr	r3, [pc, #140]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 030c 	and.w	r3, r3, #12
 800699a:	2b0c      	cmp	r3, #12
 800699c:	d136      	bne.n	8006a0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800699e:	4b20      	ldr	r3, [pc, #128]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	3301      	adds	r3, #1
 80069b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d10c      	bne.n	80069d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	4a16      	ldr	r2, [pc, #88]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069c6:	68d2      	ldr	r2, [r2, #12]
 80069c8:	0a12      	lsrs	r2, r2, #8
 80069ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	617b      	str	r3, [r7, #20]
      break;
 80069d4:	e00c      	b.n	80069f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069d6:	4a13      	ldr	r2, [pc, #76]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	4a10      	ldr	r2, [pc, #64]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069e0:	68d2      	ldr	r2, [r2, #12]
 80069e2:	0a12      	lsrs	r2, r2, #8
 80069e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069e8:	fb02 f303 	mul.w	r3, r2, r3
 80069ec:	617b      	str	r3, [r7, #20]
      break;
 80069ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	0e5b      	lsrs	r3, r3, #25
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	3301      	adds	r3, #1
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	e001      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006a10:	693b      	ldr	r3, [r7, #16]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40021000 	.word	0x40021000
 8006a24:	00f42400 	.word	0x00f42400
 8006a28:	007a1200 	.word	0x007a1200

08006a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a30:	4b03      	ldr	r3, [pc, #12]	@ (8006a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a32:	681b      	ldr	r3, [r3, #0]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000004 	.word	0x20000004

08006a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a48:	f7ff fff0 	bl	8006a2c <HAL_RCC_GetHCLKFreq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	4904      	ldr	r1, [pc, #16]	@ (8006a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a5a:	5ccb      	ldrb	r3, [r1, r3]
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	0800e268 	.word	0x0800e268

08006a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a74:	f7ff ffda 	bl	8006a2c <HAL_RCC_GetHCLKFreq>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	0adb      	lsrs	r3, r3, #11
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	4904      	ldr	r1, [pc, #16]	@ (8006a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a86:	5ccb      	ldrb	r3, [r1, r3]
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40021000 	.word	0x40021000
 8006a98:	0800e268 	.word	0x0800e268

08006a9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006aac:	4b1b      	ldr	r3, [pc, #108]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	091b      	lsrs	r3, r3, #4
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d10c      	bne.n	8006ada <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ac0:	4a17      	ldr	r2, [pc, #92]	@ (8006b20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac8:	4a14      	ldr	r2, [pc, #80]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aca:	68d2      	ldr	r2, [r2, #12]
 8006acc:	0a12      	lsrs	r2, r2, #8
 8006ace:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ad2:	fb02 f303 	mul.w	r3, r2, r3
 8006ad6:	617b      	str	r3, [r7, #20]
    break;
 8006ad8:	e00c      	b.n	8006af4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ada:	4a12      	ldr	r2, [pc, #72]	@ (8006b24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ae4:	68d2      	ldr	r2, [r2, #12]
 8006ae6:	0a12      	lsrs	r2, r2, #8
 8006ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006aec:	fb02 f303 	mul.w	r3, r2, r3
 8006af0:	617b      	str	r3, [r7, #20]
    break;
 8006af2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006af4:	4b09      	ldr	r3, [pc, #36]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	0e5b      	lsrs	r3, r3, #25
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	3301      	adds	r3, #1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006b0e:	687b      	ldr	r3, [r7, #4]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	007a1200 	.word	0x007a1200
 8006b24:	00f42400 	.word	0x00f42400

08006b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b30:	2300      	movs	r3, #0
 8006b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b34:	2300      	movs	r3, #0
 8006b36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8098 	beq.w	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b46:	2300      	movs	r3, #0
 8006b48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b4a:	4b43      	ldr	r3, [pc, #268]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10d      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b56:	4b40      	ldr	r3, [pc, #256]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b62:	4b3d      	ldr	r3, [pc, #244]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	60bb      	str	r3, [r7, #8]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b72:	4b3a      	ldr	r3, [pc, #232]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a39      	ldr	r2, [pc, #228]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b7e:	f7fd f80f 	bl	8003ba0 <HAL_GetTick>
 8006b82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b84:	e009      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b86:	f7fd f80b 	bl	8003ba0 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d902      	bls.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	74fb      	strb	r3, [r7, #19]
        break;
 8006b98:	e005      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b9a:	4b30      	ldr	r3, [pc, #192]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0ef      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ba6:	7cfb      	ldrb	r3, [r7, #19]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d159      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bac:	4b2a      	ldr	r3, [pc, #168]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01e      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d019      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bc8:	4b23      	ldr	r3, [pc, #140]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bd4:	4b20      	ldr	r3, [pc, #128]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bda:	4a1f      	ldr	r2, [pc, #124]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006be4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bea:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bf4:	4a18      	ldr	r2, [pc, #96]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d016      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fc ffcb 	bl	8003ba0 <HAL_GetTick>
 8006c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c0c:	e00b      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7fc ffc7 	bl	8003ba0 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d902      	bls.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	74fb      	strb	r3, [r7, #19]
            break;
 8006c24:	e006      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c26:	4b0c      	ldr	r3, [pc, #48]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0ec      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006c34:	7cfb      	ldrb	r3, [r7, #19]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c3a:	4b07      	ldr	r3, [pc, #28]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c48:	4903      	ldr	r1, [pc, #12]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c50:	e008      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c52:	7cfb      	ldrb	r3, [r7, #19]
 8006c54:	74bb      	strb	r3, [r7, #18]
 8006c56:	e005      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c60:	7cfb      	ldrb	r3, [r7, #19]
 8006c62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c64:	7c7b      	ldrb	r3, [r7, #17]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d105      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c6a:	4ba7      	ldr	r3, [pc, #668]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6e:	4aa6      	ldr	r2, [pc, #664]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c82:	4ba1      	ldr	r3, [pc, #644]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c88:	f023 0203 	bic.w	r2, r3, #3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	499d      	ldr	r1, [pc, #628]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ca4:	4b98      	ldr	r3, [pc, #608]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006caa:	f023 020c 	bic.w	r2, r3, #12
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	4995      	ldr	r1, [pc, #596]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cc6:	4b90      	ldr	r3, [pc, #576]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ccc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	498c      	ldr	r1, [pc, #560]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00a      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ce8:	4b87      	ldr	r3, [pc, #540]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	4984      	ldr	r1, [pc, #528]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	497b      	ldr	r1, [pc, #492]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d2c:	4b76      	ldr	r3, [pc, #472]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	4973      	ldr	r1, [pc, #460]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	496a      	ldr	r1, [pc, #424]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d70:	4b65      	ldr	r3, [pc, #404]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	4962      	ldr	r1, [pc, #392]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d92:	4b5d      	ldr	r3, [pc, #372]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da0:	4959      	ldr	r1, [pc, #356]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006db4:	4b54      	ldr	r3, [pc, #336]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dba:	f023 0203 	bic.w	r2, r3, #3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc2:	4951      	ldr	r1, [pc, #324]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ddc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	4948      	ldr	r1, [pc, #288]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d015      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006df8:	4b43      	ldr	r3, [pc, #268]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e06:	4940      	ldr	r1, [pc, #256]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e16:	d105      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e18:	4b3b      	ldr	r3, [pc, #236]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d015      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e30:	4b35      	ldr	r3, [pc, #212]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e3e:	4932      	ldr	r1, [pc, #200]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e4e:	d105      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e50:	4b2d      	ldr	r3, [pc, #180]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4a2c      	ldr	r2, [pc, #176]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d015      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e68:	4b27      	ldr	r3, [pc, #156]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	4924      	ldr	r1, [pc, #144]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e86:	d105      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e88:	4b1f      	ldr	r3, [pc, #124]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d015      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ea0:	4b19      	ldr	r3, [pc, #100]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eae:	4916      	ldr	r1, [pc, #88]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ec0:	4b11      	ldr	r3, [pc, #68]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4a10      	ldr	r2, [pc, #64]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d019      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ede:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	4908      	ldr	r1, [pc, #32]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ef6:	d109      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ef8:	4b03      	ldr	r3, [pc, #12]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4a02      	ldr	r2, [pc, #8]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f02:	60d3      	str	r3, [r2, #12]
 8006f04:	e002      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d015      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006f18:	4b29      	ldr	r3, [pc, #164]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f26:	4926      	ldr	r1, [pc, #152]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f36:	d105      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f38:	4b21      	ldr	r3, [pc, #132]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	4a20      	ldr	r2, [pc, #128]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d015      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006f50:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f5e:	4918      	ldr	r1, [pc, #96]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f6e:	d105      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f70:	4b13      	ldr	r3, [pc, #76]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	4a12      	ldr	r2, [pc, #72]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d015      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f88:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f96:	490a      	ldr	r1, [pc, #40]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fa6:	d105      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fa8:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	4a04      	ldr	r2, [pc, #16]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006fb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40021000 	.word	0x40021000

08006fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e09d      	b.n	8007112 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d108      	bne.n	8006ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fe6:	d009      	beq.n	8006ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	61da      	str	r2, [r3, #28]
 8006fee:	e005      	b.n	8006ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fb fea8 	bl	8002d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007032:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800703c:	d902      	bls.n	8007044 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	e002      	b.n	800704a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007048:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007052:	d007      	beq.n	8007064 <HAL_SPI_Init+0xa0>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800705c:	d002      	beq.n	8007064 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a6:	ea42 0103 	orr.w	r1, r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	0c1b      	lsrs	r3, r3, #16
 80070c0:	f003 0204 	and.w	r2, r3, #4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	f003 0310 	and.w	r3, r3, #16
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80070e0:	ea42 0103 	orr.w	r1, r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b088      	sub	sp, #32
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	603b      	str	r3, [r7, #0]
 8007126:	4613      	mov	r3, r2
 8007128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_SPI_Transmit+0x22>
 8007138:	2302      	movs	r3, #2
 800713a:	e15f      	b.n	80073fc <HAL_SPI_Transmit+0x2e2>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007144:	f7fc fd2c 	bl	8003ba0 <HAL_GetTick>
 8007148:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800714a:	88fb      	ldrh	r3, [r7, #6]
 800714c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	d002      	beq.n	8007160 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800715a:	2302      	movs	r3, #2
 800715c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800715e:	e148      	b.n	80073f2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_SPI_Transmit+0x52>
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007170:	e13f      	b.n	80073f2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2203      	movs	r2, #3
 8007176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	88fa      	ldrh	r2, [r7, #6]
 800718a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071bc:	d10f      	bne.n	80071de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e8:	2b40      	cmp	r3, #64	@ 0x40
 80071ea:	d007      	beq.n	80071fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007204:	d94f      	bls.n	80072a6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_SPI_Transmit+0xfa>
 800720e:	8afb      	ldrh	r3, [r7, #22]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d142      	bne.n	800729a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007218:	881a      	ldrh	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007224:	1c9a      	adds	r2, r3, #2
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007238:	e02f      	b.n	800729a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b02      	cmp	r3, #2
 8007246:	d112      	bne.n	800726e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724c:	881a      	ldrh	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	1c9a      	adds	r2, r3, #2
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800726c:	e015      	b.n	800729a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800726e:	f7fc fc97 	bl	8003ba0 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d803      	bhi.n	8007286 <HAL_SPI_Transmit+0x16c>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007284:	d102      	bne.n	800728c <HAL_SPI_Transmit+0x172>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d106      	bne.n	800729a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007298:	e0ab      	b.n	80073f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1ca      	bne.n	800723a <HAL_SPI_Transmit+0x120>
 80072a4:	e080      	b.n	80073a8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <HAL_SPI_Transmit+0x19a>
 80072ae:	8afb      	ldrh	r3, [r7, #22]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d174      	bne.n	800739e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d912      	bls.n	80072e4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	881a      	ldrh	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	1c9a      	adds	r2, r3, #2
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b02      	subs	r3, #2
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072e2:	e05c      	b.n	800739e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	330c      	adds	r3, #12
 80072ee:	7812      	ldrb	r2, [r2, #0]
 80072f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800730a:	e048      	b.n	800739e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b02      	cmp	r3, #2
 8007318:	d12b      	bne.n	8007372 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b01      	cmp	r3, #1
 8007322:	d912      	bls.n	800734a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007328:	881a      	ldrh	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007334:	1c9a      	adds	r2, r3, #2
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b02      	subs	r3, #2
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007348:	e029      	b.n	800739e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	330c      	adds	r3, #12
 8007354:	7812      	ldrb	r2, [r2, #0]
 8007356:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007366:	b29b      	uxth	r3, r3
 8007368:	3b01      	subs	r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007370:	e015      	b.n	800739e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007372:	f7fc fc15 	bl	8003ba0 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d803      	bhi.n	800738a <HAL_SPI_Transmit+0x270>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007388:	d102      	bne.n	8007390 <HAL_SPI_Transmit+0x276>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800739c:	e029      	b.n	80073f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1b1      	bne.n	800730c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fc7d 	bl	8007cac <SPI_EndRxTxTransaction>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2220      	movs	r2, #32
 80073bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073c6:	2300      	movs	r3, #0
 80073c8:	613b      	str	r3, [r7, #16]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	613b      	str	r3, [r7, #16]
 80073da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e003      	b.n	80073f2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80073fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08a      	sub	sp, #40	@ 0x28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007412:	2301      	movs	r3, #1
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_SPI_TransmitReceive+0x26>
 8007426:	2302      	movs	r3, #2
 8007428:	e20a      	b.n	8007840 <HAL_SPI_TransmitReceive+0x43c>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007432:	f7fc fbb5 	bl	8003ba0 <HAL_GetTick>
 8007436:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800743e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007446:	887b      	ldrh	r3, [r7, #2]
 8007448:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800744a:	887b      	ldrh	r3, [r7, #2]
 800744c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800744e:	7efb      	ldrb	r3, [r7, #27]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d00e      	beq.n	8007472 <HAL_SPI_TransmitReceive+0x6e>
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800745a:	d106      	bne.n	800746a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <HAL_SPI_TransmitReceive+0x66>
 8007464:	7efb      	ldrb	r3, [r7, #27]
 8007466:	2b04      	cmp	r3, #4
 8007468:	d003      	beq.n	8007472 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800746a:	2302      	movs	r3, #2
 800746c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007470:	e1e0      	b.n	8007834 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_SPI_TransmitReceive+0x80>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <HAL_SPI_TransmitReceive+0x80>
 800747e:	887b      	ldrh	r3, [r7, #2]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d103      	bne.n	800748c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800748a:	e1d3      	b.n	8007834 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b04      	cmp	r3, #4
 8007496:	d003      	beq.n	80074a0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2205      	movs	r2, #5
 800749c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	887a      	ldrh	r2, [r7, #2]
 80074b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	887a      	ldrh	r2, [r7, #2]
 80074b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	887a      	ldrh	r2, [r7, #2]
 80074c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	887a      	ldrh	r2, [r7, #2]
 80074cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074e2:	d802      	bhi.n	80074ea <HAL_SPI_TransmitReceive+0xe6>
 80074e4:	8a3b      	ldrh	r3, [r7, #16]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d908      	bls.n	80074fc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80074f8:	605a      	str	r2, [r3, #4]
 80074fa:	e007      	b.n	800750c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800750a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007516:	2b40      	cmp	r3, #64	@ 0x40
 8007518:	d007      	beq.n	800752a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007532:	f240 8081 	bls.w	8007638 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_SPI_TransmitReceive+0x140>
 800753e:	8a7b      	ldrh	r3, [r7, #18]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d16d      	bne.n	8007620 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	881a      	ldrh	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007554:	1c9a      	adds	r2, r3, #2
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007568:	e05a      	b.n	8007620 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b02      	cmp	r3, #2
 8007576:	d11b      	bne.n	80075b0 <HAL_SPI_TransmitReceive+0x1ac>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d016      	beq.n	80075b0 <HAL_SPI_TransmitReceive+0x1ac>
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	2b01      	cmp	r3, #1
 8007586:	d113      	bne.n	80075b0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758c:	881a      	ldrh	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007598:	1c9a      	adds	r2, r3, #2
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d11c      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x1f4>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d016      	beq.n	80075f8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d4:	b292      	uxth	r2, r2
 80075d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075dc:	1c9a      	adds	r2, r3, #2
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f4:	2301      	movs	r3, #1
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075f8:	f7fc fad2 	bl	8003ba0 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007604:	429a      	cmp	r2, r3
 8007606:	d80b      	bhi.n	8007620 <HAL_SPI_TransmitReceive+0x21c>
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d007      	beq.n	8007620 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800761e:	e109      	b.n	8007834 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d19f      	bne.n	800756a <HAL_SPI_TransmitReceive+0x166>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d199      	bne.n	800756a <HAL_SPI_TransmitReceive+0x166>
 8007636:	e0e3      	b.n	8007800 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <HAL_SPI_TransmitReceive+0x244>
 8007640:	8a7b      	ldrh	r3, [r7, #18]
 8007642:	2b01      	cmp	r3, #1
 8007644:	f040 80cf 	bne.w	80077e6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b01      	cmp	r3, #1
 8007650:	d912      	bls.n	8007678 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007656:	881a      	ldrh	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007662:	1c9a      	adds	r2, r3, #2
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b02      	subs	r3, #2
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007676:	e0b6      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007694:	b29b      	uxth	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800769e:	e0a2      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d134      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x314>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d02f      	beq.n	8007718 <HAL_SPI_TransmitReceive+0x314>
 80076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d12c      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d912      	bls.n	80076ee <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076cc:	881a      	ldrh	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d8:	1c9a      	adds	r2, r3, #2
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b02      	subs	r3, #2
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076ec:	e012      	b.n	8007714 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	330c      	adds	r3, #12
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b01      	cmp	r3, #1
 8007724:	d148      	bne.n	80077b8 <HAL_SPI_TransmitReceive+0x3b4>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d042      	beq.n	80077b8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b01      	cmp	r3, #1
 800773c:	d923      	bls.n	8007786 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	b292      	uxth	r2, r2
 800774a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007750:	1c9a      	adds	r2, r3, #2
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b02      	subs	r3, #2
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b01      	cmp	r3, #1
 8007772:	d81f      	bhi.n	80077b4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007782:	605a      	str	r2, [r3, #4]
 8007784:	e016      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f103 020c 	add.w	r2, r3, #12
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007792:	7812      	ldrb	r2, [r2, #0]
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077b4:	2301      	movs	r3, #1
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077b8:	f7fc f9f2 	bl	8003ba0 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d803      	bhi.n	80077d0 <HAL_SPI_TransmitReceive+0x3cc>
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ce:	d102      	bne.n	80077d6 <HAL_SPI_TransmitReceive+0x3d2>
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d107      	bne.n	80077e6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80077e4:	e026      	b.n	8007834 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f47f af57 	bne.w	80076a0 <HAL_SPI_TransmitReceive+0x29c>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f47f af50 	bne.w	80076a0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fa51 	bl	8007cac <SPI_EndRxTxTransaction>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800782a:	e003      	b.n	8007834 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800783c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007840:	4618      	mov	r0, r3
 8007842:	3728      	adds	r7, #40	@ 0x28
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b088      	sub	sp, #32
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10e      	bne.n	8007888 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007870:	2b00      	cmp	r3, #0
 8007872:	d009      	beq.n	8007888 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d004      	beq.n	8007888 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	4798      	blx	r3
    return;
 8007886:	e0ce      	b.n	8007a26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <HAL_SPI_IRQHandler+0x5e>
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
    return;
 80078a4:	e0bf      	b.n	8007a26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <HAL_SPI_IRQHandler+0x7e>
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80b0 	beq.w	8007a26 <HAL_SPI_IRQHandler+0x1de>
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 80aa 	beq.w	8007a26 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d023      	beq.n	8007924 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d011      	beq.n	800790c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ec:	f043 0204 	orr.w	r2, r3, #4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	617b      	str	r3, [r7, #20]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	e00b      	b.n	8007924 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800790c:	2300      	movs	r3, #0
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	693b      	ldr	r3, [r7, #16]
        return;
 8007922:	e080      	b.n	8007a26 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d014      	beq.n	8007958 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007932:	f043 0201 	orr.w	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00c      	beq.n	800797c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007966:	f043 0208 	orr.w	r2, r3, #8
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800796e:	2300      	movs	r3, #0
 8007970:	60bb      	str	r3, [r7, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	60bb      	str	r3, [r7, #8]
 800797a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007980:	2b00      	cmp	r3, #0
 8007982:	d04f      	beq.n	8007a24 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007992:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d104      	bne.n	80079b0 <HAL_SPI_IRQHandler+0x168>
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d034      	beq.n	8007a1a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0203 	bic.w	r2, r2, #3
 80079be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d011      	beq.n	80079ec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079cc:	4a17      	ldr	r2, [pc, #92]	@ (8007a2c <HAL_SPI_IRQHandler+0x1e4>)
 80079ce:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fc fb22 	bl	800401e <HAL_DMA_Abort_IT>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d016      	beq.n	8007a22 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f8:	4a0c      	ldr	r2, [pc, #48]	@ (8007a2c <HAL_SPI_IRQHandler+0x1e4>)
 80079fa:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fc fb0c 	bl	800401e <HAL_DMA_Abort_IT>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007a18:	e003      	b.n	8007a22 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f808 	bl	8007a30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a20:	e000      	b.n	8007a24 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007a22:	bf00      	nop
    return;
 8007a24:	bf00      	nop
  }
}
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	08007a45 	.word	0x08007a45

08007a30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff ffe5 	bl	8007a30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a80:	f7fc f88e 	bl	8003ba0 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	1a9b      	subs	r3, r3, r2
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a90:	f7fc f886 	bl	8003ba0 <HAL_GetTick>
 8007a94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a96:	4b39      	ldr	r3, [pc, #228]	@ (8007b7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	015b      	lsls	r3, r3, #5
 8007a9c:	0d1b      	lsrs	r3, r3, #20
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	fb02 f303 	mul.w	r3, r2, r3
 8007aa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa6:	e054      	b.n	8007b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aae:	d050      	beq.n	8007b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ab0:	f7fc f876 	bl	8003ba0 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d902      	bls.n	8007ac6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d13d      	bne.n	8007b42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ad4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ade:	d111      	bne.n	8007b04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ae8:	d004      	beq.n	8007af4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007af2:	d107      	bne.n	8007b04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b0c:	d10f      	bne.n	8007b2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e017      	b.n	8007b72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	bf0c      	ite	eq
 8007b62:	2301      	moveq	r3, #1
 8007b64:	2300      	movne	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d19b      	bne.n	8007aa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3720      	adds	r7, #32
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000004 	.word	0x20000004

08007b80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08a      	sub	sp, #40	@ 0x28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b92:	f7fc f805 	bl	8003ba0 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007ba2:	f7fb fffd 	bl	8003ba0 <HAL_GetTick>
 8007ba6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8007ca8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	00da      	lsls	r2, r3, #3
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	0d1b      	lsrs	r3, r3, #20
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc2:	fb02 f303 	mul.w	r3, r2, r3
 8007bc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007bc8:	e060      	b.n	8007c8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007bd0:	d107      	bne.n	8007be2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be8:	d050      	beq.n	8007c8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bea:	f7fb ffd9 	bl	8003ba0 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d902      	bls.n	8007c00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d13d      	bne.n	8007c7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c18:	d111      	bne.n	8007c3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c22:	d004      	beq.n	8007c2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c2c:	d107      	bne.n	8007c3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c46:	d10f      	bne.n	8007c68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e010      	b.n	8007c9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4013      	ands	r3, r2
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d196      	bne.n	8007bca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3728      	adds	r7, #40	@ 0x28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000004 	.word	0x20000004

08007cac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7ff ff5b 	bl	8007b80 <SPI_WaitFifoStateUntilTimeout>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d007      	beq.n	8007ce0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cd4:	f043 0220 	orr.w	r2, r3, #32
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e027      	b.n	8007d30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2180      	movs	r1, #128	@ 0x80
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff fec0 	bl	8007a70 <SPI_WaitFlagStateUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cfa:	f043 0220 	orr.w	r2, r3, #32
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e014      	b.n	8007d30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff ff34 	bl	8007b80 <SPI_WaitFifoStateUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e000      	b.n	8007d30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e049      	b.n	8007dde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fb fac6 	bl	80032f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f000 facc 	bl	8008314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d001      	beq.n	8007e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e054      	b.n	8007eaa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0201 	orr.w	r2, r2, #1
 8007e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a26      	ldr	r2, [pc, #152]	@ (8007eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d022      	beq.n	8007e68 <HAL_TIM_Base_Start_IT+0x80>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2a:	d01d      	beq.n	8007e68 <HAL_TIM_Base_Start_IT+0x80>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a22      	ldr	r2, [pc, #136]	@ (8007ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d018      	beq.n	8007e68 <HAL_TIM_Base_Start_IT+0x80>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a21      	ldr	r2, [pc, #132]	@ (8007ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d013      	beq.n	8007e68 <HAL_TIM_Base_Start_IT+0x80>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1f      	ldr	r2, [pc, #124]	@ (8007ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00e      	beq.n	8007e68 <HAL_TIM_Base_Start_IT+0x80>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ec8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d009      	beq.n	8007e68 <HAL_TIM_Base_Start_IT+0x80>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ecc <HAL_TIM_Base_Start_IT+0xe4>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d004      	beq.n	8007e68 <HAL_TIM_Base_Start_IT+0x80>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d115      	bne.n	8007e94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	4b19      	ldr	r3, [pc, #100]	@ (8007ed4 <HAL_TIM_Base_Start_IT+0xec>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b06      	cmp	r3, #6
 8007e78:	d015      	beq.n	8007ea6 <HAL_TIM_Base_Start_IT+0xbe>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e80:	d011      	beq.n	8007ea6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0201 	orr.w	r2, r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e92:	e008      	b.n	8007ea6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e000      	b.n	8007ea8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40012c00 	.word	0x40012c00
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800
 8007ec4:	40000c00 	.word	0x40000c00
 8007ec8:	40013400 	.word	0x40013400
 8007ecc:	40014000 	.word	0x40014000
 8007ed0:	40015000 	.word	0x40015000
 8007ed4:	00010007 	.word	0x00010007

08007ed8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e097      	b.n	800801c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7fb fa37 	bl	8003374 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007f1c:	f023 0307 	bic.w	r3, r3, #7
 8007f20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f000 f9f1 	bl	8008314 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f5a:	f023 0303 	bic.w	r3, r3, #3
 8007f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007f78:	f023 030c 	bic.w	r3, r3, #12
 8007f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	4313      	orrs	r3, r2
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	011a      	lsls	r2, r3, #4
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	031b      	lsls	r3, r3, #12
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007fb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007fbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d020      	beq.n	8008088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f06f 0202 	mvn.w	r2, #2
 8008058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f931 	bl	80082d6 <HAL_TIM_IC_CaptureCallback>
 8008074:	e005      	b.n	8008082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f923 	bl	80082c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f934 	bl	80082ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f003 0304 	and.w	r3, r3, #4
 800808e:	2b00      	cmp	r3, #0
 8008090:	d020      	beq.n	80080d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01b      	beq.n	80080d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f06f 0204 	mvn.w	r2, #4
 80080a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2202      	movs	r2, #2
 80080aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f90b 	bl	80082d6 <HAL_TIM_IC_CaptureCallback>
 80080c0:	e005      	b.n	80080ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f8fd 	bl	80082c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f90e 	bl	80082ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f003 0308 	and.w	r3, r3, #8
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d020      	beq.n	8008120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f003 0308 	and.w	r3, r3, #8
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01b      	beq.n	8008120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0208 	mvn.w	r2, #8
 80080f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2204      	movs	r2, #4
 80080f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f8e5 	bl	80082d6 <HAL_TIM_IC_CaptureCallback>
 800810c:	e005      	b.n	800811a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8d7 	bl	80082c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f8e8 	bl	80082ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f003 0310 	and.w	r3, r3, #16
 8008126:	2b00      	cmp	r3, #0
 8008128:	d020      	beq.n	800816c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01b      	beq.n	800816c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0210 	mvn.w	r2, #16
 800813c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2208      	movs	r2, #8
 8008142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f8bf 	bl	80082d6 <HAL_TIM_IC_CaptureCallback>
 8008158:	e005      	b.n	8008166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f8b1 	bl	80082c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f8c2 	bl	80082ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00c      	beq.n	8008190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f06f 0201 	mvn.w	r2, #1
 8008188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fa fca6 	bl	8002adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008196:	2b00      	cmp	r3, #0
 8008198:	d104      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00c      	beq.n	80081be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80081b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f9ff 	bl	80085bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00c      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f9f7 	bl	80085d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00c      	beq.n	8008206 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f87c 	bl	80082fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00c      	beq.n	800822a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f06f 0220 	mvn.w	r2, #32
 8008222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f9bf 	bl	80085a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00c      	beq.n	800824e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d007      	beq.n	800824e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f9cb 	bl	80085e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00c      	beq.n	8008272 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800826a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f9c3 	bl	80085f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00c      	beq.n	8008296 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800828e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f9bb 	bl	800860c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80082b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f9b3 	bl	8008620 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
	...

08008314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a4c      	ldr	r2, [pc, #304]	@ (8008458 <TIM_Base_SetConfig+0x144>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d017      	beq.n	800835c <TIM_Base_SetConfig+0x48>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008332:	d013      	beq.n	800835c <TIM_Base_SetConfig+0x48>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a49      	ldr	r2, [pc, #292]	@ (800845c <TIM_Base_SetConfig+0x148>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d00f      	beq.n	800835c <TIM_Base_SetConfig+0x48>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a48      	ldr	r2, [pc, #288]	@ (8008460 <TIM_Base_SetConfig+0x14c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00b      	beq.n	800835c <TIM_Base_SetConfig+0x48>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a47      	ldr	r2, [pc, #284]	@ (8008464 <TIM_Base_SetConfig+0x150>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d007      	beq.n	800835c <TIM_Base_SetConfig+0x48>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a46      	ldr	r2, [pc, #280]	@ (8008468 <TIM_Base_SetConfig+0x154>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d003      	beq.n	800835c <TIM_Base_SetConfig+0x48>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a45      	ldr	r2, [pc, #276]	@ (800846c <TIM_Base_SetConfig+0x158>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d108      	bne.n	800836e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4313      	orrs	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a39      	ldr	r2, [pc, #228]	@ (8008458 <TIM_Base_SetConfig+0x144>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d023      	beq.n	80083be <TIM_Base_SetConfig+0xaa>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800837c:	d01f      	beq.n	80083be <TIM_Base_SetConfig+0xaa>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a36      	ldr	r2, [pc, #216]	@ (800845c <TIM_Base_SetConfig+0x148>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d01b      	beq.n	80083be <TIM_Base_SetConfig+0xaa>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a35      	ldr	r2, [pc, #212]	@ (8008460 <TIM_Base_SetConfig+0x14c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d017      	beq.n	80083be <TIM_Base_SetConfig+0xaa>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a34      	ldr	r2, [pc, #208]	@ (8008464 <TIM_Base_SetConfig+0x150>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <TIM_Base_SetConfig+0xaa>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a33      	ldr	r2, [pc, #204]	@ (8008468 <TIM_Base_SetConfig+0x154>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00f      	beq.n	80083be <TIM_Base_SetConfig+0xaa>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a33      	ldr	r2, [pc, #204]	@ (8008470 <TIM_Base_SetConfig+0x15c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d00b      	beq.n	80083be <TIM_Base_SetConfig+0xaa>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a32      	ldr	r2, [pc, #200]	@ (8008474 <TIM_Base_SetConfig+0x160>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d007      	beq.n	80083be <TIM_Base_SetConfig+0xaa>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a31      	ldr	r2, [pc, #196]	@ (8008478 <TIM_Base_SetConfig+0x164>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d003      	beq.n	80083be <TIM_Base_SetConfig+0xaa>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a2c      	ldr	r2, [pc, #176]	@ (800846c <TIM_Base_SetConfig+0x158>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d108      	bne.n	80083d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	4313      	orrs	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a18      	ldr	r2, [pc, #96]	@ (8008458 <TIM_Base_SetConfig+0x144>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d013      	beq.n	8008424 <TIM_Base_SetConfig+0x110>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008468 <TIM_Base_SetConfig+0x154>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00f      	beq.n	8008424 <TIM_Base_SetConfig+0x110>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a1a      	ldr	r2, [pc, #104]	@ (8008470 <TIM_Base_SetConfig+0x15c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00b      	beq.n	8008424 <TIM_Base_SetConfig+0x110>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a19      	ldr	r2, [pc, #100]	@ (8008474 <TIM_Base_SetConfig+0x160>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_Base_SetConfig+0x110>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a18      	ldr	r2, [pc, #96]	@ (8008478 <TIM_Base_SetConfig+0x164>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_Base_SetConfig+0x110>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a13      	ldr	r2, [pc, #76]	@ (800846c <TIM_Base_SetConfig+0x158>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d103      	bne.n	800842c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b01      	cmp	r3, #1
 800843c:	d105      	bne.n	800844a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	f023 0201 	bic.w	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	611a      	str	r2, [r3, #16]
  }
}
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	40012c00 	.word	0x40012c00
 800845c:	40000400 	.word	0x40000400
 8008460:	40000800 	.word	0x40000800
 8008464:	40000c00 	.word	0x40000c00
 8008468:	40013400 	.word	0x40013400
 800846c:	40015000 	.word	0x40015000
 8008470:	40014000 	.word	0x40014000
 8008474:	40014400 	.word	0x40014400
 8008478:	40014800 	.word	0x40014800

0800847c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800848c:	2b01      	cmp	r3, #1
 800848e:	d101      	bne.n	8008494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008490:	2302      	movs	r3, #2
 8008492:	e074      	b.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a34      	ldr	r2, [pc, #208]	@ (800858c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d009      	beq.n	80084d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a33      	ldr	r2, [pc, #204]	@ (8008590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d004      	beq.n	80084d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a31      	ldr	r2, [pc, #196]	@ (8008594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d108      	bne.n	80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80084d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80084ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a21      	ldr	r2, [pc, #132]	@ (800858c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d022      	beq.n	8008552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008514:	d01d      	beq.n	8008552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1f      	ldr	r2, [pc, #124]	@ (8008598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d018      	beq.n	8008552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a1d      	ldr	r2, [pc, #116]	@ (800859c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d013      	beq.n	8008552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a1c      	ldr	r2, [pc, #112]	@ (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00e      	beq.n	8008552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a15      	ldr	r2, [pc, #84]	@ (8008590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d009      	beq.n	8008552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a18      	ldr	r2, [pc, #96]	@ (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d004      	beq.n	8008552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a11      	ldr	r2, [pc, #68]	@ (8008594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d10c      	bne.n	800856c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	4313      	orrs	r3, r2
 8008562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	40012c00 	.word	0x40012c00
 8008590:	40013400 	.word	0x40013400
 8008594:	40015000 	.word	0x40015000
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40000c00 	.word	0x40000c00
 80085a4:	40014000 	.word	0x40014000

080085a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e042      	b.n	80086cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800864c:	2b00      	cmp	r3, #0
 800864e:	d106      	bne.n	800865e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7fb f9b3 	bl	80039c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2224      	movs	r2, #36	@ 0x24
 8008662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0201 	bic.w	r2, r2, #1
 8008674:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fe68 	bl	8009354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fb69 	bl	8008d5c <UART_SetConfig>
 800868a:	4603      	mov	r3, r0
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e01b      	b.n	80086cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0201 	orr.w	r2, r2, #1
 80086c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fee7 	bl	8009498 <UART_CheckIdleState>
 80086ca:	4603      	mov	r3, r0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b0ba      	sub	sp, #232	@ 0xe8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80086fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008702:	4013      	ands	r3, r2
 8008704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800870c:	2b00      	cmp	r3, #0
 800870e:	d11b      	bne.n	8008748 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008714:	f003 0320 	and.w	r3, r3, #32
 8008718:	2b00      	cmp	r3, #0
 800871a:	d015      	beq.n	8008748 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800871c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d105      	bne.n	8008734 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800872c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d009      	beq.n	8008748 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 82e3 	beq.w	8008d04 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
      }
      return;
 8008746:	e2dd      	b.n	8008d04 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 8123 	beq.w	8008998 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008752:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008756:	4b8d      	ldr	r3, [pc, #564]	@ (800898c <HAL_UART_IRQHandler+0x2b8>)
 8008758:	4013      	ands	r3, r2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d106      	bne.n	800876c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800875e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008762:	4b8b      	ldr	r3, [pc, #556]	@ (8008990 <HAL_UART_IRQHandler+0x2bc>)
 8008764:	4013      	ands	r3, r2
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 8116 	beq.w	8008998 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800876c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	d011      	beq.n	800879c <HAL_UART_IRQHandler+0xc8>
 8008778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800877c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2201      	movs	r2, #1
 800878a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008792:	f043 0201 	orr.w	r2, r3, #1
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d011      	beq.n	80087cc <HAL_UART_IRQHandler+0xf8>
 80087a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00b      	beq.n	80087cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2202      	movs	r2, #2
 80087ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c2:	f043 0204 	orr.w	r2, r3, #4
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d011      	beq.n	80087fc <HAL_UART_IRQHandler+0x128>
 80087d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00b      	beq.n	80087fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2204      	movs	r2, #4
 80087ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f2:	f043 0202 	orr.w	r2, r3, #2
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b00      	cmp	r3, #0
 8008806:	d017      	beq.n	8008838 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008814:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008818:	4b5c      	ldr	r3, [pc, #368]	@ (800898c <HAL_UART_IRQHandler+0x2b8>)
 800881a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2208      	movs	r2, #8
 8008826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800882e:	f043 0208 	orr.w	r2, r3, #8
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800883c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008840:	2b00      	cmp	r3, #0
 8008842:	d012      	beq.n	800886a <HAL_UART_IRQHandler+0x196>
 8008844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008848:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00c      	beq.n	800886a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008860:	f043 0220 	orr.w	r2, r3, #32
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 8249 	beq.w	8008d08 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800887a:	f003 0320 	and.w	r3, r3, #32
 800887e:	2b00      	cmp	r3, #0
 8008880:	d013      	beq.n	80088aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800888e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088be:	2b40      	cmp	r3, #64	@ 0x40
 80088c0:	d005      	beq.n	80088ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d054      	beq.n	8008978 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fef9 	bl	80096c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088de:	2b40      	cmp	r3, #64	@ 0x40
 80088e0:	d146      	bne.n	8008970 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3308      	adds	r3, #8
 80088e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088f0:	e853 3f00 	ldrex	r3, [r3]
 80088f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3308      	adds	r3, #8
 800890a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800890e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800891a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1d9      	bne.n	80088e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008934:	2b00      	cmp	r3, #0
 8008936:	d017      	beq.n	8008968 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800893e:	4a15      	ldr	r2, [pc, #84]	@ (8008994 <HAL_UART_IRQHandler+0x2c0>)
 8008940:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008948:	4618      	mov	r0, r3
 800894a:	f7fb fb68 	bl	800401e <HAL_DMA_Abort_IT>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d019      	beq.n	8008988 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008962:	4610      	mov	r0, r2
 8008964:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008966:	e00f      	b.n	8008988 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f9e1 	bl	8008d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800896e:	e00b      	b.n	8008988 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f9dd 	bl	8008d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008976:	e007      	b.n	8008988 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f9d9 	bl	8008d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008986:	e1bf      	b.n	8008d08 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008988:	bf00      	nop
    return;
 800898a:	e1bd      	b.n	8008d08 <HAL_UART_IRQHandler+0x634>
 800898c:	10000001 	.word	0x10000001
 8008990:	04000120 	.word	0x04000120
 8008994:	08009793 	.word	0x08009793

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800899c:	2b01      	cmp	r3, #1
 800899e:	f040 8153 	bne.w	8008c48 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089a6:	f003 0310 	and.w	r3, r3, #16
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 814c 	beq.w	8008c48 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 8145 	beq.w	8008c48 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2210      	movs	r2, #16
 80089c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d0:	2b40      	cmp	r3, #64	@ 0x40
 80089d2:	f040 80bb 	bne.w	8008b4c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 818f 	beq.w	8008d0c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089f8:	429a      	cmp	r2, r3
 80089fa:	f080 8187 	bcs.w	8008d0c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f040 8087 	bne.w	8008b2a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1da      	bne.n	8008a1c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a78:	f023 0301 	bic.w	r3, r3, #1
 8008a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3308      	adds	r3, #8
 8008a86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e1      	bne.n	8008a66 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ac6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008acc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e3      	bne.n	8008aa2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008af8:	f023 0310 	bic.w	r3, r3, #16
 8008afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e4      	bne.n	8008ae8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fb fa21 	bl	8003f6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f8fd 	bl	8008d44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b4a:	e0df      	b.n	8008d0c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80d1 	beq.w	8008d10 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 80cc 	beq.w	8008d10 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b9c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e4      	bne.n	8008b78 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bc4:	f023 0301 	bic.w	r3, r3, #1
 8008bc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e1      	bne.n	8008bae <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0310 	bic.w	r3, r3, #16
 8008c12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c20:	61fb      	str	r3, [r7, #28]
 8008c22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	69b9      	ldr	r1, [r7, #24]
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e4      	bne.n	8008bfe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f87f 	bl	8008d44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c46:	e063      	b.n	8008d10 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00e      	beq.n	8008c72 <HAL_UART_IRQHandler+0x59e>
 8008c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d008      	beq.n	8008c72 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008c68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fdd2 	bl	8009814 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c70:	e051      	b.n	8008d16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d014      	beq.n	8008ca8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d008      	beq.n	8008ca8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d03a      	beq.n	8008d14 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
    }
    return;
 8008ca6:	e035      	b.n	8008d14 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d009      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x5f4>
 8008cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fd7c 	bl	80097be <UART_EndTransmit_IT>
    return;
 8008cc6:	e026      	b.n	8008d16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ccc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d009      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x614>
 8008cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fdab 	bl	800983c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ce6:	e016      	b.n	8008d16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d010      	beq.n	8008d16 <HAL_UART_IRQHandler+0x642>
 8008cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	da0c      	bge.n	8008d16 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fd93 	bl	8009828 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d02:	e008      	b.n	8008d16 <HAL_UART_IRQHandler+0x642>
      return;
 8008d04:	bf00      	nop
 8008d06:	e006      	b.n	8008d16 <HAL_UART_IRQHandler+0x642>
    return;
 8008d08:	bf00      	nop
 8008d0a:	e004      	b.n	8008d16 <HAL_UART_IRQHandler+0x642>
      return;
 8008d0c:	bf00      	nop
 8008d0e:	e002      	b.n	8008d16 <HAL_UART_IRQHandler+0x642>
      return;
 8008d10:	bf00      	nop
 8008d12:	e000      	b.n	8008d16 <HAL_UART_IRQHandler+0x642>
    return;
 8008d14:	bf00      	nop
  }
}
 8008d16:	37e8      	adds	r7, #232	@ 0xe8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d60:	b08c      	sub	sp, #48	@ 0x30
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	431a      	orrs	r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	4baa      	ldr	r3, [pc, #680]	@ (8009034 <UART_SetConfig+0x2d8>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	6812      	ldr	r2, [r2, #0]
 8008d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d94:	430b      	orrs	r3, r1
 8008d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a9f      	ldr	r2, [pc, #636]	@ (8009038 <UART_SetConfig+0x2dc>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d004      	beq.n	8008dc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008dd2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	6812      	ldr	r2, [r2, #0]
 8008dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de6:	f023 010f 	bic.w	r1, r3, #15
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a90      	ldr	r2, [pc, #576]	@ (800903c <UART_SetConfig+0x2e0>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d125      	bne.n	8008e4c <UART_SetConfig+0xf0>
 8008e00:	4b8f      	ldr	r3, [pc, #572]	@ (8009040 <UART_SetConfig+0x2e4>)
 8008e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d81a      	bhi.n	8008e44 <UART_SetConfig+0xe8>
 8008e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e14 <UART_SetConfig+0xb8>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008e25 	.word	0x08008e25
 8008e18:	08008e35 	.word	0x08008e35
 8008e1c:	08008e2d 	.word	0x08008e2d
 8008e20:	08008e3d 	.word	0x08008e3d
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e2a:	e116      	b.n	800905a <UART_SetConfig+0x2fe>
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e32:	e112      	b.n	800905a <UART_SetConfig+0x2fe>
 8008e34:	2304      	movs	r3, #4
 8008e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e3a:	e10e      	b.n	800905a <UART_SetConfig+0x2fe>
 8008e3c:	2308      	movs	r3, #8
 8008e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e42:	e10a      	b.n	800905a <UART_SetConfig+0x2fe>
 8008e44:	2310      	movs	r3, #16
 8008e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e4a:	e106      	b.n	800905a <UART_SetConfig+0x2fe>
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a7c      	ldr	r2, [pc, #496]	@ (8009044 <UART_SetConfig+0x2e8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d138      	bne.n	8008ec8 <UART_SetConfig+0x16c>
 8008e56:	4b7a      	ldr	r3, [pc, #488]	@ (8009040 <UART_SetConfig+0x2e4>)
 8008e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e5c:	f003 030c 	and.w	r3, r3, #12
 8008e60:	2b0c      	cmp	r3, #12
 8008e62:	d82d      	bhi.n	8008ec0 <UART_SetConfig+0x164>
 8008e64:	a201      	add	r2, pc, #4	@ (adr r2, 8008e6c <UART_SetConfig+0x110>)
 8008e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6a:	bf00      	nop
 8008e6c:	08008ea1 	.word	0x08008ea1
 8008e70:	08008ec1 	.word	0x08008ec1
 8008e74:	08008ec1 	.word	0x08008ec1
 8008e78:	08008ec1 	.word	0x08008ec1
 8008e7c:	08008eb1 	.word	0x08008eb1
 8008e80:	08008ec1 	.word	0x08008ec1
 8008e84:	08008ec1 	.word	0x08008ec1
 8008e88:	08008ec1 	.word	0x08008ec1
 8008e8c:	08008ea9 	.word	0x08008ea9
 8008e90:	08008ec1 	.word	0x08008ec1
 8008e94:	08008ec1 	.word	0x08008ec1
 8008e98:	08008ec1 	.word	0x08008ec1
 8008e9c:	08008eb9 	.word	0x08008eb9
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea6:	e0d8      	b.n	800905a <UART_SetConfig+0x2fe>
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eae:	e0d4      	b.n	800905a <UART_SetConfig+0x2fe>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb6:	e0d0      	b.n	800905a <UART_SetConfig+0x2fe>
 8008eb8:	2308      	movs	r3, #8
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ebe:	e0cc      	b.n	800905a <UART_SetConfig+0x2fe>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ec6:	e0c8      	b.n	800905a <UART_SetConfig+0x2fe>
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8009048 <UART_SetConfig+0x2ec>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d125      	bne.n	8008f1e <UART_SetConfig+0x1c2>
 8008ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8009040 <UART_SetConfig+0x2e4>)
 8008ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008edc:	2b30      	cmp	r3, #48	@ 0x30
 8008ede:	d016      	beq.n	8008f0e <UART_SetConfig+0x1b2>
 8008ee0:	2b30      	cmp	r3, #48	@ 0x30
 8008ee2:	d818      	bhi.n	8008f16 <UART_SetConfig+0x1ba>
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	d00a      	beq.n	8008efe <UART_SetConfig+0x1a2>
 8008ee8:	2b20      	cmp	r3, #32
 8008eea:	d814      	bhi.n	8008f16 <UART_SetConfig+0x1ba>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <UART_SetConfig+0x19a>
 8008ef0:	2b10      	cmp	r3, #16
 8008ef2:	d008      	beq.n	8008f06 <UART_SetConfig+0x1aa>
 8008ef4:	e00f      	b.n	8008f16 <UART_SetConfig+0x1ba>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008efc:	e0ad      	b.n	800905a <UART_SetConfig+0x2fe>
 8008efe:	2302      	movs	r3, #2
 8008f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f04:	e0a9      	b.n	800905a <UART_SetConfig+0x2fe>
 8008f06:	2304      	movs	r3, #4
 8008f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f0c:	e0a5      	b.n	800905a <UART_SetConfig+0x2fe>
 8008f0e:	2308      	movs	r3, #8
 8008f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f14:	e0a1      	b.n	800905a <UART_SetConfig+0x2fe>
 8008f16:	2310      	movs	r3, #16
 8008f18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f1c:	e09d      	b.n	800905a <UART_SetConfig+0x2fe>
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a4a      	ldr	r2, [pc, #296]	@ (800904c <UART_SetConfig+0x2f0>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d125      	bne.n	8008f74 <UART_SetConfig+0x218>
 8008f28:	4b45      	ldr	r3, [pc, #276]	@ (8009040 <UART_SetConfig+0x2e4>)
 8008f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f34:	d016      	beq.n	8008f64 <UART_SetConfig+0x208>
 8008f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f38:	d818      	bhi.n	8008f6c <UART_SetConfig+0x210>
 8008f3a:	2b80      	cmp	r3, #128	@ 0x80
 8008f3c:	d00a      	beq.n	8008f54 <UART_SetConfig+0x1f8>
 8008f3e:	2b80      	cmp	r3, #128	@ 0x80
 8008f40:	d814      	bhi.n	8008f6c <UART_SetConfig+0x210>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <UART_SetConfig+0x1f0>
 8008f46:	2b40      	cmp	r3, #64	@ 0x40
 8008f48:	d008      	beq.n	8008f5c <UART_SetConfig+0x200>
 8008f4a:	e00f      	b.n	8008f6c <UART_SetConfig+0x210>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f52:	e082      	b.n	800905a <UART_SetConfig+0x2fe>
 8008f54:	2302      	movs	r3, #2
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5a:	e07e      	b.n	800905a <UART_SetConfig+0x2fe>
 8008f5c:	2304      	movs	r3, #4
 8008f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f62:	e07a      	b.n	800905a <UART_SetConfig+0x2fe>
 8008f64:	2308      	movs	r3, #8
 8008f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6a:	e076      	b.n	800905a <UART_SetConfig+0x2fe>
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f72:	e072      	b.n	800905a <UART_SetConfig+0x2fe>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a35      	ldr	r2, [pc, #212]	@ (8009050 <UART_SetConfig+0x2f4>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d12a      	bne.n	8008fd4 <UART_SetConfig+0x278>
 8008f7e:	4b30      	ldr	r3, [pc, #192]	@ (8009040 <UART_SetConfig+0x2e4>)
 8008f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f8c:	d01a      	beq.n	8008fc4 <UART_SetConfig+0x268>
 8008f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f92:	d81b      	bhi.n	8008fcc <UART_SetConfig+0x270>
 8008f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f98:	d00c      	beq.n	8008fb4 <UART_SetConfig+0x258>
 8008f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f9e:	d815      	bhi.n	8008fcc <UART_SetConfig+0x270>
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <UART_SetConfig+0x250>
 8008fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa8:	d008      	beq.n	8008fbc <UART_SetConfig+0x260>
 8008faa:	e00f      	b.n	8008fcc <UART_SetConfig+0x270>
 8008fac:	2300      	movs	r3, #0
 8008fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb2:	e052      	b.n	800905a <UART_SetConfig+0x2fe>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fba:	e04e      	b.n	800905a <UART_SetConfig+0x2fe>
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc2:	e04a      	b.n	800905a <UART_SetConfig+0x2fe>
 8008fc4:	2308      	movs	r3, #8
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fca:	e046      	b.n	800905a <UART_SetConfig+0x2fe>
 8008fcc:	2310      	movs	r3, #16
 8008fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fd2:	e042      	b.n	800905a <UART_SetConfig+0x2fe>
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a17      	ldr	r2, [pc, #92]	@ (8009038 <UART_SetConfig+0x2dc>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d13a      	bne.n	8009054 <UART_SetConfig+0x2f8>
 8008fde:	4b18      	ldr	r3, [pc, #96]	@ (8009040 <UART_SetConfig+0x2e4>)
 8008fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fe4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008fe8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fec:	d01a      	beq.n	8009024 <UART_SetConfig+0x2c8>
 8008fee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ff2:	d81b      	bhi.n	800902c <UART_SetConfig+0x2d0>
 8008ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ff8:	d00c      	beq.n	8009014 <UART_SetConfig+0x2b8>
 8008ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ffe:	d815      	bhi.n	800902c <UART_SetConfig+0x2d0>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <UART_SetConfig+0x2b0>
 8009004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009008:	d008      	beq.n	800901c <UART_SetConfig+0x2c0>
 800900a:	e00f      	b.n	800902c <UART_SetConfig+0x2d0>
 800900c:	2300      	movs	r3, #0
 800900e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009012:	e022      	b.n	800905a <UART_SetConfig+0x2fe>
 8009014:	2302      	movs	r3, #2
 8009016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800901a:	e01e      	b.n	800905a <UART_SetConfig+0x2fe>
 800901c:	2304      	movs	r3, #4
 800901e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009022:	e01a      	b.n	800905a <UART_SetConfig+0x2fe>
 8009024:	2308      	movs	r3, #8
 8009026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800902a:	e016      	b.n	800905a <UART_SetConfig+0x2fe>
 800902c:	2310      	movs	r3, #16
 800902e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009032:	e012      	b.n	800905a <UART_SetConfig+0x2fe>
 8009034:	cfff69f3 	.word	0xcfff69f3
 8009038:	40008000 	.word	0x40008000
 800903c:	40013800 	.word	0x40013800
 8009040:	40021000 	.word	0x40021000
 8009044:	40004400 	.word	0x40004400
 8009048:	40004800 	.word	0x40004800
 800904c:	40004c00 	.word	0x40004c00
 8009050:	40005000 	.word	0x40005000
 8009054:	2310      	movs	r3, #16
 8009056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4aae      	ldr	r2, [pc, #696]	@ (8009318 <UART_SetConfig+0x5bc>)
 8009060:	4293      	cmp	r3, r2
 8009062:	f040 8097 	bne.w	8009194 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009066:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800906a:	2b08      	cmp	r3, #8
 800906c:	d823      	bhi.n	80090b6 <UART_SetConfig+0x35a>
 800906e:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <UART_SetConfig+0x318>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	08009099 	.word	0x08009099
 8009078:	080090b7 	.word	0x080090b7
 800907c:	080090a1 	.word	0x080090a1
 8009080:	080090b7 	.word	0x080090b7
 8009084:	080090a7 	.word	0x080090a7
 8009088:	080090b7 	.word	0x080090b7
 800908c:	080090b7 	.word	0x080090b7
 8009090:	080090b7 	.word	0x080090b7
 8009094:	080090af 	.word	0x080090af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009098:	f7fd fcd4 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 800909c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800909e:	e010      	b.n	80090c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090a0:	4b9e      	ldr	r3, [pc, #632]	@ (800931c <UART_SetConfig+0x5c0>)
 80090a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090a4:	e00d      	b.n	80090c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090a6:	f7fd fc5f 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 80090aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090ac:	e009      	b.n	80090c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090b4:	e005      	b.n	80090c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80090c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8130 	beq.w	800932a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ce:	4a94      	ldr	r2, [pc, #592]	@ (8009320 <UART_SetConfig+0x5c4>)
 80090d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090d4:	461a      	mov	r2, r3
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	4613      	mov	r3, r2
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	4413      	add	r3, r2
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d305      	bcc.n	80090fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d903      	bls.n	8009102 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009100:	e113      	b.n	800932a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009104:	2200      	movs	r2, #0
 8009106:	60bb      	str	r3, [r7, #8]
 8009108:	60fa      	str	r2, [r7, #12]
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910e:	4a84      	ldr	r2, [pc, #528]	@ (8009320 <UART_SetConfig+0x5c4>)
 8009110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009114:	b29b      	uxth	r3, r3
 8009116:	2200      	movs	r2, #0
 8009118:	603b      	str	r3, [r7, #0]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009120:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009124:	f7f7 fdd8 	bl	8000cd8 <__aeabi_uldivmod>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4610      	mov	r0, r2
 800912e:	4619      	mov	r1, r3
 8009130:	f04f 0200 	mov.w	r2, #0
 8009134:	f04f 0300 	mov.w	r3, #0
 8009138:	020b      	lsls	r3, r1, #8
 800913a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800913e:	0202      	lsls	r2, r0, #8
 8009140:	6979      	ldr	r1, [r7, #20]
 8009142:	6849      	ldr	r1, [r1, #4]
 8009144:	0849      	lsrs	r1, r1, #1
 8009146:	2000      	movs	r0, #0
 8009148:	460c      	mov	r4, r1
 800914a:	4605      	mov	r5, r0
 800914c:	eb12 0804 	adds.w	r8, r2, r4
 8009150:	eb43 0905 	adc.w	r9, r3, r5
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	469a      	mov	sl, r3
 800915c:	4693      	mov	fp, r2
 800915e:	4652      	mov	r2, sl
 8009160:	465b      	mov	r3, fp
 8009162:	4640      	mov	r0, r8
 8009164:	4649      	mov	r1, r9
 8009166:	f7f7 fdb7 	bl	8000cd8 <__aeabi_uldivmod>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4613      	mov	r3, r2
 8009170:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009178:	d308      	bcc.n	800918c <UART_SetConfig+0x430>
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009180:	d204      	bcs.n	800918c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6a3a      	ldr	r2, [r7, #32]
 8009188:	60da      	str	r2, [r3, #12]
 800918a:	e0ce      	b.n	800932a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009192:	e0ca      	b.n	800932a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800919c:	d166      	bne.n	800926c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800919e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091a2:	2b08      	cmp	r3, #8
 80091a4:	d827      	bhi.n	80091f6 <UART_SetConfig+0x49a>
 80091a6:	a201      	add	r2, pc, #4	@ (adr r2, 80091ac <UART_SetConfig+0x450>)
 80091a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ac:	080091d1 	.word	0x080091d1
 80091b0:	080091d9 	.word	0x080091d9
 80091b4:	080091e1 	.word	0x080091e1
 80091b8:	080091f7 	.word	0x080091f7
 80091bc:	080091e7 	.word	0x080091e7
 80091c0:	080091f7 	.word	0x080091f7
 80091c4:	080091f7 	.word	0x080091f7
 80091c8:	080091f7 	.word	0x080091f7
 80091cc:	080091ef 	.word	0x080091ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091d0:	f7fd fc38 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 80091d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091d6:	e014      	b.n	8009202 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091d8:	f7fd fc4a 	bl	8006a70 <HAL_RCC_GetPCLK2Freq>
 80091dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091de:	e010      	b.n	8009202 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091e0:	4b4e      	ldr	r3, [pc, #312]	@ (800931c <UART_SetConfig+0x5c0>)
 80091e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091e4:	e00d      	b.n	8009202 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091e6:	f7fd fbbf 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 80091ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091ec:	e009      	b.n	8009202 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091f4:	e005      	b.n	8009202 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009200:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 8090 	beq.w	800932a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920e:	4a44      	ldr	r2, [pc, #272]	@ (8009320 <UART_SetConfig+0x5c4>)
 8009210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009214:	461a      	mov	r2, r3
 8009216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009218:	fbb3 f3f2 	udiv	r3, r3, r2
 800921c:	005a      	lsls	r2, r3, #1
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	441a      	add	r2, r3
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	fbb2 f3f3 	udiv	r3, r2, r3
 800922e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	2b0f      	cmp	r3, #15
 8009234:	d916      	bls.n	8009264 <UART_SetConfig+0x508>
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800923c:	d212      	bcs.n	8009264 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	b29b      	uxth	r3, r3
 8009242:	f023 030f 	bic.w	r3, r3, #15
 8009246:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	b29b      	uxth	r3, r3
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	b29a      	uxth	r2, r3
 8009254:	8bfb      	ldrh	r3, [r7, #30]
 8009256:	4313      	orrs	r3, r2
 8009258:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	8bfa      	ldrh	r2, [r7, #30]
 8009260:	60da      	str	r2, [r3, #12]
 8009262:	e062      	b.n	800932a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800926a:	e05e      	b.n	800932a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800926c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009270:	2b08      	cmp	r3, #8
 8009272:	d828      	bhi.n	80092c6 <UART_SetConfig+0x56a>
 8009274:	a201      	add	r2, pc, #4	@ (adr r2, 800927c <UART_SetConfig+0x520>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	080092a1 	.word	0x080092a1
 8009280:	080092a9 	.word	0x080092a9
 8009284:	080092b1 	.word	0x080092b1
 8009288:	080092c7 	.word	0x080092c7
 800928c:	080092b7 	.word	0x080092b7
 8009290:	080092c7 	.word	0x080092c7
 8009294:	080092c7 	.word	0x080092c7
 8009298:	080092c7 	.word	0x080092c7
 800929c:	080092bf 	.word	0x080092bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092a0:	f7fd fbd0 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 80092a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092a6:	e014      	b.n	80092d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092a8:	f7fd fbe2 	bl	8006a70 <HAL_RCC_GetPCLK2Freq>
 80092ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092ae:	e010      	b.n	80092d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092b0:	4b1a      	ldr	r3, [pc, #104]	@ (800931c <UART_SetConfig+0x5c0>)
 80092b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092b4:	e00d      	b.n	80092d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092b6:	f7fd fb57 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 80092ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092bc:	e009      	b.n	80092d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092c4:	e005      	b.n	80092d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80092d0:	bf00      	nop
    }

    if (pclk != 0U)
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d028      	beq.n	800932a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092dc:	4a10      	ldr	r2, [pc, #64]	@ (8009320 <UART_SetConfig+0x5c4>)
 80092de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e2:	461a      	mov	r2, r3
 80092e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	085b      	lsrs	r3, r3, #1
 80092f0:	441a      	add	r2, r3
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	2b0f      	cmp	r3, #15
 8009300:	d910      	bls.n	8009324 <UART_SetConfig+0x5c8>
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009308:	d20c      	bcs.n	8009324 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	b29a      	uxth	r2, r3
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	60da      	str	r2, [r3, #12]
 8009314:	e009      	b.n	800932a <UART_SetConfig+0x5ce>
 8009316:	bf00      	nop
 8009318:	40008000 	.word	0x40008000
 800931c:	00f42400 	.word	0x00f42400
 8009320:	0800e270 	.word	0x0800e270
      }
      else
      {
        ret = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2201      	movs	r2, #1
 800932e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2201      	movs	r2, #1
 8009336:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2200      	movs	r2, #0
 800933e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2200      	movs	r2, #0
 8009344:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009346:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800934a:	4618      	mov	r0, r3
 800934c:	3730      	adds	r7, #48	@ 0x30
 800934e:	46bd      	mov	sp, r7
 8009350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00a      	beq.n	800937e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00a      	beq.n	80093c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c6:	f003 0304 	and.w	r3, r3, #4
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e8:	f003 0310 	and.w	r3, r3, #16
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00a      	beq.n	8009406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940a:	f003 0320 	and.w	r3, r3, #32
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00a      	beq.n	8009428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009430:	2b00      	cmp	r3, #0
 8009432:	d01a      	beq.n	800946a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800944e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009452:	d10a      	bne.n	800946a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	605a      	str	r2, [r3, #4]
  }
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b098      	sub	sp, #96	@ 0x60
 800949c:	af02      	add	r7, sp, #8
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094a8:	f7fa fb7a 	bl	8003ba0 <HAL_GetTick>
 80094ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b08      	cmp	r3, #8
 80094ba:	d12f      	bne.n	800951c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094c4:	2200      	movs	r2, #0
 80094c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f88e 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d022      	beq.n	800951c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094de:	e853 3f00 	ldrex	r3, [r3]
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80094f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094fc:	e841 2300 	strex	r3, r2, [r1]
 8009500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e6      	bne.n	80094d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009518:	2303      	movs	r3, #3
 800951a:	e063      	b.n	80095e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b04      	cmp	r3, #4
 8009528:	d149      	bne.n	80095be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800952a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009532:	2200      	movs	r2, #0
 8009534:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f857 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d03c      	beq.n	80095be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	623b      	str	r3, [r7, #32]
   return(result);
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009562:	633b      	str	r3, [r7, #48]	@ 0x30
 8009564:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e6      	bne.n	8009544 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3308      	adds	r3, #8
 800957c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	e853 3f00 	ldrex	r3, [r3]
 8009584:	60fb      	str	r3, [r7, #12]
   return(result);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f023 0301 	bic.w	r3, r3, #1
 800958c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3308      	adds	r3, #8
 8009594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009596:	61fa      	str	r2, [r7, #28]
 8009598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	69b9      	ldr	r1, [r7, #24]
 800959c:	69fa      	ldr	r2, [r7, #28]
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	617b      	str	r3, [r7, #20]
   return(result);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e5      	bne.n	8009576 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e012      	b.n	80095e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3758      	adds	r7, #88	@ 0x58
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095fc:	e04f      	b.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009604:	d04b      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009606:	f7fa facb 	bl	8003ba0 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	429a      	cmp	r2, r3
 8009614:	d302      	bcc.n	800961c <UART_WaitOnFlagUntilTimeout+0x30>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e04e      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b00      	cmp	r3, #0
 800962c:	d037      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b80      	cmp	r3, #128	@ 0x80
 8009632:	d034      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b40      	cmp	r3, #64	@ 0x40
 8009638:	d031      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b08      	cmp	r3, #8
 8009646:	d110      	bne.n	800966a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2208      	movs	r2, #8
 800964e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 f838 	bl	80096c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2208      	movs	r2, #8
 800965a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e029      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009678:	d111      	bne.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 f81e 	bl	80096c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2220      	movs	r2, #32
 800968e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e00f      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69da      	ldr	r2, [r3, #28]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4013      	ands	r3, r2
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	bf0c      	ite	eq
 80096ae:	2301      	moveq	r3, #1
 80096b0:	2300      	movne	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	461a      	mov	r2, r3
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d0a0      	beq.n	80095fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b095      	sub	sp, #84	@ 0x54
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e6      	bne.n	80096ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3308      	adds	r3, #8
 8009706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009716:	f023 0301 	bic.w	r3, r3, #1
 800971a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3308      	adds	r3, #8
 8009722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800972a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e3      	bne.n	8009700 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d118      	bne.n	8009772 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	60bb      	str	r3, [r7, #8]
   return(result);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f023 0310 	bic.w	r3, r3, #16
 8009754:	647b      	str	r3, [r7, #68]	@ 0x44
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800975e:	61bb      	str	r3, [r7, #24]
 8009760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6979      	ldr	r1, [r7, #20]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	613b      	str	r3, [r7, #16]
   return(result);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e6      	bne.n	8009740 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2220      	movs	r2, #32
 8009776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009786:	bf00      	nop
 8009788:	3754      	adds	r7, #84	@ 0x54
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f7ff fabd 	bl	8008d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b088      	sub	sp, #32
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	61bb      	str	r3, [r7, #24]
 80097e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	6979      	ldr	r1, [r7, #20]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	613b      	str	r3, [r7, #16]
   return(result);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e6      	bne.n	80097c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff fa88 	bl	8008d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800980c:	bf00      	nop
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800985e:	2b01      	cmp	r3, #1
 8009860:	d101      	bne.n	8009866 <HAL_UARTEx_DisableFifoMode+0x16>
 8009862:	2302      	movs	r3, #2
 8009864:	e027      	b.n	80098b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2224      	movs	r2, #36	@ 0x24
 8009872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0201 	bic.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009894:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098d6:	2302      	movs	r3, #2
 80098d8:	e02d      	b.n	8009936 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2224      	movs	r2, #36	@ 0x24
 80098e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0201 	bic.w	r2, r2, #1
 8009900:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f850 	bl	80099bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2220      	movs	r2, #32
 8009928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009952:	2302      	movs	r3, #2
 8009954:	e02d      	b.n	80099b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2224      	movs	r2, #36	@ 0x24
 8009962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f022 0201 	bic.w	r2, r2, #1
 800997c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f812 	bl	80099bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d108      	bne.n	80099de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099dc:	e031      	b.n	8009a42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099de:	2308      	movs	r3, #8
 80099e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099e2:	2308      	movs	r3, #8
 80099e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	0e5b      	lsrs	r3, r3, #25
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 0307 	and.w	r3, r3, #7
 80099f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	0f5b      	lsrs	r3, r3, #29
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	7b3a      	ldrb	r2, [r7, #12]
 8009a0a:	4911      	ldr	r1, [pc, #68]	@ (8009a50 <UARTEx_SetNbDataToProcess+0x94>)
 8009a0c:	5c8a      	ldrb	r2, [r1, r2]
 8009a0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a12:	7b3a      	ldrb	r2, [r7, #12]
 8009a14:	490f      	ldr	r1, [pc, #60]	@ (8009a54 <UARTEx_SetNbDataToProcess+0x98>)
 8009a16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	7b7a      	ldrb	r2, [r7, #13]
 8009a28:	4909      	ldr	r1, [pc, #36]	@ (8009a50 <UARTEx_SetNbDataToProcess+0x94>)
 8009a2a:	5c8a      	ldrb	r2, [r1, r2]
 8009a2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a30:	7b7a      	ldrb	r2, [r7, #13]
 8009a32:	4908      	ldr	r1, [pc, #32]	@ (8009a54 <UARTEx_SetNbDataToProcess+0x98>)
 8009a34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a36:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a42:	bf00      	nop
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	0800e288 	.word	0x0800e288
 8009a54:	0800e290 	.word	0x0800e290

08009a58 <_Z41__static_initialization_and_destruction_0ii>:
    }
}

AbstractCANProvider::~AbstractCANProvider() {

}
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
std::unique_ptr<AbstractAllocator> _alloc_ptr;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d107      	bne.n	8009a78 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d102      	bne.n	8009a78 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8009a72:	4803      	ldr	r0, [pc, #12]	@ (8009a80 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8009a74:	f000 f806 	bl	8009a84 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	20000674 	.word	0x20000674

08009a84 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009a84:	b590      	push	{r4, r7, lr}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7f8 fb56 	bl	8002140 <_ZNSt15__uniq_ptr_implI17AbstractAllocatorSt14default_deleteIS0_EE6_M_ptrEv>
 8009a94:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00c      	beq.n	8009ab8 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7f8 fb29 	bl	80020f6 <_ZNSt10unique_ptrI17AbstractAllocatorSt14default_deleteIS0_EE11get_deleterEv>
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7f8 fb32 	bl	8002110 <_ZSt4moveIRP17AbstractAllocatorEONSt16remove_referenceIT_E4typeEOS4_>
 8009aac:	4603      	mov	r3, r0
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7f8 fb51 	bl	800215a <_ZNKSt14default_deleteI17AbstractAllocatorEclEPS0_>
	__ptr = pointer();
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	601a      	str	r2, [r3, #0]
      }
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd90      	pop	{r4, r7, pc}

08009ac8 <_GLOBAL__sub_I_queue>:
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	f7ff ffc1 	bl	8009a58 <_Z41__static_initialization_and_destruction_0ii>
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <_GLOBAL__sub_D_queue>:
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	f7ff ffb9 	bl	8009a58 <_Z41__static_initialization_and_destruction_0ii>
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <_ZdlPvj>:
 8009ae8:	f000 b800 	b.w	8009aec <_ZdlPv>

08009aec <_ZdlPv>:
 8009aec:	f000 b82e 	b.w	8009b4c <free>

08009af0 <abort>:
 8009af0:	b508      	push	{r3, lr}
 8009af2:	2006      	movs	r0, #6
 8009af4:	f001 f8e0 	bl	800acb8 <raise>
 8009af8:	2001      	movs	r0, #1
 8009afa:	f7f9 fa71 	bl	8002fe0 <_exit>
	...

08009b00 <__assert_func>:
 8009b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b02:	4614      	mov	r4, r2
 8009b04:	461a      	mov	r2, r3
 8009b06:	4b09      	ldr	r3, [pc, #36]	@ (8009b2c <__assert_func+0x2c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	68d8      	ldr	r0, [r3, #12]
 8009b0e:	b954      	cbnz	r4, 8009b26 <__assert_func+0x26>
 8009b10:	4b07      	ldr	r3, [pc, #28]	@ (8009b30 <__assert_func+0x30>)
 8009b12:	461c      	mov	r4, r3
 8009b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b18:	9100      	str	r1, [sp, #0]
 8009b1a:	462b      	mov	r3, r5
 8009b1c:	4905      	ldr	r1, [pc, #20]	@ (8009b34 <__assert_func+0x34>)
 8009b1e:	f000 ffdb 	bl	800aad8 <fiprintf>
 8009b22:	f7ff ffe5 	bl	8009af0 <abort>
 8009b26:	4b04      	ldr	r3, [pc, #16]	@ (8009b38 <__assert_func+0x38>)
 8009b28:	e7f4      	b.n	8009b14 <__assert_func+0x14>
 8009b2a:	bf00      	nop
 8009b2c:	2000001c 	.word	0x2000001c
 8009b30:	0800e2d3 	.word	0x0800e2d3
 8009b34:	0800e2a5 	.word	0x0800e2a5
 8009b38:	0800e298 	.word	0x0800e298

08009b3c <malloc>:
 8009b3c:	4b02      	ldr	r3, [pc, #8]	@ (8009b48 <malloc+0xc>)
 8009b3e:	4601      	mov	r1, r0
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	f000 b82d 	b.w	8009ba0 <_malloc_r>
 8009b46:	bf00      	nop
 8009b48:	2000001c 	.word	0x2000001c

08009b4c <free>:
 8009b4c:	4b02      	ldr	r3, [pc, #8]	@ (8009b58 <free+0xc>)
 8009b4e:	4601      	mov	r1, r0
 8009b50:	6818      	ldr	r0, [r3, #0]
 8009b52:	f001 bfb5 	b.w	800bac0 <_free_r>
 8009b56:	bf00      	nop
 8009b58:	2000001c 	.word	0x2000001c

08009b5c <sbrk_aligned>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8009b9c <sbrk_aligned+0x40>)
 8009b60:	460c      	mov	r4, r1
 8009b62:	6831      	ldr	r1, [r6, #0]
 8009b64:	4605      	mov	r5, r0
 8009b66:	b911      	cbnz	r1, 8009b6e <sbrk_aligned+0x12>
 8009b68:	f001 f8fa 	bl	800ad60 <_sbrk_r>
 8009b6c:	6030      	str	r0, [r6, #0]
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4628      	mov	r0, r5
 8009b72:	f001 f8f5 	bl	800ad60 <_sbrk_r>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	d103      	bne.n	8009b82 <sbrk_aligned+0x26>
 8009b7a:	f04f 34ff 	mov.w	r4, #4294967295
 8009b7e:	4620      	mov	r0, r4
 8009b80:	bd70      	pop	{r4, r5, r6, pc}
 8009b82:	1cc4      	adds	r4, r0, #3
 8009b84:	f024 0403 	bic.w	r4, r4, #3
 8009b88:	42a0      	cmp	r0, r4
 8009b8a:	d0f8      	beq.n	8009b7e <sbrk_aligned+0x22>
 8009b8c:	1a21      	subs	r1, r4, r0
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f001 f8e6 	bl	800ad60 <_sbrk_r>
 8009b94:	3001      	adds	r0, #1
 8009b96:	d1f2      	bne.n	8009b7e <sbrk_aligned+0x22>
 8009b98:	e7ef      	b.n	8009b7a <sbrk_aligned+0x1e>
 8009b9a:	bf00      	nop
 8009b9c:	20000678 	.word	0x20000678

08009ba0 <_malloc_r>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	1ccd      	adds	r5, r1, #3
 8009ba6:	f025 0503 	bic.w	r5, r5, #3
 8009baa:	3508      	adds	r5, #8
 8009bac:	2d0c      	cmp	r5, #12
 8009bae:	bf38      	it	cc
 8009bb0:	250c      	movcc	r5, #12
 8009bb2:	2d00      	cmp	r5, #0
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	db01      	blt.n	8009bbc <_malloc_r+0x1c>
 8009bb8:	42a9      	cmp	r1, r5
 8009bba:	d904      	bls.n	8009bc6 <_malloc_r+0x26>
 8009bbc:	230c      	movs	r3, #12
 8009bbe:	6033      	str	r3, [r6, #0]
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c9c <_malloc_r+0xfc>
 8009bca:	f000 f869 	bl	8009ca0 <__malloc_lock>
 8009bce:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd2:	461c      	mov	r4, r3
 8009bd4:	bb44      	cbnz	r4, 8009c28 <_malloc_r+0x88>
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f7ff ffbf 	bl	8009b5c <sbrk_aligned>
 8009bde:	1c43      	adds	r3, r0, #1
 8009be0:	4604      	mov	r4, r0
 8009be2:	d158      	bne.n	8009c96 <_malloc_r+0xf6>
 8009be4:	f8d8 4000 	ldr.w	r4, [r8]
 8009be8:	4627      	mov	r7, r4
 8009bea:	2f00      	cmp	r7, #0
 8009bec:	d143      	bne.n	8009c76 <_malloc_r+0xd6>
 8009bee:	2c00      	cmp	r4, #0
 8009bf0:	d04b      	beq.n	8009c8a <_malloc_r+0xea>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	eb04 0903 	add.w	r9, r4, r3
 8009bfc:	f001 f8b0 	bl	800ad60 <_sbrk_r>
 8009c00:	4581      	cmp	r9, r0
 8009c02:	d142      	bne.n	8009c8a <_malloc_r+0xea>
 8009c04:	6821      	ldr	r1, [r4, #0]
 8009c06:	1a6d      	subs	r5, r5, r1
 8009c08:	4629      	mov	r1, r5
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7ff ffa6 	bl	8009b5c <sbrk_aligned>
 8009c10:	3001      	adds	r0, #1
 8009c12:	d03a      	beq.n	8009c8a <_malloc_r+0xea>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	442b      	add	r3, r5
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	bb62      	cbnz	r2, 8009c7c <_malloc_r+0xdc>
 8009c22:	f8c8 7000 	str.w	r7, [r8]
 8009c26:	e00f      	b.n	8009c48 <_malloc_r+0xa8>
 8009c28:	6822      	ldr	r2, [r4, #0]
 8009c2a:	1b52      	subs	r2, r2, r5
 8009c2c:	d420      	bmi.n	8009c70 <_malloc_r+0xd0>
 8009c2e:	2a0b      	cmp	r2, #11
 8009c30:	d917      	bls.n	8009c62 <_malloc_r+0xc2>
 8009c32:	1961      	adds	r1, r4, r5
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	6025      	str	r5, [r4, #0]
 8009c38:	bf18      	it	ne
 8009c3a:	6059      	strne	r1, [r3, #4]
 8009c3c:	6863      	ldr	r3, [r4, #4]
 8009c3e:	bf08      	it	eq
 8009c40:	f8c8 1000 	streq.w	r1, [r8]
 8009c44:	5162      	str	r2, [r4, r5]
 8009c46:	604b      	str	r3, [r1, #4]
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f000 f82f 	bl	8009cac <__malloc_unlock>
 8009c4e:	f104 000b 	add.w	r0, r4, #11
 8009c52:	1d23      	adds	r3, r4, #4
 8009c54:	f020 0007 	bic.w	r0, r0, #7
 8009c58:	1ac2      	subs	r2, r0, r3
 8009c5a:	bf1c      	itt	ne
 8009c5c:	1a1b      	subne	r3, r3, r0
 8009c5e:	50a3      	strne	r3, [r4, r2]
 8009c60:	e7af      	b.n	8009bc2 <_malloc_r+0x22>
 8009c62:	6862      	ldr	r2, [r4, #4]
 8009c64:	42a3      	cmp	r3, r4
 8009c66:	bf0c      	ite	eq
 8009c68:	f8c8 2000 	streq.w	r2, [r8]
 8009c6c:	605a      	strne	r2, [r3, #4]
 8009c6e:	e7eb      	b.n	8009c48 <_malloc_r+0xa8>
 8009c70:	4623      	mov	r3, r4
 8009c72:	6864      	ldr	r4, [r4, #4]
 8009c74:	e7ae      	b.n	8009bd4 <_malloc_r+0x34>
 8009c76:	463c      	mov	r4, r7
 8009c78:	687f      	ldr	r7, [r7, #4]
 8009c7a:	e7b6      	b.n	8009bea <_malloc_r+0x4a>
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	42a3      	cmp	r3, r4
 8009c82:	d1fb      	bne.n	8009c7c <_malloc_r+0xdc>
 8009c84:	2300      	movs	r3, #0
 8009c86:	6053      	str	r3, [r2, #4]
 8009c88:	e7de      	b.n	8009c48 <_malloc_r+0xa8>
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	6033      	str	r3, [r6, #0]
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f000 f80c 	bl	8009cac <__malloc_unlock>
 8009c94:	e794      	b.n	8009bc0 <_malloc_r+0x20>
 8009c96:	6005      	str	r5, [r0, #0]
 8009c98:	e7d6      	b.n	8009c48 <_malloc_r+0xa8>
 8009c9a:	bf00      	nop
 8009c9c:	2000067c 	.word	0x2000067c

08009ca0 <__malloc_lock>:
 8009ca0:	4801      	ldr	r0, [pc, #4]	@ (8009ca8 <__malloc_lock+0x8>)
 8009ca2:	f001 b8aa 	b.w	800adfa <__retarget_lock_acquire_recursive>
 8009ca6:	bf00      	nop
 8009ca8:	200007c0 	.word	0x200007c0

08009cac <__malloc_unlock>:
 8009cac:	4801      	ldr	r0, [pc, #4]	@ (8009cb4 <__malloc_unlock+0x8>)
 8009cae:	f001 b8a5 	b.w	800adfc <__retarget_lock_release_recursive>
 8009cb2:	bf00      	nop
 8009cb4:	200007c0 	.word	0x200007c0

08009cb8 <__cvt>:
 8009cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	ec57 6b10 	vmov	r6, r7, d0
 8009cc0:	2f00      	cmp	r7, #0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	bfbb      	ittet	lt
 8009cca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009cce:	461f      	movlt	r7, r3
 8009cd0:	2300      	movge	r3, #0
 8009cd2:	232d      	movlt	r3, #45	@ 0x2d
 8009cd4:	700b      	strb	r3, [r1, #0]
 8009cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cd8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009cdc:	4691      	mov	r9, r2
 8009cde:	f023 0820 	bic.w	r8, r3, #32
 8009ce2:	bfbc      	itt	lt
 8009ce4:	4632      	movlt	r2, r6
 8009ce6:	4616      	movlt	r6, r2
 8009ce8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cec:	d005      	beq.n	8009cfa <__cvt+0x42>
 8009cee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009cf2:	d100      	bne.n	8009cf6 <__cvt+0x3e>
 8009cf4:	3401      	adds	r4, #1
 8009cf6:	2102      	movs	r1, #2
 8009cf8:	e000      	b.n	8009cfc <__cvt+0x44>
 8009cfa:	2103      	movs	r1, #3
 8009cfc:	ab03      	add	r3, sp, #12
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	ab02      	add	r3, sp, #8
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	ec47 6b10 	vmov	d0, r6, r7
 8009d08:	4653      	mov	r3, sl
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	f001 f914 	bl	800af38 <_dtoa_r>
 8009d10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009d14:	4605      	mov	r5, r0
 8009d16:	d119      	bne.n	8009d4c <__cvt+0x94>
 8009d18:	f019 0f01 	tst.w	r9, #1
 8009d1c:	d00e      	beq.n	8009d3c <__cvt+0x84>
 8009d1e:	eb00 0904 	add.w	r9, r0, r4
 8009d22:	2200      	movs	r2, #0
 8009d24:	2300      	movs	r3, #0
 8009d26:	4630      	mov	r0, r6
 8009d28:	4639      	mov	r1, r7
 8009d2a:	f7f6 fef5 	bl	8000b18 <__aeabi_dcmpeq>
 8009d2e:	b108      	cbz	r0, 8009d34 <__cvt+0x7c>
 8009d30:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d34:	2230      	movs	r2, #48	@ 0x30
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	454b      	cmp	r3, r9
 8009d3a:	d31e      	bcc.n	8009d7a <__cvt+0xc2>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d40:	1b5b      	subs	r3, r3, r5
 8009d42:	4628      	mov	r0, r5
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	b004      	add	sp, #16
 8009d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d50:	eb00 0904 	add.w	r9, r0, r4
 8009d54:	d1e5      	bne.n	8009d22 <__cvt+0x6a>
 8009d56:	7803      	ldrb	r3, [r0, #0]
 8009d58:	2b30      	cmp	r3, #48	@ 0x30
 8009d5a:	d10a      	bne.n	8009d72 <__cvt+0xba>
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2300      	movs	r3, #0
 8009d60:	4630      	mov	r0, r6
 8009d62:	4639      	mov	r1, r7
 8009d64:	f7f6 fed8 	bl	8000b18 <__aeabi_dcmpeq>
 8009d68:	b918      	cbnz	r0, 8009d72 <__cvt+0xba>
 8009d6a:	f1c4 0401 	rsb	r4, r4, #1
 8009d6e:	f8ca 4000 	str.w	r4, [sl]
 8009d72:	f8da 3000 	ldr.w	r3, [sl]
 8009d76:	4499      	add	r9, r3
 8009d78:	e7d3      	b.n	8009d22 <__cvt+0x6a>
 8009d7a:	1c59      	adds	r1, r3, #1
 8009d7c:	9103      	str	r1, [sp, #12]
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	e7d9      	b.n	8009d36 <__cvt+0x7e>

08009d82 <__exponent>:
 8009d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d84:	2900      	cmp	r1, #0
 8009d86:	bfba      	itte	lt
 8009d88:	4249      	neglt	r1, r1
 8009d8a:	232d      	movlt	r3, #45	@ 0x2d
 8009d8c:	232b      	movge	r3, #43	@ 0x2b
 8009d8e:	2909      	cmp	r1, #9
 8009d90:	7002      	strb	r2, [r0, #0]
 8009d92:	7043      	strb	r3, [r0, #1]
 8009d94:	dd29      	ble.n	8009dea <__exponent+0x68>
 8009d96:	f10d 0307 	add.w	r3, sp, #7
 8009d9a:	461d      	mov	r5, r3
 8009d9c:	270a      	movs	r7, #10
 8009d9e:	461a      	mov	r2, r3
 8009da0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009da4:	fb07 1416 	mls	r4, r7, r6, r1
 8009da8:	3430      	adds	r4, #48	@ 0x30
 8009daa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009dae:	460c      	mov	r4, r1
 8009db0:	2c63      	cmp	r4, #99	@ 0x63
 8009db2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009db6:	4631      	mov	r1, r6
 8009db8:	dcf1      	bgt.n	8009d9e <__exponent+0x1c>
 8009dba:	3130      	adds	r1, #48	@ 0x30
 8009dbc:	1e94      	subs	r4, r2, #2
 8009dbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009dc2:	1c41      	adds	r1, r0, #1
 8009dc4:	4623      	mov	r3, r4
 8009dc6:	42ab      	cmp	r3, r5
 8009dc8:	d30a      	bcc.n	8009de0 <__exponent+0x5e>
 8009dca:	f10d 0309 	add.w	r3, sp, #9
 8009dce:	1a9b      	subs	r3, r3, r2
 8009dd0:	42ac      	cmp	r4, r5
 8009dd2:	bf88      	it	hi
 8009dd4:	2300      	movhi	r3, #0
 8009dd6:	3302      	adds	r3, #2
 8009dd8:	4403      	add	r3, r0
 8009dda:	1a18      	subs	r0, r3, r0
 8009ddc:	b003      	add	sp, #12
 8009dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009de4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009de8:	e7ed      	b.n	8009dc6 <__exponent+0x44>
 8009dea:	2330      	movs	r3, #48	@ 0x30
 8009dec:	3130      	adds	r1, #48	@ 0x30
 8009dee:	7083      	strb	r3, [r0, #2]
 8009df0:	70c1      	strb	r1, [r0, #3]
 8009df2:	1d03      	adds	r3, r0, #4
 8009df4:	e7f1      	b.n	8009dda <__exponent+0x58>
	...

08009df8 <_printf_float>:
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	b08d      	sub	sp, #52	@ 0x34
 8009dfe:	460c      	mov	r4, r1
 8009e00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009e04:	4616      	mov	r6, r2
 8009e06:	461f      	mov	r7, r3
 8009e08:	4605      	mov	r5, r0
 8009e0a:	f000 ff5d 	bl	800acc8 <_localeconv_r>
 8009e0e:	6803      	ldr	r3, [r0, #0]
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f6 fa54 	bl	80002c0 <strlen>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e20:	9005      	str	r0, [sp, #20]
 8009e22:	3307      	adds	r3, #7
 8009e24:	f023 0307 	bic.w	r3, r3, #7
 8009e28:	f103 0208 	add.w	r2, r3, #8
 8009e2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e30:	f8d4 b000 	ldr.w	fp, [r4]
 8009e34:	f8c8 2000 	str.w	r2, [r8]
 8009e38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009e40:	9307      	str	r3, [sp, #28]
 8009e42:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e4e:	4b9c      	ldr	r3, [pc, #624]	@ (800a0c0 <_printf_float+0x2c8>)
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295
 8009e54:	f7f6 fe92 	bl	8000b7c <__aeabi_dcmpun>
 8009e58:	bb70      	cbnz	r0, 8009eb8 <_printf_float+0xc0>
 8009e5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e5e:	4b98      	ldr	r3, [pc, #608]	@ (800a0c0 <_printf_float+0x2c8>)
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	f7f6 fe6c 	bl	8000b40 <__aeabi_dcmple>
 8009e68:	bb30      	cbnz	r0, 8009eb8 <_printf_float+0xc0>
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4649      	mov	r1, r9
 8009e72:	f7f6 fe5b 	bl	8000b2c <__aeabi_dcmplt>
 8009e76:	b110      	cbz	r0, 8009e7e <_printf_float+0x86>
 8009e78:	232d      	movs	r3, #45	@ 0x2d
 8009e7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e7e:	4a91      	ldr	r2, [pc, #580]	@ (800a0c4 <_printf_float+0x2cc>)
 8009e80:	4b91      	ldr	r3, [pc, #580]	@ (800a0c8 <_printf_float+0x2d0>)
 8009e82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e86:	bf94      	ite	ls
 8009e88:	4690      	movls	r8, r2
 8009e8a:	4698      	movhi	r8, r3
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	6123      	str	r3, [r4, #16]
 8009e90:	f02b 0304 	bic.w	r3, fp, #4
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	f04f 0900 	mov.w	r9, #0
 8009e9a:	9700      	str	r7, [sp, #0]
 8009e9c:	4633      	mov	r3, r6
 8009e9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f9d2 	bl	800a24c <_printf_common>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f040 808d 	bne.w	8009fc8 <_printf_float+0x1d0>
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb2:	b00d      	add	sp, #52	@ 0x34
 8009eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb8:	4642      	mov	r2, r8
 8009eba:	464b      	mov	r3, r9
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	f7f6 fe5c 	bl	8000b7c <__aeabi_dcmpun>
 8009ec4:	b140      	cbz	r0, 8009ed8 <_printf_float+0xe0>
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	bfbc      	itt	lt
 8009ecc:	232d      	movlt	r3, #45	@ 0x2d
 8009ece:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ed2:	4a7e      	ldr	r2, [pc, #504]	@ (800a0cc <_printf_float+0x2d4>)
 8009ed4:	4b7e      	ldr	r3, [pc, #504]	@ (800a0d0 <_printf_float+0x2d8>)
 8009ed6:	e7d4      	b.n	8009e82 <_printf_float+0x8a>
 8009ed8:	6863      	ldr	r3, [r4, #4]
 8009eda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009ede:	9206      	str	r2, [sp, #24]
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	d13b      	bne.n	8009f5c <_printf_float+0x164>
 8009ee4:	2306      	movs	r3, #6
 8009ee6:	6063      	str	r3, [r4, #4]
 8009ee8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009eec:	2300      	movs	r3, #0
 8009eee:	6022      	str	r2, [r4, #0]
 8009ef0:	9303      	str	r3, [sp, #12]
 8009ef2:	ab0a      	add	r3, sp, #40	@ 0x28
 8009ef4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ef8:	ab09      	add	r3, sp, #36	@ 0x24
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	6861      	ldr	r1, [r4, #4]
 8009efe:	ec49 8b10 	vmov	d0, r8, r9
 8009f02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009f06:	4628      	mov	r0, r5
 8009f08:	f7ff fed6 	bl	8009cb8 <__cvt>
 8009f0c:	9b06      	ldr	r3, [sp, #24]
 8009f0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f10:	2b47      	cmp	r3, #71	@ 0x47
 8009f12:	4680      	mov	r8, r0
 8009f14:	d129      	bne.n	8009f6a <_printf_float+0x172>
 8009f16:	1cc8      	adds	r0, r1, #3
 8009f18:	db02      	blt.n	8009f20 <_printf_float+0x128>
 8009f1a:	6863      	ldr	r3, [r4, #4]
 8009f1c:	4299      	cmp	r1, r3
 8009f1e:	dd41      	ble.n	8009fa4 <_printf_float+0x1ac>
 8009f20:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f24:	fa5f fa8a 	uxtb.w	sl, sl
 8009f28:	3901      	subs	r1, #1
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f30:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f32:	f7ff ff26 	bl	8009d82 <__exponent>
 8009f36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f38:	1813      	adds	r3, r2, r0
 8009f3a:	2a01      	cmp	r2, #1
 8009f3c:	4681      	mov	r9, r0
 8009f3e:	6123      	str	r3, [r4, #16]
 8009f40:	dc02      	bgt.n	8009f48 <_printf_float+0x150>
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	07d2      	lsls	r2, r2, #31
 8009f46:	d501      	bpl.n	8009f4c <_printf_float+0x154>
 8009f48:	3301      	adds	r3, #1
 8009f4a:	6123      	str	r3, [r4, #16]
 8009f4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0a2      	beq.n	8009e9a <_printf_float+0xa2>
 8009f54:	232d      	movs	r3, #45	@ 0x2d
 8009f56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f5a:	e79e      	b.n	8009e9a <_printf_float+0xa2>
 8009f5c:	9a06      	ldr	r2, [sp, #24]
 8009f5e:	2a47      	cmp	r2, #71	@ 0x47
 8009f60:	d1c2      	bne.n	8009ee8 <_printf_float+0xf0>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1c0      	bne.n	8009ee8 <_printf_float+0xf0>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7bd      	b.n	8009ee6 <_printf_float+0xee>
 8009f6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f6e:	d9db      	bls.n	8009f28 <_printf_float+0x130>
 8009f70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f74:	d118      	bne.n	8009fa8 <_printf_float+0x1b0>
 8009f76:	2900      	cmp	r1, #0
 8009f78:	6863      	ldr	r3, [r4, #4]
 8009f7a:	dd0b      	ble.n	8009f94 <_printf_float+0x19c>
 8009f7c:	6121      	str	r1, [r4, #16]
 8009f7e:	b913      	cbnz	r3, 8009f86 <_printf_float+0x18e>
 8009f80:	6822      	ldr	r2, [r4, #0]
 8009f82:	07d0      	lsls	r0, r2, #31
 8009f84:	d502      	bpl.n	8009f8c <_printf_float+0x194>
 8009f86:	3301      	adds	r3, #1
 8009f88:	440b      	add	r3, r1
 8009f8a:	6123      	str	r3, [r4, #16]
 8009f8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f8e:	f04f 0900 	mov.w	r9, #0
 8009f92:	e7db      	b.n	8009f4c <_printf_float+0x154>
 8009f94:	b913      	cbnz	r3, 8009f9c <_printf_float+0x1a4>
 8009f96:	6822      	ldr	r2, [r4, #0]
 8009f98:	07d2      	lsls	r2, r2, #31
 8009f9a:	d501      	bpl.n	8009fa0 <_printf_float+0x1a8>
 8009f9c:	3302      	adds	r3, #2
 8009f9e:	e7f4      	b.n	8009f8a <_printf_float+0x192>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e7f2      	b.n	8009f8a <_printf_float+0x192>
 8009fa4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009fa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009faa:	4299      	cmp	r1, r3
 8009fac:	db05      	blt.n	8009fba <_printf_float+0x1c2>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	6121      	str	r1, [r4, #16]
 8009fb2:	07d8      	lsls	r0, r3, #31
 8009fb4:	d5ea      	bpl.n	8009f8c <_printf_float+0x194>
 8009fb6:	1c4b      	adds	r3, r1, #1
 8009fb8:	e7e7      	b.n	8009f8a <_printf_float+0x192>
 8009fba:	2900      	cmp	r1, #0
 8009fbc:	bfd4      	ite	le
 8009fbe:	f1c1 0202 	rsble	r2, r1, #2
 8009fc2:	2201      	movgt	r2, #1
 8009fc4:	4413      	add	r3, r2
 8009fc6:	e7e0      	b.n	8009f8a <_printf_float+0x192>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	055a      	lsls	r2, r3, #21
 8009fcc:	d407      	bmi.n	8009fde <_printf_float+0x1e6>
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	4631      	mov	r1, r6
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	47b8      	blx	r7
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d12b      	bne.n	800a034 <_printf_float+0x23c>
 8009fdc:	e767      	b.n	8009eae <_printf_float+0xb6>
 8009fde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009fe2:	f240 80dd 	bls.w	800a1a0 <_printf_float+0x3a8>
 8009fe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009fea:	2200      	movs	r2, #0
 8009fec:	2300      	movs	r3, #0
 8009fee:	f7f6 fd93 	bl	8000b18 <__aeabi_dcmpeq>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d033      	beq.n	800a05e <_printf_float+0x266>
 8009ff6:	4a37      	ldr	r2, [pc, #220]	@ (800a0d4 <_printf_float+0x2dc>)
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	47b8      	blx	r7
 800a000:	3001      	adds	r0, #1
 800a002:	f43f af54 	beq.w	8009eae <_printf_float+0xb6>
 800a006:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a00a:	4543      	cmp	r3, r8
 800a00c:	db02      	blt.n	800a014 <_printf_float+0x21c>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	07d8      	lsls	r0, r3, #31
 800a012:	d50f      	bpl.n	800a034 <_printf_float+0x23c>
 800a014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a018:	4631      	mov	r1, r6
 800a01a:	4628      	mov	r0, r5
 800a01c:	47b8      	blx	r7
 800a01e:	3001      	adds	r0, #1
 800a020:	f43f af45 	beq.w	8009eae <_printf_float+0xb6>
 800a024:	f04f 0900 	mov.w	r9, #0
 800a028:	f108 38ff 	add.w	r8, r8, #4294967295
 800a02c:	f104 0a1a 	add.w	sl, r4, #26
 800a030:	45c8      	cmp	r8, r9
 800a032:	dc09      	bgt.n	800a048 <_printf_float+0x250>
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	079b      	lsls	r3, r3, #30
 800a038:	f100 8103 	bmi.w	800a242 <_printf_float+0x44a>
 800a03c:	68e0      	ldr	r0, [r4, #12]
 800a03e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a040:	4298      	cmp	r0, r3
 800a042:	bfb8      	it	lt
 800a044:	4618      	movlt	r0, r3
 800a046:	e734      	b.n	8009eb2 <_printf_float+0xba>
 800a048:	2301      	movs	r3, #1
 800a04a:	4652      	mov	r2, sl
 800a04c:	4631      	mov	r1, r6
 800a04e:	4628      	mov	r0, r5
 800a050:	47b8      	blx	r7
 800a052:	3001      	adds	r0, #1
 800a054:	f43f af2b 	beq.w	8009eae <_printf_float+0xb6>
 800a058:	f109 0901 	add.w	r9, r9, #1
 800a05c:	e7e8      	b.n	800a030 <_printf_float+0x238>
 800a05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a060:	2b00      	cmp	r3, #0
 800a062:	dc39      	bgt.n	800a0d8 <_printf_float+0x2e0>
 800a064:	4a1b      	ldr	r2, [pc, #108]	@ (800a0d4 <_printf_float+0x2dc>)
 800a066:	2301      	movs	r3, #1
 800a068:	4631      	mov	r1, r6
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f af1d 	beq.w	8009eae <_printf_float+0xb6>
 800a074:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a078:	ea59 0303 	orrs.w	r3, r9, r3
 800a07c:	d102      	bne.n	800a084 <_printf_float+0x28c>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	07d9      	lsls	r1, r3, #31
 800a082:	d5d7      	bpl.n	800a034 <_printf_float+0x23c>
 800a084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a088:	4631      	mov	r1, r6
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b8      	blx	r7
 800a08e:	3001      	adds	r0, #1
 800a090:	f43f af0d 	beq.w	8009eae <_printf_float+0xb6>
 800a094:	f04f 0a00 	mov.w	sl, #0
 800a098:	f104 0b1a 	add.w	fp, r4, #26
 800a09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a09e:	425b      	negs	r3, r3
 800a0a0:	4553      	cmp	r3, sl
 800a0a2:	dc01      	bgt.n	800a0a8 <_printf_float+0x2b0>
 800a0a4:	464b      	mov	r3, r9
 800a0a6:	e793      	b.n	8009fd0 <_printf_float+0x1d8>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	465a      	mov	r2, fp
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f43f aefb 	beq.w	8009eae <_printf_float+0xb6>
 800a0b8:	f10a 0a01 	add.w	sl, sl, #1
 800a0bc:	e7ee      	b.n	800a09c <_printf_float+0x2a4>
 800a0be:	bf00      	nop
 800a0c0:	7fefffff 	.word	0x7fefffff
 800a0c4:	0800e2d4 	.word	0x0800e2d4
 800a0c8:	0800e2d8 	.word	0x0800e2d8
 800a0cc:	0800e2dc 	.word	0x0800e2dc
 800a0d0:	0800e2e0 	.word	0x0800e2e0
 800a0d4:	0800e2e4 	.word	0x0800e2e4
 800a0d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0de:	4553      	cmp	r3, sl
 800a0e0:	bfa8      	it	ge
 800a0e2:	4653      	movge	r3, sl
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	4699      	mov	r9, r3
 800a0e8:	dc36      	bgt.n	800a158 <_printf_float+0x360>
 800a0ea:	f04f 0b00 	mov.w	fp, #0
 800a0ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0f2:	f104 021a 	add.w	r2, r4, #26
 800a0f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0f8:	9306      	str	r3, [sp, #24]
 800a0fa:	eba3 0309 	sub.w	r3, r3, r9
 800a0fe:	455b      	cmp	r3, fp
 800a100:	dc31      	bgt.n	800a166 <_printf_float+0x36e>
 800a102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a104:	459a      	cmp	sl, r3
 800a106:	dc3a      	bgt.n	800a17e <_printf_float+0x386>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	07da      	lsls	r2, r3, #31
 800a10c:	d437      	bmi.n	800a17e <_printf_float+0x386>
 800a10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a110:	ebaa 0903 	sub.w	r9, sl, r3
 800a114:	9b06      	ldr	r3, [sp, #24]
 800a116:	ebaa 0303 	sub.w	r3, sl, r3
 800a11a:	4599      	cmp	r9, r3
 800a11c:	bfa8      	it	ge
 800a11e:	4699      	movge	r9, r3
 800a120:	f1b9 0f00 	cmp.w	r9, #0
 800a124:	dc33      	bgt.n	800a18e <_printf_float+0x396>
 800a126:	f04f 0800 	mov.w	r8, #0
 800a12a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a12e:	f104 0b1a 	add.w	fp, r4, #26
 800a132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a134:	ebaa 0303 	sub.w	r3, sl, r3
 800a138:	eba3 0309 	sub.w	r3, r3, r9
 800a13c:	4543      	cmp	r3, r8
 800a13e:	f77f af79 	ble.w	800a034 <_printf_float+0x23c>
 800a142:	2301      	movs	r3, #1
 800a144:	465a      	mov	r2, fp
 800a146:	4631      	mov	r1, r6
 800a148:	4628      	mov	r0, r5
 800a14a:	47b8      	blx	r7
 800a14c:	3001      	adds	r0, #1
 800a14e:	f43f aeae 	beq.w	8009eae <_printf_float+0xb6>
 800a152:	f108 0801 	add.w	r8, r8, #1
 800a156:	e7ec      	b.n	800a132 <_printf_float+0x33a>
 800a158:	4642      	mov	r2, r8
 800a15a:	4631      	mov	r1, r6
 800a15c:	4628      	mov	r0, r5
 800a15e:	47b8      	blx	r7
 800a160:	3001      	adds	r0, #1
 800a162:	d1c2      	bne.n	800a0ea <_printf_float+0x2f2>
 800a164:	e6a3      	b.n	8009eae <_printf_float+0xb6>
 800a166:	2301      	movs	r3, #1
 800a168:	4631      	mov	r1, r6
 800a16a:	4628      	mov	r0, r5
 800a16c:	9206      	str	r2, [sp, #24]
 800a16e:	47b8      	blx	r7
 800a170:	3001      	adds	r0, #1
 800a172:	f43f ae9c 	beq.w	8009eae <_printf_float+0xb6>
 800a176:	9a06      	ldr	r2, [sp, #24]
 800a178:	f10b 0b01 	add.w	fp, fp, #1
 800a17c:	e7bb      	b.n	800a0f6 <_printf_float+0x2fe>
 800a17e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	47b8      	blx	r7
 800a188:	3001      	adds	r0, #1
 800a18a:	d1c0      	bne.n	800a10e <_printf_float+0x316>
 800a18c:	e68f      	b.n	8009eae <_printf_float+0xb6>
 800a18e:	9a06      	ldr	r2, [sp, #24]
 800a190:	464b      	mov	r3, r9
 800a192:	4442      	add	r2, r8
 800a194:	4631      	mov	r1, r6
 800a196:	4628      	mov	r0, r5
 800a198:	47b8      	blx	r7
 800a19a:	3001      	adds	r0, #1
 800a19c:	d1c3      	bne.n	800a126 <_printf_float+0x32e>
 800a19e:	e686      	b.n	8009eae <_printf_float+0xb6>
 800a1a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1a4:	f1ba 0f01 	cmp.w	sl, #1
 800a1a8:	dc01      	bgt.n	800a1ae <_printf_float+0x3b6>
 800a1aa:	07db      	lsls	r3, r3, #31
 800a1ac:	d536      	bpl.n	800a21c <_printf_float+0x424>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	47b8      	blx	r7
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	f43f ae78 	beq.w	8009eae <_printf_float+0xb6>
 800a1be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	f43f ae70 	beq.w	8009eae <_printf_float+0xb6>
 800a1ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1da:	f7f6 fc9d 	bl	8000b18 <__aeabi_dcmpeq>
 800a1de:	b9c0      	cbnz	r0, 800a212 <_printf_float+0x41a>
 800a1e0:	4653      	mov	r3, sl
 800a1e2:	f108 0201 	add.w	r2, r8, #1
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	47b8      	blx	r7
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	d10c      	bne.n	800a20a <_printf_float+0x412>
 800a1f0:	e65d      	b.n	8009eae <_printf_float+0xb6>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	465a      	mov	r2, fp
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	47b8      	blx	r7
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	f43f ae56 	beq.w	8009eae <_printf_float+0xb6>
 800a202:	f108 0801 	add.w	r8, r8, #1
 800a206:	45d0      	cmp	r8, sl
 800a208:	dbf3      	blt.n	800a1f2 <_printf_float+0x3fa>
 800a20a:	464b      	mov	r3, r9
 800a20c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a210:	e6df      	b.n	8009fd2 <_printf_float+0x1da>
 800a212:	f04f 0800 	mov.w	r8, #0
 800a216:	f104 0b1a 	add.w	fp, r4, #26
 800a21a:	e7f4      	b.n	800a206 <_printf_float+0x40e>
 800a21c:	2301      	movs	r3, #1
 800a21e:	4642      	mov	r2, r8
 800a220:	e7e1      	b.n	800a1e6 <_printf_float+0x3ee>
 800a222:	2301      	movs	r3, #1
 800a224:	464a      	mov	r2, r9
 800a226:	4631      	mov	r1, r6
 800a228:	4628      	mov	r0, r5
 800a22a:	47b8      	blx	r7
 800a22c:	3001      	adds	r0, #1
 800a22e:	f43f ae3e 	beq.w	8009eae <_printf_float+0xb6>
 800a232:	f108 0801 	add.w	r8, r8, #1
 800a236:	68e3      	ldr	r3, [r4, #12]
 800a238:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a23a:	1a5b      	subs	r3, r3, r1
 800a23c:	4543      	cmp	r3, r8
 800a23e:	dcf0      	bgt.n	800a222 <_printf_float+0x42a>
 800a240:	e6fc      	b.n	800a03c <_printf_float+0x244>
 800a242:	f04f 0800 	mov.w	r8, #0
 800a246:	f104 0919 	add.w	r9, r4, #25
 800a24a:	e7f4      	b.n	800a236 <_printf_float+0x43e>

0800a24c <_printf_common>:
 800a24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	4616      	mov	r6, r2
 800a252:	4698      	mov	r8, r3
 800a254:	688a      	ldr	r2, [r1, #8]
 800a256:	690b      	ldr	r3, [r1, #16]
 800a258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a25c:	4293      	cmp	r3, r2
 800a25e:	bfb8      	it	lt
 800a260:	4613      	movlt	r3, r2
 800a262:	6033      	str	r3, [r6, #0]
 800a264:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a268:	4607      	mov	r7, r0
 800a26a:	460c      	mov	r4, r1
 800a26c:	b10a      	cbz	r2, 800a272 <_printf_common+0x26>
 800a26e:	3301      	adds	r3, #1
 800a270:	6033      	str	r3, [r6, #0]
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	0699      	lsls	r1, r3, #26
 800a276:	bf42      	ittt	mi
 800a278:	6833      	ldrmi	r3, [r6, #0]
 800a27a:	3302      	addmi	r3, #2
 800a27c:	6033      	strmi	r3, [r6, #0]
 800a27e:	6825      	ldr	r5, [r4, #0]
 800a280:	f015 0506 	ands.w	r5, r5, #6
 800a284:	d106      	bne.n	800a294 <_printf_common+0x48>
 800a286:	f104 0a19 	add.w	sl, r4, #25
 800a28a:	68e3      	ldr	r3, [r4, #12]
 800a28c:	6832      	ldr	r2, [r6, #0]
 800a28e:	1a9b      	subs	r3, r3, r2
 800a290:	42ab      	cmp	r3, r5
 800a292:	dc26      	bgt.n	800a2e2 <_printf_common+0x96>
 800a294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a298:	6822      	ldr	r2, [r4, #0]
 800a29a:	3b00      	subs	r3, #0
 800a29c:	bf18      	it	ne
 800a29e:	2301      	movne	r3, #1
 800a2a0:	0692      	lsls	r2, r2, #26
 800a2a2:	d42b      	bmi.n	800a2fc <_printf_common+0xb0>
 800a2a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a2a8:	4641      	mov	r1, r8
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	47c8      	blx	r9
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	d01e      	beq.n	800a2f0 <_printf_common+0xa4>
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	6922      	ldr	r2, [r4, #16]
 800a2b6:	f003 0306 	and.w	r3, r3, #6
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	bf02      	ittt	eq
 800a2be:	68e5      	ldreq	r5, [r4, #12]
 800a2c0:	6833      	ldreq	r3, [r6, #0]
 800a2c2:	1aed      	subeq	r5, r5, r3
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	bf0c      	ite	eq
 800a2c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2cc:	2500      	movne	r5, #0
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	bfc4      	itt	gt
 800a2d2:	1a9b      	subgt	r3, r3, r2
 800a2d4:	18ed      	addgt	r5, r5, r3
 800a2d6:	2600      	movs	r6, #0
 800a2d8:	341a      	adds	r4, #26
 800a2da:	42b5      	cmp	r5, r6
 800a2dc:	d11a      	bne.n	800a314 <_printf_common+0xc8>
 800a2de:	2000      	movs	r0, #0
 800a2e0:	e008      	b.n	800a2f4 <_printf_common+0xa8>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	47c8      	blx	r9
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	d103      	bne.n	800a2f8 <_printf_common+0xac>
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f8:	3501      	adds	r5, #1
 800a2fa:	e7c6      	b.n	800a28a <_printf_common+0x3e>
 800a2fc:	18e1      	adds	r1, r4, r3
 800a2fe:	1c5a      	adds	r2, r3, #1
 800a300:	2030      	movs	r0, #48	@ 0x30
 800a302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a306:	4422      	add	r2, r4
 800a308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a30c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a310:	3302      	adds	r3, #2
 800a312:	e7c7      	b.n	800a2a4 <_printf_common+0x58>
 800a314:	2301      	movs	r3, #1
 800a316:	4622      	mov	r2, r4
 800a318:	4641      	mov	r1, r8
 800a31a:	4638      	mov	r0, r7
 800a31c:	47c8      	blx	r9
 800a31e:	3001      	adds	r0, #1
 800a320:	d0e6      	beq.n	800a2f0 <_printf_common+0xa4>
 800a322:	3601      	adds	r6, #1
 800a324:	e7d9      	b.n	800a2da <_printf_common+0x8e>
	...

0800a328 <_printf_i>:
 800a328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a32c:	7e0f      	ldrb	r7, [r1, #24]
 800a32e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a330:	2f78      	cmp	r7, #120	@ 0x78
 800a332:	4691      	mov	r9, r2
 800a334:	4680      	mov	r8, r0
 800a336:	460c      	mov	r4, r1
 800a338:	469a      	mov	sl, r3
 800a33a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a33e:	d807      	bhi.n	800a350 <_printf_i+0x28>
 800a340:	2f62      	cmp	r7, #98	@ 0x62
 800a342:	d80a      	bhi.n	800a35a <_printf_i+0x32>
 800a344:	2f00      	cmp	r7, #0
 800a346:	f000 80d2 	beq.w	800a4ee <_printf_i+0x1c6>
 800a34a:	2f58      	cmp	r7, #88	@ 0x58
 800a34c:	f000 80b9 	beq.w	800a4c2 <_printf_i+0x19a>
 800a350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a358:	e03a      	b.n	800a3d0 <_printf_i+0xa8>
 800a35a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a35e:	2b15      	cmp	r3, #21
 800a360:	d8f6      	bhi.n	800a350 <_printf_i+0x28>
 800a362:	a101      	add	r1, pc, #4	@ (adr r1, 800a368 <_printf_i+0x40>)
 800a364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a368:	0800a3c1 	.word	0x0800a3c1
 800a36c:	0800a3d5 	.word	0x0800a3d5
 800a370:	0800a351 	.word	0x0800a351
 800a374:	0800a351 	.word	0x0800a351
 800a378:	0800a351 	.word	0x0800a351
 800a37c:	0800a351 	.word	0x0800a351
 800a380:	0800a3d5 	.word	0x0800a3d5
 800a384:	0800a351 	.word	0x0800a351
 800a388:	0800a351 	.word	0x0800a351
 800a38c:	0800a351 	.word	0x0800a351
 800a390:	0800a351 	.word	0x0800a351
 800a394:	0800a4d5 	.word	0x0800a4d5
 800a398:	0800a3ff 	.word	0x0800a3ff
 800a39c:	0800a48f 	.word	0x0800a48f
 800a3a0:	0800a351 	.word	0x0800a351
 800a3a4:	0800a351 	.word	0x0800a351
 800a3a8:	0800a4f7 	.word	0x0800a4f7
 800a3ac:	0800a351 	.word	0x0800a351
 800a3b0:	0800a3ff 	.word	0x0800a3ff
 800a3b4:	0800a351 	.word	0x0800a351
 800a3b8:	0800a351 	.word	0x0800a351
 800a3bc:	0800a497 	.word	0x0800a497
 800a3c0:	6833      	ldr	r3, [r6, #0]
 800a3c2:	1d1a      	adds	r2, r3, #4
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6032      	str	r2, [r6, #0]
 800a3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e09d      	b.n	800a510 <_printf_i+0x1e8>
 800a3d4:	6833      	ldr	r3, [r6, #0]
 800a3d6:	6820      	ldr	r0, [r4, #0]
 800a3d8:	1d19      	adds	r1, r3, #4
 800a3da:	6031      	str	r1, [r6, #0]
 800a3dc:	0606      	lsls	r6, r0, #24
 800a3de:	d501      	bpl.n	800a3e4 <_printf_i+0xbc>
 800a3e0:	681d      	ldr	r5, [r3, #0]
 800a3e2:	e003      	b.n	800a3ec <_printf_i+0xc4>
 800a3e4:	0645      	lsls	r5, r0, #25
 800a3e6:	d5fb      	bpl.n	800a3e0 <_printf_i+0xb8>
 800a3e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3ec:	2d00      	cmp	r5, #0
 800a3ee:	da03      	bge.n	800a3f8 <_printf_i+0xd0>
 800a3f0:	232d      	movs	r3, #45	@ 0x2d
 800a3f2:	426d      	negs	r5, r5
 800a3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3f8:	4859      	ldr	r0, [pc, #356]	@ (800a560 <_printf_i+0x238>)
 800a3fa:	230a      	movs	r3, #10
 800a3fc:	e011      	b.n	800a422 <_printf_i+0xfa>
 800a3fe:	6821      	ldr	r1, [r4, #0]
 800a400:	6833      	ldr	r3, [r6, #0]
 800a402:	0608      	lsls	r0, r1, #24
 800a404:	f853 5b04 	ldr.w	r5, [r3], #4
 800a408:	d402      	bmi.n	800a410 <_printf_i+0xe8>
 800a40a:	0649      	lsls	r1, r1, #25
 800a40c:	bf48      	it	mi
 800a40e:	b2ad      	uxthmi	r5, r5
 800a410:	2f6f      	cmp	r7, #111	@ 0x6f
 800a412:	4853      	ldr	r0, [pc, #332]	@ (800a560 <_printf_i+0x238>)
 800a414:	6033      	str	r3, [r6, #0]
 800a416:	bf14      	ite	ne
 800a418:	230a      	movne	r3, #10
 800a41a:	2308      	moveq	r3, #8
 800a41c:	2100      	movs	r1, #0
 800a41e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a422:	6866      	ldr	r6, [r4, #4]
 800a424:	60a6      	str	r6, [r4, #8]
 800a426:	2e00      	cmp	r6, #0
 800a428:	bfa2      	ittt	ge
 800a42a:	6821      	ldrge	r1, [r4, #0]
 800a42c:	f021 0104 	bicge.w	r1, r1, #4
 800a430:	6021      	strge	r1, [r4, #0]
 800a432:	b90d      	cbnz	r5, 800a438 <_printf_i+0x110>
 800a434:	2e00      	cmp	r6, #0
 800a436:	d04b      	beq.n	800a4d0 <_printf_i+0x1a8>
 800a438:	4616      	mov	r6, r2
 800a43a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a43e:	fb03 5711 	mls	r7, r3, r1, r5
 800a442:	5dc7      	ldrb	r7, [r0, r7]
 800a444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a448:	462f      	mov	r7, r5
 800a44a:	42bb      	cmp	r3, r7
 800a44c:	460d      	mov	r5, r1
 800a44e:	d9f4      	bls.n	800a43a <_printf_i+0x112>
 800a450:	2b08      	cmp	r3, #8
 800a452:	d10b      	bne.n	800a46c <_printf_i+0x144>
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	07df      	lsls	r7, r3, #31
 800a458:	d508      	bpl.n	800a46c <_printf_i+0x144>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	6861      	ldr	r1, [r4, #4]
 800a45e:	4299      	cmp	r1, r3
 800a460:	bfde      	ittt	le
 800a462:	2330      	movle	r3, #48	@ 0x30
 800a464:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a468:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a46c:	1b92      	subs	r2, r2, r6
 800a46e:	6122      	str	r2, [r4, #16]
 800a470:	f8cd a000 	str.w	sl, [sp]
 800a474:	464b      	mov	r3, r9
 800a476:	aa03      	add	r2, sp, #12
 800a478:	4621      	mov	r1, r4
 800a47a:	4640      	mov	r0, r8
 800a47c:	f7ff fee6 	bl	800a24c <_printf_common>
 800a480:	3001      	adds	r0, #1
 800a482:	d14a      	bne.n	800a51a <_printf_i+0x1f2>
 800a484:	f04f 30ff 	mov.w	r0, #4294967295
 800a488:	b004      	add	sp, #16
 800a48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	f043 0320 	orr.w	r3, r3, #32
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	4833      	ldr	r0, [pc, #204]	@ (800a564 <_printf_i+0x23c>)
 800a498:	2778      	movs	r7, #120	@ 0x78
 800a49a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	6831      	ldr	r1, [r6, #0]
 800a4a2:	061f      	lsls	r7, r3, #24
 800a4a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a4a8:	d402      	bmi.n	800a4b0 <_printf_i+0x188>
 800a4aa:	065f      	lsls	r7, r3, #25
 800a4ac:	bf48      	it	mi
 800a4ae:	b2ad      	uxthmi	r5, r5
 800a4b0:	6031      	str	r1, [r6, #0]
 800a4b2:	07d9      	lsls	r1, r3, #31
 800a4b4:	bf44      	itt	mi
 800a4b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a4ba:	6023      	strmi	r3, [r4, #0]
 800a4bc:	b11d      	cbz	r5, 800a4c6 <_printf_i+0x19e>
 800a4be:	2310      	movs	r3, #16
 800a4c0:	e7ac      	b.n	800a41c <_printf_i+0xf4>
 800a4c2:	4827      	ldr	r0, [pc, #156]	@ (800a560 <_printf_i+0x238>)
 800a4c4:	e7e9      	b.n	800a49a <_printf_i+0x172>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	f023 0320 	bic.w	r3, r3, #32
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	e7f6      	b.n	800a4be <_printf_i+0x196>
 800a4d0:	4616      	mov	r6, r2
 800a4d2:	e7bd      	b.n	800a450 <_printf_i+0x128>
 800a4d4:	6833      	ldr	r3, [r6, #0]
 800a4d6:	6825      	ldr	r5, [r4, #0]
 800a4d8:	6961      	ldr	r1, [r4, #20]
 800a4da:	1d18      	adds	r0, r3, #4
 800a4dc:	6030      	str	r0, [r6, #0]
 800a4de:	062e      	lsls	r6, r5, #24
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	d501      	bpl.n	800a4e8 <_printf_i+0x1c0>
 800a4e4:	6019      	str	r1, [r3, #0]
 800a4e6:	e002      	b.n	800a4ee <_printf_i+0x1c6>
 800a4e8:	0668      	lsls	r0, r5, #25
 800a4ea:	d5fb      	bpl.n	800a4e4 <_printf_i+0x1bc>
 800a4ec:	8019      	strh	r1, [r3, #0]
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	6123      	str	r3, [r4, #16]
 800a4f2:	4616      	mov	r6, r2
 800a4f4:	e7bc      	b.n	800a470 <_printf_i+0x148>
 800a4f6:	6833      	ldr	r3, [r6, #0]
 800a4f8:	1d1a      	adds	r2, r3, #4
 800a4fa:	6032      	str	r2, [r6, #0]
 800a4fc:	681e      	ldr	r6, [r3, #0]
 800a4fe:	6862      	ldr	r2, [r4, #4]
 800a500:	2100      	movs	r1, #0
 800a502:	4630      	mov	r0, r6
 800a504:	f7f5 fe8c 	bl	8000220 <memchr>
 800a508:	b108      	cbz	r0, 800a50e <_printf_i+0x1e6>
 800a50a:	1b80      	subs	r0, r0, r6
 800a50c:	6060      	str	r0, [r4, #4]
 800a50e:	6863      	ldr	r3, [r4, #4]
 800a510:	6123      	str	r3, [r4, #16]
 800a512:	2300      	movs	r3, #0
 800a514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a518:	e7aa      	b.n	800a470 <_printf_i+0x148>
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	4632      	mov	r2, r6
 800a51e:	4649      	mov	r1, r9
 800a520:	4640      	mov	r0, r8
 800a522:	47d0      	blx	sl
 800a524:	3001      	adds	r0, #1
 800a526:	d0ad      	beq.n	800a484 <_printf_i+0x15c>
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	079b      	lsls	r3, r3, #30
 800a52c:	d413      	bmi.n	800a556 <_printf_i+0x22e>
 800a52e:	68e0      	ldr	r0, [r4, #12]
 800a530:	9b03      	ldr	r3, [sp, #12]
 800a532:	4298      	cmp	r0, r3
 800a534:	bfb8      	it	lt
 800a536:	4618      	movlt	r0, r3
 800a538:	e7a6      	b.n	800a488 <_printf_i+0x160>
 800a53a:	2301      	movs	r3, #1
 800a53c:	4632      	mov	r2, r6
 800a53e:	4649      	mov	r1, r9
 800a540:	4640      	mov	r0, r8
 800a542:	47d0      	blx	sl
 800a544:	3001      	adds	r0, #1
 800a546:	d09d      	beq.n	800a484 <_printf_i+0x15c>
 800a548:	3501      	adds	r5, #1
 800a54a:	68e3      	ldr	r3, [r4, #12]
 800a54c:	9903      	ldr	r1, [sp, #12]
 800a54e:	1a5b      	subs	r3, r3, r1
 800a550:	42ab      	cmp	r3, r5
 800a552:	dcf2      	bgt.n	800a53a <_printf_i+0x212>
 800a554:	e7eb      	b.n	800a52e <_printf_i+0x206>
 800a556:	2500      	movs	r5, #0
 800a558:	f104 0619 	add.w	r6, r4, #25
 800a55c:	e7f5      	b.n	800a54a <_printf_i+0x222>
 800a55e:	bf00      	nop
 800a560:	0800e2e6 	.word	0x0800e2e6
 800a564:	0800e2f7 	.word	0x0800e2f7

0800a568 <_scanf_float>:
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	b087      	sub	sp, #28
 800a56e:	4617      	mov	r7, r2
 800a570:	9303      	str	r3, [sp, #12]
 800a572:	688b      	ldr	r3, [r1, #8]
 800a574:	1e5a      	subs	r2, r3, #1
 800a576:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a57a:	bf81      	itttt	hi
 800a57c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a580:	eb03 0b05 	addhi.w	fp, r3, r5
 800a584:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a588:	608b      	strhi	r3, [r1, #8]
 800a58a:	680b      	ldr	r3, [r1, #0]
 800a58c:	460a      	mov	r2, r1
 800a58e:	f04f 0500 	mov.w	r5, #0
 800a592:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a596:	f842 3b1c 	str.w	r3, [r2], #28
 800a59a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a59e:	4680      	mov	r8, r0
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	bf98      	it	ls
 800a5a4:	f04f 0b00 	movls.w	fp, #0
 800a5a8:	9201      	str	r2, [sp, #4]
 800a5aa:	4616      	mov	r6, r2
 800a5ac:	46aa      	mov	sl, r5
 800a5ae:	46a9      	mov	r9, r5
 800a5b0:	9502      	str	r5, [sp, #8]
 800a5b2:	68a2      	ldr	r2, [r4, #8]
 800a5b4:	b152      	cbz	r2, 800a5cc <_scanf_float+0x64>
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b4e      	cmp	r3, #78	@ 0x4e
 800a5bc:	d864      	bhi.n	800a688 <_scanf_float+0x120>
 800a5be:	2b40      	cmp	r3, #64	@ 0x40
 800a5c0:	d83c      	bhi.n	800a63c <_scanf_float+0xd4>
 800a5c2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a5c6:	b2c8      	uxtb	r0, r1
 800a5c8:	280e      	cmp	r0, #14
 800a5ca:	d93a      	bls.n	800a642 <_scanf_float+0xda>
 800a5cc:	f1b9 0f00 	cmp.w	r9, #0
 800a5d0:	d003      	beq.n	800a5da <_scanf_float+0x72>
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5de:	f1ba 0f01 	cmp.w	sl, #1
 800a5e2:	f200 8117 	bhi.w	800a814 <_scanf_float+0x2ac>
 800a5e6:	9b01      	ldr	r3, [sp, #4]
 800a5e8:	429e      	cmp	r6, r3
 800a5ea:	f200 8108 	bhi.w	800a7fe <_scanf_float+0x296>
 800a5ee:	2001      	movs	r0, #1
 800a5f0:	b007      	add	sp, #28
 800a5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a5fa:	2a0d      	cmp	r2, #13
 800a5fc:	d8e6      	bhi.n	800a5cc <_scanf_float+0x64>
 800a5fe:	a101      	add	r1, pc, #4	@ (adr r1, 800a604 <_scanf_float+0x9c>)
 800a600:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a604:	0800a74b 	.word	0x0800a74b
 800a608:	0800a5cd 	.word	0x0800a5cd
 800a60c:	0800a5cd 	.word	0x0800a5cd
 800a610:	0800a5cd 	.word	0x0800a5cd
 800a614:	0800a7ab 	.word	0x0800a7ab
 800a618:	0800a783 	.word	0x0800a783
 800a61c:	0800a5cd 	.word	0x0800a5cd
 800a620:	0800a5cd 	.word	0x0800a5cd
 800a624:	0800a759 	.word	0x0800a759
 800a628:	0800a5cd 	.word	0x0800a5cd
 800a62c:	0800a5cd 	.word	0x0800a5cd
 800a630:	0800a5cd 	.word	0x0800a5cd
 800a634:	0800a5cd 	.word	0x0800a5cd
 800a638:	0800a711 	.word	0x0800a711
 800a63c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a640:	e7db      	b.n	800a5fa <_scanf_float+0x92>
 800a642:	290e      	cmp	r1, #14
 800a644:	d8c2      	bhi.n	800a5cc <_scanf_float+0x64>
 800a646:	a001      	add	r0, pc, #4	@ (adr r0, 800a64c <_scanf_float+0xe4>)
 800a648:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a64c:	0800a701 	.word	0x0800a701
 800a650:	0800a5cd 	.word	0x0800a5cd
 800a654:	0800a701 	.word	0x0800a701
 800a658:	0800a797 	.word	0x0800a797
 800a65c:	0800a5cd 	.word	0x0800a5cd
 800a660:	0800a6a9 	.word	0x0800a6a9
 800a664:	0800a6e7 	.word	0x0800a6e7
 800a668:	0800a6e7 	.word	0x0800a6e7
 800a66c:	0800a6e7 	.word	0x0800a6e7
 800a670:	0800a6e7 	.word	0x0800a6e7
 800a674:	0800a6e7 	.word	0x0800a6e7
 800a678:	0800a6e7 	.word	0x0800a6e7
 800a67c:	0800a6e7 	.word	0x0800a6e7
 800a680:	0800a6e7 	.word	0x0800a6e7
 800a684:	0800a6e7 	.word	0x0800a6e7
 800a688:	2b6e      	cmp	r3, #110	@ 0x6e
 800a68a:	d809      	bhi.n	800a6a0 <_scanf_float+0x138>
 800a68c:	2b60      	cmp	r3, #96	@ 0x60
 800a68e:	d8b2      	bhi.n	800a5f6 <_scanf_float+0x8e>
 800a690:	2b54      	cmp	r3, #84	@ 0x54
 800a692:	d07b      	beq.n	800a78c <_scanf_float+0x224>
 800a694:	2b59      	cmp	r3, #89	@ 0x59
 800a696:	d199      	bne.n	800a5cc <_scanf_float+0x64>
 800a698:	2d07      	cmp	r5, #7
 800a69a:	d197      	bne.n	800a5cc <_scanf_float+0x64>
 800a69c:	2508      	movs	r5, #8
 800a69e:	e02c      	b.n	800a6fa <_scanf_float+0x192>
 800a6a0:	2b74      	cmp	r3, #116	@ 0x74
 800a6a2:	d073      	beq.n	800a78c <_scanf_float+0x224>
 800a6a4:	2b79      	cmp	r3, #121	@ 0x79
 800a6a6:	e7f6      	b.n	800a696 <_scanf_float+0x12e>
 800a6a8:	6821      	ldr	r1, [r4, #0]
 800a6aa:	05c8      	lsls	r0, r1, #23
 800a6ac:	d51b      	bpl.n	800a6e6 <_scanf_float+0x17e>
 800a6ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a6b2:	6021      	str	r1, [r4, #0]
 800a6b4:	f109 0901 	add.w	r9, r9, #1
 800a6b8:	f1bb 0f00 	cmp.w	fp, #0
 800a6bc:	d003      	beq.n	800a6c6 <_scanf_float+0x15e>
 800a6be:	3201      	adds	r2, #1
 800a6c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6c4:	60a2      	str	r2, [r4, #8]
 800a6c6:	68a3      	ldr	r3, [r4, #8]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	60a3      	str	r3, [r4, #8]
 800a6cc:	6923      	ldr	r3, [r4, #16]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	607b      	str	r3, [r7, #4]
 800a6da:	f340 8087 	ble.w	800a7ec <_scanf_float+0x284>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	603b      	str	r3, [r7, #0]
 800a6e4:	e765      	b.n	800a5b2 <_scanf_float+0x4a>
 800a6e6:	eb1a 0105 	adds.w	r1, sl, r5
 800a6ea:	f47f af6f 	bne.w	800a5cc <_scanf_float+0x64>
 800a6ee:	6822      	ldr	r2, [r4, #0]
 800a6f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a6f4:	6022      	str	r2, [r4, #0]
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	468a      	mov	sl, r1
 800a6fa:	f806 3b01 	strb.w	r3, [r6], #1
 800a6fe:	e7e2      	b.n	800a6c6 <_scanf_float+0x15e>
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	0610      	lsls	r0, r2, #24
 800a704:	f57f af62 	bpl.w	800a5cc <_scanf_float+0x64>
 800a708:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a70c:	6022      	str	r2, [r4, #0]
 800a70e:	e7f4      	b.n	800a6fa <_scanf_float+0x192>
 800a710:	f1ba 0f00 	cmp.w	sl, #0
 800a714:	d10e      	bne.n	800a734 <_scanf_float+0x1cc>
 800a716:	f1b9 0f00 	cmp.w	r9, #0
 800a71a:	d10e      	bne.n	800a73a <_scanf_float+0x1d2>
 800a71c:	6822      	ldr	r2, [r4, #0]
 800a71e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a722:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a726:	d108      	bne.n	800a73a <_scanf_float+0x1d2>
 800a728:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a72c:	6022      	str	r2, [r4, #0]
 800a72e:	f04f 0a01 	mov.w	sl, #1
 800a732:	e7e2      	b.n	800a6fa <_scanf_float+0x192>
 800a734:	f1ba 0f02 	cmp.w	sl, #2
 800a738:	d055      	beq.n	800a7e6 <_scanf_float+0x27e>
 800a73a:	2d01      	cmp	r5, #1
 800a73c:	d002      	beq.n	800a744 <_scanf_float+0x1dc>
 800a73e:	2d04      	cmp	r5, #4
 800a740:	f47f af44 	bne.w	800a5cc <_scanf_float+0x64>
 800a744:	3501      	adds	r5, #1
 800a746:	b2ed      	uxtb	r5, r5
 800a748:	e7d7      	b.n	800a6fa <_scanf_float+0x192>
 800a74a:	f1ba 0f01 	cmp.w	sl, #1
 800a74e:	f47f af3d 	bne.w	800a5cc <_scanf_float+0x64>
 800a752:	f04f 0a02 	mov.w	sl, #2
 800a756:	e7d0      	b.n	800a6fa <_scanf_float+0x192>
 800a758:	b97d      	cbnz	r5, 800a77a <_scanf_float+0x212>
 800a75a:	f1b9 0f00 	cmp.w	r9, #0
 800a75e:	f47f af38 	bne.w	800a5d2 <_scanf_float+0x6a>
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a768:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a76c:	f040 8108 	bne.w	800a980 <_scanf_float+0x418>
 800a770:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a774:	6022      	str	r2, [r4, #0]
 800a776:	2501      	movs	r5, #1
 800a778:	e7bf      	b.n	800a6fa <_scanf_float+0x192>
 800a77a:	2d03      	cmp	r5, #3
 800a77c:	d0e2      	beq.n	800a744 <_scanf_float+0x1dc>
 800a77e:	2d05      	cmp	r5, #5
 800a780:	e7de      	b.n	800a740 <_scanf_float+0x1d8>
 800a782:	2d02      	cmp	r5, #2
 800a784:	f47f af22 	bne.w	800a5cc <_scanf_float+0x64>
 800a788:	2503      	movs	r5, #3
 800a78a:	e7b6      	b.n	800a6fa <_scanf_float+0x192>
 800a78c:	2d06      	cmp	r5, #6
 800a78e:	f47f af1d 	bne.w	800a5cc <_scanf_float+0x64>
 800a792:	2507      	movs	r5, #7
 800a794:	e7b1      	b.n	800a6fa <_scanf_float+0x192>
 800a796:	6822      	ldr	r2, [r4, #0]
 800a798:	0591      	lsls	r1, r2, #22
 800a79a:	f57f af17 	bpl.w	800a5cc <_scanf_float+0x64>
 800a79e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a7a2:	6022      	str	r2, [r4, #0]
 800a7a4:	f8cd 9008 	str.w	r9, [sp, #8]
 800a7a8:	e7a7      	b.n	800a6fa <_scanf_float+0x192>
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a7b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a7b4:	d006      	beq.n	800a7c4 <_scanf_float+0x25c>
 800a7b6:	0550      	lsls	r0, r2, #21
 800a7b8:	f57f af08 	bpl.w	800a5cc <_scanf_float+0x64>
 800a7bc:	f1b9 0f00 	cmp.w	r9, #0
 800a7c0:	f000 80de 	beq.w	800a980 <_scanf_float+0x418>
 800a7c4:	0591      	lsls	r1, r2, #22
 800a7c6:	bf58      	it	pl
 800a7c8:	9902      	ldrpl	r1, [sp, #8]
 800a7ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7ce:	bf58      	it	pl
 800a7d0:	eba9 0101 	subpl.w	r1, r9, r1
 800a7d4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a7d8:	bf58      	it	pl
 800a7da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	f04f 0900 	mov.w	r9, #0
 800a7e4:	e789      	b.n	800a6fa <_scanf_float+0x192>
 800a7e6:	f04f 0a03 	mov.w	sl, #3
 800a7ea:	e786      	b.n	800a6fa <_scanf_float+0x192>
 800a7ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	4798      	blx	r3
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	f43f aedb 	beq.w	800a5b2 <_scanf_float+0x4a>
 800a7fc:	e6e6      	b.n	800a5cc <_scanf_float+0x64>
 800a7fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a802:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a806:	463a      	mov	r2, r7
 800a808:	4640      	mov	r0, r8
 800a80a:	4798      	blx	r3
 800a80c:	6923      	ldr	r3, [r4, #16]
 800a80e:	3b01      	subs	r3, #1
 800a810:	6123      	str	r3, [r4, #16]
 800a812:	e6e8      	b.n	800a5e6 <_scanf_float+0x7e>
 800a814:	1e6b      	subs	r3, r5, #1
 800a816:	2b06      	cmp	r3, #6
 800a818:	d824      	bhi.n	800a864 <_scanf_float+0x2fc>
 800a81a:	2d02      	cmp	r5, #2
 800a81c:	d836      	bhi.n	800a88c <_scanf_float+0x324>
 800a81e:	9b01      	ldr	r3, [sp, #4]
 800a820:	429e      	cmp	r6, r3
 800a822:	f67f aee4 	bls.w	800a5ee <_scanf_float+0x86>
 800a826:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a82a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a82e:	463a      	mov	r2, r7
 800a830:	4640      	mov	r0, r8
 800a832:	4798      	blx	r3
 800a834:	6923      	ldr	r3, [r4, #16]
 800a836:	3b01      	subs	r3, #1
 800a838:	6123      	str	r3, [r4, #16]
 800a83a:	e7f0      	b.n	800a81e <_scanf_float+0x2b6>
 800a83c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a840:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a844:	463a      	mov	r2, r7
 800a846:	4640      	mov	r0, r8
 800a848:	4798      	blx	r3
 800a84a:	6923      	ldr	r3, [r4, #16]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	6123      	str	r3, [r4, #16]
 800a850:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a854:	fa5f fa8a 	uxtb.w	sl, sl
 800a858:	f1ba 0f02 	cmp.w	sl, #2
 800a85c:	d1ee      	bne.n	800a83c <_scanf_float+0x2d4>
 800a85e:	3d03      	subs	r5, #3
 800a860:	b2ed      	uxtb	r5, r5
 800a862:	1b76      	subs	r6, r6, r5
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	05da      	lsls	r2, r3, #23
 800a868:	d530      	bpl.n	800a8cc <_scanf_float+0x364>
 800a86a:	055b      	lsls	r3, r3, #21
 800a86c:	d511      	bpl.n	800a892 <_scanf_float+0x32a>
 800a86e:	9b01      	ldr	r3, [sp, #4]
 800a870:	429e      	cmp	r6, r3
 800a872:	f67f aebc 	bls.w	800a5ee <_scanf_float+0x86>
 800a876:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a87a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a87e:	463a      	mov	r2, r7
 800a880:	4640      	mov	r0, r8
 800a882:	4798      	blx	r3
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	3b01      	subs	r3, #1
 800a888:	6123      	str	r3, [r4, #16]
 800a88a:	e7f0      	b.n	800a86e <_scanf_float+0x306>
 800a88c:	46aa      	mov	sl, r5
 800a88e:	46b3      	mov	fp, r6
 800a890:	e7de      	b.n	800a850 <_scanf_float+0x2e8>
 800a892:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a896:	6923      	ldr	r3, [r4, #16]
 800a898:	2965      	cmp	r1, #101	@ 0x65
 800a89a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a89e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a8a2:	6123      	str	r3, [r4, #16]
 800a8a4:	d00c      	beq.n	800a8c0 <_scanf_float+0x358>
 800a8a6:	2945      	cmp	r1, #69	@ 0x45
 800a8a8:	d00a      	beq.n	800a8c0 <_scanf_float+0x358>
 800a8aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8ae:	463a      	mov	r2, r7
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4798      	blx	r3
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	1eb5      	subs	r5, r6, #2
 800a8be:	6123      	str	r3, [r4, #16]
 800a8c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8c4:	463a      	mov	r2, r7
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	4798      	blx	r3
 800a8ca:	462e      	mov	r6, r5
 800a8cc:	6822      	ldr	r2, [r4, #0]
 800a8ce:	f012 0210 	ands.w	r2, r2, #16
 800a8d2:	d001      	beq.n	800a8d8 <_scanf_float+0x370>
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	e68b      	b.n	800a5f0 <_scanf_float+0x88>
 800a8d8:	7032      	strb	r2, [r6, #0]
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a8e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8e4:	d11c      	bne.n	800a920 <_scanf_float+0x3b8>
 800a8e6:	9b02      	ldr	r3, [sp, #8]
 800a8e8:	454b      	cmp	r3, r9
 800a8ea:	eba3 0209 	sub.w	r2, r3, r9
 800a8ee:	d123      	bne.n	800a938 <_scanf_float+0x3d0>
 800a8f0:	9901      	ldr	r1, [sp, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4640      	mov	r0, r8
 800a8f6:	f002 fbe3 	bl	800d0c0 <_strtod_r>
 800a8fa:	9b03      	ldr	r3, [sp, #12]
 800a8fc:	6821      	ldr	r1, [r4, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f011 0f02 	tst.w	r1, #2
 800a904:	ec57 6b10 	vmov	r6, r7, d0
 800a908:	f103 0204 	add.w	r2, r3, #4
 800a90c:	d01f      	beq.n	800a94e <_scanf_float+0x3e6>
 800a90e:	9903      	ldr	r1, [sp, #12]
 800a910:	600a      	str	r2, [r1, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	e9c3 6700 	strd	r6, r7, [r3]
 800a918:	68e3      	ldr	r3, [r4, #12]
 800a91a:	3301      	adds	r3, #1
 800a91c:	60e3      	str	r3, [r4, #12]
 800a91e:	e7d9      	b.n	800a8d4 <_scanf_float+0x36c>
 800a920:	9b04      	ldr	r3, [sp, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d0e4      	beq.n	800a8f0 <_scanf_float+0x388>
 800a926:	9905      	ldr	r1, [sp, #20]
 800a928:	230a      	movs	r3, #10
 800a92a:	3101      	adds	r1, #1
 800a92c:	4640      	mov	r0, r8
 800a92e:	f002 fc47 	bl	800d1c0 <_strtol_r>
 800a932:	9b04      	ldr	r3, [sp, #16]
 800a934:	9e05      	ldr	r6, [sp, #20]
 800a936:	1ac2      	subs	r2, r0, r3
 800a938:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a93c:	429e      	cmp	r6, r3
 800a93e:	bf28      	it	cs
 800a940:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a944:	4910      	ldr	r1, [pc, #64]	@ (800a988 <_scanf_float+0x420>)
 800a946:	4630      	mov	r0, r6
 800a948:	f000 f8f6 	bl	800ab38 <siprintf>
 800a94c:	e7d0      	b.n	800a8f0 <_scanf_float+0x388>
 800a94e:	f011 0f04 	tst.w	r1, #4
 800a952:	9903      	ldr	r1, [sp, #12]
 800a954:	600a      	str	r2, [r1, #0]
 800a956:	d1dc      	bne.n	800a912 <_scanf_float+0x3aa>
 800a958:	681d      	ldr	r5, [r3, #0]
 800a95a:	4632      	mov	r2, r6
 800a95c:	463b      	mov	r3, r7
 800a95e:	4630      	mov	r0, r6
 800a960:	4639      	mov	r1, r7
 800a962:	f7f6 f90b 	bl	8000b7c <__aeabi_dcmpun>
 800a966:	b128      	cbz	r0, 800a974 <_scanf_float+0x40c>
 800a968:	4808      	ldr	r0, [pc, #32]	@ (800a98c <_scanf_float+0x424>)
 800a96a:	f000 fa57 	bl	800ae1c <nanf>
 800a96e:	ed85 0a00 	vstr	s0, [r5]
 800a972:	e7d1      	b.n	800a918 <_scanf_float+0x3b0>
 800a974:	4630      	mov	r0, r6
 800a976:	4639      	mov	r1, r7
 800a978:	f7f6 f95e 	bl	8000c38 <__aeabi_d2f>
 800a97c:	6028      	str	r0, [r5, #0]
 800a97e:	e7cb      	b.n	800a918 <_scanf_float+0x3b0>
 800a980:	f04f 0900 	mov.w	r9, #0
 800a984:	e629      	b.n	800a5da <_scanf_float+0x72>
 800a986:	bf00      	nop
 800a988:	0800e308 	.word	0x0800e308
 800a98c:	0800e2d3 	.word	0x0800e2d3

0800a990 <std>:
 800a990:	2300      	movs	r3, #0
 800a992:	b510      	push	{r4, lr}
 800a994:	4604      	mov	r4, r0
 800a996:	e9c0 3300 	strd	r3, r3, [r0]
 800a99a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a99e:	6083      	str	r3, [r0, #8]
 800a9a0:	8181      	strh	r1, [r0, #12]
 800a9a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9a4:	81c2      	strh	r2, [r0, #14]
 800a9a6:	6183      	str	r3, [r0, #24]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	2208      	movs	r2, #8
 800a9ac:	305c      	adds	r0, #92	@ 0x5c
 800a9ae:	f000 f940 	bl	800ac32 <memset>
 800a9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e8 <std+0x58>)
 800a9b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9ec <std+0x5c>)
 800a9b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f0 <std+0x60>)
 800a9bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9be:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f4 <std+0x64>)
 800a9c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f8 <std+0x68>)
 800a9c4:	6224      	str	r4, [r4, #32]
 800a9c6:	429c      	cmp	r4, r3
 800a9c8:	d006      	beq.n	800a9d8 <std+0x48>
 800a9ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9ce:	4294      	cmp	r4, r2
 800a9d0:	d002      	beq.n	800a9d8 <std+0x48>
 800a9d2:	33d0      	adds	r3, #208	@ 0xd0
 800a9d4:	429c      	cmp	r4, r3
 800a9d6:	d105      	bne.n	800a9e4 <std+0x54>
 800a9d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e0:	f000 ba0a 	b.w	800adf8 <__retarget_lock_init_recursive>
 800a9e4:	bd10      	pop	{r4, pc}
 800a9e6:	bf00      	nop
 800a9e8:	0800ab79 	.word	0x0800ab79
 800a9ec:	0800ab9b 	.word	0x0800ab9b
 800a9f0:	0800abd3 	.word	0x0800abd3
 800a9f4:	0800abf7 	.word	0x0800abf7
 800a9f8:	20000680 	.word	0x20000680

0800a9fc <stdio_exit_handler>:
 800a9fc:	4a02      	ldr	r2, [pc, #8]	@ (800aa08 <stdio_exit_handler+0xc>)
 800a9fe:	4903      	ldr	r1, [pc, #12]	@ (800aa0c <stdio_exit_handler+0x10>)
 800aa00:	4803      	ldr	r0, [pc, #12]	@ (800aa10 <stdio_exit_handler+0x14>)
 800aa02:	f000 b87b 	b.w	800aafc <_fwalk_sglue>
 800aa06:	bf00      	nop
 800aa08:	20000010 	.word	0x20000010
 800aa0c:	0800d801 	.word	0x0800d801
 800aa10:	20000020 	.word	0x20000020

0800aa14 <cleanup_stdio>:
 800aa14:	6841      	ldr	r1, [r0, #4]
 800aa16:	4b0c      	ldr	r3, [pc, #48]	@ (800aa48 <cleanup_stdio+0x34>)
 800aa18:	4299      	cmp	r1, r3
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	d001      	beq.n	800aa24 <cleanup_stdio+0x10>
 800aa20:	f002 feee 	bl	800d800 <_fflush_r>
 800aa24:	68a1      	ldr	r1, [r4, #8]
 800aa26:	4b09      	ldr	r3, [pc, #36]	@ (800aa4c <cleanup_stdio+0x38>)
 800aa28:	4299      	cmp	r1, r3
 800aa2a:	d002      	beq.n	800aa32 <cleanup_stdio+0x1e>
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f002 fee7 	bl	800d800 <_fflush_r>
 800aa32:	68e1      	ldr	r1, [r4, #12]
 800aa34:	4b06      	ldr	r3, [pc, #24]	@ (800aa50 <cleanup_stdio+0x3c>)
 800aa36:	4299      	cmp	r1, r3
 800aa38:	d004      	beq.n	800aa44 <cleanup_stdio+0x30>
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa40:	f002 bede 	b.w	800d800 <_fflush_r>
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	bf00      	nop
 800aa48:	20000680 	.word	0x20000680
 800aa4c:	200006e8 	.word	0x200006e8
 800aa50:	20000750 	.word	0x20000750

0800aa54 <global_stdio_init.part.0>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	4b0b      	ldr	r3, [pc, #44]	@ (800aa84 <global_stdio_init.part.0+0x30>)
 800aa58:	4c0b      	ldr	r4, [pc, #44]	@ (800aa88 <global_stdio_init.part.0+0x34>)
 800aa5a:	4a0c      	ldr	r2, [pc, #48]	@ (800aa8c <global_stdio_init.part.0+0x38>)
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	2200      	movs	r2, #0
 800aa62:	2104      	movs	r1, #4
 800aa64:	f7ff ff94 	bl	800a990 <std>
 800aa68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	2109      	movs	r1, #9
 800aa70:	f7ff ff8e 	bl	800a990 <std>
 800aa74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa78:	2202      	movs	r2, #2
 800aa7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa7e:	2112      	movs	r1, #18
 800aa80:	f7ff bf86 	b.w	800a990 <std>
 800aa84:	200007b8 	.word	0x200007b8
 800aa88:	20000680 	.word	0x20000680
 800aa8c:	0800a9fd 	.word	0x0800a9fd

0800aa90 <__sfp_lock_acquire>:
 800aa90:	4801      	ldr	r0, [pc, #4]	@ (800aa98 <__sfp_lock_acquire+0x8>)
 800aa92:	f000 b9b2 	b.w	800adfa <__retarget_lock_acquire_recursive>
 800aa96:	bf00      	nop
 800aa98:	200007c1 	.word	0x200007c1

0800aa9c <__sfp_lock_release>:
 800aa9c:	4801      	ldr	r0, [pc, #4]	@ (800aaa4 <__sfp_lock_release+0x8>)
 800aa9e:	f000 b9ad 	b.w	800adfc <__retarget_lock_release_recursive>
 800aaa2:	bf00      	nop
 800aaa4:	200007c1 	.word	0x200007c1

0800aaa8 <__sinit>:
 800aaa8:	b510      	push	{r4, lr}
 800aaaa:	4604      	mov	r4, r0
 800aaac:	f7ff fff0 	bl	800aa90 <__sfp_lock_acquire>
 800aab0:	6a23      	ldr	r3, [r4, #32]
 800aab2:	b11b      	cbz	r3, 800aabc <__sinit+0x14>
 800aab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aab8:	f7ff bff0 	b.w	800aa9c <__sfp_lock_release>
 800aabc:	4b04      	ldr	r3, [pc, #16]	@ (800aad0 <__sinit+0x28>)
 800aabe:	6223      	str	r3, [r4, #32]
 800aac0:	4b04      	ldr	r3, [pc, #16]	@ (800aad4 <__sinit+0x2c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1f5      	bne.n	800aab4 <__sinit+0xc>
 800aac8:	f7ff ffc4 	bl	800aa54 <global_stdio_init.part.0>
 800aacc:	e7f2      	b.n	800aab4 <__sinit+0xc>
 800aace:	bf00      	nop
 800aad0:	0800aa15 	.word	0x0800aa15
 800aad4:	200007b8 	.word	0x200007b8

0800aad8 <fiprintf>:
 800aad8:	b40e      	push	{r1, r2, r3}
 800aada:	b503      	push	{r0, r1, lr}
 800aadc:	4601      	mov	r1, r0
 800aade:	ab03      	add	r3, sp, #12
 800aae0:	4805      	ldr	r0, [pc, #20]	@ (800aaf8 <fiprintf+0x20>)
 800aae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae6:	6800      	ldr	r0, [r0, #0]
 800aae8:	9301      	str	r3, [sp, #4]
 800aaea:	f002 fced 	bl	800d4c8 <_vfiprintf_r>
 800aaee:	b002      	add	sp, #8
 800aaf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaf4:	b003      	add	sp, #12
 800aaf6:	4770      	bx	lr
 800aaf8:	2000001c 	.word	0x2000001c

0800aafc <_fwalk_sglue>:
 800aafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	4607      	mov	r7, r0
 800ab02:	4688      	mov	r8, r1
 800ab04:	4614      	mov	r4, r2
 800ab06:	2600      	movs	r6, #0
 800ab08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ab10:	d505      	bpl.n	800ab1e <_fwalk_sglue+0x22>
 800ab12:	6824      	ldr	r4, [r4, #0]
 800ab14:	2c00      	cmp	r4, #0
 800ab16:	d1f7      	bne.n	800ab08 <_fwalk_sglue+0xc>
 800ab18:	4630      	mov	r0, r6
 800ab1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1e:	89ab      	ldrh	r3, [r5, #12]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d907      	bls.n	800ab34 <_fwalk_sglue+0x38>
 800ab24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	d003      	beq.n	800ab34 <_fwalk_sglue+0x38>
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4638      	mov	r0, r7
 800ab30:	47c0      	blx	r8
 800ab32:	4306      	orrs	r6, r0
 800ab34:	3568      	adds	r5, #104	@ 0x68
 800ab36:	e7e9      	b.n	800ab0c <_fwalk_sglue+0x10>

0800ab38 <siprintf>:
 800ab38:	b40e      	push	{r1, r2, r3}
 800ab3a:	b500      	push	{lr}
 800ab3c:	b09c      	sub	sp, #112	@ 0x70
 800ab3e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab40:	9002      	str	r0, [sp, #8]
 800ab42:	9006      	str	r0, [sp, #24]
 800ab44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab48:	4809      	ldr	r0, [pc, #36]	@ (800ab70 <siprintf+0x38>)
 800ab4a:	9107      	str	r1, [sp, #28]
 800ab4c:	9104      	str	r1, [sp, #16]
 800ab4e:	4909      	ldr	r1, [pc, #36]	@ (800ab74 <siprintf+0x3c>)
 800ab50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab54:	9105      	str	r1, [sp, #20]
 800ab56:	6800      	ldr	r0, [r0, #0]
 800ab58:	9301      	str	r3, [sp, #4]
 800ab5a:	a902      	add	r1, sp, #8
 800ab5c:	f002 fb8e 	bl	800d27c <_svfiprintf_r>
 800ab60:	9b02      	ldr	r3, [sp, #8]
 800ab62:	2200      	movs	r2, #0
 800ab64:	701a      	strb	r2, [r3, #0]
 800ab66:	b01c      	add	sp, #112	@ 0x70
 800ab68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab6c:	b003      	add	sp, #12
 800ab6e:	4770      	bx	lr
 800ab70:	2000001c 	.word	0x2000001c
 800ab74:	ffff0208 	.word	0xffff0208

0800ab78 <__sread>:
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab80:	f000 f8c8 	bl	800ad14 <_read_r>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	bfab      	itete	ge
 800ab88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab8c:	181b      	addge	r3, r3, r0
 800ab8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab92:	bfac      	ite	ge
 800ab94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab96:	81a3      	strhlt	r3, [r4, #12]
 800ab98:	bd10      	pop	{r4, pc}

0800ab9a <__swrite>:
 800ab9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9e:	461f      	mov	r7, r3
 800aba0:	898b      	ldrh	r3, [r1, #12]
 800aba2:	05db      	lsls	r3, r3, #23
 800aba4:	4605      	mov	r5, r0
 800aba6:	460c      	mov	r4, r1
 800aba8:	4616      	mov	r6, r2
 800abaa:	d505      	bpl.n	800abb8 <__swrite+0x1e>
 800abac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb0:	2302      	movs	r3, #2
 800abb2:	2200      	movs	r2, #0
 800abb4:	f000 f89c 	bl	800acf0 <_lseek_r>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abc2:	81a3      	strh	r3, [r4, #12]
 800abc4:	4632      	mov	r2, r6
 800abc6:	463b      	mov	r3, r7
 800abc8:	4628      	mov	r0, r5
 800abca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abce:	f000 b8d7 	b.w	800ad80 <_write_r>

0800abd2 <__sseek>:
 800abd2:	b510      	push	{r4, lr}
 800abd4:	460c      	mov	r4, r1
 800abd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abda:	f000 f889 	bl	800acf0 <_lseek_r>
 800abde:	1c43      	adds	r3, r0, #1
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	bf15      	itete	ne
 800abe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abee:	81a3      	strheq	r3, [r4, #12]
 800abf0:	bf18      	it	ne
 800abf2:	81a3      	strhne	r3, [r4, #12]
 800abf4:	bd10      	pop	{r4, pc}

0800abf6 <__sclose>:
 800abf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abfa:	f000 b869 	b.w	800acd0 <_close_r>

0800abfe <memmove>:
 800abfe:	4288      	cmp	r0, r1
 800ac00:	b510      	push	{r4, lr}
 800ac02:	eb01 0402 	add.w	r4, r1, r2
 800ac06:	d902      	bls.n	800ac0e <memmove+0x10>
 800ac08:	4284      	cmp	r4, r0
 800ac0a:	4623      	mov	r3, r4
 800ac0c:	d807      	bhi.n	800ac1e <memmove+0x20>
 800ac0e:	1e43      	subs	r3, r0, #1
 800ac10:	42a1      	cmp	r1, r4
 800ac12:	d008      	beq.n	800ac26 <memmove+0x28>
 800ac14:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac18:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac1c:	e7f8      	b.n	800ac10 <memmove+0x12>
 800ac1e:	4402      	add	r2, r0
 800ac20:	4601      	mov	r1, r0
 800ac22:	428a      	cmp	r2, r1
 800ac24:	d100      	bne.n	800ac28 <memmove+0x2a>
 800ac26:	bd10      	pop	{r4, pc}
 800ac28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac30:	e7f7      	b.n	800ac22 <memmove+0x24>

0800ac32 <memset>:
 800ac32:	4402      	add	r2, r0
 800ac34:	4603      	mov	r3, r0
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d100      	bne.n	800ac3c <memset+0xa>
 800ac3a:	4770      	bx	lr
 800ac3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ac40:	e7f9      	b.n	800ac36 <memset+0x4>

0800ac42 <strncpy>:
 800ac42:	b510      	push	{r4, lr}
 800ac44:	3901      	subs	r1, #1
 800ac46:	4603      	mov	r3, r0
 800ac48:	b132      	cbz	r2, 800ac58 <strncpy+0x16>
 800ac4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ac4e:	f803 4b01 	strb.w	r4, [r3], #1
 800ac52:	3a01      	subs	r2, #1
 800ac54:	2c00      	cmp	r4, #0
 800ac56:	d1f7      	bne.n	800ac48 <strncpy+0x6>
 800ac58:	441a      	add	r2, r3
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d100      	bne.n	800ac62 <strncpy+0x20>
 800ac60:	bd10      	pop	{r4, pc}
 800ac62:	f803 1b01 	strb.w	r1, [r3], #1
 800ac66:	e7f9      	b.n	800ac5c <strncpy+0x1a>

0800ac68 <_raise_r>:
 800ac68:	291f      	cmp	r1, #31
 800ac6a:	b538      	push	{r3, r4, r5, lr}
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	460c      	mov	r4, r1
 800ac70:	d904      	bls.n	800ac7c <_raise_r+0x14>
 800ac72:	2316      	movs	r3, #22
 800ac74:	6003      	str	r3, [r0, #0]
 800ac76:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac7e:	b112      	cbz	r2, 800ac86 <_raise_r+0x1e>
 800ac80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac84:	b94b      	cbnz	r3, 800ac9a <_raise_r+0x32>
 800ac86:	4628      	mov	r0, r5
 800ac88:	f000 f868 	bl	800ad5c <_getpid_r>
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	4601      	mov	r1, r0
 800ac90:	4628      	mov	r0, r5
 800ac92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac96:	f000 b84f 	b.w	800ad38 <_kill_r>
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d00a      	beq.n	800acb4 <_raise_r+0x4c>
 800ac9e:	1c59      	adds	r1, r3, #1
 800aca0:	d103      	bne.n	800acaa <_raise_r+0x42>
 800aca2:	2316      	movs	r3, #22
 800aca4:	6003      	str	r3, [r0, #0]
 800aca6:	2001      	movs	r0, #1
 800aca8:	e7e7      	b.n	800ac7a <_raise_r+0x12>
 800acaa:	2100      	movs	r1, #0
 800acac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800acb0:	4620      	mov	r0, r4
 800acb2:	4798      	blx	r3
 800acb4:	2000      	movs	r0, #0
 800acb6:	e7e0      	b.n	800ac7a <_raise_r+0x12>

0800acb8 <raise>:
 800acb8:	4b02      	ldr	r3, [pc, #8]	@ (800acc4 <raise+0xc>)
 800acba:	4601      	mov	r1, r0
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	f7ff bfd3 	b.w	800ac68 <_raise_r>
 800acc2:	bf00      	nop
 800acc4:	2000001c 	.word	0x2000001c

0800acc8 <_localeconv_r>:
 800acc8:	4800      	ldr	r0, [pc, #0]	@ (800accc <_localeconv_r+0x4>)
 800acca:	4770      	bx	lr
 800accc:	2000015c 	.word	0x2000015c

0800acd0 <_close_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d06      	ldr	r5, [pc, #24]	@ (800acec <_close_r+0x1c>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	f7f8 f9c4 	bl	8003068 <_close>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_close_r+0x1a>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_close_r+0x1a>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	200007bc 	.word	0x200007bc

0800acf0 <_lseek_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	@ (800ad10 <_lseek_r+0x20>)
 800acf4:	4604      	mov	r4, r0
 800acf6:	4608      	mov	r0, r1
 800acf8:	4611      	mov	r1, r2
 800acfa:	2200      	movs	r2, #0
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f7f8 f9d9 	bl	80030b6 <_lseek>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_lseek_r+0x1e>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_lseek_r+0x1e>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	200007bc 	.word	0x200007bc

0800ad14 <_read_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	@ (800ad34 <_read_r+0x20>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7f8 f967 	bl	8002ff6 <_read>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_read_r+0x1e>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_read_r+0x1e>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	200007bc 	.word	0x200007bc

0800ad38 <_kill_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d07      	ldr	r5, [pc, #28]	@ (800ad58 <_kill_r+0x20>)
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	4611      	mov	r1, r2
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	f7f8 f93b 	bl	8002fc0 <_kill>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d102      	bne.n	800ad54 <_kill_r+0x1c>
 800ad4e:	682b      	ldr	r3, [r5, #0]
 800ad50:	b103      	cbz	r3, 800ad54 <_kill_r+0x1c>
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	200007bc 	.word	0x200007bc

0800ad5c <_getpid_r>:
 800ad5c:	f7f8 b928 	b.w	8002fb0 <_getpid>

0800ad60 <_sbrk_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d06      	ldr	r5, [pc, #24]	@ (800ad7c <_sbrk_r+0x1c>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	f7f8 f9b0 	bl	80030d0 <_sbrk>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_sbrk_r+0x1a>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_sbrk_r+0x1a>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	200007bc 	.word	0x200007bc

0800ad80 <_write_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d07      	ldr	r5, [pc, #28]	@ (800ada0 <_write_r+0x20>)
 800ad84:	4604      	mov	r4, r0
 800ad86:	4608      	mov	r0, r1
 800ad88:	4611      	mov	r1, r2
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	602a      	str	r2, [r5, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f7f8 f94e 	bl	8003030 <_write>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_write_r+0x1e>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_write_r+0x1e>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	200007bc 	.word	0x200007bc

0800ada4 <__errno>:
 800ada4:	4b01      	ldr	r3, [pc, #4]	@ (800adac <__errno+0x8>)
 800ada6:	6818      	ldr	r0, [r3, #0]
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	2000001c 	.word	0x2000001c

0800adb0 <__libc_init_array>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	4d0d      	ldr	r5, [pc, #52]	@ (800ade8 <__libc_init_array+0x38>)
 800adb4:	4c0d      	ldr	r4, [pc, #52]	@ (800adec <__libc_init_array+0x3c>)
 800adb6:	1b64      	subs	r4, r4, r5
 800adb8:	10a4      	asrs	r4, r4, #2
 800adba:	2600      	movs	r6, #0
 800adbc:	42a6      	cmp	r6, r4
 800adbe:	d109      	bne.n	800add4 <__libc_init_array+0x24>
 800adc0:	4d0b      	ldr	r5, [pc, #44]	@ (800adf0 <__libc_init_array+0x40>)
 800adc2:	4c0c      	ldr	r4, [pc, #48]	@ (800adf4 <__libc_init_array+0x44>)
 800adc4:	f003 fa1a 	bl	800e1fc <_init>
 800adc8:	1b64      	subs	r4, r4, r5
 800adca:	10a4      	asrs	r4, r4, #2
 800adcc:	2600      	movs	r6, #0
 800adce:	42a6      	cmp	r6, r4
 800add0:	d105      	bne.n	800adde <__libc_init_array+0x2e>
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	f855 3b04 	ldr.w	r3, [r5], #4
 800add8:	4798      	blx	r3
 800adda:	3601      	adds	r6, #1
 800addc:	e7ee      	b.n	800adbc <__libc_init_array+0xc>
 800adde:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade2:	4798      	blx	r3
 800ade4:	3601      	adds	r6, #1
 800ade6:	e7f2      	b.n	800adce <__libc_init_array+0x1e>
 800ade8:	0800e6cc 	.word	0x0800e6cc
 800adec:	0800e6cc 	.word	0x0800e6cc
 800adf0:	0800e6cc 	.word	0x0800e6cc
 800adf4:	0800e6e0 	.word	0x0800e6e0

0800adf8 <__retarget_lock_init_recursive>:
 800adf8:	4770      	bx	lr

0800adfa <__retarget_lock_acquire_recursive>:
 800adfa:	4770      	bx	lr

0800adfc <__retarget_lock_release_recursive>:
 800adfc:	4770      	bx	lr

0800adfe <memcpy>:
 800adfe:	440a      	add	r2, r1
 800ae00:	4291      	cmp	r1, r2
 800ae02:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae06:	d100      	bne.n	800ae0a <memcpy+0xc>
 800ae08:	4770      	bx	lr
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae14:	4291      	cmp	r1, r2
 800ae16:	d1f9      	bne.n	800ae0c <memcpy+0xe>
 800ae18:	bd10      	pop	{r4, pc}
	...

0800ae1c <nanf>:
 800ae1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ae24 <nanf+0x8>
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	7fc00000 	.word	0x7fc00000

0800ae28 <quorem>:
 800ae28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	6903      	ldr	r3, [r0, #16]
 800ae2e:	690c      	ldr	r4, [r1, #16]
 800ae30:	42a3      	cmp	r3, r4
 800ae32:	4607      	mov	r7, r0
 800ae34:	db7e      	blt.n	800af34 <quorem+0x10c>
 800ae36:	3c01      	subs	r4, #1
 800ae38:	f101 0814 	add.w	r8, r1, #20
 800ae3c:	00a3      	lsls	r3, r4, #2
 800ae3e:	f100 0514 	add.w	r5, r0, #20
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae52:	3301      	adds	r3, #1
 800ae54:	429a      	cmp	r2, r3
 800ae56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae5a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae5e:	d32e      	bcc.n	800aebe <quorem+0x96>
 800ae60:	f04f 0a00 	mov.w	sl, #0
 800ae64:	46c4      	mov	ip, r8
 800ae66:	46ae      	mov	lr, r5
 800ae68:	46d3      	mov	fp, sl
 800ae6a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae6e:	b298      	uxth	r0, r3
 800ae70:	fb06 a000 	mla	r0, r6, r0, sl
 800ae74:	0c02      	lsrs	r2, r0, #16
 800ae76:	0c1b      	lsrs	r3, r3, #16
 800ae78:	fb06 2303 	mla	r3, r6, r3, r2
 800ae7c:	f8de 2000 	ldr.w	r2, [lr]
 800ae80:	b280      	uxth	r0, r0
 800ae82:	b292      	uxth	r2, r2
 800ae84:	1a12      	subs	r2, r2, r0
 800ae86:	445a      	add	r2, fp
 800ae88:	f8de 0000 	ldr.w	r0, [lr]
 800ae8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ae96:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aea0:	45e1      	cmp	r9, ip
 800aea2:	f84e 2b04 	str.w	r2, [lr], #4
 800aea6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aeaa:	d2de      	bcs.n	800ae6a <quorem+0x42>
 800aeac:	9b00      	ldr	r3, [sp, #0]
 800aeae:	58eb      	ldr	r3, [r5, r3]
 800aeb0:	b92b      	cbnz	r3, 800aebe <quorem+0x96>
 800aeb2:	9b01      	ldr	r3, [sp, #4]
 800aeb4:	3b04      	subs	r3, #4
 800aeb6:	429d      	cmp	r5, r3
 800aeb8:	461a      	mov	r2, r3
 800aeba:	d32f      	bcc.n	800af1c <quorem+0xf4>
 800aebc:	613c      	str	r4, [r7, #16]
 800aebe:	4638      	mov	r0, r7
 800aec0:	f001 f90c 	bl	800c0dc <__mcmp>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	db25      	blt.n	800af14 <quorem+0xec>
 800aec8:	4629      	mov	r1, r5
 800aeca:	2000      	movs	r0, #0
 800aecc:	f858 2b04 	ldr.w	r2, [r8], #4
 800aed0:	f8d1 c000 	ldr.w	ip, [r1]
 800aed4:	fa1f fe82 	uxth.w	lr, r2
 800aed8:	fa1f f38c 	uxth.w	r3, ip
 800aedc:	eba3 030e 	sub.w	r3, r3, lr
 800aee0:	4403      	add	r3, r0
 800aee2:	0c12      	lsrs	r2, r2, #16
 800aee4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aee8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aef2:	45c1      	cmp	r9, r8
 800aef4:	f841 3b04 	str.w	r3, [r1], #4
 800aef8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aefc:	d2e6      	bcs.n	800aecc <quorem+0xa4>
 800aefe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af06:	b922      	cbnz	r2, 800af12 <quorem+0xea>
 800af08:	3b04      	subs	r3, #4
 800af0a:	429d      	cmp	r5, r3
 800af0c:	461a      	mov	r2, r3
 800af0e:	d30b      	bcc.n	800af28 <quorem+0x100>
 800af10:	613c      	str	r4, [r7, #16]
 800af12:	3601      	adds	r6, #1
 800af14:	4630      	mov	r0, r6
 800af16:	b003      	add	sp, #12
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	6812      	ldr	r2, [r2, #0]
 800af1e:	3b04      	subs	r3, #4
 800af20:	2a00      	cmp	r2, #0
 800af22:	d1cb      	bne.n	800aebc <quorem+0x94>
 800af24:	3c01      	subs	r4, #1
 800af26:	e7c6      	b.n	800aeb6 <quorem+0x8e>
 800af28:	6812      	ldr	r2, [r2, #0]
 800af2a:	3b04      	subs	r3, #4
 800af2c:	2a00      	cmp	r2, #0
 800af2e:	d1ef      	bne.n	800af10 <quorem+0xe8>
 800af30:	3c01      	subs	r4, #1
 800af32:	e7ea      	b.n	800af0a <quorem+0xe2>
 800af34:	2000      	movs	r0, #0
 800af36:	e7ee      	b.n	800af16 <quorem+0xee>

0800af38 <_dtoa_r>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	69c7      	ldr	r7, [r0, #28]
 800af3e:	b099      	sub	sp, #100	@ 0x64
 800af40:	ed8d 0b02 	vstr	d0, [sp, #8]
 800af44:	ec55 4b10 	vmov	r4, r5, d0
 800af48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800af4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800af4c:	4683      	mov	fp, r0
 800af4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800af50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af52:	b97f      	cbnz	r7, 800af74 <_dtoa_r+0x3c>
 800af54:	2010      	movs	r0, #16
 800af56:	f7fe fdf1 	bl	8009b3c <malloc>
 800af5a:	4602      	mov	r2, r0
 800af5c:	f8cb 001c 	str.w	r0, [fp, #28]
 800af60:	b920      	cbnz	r0, 800af6c <_dtoa_r+0x34>
 800af62:	4ba7      	ldr	r3, [pc, #668]	@ (800b200 <_dtoa_r+0x2c8>)
 800af64:	21ef      	movs	r1, #239	@ 0xef
 800af66:	48a7      	ldr	r0, [pc, #668]	@ (800b204 <_dtoa_r+0x2cc>)
 800af68:	f7fe fdca 	bl	8009b00 <__assert_func>
 800af6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800af70:	6007      	str	r7, [r0, #0]
 800af72:	60c7      	str	r7, [r0, #12]
 800af74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af78:	6819      	ldr	r1, [r3, #0]
 800af7a:	b159      	cbz	r1, 800af94 <_dtoa_r+0x5c>
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	604a      	str	r2, [r1, #4]
 800af80:	2301      	movs	r3, #1
 800af82:	4093      	lsls	r3, r2
 800af84:	608b      	str	r3, [r1, #8]
 800af86:	4658      	mov	r0, fp
 800af88:	f000 fe24 	bl	800bbd4 <_Bfree>
 800af8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af90:	2200      	movs	r2, #0
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	1e2b      	subs	r3, r5, #0
 800af96:	bfb9      	ittee	lt
 800af98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800af9c:	9303      	strlt	r3, [sp, #12]
 800af9e:	2300      	movge	r3, #0
 800afa0:	6033      	strge	r3, [r6, #0]
 800afa2:	9f03      	ldr	r7, [sp, #12]
 800afa4:	4b98      	ldr	r3, [pc, #608]	@ (800b208 <_dtoa_r+0x2d0>)
 800afa6:	bfbc      	itt	lt
 800afa8:	2201      	movlt	r2, #1
 800afaa:	6032      	strlt	r2, [r6, #0]
 800afac:	43bb      	bics	r3, r7
 800afae:	d112      	bne.n	800afd6 <_dtoa_r+0x9e>
 800afb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800afb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afbc:	4323      	orrs	r3, r4
 800afbe:	f000 854d 	beq.w	800ba5c <_dtoa_r+0xb24>
 800afc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b21c <_dtoa_r+0x2e4>
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 854f 	beq.w	800ba6c <_dtoa_r+0xb34>
 800afce:	f10a 0303 	add.w	r3, sl, #3
 800afd2:	f000 bd49 	b.w	800ba68 <_dtoa_r+0xb30>
 800afd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afda:	2200      	movs	r2, #0
 800afdc:	ec51 0b17 	vmov	r0, r1, d7
 800afe0:	2300      	movs	r3, #0
 800afe2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800afe6:	f7f5 fd97 	bl	8000b18 <__aeabi_dcmpeq>
 800afea:	4680      	mov	r8, r0
 800afec:	b158      	cbz	r0, 800b006 <_dtoa_r+0xce>
 800afee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aff0:	2301      	movs	r3, #1
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aff6:	b113      	cbz	r3, 800affe <_dtoa_r+0xc6>
 800aff8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800affa:	4b84      	ldr	r3, [pc, #528]	@ (800b20c <_dtoa_r+0x2d4>)
 800affc:	6013      	str	r3, [r2, #0]
 800affe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b220 <_dtoa_r+0x2e8>
 800b002:	f000 bd33 	b.w	800ba6c <_dtoa_r+0xb34>
 800b006:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b00a:	aa16      	add	r2, sp, #88	@ 0x58
 800b00c:	a917      	add	r1, sp, #92	@ 0x5c
 800b00e:	4658      	mov	r0, fp
 800b010:	f001 f984 	bl	800c31c <__d2b>
 800b014:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b018:	4681      	mov	r9, r0
 800b01a:	2e00      	cmp	r6, #0
 800b01c:	d077      	beq.n	800b10e <_dtoa_r+0x1d6>
 800b01e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b020:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b02c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b030:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b034:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b038:	4619      	mov	r1, r3
 800b03a:	2200      	movs	r2, #0
 800b03c:	4b74      	ldr	r3, [pc, #464]	@ (800b210 <_dtoa_r+0x2d8>)
 800b03e:	f7f5 f94b 	bl	80002d8 <__aeabi_dsub>
 800b042:	a369      	add	r3, pc, #420	@ (adr r3, 800b1e8 <_dtoa_r+0x2b0>)
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	f7f5 fafe 	bl	8000648 <__aeabi_dmul>
 800b04c:	a368      	add	r3, pc, #416	@ (adr r3, 800b1f0 <_dtoa_r+0x2b8>)
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	f7f5 f943 	bl	80002dc <__adddf3>
 800b056:	4604      	mov	r4, r0
 800b058:	4630      	mov	r0, r6
 800b05a:	460d      	mov	r5, r1
 800b05c:	f7f5 fa8a 	bl	8000574 <__aeabi_i2d>
 800b060:	a365      	add	r3, pc, #404	@ (adr r3, 800b1f8 <_dtoa_r+0x2c0>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 faef 	bl	8000648 <__aeabi_dmul>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	4620      	mov	r0, r4
 800b070:	4629      	mov	r1, r5
 800b072:	f7f5 f933 	bl	80002dc <__adddf3>
 800b076:	4604      	mov	r4, r0
 800b078:	460d      	mov	r5, r1
 800b07a:	f7f5 fd95 	bl	8000ba8 <__aeabi_d2iz>
 800b07e:	2200      	movs	r2, #0
 800b080:	4607      	mov	r7, r0
 800b082:	2300      	movs	r3, #0
 800b084:	4620      	mov	r0, r4
 800b086:	4629      	mov	r1, r5
 800b088:	f7f5 fd50 	bl	8000b2c <__aeabi_dcmplt>
 800b08c:	b140      	cbz	r0, 800b0a0 <_dtoa_r+0x168>
 800b08e:	4638      	mov	r0, r7
 800b090:	f7f5 fa70 	bl	8000574 <__aeabi_i2d>
 800b094:	4622      	mov	r2, r4
 800b096:	462b      	mov	r3, r5
 800b098:	f7f5 fd3e 	bl	8000b18 <__aeabi_dcmpeq>
 800b09c:	b900      	cbnz	r0, 800b0a0 <_dtoa_r+0x168>
 800b09e:	3f01      	subs	r7, #1
 800b0a0:	2f16      	cmp	r7, #22
 800b0a2:	d851      	bhi.n	800b148 <_dtoa_r+0x210>
 800b0a4:	4b5b      	ldr	r3, [pc, #364]	@ (800b214 <_dtoa_r+0x2dc>)
 800b0a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0b2:	f7f5 fd3b 	bl	8000b2c <__aeabi_dcmplt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d048      	beq.n	800b14c <_dtoa_r+0x214>
 800b0ba:	3f01      	subs	r7, #1
 800b0bc:	2300      	movs	r3, #0
 800b0be:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0c2:	1b9b      	subs	r3, r3, r6
 800b0c4:	1e5a      	subs	r2, r3, #1
 800b0c6:	bf44      	itt	mi
 800b0c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b0cc:	2300      	movmi	r3, #0
 800b0ce:	9208      	str	r2, [sp, #32]
 800b0d0:	bf54      	ite	pl
 800b0d2:	f04f 0800 	movpl.w	r8, #0
 800b0d6:	9308      	strmi	r3, [sp, #32]
 800b0d8:	2f00      	cmp	r7, #0
 800b0da:	db39      	blt.n	800b150 <_dtoa_r+0x218>
 800b0dc:	9b08      	ldr	r3, [sp, #32]
 800b0de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b0e0:	443b      	add	r3, r7
 800b0e2:	9308      	str	r3, [sp, #32]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ea:	2b09      	cmp	r3, #9
 800b0ec:	d864      	bhi.n	800b1b8 <_dtoa_r+0x280>
 800b0ee:	2b05      	cmp	r3, #5
 800b0f0:	bfc4      	itt	gt
 800b0f2:	3b04      	subgt	r3, #4
 800b0f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f8:	f1a3 0302 	sub.w	r3, r3, #2
 800b0fc:	bfcc      	ite	gt
 800b0fe:	2400      	movgt	r4, #0
 800b100:	2401      	movle	r4, #1
 800b102:	2b03      	cmp	r3, #3
 800b104:	d863      	bhi.n	800b1ce <_dtoa_r+0x296>
 800b106:	e8df f003 	tbb	[pc, r3]
 800b10a:	372a      	.short	0x372a
 800b10c:	5535      	.short	0x5535
 800b10e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b112:	441e      	add	r6, r3
 800b114:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b118:	2b20      	cmp	r3, #32
 800b11a:	bfc1      	itttt	gt
 800b11c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b120:	409f      	lslgt	r7, r3
 800b122:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b126:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b12a:	bfd6      	itet	le
 800b12c:	f1c3 0320 	rsble	r3, r3, #32
 800b130:	ea47 0003 	orrgt.w	r0, r7, r3
 800b134:	fa04 f003 	lslle.w	r0, r4, r3
 800b138:	f7f5 fa0c 	bl	8000554 <__aeabi_ui2d>
 800b13c:	2201      	movs	r2, #1
 800b13e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b142:	3e01      	subs	r6, #1
 800b144:	9214      	str	r2, [sp, #80]	@ 0x50
 800b146:	e777      	b.n	800b038 <_dtoa_r+0x100>
 800b148:	2301      	movs	r3, #1
 800b14a:	e7b8      	b.n	800b0be <_dtoa_r+0x186>
 800b14c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b14e:	e7b7      	b.n	800b0c0 <_dtoa_r+0x188>
 800b150:	427b      	negs	r3, r7
 800b152:	930a      	str	r3, [sp, #40]	@ 0x28
 800b154:	2300      	movs	r3, #0
 800b156:	eba8 0807 	sub.w	r8, r8, r7
 800b15a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b15c:	e7c4      	b.n	800b0e8 <_dtoa_r+0x1b0>
 800b15e:	2300      	movs	r3, #0
 800b160:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b164:	2b00      	cmp	r3, #0
 800b166:	dc35      	bgt.n	800b1d4 <_dtoa_r+0x29c>
 800b168:	2301      	movs	r3, #1
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	9307      	str	r3, [sp, #28]
 800b16e:	461a      	mov	r2, r3
 800b170:	920e      	str	r2, [sp, #56]	@ 0x38
 800b172:	e00b      	b.n	800b18c <_dtoa_r+0x254>
 800b174:	2301      	movs	r3, #1
 800b176:	e7f3      	b.n	800b160 <_dtoa_r+0x228>
 800b178:	2300      	movs	r3, #0
 800b17a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b17c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b17e:	18fb      	adds	r3, r7, r3
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	3301      	adds	r3, #1
 800b184:	2b01      	cmp	r3, #1
 800b186:	9307      	str	r3, [sp, #28]
 800b188:	bfb8      	it	lt
 800b18a:	2301      	movlt	r3, #1
 800b18c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b190:	2100      	movs	r1, #0
 800b192:	2204      	movs	r2, #4
 800b194:	f102 0514 	add.w	r5, r2, #20
 800b198:	429d      	cmp	r5, r3
 800b19a:	d91f      	bls.n	800b1dc <_dtoa_r+0x2a4>
 800b19c:	6041      	str	r1, [r0, #4]
 800b19e:	4658      	mov	r0, fp
 800b1a0:	f000 fcd8 	bl	800bb54 <_Balloc>
 800b1a4:	4682      	mov	sl, r0
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d13c      	bne.n	800b224 <_dtoa_r+0x2ec>
 800b1aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b218 <_dtoa_r+0x2e0>)
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800b1b2:	e6d8      	b.n	800af66 <_dtoa_r+0x2e>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e7e0      	b.n	800b17a <_dtoa_r+0x242>
 800b1b8:	2401      	movs	r4, #1
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	9307      	str	r3, [sp, #28]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2312      	movs	r3, #18
 800b1cc:	e7d0      	b.n	800b170 <_dtoa_r+0x238>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1d2:	e7f5      	b.n	800b1c0 <_dtoa_r+0x288>
 800b1d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	9307      	str	r3, [sp, #28]
 800b1da:	e7d7      	b.n	800b18c <_dtoa_r+0x254>
 800b1dc:	3101      	adds	r1, #1
 800b1de:	0052      	lsls	r2, r2, #1
 800b1e0:	e7d8      	b.n	800b194 <_dtoa_r+0x25c>
 800b1e2:	bf00      	nop
 800b1e4:	f3af 8000 	nop.w
 800b1e8:	636f4361 	.word	0x636f4361
 800b1ec:	3fd287a7 	.word	0x3fd287a7
 800b1f0:	8b60c8b3 	.word	0x8b60c8b3
 800b1f4:	3fc68a28 	.word	0x3fc68a28
 800b1f8:	509f79fb 	.word	0x509f79fb
 800b1fc:	3fd34413 	.word	0x3fd34413
 800b200:	0800e31a 	.word	0x0800e31a
 800b204:	0800e331 	.word	0x0800e331
 800b208:	7ff00000 	.word	0x7ff00000
 800b20c:	0800e2e5 	.word	0x0800e2e5
 800b210:	3ff80000 	.word	0x3ff80000
 800b214:	0800e428 	.word	0x0800e428
 800b218:	0800e389 	.word	0x0800e389
 800b21c:	0800e316 	.word	0x0800e316
 800b220:	0800e2e4 	.word	0x0800e2e4
 800b224:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b228:	6018      	str	r0, [r3, #0]
 800b22a:	9b07      	ldr	r3, [sp, #28]
 800b22c:	2b0e      	cmp	r3, #14
 800b22e:	f200 80a4 	bhi.w	800b37a <_dtoa_r+0x442>
 800b232:	2c00      	cmp	r4, #0
 800b234:	f000 80a1 	beq.w	800b37a <_dtoa_r+0x442>
 800b238:	2f00      	cmp	r7, #0
 800b23a:	dd33      	ble.n	800b2a4 <_dtoa_r+0x36c>
 800b23c:	4bad      	ldr	r3, [pc, #692]	@ (800b4f4 <_dtoa_r+0x5bc>)
 800b23e:	f007 020f 	and.w	r2, r7, #15
 800b242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b246:	ed93 7b00 	vldr	d7, [r3]
 800b24a:	05f8      	lsls	r0, r7, #23
 800b24c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b250:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b254:	d516      	bpl.n	800b284 <_dtoa_r+0x34c>
 800b256:	4ba8      	ldr	r3, [pc, #672]	@ (800b4f8 <_dtoa_r+0x5c0>)
 800b258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b25c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b260:	f7f5 fb1c 	bl	800089c <__aeabi_ddiv>
 800b264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b268:	f004 040f 	and.w	r4, r4, #15
 800b26c:	2603      	movs	r6, #3
 800b26e:	4da2      	ldr	r5, [pc, #648]	@ (800b4f8 <_dtoa_r+0x5c0>)
 800b270:	b954      	cbnz	r4, 800b288 <_dtoa_r+0x350>
 800b272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b27a:	f7f5 fb0f 	bl	800089c <__aeabi_ddiv>
 800b27e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b282:	e028      	b.n	800b2d6 <_dtoa_r+0x39e>
 800b284:	2602      	movs	r6, #2
 800b286:	e7f2      	b.n	800b26e <_dtoa_r+0x336>
 800b288:	07e1      	lsls	r1, r4, #31
 800b28a:	d508      	bpl.n	800b29e <_dtoa_r+0x366>
 800b28c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b290:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b294:	f7f5 f9d8 	bl	8000648 <__aeabi_dmul>
 800b298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b29c:	3601      	adds	r6, #1
 800b29e:	1064      	asrs	r4, r4, #1
 800b2a0:	3508      	adds	r5, #8
 800b2a2:	e7e5      	b.n	800b270 <_dtoa_r+0x338>
 800b2a4:	f000 80d2 	beq.w	800b44c <_dtoa_r+0x514>
 800b2a8:	427c      	negs	r4, r7
 800b2aa:	4b92      	ldr	r3, [pc, #584]	@ (800b4f4 <_dtoa_r+0x5bc>)
 800b2ac:	4d92      	ldr	r5, [pc, #584]	@ (800b4f8 <_dtoa_r+0x5c0>)
 800b2ae:	f004 020f 	and.w	r2, r4, #15
 800b2b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2be:	f7f5 f9c3 	bl	8000648 <__aeabi_dmul>
 800b2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c6:	1124      	asrs	r4, r4, #4
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	2602      	movs	r6, #2
 800b2cc:	2c00      	cmp	r4, #0
 800b2ce:	f040 80b2 	bne.w	800b436 <_dtoa_r+0x4fe>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1d3      	bne.n	800b27e <_dtoa_r+0x346>
 800b2d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 80b7 	beq.w	800b450 <_dtoa_r+0x518>
 800b2e2:	4b86      	ldr	r3, [pc, #536]	@ (800b4fc <_dtoa_r+0x5c4>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 fc1f 	bl	8000b2c <__aeabi_dcmplt>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	f000 80ae 	beq.w	800b450 <_dtoa_r+0x518>
 800b2f4:	9b07      	ldr	r3, [sp, #28]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 80aa 	beq.w	800b450 <_dtoa_r+0x518>
 800b2fc:	9b00      	ldr	r3, [sp, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	dd37      	ble.n	800b372 <_dtoa_r+0x43a>
 800b302:	1e7b      	subs	r3, r7, #1
 800b304:	9304      	str	r3, [sp, #16]
 800b306:	4620      	mov	r0, r4
 800b308:	4b7d      	ldr	r3, [pc, #500]	@ (800b500 <_dtoa_r+0x5c8>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	4629      	mov	r1, r5
 800b30e:	f7f5 f99b 	bl	8000648 <__aeabi_dmul>
 800b312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b316:	9c00      	ldr	r4, [sp, #0]
 800b318:	3601      	adds	r6, #1
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7f5 f92a 	bl	8000574 <__aeabi_i2d>
 800b320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b324:	f7f5 f990 	bl	8000648 <__aeabi_dmul>
 800b328:	4b76      	ldr	r3, [pc, #472]	@ (800b504 <_dtoa_r+0x5cc>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	f7f4 ffd6 	bl	80002dc <__adddf3>
 800b330:	4605      	mov	r5, r0
 800b332:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b336:	2c00      	cmp	r4, #0
 800b338:	f040 808d 	bne.w	800b456 <_dtoa_r+0x51e>
 800b33c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b340:	4b71      	ldr	r3, [pc, #452]	@ (800b508 <_dtoa_r+0x5d0>)
 800b342:	2200      	movs	r2, #0
 800b344:	f7f4 ffc8 	bl	80002d8 <__aeabi_dsub>
 800b348:	4602      	mov	r2, r0
 800b34a:	460b      	mov	r3, r1
 800b34c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b350:	462a      	mov	r2, r5
 800b352:	4633      	mov	r3, r6
 800b354:	f7f5 fc08 	bl	8000b68 <__aeabi_dcmpgt>
 800b358:	2800      	cmp	r0, #0
 800b35a:	f040 828b 	bne.w	800b874 <_dtoa_r+0x93c>
 800b35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b362:	462a      	mov	r2, r5
 800b364:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b368:	f7f5 fbe0 	bl	8000b2c <__aeabi_dcmplt>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	f040 8128 	bne.w	800b5c2 <_dtoa_r+0x68a>
 800b372:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b376:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b37a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f2c0 815a 	blt.w	800b636 <_dtoa_r+0x6fe>
 800b382:	2f0e      	cmp	r7, #14
 800b384:	f300 8157 	bgt.w	800b636 <_dtoa_r+0x6fe>
 800b388:	4b5a      	ldr	r3, [pc, #360]	@ (800b4f4 <_dtoa_r+0x5bc>)
 800b38a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b38e:	ed93 7b00 	vldr	d7, [r3]
 800b392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b394:	2b00      	cmp	r3, #0
 800b396:	ed8d 7b00 	vstr	d7, [sp]
 800b39a:	da03      	bge.n	800b3a4 <_dtoa_r+0x46c>
 800b39c:	9b07      	ldr	r3, [sp, #28]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f340 8101 	ble.w	800b5a6 <_dtoa_r+0x66e>
 800b3a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b3a8:	4656      	mov	r6, sl
 800b3aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7f5 fa73 	bl	800089c <__aeabi_ddiv>
 800b3b6:	f7f5 fbf7 	bl	8000ba8 <__aeabi_d2iz>
 800b3ba:	4680      	mov	r8, r0
 800b3bc:	f7f5 f8da 	bl	8000574 <__aeabi_i2d>
 800b3c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3c4:	f7f5 f940 	bl	8000648 <__aeabi_dmul>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b3d4:	f7f4 ff80 	bl	80002d8 <__aeabi_dsub>
 800b3d8:	f806 4b01 	strb.w	r4, [r6], #1
 800b3dc:	9d07      	ldr	r5, [sp, #28]
 800b3de:	eba6 040a 	sub.w	r4, r6, sl
 800b3e2:	42a5      	cmp	r5, r4
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	f040 8117 	bne.w	800b61a <_dtoa_r+0x6e2>
 800b3ec:	f7f4 ff76 	bl	80002dc <__adddf3>
 800b3f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	460d      	mov	r5, r1
 800b3f8:	f7f5 fbb6 	bl	8000b68 <__aeabi_dcmpgt>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f040 80f9 	bne.w	800b5f4 <_dtoa_r+0x6bc>
 800b402:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b406:	4620      	mov	r0, r4
 800b408:	4629      	mov	r1, r5
 800b40a:	f7f5 fb85 	bl	8000b18 <__aeabi_dcmpeq>
 800b40e:	b118      	cbz	r0, 800b418 <_dtoa_r+0x4e0>
 800b410:	f018 0f01 	tst.w	r8, #1
 800b414:	f040 80ee 	bne.w	800b5f4 <_dtoa_r+0x6bc>
 800b418:	4649      	mov	r1, r9
 800b41a:	4658      	mov	r0, fp
 800b41c:	f000 fbda 	bl	800bbd4 <_Bfree>
 800b420:	2300      	movs	r3, #0
 800b422:	7033      	strb	r3, [r6, #0]
 800b424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b426:	3701      	adds	r7, #1
 800b428:	601f      	str	r7, [r3, #0]
 800b42a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 831d 	beq.w	800ba6c <_dtoa_r+0xb34>
 800b432:	601e      	str	r6, [r3, #0]
 800b434:	e31a      	b.n	800ba6c <_dtoa_r+0xb34>
 800b436:	07e2      	lsls	r2, r4, #31
 800b438:	d505      	bpl.n	800b446 <_dtoa_r+0x50e>
 800b43a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b43e:	f7f5 f903 	bl	8000648 <__aeabi_dmul>
 800b442:	3601      	adds	r6, #1
 800b444:	2301      	movs	r3, #1
 800b446:	1064      	asrs	r4, r4, #1
 800b448:	3508      	adds	r5, #8
 800b44a:	e73f      	b.n	800b2cc <_dtoa_r+0x394>
 800b44c:	2602      	movs	r6, #2
 800b44e:	e742      	b.n	800b2d6 <_dtoa_r+0x39e>
 800b450:	9c07      	ldr	r4, [sp, #28]
 800b452:	9704      	str	r7, [sp, #16]
 800b454:	e761      	b.n	800b31a <_dtoa_r+0x3e2>
 800b456:	4b27      	ldr	r3, [pc, #156]	@ (800b4f4 <_dtoa_r+0x5bc>)
 800b458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b45a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b45e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b462:	4454      	add	r4, sl
 800b464:	2900      	cmp	r1, #0
 800b466:	d053      	beq.n	800b510 <_dtoa_r+0x5d8>
 800b468:	4928      	ldr	r1, [pc, #160]	@ (800b50c <_dtoa_r+0x5d4>)
 800b46a:	2000      	movs	r0, #0
 800b46c:	f7f5 fa16 	bl	800089c <__aeabi_ddiv>
 800b470:	4633      	mov	r3, r6
 800b472:	462a      	mov	r2, r5
 800b474:	f7f4 ff30 	bl	80002d8 <__aeabi_dsub>
 800b478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b47c:	4656      	mov	r6, sl
 800b47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b482:	f7f5 fb91 	bl	8000ba8 <__aeabi_d2iz>
 800b486:	4605      	mov	r5, r0
 800b488:	f7f5 f874 	bl	8000574 <__aeabi_i2d>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b494:	f7f4 ff20 	bl	80002d8 <__aeabi_dsub>
 800b498:	3530      	adds	r5, #48	@ 0x30
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4a2:	f806 5b01 	strb.w	r5, [r6], #1
 800b4a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4aa:	f7f5 fb3f 	bl	8000b2c <__aeabi_dcmplt>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d171      	bne.n	800b596 <_dtoa_r+0x65e>
 800b4b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4b6:	4911      	ldr	r1, [pc, #68]	@ (800b4fc <_dtoa_r+0x5c4>)
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	f7f4 ff0d 	bl	80002d8 <__aeabi_dsub>
 800b4be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4c2:	f7f5 fb33 	bl	8000b2c <__aeabi_dcmplt>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f040 8095 	bne.w	800b5f6 <_dtoa_r+0x6be>
 800b4cc:	42a6      	cmp	r6, r4
 800b4ce:	f43f af50 	beq.w	800b372 <_dtoa_r+0x43a>
 800b4d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b500 <_dtoa_r+0x5c8>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f7f5 f8b5 	bl	8000648 <__aeabi_dmul>
 800b4de:	4b08      	ldr	r3, [pc, #32]	@ (800b500 <_dtoa_r+0x5c8>)
 800b4e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ea:	f7f5 f8ad 	bl	8000648 <__aeabi_dmul>
 800b4ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4f2:	e7c4      	b.n	800b47e <_dtoa_r+0x546>
 800b4f4:	0800e428 	.word	0x0800e428
 800b4f8:	0800e400 	.word	0x0800e400
 800b4fc:	3ff00000 	.word	0x3ff00000
 800b500:	40240000 	.word	0x40240000
 800b504:	401c0000 	.word	0x401c0000
 800b508:	40140000 	.word	0x40140000
 800b50c:	3fe00000 	.word	0x3fe00000
 800b510:	4631      	mov	r1, r6
 800b512:	4628      	mov	r0, r5
 800b514:	f7f5 f898 	bl	8000648 <__aeabi_dmul>
 800b518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b51c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b51e:	4656      	mov	r6, sl
 800b520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b524:	f7f5 fb40 	bl	8000ba8 <__aeabi_d2iz>
 800b528:	4605      	mov	r5, r0
 800b52a:	f7f5 f823 	bl	8000574 <__aeabi_i2d>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b536:	f7f4 fecf 	bl	80002d8 <__aeabi_dsub>
 800b53a:	3530      	adds	r5, #48	@ 0x30
 800b53c:	f806 5b01 	strb.w	r5, [r6], #1
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	42a6      	cmp	r6, r4
 800b546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b54a:	f04f 0200 	mov.w	r2, #0
 800b54e:	d124      	bne.n	800b59a <_dtoa_r+0x662>
 800b550:	4bac      	ldr	r3, [pc, #688]	@ (800b804 <_dtoa_r+0x8cc>)
 800b552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b556:	f7f4 fec1 	bl	80002dc <__adddf3>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b562:	f7f5 fb01 	bl	8000b68 <__aeabi_dcmpgt>
 800b566:	2800      	cmp	r0, #0
 800b568:	d145      	bne.n	800b5f6 <_dtoa_r+0x6be>
 800b56a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b56e:	49a5      	ldr	r1, [pc, #660]	@ (800b804 <_dtoa_r+0x8cc>)
 800b570:	2000      	movs	r0, #0
 800b572:	f7f4 feb1 	bl	80002d8 <__aeabi_dsub>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b57e:	f7f5 fad5 	bl	8000b2c <__aeabi_dcmplt>
 800b582:	2800      	cmp	r0, #0
 800b584:	f43f aef5 	beq.w	800b372 <_dtoa_r+0x43a>
 800b588:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b58a:	1e73      	subs	r3, r6, #1
 800b58c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b58e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b592:	2b30      	cmp	r3, #48	@ 0x30
 800b594:	d0f8      	beq.n	800b588 <_dtoa_r+0x650>
 800b596:	9f04      	ldr	r7, [sp, #16]
 800b598:	e73e      	b.n	800b418 <_dtoa_r+0x4e0>
 800b59a:	4b9b      	ldr	r3, [pc, #620]	@ (800b808 <_dtoa_r+0x8d0>)
 800b59c:	f7f5 f854 	bl	8000648 <__aeabi_dmul>
 800b5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5a4:	e7bc      	b.n	800b520 <_dtoa_r+0x5e8>
 800b5a6:	d10c      	bne.n	800b5c2 <_dtoa_r+0x68a>
 800b5a8:	4b98      	ldr	r3, [pc, #608]	@ (800b80c <_dtoa_r+0x8d4>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5b0:	f7f5 f84a 	bl	8000648 <__aeabi_dmul>
 800b5b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5b8:	f7f5 facc 	bl	8000b54 <__aeabi_dcmpge>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f000 8157 	beq.w	800b870 <_dtoa_r+0x938>
 800b5c2:	2400      	movs	r4, #0
 800b5c4:	4625      	mov	r5, r4
 800b5c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	9304      	str	r3, [sp, #16]
 800b5cc:	4656      	mov	r6, sl
 800b5ce:	2700      	movs	r7, #0
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	4658      	mov	r0, fp
 800b5d4:	f000 fafe 	bl	800bbd4 <_Bfree>
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	d0dc      	beq.n	800b596 <_dtoa_r+0x65e>
 800b5dc:	b12f      	cbz	r7, 800b5ea <_dtoa_r+0x6b2>
 800b5de:	42af      	cmp	r7, r5
 800b5e0:	d003      	beq.n	800b5ea <_dtoa_r+0x6b2>
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	4658      	mov	r0, fp
 800b5e6:	f000 faf5 	bl	800bbd4 <_Bfree>
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	4658      	mov	r0, fp
 800b5ee:	f000 faf1 	bl	800bbd4 <_Bfree>
 800b5f2:	e7d0      	b.n	800b596 <_dtoa_r+0x65e>
 800b5f4:	9704      	str	r7, [sp, #16]
 800b5f6:	4633      	mov	r3, r6
 800b5f8:	461e      	mov	r6, r3
 800b5fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5fe:	2a39      	cmp	r2, #57	@ 0x39
 800b600:	d107      	bne.n	800b612 <_dtoa_r+0x6da>
 800b602:	459a      	cmp	sl, r3
 800b604:	d1f8      	bne.n	800b5f8 <_dtoa_r+0x6c0>
 800b606:	9a04      	ldr	r2, [sp, #16]
 800b608:	3201      	adds	r2, #1
 800b60a:	9204      	str	r2, [sp, #16]
 800b60c:	2230      	movs	r2, #48	@ 0x30
 800b60e:	f88a 2000 	strb.w	r2, [sl]
 800b612:	781a      	ldrb	r2, [r3, #0]
 800b614:	3201      	adds	r2, #1
 800b616:	701a      	strb	r2, [r3, #0]
 800b618:	e7bd      	b.n	800b596 <_dtoa_r+0x65e>
 800b61a:	4b7b      	ldr	r3, [pc, #492]	@ (800b808 <_dtoa_r+0x8d0>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	f7f5 f813 	bl	8000648 <__aeabi_dmul>
 800b622:	2200      	movs	r2, #0
 800b624:	2300      	movs	r3, #0
 800b626:	4604      	mov	r4, r0
 800b628:	460d      	mov	r5, r1
 800b62a:	f7f5 fa75 	bl	8000b18 <__aeabi_dcmpeq>
 800b62e:	2800      	cmp	r0, #0
 800b630:	f43f aebb 	beq.w	800b3aa <_dtoa_r+0x472>
 800b634:	e6f0      	b.n	800b418 <_dtoa_r+0x4e0>
 800b636:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b638:	2a00      	cmp	r2, #0
 800b63a:	f000 80db 	beq.w	800b7f4 <_dtoa_r+0x8bc>
 800b63e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b640:	2a01      	cmp	r2, #1
 800b642:	f300 80bf 	bgt.w	800b7c4 <_dtoa_r+0x88c>
 800b646:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b648:	2a00      	cmp	r2, #0
 800b64a:	f000 80b7 	beq.w	800b7bc <_dtoa_r+0x884>
 800b64e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b652:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b654:	4646      	mov	r6, r8
 800b656:	9a08      	ldr	r2, [sp, #32]
 800b658:	2101      	movs	r1, #1
 800b65a:	441a      	add	r2, r3
 800b65c:	4658      	mov	r0, fp
 800b65e:	4498      	add	r8, r3
 800b660:	9208      	str	r2, [sp, #32]
 800b662:	f000 fbb5 	bl	800bdd0 <__i2b>
 800b666:	4605      	mov	r5, r0
 800b668:	b15e      	cbz	r6, 800b682 <_dtoa_r+0x74a>
 800b66a:	9b08      	ldr	r3, [sp, #32]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	dd08      	ble.n	800b682 <_dtoa_r+0x74a>
 800b670:	42b3      	cmp	r3, r6
 800b672:	9a08      	ldr	r2, [sp, #32]
 800b674:	bfa8      	it	ge
 800b676:	4633      	movge	r3, r6
 800b678:	eba8 0803 	sub.w	r8, r8, r3
 800b67c:	1af6      	subs	r6, r6, r3
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	9308      	str	r3, [sp, #32]
 800b682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b684:	b1f3      	cbz	r3, 800b6c4 <_dtoa_r+0x78c>
 800b686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f000 80b7 	beq.w	800b7fc <_dtoa_r+0x8c4>
 800b68e:	b18c      	cbz	r4, 800b6b4 <_dtoa_r+0x77c>
 800b690:	4629      	mov	r1, r5
 800b692:	4622      	mov	r2, r4
 800b694:	4658      	mov	r0, fp
 800b696:	f000 fc5b 	bl	800bf50 <__pow5mult>
 800b69a:	464a      	mov	r2, r9
 800b69c:	4601      	mov	r1, r0
 800b69e:	4605      	mov	r5, r0
 800b6a0:	4658      	mov	r0, fp
 800b6a2:	f000 fbab 	bl	800bdfc <__multiply>
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	9004      	str	r0, [sp, #16]
 800b6aa:	4658      	mov	r0, fp
 800b6ac:	f000 fa92 	bl	800bbd4 <_Bfree>
 800b6b0:	9b04      	ldr	r3, [sp, #16]
 800b6b2:	4699      	mov	r9, r3
 800b6b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6b6:	1b1a      	subs	r2, r3, r4
 800b6b8:	d004      	beq.n	800b6c4 <_dtoa_r+0x78c>
 800b6ba:	4649      	mov	r1, r9
 800b6bc:	4658      	mov	r0, fp
 800b6be:	f000 fc47 	bl	800bf50 <__pow5mult>
 800b6c2:	4681      	mov	r9, r0
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	4658      	mov	r0, fp
 800b6c8:	f000 fb82 	bl	800bdd0 <__i2b>
 800b6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 81cf 	beq.w	800ba74 <_dtoa_r+0xb3c>
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	4601      	mov	r1, r0
 800b6da:	4658      	mov	r0, fp
 800b6dc:	f000 fc38 	bl	800bf50 <__pow5mult>
 800b6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	f300 8095 	bgt.w	800b814 <_dtoa_r+0x8dc>
 800b6ea:	9b02      	ldr	r3, [sp, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f040 8087 	bne.w	800b800 <_dtoa_r+0x8c8>
 800b6f2:	9b03      	ldr	r3, [sp, #12]
 800b6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f040 8089 	bne.w	800b810 <_dtoa_r+0x8d8>
 800b6fe:	9b03      	ldr	r3, [sp, #12]
 800b700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b704:	0d1b      	lsrs	r3, r3, #20
 800b706:	051b      	lsls	r3, r3, #20
 800b708:	b12b      	cbz	r3, 800b716 <_dtoa_r+0x7de>
 800b70a:	9b08      	ldr	r3, [sp, #32]
 800b70c:	3301      	adds	r3, #1
 800b70e:	9308      	str	r3, [sp, #32]
 800b710:	f108 0801 	add.w	r8, r8, #1
 800b714:	2301      	movs	r3, #1
 800b716:	930a      	str	r3, [sp, #40]	@ 0x28
 800b718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f000 81b0 	beq.w	800ba80 <_dtoa_r+0xb48>
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b726:	6918      	ldr	r0, [r3, #16]
 800b728:	f000 fb06 	bl	800bd38 <__hi0bits>
 800b72c:	f1c0 0020 	rsb	r0, r0, #32
 800b730:	9b08      	ldr	r3, [sp, #32]
 800b732:	4418      	add	r0, r3
 800b734:	f010 001f 	ands.w	r0, r0, #31
 800b738:	d077      	beq.n	800b82a <_dtoa_r+0x8f2>
 800b73a:	f1c0 0320 	rsb	r3, r0, #32
 800b73e:	2b04      	cmp	r3, #4
 800b740:	dd6b      	ble.n	800b81a <_dtoa_r+0x8e2>
 800b742:	9b08      	ldr	r3, [sp, #32]
 800b744:	f1c0 001c 	rsb	r0, r0, #28
 800b748:	4403      	add	r3, r0
 800b74a:	4480      	add	r8, r0
 800b74c:	4406      	add	r6, r0
 800b74e:	9308      	str	r3, [sp, #32]
 800b750:	f1b8 0f00 	cmp.w	r8, #0
 800b754:	dd05      	ble.n	800b762 <_dtoa_r+0x82a>
 800b756:	4649      	mov	r1, r9
 800b758:	4642      	mov	r2, r8
 800b75a:	4658      	mov	r0, fp
 800b75c:	f000 fc52 	bl	800c004 <__lshift>
 800b760:	4681      	mov	r9, r0
 800b762:	9b08      	ldr	r3, [sp, #32]
 800b764:	2b00      	cmp	r3, #0
 800b766:	dd05      	ble.n	800b774 <_dtoa_r+0x83c>
 800b768:	4621      	mov	r1, r4
 800b76a:	461a      	mov	r2, r3
 800b76c:	4658      	mov	r0, fp
 800b76e:	f000 fc49 	bl	800c004 <__lshift>
 800b772:	4604      	mov	r4, r0
 800b774:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b776:	2b00      	cmp	r3, #0
 800b778:	d059      	beq.n	800b82e <_dtoa_r+0x8f6>
 800b77a:	4621      	mov	r1, r4
 800b77c:	4648      	mov	r0, r9
 800b77e:	f000 fcad 	bl	800c0dc <__mcmp>
 800b782:	2800      	cmp	r0, #0
 800b784:	da53      	bge.n	800b82e <_dtoa_r+0x8f6>
 800b786:	1e7b      	subs	r3, r7, #1
 800b788:	9304      	str	r3, [sp, #16]
 800b78a:	4649      	mov	r1, r9
 800b78c:	2300      	movs	r3, #0
 800b78e:	220a      	movs	r2, #10
 800b790:	4658      	mov	r0, fp
 800b792:	f000 fa41 	bl	800bc18 <__multadd>
 800b796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b798:	4681      	mov	r9, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 8172 	beq.w	800ba84 <_dtoa_r+0xb4c>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	220a      	movs	r2, #10
 800b7a6:	4658      	mov	r0, fp
 800b7a8:	f000 fa36 	bl	800bc18 <__multadd>
 800b7ac:	9b00      	ldr	r3, [sp, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	4605      	mov	r5, r0
 800b7b2:	dc67      	bgt.n	800b884 <_dtoa_r+0x94c>
 800b7b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	dc41      	bgt.n	800b83e <_dtoa_r+0x906>
 800b7ba:	e063      	b.n	800b884 <_dtoa_r+0x94c>
 800b7bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b7c2:	e746      	b.n	800b652 <_dtoa_r+0x71a>
 800b7c4:	9b07      	ldr	r3, [sp, #28]
 800b7c6:	1e5c      	subs	r4, r3, #1
 800b7c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7ca:	42a3      	cmp	r3, r4
 800b7cc:	bfbf      	itttt	lt
 800b7ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b7d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b7d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b7d4:	1ae3      	sublt	r3, r4, r3
 800b7d6:	bfb4      	ite	lt
 800b7d8:	18d2      	addlt	r2, r2, r3
 800b7da:	1b1c      	subge	r4, r3, r4
 800b7dc:	9b07      	ldr	r3, [sp, #28]
 800b7de:	bfbc      	itt	lt
 800b7e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b7e2:	2400      	movlt	r4, #0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	bfb5      	itete	lt
 800b7e8:	eba8 0603 	sublt.w	r6, r8, r3
 800b7ec:	9b07      	ldrge	r3, [sp, #28]
 800b7ee:	2300      	movlt	r3, #0
 800b7f0:	4646      	movge	r6, r8
 800b7f2:	e730      	b.n	800b656 <_dtoa_r+0x71e>
 800b7f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b7f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b7f8:	4646      	mov	r6, r8
 800b7fa:	e735      	b.n	800b668 <_dtoa_r+0x730>
 800b7fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b7fe:	e75c      	b.n	800b6ba <_dtoa_r+0x782>
 800b800:	2300      	movs	r3, #0
 800b802:	e788      	b.n	800b716 <_dtoa_r+0x7de>
 800b804:	3fe00000 	.word	0x3fe00000
 800b808:	40240000 	.word	0x40240000
 800b80c:	40140000 	.word	0x40140000
 800b810:	9b02      	ldr	r3, [sp, #8]
 800b812:	e780      	b.n	800b716 <_dtoa_r+0x7de>
 800b814:	2300      	movs	r3, #0
 800b816:	930a      	str	r3, [sp, #40]	@ 0x28
 800b818:	e782      	b.n	800b720 <_dtoa_r+0x7e8>
 800b81a:	d099      	beq.n	800b750 <_dtoa_r+0x818>
 800b81c:	9a08      	ldr	r2, [sp, #32]
 800b81e:	331c      	adds	r3, #28
 800b820:	441a      	add	r2, r3
 800b822:	4498      	add	r8, r3
 800b824:	441e      	add	r6, r3
 800b826:	9208      	str	r2, [sp, #32]
 800b828:	e792      	b.n	800b750 <_dtoa_r+0x818>
 800b82a:	4603      	mov	r3, r0
 800b82c:	e7f6      	b.n	800b81c <_dtoa_r+0x8e4>
 800b82e:	9b07      	ldr	r3, [sp, #28]
 800b830:	9704      	str	r7, [sp, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	dc20      	bgt.n	800b878 <_dtoa_r+0x940>
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	dd1e      	ble.n	800b87c <_dtoa_r+0x944>
 800b83e:	9b00      	ldr	r3, [sp, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f47f aec0 	bne.w	800b5c6 <_dtoa_r+0x68e>
 800b846:	4621      	mov	r1, r4
 800b848:	2205      	movs	r2, #5
 800b84a:	4658      	mov	r0, fp
 800b84c:	f000 f9e4 	bl	800bc18 <__multadd>
 800b850:	4601      	mov	r1, r0
 800b852:	4604      	mov	r4, r0
 800b854:	4648      	mov	r0, r9
 800b856:	f000 fc41 	bl	800c0dc <__mcmp>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	f77f aeb3 	ble.w	800b5c6 <_dtoa_r+0x68e>
 800b860:	4656      	mov	r6, sl
 800b862:	2331      	movs	r3, #49	@ 0x31
 800b864:	f806 3b01 	strb.w	r3, [r6], #1
 800b868:	9b04      	ldr	r3, [sp, #16]
 800b86a:	3301      	adds	r3, #1
 800b86c:	9304      	str	r3, [sp, #16]
 800b86e:	e6ae      	b.n	800b5ce <_dtoa_r+0x696>
 800b870:	9c07      	ldr	r4, [sp, #28]
 800b872:	9704      	str	r7, [sp, #16]
 800b874:	4625      	mov	r5, r4
 800b876:	e7f3      	b.n	800b860 <_dtoa_r+0x928>
 800b878:	9b07      	ldr	r3, [sp, #28]
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 8104 	beq.w	800ba8c <_dtoa_r+0xb54>
 800b884:	2e00      	cmp	r6, #0
 800b886:	dd05      	ble.n	800b894 <_dtoa_r+0x95c>
 800b888:	4629      	mov	r1, r5
 800b88a:	4632      	mov	r2, r6
 800b88c:	4658      	mov	r0, fp
 800b88e:	f000 fbb9 	bl	800c004 <__lshift>
 800b892:	4605      	mov	r5, r0
 800b894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b896:	2b00      	cmp	r3, #0
 800b898:	d05a      	beq.n	800b950 <_dtoa_r+0xa18>
 800b89a:	6869      	ldr	r1, [r5, #4]
 800b89c:	4658      	mov	r0, fp
 800b89e:	f000 f959 	bl	800bb54 <_Balloc>
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	b928      	cbnz	r0, 800b8b2 <_dtoa_r+0x97a>
 800b8a6:	4b84      	ldr	r3, [pc, #528]	@ (800bab8 <_dtoa_r+0xb80>)
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b8ae:	f7ff bb5a 	b.w	800af66 <_dtoa_r+0x2e>
 800b8b2:	692a      	ldr	r2, [r5, #16]
 800b8b4:	3202      	adds	r2, #2
 800b8b6:	0092      	lsls	r2, r2, #2
 800b8b8:	f105 010c 	add.w	r1, r5, #12
 800b8bc:	300c      	adds	r0, #12
 800b8be:	f7ff fa9e 	bl	800adfe <memcpy>
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	4631      	mov	r1, r6
 800b8c6:	4658      	mov	r0, fp
 800b8c8:	f000 fb9c 	bl	800c004 <__lshift>
 800b8cc:	f10a 0301 	add.w	r3, sl, #1
 800b8d0:	9307      	str	r3, [sp, #28]
 800b8d2:	9b00      	ldr	r3, [sp, #0]
 800b8d4:	4453      	add	r3, sl
 800b8d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8d8:	9b02      	ldr	r3, [sp, #8]
 800b8da:	f003 0301 	and.w	r3, r3, #1
 800b8de:	462f      	mov	r7, r5
 800b8e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8e2:	4605      	mov	r5, r0
 800b8e4:	9b07      	ldr	r3, [sp, #28]
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	4648      	mov	r0, r9
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	f7ff fa9b 	bl	800ae28 <quorem>
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	9002      	str	r0, [sp, #8]
 800b8f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b8fa:	4648      	mov	r0, r9
 800b8fc:	f000 fbee 	bl	800c0dc <__mcmp>
 800b900:	462a      	mov	r2, r5
 800b902:	9008      	str	r0, [sp, #32]
 800b904:	4621      	mov	r1, r4
 800b906:	4658      	mov	r0, fp
 800b908:	f000 fc04 	bl	800c114 <__mdiff>
 800b90c:	68c2      	ldr	r2, [r0, #12]
 800b90e:	4606      	mov	r6, r0
 800b910:	bb02      	cbnz	r2, 800b954 <_dtoa_r+0xa1c>
 800b912:	4601      	mov	r1, r0
 800b914:	4648      	mov	r0, r9
 800b916:	f000 fbe1 	bl	800c0dc <__mcmp>
 800b91a:	4602      	mov	r2, r0
 800b91c:	4631      	mov	r1, r6
 800b91e:	4658      	mov	r0, fp
 800b920:	920e      	str	r2, [sp, #56]	@ 0x38
 800b922:	f000 f957 	bl	800bbd4 <_Bfree>
 800b926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b928:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b92a:	9e07      	ldr	r6, [sp, #28]
 800b92c:	ea43 0102 	orr.w	r1, r3, r2
 800b930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b932:	4319      	orrs	r1, r3
 800b934:	d110      	bne.n	800b958 <_dtoa_r+0xa20>
 800b936:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b93a:	d029      	beq.n	800b990 <_dtoa_r+0xa58>
 800b93c:	9b08      	ldr	r3, [sp, #32]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	dd02      	ble.n	800b948 <_dtoa_r+0xa10>
 800b942:	9b02      	ldr	r3, [sp, #8]
 800b944:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b948:	9b00      	ldr	r3, [sp, #0]
 800b94a:	f883 8000 	strb.w	r8, [r3]
 800b94e:	e63f      	b.n	800b5d0 <_dtoa_r+0x698>
 800b950:	4628      	mov	r0, r5
 800b952:	e7bb      	b.n	800b8cc <_dtoa_r+0x994>
 800b954:	2201      	movs	r2, #1
 800b956:	e7e1      	b.n	800b91c <_dtoa_r+0x9e4>
 800b958:	9b08      	ldr	r3, [sp, #32]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	db04      	blt.n	800b968 <_dtoa_r+0xa30>
 800b95e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b960:	430b      	orrs	r3, r1
 800b962:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b964:	430b      	orrs	r3, r1
 800b966:	d120      	bne.n	800b9aa <_dtoa_r+0xa72>
 800b968:	2a00      	cmp	r2, #0
 800b96a:	dded      	ble.n	800b948 <_dtoa_r+0xa10>
 800b96c:	4649      	mov	r1, r9
 800b96e:	2201      	movs	r2, #1
 800b970:	4658      	mov	r0, fp
 800b972:	f000 fb47 	bl	800c004 <__lshift>
 800b976:	4621      	mov	r1, r4
 800b978:	4681      	mov	r9, r0
 800b97a:	f000 fbaf 	bl	800c0dc <__mcmp>
 800b97e:	2800      	cmp	r0, #0
 800b980:	dc03      	bgt.n	800b98a <_dtoa_r+0xa52>
 800b982:	d1e1      	bne.n	800b948 <_dtoa_r+0xa10>
 800b984:	f018 0f01 	tst.w	r8, #1
 800b988:	d0de      	beq.n	800b948 <_dtoa_r+0xa10>
 800b98a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b98e:	d1d8      	bne.n	800b942 <_dtoa_r+0xa0a>
 800b990:	9a00      	ldr	r2, [sp, #0]
 800b992:	2339      	movs	r3, #57	@ 0x39
 800b994:	7013      	strb	r3, [r2, #0]
 800b996:	4633      	mov	r3, r6
 800b998:	461e      	mov	r6, r3
 800b99a:	3b01      	subs	r3, #1
 800b99c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b9a0:	2a39      	cmp	r2, #57	@ 0x39
 800b9a2:	d052      	beq.n	800ba4a <_dtoa_r+0xb12>
 800b9a4:	3201      	adds	r2, #1
 800b9a6:	701a      	strb	r2, [r3, #0]
 800b9a8:	e612      	b.n	800b5d0 <_dtoa_r+0x698>
 800b9aa:	2a00      	cmp	r2, #0
 800b9ac:	dd07      	ble.n	800b9be <_dtoa_r+0xa86>
 800b9ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9b2:	d0ed      	beq.n	800b990 <_dtoa_r+0xa58>
 800b9b4:	9a00      	ldr	r2, [sp, #0]
 800b9b6:	f108 0301 	add.w	r3, r8, #1
 800b9ba:	7013      	strb	r3, [r2, #0]
 800b9bc:	e608      	b.n	800b5d0 <_dtoa_r+0x698>
 800b9be:	9b07      	ldr	r3, [sp, #28]
 800b9c0:	9a07      	ldr	r2, [sp, #28]
 800b9c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b9c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d028      	beq.n	800ba1e <_dtoa_r+0xae6>
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	220a      	movs	r2, #10
 800b9d2:	4658      	mov	r0, fp
 800b9d4:	f000 f920 	bl	800bc18 <__multadd>
 800b9d8:	42af      	cmp	r7, r5
 800b9da:	4681      	mov	r9, r0
 800b9dc:	f04f 0300 	mov.w	r3, #0
 800b9e0:	f04f 020a 	mov.w	r2, #10
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	4658      	mov	r0, fp
 800b9e8:	d107      	bne.n	800b9fa <_dtoa_r+0xac2>
 800b9ea:	f000 f915 	bl	800bc18 <__multadd>
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	4605      	mov	r5, r0
 800b9f2:	9b07      	ldr	r3, [sp, #28]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	9307      	str	r3, [sp, #28]
 800b9f8:	e774      	b.n	800b8e4 <_dtoa_r+0x9ac>
 800b9fa:	f000 f90d 	bl	800bc18 <__multadd>
 800b9fe:	4629      	mov	r1, r5
 800ba00:	4607      	mov	r7, r0
 800ba02:	2300      	movs	r3, #0
 800ba04:	220a      	movs	r2, #10
 800ba06:	4658      	mov	r0, fp
 800ba08:	f000 f906 	bl	800bc18 <__multadd>
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	e7f0      	b.n	800b9f2 <_dtoa_r+0xaba>
 800ba10:	9b00      	ldr	r3, [sp, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	bfcc      	ite	gt
 800ba16:	461e      	movgt	r6, r3
 800ba18:	2601      	movle	r6, #1
 800ba1a:	4456      	add	r6, sl
 800ba1c:	2700      	movs	r7, #0
 800ba1e:	4649      	mov	r1, r9
 800ba20:	2201      	movs	r2, #1
 800ba22:	4658      	mov	r0, fp
 800ba24:	f000 faee 	bl	800c004 <__lshift>
 800ba28:	4621      	mov	r1, r4
 800ba2a:	4681      	mov	r9, r0
 800ba2c:	f000 fb56 	bl	800c0dc <__mcmp>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	dcb0      	bgt.n	800b996 <_dtoa_r+0xa5e>
 800ba34:	d102      	bne.n	800ba3c <_dtoa_r+0xb04>
 800ba36:	f018 0f01 	tst.w	r8, #1
 800ba3a:	d1ac      	bne.n	800b996 <_dtoa_r+0xa5e>
 800ba3c:	4633      	mov	r3, r6
 800ba3e:	461e      	mov	r6, r3
 800ba40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba44:	2a30      	cmp	r2, #48	@ 0x30
 800ba46:	d0fa      	beq.n	800ba3e <_dtoa_r+0xb06>
 800ba48:	e5c2      	b.n	800b5d0 <_dtoa_r+0x698>
 800ba4a:	459a      	cmp	sl, r3
 800ba4c:	d1a4      	bne.n	800b998 <_dtoa_r+0xa60>
 800ba4e:	9b04      	ldr	r3, [sp, #16]
 800ba50:	3301      	adds	r3, #1
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	2331      	movs	r3, #49	@ 0x31
 800ba56:	f88a 3000 	strb.w	r3, [sl]
 800ba5a:	e5b9      	b.n	800b5d0 <_dtoa_r+0x698>
 800ba5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800babc <_dtoa_r+0xb84>
 800ba62:	b11b      	cbz	r3, 800ba6c <_dtoa_r+0xb34>
 800ba64:	f10a 0308 	add.w	r3, sl, #8
 800ba68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	b019      	add	sp, #100	@ 0x64
 800ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	f77f ae37 	ble.w	800b6ea <_dtoa_r+0x7b2>
 800ba7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba80:	2001      	movs	r0, #1
 800ba82:	e655      	b.n	800b730 <_dtoa_r+0x7f8>
 800ba84:	9b00      	ldr	r3, [sp, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f77f aed6 	ble.w	800b838 <_dtoa_r+0x900>
 800ba8c:	4656      	mov	r6, sl
 800ba8e:	4621      	mov	r1, r4
 800ba90:	4648      	mov	r0, r9
 800ba92:	f7ff f9c9 	bl	800ae28 <quorem>
 800ba96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba9a:	f806 8b01 	strb.w	r8, [r6], #1
 800ba9e:	9b00      	ldr	r3, [sp, #0]
 800baa0:	eba6 020a 	sub.w	r2, r6, sl
 800baa4:	4293      	cmp	r3, r2
 800baa6:	ddb3      	ble.n	800ba10 <_dtoa_r+0xad8>
 800baa8:	4649      	mov	r1, r9
 800baaa:	2300      	movs	r3, #0
 800baac:	220a      	movs	r2, #10
 800baae:	4658      	mov	r0, fp
 800bab0:	f000 f8b2 	bl	800bc18 <__multadd>
 800bab4:	4681      	mov	r9, r0
 800bab6:	e7ea      	b.n	800ba8e <_dtoa_r+0xb56>
 800bab8:	0800e389 	.word	0x0800e389
 800babc:	0800e30d 	.word	0x0800e30d

0800bac0 <_free_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4605      	mov	r5, r0
 800bac4:	2900      	cmp	r1, #0
 800bac6:	d041      	beq.n	800bb4c <_free_r+0x8c>
 800bac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bacc:	1f0c      	subs	r4, r1, #4
 800bace:	2b00      	cmp	r3, #0
 800bad0:	bfb8      	it	lt
 800bad2:	18e4      	addlt	r4, r4, r3
 800bad4:	f7fe f8e4 	bl	8009ca0 <__malloc_lock>
 800bad8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb50 <_free_r+0x90>)
 800bada:	6813      	ldr	r3, [r2, #0]
 800badc:	b933      	cbnz	r3, 800baec <_free_r+0x2c>
 800bade:	6063      	str	r3, [r4, #4]
 800bae0:	6014      	str	r4, [r2, #0]
 800bae2:	4628      	mov	r0, r5
 800bae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bae8:	f7fe b8e0 	b.w	8009cac <__malloc_unlock>
 800baec:	42a3      	cmp	r3, r4
 800baee:	d908      	bls.n	800bb02 <_free_r+0x42>
 800baf0:	6820      	ldr	r0, [r4, #0]
 800baf2:	1821      	adds	r1, r4, r0
 800baf4:	428b      	cmp	r3, r1
 800baf6:	bf01      	itttt	eq
 800baf8:	6819      	ldreq	r1, [r3, #0]
 800bafa:	685b      	ldreq	r3, [r3, #4]
 800bafc:	1809      	addeq	r1, r1, r0
 800bafe:	6021      	streq	r1, [r4, #0]
 800bb00:	e7ed      	b.n	800bade <_free_r+0x1e>
 800bb02:	461a      	mov	r2, r3
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	b10b      	cbz	r3, 800bb0c <_free_r+0x4c>
 800bb08:	42a3      	cmp	r3, r4
 800bb0a:	d9fa      	bls.n	800bb02 <_free_r+0x42>
 800bb0c:	6811      	ldr	r1, [r2, #0]
 800bb0e:	1850      	adds	r0, r2, r1
 800bb10:	42a0      	cmp	r0, r4
 800bb12:	d10b      	bne.n	800bb2c <_free_r+0x6c>
 800bb14:	6820      	ldr	r0, [r4, #0]
 800bb16:	4401      	add	r1, r0
 800bb18:	1850      	adds	r0, r2, r1
 800bb1a:	4283      	cmp	r3, r0
 800bb1c:	6011      	str	r1, [r2, #0]
 800bb1e:	d1e0      	bne.n	800bae2 <_free_r+0x22>
 800bb20:	6818      	ldr	r0, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	6053      	str	r3, [r2, #4]
 800bb26:	4408      	add	r0, r1
 800bb28:	6010      	str	r0, [r2, #0]
 800bb2a:	e7da      	b.n	800bae2 <_free_r+0x22>
 800bb2c:	d902      	bls.n	800bb34 <_free_r+0x74>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	e7d6      	b.n	800bae2 <_free_r+0x22>
 800bb34:	6820      	ldr	r0, [r4, #0]
 800bb36:	1821      	adds	r1, r4, r0
 800bb38:	428b      	cmp	r3, r1
 800bb3a:	bf04      	itt	eq
 800bb3c:	6819      	ldreq	r1, [r3, #0]
 800bb3e:	685b      	ldreq	r3, [r3, #4]
 800bb40:	6063      	str	r3, [r4, #4]
 800bb42:	bf04      	itt	eq
 800bb44:	1809      	addeq	r1, r1, r0
 800bb46:	6021      	streq	r1, [r4, #0]
 800bb48:	6054      	str	r4, [r2, #4]
 800bb4a:	e7ca      	b.n	800bae2 <_free_r+0x22>
 800bb4c:	bd38      	pop	{r3, r4, r5, pc}
 800bb4e:	bf00      	nop
 800bb50:	2000067c 	.word	0x2000067c

0800bb54 <_Balloc>:
 800bb54:	b570      	push	{r4, r5, r6, lr}
 800bb56:	69c6      	ldr	r6, [r0, #28]
 800bb58:	4604      	mov	r4, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	b976      	cbnz	r6, 800bb7c <_Balloc+0x28>
 800bb5e:	2010      	movs	r0, #16
 800bb60:	f7fd ffec 	bl	8009b3c <malloc>
 800bb64:	4602      	mov	r2, r0
 800bb66:	61e0      	str	r0, [r4, #28]
 800bb68:	b920      	cbnz	r0, 800bb74 <_Balloc+0x20>
 800bb6a:	4b18      	ldr	r3, [pc, #96]	@ (800bbcc <_Balloc+0x78>)
 800bb6c:	4818      	ldr	r0, [pc, #96]	@ (800bbd0 <_Balloc+0x7c>)
 800bb6e:	216b      	movs	r1, #107	@ 0x6b
 800bb70:	f7fd ffc6 	bl	8009b00 <__assert_func>
 800bb74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb78:	6006      	str	r6, [r0, #0]
 800bb7a:	60c6      	str	r6, [r0, #12]
 800bb7c:	69e6      	ldr	r6, [r4, #28]
 800bb7e:	68f3      	ldr	r3, [r6, #12]
 800bb80:	b183      	cbz	r3, 800bba4 <_Balloc+0x50>
 800bb82:	69e3      	ldr	r3, [r4, #28]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb8a:	b9b8      	cbnz	r0, 800bbbc <_Balloc+0x68>
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	fa01 f605 	lsl.w	r6, r1, r5
 800bb92:	1d72      	adds	r2, r6, #5
 800bb94:	0092      	lsls	r2, r2, #2
 800bb96:	4620      	mov	r0, r4
 800bb98:	f001 ff0a 	bl	800d9b0 <_calloc_r>
 800bb9c:	b160      	cbz	r0, 800bbb8 <_Balloc+0x64>
 800bb9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bba2:	e00e      	b.n	800bbc2 <_Balloc+0x6e>
 800bba4:	2221      	movs	r2, #33	@ 0x21
 800bba6:	2104      	movs	r1, #4
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f001 ff01 	bl	800d9b0 <_calloc_r>
 800bbae:	69e3      	ldr	r3, [r4, #28]
 800bbb0:	60f0      	str	r0, [r6, #12]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1e4      	bne.n	800bb82 <_Balloc+0x2e>
 800bbb8:	2000      	movs	r0, #0
 800bbba:	bd70      	pop	{r4, r5, r6, pc}
 800bbbc:	6802      	ldr	r2, [r0, #0]
 800bbbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbc8:	e7f7      	b.n	800bbba <_Balloc+0x66>
 800bbca:	bf00      	nop
 800bbcc:	0800e31a 	.word	0x0800e31a
 800bbd0:	0800e39a 	.word	0x0800e39a

0800bbd4 <_Bfree>:
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	69c6      	ldr	r6, [r0, #28]
 800bbd8:	4605      	mov	r5, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	b976      	cbnz	r6, 800bbfc <_Bfree+0x28>
 800bbde:	2010      	movs	r0, #16
 800bbe0:	f7fd ffac 	bl	8009b3c <malloc>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	61e8      	str	r0, [r5, #28]
 800bbe8:	b920      	cbnz	r0, 800bbf4 <_Bfree+0x20>
 800bbea:	4b09      	ldr	r3, [pc, #36]	@ (800bc10 <_Bfree+0x3c>)
 800bbec:	4809      	ldr	r0, [pc, #36]	@ (800bc14 <_Bfree+0x40>)
 800bbee:	218f      	movs	r1, #143	@ 0x8f
 800bbf0:	f7fd ff86 	bl	8009b00 <__assert_func>
 800bbf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbf8:	6006      	str	r6, [r0, #0]
 800bbfa:	60c6      	str	r6, [r0, #12]
 800bbfc:	b13c      	cbz	r4, 800bc0e <_Bfree+0x3a>
 800bbfe:	69eb      	ldr	r3, [r5, #28]
 800bc00:	6862      	ldr	r2, [r4, #4]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc08:	6021      	str	r1, [r4, #0]
 800bc0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}
 800bc10:	0800e31a 	.word	0x0800e31a
 800bc14:	0800e39a 	.word	0x0800e39a

0800bc18 <__multadd>:
 800bc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1c:	690d      	ldr	r5, [r1, #16]
 800bc1e:	4607      	mov	r7, r0
 800bc20:	460c      	mov	r4, r1
 800bc22:	461e      	mov	r6, r3
 800bc24:	f101 0c14 	add.w	ip, r1, #20
 800bc28:	2000      	movs	r0, #0
 800bc2a:	f8dc 3000 	ldr.w	r3, [ip]
 800bc2e:	b299      	uxth	r1, r3
 800bc30:	fb02 6101 	mla	r1, r2, r1, r6
 800bc34:	0c1e      	lsrs	r6, r3, #16
 800bc36:	0c0b      	lsrs	r3, r1, #16
 800bc38:	fb02 3306 	mla	r3, r2, r6, r3
 800bc3c:	b289      	uxth	r1, r1
 800bc3e:	3001      	adds	r0, #1
 800bc40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc44:	4285      	cmp	r5, r0
 800bc46:	f84c 1b04 	str.w	r1, [ip], #4
 800bc4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc4e:	dcec      	bgt.n	800bc2a <__multadd+0x12>
 800bc50:	b30e      	cbz	r6, 800bc96 <__multadd+0x7e>
 800bc52:	68a3      	ldr	r3, [r4, #8]
 800bc54:	42ab      	cmp	r3, r5
 800bc56:	dc19      	bgt.n	800bc8c <__multadd+0x74>
 800bc58:	6861      	ldr	r1, [r4, #4]
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	3101      	adds	r1, #1
 800bc5e:	f7ff ff79 	bl	800bb54 <_Balloc>
 800bc62:	4680      	mov	r8, r0
 800bc64:	b928      	cbnz	r0, 800bc72 <__multadd+0x5a>
 800bc66:	4602      	mov	r2, r0
 800bc68:	4b0c      	ldr	r3, [pc, #48]	@ (800bc9c <__multadd+0x84>)
 800bc6a:	480d      	ldr	r0, [pc, #52]	@ (800bca0 <__multadd+0x88>)
 800bc6c:	21ba      	movs	r1, #186	@ 0xba
 800bc6e:	f7fd ff47 	bl	8009b00 <__assert_func>
 800bc72:	6922      	ldr	r2, [r4, #16]
 800bc74:	3202      	adds	r2, #2
 800bc76:	f104 010c 	add.w	r1, r4, #12
 800bc7a:	0092      	lsls	r2, r2, #2
 800bc7c:	300c      	adds	r0, #12
 800bc7e:	f7ff f8be 	bl	800adfe <memcpy>
 800bc82:	4621      	mov	r1, r4
 800bc84:	4638      	mov	r0, r7
 800bc86:	f7ff ffa5 	bl	800bbd4 <_Bfree>
 800bc8a:	4644      	mov	r4, r8
 800bc8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc90:	3501      	adds	r5, #1
 800bc92:	615e      	str	r6, [r3, #20]
 800bc94:	6125      	str	r5, [r4, #16]
 800bc96:	4620      	mov	r0, r4
 800bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc9c:	0800e389 	.word	0x0800e389
 800bca0:	0800e39a 	.word	0x0800e39a

0800bca4 <__s2b>:
 800bca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca8:	460c      	mov	r4, r1
 800bcaa:	4615      	mov	r5, r2
 800bcac:	461f      	mov	r7, r3
 800bcae:	2209      	movs	r2, #9
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcb8:	2100      	movs	r1, #0
 800bcba:	2201      	movs	r2, #1
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	db09      	blt.n	800bcd4 <__s2b+0x30>
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7ff ff47 	bl	800bb54 <_Balloc>
 800bcc6:	b940      	cbnz	r0, 800bcda <__s2b+0x36>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	4b19      	ldr	r3, [pc, #100]	@ (800bd30 <__s2b+0x8c>)
 800bccc:	4819      	ldr	r0, [pc, #100]	@ (800bd34 <__s2b+0x90>)
 800bcce:	21d3      	movs	r1, #211	@ 0xd3
 800bcd0:	f7fd ff16 	bl	8009b00 <__assert_func>
 800bcd4:	0052      	lsls	r2, r2, #1
 800bcd6:	3101      	adds	r1, #1
 800bcd8:	e7f0      	b.n	800bcbc <__s2b+0x18>
 800bcda:	9b08      	ldr	r3, [sp, #32]
 800bcdc:	6143      	str	r3, [r0, #20]
 800bcde:	2d09      	cmp	r5, #9
 800bce0:	f04f 0301 	mov.w	r3, #1
 800bce4:	6103      	str	r3, [r0, #16]
 800bce6:	dd16      	ble.n	800bd16 <__s2b+0x72>
 800bce8:	f104 0909 	add.w	r9, r4, #9
 800bcec:	46c8      	mov	r8, r9
 800bcee:	442c      	add	r4, r5
 800bcf0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcf4:	4601      	mov	r1, r0
 800bcf6:	3b30      	subs	r3, #48	@ 0x30
 800bcf8:	220a      	movs	r2, #10
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7ff ff8c 	bl	800bc18 <__multadd>
 800bd00:	45a0      	cmp	r8, r4
 800bd02:	d1f5      	bne.n	800bcf0 <__s2b+0x4c>
 800bd04:	f1a5 0408 	sub.w	r4, r5, #8
 800bd08:	444c      	add	r4, r9
 800bd0a:	1b2d      	subs	r5, r5, r4
 800bd0c:	1963      	adds	r3, r4, r5
 800bd0e:	42bb      	cmp	r3, r7
 800bd10:	db04      	blt.n	800bd1c <__s2b+0x78>
 800bd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd16:	340a      	adds	r4, #10
 800bd18:	2509      	movs	r5, #9
 800bd1a:	e7f6      	b.n	800bd0a <__s2b+0x66>
 800bd1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd20:	4601      	mov	r1, r0
 800bd22:	3b30      	subs	r3, #48	@ 0x30
 800bd24:	220a      	movs	r2, #10
 800bd26:	4630      	mov	r0, r6
 800bd28:	f7ff ff76 	bl	800bc18 <__multadd>
 800bd2c:	e7ee      	b.n	800bd0c <__s2b+0x68>
 800bd2e:	bf00      	nop
 800bd30:	0800e389 	.word	0x0800e389
 800bd34:	0800e39a 	.word	0x0800e39a

0800bd38 <__hi0bits>:
 800bd38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	bf36      	itet	cc
 800bd40:	0403      	lslcc	r3, r0, #16
 800bd42:	2000      	movcs	r0, #0
 800bd44:	2010      	movcc	r0, #16
 800bd46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd4a:	bf3c      	itt	cc
 800bd4c:	021b      	lslcc	r3, r3, #8
 800bd4e:	3008      	addcc	r0, #8
 800bd50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd54:	bf3c      	itt	cc
 800bd56:	011b      	lslcc	r3, r3, #4
 800bd58:	3004      	addcc	r0, #4
 800bd5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd5e:	bf3c      	itt	cc
 800bd60:	009b      	lslcc	r3, r3, #2
 800bd62:	3002      	addcc	r0, #2
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	db05      	blt.n	800bd74 <__hi0bits+0x3c>
 800bd68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd6c:	f100 0001 	add.w	r0, r0, #1
 800bd70:	bf08      	it	eq
 800bd72:	2020      	moveq	r0, #32
 800bd74:	4770      	bx	lr

0800bd76 <__lo0bits>:
 800bd76:	6803      	ldr	r3, [r0, #0]
 800bd78:	4602      	mov	r2, r0
 800bd7a:	f013 0007 	ands.w	r0, r3, #7
 800bd7e:	d00b      	beq.n	800bd98 <__lo0bits+0x22>
 800bd80:	07d9      	lsls	r1, r3, #31
 800bd82:	d421      	bmi.n	800bdc8 <__lo0bits+0x52>
 800bd84:	0798      	lsls	r0, r3, #30
 800bd86:	bf49      	itett	mi
 800bd88:	085b      	lsrmi	r3, r3, #1
 800bd8a:	089b      	lsrpl	r3, r3, #2
 800bd8c:	2001      	movmi	r0, #1
 800bd8e:	6013      	strmi	r3, [r2, #0]
 800bd90:	bf5c      	itt	pl
 800bd92:	6013      	strpl	r3, [r2, #0]
 800bd94:	2002      	movpl	r0, #2
 800bd96:	4770      	bx	lr
 800bd98:	b299      	uxth	r1, r3
 800bd9a:	b909      	cbnz	r1, 800bda0 <__lo0bits+0x2a>
 800bd9c:	0c1b      	lsrs	r3, r3, #16
 800bd9e:	2010      	movs	r0, #16
 800bda0:	b2d9      	uxtb	r1, r3
 800bda2:	b909      	cbnz	r1, 800bda8 <__lo0bits+0x32>
 800bda4:	3008      	adds	r0, #8
 800bda6:	0a1b      	lsrs	r3, r3, #8
 800bda8:	0719      	lsls	r1, r3, #28
 800bdaa:	bf04      	itt	eq
 800bdac:	091b      	lsreq	r3, r3, #4
 800bdae:	3004      	addeq	r0, #4
 800bdb0:	0799      	lsls	r1, r3, #30
 800bdb2:	bf04      	itt	eq
 800bdb4:	089b      	lsreq	r3, r3, #2
 800bdb6:	3002      	addeq	r0, #2
 800bdb8:	07d9      	lsls	r1, r3, #31
 800bdba:	d403      	bmi.n	800bdc4 <__lo0bits+0x4e>
 800bdbc:	085b      	lsrs	r3, r3, #1
 800bdbe:	f100 0001 	add.w	r0, r0, #1
 800bdc2:	d003      	beq.n	800bdcc <__lo0bits+0x56>
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	4770      	bx	lr
 800bdc8:	2000      	movs	r0, #0
 800bdca:	4770      	bx	lr
 800bdcc:	2020      	movs	r0, #32
 800bdce:	4770      	bx	lr

0800bdd0 <__i2b>:
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	f7ff febd 	bl	800bb54 <_Balloc>
 800bdda:	4602      	mov	r2, r0
 800bddc:	b928      	cbnz	r0, 800bdea <__i2b+0x1a>
 800bdde:	4b05      	ldr	r3, [pc, #20]	@ (800bdf4 <__i2b+0x24>)
 800bde0:	4805      	ldr	r0, [pc, #20]	@ (800bdf8 <__i2b+0x28>)
 800bde2:	f240 1145 	movw	r1, #325	@ 0x145
 800bde6:	f7fd fe8b 	bl	8009b00 <__assert_func>
 800bdea:	2301      	movs	r3, #1
 800bdec:	6144      	str	r4, [r0, #20]
 800bdee:	6103      	str	r3, [r0, #16]
 800bdf0:	bd10      	pop	{r4, pc}
 800bdf2:	bf00      	nop
 800bdf4:	0800e389 	.word	0x0800e389
 800bdf8:	0800e39a 	.word	0x0800e39a

0800bdfc <__multiply>:
 800bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	4614      	mov	r4, r2
 800be02:	690a      	ldr	r2, [r1, #16]
 800be04:	6923      	ldr	r3, [r4, #16]
 800be06:	429a      	cmp	r2, r3
 800be08:	bfa8      	it	ge
 800be0a:	4623      	movge	r3, r4
 800be0c:	460f      	mov	r7, r1
 800be0e:	bfa4      	itt	ge
 800be10:	460c      	movge	r4, r1
 800be12:	461f      	movge	r7, r3
 800be14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be1c:	68a3      	ldr	r3, [r4, #8]
 800be1e:	6861      	ldr	r1, [r4, #4]
 800be20:	eb0a 0609 	add.w	r6, sl, r9
 800be24:	42b3      	cmp	r3, r6
 800be26:	b085      	sub	sp, #20
 800be28:	bfb8      	it	lt
 800be2a:	3101      	addlt	r1, #1
 800be2c:	f7ff fe92 	bl	800bb54 <_Balloc>
 800be30:	b930      	cbnz	r0, 800be40 <__multiply+0x44>
 800be32:	4602      	mov	r2, r0
 800be34:	4b44      	ldr	r3, [pc, #272]	@ (800bf48 <__multiply+0x14c>)
 800be36:	4845      	ldr	r0, [pc, #276]	@ (800bf4c <__multiply+0x150>)
 800be38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be3c:	f7fd fe60 	bl	8009b00 <__assert_func>
 800be40:	f100 0514 	add.w	r5, r0, #20
 800be44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be48:	462b      	mov	r3, r5
 800be4a:	2200      	movs	r2, #0
 800be4c:	4543      	cmp	r3, r8
 800be4e:	d321      	bcc.n	800be94 <__multiply+0x98>
 800be50:	f107 0114 	add.w	r1, r7, #20
 800be54:	f104 0214 	add.w	r2, r4, #20
 800be58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be60:	9302      	str	r3, [sp, #8]
 800be62:	1b13      	subs	r3, r2, r4
 800be64:	3b15      	subs	r3, #21
 800be66:	f023 0303 	bic.w	r3, r3, #3
 800be6a:	3304      	adds	r3, #4
 800be6c:	f104 0715 	add.w	r7, r4, #21
 800be70:	42ba      	cmp	r2, r7
 800be72:	bf38      	it	cc
 800be74:	2304      	movcc	r3, #4
 800be76:	9301      	str	r3, [sp, #4]
 800be78:	9b02      	ldr	r3, [sp, #8]
 800be7a:	9103      	str	r1, [sp, #12]
 800be7c:	428b      	cmp	r3, r1
 800be7e:	d80c      	bhi.n	800be9a <__multiply+0x9e>
 800be80:	2e00      	cmp	r6, #0
 800be82:	dd03      	ble.n	800be8c <__multiply+0x90>
 800be84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d05b      	beq.n	800bf44 <__multiply+0x148>
 800be8c:	6106      	str	r6, [r0, #16]
 800be8e:	b005      	add	sp, #20
 800be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be94:	f843 2b04 	str.w	r2, [r3], #4
 800be98:	e7d8      	b.n	800be4c <__multiply+0x50>
 800be9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800be9e:	f1ba 0f00 	cmp.w	sl, #0
 800bea2:	d024      	beq.n	800beee <__multiply+0xf2>
 800bea4:	f104 0e14 	add.w	lr, r4, #20
 800bea8:	46a9      	mov	r9, r5
 800beaa:	f04f 0c00 	mov.w	ip, #0
 800beae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800beb2:	f8d9 3000 	ldr.w	r3, [r9]
 800beb6:	fa1f fb87 	uxth.w	fp, r7
 800beba:	b29b      	uxth	r3, r3
 800bebc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bec0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bec4:	f8d9 7000 	ldr.w	r7, [r9]
 800bec8:	4463      	add	r3, ip
 800beca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bece:	fb0a c70b 	mla	r7, sl, fp, ip
 800bed2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bedc:	4572      	cmp	r2, lr
 800bede:	f849 3b04 	str.w	r3, [r9], #4
 800bee2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bee6:	d8e2      	bhi.n	800beae <__multiply+0xb2>
 800bee8:	9b01      	ldr	r3, [sp, #4]
 800beea:	f845 c003 	str.w	ip, [r5, r3]
 800beee:	9b03      	ldr	r3, [sp, #12]
 800bef0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bef4:	3104      	adds	r1, #4
 800bef6:	f1b9 0f00 	cmp.w	r9, #0
 800befa:	d021      	beq.n	800bf40 <__multiply+0x144>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	f104 0c14 	add.w	ip, r4, #20
 800bf02:	46ae      	mov	lr, r5
 800bf04:	f04f 0a00 	mov.w	sl, #0
 800bf08:	f8bc b000 	ldrh.w	fp, [ip]
 800bf0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf10:	fb09 770b 	mla	r7, r9, fp, r7
 800bf14:	4457      	add	r7, sl
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf1c:	f84e 3b04 	str.w	r3, [lr], #4
 800bf20:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf28:	f8be 3000 	ldrh.w	r3, [lr]
 800bf2c:	fb09 330a 	mla	r3, r9, sl, r3
 800bf30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf34:	4562      	cmp	r2, ip
 800bf36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf3a:	d8e5      	bhi.n	800bf08 <__multiply+0x10c>
 800bf3c:	9f01      	ldr	r7, [sp, #4]
 800bf3e:	51eb      	str	r3, [r5, r7]
 800bf40:	3504      	adds	r5, #4
 800bf42:	e799      	b.n	800be78 <__multiply+0x7c>
 800bf44:	3e01      	subs	r6, #1
 800bf46:	e79b      	b.n	800be80 <__multiply+0x84>
 800bf48:	0800e389 	.word	0x0800e389
 800bf4c:	0800e39a 	.word	0x0800e39a

0800bf50 <__pow5mult>:
 800bf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf54:	4615      	mov	r5, r2
 800bf56:	f012 0203 	ands.w	r2, r2, #3
 800bf5a:	4607      	mov	r7, r0
 800bf5c:	460e      	mov	r6, r1
 800bf5e:	d007      	beq.n	800bf70 <__pow5mult+0x20>
 800bf60:	4c25      	ldr	r4, [pc, #148]	@ (800bff8 <__pow5mult+0xa8>)
 800bf62:	3a01      	subs	r2, #1
 800bf64:	2300      	movs	r3, #0
 800bf66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf6a:	f7ff fe55 	bl	800bc18 <__multadd>
 800bf6e:	4606      	mov	r6, r0
 800bf70:	10ad      	asrs	r5, r5, #2
 800bf72:	d03d      	beq.n	800bff0 <__pow5mult+0xa0>
 800bf74:	69fc      	ldr	r4, [r7, #28]
 800bf76:	b97c      	cbnz	r4, 800bf98 <__pow5mult+0x48>
 800bf78:	2010      	movs	r0, #16
 800bf7a:	f7fd fddf 	bl	8009b3c <malloc>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	61f8      	str	r0, [r7, #28]
 800bf82:	b928      	cbnz	r0, 800bf90 <__pow5mult+0x40>
 800bf84:	4b1d      	ldr	r3, [pc, #116]	@ (800bffc <__pow5mult+0xac>)
 800bf86:	481e      	ldr	r0, [pc, #120]	@ (800c000 <__pow5mult+0xb0>)
 800bf88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf8c:	f7fd fdb8 	bl	8009b00 <__assert_func>
 800bf90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf94:	6004      	str	r4, [r0, #0]
 800bf96:	60c4      	str	r4, [r0, #12]
 800bf98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfa0:	b94c      	cbnz	r4, 800bfb6 <__pow5mult+0x66>
 800bfa2:	f240 2171 	movw	r1, #625	@ 0x271
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	f7ff ff12 	bl	800bdd0 <__i2b>
 800bfac:	2300      	movs	r3, #0
 800bfae:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	6003      	str	r3, [r0, #0]
 800bfb6:	f04f 0900 	mov.w	r9, #0
 800bfba:	07eb      	lsls	r3, r5, #31
 800bfbc:	d50a      	bpl.n	800bfd4 <__pow5mult+0x84>
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	f7ff ff1a 	bl	800bdfc <__multiply>
 800bfc8:	4631      	mov	r1, r6
 800bfca:	4680      	mov	r8, r0
 800bfcc:	4638      	mov	r0, r7
 800bfce:	f7ff fe01 	bl	800bbd4 <_Bfree>
 800bfd2:	4646      	mov	r6, r8
 800bfd4:	106d      	asrs	r5, r5, #1
 800bfd6:	d00b      	beq.n	800bff0 <__pow5mult+0xa0>
 800bfd8:	6820      	ldr	r0, [r4, #0]
 800bfda:	b938      	cbnz	r0, 800bfec <__pow5mult+0x9c>
 800bfdc:	4622      	mov	r2, r4
 800bfde:	4621      	mov	r1, r4
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	f7ff ff0b 	bl	800bdfc <__multiply>
 800bfe6:	6020      	str	r0, [r4, #0]
 800bfe8:	f8c0 9000 	str.w	r9, [r0]
 800bfec:	4604      	mov	r4, r0
 800bfee:	e7e4      	b.n	800bfba <__pow5mult+0x6a>
 800bff0:	4630      	mov	r0, r6
 800bff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff6:	bf00      	nop
 800bff8:	0800e3f4 	.word	0x0800e3f4
 800bffc:	0800e31a 	.word	0x0800e31a
 800c000:	0800e39a 	.word	0x0800e39a

0800c004 <__lshift>:
 800c004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c008:	460c      	mov	r4, r1
 800c00a:	6849      	ldr	r1, [r1, #4]
 800c00c:	6923      	ldr	r3, [r4, #16]
 800c00e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c012:	68a3      	ldr	r3, [r4, #8]
 800c014:	4607      	mov	r7, r0
 800c016:	4691      	mov	r9, r2
 800c018:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c01c:	f108 0601 	add.w	r6, r8, #1
 800c020:	42b3      	cmp	r3, r6
 800c022:	db0b      	blt.n	800c03c <__lshift+0x38>
 800c024:	4638      	mov	r0, r7
 800c026:	f7ff fd95 	bl	800bb54 <_Balloc>
 800c02a:	4605      	mov	r5, r0
 800c02c:	b948      	cbnz	r0, 800c042 <__lshift+0x3e>
 800c02e:	4602      	mov	r2, r0
 800c030:	4b28      	ldr	r3, [pc, #160]	@ (800c0d4 <__lshift+0xd0>)
 800c032:	4829      	ldr	r0, [pc, #164]	@ (800c0d8 <__lshift+0xd4>)
 800c034:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c038:	f7fd fd62 	bl	8009b00 <__assert_func>
 800c03c:	3101      	adds	r1, #1
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	e7ee      	b.n	800c020 <__lshift+0x1c>
 800c042:	2300      	movs	r3, #0
 800c044:	f100 0114 	add.w	r1, r0, #20
 800c048:	f100 0210 	add.w	r2, r0, #16
 800c04c:	4618      	mov	r0, r3
 800c04e:	4553      	cmp	r3, sl
 800c050:	db33      	blt.n	800c0ba <__lshift+0xb6>
 800c052:	6920      	ldr	r0, [r4, #16]
 800c054:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c058:	f104 0314 	add.w	r3, r4, #20
 800c05c:	f019 091f 	ands.w	r9, r9, #31
 800c060:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c064:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c068:	d02b      	beq.n	800c0c2 <__lshift+0xbe>
 800c06a:	f1c9 0e20 	rsb	lr, r9, #32
 800c06e:	468a      	mov	sl, r1
 800c070:	2200      	movs	r2, #0
 800c072:	6818      	ldr	r0, [r3, #0]
 800c074:	fa00 f009 	lsl.w	r0, r0, r9
 800c078:	4310      	orrs	r0, r2
 800c07a:	f84a 0b04 	str.w	r0, [sl], #4
 800c07e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c082:	459c      	cmp	ip, r3
 800c084:	fa22 f20e 	lsr.w	r2, r2, lr
 800c088:	d8f3      	bhi.n	800c072 <__lshift+0x6e>
 800c08a:	ebac 0304 	sub.w	r3, ip, r4
 800c08e:	3b15      	subs	r3, #21
 800c090:	f023 0303 	bic.w	r3, r3, #3
 800c094:	3304      	adds	r3, #4
 800c096:	f104 0015 	add.w	r0, r4, #21
 800c09a:	4584      	cmp	ip, r0
 800c09c:	bf38      	it	cc
 800c09e:	2304      	movcc	r3, #4
 800c0a0:	50ca      	str	r2, [r1, r3]
 800c0a2:	b10a      	cbz	r2, 800c0a8 <__lshift+0xa4>
 800c0a4:	f108 0602 	add.w	r6, r8, #2
 800c0a8:	3e01      	subs	r6, #1
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	612e      	str	r6, [r5, #16]
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	f7ff fd90 	bl	800bbd4 <_Bfree>
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0be:	3301      	adds	r3, #1
 800c0c0:	e7c5      	b.n	800c04e <__lshift+0x4a>
 800c0c2:	3904      	subs	r1, #4
 800c0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0cc:	459c      	cmp	ip, r3
 800c0ce:	d8f9      	bhi.n	800c0c4 <__lshift+0xc0>
 800c0d0:	e7ea      	b.n	800c0a8 <__lshift+0xa4>
 800c0d2:	bf00      	nop
 800c0d4:	0800e389 	.word	0x0800e389
 800c0d8:	0800e39a 	.word	0x0800e39a

0800c0dc <__mcmp>:
 800c0dc:	690a      	ldr	r2, [r1, #16]
 800c0de:	4603      	mov	r3, r0
 800c0e0:	6900      	ldr	r0, [r0, #16]
 800c0e2:	1a80      	subs	r0, r0, r2
 800c0e4:	b530      	push	{r4, r5, lr}
 800c0e6:	d10e      	bne.n	800c106 <__mcmp+0x2a>
 800c0e8:	3314      	adds	r3, #20
 800c0ea:	3114      	adds	r1, #20
 800c0ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0fc:	4295      	cmp	r5, r2
 800c0fe:	d003      	beq.n	800c108 <__mcmp+0x2c>
 800c100:	d205      	bcs.n	800c10e <__mcmp+0x32>
 800c102:	f04f 30ff 	mov.w	r0, #4294967295
 800c106:	bd30      	pop	{r4, r5, pc}
 800c108:	42a3      	cmp	r3, r4
 800c10a:	d3f3      	bcc.n	800c0f4 <__mcmp+0x18>
 800c10c:	e7fb      	b.n	800c106 <__mcmp+0x2a>
 800c10e:	2001      	movs	r0, #1
 800c110:	e7f9      	b.n	800c106 <__mcmp+0x2a>
	...

0800c114 <__mdiff>:
 800c114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c118:	4689      	mov	r9, r1
 800c11a:	4606      	mov	r6, r0
 800c11c:	4611      	mov	r1, r2
 800c11e:	4648      	mov	r0, r9
 800c120:	4614      	mov	r4, r2
 800c122:	f7ff ffdb 	bl	800c0dc <__mcmp>
 800c126:	1e05      	subs	r5, r0, #0
 800c128:	d112      	bne.n	800c150 <__mdiff+0x3c>
 800c12a:	4629      	mov	r1, r5
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7ff fd11 	bl	800bb54 <_Balloc>
 800c132:	4602      	mov	r2, r0
 800c134:	b928      	cbnz	r0, 800c142 <__mdiff+0x2e>
 800c136:	4b3f      	ldr	r3, [pc, #252]	@ (800c234 <__mdiff+0x120>)
 800c138:	f240 2137 	movw	r1, #567	@ 0x237
 800c13c:	483e      	ldr	r0, [pc, #248]	@ (800c238 <__mdiff+0x124>)
 800c13e:	f7fd fcdf 	bl	8009b00 <__assert_func>
 800c142:	2301      	movs	r3, #1
 800c144:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c148:	4610      	mov	r0, r2
 800c14a:	b003      	add	sp, #12
 800c14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c150:	bfbc      	itt	lt
 800c152:	464b      	movlt	r3, r9
 800c154:	46a1      	movlt	r9, r4
 800c156:	4630      	mov	r0, r6
 800c158:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c15c:	bfba      	itte	lt
 800c15e:	461c      	movlt	r4, r3
 800c160:	2501      	movlt	r5, #1
 800c162:	2500      	movge	r5, #0
 800c164:	f7ff fcf6 	bl	800bb54 <_Balloc>
 800c168:	4602      	mov	r2, r0
 800c16a:	b918      	cbnz	r0, 800c174 <__mdiff+0x60>
 800c16c:	4b31      	ldr	r3, [pc, #196]	@ (800c234 <__mdiff+0x120>)
 800c16e:	f240 2145 	movw	r1, #581	@ 0x245
 800c172:	e7e3      	b.n	800c13c <__mdiff+0x28>
 800c174:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c178:	6926      	ldr	r6, [r4, #16]
 800c17a:	60c5      	str	r5, [r0, #12]
 800c17c:	f109 0310 	add.w	r3, r9, #16
 800c180:	f109 0514 	add.w	r5, r9, #20
 800c184:	f104 0e14 	add.w	lr, r4, #20
 800c188:	f100 0b14 	add.w	fp, r0, #20
 800c18c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c190:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c194:	9301      	str	r3, [sp, #4]
 800c196:	46d9      	mov	r9, fp
 800c198:	f04f 0c00 	mov.w	ip, #0
 800c19c:	9b01      	ldr	r3, [sp, #4]
 800c19e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	fa1f f38a 	uxth.w	r3, sl
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	b283      	uxth	r3, r0
 800c1b0:	1acb      	subs	r3, r1, r3
 800c1b2:	0c00      	lsrs	r0, r0, #16
 800c1b4:	4463      	add	r3, ip
 800c1b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1c4:	4576      	cmp	r6, lr
 800c1c6:	f849 3b04 	str.w	r3, [r9], #4
 800c1ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1ce:	d8e5      	bhi.n	800c19c <__mdiff+0x88>
 800c1d0:	1b33      	subs	r3, r6, r4
 800c1d2:	3b15      	subs	r3, #21
 800c1d4:	f023 0303 	bic.w	r3, r3, #3
 800c1d8:	3415      	adds	r4, #21
 800c1da:	3304      	adds	r3, #4
 800c1dc:	42a6      	cmp	r6, r4
 800c1de:	bf38      	it	cc
 800c1e0:	2304      	movcc	r3, #4
 800c1e2:	441d      	add	r5, r3
 800c1e4:	445b      	add	r3, fp
 800c1e6:	461e      	mov	r6, r3
 800c1e8:	462c      	mov	r4, r5
 800c1ea:	4544      	cmp	r4, r8
 800c1ec:	d30e      	bcc.n	800c20c <__mdiff+0xf8>
 800c1ee:	f108 0103 	add.w	r1, r8, #3
 800c1f2:	1b49      	subs	r1, r1, r5
 800c1f4:	f021 0103 	bic.w	r1, r1, #3
 800c1f8:	3d03      	subs	r5, #3
 800c1fa:	45a8      	cmp	r8, r5
 800c1fc:	bf38      	it	cc
 800c1fe:	2100      	movcc	r1, #0
 800c200:	440b      	add	r3, r1
 800c202:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c206:	b191      	cbz	r1, 800c22e <__mdiff+0x11a>
 800c208:	6117      	str	r7, [r2, #16]
 800c20a:	e79d      	b.n	800c148 <__mdiff+0x34>
 800c20c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c210:	46e6      	mov	lr, ip
 800c212:	0c08      	lsrs	r0, r1, #16
 800c214:	fa1c fc81 	uxtah	ip, ip, r1
 800c218:	4471      	add	r1, lr
 800c21a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c21e:	b289      	uxth	r1, r1
 800c220:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c224:	f846 1b04 	str.w	r1, [r6], #4
 800c228:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c22c:	e7dd      	b.n	800c1ea <__mdiff+0xd6>
 800c22e:	3f01      	subs	r7, #1
 800c230:	e7e7      	b.n	800c202 <__mdiff+0xee>
 800c232:	bf00      	nop
 800c234:	0800e389 	.word	0x0800e389
 800c238:	0800e39a 	.word	0x0800e39a

0800c23c <__ulp>:
 800c23c:	b082      	sub	sp, #8
 800c23e:	ed8d 0b00 	vstr	d0, [sp]
 800c242:	9a01      	ldr	r2, [sp, #4]
 800c244:	4b0f      	ldr	r3, [pc, #60]	@ (800c284 <__ulp+0x48>)
 800c246:	4013      	ands	r3, r2
 800c248:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	dc08      	bgt.n	800c262 <__ulp+0x26>
 800c250:	425b      	negs	r3, r3
 800c252:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c256:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c25a:	da04      	bge.n	800c266 <__ulp+0x2a>
 800c25c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c260:	4113      	asrs	r3, r2
 800c262:	2200      	movs	r2, #0
 800c264:	e008      	b.n	800c278 <__ulp+0x3c>
 800c266:	f1a2 0314 	sub.w	r3, r2, #20
 800c26a:	2b1e      	cmp	r3, #30
 800c26c:	bfda      	itte	le
 800c26e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c272:	40da      	lsrle	r2, r3
 800c274:	2201      	movgt	r2, #1
 800c276:	2300      	movs	r3, #0
 800c278:	4619      	mov	r1, r3
 800c27a:	4610      	mov	r0, r2
 800c27c:	ec41 0b10 	vmov	d0, r0, r1
 800c280:	b002      	add	sp, #8
 800c282:	4770      	bx	lr
 800c284:	7ff00000 	.word	0x7ff00000

0800c288 <__b2d>:
 800c288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28c:	6906      	ldr	r6, [r0, #16]
 800c28e:	f100 0814 	add.w	r8, r0, #20
 800c292:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c296:	1f37      	subs	r7, r6, #4
 800c298:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c29c:	4610      	mov	r0, r2
 800c29e:	f7ff fd4b 	bl	800bd38 <__hi0bits>
 800c2a2:	f1c0 0320 	rsb	r3, r0, #32
 800c2a6:	280a      	cmp	r0, #10
 800c2a8:	600b      	str	r3, [r1, #0]
 800c2aa:	491b      	ldr	r1, [pc, #108]	@ (800c318 <__b2d+0x90>)
 800c2ac:	dc15      	bgt.n	800c2da <__b2d+0x52>
 800c2ae:	f1c0 0c0b 	rsb	ip, r0, #11
 800c2b2:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	ea43 0501 	orr.w	r5, r3, r1
 800c2bc:	bf34      	ite	cc
 800c2be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2c2:	2300      	movcs	r3, #0
 800c2c4:	3015      	adds	r0, #21
 800c2c6:	fa02 f000 	lsl.w	r0, r2, r0
 800c2ca:	fa23 f30c 	lsr.w	r3, r3, ip
 800c2ce:	4303      	orrs	r3, r0
 800c2d0:	461c      	mov	r4, r3
 800c2d2:	ec45 4b10 	vmov	d0, r4, r5
 800c2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2da:	45b8      	cmp	r8, r7
 800c2dc:	bf3a      	itte	cc
 800c2de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2e2:	f1a6 0708 	subcc.w	r7, r6, #8
 800c2e6:	2300      	movcs	r3, #0
 800c2e8:	380b      	subs	r0, #11
 800c2ea:	d012      	beq.n	800c312 <__b2d+0x8a>
 800c2ec:	f1c0 0120 	rsb	r1, r0, #32
 800c2f0:	fa23 f401 	lsr.w	r4, r3, r1
 800c2f4:	4082      	lsls	r2, r0
 800c2f6:	4322      	orrs	r2, r4
 800c2f8:	4547      	cmp	r7, r8
 800c2fa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c2fe:	bf8c      	ite	hi
 800c300:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c304:	2200      	movls	r2, #0
 800c306:	4083      	lsls	r3, r0
 800c308:	40ca      	lsrs	r2, r1
 800c30a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c30e:	4313      	orrs	r3, r2
 800c310:	e7de      	b.n	800c2d0 <__b2d+0x48>
 800c312:	ea42 0501 	orr.w	r5, r2, r1
 800c316:	e7db      	b.n	800c2d0 <__b2d+0x48>
 800c318:	3ff00000 	.word	0x3ff00000

0800c31c <__d2b>:
 800c31c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c320:	460f      	mov	r7, r1
 800c322:	2101      	movs	r1, #1
 800c324:	ec59 8b10 	vmov	r8, r9, d0
 800c328:	4616      	mov	r6, r2
 800c32a:	f7ff fc13 	bl	800bb54 <_Balloc>
 800c32e:	4604      	mov	r4, r0
 800c330:	b930      	cbnz	r0, 800c340 <__d2b+0x24>
 800c332:	4602      	mov	r2, r0
 800c334:	4b23      	ldr	r3, [pc, #140]	@ (800c3c4 <__d2b+0xa8>)
 800c336:	4824      	ldr	r0, [pc, #144]	@ (800c3c8 <__d2b+0xac>)
 800c338:	f240 310f 	movw	r1, #783	@ 0x30f
 800c33c:	f7fd fbe0 	bl	8009b00 <__assert_func>
 800c340:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c344:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c348:	b10d      	cbz	r5, 800c34e <__d2b+0x32>
 800c34a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	f1b8 0300 	subs.w	r3, r8, #0
 800c354:	d023      	beq.n	800c39e <__d2b+0x82>
 800c356:	4668      	mov	r0, sp
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	f7ff fd0c 	bl	800bd76 <__lo0bits>
 800c35e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c362:	b1d0      	cbz	r0, 800c39a <__d2b+0x7e>
 800c364:	f1c0 0320 	rsb	r3, r0, #32
 800c368:	fa02 f303 	lsl.w	r3, r2, r3
 800c36c:	430b      	orrs	r3, r1
 800c36e:	40c2      	lsrs	r2, r0
 800c370:	6163      	str	r3, [r4, #20]
 800c372:	9201      	str	r2, [sp, #4]
 800c374:	9b01      	ldr	r3, [sp, #4]
 800c376:	61a3      	str	r3, [r4, #24]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	bf0c      	ite	eq
 800c37c:	2201      	moveq	r2, #1
 800c37e:	2202      	movne	r2, #2
 800c380:	6122      	str	r2, [r4, #16]
 800c382:	b1a5      	cbz	r5, 800c3ae <__d2b+0x92>
 800c384:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c388:	4405      	add	r5, r0
 800c38a:	603d      	str	r5, [r7, #0]
 800c38c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c390:	6030      	str	r0, [r6, #0]
 800c392:	4620      	mov	r0, r4
 800c394:	b003      	add	sp, #12
 800c396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c39a:	6161      	str	r1, [r4, #20]
 800c39c:	e7ea      	b.n	800c374 <__d2b+0x58>
 800c39e:	a801      	add	r0, sp, #4
 800c3a0:	f7ff fce9 	bl	800bd76 <__lo0bits>
 800c3a4:	9b01      	ldr	r3, [sp, #4]
 800c3a6:	6163      	str	r3, [r4, #20]
 800c3a8:	3020      	adds	r0, #32
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	e7e8      	b.n	800c380 <__d2b+0x64>
 800c3ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c3b6:	6038      	str	r0, [r7, #0]
 800c3b8:	6918      	ldr	r0, [r3, #16]
 800c3ba:	f7ff fcbd 	bl	800bd38 <__hi0bits>
 800c3be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3c2:	e7e5      	b.n	800c390 <__d2b+0x74>
 800c3c4:	0800e389 	.word	0x0800e389
 800c3c8:	0800e39a 	.word	0x0800e39a

0800c3cc <__ratio>:
 800c3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	e9cd 1000 	strd	r1, r0, [sp]
 800c3d6:	a902      	add	r1, sp, #8
 800c3d8:	f7ff ff56 	bl	800c288 <__b2d>
 800c3dc:	9800      	ldr	r0, [sp, #0]
 800c3de:	a903      	add	r1, sp, #12
 800c3e0:	ec55 4b10 	vmov	r4, r5, d0
 800c3e4:	f7ff ff50 	bl	800c288 <__b2d>
 800c3e8:	9b01      	ldr	r3, [sp, #4]
 800c3ea:	6919      	ldr	r1, [r3, #16]
 800c3ec:	9b00      	ldr	r3, [sp, #0]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	1ac9      	subs	r1, r1, r3
 800c3f2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c3f6:	1a9b      	subs	r3, r3, r2
 800c3f8:	ec5b ab10 	vmov	sl, fp, d0
 800c3fc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c400:	2b00      	cmp	r3, #0
 800c402:	bfce      	itee	gt
 800c404:	462a      	movgt	r2, r5
 800c406:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c40a:	465a      	movle	r2, fp
 800c40c:	462f      	mov	r7, r5
 800c40e:	46d9      	mov	r9, fp
 800c410:	bfcc      	ite	gt
 800c412:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c416:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c41a:	464b      	mov	r3, r9
 800c41c:	4652      	mov	r2, sl
 800c41e:	4620      	mov	r0, r4
 800c420:	4639      	mov	r1, r7
 800c422:	f7f4 fa3b 	bl	800089c <__aeabi_ddiv>
 800c426:	ec41 0b10 	vmov	d0, r0, r1
 800c42a:	b005      	add	sp, #20
 800c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c430 <__copybits>:
 800c430:	3901      	subs	r1, #1
 800c432:	b570      	push	{r4, r5, r6, lr}
 800c434:	1149      	asrs	r1, r1, #5
 800c436:	6914      	ldr	r4, [r2, #16]
 800c438:	3101      	adds	r1, #1
 800c43a:	f102 0314 	add.w	r3, r2, #20
 800c43e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c442:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c446:	1f05      	subs	r5, r0, #4
 800c448:	42a3      	cmp	r3, r4
 800c44a:	d30c      	bcc.n	800c466 <__copybits+0x36>
 800c44c:	1aa3      	subs	r3, r4, r2
 800c44e:	3b11      	subs	r3, #17
 800c450:	f023 0303 	bic.w	r3, r3, #3
 800c454:	3211      	adds	r2, #17
 800c456:	42a2      	cmp	r2, r4
 800c458:	bf88      	it	hi
 800c45a:	2300      	movhi	r3, #0
 800c45c:	4418      	add	r0, r3
 800c45e:	2300      	movs	r3, #0
 800c460:	4288      	cmp	r0, r1
 800c462:	d305      	bcc.n	800c470 <__copybits+0x40>
 800c464:	bd70      	pop	{r4, r5, r6, pc}
 800c466:	f853 6b04 	ldr.w	r6, [r3], #4
 800c46a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c46e:	e7eb      	b.n	800c448 <__copybits+0x18>
 800c470:	f840 3b04 	str.w	r3, [r0], #4
 800c474:	e7f4      	b.n	800c460 <__copybits+0x30>

0800c476 <__any_on>:
 800c476:	f100 0214 	add.w	r2, r0, #20
 800c47a:	6900      	ldr	r0, [r0, #16]
 800c47c:	114b      	asrs	r3, r1, #5
 800c47e:	4298      	cmp	r0, r3
 800c480:	b510      	push	{r4, lr}
 800c482:	db11      	blt.n	800c4a8 <__any_on+0x32>
 800c484:	dd0a      	ble.n	800c49c <__any_on+0x26>
 800c486:	f011 011f 	ands.w	r1, r1, #31
 800c48a:	d007      	beq.n	800c49c <__any_on+0x26>
 800c48c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c490:	fa24 f001 	lsr.w	r0, r4, r1
 800c494:	fa00 f101 	lsl.w	r1, r0, r1
 800c498:	428c      	cmp	r4, r1
 800c49a:	d10b      	bne.n	800c4b4 <__any_on+0x3e>
 800c49c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d803      	bhi.n	800c4ac <__any_on+0x36>
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	bd10      	pop	{r4, pc}
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	e7f7      	b.n	800c49c <__any_on+0x26>
 800c4ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4b0:	2900      	cmp	r1, #0
 800c4b2:	d0f5      	beq.n	800c4a0 <__any_on+0x2a>
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	e7f6      	b.n	800c4a6 <__any_on+0x30>

0800c4b8 <sulp>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	460d      	mov	r5, r1
 800c4be:	ec45 4b10 	vmov	d0, r4, r5
 800c4c2:	4616      	mov	r6, r2
 800c4c4:	f7ff feba 	bl	800c23c <__ulp>
 800c4c8:	ec51 0b10 	vmov	r0, r1, d0
 800c4cc:	b17e      	cbz	r6, 800c4ee <sulp+0x36>
 800c4ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c4d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	dd09      	ble.n	800c4ee <sulp+0x36>
 800c4da:	051b      	lsls	r3, r3, #20
 800c4dc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c4e0:	2400      	movs	r4, #0
 800c4e2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	462b      	mov	r3, r5
 800c4ea:	f7f4 f8ad 	bl	8000648 <__aeabi_dmul>
 800c4ee:	ec41 0b10 	vmov	d0, r0, r1
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}
 800c4f4:	0000      	movs	r0, r0
	...

0800c4f8 <_strtod_l>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	b09f      	sub	sp, #124	@ 0x7c
 800c4fe:	460c      	mov	r4, r1
 800c500:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c502:	2200      	movs	r2, #0
 800c504:	921a      	str	r2, [sp, #104]	@ 0x68
 800c506:	9005      	str	r0, [sp, #20]
 800c508:	f04f 0a00 	mov.w	sl, #0
 800c50c:	f04f 0b00 	mov.w	fp, #0
 800c510:	460a      	mov	r2, r1
 800c512:	9219      	str	r2, [sp, #100]	@ 0x64
 800c514:	7811      	ldrb	r1, [r2, #0]
 800c516:	292b      	cmp	r1, #43	@ 0x2b
 800c518:	d04a      	beq.n	800c5b0 <_strtod_l+0xb8>
 800c51a:	d838      	bhi.n	800c58e <_strtod_l+0x96>
 800c51c:	290d      	cmp	r1, #13
 800c51e:	d832      	bhi.n	800c586 <_strtod_l+0x8e>
 800c520:	2908      	cmp	r1, #8
 800c522:	d832      	bhi.n	800c58a <_strtod_l+0x92>
 800c524:	2900      	cmp	r1, #0
 800c526:	d03b      	beq.n	800c5a0 <_strtod_l+0xa8>
 800c528:	2200      	movs	r2, #0
 800c52a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c52c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c52e:	782a      	ldrb	r2, [r5, #0]
 800c530:	2a30      	cmp	r2, #48	@ 0x30
 800c532:	f040 80b3 	bne.w	800c69c <_strtod_l+0x1a4>
 800c536:	786a      	ldrb	r2, [r5, #1]
 800c538:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c53c:	2a58      	cmp	r2, #88	@ 0x58
 800c53e:	d16e      	bne.n	800c61e <_strtod_l+0x126>
 800c540:	9302      	str	r3, [sp, #8]
 800c542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c544:	9301      	str	r3, [sp, #4]
 800c546:	ab1a      	add	r3, sp, #104	@ 0x68
 800c548:	9300      	str	r3, [sp, #0]
 800c54a:	4a8e      	ldr	r2, [pc, #568]	@ (800c784 <_strtod_l+0x28c>)
 800c54c:	9805      	ldr	r0, [sp, #20]
 800c54e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c550:	a919      	add	r1, sp, #100	@ 0x64
 800c552:	f001 faa9 	bl	800daa8 <__gethex>
 800c556:	f010 060f 	ands.w	r6, r0, #15
 800c55a:	4604      	mov	r4, r0
 800c55c:	d005      	beq.n	800c56a <_strtod_l+0x72>
 800c55e:	2e06      	cmp	r6, #6
 800c560:	d128      	bne.n	800c5b4 <_strtod_l+0xbc>
 800c562:	3501      	adds	r5, #1
 800c564:	2300      	movs	r3, #0
 800c566:	9519      	str	r5, [sp, #100]	@ 0x64
 800c568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c56a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f040 858e 	bne.w	800d08e <_strtod_l+0xb96>
 800c572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c574:	b1cb      	cbz	r3, 800c5aa <_strtod_l+0xb2>
 800c576:	4652      	mov	r2, sl
 800c578:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c57c:	ec43 2b10 	vmov	d0, r2, r3
 800c580:	b01f      	add	sp, #124	@ 0x7c
 800c582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c586:	2920      	cmp	r1, #32
 800c588:	d1ce      	bne.n	800c528 <_strtod_l+0x30>
 800c58a:	3201      	adds	r2, #1
 800c58c:	e7c1      	b.n	800c512 <_strtod_l+0x1a>
 800c58e:	292d      	cmp	r1, #45	@ 0x2d
 800c590:	d1ca      	bne.n	800c528 <_strtod_l+0x30>
 800c592:	2101      	movs	r1, #1
 800c594:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c596:	1c51      	adds	r1, r2, #1
 800c598:	9119      	str	r1, [sp, #100]	@ 0x64
 800c59a:	7852      	ldrb	r2, [r2, #1]
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	d1c5      	bne.n	800c52c <_strtod_l+0x34>
 800c5a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c5a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f040 8570 	bne.w	800d08a <_strtod_l+0xb92>
 800c5aa:	4652      	mov	r2, sl
 800c5ac:	465b      	mov	r3, fp
 800c5ae:	e7e5      	b.n	800c57c <_strtod_l+0x84>
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	e7ef      	b.n	800c594 <_strtod_l+0x9c>
 800c5b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c5b6:	b13a      	cbz	r2, 800c5c8 <_strtod_l+0xd0>
 800c5b8:	2135      	movs	r1, #53	@ 0x35
 800c5ba:	a81c      	add	r0, sp, #112	@ 0x70
 800c5bc:	f7ff ff38 	bl	800c430 <__copybits>
 800c5c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5c2:	9805      	ldr	r0, [sp, #20]
 800c5c4:	f7ff fb06 	bl	800bbd4 <_Bfree>
 800c5c8:	3e01      	subs	r6, #1
 800c5ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c5cc:	2e04      	cmp	r6, #4
 800c5ce:	d806      	bhi.n	800c5de <_strtod_l+0xe6>
 800c5d0:	e8df f006 	tbb	[pc, r6]
 800c5d4:	201d0314 	.word	0x201d0314
 800c5d8:	14          	.byte	0x14
 800c5d9:	00          	.byte	0x00
 800c5da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c5de:	05e1      	lsls	r1, r4, #23
 800c5e0:	bf48      	it	mi
 800c5e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c5e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c5ea:	0d1b      	lsrs	r3, r3, #20
 800c5ec:	051b      	lsls	r3, r3, #20
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1bb      	bne.n	800c56a <_strtod_l+0x72>
 800c5f2:	f7fe fbd7 	bl	800ada4 <__errno>
 800c5f6:	2322      	movs	r3, #34	@ 0x22
 800c5f8:	6003      	str	r3, [r0, #0]
 800c5fa:	e7b6      	b.n	800c56a <_strtod_l+0x72>
 800c5fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c600:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c604:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c608:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c60c:	e7e7      	b.n	800c5de <_strtod_l+0xe6>
 800c60e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c78c <_strtod_l+0x294>
 800c612:	e7e4      	b.n	800c5de <_strtod_l+0xe6>
 800c614:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c618:	f04f 3aff 	mov.w	sl, #4294967295
 800c61c:	e7df      	b.n	800c5de <_strtod_l+0xe6>
 800c61e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c620:	1c5a      	adds	r2, r3, #1
 800c622:	9219      	str	r2, [sp, #100]	@ 0x64
 800c624:	785b      	ldrb	r3, [r3, #1]
 800c626:	2b30      	cmp	r3, #48	@ 0x30
 800c628:	d0f9      	beq.n	800c61e <_strtod_l+0x126>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d09d      	beq.n	800c56a <_strtod_l+0x72>
 800c62e:	2301      	movs	r3, #1
 800c630:	9309      	str	r3, [sp, #36]	@ 0x24
 800c632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c634:	930c      	str	r3, [sp, #48]	@ 0x30
 800c636:	2300      	movs	r3, #0
 800c638:	9308      	str	r3, [sp, #32]
 800c63a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c63c:	461f      	mov	r7, r3
 800c63e:	220a      	movs	r2, #10
 800c640:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c642:	7805      	ldrb	r5, [r0, #0]
 800c644:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c648:	b2d9      	uxtb	r1, r3
 800c64a:	2909      	cmp	r1, #9
 800c64c:	d928      	bls.n	800c6a0 <_strtod_l+0x1a8>
 800c64e:	494e      	ldr	r1, [pc, #312]	@ (800c788 <_strtod_l+0x290>)
 800c650:	2201      	movs	r2, #1
 800c652:	f001 f991 	bl	800d978 <strncmp>
 800c656:	2800      	cmp	r0, #0
 800c658:	d032      	beq.n	800c6c0 <_strtod_l+0x1c8>
 800c65a:	2000      	movs	r0, #0
 800c65c:	462a      	mov	r2, r5
 800c65e:	4681      	mov	r9, r0
 800c660:	463d      	mov	r5, r7
 800c662:	4603      	mov	r3, r0
 800c664:	2a65      	cmp	r2, #101	@ 0x65
 800c666:	d001      	beq.n	800c66c <_strtod_l+0x174>
 800c668:	2a45      	cmp	r2, #69	@ 0x45
 800c66a:	d114      	bne.n	800c696 <_strtod_l+0x19e>
 800c66c:	b91d      	cbnz	r5, 800c676 <_strtod_l+0x17e>
 800c66e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c670:	4302      	orrs	r2, r0
 800c672:	d095      	beq.n	800c5a0 <_strtod_l+0xa8>
 800c674:	2500      	movs	r5, #0
 800c676:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c678:	1c62      	adds	r2, r4, #1
 800c67a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c67c:	7862      	ldrb	r2, [r4, #1]
 800c67e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c680:	d077      	beq.n	800c772 <_strtod_l+0x27a>
 800c682:	2a2d      	cmp	r2, #45	@ 0x2d
 800c684:	d07b      	beq.n	800c77e <_strtod_l+0x286>
 800c686:	f04f 0c00 	mov.w	ip, #0
 800c68a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c68e:	2909      	cmp	r1, #9
 800c690:	f240 8082 	bls.w	800c798 <_strtod_l+0x2a0>
 800c694:	9419      	str	r4, [sp, #100]	@ 0x64
 800c696:	f04f 0800 	mov.w	r8, #0
 800c69a:	e0a2      	b.n	800c7e2 <_strtod_l+0x2ea>
 800c69c:	2300      	movs	r3, #0
 800c69e:	e7c7      	b.n	800c630 <_strtod_l+0x138>
 800c6a0:	2f08      	cmp	r7, #8
 800c6a2:	bfd5      	itete	le
 800c6a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c6a6:	9908      	ldrgt	r1, [sp, #32]
 800c6a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c6ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c6b0:	f100 0001 	add.w	r0, r0, #1
 800c6b4:	bfd4      	ite	le
 800c6b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c6b8:	9308      	strgt	r3, [sp, #32]
 800c6ba:	3701      	adds	r7, #1
 800c6bc:	9019      	str	r0, [sp, #100]	@ 0x64
 800c6be:	e7bf      	b.n	800c640 <_strtod_l+0x148>
 800c6c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6c6:	785a      	ldrb	r2, [r3, #1]
 800c6c8:	b37f      	cbz	r7, 800c72a <_strtod_l+0x232>
 800c6ca:	4681      	mov	r9, r0
 800c6cc:	463d      	mov	r5, r7
 800c6ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c6d2:	2b09      	cmp	r3, #9
 800c6d4:	d912      	bls.n	800c6fc <_strtod_l+0x204>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e7c4      	b.n	800c664 <_strtod_l+0x16c>
 800c6da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6dc:	1c5a      	adds	r2, r3, #1
 800c6de:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6e0:	785a      	ldrb	r2, [r3, #1]
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	2a30      	cmp	r2, #48	@ 0x30
 800c6e6:	d0f8      	beq.n	800c6da <_strtod_l+0x1e2>
 800c6e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c6ec:	2b08      	cmp	r3, #8
 800c6ee:	f200 84d3 	bhi.w	800d098 <_strtod_l+0xba0>
 800c6f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6f6:	4681      	mov	r9, r0
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	4605      	mov	r5, r0
 800c6fc:	3a30      	subs	r2, #48	@ 0x30
 800c6fe:	f100 0301 	add.w	r3, r0, #1
 800c702:	d02a      	beq.n	800c75a <_strtod_l+0x262>
 800c704:	4499      	add	r9, r3
 800c706:	eb00 0c05 	add.w	ip, r0, r5
 800c70a:	462b      	mov	r3, r5
 800c70c:	210a      	movs	r1, #10
 800c70e:	4563      	cmp	r3, ip
 800c710:	d10d      	bne.n	800c72e <_strtod_l+0x236>
 800c712:	1c69      	adds	r1, r5, #1
 800c714:	4401      	add	r1, r0
 800c716:	4428      	add	r0, r5
 800c718:	2808      	cmp	r0, #8
 800c71a:	dc16      	bgt.n	800c74a <_strtod_l+0x252>
 800c71c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c71e:	230a      	movs	r3, #10
 800c720:	fb03 2300 	mla	r3, r3, r0, r2
 800c724:	930a      	str	r3, [sp, #40]	@ 0x28
 800c726:	2300      	movs	r3, #0
 800c728:	e018      	b.n	800c75c <_strtod_l+0x264>
 800c72a:	4638      	mov	r0, r7
 800c72c:	e7da      	b.n	800c6e4 <_strtod_l+0x1ec>
 800c72e:	2b08      	cmp	r3, #8
 800c730:	f103 0301 	add.w	r3, r3, #1
 800c734:	dc03      	bgt.n	800c73e <_strtod_l+0x246>
 800c736:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c738:	434e      	muls	r6, r1
 800c73a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c73c:	e7e7      	b.n	800c70e <_strtod_l+0x216>
 800c73e:	2b10      	cmp	r3, #16
 800c740:	bfde      	ittt	le
 800c742:	9e08      	ldrle	r6, [sp, #32]
 800c744:	434e      	mulle	r6, r1
 800c746:	9608      	strle	r6, [sp, #32]
 800c748:	e7e1      	b.n	800c70e <_strtod_l+0x216>
 800c74a:	280f      	cmp	r0, #15
 800c74c:	dceb      	bgt.n	800c726 <_strtod_l+0x22e>
 800c74e:	9808      	ldr	r0, [sp, #32]
 800c750:	230a      	movs	r3, #10
 800c752:	fb03 2300 	mla	r3, r3, r0, r2
 800c756:	9308      	str	r3, [sp, #32]
 800c758:	e7e5      	b.n	800c726 <_strtod_l+0x22e>
 800c75a:	4629      	mov	r1, r5
 800c75c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c75e:	1c50      	adds	r0, r2, #1
 800c760:	9019      	str	r0, [sp, #100]	@ 0x64
 800c762:	7852      	ldrb	r2, [r2, #1]
 800c764:	4618      	mov	r0, r3
 800c766:	460d      	mov	r5, r1
 800c768:	e7b1      	b.n	800c6ce <_strtod_l+0x1d6>
 800c76a:	f04f 0900 	mov.w	r9, #0
 800c76e:	2301      	movs	r3, #1
 800c770:	e77d      	b.n	800c66e <_strtod_l+0x176>
 800c772:	f04f 0c00 	mov.w	ip, #0
 800c776:	1ca2      	adds	r2, r4, #2
 800c778:	9219      	str	r2, [sp, #100]	@ 0x64
 800c77a:	78a2      	ldrb	r2, [r4, #2]
 800c77c:	e785      	b.n	800c68a <_strtod_l+0x192>
 800c77e:	f04f 0c01 	mov.w	ip, #1
 800c782:	e7f8      	b.n	800c776 <_strtod_l+0x27e>
 800c784:	0800e508 	.word	0x0800e508
 800c788:	0800e4f0 	.word	0x0800e4f0
 800c78c:	7ff00000 	.word	0x7ff00000
 800c790:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c792:	1c51      	adds	r1, r2, #1
 800c794:	9119      	str	r1, [sp, #100]	@ 0x64
 800c796:	7852      	ldrb	r2, [r2, #1]
 800c798:	2a30      	cmp	r2, #48	@ 0x30
 800c79a:	d0f9      	beq.n	800c790 <_strtod_l+0x298>
 800c79c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c7a0:	2908      	cmp	r1, #8
 800c7a2:	f63f af78 	bhi.w	800c696 <_strtod_l+0x19e>
 800c7a6:	3a30      	subs	r2, #48	@ 0x30
 800c7a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c7ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c7ae:	f04f 080a 	mov.w	r8, #10
 800c7b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c7b4:	1c56      	adds	r6, r2, #1
 800c7b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800c7b8:	7852      	ldrb	r2, [r2, #1]
 800c7ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c7be:	f1be 0f09 	cmp.w	lr, #9
 800c7c2:	d939      	bls.n	800c838 <_strtod_l+0x340>
 800c7c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c7c6:	1a76      	subs	r6, r6, r1
 800c7c8:	2e08      	cmp	r6, #8
 800c7ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c7ce:	dc03      	bgt.n	800c7d8 <_strtod_l+0x2e0>
 800c7d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c7d2:	4588      	cmp	r8, r1
 800c7d4:	bfa8      	it	ge
 800c7d6:	4688      	movge	r8, r1
 800c7d8:	f1bc 0f00 	cmp.w	ip, #0
 800c7dc:	d001      	beq.n	800c7e2 <_strtod_l+0x2ea>
 800c7de:	f1c8 0800 	rsb	r8, r8, #0
 800c7e2:	2d00      	cmp	r5, #0
 800c7e4:	d14e      	bne.n	800c884 <_strtod_l+0x38c>
 800c7e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7e8:	4308      	orrs	r0, r1
 800c7ea:	f47f aebe 	bne.w	800c56a <_strtod_l+0x72>
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f47f aed6 	bne.w	800c5a0 <_strtod_l+0xa8>
 800c7f4:	2a69      	cmp	r2, #105	@ 0x69
 800c7f6:	d028      	beq.n	800c84a <_strtod_l+0x352>
 800c7f8:	dc25      	bgt.n	800c846 <_strtod_l+0x34e>
 800c7fa:	2a49      	cmp	r2, #73	@ 0x49
 800c7fc:	d025      	beq.n	800c84a <_strtod_l+0x352>
 800c7fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800c800:	f47f aece 	bne.w	800c5a0 <_strtod_l+0xa8>
 800c804:	499b      	ldr	r1, [pc, #620]	@ (800ca74 <_strtod_l+0x57c>)
 800c806:	a819      	add	r0, sp, #100	@ 0x64
 800c808:	f001 fb70 	bl	800deec <__match>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	f43f aec7 	beq.w	800c5a0 <_strtod_l+0xa8>
 800c812:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	2b28      	cmp	r3, #40	@ 0x28
 800c818:	d12e      	bne.n	800c878 <_strtod_l+0x380>
 800c81a:	4997      	ldr	r1, [pc, #604]	@ (800ca78 <_strtod_l+0x580>)
 800c81c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c81e:	a819      	add	r0, sp, #100	@ 0x64
 800c820:	f001 fb78 	bl	800df14 <__hexnan>
 800c824:	2805      	cmp	r0, #5
 800c826:	d127      	bne.n	800c878 <_strtod_l+0x380>
 800c828:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c82a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c82e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c832:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c836:	e698      	b.n	800c56a <_strtod_l+0x72>
 800c838:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c83a:	fb08 2101 	mla	r1, r8, r1, r2
 800c83e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c842:	920e      	str	r2, [sp, #56]	@ 0x38
 800c844:	e7b5      	b.n	800c7b2 <_strtod_l+0x2ba>
 800c846:	2a6e      	cmp	r2, #110	@ 0x6e
 800c848:	e7da      	b.n	800c800 <_strtod_l+0x308>
 800c84a:	498c      	ldr	r1, [pc, #560]	@ (800ca7c <_strtod_l+0x584>)
 800c84c:	a819      	add	r0, sp, #100	@ 0x64
 800c84e:	f001 fb4d 	bl	800deec <__match>
 800c852:	2800      	cmp	r0, #0
 800c854:	f43f aea4 	beq.w	800c5a0 <_strtod_l+0xa8>
 800c858:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c85a:	4989      	ldr	r1, [pc, #548]	@ (800ca80 <_strtod_l+0x588>)
 800c85c:	3b01      	subs	r3, #1
 800c85e:	a819      	add	r0, sp, #100	@ 0x64
 800c860:	9319      	str	r3, [sp, #100]	@ 0x64
 800c862:	f001 fb43 	bl	800deec <__match>
 800c866:	b910      	cbnz	r0, 800c86e <_strtod_l+0x376>
 800c868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c86a:	3301      	adds	r3, #1
 800c86c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c86e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ca90 <_strtod_l+0x598>
 800c872:	f04f 0a00 	mov.w	sl, #0
 800c876:	e678      	b.n	800c56a <_strtod_l+0x72>
 800c878:	4882      	ldr	r0, [pc, #520]	@ (800ca84 <_strtod_l+0x58c>)
 800c87a:	f001 f891 	bl	800d9a0 <nan>
 800c87e:	ec5b ab10 	vmov	sl, fp, d0
 800c882:	e672      	b.n	800c56a <_strtod_l+0x72>
 800c884:	eba8 0309 	sub.w	r3, r8, r9
 800c888:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c88a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88c:	2f00      	cmp	r7, #0
 800c88e:	bf08      	it	eq
 800c890:	462f      	moveq	r7, r5
 800c892:	2d10      	cmp	r5, #16
 800c894:	462c      	mov	r4, r5
 800c896:	bfa8      	it	ge
 800c898:	2410      	movge	r4, #16
 800c89a:	f7f3 fe5b 	bl	8000554 <__aeabi_ui2d>
 800c89e:	2d09      	cmp	r5, #9
 800c8a0:	4682      	mov	sl, r0
 800c8a2:	468b      	mov	fp, r1
 800c8a4:	dc13      	bgt.n	800c8ce <_strtod_l+0x3d6>
 800c8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f43f ae5e 	beq.w	800c56a <_strtod_l+0x72>
 800c8ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b0:	dd78      	ble.n	800c9a4 <_strtod_l+0x4ac>
 800c8b2:	2b16      	cmp	r3, #22
 800c8b4:	dc5f      	bgt.n	800c976 <_strtod_l+0x47e>
 800c8b6:	4974      	ldr	r1, [pc, #464]	@ (800ca88 <_strtod_l+0x590>)
 800c8b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8c0:	4652      	mov	r2, sl
 800c8c2:	465b      	mov	r3, fp
 800c8c4:	f7f3 fec0 	bl	8000648 <__aeabi_dmul>
 800c8c8:	4682      	mov	sl, r0
 800c8ca:	468b      	mov	fp, r1
 800c8cc:	e64d      	b.n	800c56a <_strtod_l+0x72>
 800c8ce:	4b6e      	ldr	r3, [pc, #440]	@ (800ca88 <_strtod_l+0x590>)
 800c8d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c8d8:	f7f3 feb6 	bl	8000648 <__aeabi_dmul>
 800c8dc:	4682      	mov	sl, r0
 800c8de:	9808      	ldr	r0, [sp, #32]
 800c8e0:	468b      	mov	fp, r1
 800c8e2:	f7f3 fe37 	bl	8000554 <__aeabi_ui2d>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	4650      	mov	r0, sl
 800c8ec:	4659      	mov	r1, fp
 800c8ee:	f7f3 fcf5 	bl	80002dc <__adddf3>
 800c8f2:	2d0f      	cmp	r5, #15
 800c8f4:	4682      	mov	sl, r0
 800c8f6:	468b      	mov	fp, r1
 800c8f8:	ddd5      	ble.n	800c8a6 <_strtod_l+0x3ae>
 800c8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8fc:	1b2c      	subs	r4, r5, r4
 800c8fe:	441c      	add	r4, r3
 800c900:	2c00      	cmp	r4, #0
 800c902:	f340 8096 	ble.w	800ca32 <_strtod_l+0x53a>
 800c906:	f014 030f 	ands.w	r3, r4, #15
 800c90a:	d00a      	beq.n	800c922 <_strtod_l+0x42a>
 800c90c:	495e      	ldr	r1, [pc, #376]	@ (800ca88 <_strtod_l+0x590>)
 800c90e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c912:	4652      	mov	r2, sl
 800c914:	465b      	mov	r3, fp
 800c916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c91a:	f7f3 fe95 	bl	8000648 <__aeabi_dmul>
 800c91e:	4682      	mov	sl, r0
 800c920:	468b      	mov	fp, r1
 800c922:	f034 040f 	bics.w	r4, r4, #15
 800c926:	d073      	beq.n	800ca10 <_strtod_l+0x518>
 800c928:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c92c:	dd48      	ble.n	800c9c0 <_strtod_l+0x4c8>
 800c92e:	2400      	movs	r4, #0
 800c930:	46a0      	mov	r8, r4
 800c932:	940a      	str	r4, [sp, #40]	@ 0x28
 800c934:	46a1      	mov	r9, r4
 800c936:	9a05      	ldr	r2, [sp, #20]
 800c938:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ca90 <_strtod_l+0x598>
 800c93c:	2322      	movs	r3, #34	@ 0x22
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	f04f 0a00 	mov.w	sl, #0
 800c944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c946:	2b00      	cmp	r3, #0
 800c948:	f43f ae0f 	beq.w	800c56a <_strtod_l+0x72>
 800c94c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c94e:	9805      	ldr	r0, [sp, #20]
 800c950:	f7ff f940 	bl	800bbd4 <_Bfree>
 800c954:	9805      	ldr	r0, [sp, #20]
 800c956:	4649      	mov	r1, r9
 800c958:	f7ff f93c 	bl	800bbd4 <_Bfree>
 800c95c:	9805      	ldr	r0, [sp, #20]
 800c95e:	4641      	mov	r1, r8
 800c960:	f7ff f938 	bl	800bbd4 <_Bfree>
 800c964:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c966:	9805      	ldr	r0, [sp, #20]
 800c968:	f7ff f934 	bl	800bbd4 <_Bfree>
 800c96c:	9805      	ldr	r0, [sp, #20]
 800c96e:	4621      	mov	r1, r4
 800c970:	f7ff f930 	bl	800bbd4 <_Bfree>
 800c974:	e5f9      	b.n	800c56a <_strtod_l+0x72>
 800c976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c978:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c97c:	4293      	cmp	r3, r2
 800c97e:	dbbc      	blt.n	800c8fa <_strtod_l+0x402>
 800c980:	4c41      	ldr	r4, [pc, #260]	@ (800ca88 <_strtod_l+0x590>)
 800c982:	f1c5 050f 	rsb	r5, r5, #15
 800c986:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c98a:	4652      	mov	r2, sl
 800c98c:	465b      	mov	r3, fp
 800c98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c992:	f7f3 fe59 	bl	8000648 <__aeabi_dmul>
 800c996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c998:	1b5d      	subs	r5, r3, r5
 800c99a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c99e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c9a2:	e78f      	b.n	800c8c4 <_strtod_l+0x3cc>
 800c9a4:	3316      	adds	r3, #22
 800c9a6:	dba8      	blt.n	800c8fa <_strtod_l+0x402>
 800c9a8:	4b37      	ldr	r3, [pc, #220]	@ (800ca88 <_strtod_l+0x590>)
 800c9aa:	eba9 0808 	sub.w	r8, r9, r8
 800c9ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c9b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c9b6:	4650      	mov	r0, sl
 800c9b8:	4659      	mov	r1, fp
 800c9ba:	f7f3 ff6f 	bl	800089c <__aeabi_ddiv>
 800c9be:	e783      	b.n	800c8c8 <_strtod_l+0x3d0>
 800c9c0:	4b32      	ldr	r3, [pc, #200]	@ (800ca8c <_strtod_l+0x594>)
 800c9c2:	9308      	str	r3, [sp, #32]
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	1124      	asrs	r4, r4, #4
 800c9c8:	4650      	mov	r0, sl
 800c9ca:	4659      	mov	r1, fp
 800c9cc:	461e      	mov	r6, r3
 800c9ce:	2c01      	cmp	r4, #1
 800c9d0:	dc21      	bgt.n	800ca16 <_strtod_l+0x51e>
 800c9d2:	b10b      	cbz	r3, 800c9d8 <_strtod_l+0x4e0>
 800c9d4:	4682      	mov	sl, r0
 800c9d6:	468b      	mov	fp, r1
 800c9d8:	492c      	ldr	r1, [pc, #176]	@ (800ca8c <_strtod_l+0x594>)
 800c9da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c9de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c9e2:	4652      	mov	r2, sl
 800c9e4:	465b      	mov	r3, fp
 800c9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ea:	f7f3 fe2d 	bl	8000648 <__aeabi_dmul>
 800c9ee:	4b28      	ldr	r3, [pc, #160]	@ (800ca90 <_strtod_l+0x598>)
 800c9f0:	460a      	mov	r2, r1
 800c9f2:	400b      	ands	r3, r1
 800c9f4:	4927      	ldr	r1, [pc, #156]	@ (800ca94 <_strtod_l+0x59c>)
 800c9f6:	428b      	cmp	r3, r1
 800c9f8:	4682      	mov	sl, r0
 800c9fa:	d898      	bhi.n	800c92e <_strtod_l+0x436>
 800c9fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ca00:	428b      	cmp	r3, r1
 800ca02:	bf86      	itte	hi
 800ca04:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ca98 <_strtod_l+0x5a0>
 800ca08:	f04f 3aff 	movhi.w	sl, #4294967295
 800ca0c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ca10:	2300      	movs	r3, #0
 800ca12:	9308      	str	r3, [sp, #32]
 800ca14:	e07a      	b.n	800cb0c <_strtod_l+0x614>
 800ca16:	07e2      	lsls	r2, r4, #31
 800ca18:	d505      	bpl.n	800ca26 <_strtod_l+0x52e>
 800ca1a:	9b08      	ldr	r3, [sp, #32]
 800ca1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca20:	f7f3 fe12 	bl	8000648 <__aeabi_dmul>
 800ca24:	2301      	movs	r3, #1
 800ca26:	9a08      	ldr	r2, [sp, #32]
 800ca28:	3208      	adds	r2, #8
 800ca2a:	3601      	adds	r6, #1
 800ca2c:	1064      	asrs	r4, r4, #1
 800ca2e:	9208      	str	r2, [sp, #32]
 800ca30:	e7cd      	b.n	800c9ce <_strtod_l+0x4d6>
 800ca32:	d0ed      	beq.n	800ca10 <_strtod_l+0x518>
 800ca34:	4264      	negs	r4, r4
 800ca36:	f014 020f 	ands.w	r2, r4, #15
 800ca3a:	d00a      	beq.n	800ca52 <_strtod_l+0x55a>
 800ca3c:	4b12      	ldr	r3, [pc, #72]	@ (800ca88 <_strtod_l+0x590>)
 800ca3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca42:	4650      	mov	r0, sl
 800ca44:	4659      	mov	r1, fp
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	f7f3 ff27 	bl	800089c <__aeabi_ddiv>
 800ca4e:	4682      	mov	sl, r0
 800ca50:	468b      	mov	fp, r1
 800ca52:	1124      	asrs	r4, r4, #4
 800ca54:	d0dc      	beq.n	800ca10 <_strtod_l+0x518>
 800ca56:	2c1f      	cmp	r4, #31
 800ca58:	dd20      	ble.n	800ca9c <_strtod_l+0x5a4>
 800ca5a:	2400      	movs	r4, #0
 800ca5c:	46a0      	mov	r8, r4
 800ca5e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca60:	46a1      	mov	r9, r4
 800ca62:	9a05      	ldr	r2, [sp, #20]
 800ca64:	2322      	movs	r3, #34	@ 0x22
 800ca66:	f04f 0a00 	mov.w	sl, #0
 800ca6a:	f04f 0b00 	mov.w	fp, #0
 800ca6e:	6013      	str	r3, [r2, #0]
 800ca70:	e768      	b.n	800c944 <_strtod_l+0x44c>
 800ca72:	bf00      	nop
 800ca74:	0800e2e1 	.word	0x0800e2e1
 800ca78:	0800e4f4 	.word	0x0800e4f4
 800ca7c:	0800e2d9 	.word	0x0800e2d9
 800ca80:	0800e310 	.word	0x0800e310
 800ca84:	0800e2d3 	.word	0x0800e2d3
 800ca88:	0800e428 	.word	0x0800e428
 800ca8c:	0800e400 	.word	0x0800e400
 800ca90:	7ff00000 	.word	0x7ff00000
 800ca94:	7ca00000 	.word	0x7ca00000
 800ca98:	7fefffff 	.word	0x7fefffff
 800ca9c:	f014 0310 	ands.w	r3, r4, #16
 800caa0:	bf18      	it	ne
 800caa2:	236a      	movne	r3, #106	@ 0x6a
 800caa4:	4ea9      	ldr	r6, [pc, #676]	@ (800cd4c <_strtod_l+0x854>)
 800caa6:	9308      	str	r3, [sp, #32]
 800caa8:	4650      	mov	r0, sl
 800caaa:	4659      	mov	r1, fp
 800caac:	2300      	movs	r3, #0
 800caae:	07e2      	lsls	r2, r4, #31
 800cab0:	d504      	bpl.n	800cabc <_strtod_l+0x5c4>
 800cab2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cab6:	f7f3 fdc7 	bl	8000648 <__aeabi_dmul>
 800caba:	2301      	movs	r3, #1
 800cabc:	1064      	asrs	r4, r4, #1
 800cabe:	f106 0608 	add.w	r6, r6, #8
 800cac2:	d1f4      	bne.n	800caae <_strtod_l+0x5b6>
 800cac4:	b10b      	cbz	r3, 800caca <_strtod_l+0x5d2>
 800cac6:	4682      	mov	sl, r0
 800cac8:	468b      	mov	fp, r1
 800caca:	9b08      	ldr	r3, [sp, #32]
 800cacc:	b1b3      	cbz	r3, 800cafc <_strtod_l+0x604>
 800cace:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cad2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	4659      	mov	r1, fp
 800cada:	dd0f      	ble.n	800cafc <_strtod_l+0x604>
 800cadc:	2b1f      	cmp	r3, #31
 800cade:	dd55      	ble.n	800cb8c <_strtod_l+0x694>
 800cae0:	2b34      	cmp	r3, #52	@ 0x34
 800cae2:	bfde      	ittt	le
 800cae4:	f04f 33ff 	movle.w	r3, #4294967295
 800cae8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800caec:	4093      	lslle	r3, r2
 800caee:	f04f 0a00 	mov.w	sl, #0
 800caf2:	bfcc      	ite	gt
 800caf4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800caf8:	ea03 0b01 	andle.w	fp, r3, r1
 800cafc:	2200      	movs	r2, #0
 800cafe:	2300      	movs	r3, #0
 800cb00:	4650      	mov	r0, sl
 800cb02:	4659      	mov	r1, fp
 800cb04:	f7f4 f808 	bl	8000b18 <__aeabi_dcmpeq>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d1a6      	bne.n	800ca5a <_strtod_l+0x562>
 800cb0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cb12:	9805      	ldr	r0, [sp, #20]
 800cb14:	462b      	mov	r3, r5
 800cb16:	463a      	mov	r2, r7
 800cb18:	f7ff f8c4 	bl	800bca4 <__s2b>
 800cb1c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	f43f af05 	beq.w	800c92e <_strtod_l+0x436>
 800cb24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb26:	2a00      	cmp	r2, #0
 800cb28:	eba9 0308 	sub.w	r3, r9, r8
 800cb2c:	bfa8      	it	ge
 800cb2e:	2300      	movge	r3, #0
 800cb30:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb32:	2400      	movs	r4, #0
 800cb34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cb38:	9316      	str	r3, [sp, #88]	@ 0x58
 800cb3a:	46a0      	mov	r8, r4
 800cb3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb3e:	9805      	ldr	r0, [sp, #20]
 800cb40:	6859      	ldr	r1, [r3, #4]
 800cb42:	f7ff f807 	bl	800bb54 <_Balloc>
 800cb46:	4681      	mov	r9, r0
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	f43f aef4 	beq.w	800c936 <_strtod_l+0x43e>
 800cb4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb50:	691a      	ldr	r2, [r3, #16]
 800cb52:	3202      	adds	r2, #2
 800cb54:	f103 010c 	add.w	r1, r3, #12
 800cb58:	0092      	lsls	r2, r2, #2
 800cb5a:	300c      	adds	r0, #12
 800cb5c:	f7fe f94f 	bl	800adfe <memcpy>
 800cb60:	ec4b ab10 	vmov	d0, sl, fp
 800cb64:	9805      	ldr	r0, [sp, #20]
 800cb66:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb68:	a91b      	add	r1, sp, #108	@ 0x6c
 800cb6a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cb6e:	f7ff fbd5 	bl	800c31c <__d2b>
 800cb72:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb74:	2800      	cmp	r0, #0
 800cb76:	f43f aede 	beq.w	800c936 <_strtod_l+0x43e>
 800cb7a:	9805      	ldr	r0, [sp, #20]
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	f7ff f927 	bl	800bdd0 <__i2b>
 800cb82:	4680      	mov	r8, r0
 800cb84:	b948      	cbnz	r0, 800cb9a <_strtod_l+0x6a2>
 800cb86:	f04f 0800 	mov.w	r8, #0
 800cb8a:	e6d4      	b.n	800c936 <_strtod_l+0x43e>
 800cb8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb90:	fa02 f303 	lsl.w	r3, r2, r3
 800cb94:	ea03 0a0a 	and.w	sl, r3, sl
 800cb98:	e7b0      	b.n	800cafc <_strtod_l+0x604>
 800cb9a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cb9c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cb9e:	2d00      	cmp	r5, #0
 800cba0:	bfab      	itete	ge
 800cba2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cba4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cba6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cba8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cbaa:	bfac      	ite	ge
 800cbac:	18ef      	addge	r7, r5, r3
 800cbae:	1b5e      	sublt	r6, r3, r5
 800cbb0:	9b08      	ldr	r3, [sp, #32]
 800cbb2:	1aed      	subs	r5, r5, r3
 800cbb4:	4415      	add	r5, r2
 800cbb6:	4b66      	ldr	r3, [pc, #408]	@ (800cd50 <_strtod_l+0x858>)
 800cbb8:	3d01      	subs	r5, #1
 800cbba:	429d      	cmp	r5, r3
 800cbbc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cbc0:	da50      	bge.n	800cc64 <_strtod_l+0x76c>
 800cbc2:	1b5b      	subs	r3, r3, r5
 800cbc4:	2b1f      	cmp	r3, #31
 800cbc6:	eba2 0203 	sub.w	r2, r2, r3
 800cbca:	f04f 0101 	mov.w	r1, #1
 800cbce:	dc3d      	bgt.n	800cc4c <_strtod_l+0x754>
 800cbd0:	fa01 f303 	lsl.w	r3, r1, r3
 800cbd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbda:	18bd      	adds	r5, r7, r2
 800cbdc:	9b08      	ldr	r3, [sp, #32]
 800cbde:	42af      	cmp	r7, r5
 800cbe0:	4416      	add	r6, r2
 800cbe2:	441e      	add	r6, r3
 800cbe4:	463b      	mov	r3, r7
 800cbe6:	bfa8      	it	ge
 800cbe8:	462b      	movge	r3, r5
 800cbea:	42b3      	cmp	r3, r6
 800cbec:	bfa8      	it	ge
 800cbee:	4633      	movge	r3, r6
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	bfc2      	ittt	gt
 800cbf4:	1aed      	subgt	r5, r5, r3
 800cbf6:	1af6      	subgt	r6, r6, r3
 800cbf8:	1aff      	subgt	r7, r7, r3
 800cbfa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	dd16      	ble.n	800cc2e <_strtod_l+0x736>
 800cc00:	4641      	mov	r1, r8
 800cc02:	9805      	ldr	r0, [sp, #20]
 800cc04:	461a      	mov	r2, r3
 800cc06:	f7ff f9a3 	bl	800bf50 <__pow5mult>
 800cc0a:	4680      	mov	r8, r0
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d0ba      	beq.n	800cb86 <_strtod_l+0x68e>
 800cc10:	4601      	mov	r1, r0
 800cc12:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cc14:	9805      	ldr	r0, [sp, #20]
 800cc16:	f7ff f8f1 	bl	800bdfc <__multiply>
 800cc1a:	900e      	str	r0, [sp, #56]	@ 0x38
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	f43f ae8a 	beq.w	800c936 <_strtod_l+0x43e>
 800cc22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc24:	9805      	ldr	r0, [sp, #20]
 800cc26:	f7fe ffd5 	bl	800bbd4 <_Bfree>
 800cc2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc2e:	2d00      	cmp	r5, #0
 800cc30:	dc1d      	bgt.n	800cc6e <_strtod_l+0x776>
 800cc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	dd23      	ble.n	800cc80 <_strtod_l+0x788>
 800cc38:	4649      	mov	r1, r9
 800cc3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cc3c:	9805      	ldr	r0, [sp, #20]
 800cc3e:	f7ff f987 	bl	800bf50 <__pow5mult>
 800cc42:	4681      	mov	r9, r0
 800cc44:	b9e0      	cbnz	r0, 800cc80 <_strtod_l+0x788>
 800cc46:	f04f 0900 	mov.w	r9, #0
 800cc4a:	e674      	b.n	800c936 <_strtod_l+0x43e>
 800cc4c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cc50:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cc54:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cc58:	35e2      	adds	r5, #226	@ 0xe2
 800cc5a:	fa01 f305 	lsl.w	r3, r1, r5
 800cc5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc60:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cc62:	e7ba      	b.n	800cbda <_strtod_l+0x6e2>
 800cc64:	2300      	movs	r3, #0
 800cc66:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc68:	2301      	movs	r3, #1
 800cc6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc6c:	e7b5      	b.n	800cbda <_strtod_l+0x6e2>
 800cc6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc70:	9805      	ldr	r0, [sp, #20]
 800cc72:	462a      	mov	r2, r5
 800cc74:	f7ff f9c6 	bl	800c004 <__lshift>
 800cc78:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d1d9      	bne.n	800cc32 <_strtod_l+0x73a>
 800cc7e:	e65a      	b.n	800c936 <_strtod_l+0x43e>
 800cc80:	2e00      	cmp	r6, #0
 800cc82:	dd07      	ble.n	800cc94 <_strtod_l+0x79c>
 800cc84:	4649      	mov	r1, r9
 800cc86:	9805      	ldr	r0, [sp, #20]
 800cc88:	4632      	mov	r2, r6
 800cc8a:	f7ff f9bb 	bl	800c004 <__lshift>
 800cc8e:	4681      	mov	r9, r0
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d0d8      	beq.n	800cc46 <_strtod_l+0x74e>
 800cc94:	2f00      	cmp	r7, #0
 800cc96:	dd08      	ble.n	800ccaa <_strtod_l+0x7b2>
 800cc98:	4641      	mov	r1, r8
 800cc9a:	9805      	ldr	r0, [sp, #20]
 800cc9c:	463a      	mov	r2, r7
 800cc9e:	f7ff f9b1 	bl	800c004 <__lshift>
 800cca2:	4680      	mov	r8, r0
 800cca4:	2800      	cmp	r0, #0
 800cca6:	f43f ae46 	beq.w	800c936 <_strtod_l+0x43e>
 800ccaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccac:	9805      	ldr	r0, [sp, #20]
 800ccae:	464a      	mov	r2, r9
 800ccb0:	f7ff fa30 	bl	800c114 <__mdiff>
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f43f ae3d 	beq.w	800c936 <_strtod_l+0x43e>
 800ccbc:	68c3      	ldr	r3, [r0, #12]
 800ccbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	60c3      	str	r3, [r0, #12]
 800ccc4:	4641      	mov	r1, r8
 800ccc6:	f7ff fa09 	bl	800c0dc <__mcmp>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	da46      	bge.n	800cd5c <_strtod_l+0x864>
 800ccce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccd0:	ea53 030a 	orrs.w	r3, r3, sl
 800ccd4:	d16c      	bne.n	800cdb0 <_strtod_l+0x8b8>
 800ccd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d168      	bne.n	800cdb0 <_strtod_l+0x8b8>
 800ccde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cce2:	0d1b      	lsrs	r3, r3, #20
 800cce4:	051b      	lsls	r3, r3, #20
 800cce6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccea:	d961      	bls.n	800cdb0 <_strtod_l+0x8b8>
 800ccec:	6963      	ldr	r3, [r4, #20]
 800ccee:	b913      	cbnz	r3, 800ccf6 <_strtod_l+0x7fe>
 800ccf0:	6923      	ldr	r3, [r4, #16]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	dd5c      	ble.n	800cdb0 <_strtod_l+0x8b8>
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	9805      	ldr	r0, [sp, #20]
 800ccfc:	f7ff f982 	bl	800c004 <__lshift>
 800cd00:	4641      	mov	r1, r8
 800cd02:	4604      	mov	r4, r0
 800cd04:	f7ff f9ea 	bl	800c0dc <__mcmp>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	dd51      	ble.n	800cdb0 <_strtod_l+0x8b8>
 800cd0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd10:	9a08      	ldr	r2, [sp, #32]
 800cd12:	0d1b      	lsrs	r3, r3, #20
 800cd14:	051b      	lsls	r3, r3, #20
 800cd16:	2a00      	cmp	r2, #0
 800cd18:	d06b      	beq.n	800cdf2 <_strtod_l+0x8fa>
 800cd1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cd1e:	d868      	bhi.n	800cdf2 <_strtod_l+0x8fa>
 800cd20:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cd24:	f67f ae9d 	bls.w	800ca62 <_strtod_l+0x56a>
 800cd28:	4b0a      	ldr	r3, [pc, #40]	@ (800cd54 <_strtod_l+0x85c>)
 800cd2a:	4650      	mov	r0, sl
 800cd2c:	4659      	mov	r1, fp
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f7f3 fc8a 	bl	8000648 <__aeabi_dmul>
 800cd34:	4b08      	ldr	r3, [pc, #32]	@ (800cd58 <_strtod_l+0x860>)
 800cd36:	400b      	ands	r3, r1
 800cd38:	4682      	mov	sl, r0
 800cd3a:	468b      	mov	fp, r1
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f47f ae05 	bne.w	800c94c <_strtod_l+0x454>
 800cd42:	9a05      	ldr	r2, [sp, #20]
 800cd44:	2322      	movs	r3, #34	@ 0x22
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	e600      	b.n	800c94c <_strtod_l+0x454>
 800cd4a:	bf00      	nop
 800cd4c:	0800e520 	.word	0x0800e520
 800cd50:	fffffc02 	.word	0xfffffc02
 800cd54:	39500000 	.word	0x39500000
 800cd58:	7ff00000 	.word	0x7ff00000
 800cd5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cd60:	d165      	bne.n	800ce2e <_strtod_l+0x936>
 800cd62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd68:	b35a      	cbz	r2, 800cdc2 <_strtod_l+0x8ca>
 800cd6a:	4a9f      	ldr	r2, [pc, #636]	@ (800cfe8 <_strtod_l+0xaf0>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d12b      	bne.n	800cdc8 <_strtod_l+0x8d0>
 800cd70:	9b08      	ldr	r3, [sp, #32]
 800cd72:	4651      	mov	r1, sl
 800cd74:	b303      	cbz	r3, 800cdb8 <_strtod_l+0x8c0>
 800cd76:	4b9d      	ldr	r3, [pc, #628]	@ (800cfec <_strtod_l+0xaf4>)
 800cd78:	465a      	mov	r2, fp
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cd80:	f04f 32ff 	mov.w	r2, #4294967295
 800cd84:	d81b      	bhi.n	800cdbe <_strtod_l+0x8c6>
 800cd86:	0d1b      	lsrs	r3, r3, #20
 800cd88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd90:	4299      	cmp	r1, r3
 800cd92:	d119      	bne.n	800cdc8 <_strtod_l+0x8d0>
 800cd94:	4b96      	ldr	r3, [pc, #600]	@ (800cff0 <_strtod_l+0xaf8>)
 800cd96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d102      	bne.n	800cda2 <_strtod_l+0x8aa>
 800cd9c:	3101      	adds	r1, #1
 800cd9e:	f43f adca 	beq.w	800c936 <_strtod_l+0x43e>
 800cda2:	4b92      	ldr	r3, [pc, #584]	@ (800cfec <_strtod_l+0xaf4>)
 800cda4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cda6:	401a      	ands	r2, r3
 800cda8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cdac:	f04f 0a00 	mov.w	sl, #0
 800cdb0:	9b08      	ldr	r3, [sp, #32]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1b8      	bne.n	800cd28 <_strtod_l+0x830>
 800cdb6:	e5c9      	b.n	800c94c <_strtod_l+0x454>
 800cdb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdbc:	e7e8      	b.n	800cd90 <_strtod_l+0x898>
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	e7e6      	b.n	800cd90 <_strtod_l+0x898>
 800cdc2:	ea53 030a 	orrs.w	r3, r3, sl
 800cdc6:	d0a1      	beq.n	800cd0c <_strtod_l+0x814>
 800cdc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdca:	b1db      	cbz	r3, 800ce04 <_strtod_l+0x90c>
 800cdcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdce:	4213      	tst	r3, r2
 800cdd0:	d0ee      	beq.n	800cdb0 <_strtod_l+0x8b8>
 800cdd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdd4:	9a08      	ldr	r2, [sp, #32]
 800cdd6:	4650      	mov	r0, sl
 800cdd8:	4659      	mov	r1, fp
 800cdda:	b1bb      	cbz	r3, 800ce0c <_strtod_l+0x914>
 800cddc:	f7ff fb6c 	bl	800c4b8 <sulp>
 800cde0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cde4:	ec53 2b10 	vmov	r2, r3, d0
 800cde8:	f7f3 fa78 	bl	80002dc <__adddf3>
 800cdec:	4682      	mov	sl, r0
 800cdee:	468b      	mov	fp, r1
 800cdf0:	e7de      	b.n	800cdb0 <_strtod_l+0x8b8>
 800cdf2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cdf6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cdfa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cdfe:	f04f 3aff 	mov.w	sl, #4294967295
 800ce02:	e7d5      	b.n	800cdb0 <_strtod_l+0x8b8>
 800ce04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce06:	ea13 0f0a 	tst.w	r3, sl
 800ce0a:	e7e1      	b.n	800cdd0 <_strtod_l+0x8d8>
 800ce0c:	f7ff fb54 	bl	800c4b8 <sulp>
 800ce10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce14:	ec53 2b10 	vmov	r2, r3, d0
 800ce18:	f7f3 fa5e 	bl	80002d8 <__aeabi_dsub>
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2300      	movs	r3, #0
 800ce20:	4682      	mov	sl, r0
 800ce22:	468b      	mov	fp, r1
 800ce24:	f7f3 fe78 	bl	8000b18 <__aeabi_dcmpeq>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d0c1      	beq.n	800cdb0 <_strtod_l+0x8b8>
 800ce2c:	e619      	b.n	800ca62 <_strtod_l+0x56a>
 800ce2e:	4641      	mov	r1, r8
 800ce30:	4620      	mov	r0, r4
 800ce32:	f7ff facb 	bl	800c3cc <__ratio>
 800ce36:	ec57 6b10 	vmov	r6, r7, d0
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce40:	4630      	mov	r0, r6
 800ce42:	4639      	mov	r1, r7
 800ce44:	f7f3 fe7c 	bl	8000b40 <__aeabi_dcmple>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d06f      	beq.n	800cf2c <_strtod_l+0xa34>
 800ce4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d17a      	bne.n	800cf48 <_strtod_l+0xa50>
 800ce52:	f1ba 0f00 	cmp.w	sl, #0
 800ce56:	d158      	bne.n	800cf0a <_strtod_l+0xa12>
 800ce58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d15a      	bne.n	800cf18 <_strtod_l+0xa20>
 800ce62:	4b64      	ldr	r3, [pc, #400]	@ (800cff4 <_strtod_l+0xafc>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	4630      	mov	r0, r6
 800ce68:	4639      	mov	r1, r7
 800ce6a:	f7f3 fe5f 	bl	8000b2c <__aeabi_dcmplt>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d159      	bne.n	800cf26 <_strtod_l+0xa2e>
 800ce72:	4630      	mov	r0, r6
 800ce74:	4639      	mov	r1, r7
 800ce76:	4b60      	ldr	r3, [pc, #384]	@ (800cff8 <_strtod_l+0xb00>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f7f3 fbe5 	bl	8000648 <__aeabi_dmul>
 800ce7e:	4606      	mov	r6, r0
 800ce80:	460f      	mov	r7, r1
 800ce82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ce86:	9606      	str	r6, [sp, #24]
 800ce88:	9307      	str	r3, [sp, #28]
 800ce8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce8e:	4d57      	ldr	r5, [pc, #348]	@ (800cfec <_strtod_l+0xaf4>)
 800ce90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce96:	401d      	ands	r5, r3
 800ce98:	4b58      	ldr	r3, [pc, #352]	@ (800cffc <_strtod_l+0xb04>)
 800ce9a:	429d      	cmp	r5, r3
 800ce9c:	f040 80b2 	bne.w	800d004 <_strtod_l+0xb0c>
 800cea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cea2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cea6:	ec4b ab10 	vmov	d0, sl, fp
 800ceaa:	f7ff f9c7 	bl	800c23c <__ulp>
 800ceae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ceb2:	ec51 0b10 	vmov	r0, r1, d0
 800ceb6:	f7f3 fbc7 	bl	8000648 <__aeabi_dmul>
 800ceba:	4652      	mov	r2, sl
 800cebc:	465b      	mov	r3, fp
 800cebe:	f7f3 fa0d 	bl	80002dc <__adddf3>
 800cec2:	460b      	mov	r3, r1
 800cec4:	4949      	ldr	r1, [pc, #292]	@ (800cfec <_strtod_l+0xaf4>)
 800cec6:	4a4e      	ldr	r2, [pc, #312]	@ (800d000 <_strtod_l+0xb08>)
 800cec8:	4019      	ands	r1, r3
 800ceca:	4291      	cmp	r1, r2
 800cecc:	4682      	mov	sl, r0
 800cece:	d942      	bls.n	800cf56 <_strtod_l+0xa5e>
 800ced0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ced2:	4b47      	ldr	r3, [pc, #284]	@ (800cff0 <_strtod_l+0xaf8>)
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d103      	bne.n	800cee0 <_strtod_l+0x9e8>
 800ced8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ceda:	3301      	adds	r3, #1
 800cedc:	f43f ad2b 	beq.w	800c936 <_strtod_l+0x43e>
 800cee0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cff0 <_strtod_l+0xaf8>
 800cee4:	f04f 3aff 	mov.w	sl, #4294967295
 800cee8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceea:	9805      	ldr	r0, [sp, #20]
 800ceec:	f7fe fe72 	bl	800bbd4 <_Bfree>
 800cef0:	9805      	ldr	r0, [sp, #20]
 800cef2:	4649      	mov	r1, r9
 800cef4:	f7fe fe6e 	bl	800bbd4 <_Bfree>
 800cef8:	9805      	ldr	r0, [sp, #20]
 800cefa:	4641      	mov	r1, r8
 800cefc:	f7fe fe6a 	bl	800bbd4 <_Bfree>
 800cf00:	9805      	ldr	r0, [sp, #20]
 800cf02:	4621      	mov	r1, r4
 800cf04:	f7fe fe66 	bl	800bbd4 <_Bfree>
 800cf08:	e618      	b.n	800cb3c <_strtod_l+0x644>
 800cf0a:	f1ba 0f01 	cmp.w	sl, #1
 800cf0e:	d103      	bne.n	800cf18 <_strtod_l+0xa20>
 800cf10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f43f ada5 	beq.w	800ca62 <_strtod_l+0x56a>
 800cf18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cfc8 <_strtod_l+0xad0>
 800cf1c:	4f35      	ldr	r7, [pc, #212]	@ (800cff4 <_strtod_l+0xafc>)
 800cf1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf22:	2600      	movs	r6, #0
 800cf24:	e7b1      	b.n	800ce8a <_strtod_l+0x992>
 800cf26:	4f34      	ldr	r7, [pc, #208]	@ (800cff8 <_strtod_l+0xb00>)
 800cf28:	2600      	movs	r6, #0
 800cf2a:	e7aa      	b.n	800ce82 <_strtod_l+0x98a>
 800cf2c:	4b32      	ldr	r3, [pc, #200]	@ (800cff8 <_strtod_l+0xb00>)
 800cf2e:	4630      	mov	r0, r6
 800cf30:	4639      	mov	r1, r7
 800cf32:	2200      	movs	r2, #0
 800cf34:	f7f3 fb88 	bl	8000648 <__aeabi_dmul>
 800cf38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf3a:	4606      	mov	r6, r0
 800cf3c:	460f      	mov	r7, r1
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d09f      	beq.n	800ce82 <_strtod_l+0x98a>
 800cf42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cf46:	e7a0      	b.n	800ce8a <_strtod_l+0x992>
 800cf48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cfd0 <_strtod_l+0xad8>
 800cf4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf50:	ec57 6b17 	vmov	r6, r7, d7
 800cf54:	e799      	b.n	800ce8a <_strtod_l+0x992>
 800cf56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cf5a:	9b08      	ldr	r3, [sp, #32]
 800cf5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1c1      	bne.n	800cee8 <_strtod_l+0x9f0>
 800cf64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf68:	0d1b      	lsrs	r3, r3, #20
 800cf6a:	051b      	lsls	r3, r3, #20
 800cf6c:	429d      	cmp	r5, r3
 800cf6e:	d1bb      	bne.n	800cee8 <_strtod_l+0x9f0>
 800cf70:	4630      	mov	r0, r6
 800cf72:	4639      	mov	r1, r7
 800cf74:	f7f3 fec8 	bl	8000d08 <__aeabi_d2lz>
 800cf78:	f7f3 fb38 	bl	80005ec <__aeabi_l2d>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	4630      	mov	r0, r6
 800cf82:	4639      	mov	r1, r7
 800cf84:	f7f3 f9a8 	bl	80002d8 <__aeabi_dsub>
 800cf88:	460b      	mov	r3, r1
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cf90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cf94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf96:	ea46 060a 	orr.w	r6, r6, sl
 800cf9a:	431e      	orrs	r6, r3
 800cf9c:	d06f      	beq.n	800d07e <_strtod_l+0xb86>
 800cf9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cfd8 <_strtod_l+0xae0>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	f7f3 fdc2 	bl	8000b2c <__aeabi_dcmplt>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	f47f accf 	bne.w	800c94c <_strtod_l+0x454>
 800cfae:	a30c      	add	r3, pc, #48	@ (adr r3, 800cfe0 <_strtod_l+0xae8>)
 800cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfb8:	f7f3 fdd6 	bl	8000b68 <__aeabi_dcmpgt>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	d093      	beq.n	800cee8 <_strtod_l+0x9f0>
 800cfc0:	e4c4      	b.n	800c94c <_strtod_l+0x454>
 800cfc2:	bf00      	nop
 800cfc4:	f3af 8000 	nop.w
 800cfc8:	00000000 	.word	0x00000000
 800cfcc:	bff00000 	.word	0xbff00000
 800cfd0:	00000000 	.word	0x00000000
 800cfd4:	3ff00000 	.word	0x3ff00000
 800cfd8:	94a03595 	.word	0x94a03595
 800cfdc:	3fdfffff 	.word	0x3fdfffff
 800cfe0:	35afe535 	.word	0x35afe535
 800cfe4:	3fe00000 	.word	0x3fe00000
 800cfe8:	000fffff 	.word	0x000fffff
 800cfec:	7ff00000 	.word	0x7ff00000
 800cff0:	7fefffff 	.word	0x7fefffff
 800cff4:	3ff00000 	.word	0x3ff00000
 800cff8:	3fe00000 	.word	0x3fe00000
 800cffc:	7fe00000 	.word	0x7fe00000
 800d000:	7c9fffff 	.word	0x7c9fffff
 800d004:	9b08      	ldr	r3, [sp, #32]
 800d006:	b323      	cbz	r3, 800d052 <_strtod_l+0xb5a>
 800d008:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d00c:	d821      	bhi.n	800d052 <_strtod_l+0xb5a>
 800d00e:	a328      	add	r3, pc, #160	@ (adr r3, 800d0b0 <_strtod_l+0xbb8>)
 800d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d014:	4630      	mov	r0, r6
 800d016:	4639      	mov	r1, r7
 800d018:	f7f3 fd92 	bl	8000b40 <__aeabi_dcmple>
 800d01c:	b1a0      	cbz	r0, 800d048 <_strtod_l+0xb50>
 800d01e:	4639      	mov	r1, r7
 800d020:	4630      	mov	r0, r6
 800d022:	f7f3 fde9 	bl	8000bf8 <__aeabi_d2uiz>
 800d026:	2801      	cmp	r0, #1
 800d028:	bf38      	it	cc
 800d02a:	2001      	movcc	r0, #1
 800d02c:	f7f3 fa92 	bl	8000554 <__aeabi_ui2d>
 800d030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d032:	4606      	mov	r6, r0
 800d034:	460f      	mov	r7, r1
 800d036:	b9fb      	cbnz	r3, 800d078 <_strtod_l+0xb80>
 800d038:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d03c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d03e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d040:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d044:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d048:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d04a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d04e:	1b5b      	subs	r3, r3, r5
 800d050:	9311      	str	r3, [sp, #68]	@ 0x44
 800d052:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d056:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d05a:	f7ff f8ef 	bl	800c23c <__ulp>
 800d05e:	4650      	mov	r0, sl
 800d060:	ec53 2b10 	vmov	r2, r3, d0
 800d064:	4659      	mov	r1, fp
 800d066:	f7f3 faef 	bl	8000648 <__aeabi_dmul>
 800d06a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d06e:	f7f3 f935 	bl	80002dc <__adddf3>
 800d072:	4682      	mov	sl, r0
 800d074:	468b      	mov	fp, r1
 800d076:	e770      	b.n	800cf5a <_strtod_l+0xa62>
 800d078:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d07c:	e7e0      	b.n	800d040 <_strtod_l+0xb48>
 800d07e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d0b8 <_strtod_l+0xbc0>)
 800d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d084:	f7f3 fd52 	bl	8000b2c <__aeabi_dcmplt>
 800d088:	e798      	b.n	800cfbc <_strtod_l+0xac4>
 800d08a:	2300      	movs	r3, #0
 800d08c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d08e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d090:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d092:	6013      	str	r3, [r2, #0]
 800d094:	f7ff ba6d 	b.w	800c572 <_strtod_l+0x7a>
 800d098:	2a65      	cmp	r2, #101	@ 0x65
 800d09a:	f43f ab66 	beq.w	800c76a <_strtod_l+0x272>
 800d09e:	2a45      	cmp	r2, #69	@ 0x45
 800d0a0:	f43f ab63 	beq.w	800c76a <_strtod_l+0x272>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	f7ff bb9e 	b.w	800c7e6 <_strtod_l+0x2ee>
 800d0aa:	bf00      	nop
 800d0ac:	f3af 8000 	nop.w
 800d0b0:	ffc00000 	.word	0xffc00000
 800d0b4:	41dfffff 	.word	0x41dfffff
 800d0b8:	94a03595 	.word	0x94a03595
 800d0bc:	3fcfffff 	.word	0x3fcfffff

0800d0c0 <_strtod_r>:
 800d0c0:	4b01      	ldr	r3, [pc, #4]	@ (800d0c8 <_strtod_r+0x8>)
 800d0c2:	f7ff ba19 	b.w	800c4f8 <_strtod_l>
 800d0c6:	bf00      	nop
 800d0c8:	2000006c 	.word	0x2000006c

0800d0cc <_strtol_l.constprop.0>:
 800d0cc:	2b24      	cmp	r3, #36	@ 0x24
 800d0ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d2:	4686      	mov	lr, r0
 800d0d4:	4690      	mov	r8, r2
 800d0d6:	d801      	bhi.n	800d0dc <_strtol_l.constprop.0+0x10>
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d106      	bne.n	800d0ea <_strtol_l.constprop.0+0x1e>
 800d0dc:	f7fd fe62 	bl	800ada4 <__errno>
 800d0e0:	2316      	movs	r3, #22
 800d0e2:	6003      	str	r3, [r0, #0]
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ea:	4834      	ldr	r0, [pc, #208]	@ (800d1bc <_strtol_l.constprop.0+0xf0>)
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	462a      	mov	r2, r5
 800d0f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0f4:	5d06      	ldrb	r6, [r0, r4]
 800d0f6:	f016 0608 	ands.w	r6, r6, #8
 800d0fa:	d1f8      	bne.n	800d0ee <_strtol_l.constprop.0+0x22>
 800d0fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800d0fe:	d12d      	bne.n	800d15c <_strtol_l.constprop.0+0x90>
 800d100:	782c      	ldrb	r4, [r5, #0]
 800d102:	2601      	movs	r6, #1
 800d104:	1c95      	adds	r5, r2, #2
 800d106:	f033 0210 	bics.w	r2, r3, #16
 800d10a:	d109      	bne.n	800d120 <_strtol_l.constprop.0+0x54>
 800d10c:	2c30      	cmp	r4, #48	@ 0x30
 800d10e:	d12a      	bne.n	800d166 <_strtol_l.constprop.0+0x9a>
 800d110:	782a      	ldrb	r2, [r5, #0]
 800d112:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d116:	2a58      	cmp	r2, #88	@ 0x58
 800d118:	d125      	bne.n	800d166 <_strtol_l.constprop.0+0x9a>
 800d11a:	786c      	ldrb	r4, [r5, #1]
 800d11c:	2310      	movs	r3, #16
 800d11e:	3502      	adds	r5, #2
 800d120:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d124:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d128:	2200      	movs	r2, #0
 800d12a:	fbbc f9f3 	udiv	r9, ip, r3
 800d12e:	4610      	mov	r0, r2
 800d130:	fb03 ca19 	mls	sl, r3, r9, ip
 800d134:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d138:	2f09      	cmp	r7, #9
 800d13a:	d81b      	bhi.n	800d174 <_strtol_l.constprop.0+0xa8>
 800d13c:	463c      	mov	r4, r7
 800d13e:	42a3      	cmp	r3, r4
 800d140:	dd27      	ble.n	800d192 <_strtol_l.constprop.0+0xc6>
 800d142:	1c57      	adds	r7, r2, #1
 800d144:	d007      	beq.n	800d156 <_strtol_l.constprop.0+0x8a>
 800d146:	4581      	cmp	r9, r0
 800d148:	d320      	bcc.n	800d18c <_strtol_l.constprop.0+0xc0>
 800d14a:	d101      	bne.n	800d150 <_strtol_l.constprop.0+0x84>
 800d14c:	45a2      	cmp	sl, r4
 800d14e:	db1d      	blt.n	800d18c <_strtol_l.constprop.0+0xc0>
 800d150:	fb00 4003 	mla	r0, r0, r3, r4
 800d154:	2201      	movs	r2, #1
 800d156:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d15a:	e7eb      	b.n	800d134 <_strtol_l.constprop.0+0x68>
 800d15c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d15e:	bf04      	itt	eq
 800d160:	782c      	ldrbeq	r4, [r5, #0]
 800d162:	1c95      	addeq	r5, r2, #2
 800d164:	e7cf      	b.n	800d106 <_strtol_l.constprop.0+0x3a>
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1da      	bne.n	800d120 <_strtol_l.constprop.0+0x54>
 800d16a:	2c30      	cmp	r4, #48	@ 0x30
 800d16c:	bf0c      	ite	eq
 800d16e:	2308      	moveq	r3, #8
 800d170:	230a      	movne	r3, #10
 800d172:	e7d5      	b.n	800d120 <_strtol_l.constprop.0+0x54>
 800d174:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d178:	2f19      	cmp	r7, #25
 800d17a:	d801      	bhi.n	800d180 <_strtol_l.constprop.0+0xb4>
 800d17c:	3c37      	subs	r4, #55	@ 0x37
 800d17e:	e7de      	b.n	800d13e <_strtol_l.constprop.0+0x72>
 800d180:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d184:	2f19      	cmp	r7, #25
 800d186:	d804      	bhi.n	800d192 <_strtol_l.constprop.0+0xc6>
 800d188:	3c57      	subs	r4, #87	@ 0x57
 800d18a:	e7d8      	b.n	800d13e <_strtol_l.constprop.0+0x72>
 800d18c:	f04f 32ff 	mov.w	r2, #4294967295
 800d190:	e7e1      	b.n	800d156 <_strtol_l.constprop.0+0x8a>
 800d192:	1c53      	adds	r3, r2, #1
 800d194:	d108      	bne.n	800d1a8 <_strtol_l.constprop.0+0xdc>
 800d196:	2322      	movs	r3, #34	@ 0x22
 800d198:	f8ce 3000 	str.w	r3, [lr]
 800d19c:	4660      	mov	r0, ip
 800d19e:	f1b8 0f00 	cmp.w	r8, #0
 800d1a2:	d0a0      	beq.n	800d0e6 <_strtol_l.constprop.0+0x1a>
 800d1a4:	1e69      	subs	r1, r5, #1
 800d1a6:	e006      	b.n	800d1b6 <_strtol_l.constprop.0+0xea>
 800d1a8:	b106      	cbz	r6, 800d1ac <_strtol_l.constprop.0+0xe0>
 800d1aa:	4240      	negs	r0, r0
 800d1ac:	f1b8 0f00 	cmp.w	r8, #0
 800d1b0:	d099      	beq.n	800d0e6 <_strtol_l.constprop.0+0x1a>
 800d1b2:	2a00      	cmp	r2, #0
 800d1b4:	d1f6      	bne.n	800d1a4 <_strtol_l.constprop.0+0xd8>
 800d1b6:	f8c8 1000 	str.w	r1, [r8]
 800d1ba:	e794      	b.n	800d0e6 <_strtol_l.constprop.0+0x1a>
 800d1bc:	0800e549 	.word	0x0800e549

0800d1c0 <_strtol_r>:
 800d1c0:	f7ff bf84 	b.w	800d0cc <_strtol_l.constprop.0>

0800d1c4 <__ssputs_r>:
 800d1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c8:	688e      	ldr	r6, [r1, #8]
 800d1ca:	461f      	mov	r7, r3
 800d1cc:	42be      	cmp	r6, r7
 800d1ce:	680b      	ldr	r3, [r1, #0]
 800d1d0:	4682      	mov	sl, r0
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	4690      	mov	r8, r2
 800d1d6:	d82d      	bhi.n	800d234 <__ssputs_r+0x70>
 800d1d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1e0:	d026      	beq.n	800d230 <__ssputs_r+0x6c>
 800d1e2:	6965      	ldr	r5, [r4, #20]
 800d1e4:	6909      	ldr	r1, [r1, #16]
 800d1e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1ea:	eba3 0901 	sub.w	r9, r3, r1
 800d1ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1f2:	1c7b      	adds	r3, r7, #1
 800d1f4:	444b      	add	r3, r9
 800d1f6:	106d      	asrs	r5, r5, #1
 800d1f8:	429d      	cmp	r5, r3
 800d1fa:	bf38      	it	cc
 800d1fc:	461d      	movcc	r5, r3
 800d1fe:	0553      	lsls	r3, r2, #21
 800d200:	d527      	bpl.n	800d252 <__ssputs_r+0x8e>
 800d202:	4629      	mov	r1, r5
 800d204:	f7fc fccc 	bl	8009ba0 <_malloc_r>
 800d208:	4606      	mov	r6, r0
 800d20a:	b360      	cbz	r0, 800d266 <__ssputs_r+0xa2>
 800d20c:	6921      	ldr	r1, [r4, #16]
 800d20e:	464a      	mov	r2, r9
 800d210:	f7fd fdf5 	bl	800adfe <memcpy>
 800d214:	89a3      	ldrh	r3, [r4, #12]
 800d216:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d21a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d21e:	81a3      	strh	r3, [r4, #12]
 800d220:	6126      	str	r6, [r4, #16]
 800d222:	6165      	str	r5, [r4, #20]
 800d224:	444e      	add	r6, r9
 800d226:	eba5 0509 	sub.w	r5, r5, r9
 800d22a:	6026      	str	r6, [r4, #0]
 800d22c:	60a5      	str	r5, [r4, #8]
 800d22e:	463e      	mov	r6, r7
 800d230:	42be      	cmp	r6, r7
 800d232:	d900      	bls.n	800d236 <__ssputs_r+0x72>
 800d234:	463e      	mov	r6, r7
 800d236:	6820      	ldr	r0, [r4, #0]
 800d238:	4632      	mov	r2, r6
 800d23a:	4641      	mov	r1, r8
 800d23c:	f7fd fcdf 	bl	800abfe <memmove>
 800d240:	68a3      	ldr	r3, [r4, #8]
 800d242:	1b9b      	subs	r3, r3, r6
 800d244:	60a3      	str	r3, [r4, #8]
 800d246:	6823      	ldr	r3, [r4, #0]
 800d248:	4433      	add	r3, r6
 800d24a:	6023      	str	r3, [r4, #0]
 800d24c:	2000      	movs	r0, #0
 800d24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d252:	462a      	mov	r2, r5
 800d254:	f000 ff0b 	bl	800e06e <_realloc_r>
 800d258:	4606      	mov	r6, r0
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d1e0      	bne.n	800d220 <__ssputs_r+0x5c>
 800d25e:	6921      	ldr	r1, [r4, #16]
 800d260:	4650      	mov	r0, sl
 800d262:	f7fe fc2d 	bl	800bac0 <_free_r>
 800d266:	230c      	movs	r3, #12
 800d268:	f8ca 3000 	str.w	r3, [sl]
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	f04f 30ff 	mov.w	r0, #4294967295
 800d278:	e7e9      	b.n	800d24e <__ssputs_r+0x8a>
	...

0800d27c <_svfiprintf_r>:
 800d27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d280:	4698      	mov	r8, r3
 800d282:	898b      	ldrh	r3, [r1, #12]
 800d284:	061b      	lsls	r3, r3, #24
 800d286:	b09d      	sub	sp, #116	@ 0x74
 800d288:	4607      	mov	r7, r0
 800d28a:	460d      	mov	r5, r1
 800d28c:	4614      	mov	r4, r2
 800d28e:	d510      	bpl.n	800d2b2 <_svfiprintf_r+0x36>
 800d290:	690b      	ldr	r3, [r1, #16]
 800d292:	b973      	cbnz	r3, 800d2b2 <_svfiprintf_r+0x36>
 800d294:	2140      	movs	r1, #64	@ 0x40
 800d296:	f7fc fc83 	bl	8009ba0 <_malloc_r>
 800d29a:	6028      	str	r0, [r5, #0]
 800d29c:	6128      	str	r0, [r5, #16]
 800d29e:	b930      	cbnz	r0, 800d2ae <_svfiprintf_r+0x32>
 800d2a0:	230c      	movs	r3, #12
 800d2a2:	603b      	str	r3, [r7, #0]
 800d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a8:	b01d      	add	sp, #116	@ 0x74
 800d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ae:	2340      	movs	r3, #64	@ 0x40
 800d2b0:	616b      	str	r3, [r5, #20]
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2b6:	2320      	movs	r3, #32
 800d2b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2c0:	2330      	movs	r3, #48	@ 0x30
 800d2c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d460 <_svfiprintf_r+0x1e4>
 800d2c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2ca:	f04f 0901 	mov.w	r9, #1
 800d2ce:	4623      	mov	r3, r4
 800d2d0:	469a      	mov	sl, r3
 800d2d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2d6:	b10a      	cbz	r2, 800d2dc <_svfiprintf_r+0x60>
 800d2d8:	2a25      	cmp	r2, #37	@ 0x25
 800d2da:	d1f9      	bne.n	800d2d0 <_svfiprintf_r+0x54>
 800d2dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d2e0:	d00b      	beq.n	800d2fa <_svfiprintf_r+0x7e>
 800d2e2:	465b      	mov	r3, fp
 800d2e4:	4622      	mov	r2, r4
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	f7ff ff6b 	bl	800d1c4 <__ssputs_r>
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	f000 80a7 	beq.w	800d442 <_svfiprintf_r+0x1c6>
 800d2f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2f6:	445a      	add	r2, fp
 800d2f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f000 809f 	beq.w	800d442 <_svfiprintf_r+0x1c6>
 800d304:	2300      	movs	r3, #0
 800d306:	f04f 32ff 	mov.w	r2, #4294967295
 800d30a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d30e:	f10a 0a01 	add.w	sl, sl, #1
 800d312:	9304      	str	r3, [sp, #16]
 800d314:	9307      	str	r3, [sp, #28]
 800d316:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d31a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d31c:	4654      	mov	r4, sl
 800d31e:	2205      	movs	r2, #5
 800d320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d324:	484e      	ldr	r0, [pc, #312]	@ (800d460 <_svfiprintf_r+0x1e4>)
 800d326:	f7f2 ff7b 	bl	8000220 <memchr>
 800d32a:	9a04      	ldr	r2, [sp, #16]
 800d32c:	b9d8      	cbnz	r0, 800d366 <_svfiprintf_r+0xea>
 800d32e:	06d0      	lsls	r0, r2, #27
 800d330:	bf44      	itt	mi
 800d332:	2320      	movmi	r3, #32
 800d334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d338:	0711      	lsls	r1, r2, #28
 800d33a:	bf44      	itt	mi
 800d33c:	232b      	movmi	r3, #43	@ 0x2b
 800d33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d342:	f89a 3000 	ldrb.w	r3, [sl]
 800d346:	2b2a      	cmp	r3, #42	@ 0x2a
 800d348:	d015      	beq.n	800d376 <_svfiprintf_r+0xfa>
 800d34a:	9a07      	ldr	r2, [sp, #28]
 800d34c:	4654      	mov	r4, sl
 800d34e:	2000      	movs	r0, #0
 800d350:	f04f 0c0a 	mov.w	ip, #10
 800d354:	4621      	mov	r1, r4
 800d356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d35a:	3b30      	subs	r3, #48	@ 0x30
 800d35c:	2b09      	cmp	r3, #9
 800d35e:	d94b      	bls.n	800d3f8 <_svfiprintf_r+0x17c>
 800d360:	b1b0      	cbz	r0, 800d390 <_svfiprintf_r+0x114>
 800d362:	9207      	str	r2, [sp, #28]
 800d364:	e014      	b.n	800d390 <_svfiprintf_r+0x114>
 800d366:	eba0 0308 	sub.w	r3, r0, r8
 800d36a:	fa09 f303 	lsl.w	r3, r9, r3
 800d36e:	4313      	orrs	r3, r2
 800d370:	9304      	str	r3, [sp, #16]
 800d372:	46a2      	mov	sl, r4
 800d374:	e7d2      	b.n	800d31c <_svfiprintf_r+0xa0>
 800d376:	9b03      	ldr	r3, [sp, #12]
 800d378:	1d19      	adds	r1, r3, #4
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	9103      	str	r1, [sp, #12]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	bfbb      	ittet	lt
 800d382:	425b      	neglt	r3, r3
 800d384:	f042 0202 	orrlt.w	r2, r2, #2
 800d388:	9307      	strge	r3, [sp, #28]
 800d38a:	9307      	strlt	r3, [sp, #28]
 800d38c:	bfb8      	it	lt
 800d38e:	9204      	strlt	r2, [sp, #16]
 800d390:	7823      	ldrb	r3, [r4, #0]
 800d392:	2b2e      	cmp	r3, #46	@ 0x2e
 800d394:	d10a      	bne.n	800d3ac <_svfiprintf_r+0x130>
 800d396:	7863      	ldrb	r3, [r4, #1]
 800d398:	2b2a      	cmp	r3, #42	@ 0x2a
 800d39a:	d132      	bne.n	800d402 <_svfiprintf_r+0x186>
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	1d1a      	adds	r2, r3, #4
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	9203      	str	r2, [sp, #12]
 800d3a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3a8:	3402      	adds	r4, #2
 800d3aa:	9305      	str	r3, [sp, #20]
 800d3ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d470 <_svfiprintf_r+0x1f4>
 800d3b0:	7821      	ldrb	r1, [r4, #0]
 800d3b2:	2203      	movs	r2, #3
 800d3b4:	4650      	mov	r0, sl
 800d3b6:	f7f2 ff33 	bl	8000220 <memchr>
 800d3ba:	b138      	cbz	r0, 800d3cc <_svfiprintf_r+0x150>
 800d3bc:	9b04      	ldr	r3, [sp, #16]
 800d3be:	eba0 000a 	sub.w	r0, r0, sl
 800d3c2:	2240      	movs	r2, #64	@ 0x40
 800d3c4:	4082      	lsls	r2, r0
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	3401      	adds	r4, #1
 800d3ca:	9304      	str	r3, [sp, #16]
 800d3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d0:	4824      	ldr	r0, [pc, #144]	@ (800d464 <_svfiprintf_r+0x1e8>)
 800d3d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3d6:	2206      	movs	r2, #6
 800d3d8:	f7f2 ff22 	bl	8000220 <memchr>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d036      	beq.n	800d44e <_svfiprintf_r+0x1d2>
 800d3e0:	4b21      	ldr	r3, [pc, #132]	@ (800d468 <_svfiprintf_r+0x1ec>)
 800d3e2:	bb1b      	cbnz	r3, 800d42c <_svfiprintf_r+0x1b0>
 800d3e4:	9b03      	ldr	r3, [sp, #12]
 800d3e6:	3307      	adds	r3, #7
 800d3e8:	f023 0307 	bic.w	r3, r3, #7
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	9303      	str	r3, [sp, #12]
 800d3f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f2:	4433      	add	r3, r6
 800d3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3f6:	e76a      	b.n	800d2ce <_svfiprintf_r+0x52>
 800d3f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3fc:	460c      	mov	r4, r1
 800d3fe:	2001      	movs	r0, #1
 800d400:	e7a8      	b.n	800d354 <_svfiprintf_r+0xd8>
 800d402:	2300      	movs	r3, #0
 800d404:	3401      	adds	r4, #1
 800d406:	9305      	str	r3, [sp, #20]
 800d408:	4619      	mov	r1, r3
 800d40a:	f04f 0c0a 	mov.w	ip, #10
 800d40e:	4620      	mov	r0, r4
 800d410:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d414:	3a30      	subs	r2, #48	@ 0x30
 800d416:	2a09      	cmp	r2, #9
 800d418:	d903      	bls.n	800d422 <_svfiprintf_r+0x1a6>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d0c6      	beq.n	800d3ac <_svfiprintf_r+0x130>
 800d41e:	9105      	str	r1, [sp, #20]
 800d420:	e7c4      	b.n	800d3ac <_svfiprintf_r+0x130>
 800d422:	fb0c 2101 	mla	r1, ip, r1, r2
 800d426:	4604      	mov	r4, r0
 800d428:	2301      	movs	r3, #1
 800d42a:	e7f0      	b.n	800d40e <_svfiprintf_r+0x192>
 800d42c:	ab03      	add	r3, sp, #12
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	462a      	mov	r2, r5
 800d432:	4b0e      	ldr	r3, [pc, #56]	@ (800d46c <_svfiprintf_r+0x1f0>)
 800d434:	a904      	add	r1, sp, #16
 800d436:	4638      	mov	r0, r7
 800d438:	f7fc fcde 	bl	8009df8 <_printf_float>
 800d43c:	1c42      	adds	r2, r0, #1
 800d43e:	4606      	mov	r6, r0
 800d440:	d1d6      	bne.n	800d3f0 <_svfiprintf_r+0x174>
 800d442:	89ab      	ldrh	r3, [r5, #12]
 800d444:	065b      	lsls	r3, r3, #25
 800d446:	f53f af2d 	bmi.w	800d2a4 <_svfiprintf_r+0x28>
 800d44a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d44c:	e72c      	b.n	800d2a8 <_svfiprintf_r+0x2c>
 800d44e:	ab03      	add	r3, sp, #12
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	462a      	mov	r2, r5
 800d454:	4b05      	ldr	r3, [pc, #20]	@ (800d46c <_svfiprintf_r+0x1f0>)
 800d456:	a904      	add	r1, sp, #16
 800d458:	4638      	mov	r0, r7
 800d45a:	f7fc ff65 	bl	800a328 <_printf_i>
 800d45e:	e7ed      	b.n	800d43c <_svfiprintf_r+0x1c0>
 800d460:	0800e649 	.word	0x0800e649
 800d464:	0800e653 	.word	0x0800e653
 800d468:	08009df9 	.word	0x08009df9
 800d46c:	0800d1c5 	.word	0x0800d1c5
 800d470:	0800e64f 	.word	0x0800e64f

0800d474 <__sfputc_r>:
 800d474:	6893      	ldr	r3, [r2, #8]
 800d476:	3b01      	subs	r3, #1
 800d478:	2b00      	cmp	r3, #0
 800d47a:	b410      	push	{r4}
 800d47c:	6093      	str	r3, [r2, #8]
 800d47e:	da08      	bge.n	800d492 <__sfputc_r+0x1e>
 800d480:	6994      	ldr	r4, [r2, #24]
 800d482:	42a3      	cmp	r3, r4
 800d484:	db01      	blt.n	800d48a <__sfputc_r+0x16>
 800d486:	290a      	cmp	r1, #10
 800d488:	d103      	bne.n	800d492 <__sfputc_r+0x1e>
 800d48a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d48e:	f000 b9df 	b.w	800d850 <__swbuf_r>
 800d492:	6813      	ldr	r3, [r2, #0]
 800d494:	1c58      	adds	r0, r3, #1
 800d496:	6010      	str	r0, [r2, #0]
 800d498:	7019      	strb	r1, [r3, #0]
 800d49a:	4608      	mov	r0, r1
 800d49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <__sfputs_r>:
 800d4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a4:	4606      	mov	r6, r0
 800d4a6:	460f      	mov	r7, r1
 800d4a8:	4614      	mov	r4, r2
 800d4aa:	18d5      	adds	r5, r2, r3
 800d4ac:	42ac      	cmp	r4, r5
 800d4ae:	d101      	bne.n	800d4b4 <__sfputs_r+0x12>
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e007      	b.n	800d4c4 <__sfputs_r+0x22>
 800d4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b8:	463a      	mov	r2, r7
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	f7ff ffda 	bl	800d474 <__sfputc_r>
 800d4c0:	1c43      	adds	r3, r0, #1
 800d4c2:	d1f3      	bne.n	800d4ac <__sfputs_r+0xa>
 800d4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4c8 <_vfiprintf_r>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	460d      	mov	r5, r1
 800d4ce:	b09d      	sub	sp, #116	@ 0x74
 800d4d0:	4614      	mov	r4, r2
 800d4d2:	4698      	mov	r8, r3
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	b118      	cbz	r0, 800d4e0 <_vfiprintf_r+0x18>
 800d4d8:	6a03      	ldr	r3, [r0, #32]
 800d4da:	b90b      	cbnz	r3, 800d4e0 <_vfiprintf_r+0x18>
 800d4dc:	f7fd fae4 	bl	800aaa8 <__sinit>
 800d4e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4e2:	07d9      	lsls	r1, r3, #31
 800d4e4:	d405      	bmi.n	800d4f2 <_vfiprintf_r+0x2a>
 800d4e6:	89ab      	ldrh	r3, [r5, #12]
 800d4e8:	059a      	lsls	r2, r3, #22
 800d4ea:	d402      	bmi.n	800d4f2 <_vfiprintf_r+0x2a>
 800d4ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4ee:	f7fd fc84 	bl	800adfa <__retarget_lock_acquire_recursive>
 800d4f2:	89ab      	ldrh	r3, [r5, #12]
 800d4f4:	071b      	lsls	r3, r3, #28
 800d4f6:	d501      	bpl.n	800d4fc <_vfiprintf_r+0x34>
 800d4f8:	692b      	ldr	r3, [r5, #16]
 800d4fa:	b99b      	cbnz	r3, 800d524 <_vfiprintf_r+0x5c>
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	4630      	mov	r0, r6
 800d500:	f000 f9e4 	bl	800d8cc <__swsetup_r>
 800d504:	b170      	cbz	r0, 800d524 <_vfiprintf_r+0x5c>
 800d506:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d508:	07dc      	lsls	r4, r3, #31
 800d50a:	d504      	bpl.n	800d516 <_vfiprintf_r+0x4e>
 800d50c:	f04f 30ff 	mov.w	r0, #4294967295
 800d510:	b01d      	add	sp, #116	@ 0x74
 800d512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d516:	89ab      	ldrh	r3, [r5, #12]
 800d518:	0598      	lsls	r0, r3, #22
 800d51a:	d4f7      	bmi.n	800d50c <_vfiprintf_r+0x44>
 800d51c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d51e:	f7fd fc6d 	bl	800adfc <__retarget_lock_release_recursive>
 800d522:	e7f3      	b.n	800d50c <_vfiprintf_r+0x44>
 800d524:	2300      	movs	r3, #0
 800d526:	9309      	str	r3, [sp, #36]	@ 0x24
 800d528:	2320      	movs	r3, #32
 800d52a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d52e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d532:	2330      	movs	r3, #48	@ 0x30
 800d534:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d6e4 <_vfiprintf_r+0x21c>
 800d538:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d53c:	f04f 0901 	mov.w	r9, #1
 800d540:	4623      	mov	r3, r4
 800d542:	469a      	mov	sl, r3
 800d544:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d548:	b10a      	cbz	r2, 800d54e <_vfiprintf_r+0x86>
 800d54a:	2a25      	cmp	r2, #37	@ 0x25
 800d54c:	d1f9      	bne.n	800d542 <_vfiprintf_r+0x7a>
 800d54e:	ebba 0b04 	subs.w	fp, sl, r4
 800d552:	d00b      	beq.n	800d56c <_vfiprintf_r+0xa4>
 800d554:	465b      	mov	r3, fp
 800d556:	4622      	mov	r2, r4
 800d558:	4629      	mov	r1, r5
 800d55a:	4630      	mov	r0, r6
 800d55c:	f7ff ffa1 	bl	800d4a2 <__sfputs_r>
 800d560:	3001      	adds	r0, #1
 800d562:	f000 80a7 	beq.w	800d6b4 <_vfiprintf_r+0x1ec>
 800d566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d568:	445a      	add	r2, fp
 800d56a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d56c:	f89a 3000 	ldrb.w	r3, [sl]
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 809f 	beq.w	800d6b4 <_vfiprintf_r+0x1ec>
 800d576:	2300      	movs	r3, #0
 800d578:	f04f 32ff 	mov.w	r2, #4294967295
 800d57c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d580:	f10a 0a01 	add.w	sl, sl, #1
 800d584:	9304      	str	r3, [sp, #16]
 800d586:	9307      	str	r3, [sp, #28]
 800d588:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d58c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d58e:	4654      	mov	r4, sl
 800d590:	2205      	movs	r2, #5
 800d592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d596:	4853      	ldr	r0, [pc, #332]	@ (800d6e4 <_vfiprintf_r+0x21c>)
 800d598:	f7f2 fe42 	bl	8000220 <memchr>
 800d59c:	9a04      	ldr	r2, [sp, #16]
 800d59e:	b9d8      	cbnz	r0, 800d5d8 <_vfiprintf_r+0x110>
 800d5a0:	06d1      	lsls	r1, r2, #27
 800d5a2:	bf44      	itt	mi
 800d5a4:	2320      	movmi	r3, #32
 800d5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5aa:	0713      	lsls	r3, r2, #28
 800d5ac:	bf44      	itt	mi
 800d5ae:	232b      	movmi	r3, #43	@ 0x2b
 800d5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ba:	d015      	beq.n	800d5e8 <_vfiprintf_r+0x120>
 800d5bc:	9a07      	ldr	r2, [sp, #28]
 800d5be:	4654      	mov	r4, sl
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	f04f 0c0a 	mov.w	ip, #10
 800d5c6:	4621      	mov	r1, r4
 800d5c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5cc:	3b30      	subs	r3, #48	@ 0x30
 800d5ce:	2b09      	cmp	r3, #9
 800d5d0:	d94b      	bls.n	800d66a <_vfiprintf_r+0x1a2>
 800d5d2:	b1b0      	cbz	r0, 800d602 <_vfiprintf_r+0x13a>
 800d5d4:	9207      	str	r2, [sp, #28]
 800d5d6:	e014      	b.n	800d602 <_vfiprintf_r+0x13a>
 800d5d8:	eba0 0308 	sub.w	r3, r0, r8
 800d5dc:	fa09 f303 	lsl.w	r3, r9, r3
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	9304      	str	r3, [sp, #16]
 800d5e4:	46a2      	mov	sl, r4
 800d5e6:	e7d2      	b.n	800d58e <_vfiprintf_r+0xc6>
 800d5e8:	9b03      	ldr	r3, [sp, #12]
 800d5ea:	1d19      	adds	r1, r3, #4
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	9103      	str	r1, [sp, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	bfbb      	ittet	lt
 800d5f4:	425b      	neglt	r3, r3
 800d5f6:	f042 0202 	orrlt.w	r2, r2, #2
 800d5fa:	9307      	strge	r3, [sp, #28]
 800d5fc:	9307      	strlt	r3, [sp, #28]
 800d5fe:	bfb8      	it	lt
 800d600:	9204      	strlt	r2, [sp, #16]
 800d602:	7823      	ldrb	r3, [r4, #0]
 800d604:	2b2e      	cmp	r3, #46	@ 0x2e
 800d606:	d10a      	bne.n	800d61e <_vfiprintf_r+0x156>
 800d608:	7863      	ldrb	r3, [r4, #1]
 800d60a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d60c:	d132      	bne.n	800d674 <_vfiprintf_r+0x1ac>
 800d60e:	9b03      	ldr	r3, [sp, #12]
 800d610:	1d1a      	adds	r2, r3, #4
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	9203      	str	r2, [sp, #12]
 800d616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d61a:	3402      	adds	r4, #2
 800d61c:	9305      	str	r3, [sp, #20]
 800d61e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d6f4 <_vfiprintf_r+0x22c>
 800d622:	7821      	ldrb	r1, [r4, #0]
 800d624:	2203      	movs	r2, #3
 800d626:	4650      	mov	r0, sl
 800d628:	f7f2 fdfa 	bl	8000220 <memchr>
 800d62c:	b138      	cbz	r0, 800d63e <_vfiprintf_r+0x176>
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	eba0 000a 	sub.w	r0, r0, sl
 800d634:	2240      	movs	r2, #64	@ 0x40
 800d636:	4082      	lsls	r2, r0
 800d638:	4313      	orrs	r3, r2
 800d63a:	3401      	adds	r4, #1
 800d63c:	9304      	str	r3, [sp, #16]
 800d63e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d642:	4829      	ldr	r0, [pc, #164]	@ (800d6e8 <_vfiprintf_r+0x220>)
 800d644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d648:	2206      	movs	r2, #6
 800d64a:	f7f2 fde9 	bl	8000220 <memchr>
 800d64e:	2800      	cmp	r0, #0
 800d650:	d03f      	beq.n	800d6d2 <_vfiprintf_r+0x20a>
 800d652:	4b26      	ldr	r3, [pc, #152]	@ (800d6ec <_vfiprintf_r+0x224>)
 800d654:	bb1b      	cbnz	r3, 800d69e <_vfiprintf_r+0x1d6>
 800d656:	9b03      	ldr	r3, [sp, #12]
 800d658:	3307      	adds	r3, #7
 800d65a:	f023 0307 	bic.w	r3, r3, #7
 800d65e:	3308      	adds	r3, #8
 800d660:	9303      	str	r3, [sp, #12]
 800d662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d664:	443b      	add	r3, r7
 800d666:	9309      	str	r3, [sp, #36]	@ 0x24
 800d668:	e76a      	b.n	800d540 <_vfiprintf_r+0x78>
 800d66a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d66e:	460c      	mov	r4, r1
 800d670:	2001      	movs	r0, #1
 800d672:	e7a8      	b.n	800d5c6 <_vfiprintf_r+0xfe>
 800d674:	2300      	movs	r3, #0
 800d676:	3401      	adds	r4, #1
 800d678:	9305      	str	r3, [sp, #20]
 800d67a:	4619      	mov	r1, r3
 800d67c:	f04f 0c0a 	mov.w	ip, #10
 800d680:	4620      	mov	r0, r4
 800d682:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d686:	3a30      	subs	r2, #48	@ 0x30
 800d688:	2a09      	cmp	r2, #9
 800d68a:	d903      	bls.n	800d694 <_vfiprintf_r+0x1cc>
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d0c6      	beq.n	800d61e <_vfiprintf_r+0x156>
 800d690:	9105      	str	r1, [sp, #20]
 800d692:	e7c4      	b.n	800d61e <_vfiprintf_r+0x156>
 800d694:	fb0c 2101 	mla	r1, ip, r1, r2
 800d698:	4604      	mov	r4, r0
 800d69a:	2301      	movs	r3, #1
 800d69c:	e7f0      	b.n	800d680 <_vfiprintf_r+0x1b8>
 800d69e:	ab03      	add	r3, sp, #12
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	462a      	mov	r2, r5
 800d6a4:	4b12      	ldr	r3, [pc, #72]	@ (800d6f0 <_vfiprintf_r+0x228>)
 800d6a6:	a904      	add	r1, sp, #16
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f7fc fba5 	bl	8009df8 <_printf_float>
 800d6ae:	4607      	mov	r7, r0
 800d6b0:	1c78      	adds	r0, r7, #1
 800d6b2:	d1d6      	bne.n	800d662 <_vfiprintf_r+0x19a>
 800d6b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6b6:	07d9      	lsls	r1, r3, #31
 800d6b8:	d405      	bmi.n	800d6c6 <_vfiprintf_r+0x1fe>
 800d6ba:	89ab      	ldrh	r3, [r5, #12]
 800d6bc:	059a      	lsls	r2, r3, #22
 800d6be:	d402      	bmi.n	800d6c6 <_vfiprintf_r+0x1fe>
 800d6c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6c2:	f7fd fb9b 	bl	800adfc <__retarget_lock_release_recursive>
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	065b      	lsls	r3, r3, #25
 800d6ca:	f53f af1f 	bmi.w	800d50c <_vfiprintf_r+0x44>
 800d6ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6d0:	e71e      	b.n	800d510 <_vfiprintf_r+0x48>
 800d6d2:	ab03      	add	r3, sp, #12
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	462a      	mov	r2, r5
 800d6d8:	4b05      	ldr	r3, [pc, #20]	@ (800d6f0 <_vfiprintf_r+0x228>)
 800d6da:	a904      	add	r1, sp, #16
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f7fc fe23 	bl	800a328 <_printf_i>
 800d6e2:	e7e4      	b.n	800d6ae <_vfiprintf_r+0x1e6>
 800d6e4:	0800e649 	.word	0x0800e649
 800d6e8:	0800e653 	.word	0x0800e653
 800d6ec:	08009df9 	.word	0x08009df9
 800d6f0:	0800d4a3 	.word	0x0800d4a3
 800d6f4:	0800e64f 	.word	0x0800e64f

0800d6f8 <__sflush_r>:
 800d6f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d700:	0716      	lsls	r6, r2, #28
 800d702:	4605      	mov	r5, r0
 800d704:	460c      	mov	r4, r1
 800d706:	d454      	bmi.n	800d7b2 <__sflush_r+0xba>
 800d708:	684b      	ldr	r3, [r1, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	dc02      	bgt.n	800d714 <__sflush_r+0x1c>
 800d70e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d710:	2b00      	cmp	r3, #0
 800d712:	dd48      	ble.n	800d7a6 <__sflush_r+0xae>
 800d714:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d716:	2e00      	cmp	r6, #0
 800d718:	d045      	beq.n	800d7a6 <__sflush_r+0xae>
 800d71a:	2300      	movs	r3, #0
 800d71c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d720:	682f      	ldr	r7, [r5, #0]
 800d722:	6a21      	ldr	r1, [r4, #32]
 800d724:	602b      	str	r3, [r5, #0]
 800d726:	d030      	beq.n	800d78a <__sflush_r+0x92>
 800d728:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	0759      	lsls	r1, r3, #29
 800d72e:	d505      	bpl.n	800d73c <__sflush_r+0x44>
 800d730:	6863      	ldr	r3, [r4, #4]
 800d732:	1ad2      	subs	r2, r2, r3
 800d734:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d736:	b10b      	cbz	r3, 800d73c <__sflush_r+0x44>
 800d738:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d73a:	1ad2      	subs	r2, r2, r3
 800d73c:	2300      	movs	r3, #0
 800d73e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d740:	6a21      	ldr	r1, [r4, #32]
 800d742:	4628      	mov	r0, r5
 800d744:	47b0      	blx	r6
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	89a3      	ldrh	r3, [r4, #12]
 800d74a:	d106      	bne.n	800d75a <__sflush_r+0x62>
 800d74c:	6829      	ldr	r1, [r5, #0]
 800d74e:	291d      	cmp	r1, #29
 800d750:	d82b      	bhi.n	800d7aa <__sflush_r+0xb2>
 800d752:	4a2a      	ldr	r2, [pc, #168]	@ (800d7fc <__sflush_r+0x104>)
 800d754:	410a      	asrs	r2, r1
 800d756:	07d6      	lsls	r6, r2, #31
 800d758:	d427      	bmi.n	800d7aa <__sflush_r+0xb2>
 800d75a:	2200      	movs	r2, #0
 800d75c:	6062      	str	r2, [r4, #4]
 800d75e:	04d9      	lsls	r1, r3, #19
 800d760:	6922      	ldr	r2, [r4, #16]
 800d762:	6022      	str	r2, [r4, #0]
 800d764:	d504      	bpl.n	800d770 <__sflush_r+0x78>
 800d766:	1c42      	adds	r2, r0, #1
 800d768:	d101      	bne.n	800d76e <__sflush_r+0x76>
 800d76a:	682b      	ldr	r3, [r5, #0]
 800d76c:	b903      	cbnz	r3, 800d770 <__sflush_r+0x78>
 800d76e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d772:	602f      	str	r7, [r5, #0]
 800d774:	b1b9      	cbz	r1, 800d7a6 <__sflush_r+0xae>
 800d776:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d77a:	4299      	cmp	r1, r3
 800d77c:	d002      	beq.n	800d784 <__sflush_r+0x8c>
 800d77e:	4628      	mov	r0, r5
 800d780:	f7fe f99e 	bl	800bac0 <_free_r>
 800d784:	2300      	movs	r3, #0
 800d786:	6363      	str	r3, [r4, #52]	@ 0x34
 800d788:	e00d      	b.n	800d7a6 <__sflush_r+0xae>
 800d78a:	2301      	movs	r3, #1
 800d78c:	4628      	mov	r0, r5
 800d78e:	47b0      	blx	r6
 800d790:	4602      	mov	r2, r0
 800d792:	1c50      	adds	r0, r2, #1
 800d794:	d1c9      	bne.n	800d72a <__sflush_r+0x32>
 800d796:	682b      	ldr	r3, [r5, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d0c6      	beq.n	800d72a <__sflush_r+0x32>
 800d79c:	2b1d      	cmp	r3, #29
 800d79e:	d001      	beq.n	800d7a4 <__sflush_r+0xac>
 800d7a0:	2b16      	cmp	r3, #22
 800d7a2:	d11e      	bne.n	800d7e2 <__sflush_r+0xea>
 800d7a4:	602f      	str	r7, [r5, #0]
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	e022      	b.n	800d7f0 <__sflush_r+0xf8>
 800d7aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ae:	b21b      	sxth	r3, r3
 800d7b0:	e01b      	b.n	800d7ea <__sflush_r+0xf2>
 800d7b2:	690f      	ldr	r7, [r1, #16]
 800d7b4:	2f00      	cmp	r7, #0
 800d7b6:	d0f6      	beq.n	800d7a6 <__sflush_r+0xae>
 800d7b8:	0793      	lsls	r3, r2, #30
 800d7ba:	680e      	ldr	r6, [r1, #0]
 800d7bc:	bf08      	it	eq
 800d7be:	694b      	ldreq	r3, [r1, #20]
 800d7c0:	600f      	str	r7, [r1, #0]
 800d7c2:	bf18      	it	ne
 800d7c4:	2300      	movne	r3, #0
 800d7c6:	eba6 0807 	sub.w	r8, r6, r7
 800d7ca:	608b      	str	r3, [r1, #8]
 800d7cc:	f1b8 0f00 	cmp.w	r8, #0
 800d7d0:	dde9      	ble.n	800d7a6 <__sflush_r+0xae>
 800d7d2:	6a21      	ldr	r1, [r4, #32]
 800d7d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d7d6:	4643      	mov	r3, r8
 800d7d8:	463a      	mov	r2, r7
 800d7da:	4628      	mov	r0, r5
 800d7dc:	47b0      	blx	r6
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	dc08      	bgt.n	800d7f4 <__sflush_r+0xfc>
 800d7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ea:	81a3      	strh	r3, [r4, #12]
 800d7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f4:	4407      	add	r7, r0
 800d7f6:	eba8 0800 	sub.w	r8, r8, r0
 800d7fa:	e7e7      	b.n	800d7cc <__sflush_r+0xd4>
 800d7fc:	dfbffffe 	.word	0xdfbffffe

0800d800 <_fflush_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	690b      	ldr	r3, [r1, #16]
 800d804:	4605      	mov	r5, r0
 800d806:	460c      	mov	r4, r1
 800d808:	b913      	cbnz	r3, 800d810 <_fflush_r+0x10>
 800d80a:	2500      	movs	r5, #0
 800d80c:	4628      	mov	r0, r5
 800d80e:	bd38      	pop	{r3, r4, r5, pc}
 800d810:	b118      	cbz	r0, 800d81a <_fflush_r+0x1a>
 800d812:	6a03      	ldr	r3, [r0, #32]
 800d814:	b90b      	cbnz	r3, 800d81a <_fflush_r+0x1a>
 800d816:	f7fd f947 	bl	800aaa8 <__sinit>
 800d81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d0f3      	beq.n	800d80a <_fflush_r+0xa>
 800d822:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d824:	07d0      	lsls	r0, r2, #31
 800d826:	d404      	bmi.n	800d832 <_fflush_r+0x32>
 800d828:	0599      	lsls	r1, r3, #22
 800d82a:	d402      	bmi.n	800d832 <_fflush_r+0x32>
 800d82c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d82e:	f7fd fae4 	bl	800adfa <__retarget_lock_acquire_recursive>
 800d832:	4628      	mov	r0, r5
 800d834:	4621      	mov	r1, r4
 800d836:	f7ff ff5f 	bl	800d6f8 <__sflush_r>
 800d83a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d83c:	07da      	lsls	r2, r3, #31
 800d83e:	4605      	mov	r5, r0
 800d840:	d4e4      	bmi.n	800d80c <_fflush_r+0xc>
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	059b      	lsls	r3, r3, #22
 800d846:	d4e1      	bmi.n	800d80c <_fflush_r+0xc>
 800d848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d84a:	f7fd fad7 	bl	800adfc <__retarget_lock_release_recursive>
 800d84e:	e7dd      	b.n	800d80c <_fflush_r+0xc>

0800d850 <__swbuf_r>:
 800d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d852:	460e      	mov	r6, r1
 800d854:	4614      	mov	r4, r2
 800d856:	4605      	mov	r5, r0
 800d858:	b118      	cbz	r0, 800d862 <__swbuf_r+0x12>
 800d85a:	6a03      	ldr	r3, [r0, #32]
 800d85c:	b90b      	cbnz	r3, 800d862 <__swbuf_r+0x12>
 800d85e:	f7fd f923 	bl	800aaa8 <__sinit>
 800d862:	69a3      	ldr	r3, [r4, #24]
 800d864:	60a3      	str	r3, [r4, #8]
 800d866:	89a3      	ldrh	r3, [r4, #12]
 800d868:	071a      	lsls	r2, r3, #28
 800d86a:	d501      	bpl.n	800d870 <__swbuf_r+0x20>
 800d86c:	6923      	ldr	r3, [r4, #16]
 800d86e:	b943      	cbnz	r3, 800d882 <__swbuf_r+0x32>
 800d870:	4621      	mov	r1, r4
 800d872:	4628      	mov	r0, r5
 800d874:	f000 f82a 	bl	800d8cc <__swsetup_r>
 800d878:	b118      	cbz	r0, 800d882 <__swbuf_r+0x32>
 800d87a:	f04f 37ff 	mov.w	r7, #4294967295
 800d87e:	4638      	mov	r0, r7
 800d880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	6922      	ldr	r2, [r4, #16]
 800d886:	1a98      	subs	r0, r3, r2
 800d888:	6963      	ldr	r3, [r4, #20]
 800d88a:	b2f6      	uxtb	r6, r6
 800d88c:	4283      	cmp	r3, r0
 800d88e:	4637      	mov	r7, r6
 800d890:	dc05      	bgt.n	800d89e <__swbuf_r+0x4e>
 800d892:	4621      	mov	r1, r4
 800d894:	4628      	mov	r0, r5
 800d896:	f7ff ffb3 	bl	800d800 <_fflush_r>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d1ed      	bne.n	800d87a <__swbuf_r+0x2a>
 800d89e:	68a3      	ldr	r3, [r4, #8]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	60a3      	str	r3, [r4, #8]
 800d8a4:	6823      	ldr	r3, [r4, #0]
 800d8a6:	1c5a      	adds	r2, r3, #1
 800d8a8:	6022      	str	r2, [r4, #0]
 800d8aa:	701e      	strb	r6, [r3, #0]
 800d8ac:	6962      	ldr	r2, [r4, #20]
 800d8ae:	1c43      	adds	r3, r0, #1
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d004      	beq.n	800d8be <__swbuf_r+0x6e>
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	07db      	lsls	r3, r3, #31
 800d8b8:	d5e1      	bpl.n	800d87e <__swbuf_r+0x2e>
 800d8ba:	2e0a      	cmp	r6, #10
 800d8bc:	d1df      	bne.n	800d87e <__swbuf_r+0x2e>
 800d8be:	4621      	mov	r1, r4
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	f7ff ff9d 	bl	800d800 <_fflush_r>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d0d9      	beq.n	800d87e <__swbuf_r+0x2e>
 800d8ca:	e7d6      	b.n	800d87a <__swbuf_r+0x2a>

0800d8cc <__swsetup_r>:
 800d8cc:	b538      	push	{r3, r4, r5, lr}
 800d8ce:	4b29      	ldr	r3, [pc, #164]	@ (800d974 <__swsetup_r+0xa8>)
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	6818      	ldr	r0, [r3, #0]
 800d8d4:	460c      	mov	r4, r1
 800d8d6:	b118      	cbz	r0, 800d8e0 <__swsetup_r+0x14>
 800d8d8:	6a03      	ldr	r3, [r0, #32]
 800d8da:	b90b      	cbnz	r3, 800d8e0 <__swsetup_r+0x14>
 800d8dc:	f7fd f8e4 	bl	800aaa8 <__sinit>
 800d8e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8e4:	0719      	lsls	r1, r3, #28
 800d8e6:	d422      	bmi.n	800d92e <__swsetup_r+0x62>
 800d8e8:	06da      	lsls	r2, r3, #27
 800d8ea:	d407      	bmi.n	800d8fc <__swsetup_r+0x30>
 800d8ec:	2209      	movs	r2, #9
 800d8ee:	602a      	str	r2, [r5, #0]
 800d8f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8f4:	81a3      	strh	r3, [r4, #12]
 800d8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fa:	e033      	b.n	800d964 <__swsetup_r+0x98>
 800d8fc:	0758      	lsls	r0, r3, #29
 800d8fe:	d512      	bpl.n	800d926 <__swsetup_r+0x5a>
 800d900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d902:	b141      	cbz	r1, 800d916 <__swsetup_r+0x4a>
 800d904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d908:	4299      	cmp	r1, r3
 800d90a:	d002      	beq.n	800d912 <__swsetup_r+0x46>
 800d90c:	4628      	mov	r0, r5
 800d90e:	f7fe f8d7 	bl	800bac0 <_free_r>
 800d912:	2300      	movs	r3, #0
 800d914:	6363      	str	r3, [r4, #52]	@ 0x34
 800d916:	89a3      	ldrh	r3, [r4, #12]
 800d918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d91c:	81a3      	strh	r3, [r4, #12]
 800d91e:	2300      	movs	r3, #0
 800d920:	6063      	str	r3, [r4, #4]
 800d922:	6923      	ldr	r3, [r4, #16]
 800d924:	6023      	str	r3, [r4, #0]
 800d926:	89a3      	ldrh	r3, [r4, #12]
 800d928:	f043 0308 	orr.w	r3, r3, #8
 800d92c:	81a3      	strh	r3, [r4, #12]
 800d92e:	6923      	ldr	r3, [r4, #16]
 800d930:	b94b      	cbnz	r3, 800d946 <__swsetup_r+0x7a>
 800d932:	89a3      	ldrh	r3, [r4, #12]
 800d934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d93c:	d003      	beq.n	800d946 <__swsetup_r+0x7a>
 800d93e:	4621      	mov	r1, r4
 800d940:	4628      	mov	r0, r5
 800d942:	f000 fbf5 	bl	800e130 <__smakebuf_r>
 800d946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d94a:	f013 0201 	ands.w	r2, r3, #1
 800d94e:	d00a      	beq.n	800d966 <__swsetup_r+0x9a>
 800d950:	2200      	movs	r2, #0
 800d952:	60a2      	str	r2, [r4, #8]
 800d954:	6962      	ldr	r2, [r4, #20]
 800d956:	4252      	negs	r2, r2
 800d958:	61a2      	str	r2, [r4, #24]
 800d95a:	6922      	ldr	r2, [r4, #16]
 800d95c:	b942      	cbnz	r2, 800d970 <__swsetup_r+0xa4>
 800d95e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d962:	d1c5      	bne.n	800d8f0 <__swsetup_r+0x24>
 800d964:	bd38      	pop	{r3, r4, r5, pc}
 800d966:	0799      	lsls	r1, r3, #30
 800d968:	bf58      	it	pl
 800d96a:	6962      	ldrpl	r2, [r4, #20]
 800d96c:	60a2      	str	r2, [r4, #8]
 800d96e:	e7f4      	b.n	800d95a <__swsetup_r+0x8e>
 800d970:	2000      	movs	r0, #0
 800d972:	e7f7      	b.n	800d964 <__swsetup_r+0x98>
 800d974:	2000001c 	.word	0x2000001c

0800d978 <strncmp>:
 800d978:	b510      	push	{r4, lr}
 800d97a:	b16a      	cbz	r2, 800d998 <strncmp+0x20>
 800d97c:	3901      	subs	r1, #1
 800d97e:	1884      	adds	r4, r0, r2
 800d980:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d984:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d988:	429a      	cmp	r2, r3
 800d98a:	d103      	bne.n	800d994 <strncmp+0x1c>
 800d98c:	42a0      	cmp	r0, r4
 800d98e:	d001      	beq.n	800d994 <strncmp+0x1c>
 800d990:	2a00      	cmp	r2, #0
 800d992:	d1f5      	bne.n	800d980 <strncmp+0x8>
 800d994:	1ad0      	subs	r0, r2, r3
 800d996:	bd10      	pop	{r4, pc}
 800d998:	4610      	mov	r0, r2
 800d99a:	e7fc      	b.n	800d996 <strncmp+0x1e>
 800d99c:	0000      	movs	r0, r0
	...

0800d9a0 <nan>:
 800d9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d9a8 <nan+0x8>
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	00000000 	.word	0x00000000
 800d9ac:	7ff80000 	.word	0x7ff80000

0800d9b0 <_calloc_r>:
 800d9b0:	b570      	push	{r4, r5, r6, lr}
 800d9b2:	fba1 5402 	umull	r5, r4, r1, r2
 800d9b6:	b93c      	cbnz	r4, 800d9c8 <_calloc_r+0x18>
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7fc f8f1 	bl	8009ba0 <_malloc_r>
 800d9be:	4606      	mov	r6, r0
 800d9c0:	b928      	cbnz	r0, 800d9ce <_calloc_r+0x1e>
 800d9c2:	2600      	movs	r6, #0
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	bd70      	pop	{r4, r5, r6, pc}
 800d9c8:	220c      	movs	r2, #12
 800d9ca:	6002      	str	r2, [r0, #0]
 800d9cc:	e7f9      	b.n	800d9c2 <_calloc_r+0x12>
 800d9ce:	462a      	mov	r2, r5
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	f7fd f92e 	bl	800ac32 <memset>
 800d9d6:	e7f5      	b.n	800d9c4 <_calloc_r+0x14>

0800d9d8 <rshift>:
 800d9d8:	6903      	ldr	r3, [r0, #16]
 800d9da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9e6:	f100 0414 	add.w	r4, r0, #20
 800d9ea:	dd45      	ble.n	800da78 <rshift+0xa0>
 800d9ec:	f011 011f 	ands.w	r1, r1, #31
 800d9f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d9f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d9f8:	d10c      	bne.n	800da14 <rshift+0x3c>
 800d9fa:	f100 0710 	add.w	r7, r0, #16
 800d9fe:	4629      	mov	r1, r5
 800da00:	42b1      	cmp	r1, r6
 800da02:	d334      	bcc.n	800da6e <rshift+0x96>
 800da04:	1a9b      	subs	r3, r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	1eea      	subs	r2, r5, #3
 800da0a:	4296      	cmp	r6, r2
 800da0c:	bf38      	it	cc
 800da0e:	2300      	movcc	r3, #0
 800da10:	4423      	add	r3, r4
 800da12:	e015      	b.n	800da40 <rshift+0x68>
 800da14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da18:	f1c1 0820 	rsb	r8, r1, #32
 800da1c:	40cf      	lsrs	r7, r1
 800da1e:	f105 0e04 	add.w	lr, r5, #4
 800da22:	46a1      	mov	r9, r4
 800da24:	4576      	cmp	r6, lr
 800da26:	46f4      	mov	ip, lr
 800da28:	d815      	bhi.n	800da56 <rshift+0x7e>
 800da2a:	1a9a      	subs	r2, r3, r2
 800da2c:	0092      	lsls	r2, r2, #2
 800da2e:	3a04      	subs	r2, #4
 800da30:	3501      	adds	r5, #1
 800da32:	42ae      	cmp	r6, r5
 800da34:	bf38      	it	cc
 800da36:	2200      	movcc	r2, #0
 800da38:	18a3      	adds	r3, r4, r2
 800da3a:	50a7      	str	r7, [r4, r2]
 800da3c:	b107      	cbz	r7, 800da40 <rshift+0x68>
 800da3e:	3304      	adds	r3, #4
 800da40:	1b1a      	subs	r2, r3, r4
 800da42:	42a3      	cmp	r3, r4
 800da44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da48:	bf08      	it	eq
 800da4a:	2300      	moveq	r3, #0
 800da4c:	6102      	str	r2, [r0, #16]
 800da4e:	bf08      	it	eq
 800da50:	6143      	streq	r3, [r0, #20]
 800da52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da56:	f8dc c000 	ldr.w	ip, [ip]
 800da5a:	fa0c fc08 	lsl.w	ip, ip, r8
 800da5e:	ea4c 0707 	orr.w	r7, ip, r7
 800da62:	f849 7b04 	str.w	r7, [r9], #4
 800da66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da6a:	40cf      	lsrs	r7, r1
 800da6c:	e7da      	b.n	800da24 <rshift+0x4c>
 800da6e:	f851 cb04 	ldr.w	ip, [r1], #4
 800da72:	f847 cf04 	str.w	ip, [r7, #4]!
 800da76:	e7c3      	b.n	800da00 <rshift+0x28>
 800da78:	4623      	mov	r3, r4
 800da7a:	e7e1      	b.n	800da40 <rshift+0x68>

0800da7c <__hexdig_fun>:
 800da7c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800da80:	2b09      	cmp	r3, #9
 800da82:	d802      	bhi.n	800da8a <__hexdig_fun+0xe>
 800da84:	3820      	subs	r0, #32
 800da86:	b2c0      	uxtb	r0, r0
 800da88:	4770      	bx	lr
 800da8a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800da8e:	2b05      	cmp	r3, #5
 800da90:	d801      	bhi.n	800da96 <__hexdig_fun+0x1a>
 800da92:	3847      	subs	r0, #71	@ 0x47
 800da94:	e7f7      	b.n	800da86 <__hexdig_fun+0xa>
 800da96:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800da9a:	2b05      	cmp	r3, #5
 800da9c:	d801      	bhi.n	800daa2 <__hexdig_fun+0x26>
 800da9e:	3827      	subs	r0, #39	@ 0x27
 800daa0:	e7f1      	b.n	800da86 <__hexdig_fun+0xa>
 800daa2:	2000      	movs	r0, #0
 800daa4:	4770      	bx	lr
	...

0800daa8 <__gethex>:
 800daa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daac:	b085      	sub	sp, #20
 800daae:	468a      	mov	sl, r1
 800dab0:	9302      	str	r3, [sp, #8]
 800dab2:	680b      	ldr	r3, [r1, #0]
 800dab4:	9001      	str	r0, [sp, #4]
 800dab6:	4690      	mov	r8, r2
 800dab8:	1c9c      	adds	r4, r3, #2
 800daba:	46a1      	mov	r9, r4
 800dabc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dac0:	2830      	cmp	r0, #48	@ 0x30
 800dac2:	d0fa      	beq.n	800daba <__gethex+0x12>
 800dac4:	eba9 0303 	sub.w	r3, r9, r3
 800dac8:	f1a3 0b02 	sub.w	fp, r3, #2
 800dacc:	f7ff ffd6 	bl	800da7c <__hexdig_fun>
 800dad0:	4605      	mov	r5, r0
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d168      	bne.n	800dba8 <__gethex+0x100>
 800dad6:	49a0      	ldr	r1, [pc, #640]	@ (800dd58 <__gethex+0x2b0>)
 800dad8:	2201      	movs	r2, #1
 800dada:	4648      	mov	r0, r9
 800dadc:	f7ff ff4c 	bl	800d978 <strncmp>
 800dae0:	4607      	mov	r7, r0
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d167      	bne.n	800dbb6 <__gethex+0x10e>
 800dae6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800daea:	4626      	mov	r6, r4
 800daec:	f7ff ffc6 	bl	800da7c <__hexdig_fun>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d062      	beq.n	800dbba <__gethex+0x112>
 800daf4:	4623      	mov	r3, r4
 800daf6:	7818      	ldrb	r0, [r3, #0]
 800daf8:	2830      	cmp	r0, #48	@ 0x30
 800dafa:	4699      	mov	r9, r3
 800dafc:	f103 0301 	add.w	r3, r3, #1
 800db00:	d0f9      	beq.n	800daf6 <__gethex+0x4e>
 800db02:	f7ff ffbb 	bl	800da7c <__hexdig_fun>
 800db06:	fab0 f580 	clz	r5, r0
 800db0a:	096d      	lsrs	r5, r5, #5
 800db0c:	f04f 0b01 	mov.w	fp, #1
 800db10:	464a      	mov	r2, r9
 800db12:	4616      	mov	r6, r2
 800db14:	3201      	adds	r2, #1
 800db16:	7830      	ldrb	r0, [r6, #0]
 800db18:	f7ff ffb0 	bl	800da7c <__hexdig_fun>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d1f8      	bne.n	800db12 <__gethex+0x6a>
 800db20:	498d      	ldr	r1, [pc, #564]	@ (800dd58 <__gethex+0x2b0>)
 800db22:	2201      	movs	r2, #1
 800db24:	4630      	mov	r0, r6
 800db26:	f7ff ff27 	bl	800d978 <strncmp>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d13f      	bne.n	800dbae <__gethex+0x106>
 800db2e:	b944      	cbnz	r4, 800db42 <__gethex+0x9a>
 800db30:	1c74      	adds	r4, r6, #1
 800db32:	4622      	mov	r2, r4
 800db34:	4616      	mov	r6, r2
 800db36:	3201      	adds	r2, #1
 800db38:	7830      	ldrb	r0, [r6, #0]
 800db3a:	f7ff ff9f 	bl	800da7c <__hexdig_fun>
 800db3e:	2800      	cmp	r0, #0
 800db40:	d1f8      	bne.n	800db34 <__gethex+0x8c>
 800db42:	1ba4      	subs	r4, r4, r6
 800db44:	00a7      	lsls	r7, r4, #2
 800db46:	7833      	ldrb	r3, [r6, #0]
 800db48:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800db4c:	2b50      	cmp	r3, #80	@ 0x50
 800db4e:	d13e      	bne.n	800dbce <__gethex+0x126>
 800db50:	7873      	ldrb	r3, [r6, #1]
 800db52:	2b2b      	cmp	r3, #43	@ 0x2b
 800db54:	d033      	beq.n	800dbbe <__gethex+0x116>
 800db56:	2b2d      	cmp	r3, #45	@ 0x2d
 800db58:	d034      	beq.n	800dbc4 <__gethex+0x11c>
 800db5a:	1c71      	adds	r1, r6, #1
 800db5c:	2400      	movs	r4, #0
 800db5e:	7808      	ldrb	r0, [r1, #0]
 800db60:	f7ff ff8c 	bl	800da7c <__hexdig_fun>
 800db64:	1e43      	subs	r3, r0, #1
 800db66:	b2db      	uxtb	r3, r3
 800db68:	2b18      	cmp	r3, #24
 800db6a:	d830      	bhi.n	800dbce <__gethex+0x126>
 800db6c:	f1a0 0210 	sub.w	r2, r0, #16
 800db70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db74:	f7ff ff82 	bl	800da7c <__hexdig_fun>
 800db78:	f100 3cff 	add.w	ip, r0, #4294967295
 800db7c:	fa5f fc8c 	uxtb.w	ip, ip
 800db80:	f1bc 0f18 	cmp.w	ip, #24
 800db84:	f04f 030a 	mov.w	r3, #10
 800db88:	d91e      	bls.n	800dbc8 <__gethex+0x120>
 800db8a:	b104      	cbz	r4, 800db8e <__gethex+0xe6>
 800db8c:	4252      	negs	r2, r2
 800db8e:	4417      	add	r7, r2
 800db90:	f8ca 1000 	str.w	r1, [sl]
 800db94:	b1ed      	cbz	r5, 800dbd2 <__gethex+0x12a>
 800db96:	f1bb 0f00 	cmp.w	fp, #0
 800db9a:	bf0c      	ite	eq
 800db9c:	2506      	moveq	r5, #6
 800db9e:	2500      	movne	r5, #0
 800dba0:	4628      	mov	r0, r5
 800dba2:	b005      	add	sp, #20
 800dba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba8:	2500      	movs	r5, #0
 800dbaa:	462c      	mov	r4, r5
 800dbac:	e7b0      	b.n	800db10 <__gethex+0x68>
 800dbae:	2c00      	cmp	r4, #0
 800dbb0:	d1c7      	bne.n	800db42 <__gethex+0x9a>
 800dbb2:	4627      	mov	r7, r4
 800dbb4:	e7c7      	b.n	800db46 <__gethex+0x9e>
 800dbb6:	464e      	mov	r6, r9
 800dbb8:	462f      	mov	r7, r5
 800dbba:	2501      	movs	r5, #1
 800dbbc:	e7c3      	b.n	800db46 <__gethex+0x9e>
 800dbbe:	2400      	movs	r4, #0
 800dbc0:	1cb1      	adds	r1, r6, #2
 800dbc2:	e7cc      	b.n	800db5e <__gethex+0xb6>
 800dbc4:	2401      	movs	r4, #1
 800dbc6:	e7fb      	b.n	800dbc0 <__gethex+0x118>
 800dbc8:	fb03 0002 	mla	r0, r3, r2, r0
 800dbcc:	e7ce      	b.n	800db6c <__gethex+0xc4>
 800dbce:	4631      	mov	r1, r6
 800dbd0:	e7de      	b.n	800db90 <__gethex+0xe8>
 800dbd2:	eba6 0309 	sub.w	r3, r6, r9
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	4629      	mov	r1, r5
 800dbda:	2b07      	cmp	r3, #7
 800dbdc:	dc0a      	bgt.n	800dbf4 <__gethex+0x14c>
 800dbde:	9801      	ldr	r0, [sp, #4]
 800dbe0:	f7fd ffb8 	bl	800bb54 <_Balloc>
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	b940      	cbnz	r0, 800dbfa <__gethex+0x152>
 800dbe8:	4b5c      	ldr	r3, [pc, #368]	@ (800dd5c <__gethex+0x2b4>)
 800dbea:	4602      	mov	r2, r0
 800dbec:	21e4      	movs	r1, #228	@ 0xe4
 800dbee:	485c      	ldr	r0, [pc, #368]	@ (800dd60 <__gethex+0x2b8>)
 800dbf0:	f7fb ff86 	bl	8009b00 <__assert_func>
 800dbf4:	3101      	adds	r1, #1
 800dbf6:	105b      	asrs	r3, r3, #1
 800dbf8:	e7ef      	b.n	800dbda <__gethex+0x132>
 800dbfa:	f100 0a14 	add.w	sl, r0, #20
 800dbfe:	2300      	movs	r3, #0
 800dc00:	4655      	mov	r5, sl
 800dc02:	469b      	mov	fp, r3
 800dc04:	45b1      	cmp	r9, r6
 800dc06:	d337      	bcc.n	800dc78 <__gethex+0x1d0>
 800dc08:	f845 bb04 	str.w	fp, [r5], #4
 800dc0c:	eba5 050a 	sub.w	r5, r5, sl
 800dc10:	10ad      	asrs	r5, r5, #2
 800dc12:	6125      	str	r5, [r4, #16]
 800dc14:	4658      	mov	r0, fp
 800dc16:	f7fe f88f 	bl	800bd38 <__hi0bits>
 800dc1a:	016d      	lsls	r5, r5, #5
 800dc1c:	f8d8 6000 	ldr.w	r6, [r8]
 800dc20:	1a2d      	subs	r5, r5, r0
 800dc22:	42b5      	cmp	r5, r6
 800dc24:	dd54      	ble.n	800dcd0 <__gethex+0x228>
 800dc26:	1bad      	subs	r5, r5, r6
 800dc28:	4629      	mov	r1, r5
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f7fe fc23 	bl	800c476 <__any_on>
 800dc30:	4681      	mov	r9, r0
 800dc32:	b178      	cbz	r0, 800dc54 <__gethex+0x1ac>
 800dc34:	1e6b      	subs	r3, r5, #1
 800dc36:	1159      	asrs	r1, r3, #5
 800dc38:	f003 021f 	and.w	r2, r3, #31
 800dc3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc40:	f04f 0901 	mov.w	r9, #1
 800dc44:	fa09 f202 	lsl.w	r2, r9, r2
 800dc48:	420a      	tst	r2, r1
 800dc4a:	d003      	beq.n	800dc54 <__gethex+0x1ac>
 800dc4c:	454b      	cmp	r3, r9
 800dc4e:	dc36      	bgt.n	800dcbe <__gethex+0x216>
 800dc50:	f04f 0902 	mov.w	r9, #2
 800dc54:	4629      	mov	r1, r5
 800dc56:	4620      	mov	r0, r4
 800dc58:	f7ff febe 	bl	800d9d8 <rshift>
 800dc5c:	442f      	add	r7, r5
 800dc5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc62:	42bb      	cmp	r3, r7
 800dc64:	da42      	bge.n	800dcec <__gethex+0x244>
 800dc66:	9801      	ldr	r0, [sp, #4]
 800dc68:	4621      	mov	r1, r4
 800dc6a:	f7fd ffb3 	bl	800bbd4 <_Bfree>
 800dc6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc70:	2300      	movs	r3, #0
 800dc72:	6013      	str	r3, [r2, #0]
 800dc74:	25a3      	movs	r5, #163	@ 0xa3
 800dc76:	e793      	b.n	800dba0 <__gethex+0xf8>
 800dc78:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dc7c:	2a2e      	cmp	r2, #46	@ 0x2e
 800dc7e:	d012      	beq.n	800dca6 <__gethex+0x1fe>
 800dc80:	2b20      	cmp	r3, #32
 800dc82:	d104      	bne.n	800dc8e <__gethex+0x1e6>
 800dc84:	f845 bb04 	str.w	fp, [r5], #4
 800dc88:	f04f 0b00 	mov.w	fp, #0
 800dc8c:	465b      	mov	r3, fp
 800dc8e:	7830      	ldrb	r0, [r6, #0]
 800dc90:	9303      	str	r3, [sp, #12]
 800dc92:	f7ff fef3 	bl	800da7c <__hexdig_fun>
 800dc96:	9b03      	ldr	r3, [sp, #12]
 800dc98:	f000 000f 	and.w	r0, r0, #15
 800dc9c:	4098      	lsls	r0, r3
 800dc9e:	ea4b 0b00 	orr.w	fp, fp, r0
 800dca2:	3304      	adds	r3, #4
 800dca4:	e7ae      	b.n	800dc04 <__gethex+0x15c>
 800dca6:	45b1      	cmp	r9, r6
 800dca8:	d8ea      	bhi.n	800dc80 <__gethex+0x1d8>
 800dcaa:	492b      	ldr	r1, [pc, #172]	@ (800dd58 <__gethex+0x2b0>)
 800dcac:	9303      	str	r3, [sp, #12]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	f7ff fe61 	bl	800d978 <strncmp>
 800dcb6:	9b03      	ldr	r3, [sp, #12]
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	d1e1      	bne.n	800dc80 <__gethex+0x1d8>
 800dcbc:	e7a2      	b.n	800dc04 <__gethex+0x15c>
 800dcbe:	1ea9      	subs	r1, r5, #2
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f7fe fbd8 	bl	800c476 <__any_on>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d0c2      	beq.n	800dc50 <__gethex+0x1a8>
 800dcca:	f04f 0903 	mov.w	r9, #3
 800dcce:	e7c1      	b.n	800dc54 <__gethex+0x1ac>
 800dcd0:	da09      	bge.n	800dce6 <__gethex+0x23e>
 800dcd2:	1b75      	subs	r5, r6, r5
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	9801      	ldr	r0, [sp, #4]
 800dcd8:	462a      	mov	r2, r5
 800dcda:	f7fe f993 	bl	800c004 <__lshift>
 800dcde:	1b7f      	subs	r7, r7, r5
 800dce0:	4604      	mov	r4, r0
 800dce2:	f100 0a14 	add.w	sl, r0, #20
 800dce6:	f04f 0900 	mov.w	r9, #0
 800dcea:	e7b8      	b.n	800dc5e <__gethex+0x1b6>
 800dcec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dcf0:	42bd      	cmp	r5, r7
 800dcf2:	dd6f      	ble.n	800ddd4 <__gethex+0x32c>
 800dcf4:	1bed      	subs	r5, r5, r7
 800dcf6:	42ae      	cmp	r6, r5
 800dcf8:	dc34      	bgt.n	800dd64 <__gethex+0x2bc>
 800dcfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d022      	beq.n	800dd48 <__gethex+0x2a0>
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d024      	beq.n	800dd50 <__gethex+0x2a8>
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d115      	bne.n	800dd36 <__gethex+0x28e>
 800dd0a:	42ae      	cmp	r6, r5
 800dd0c:	d113      	bne.n	800dd36 <__gethex+0x28e>
 800dd0e:	2e01      	cmp	r6, #1
 800dd10:	d10b      	bne.n	800dd2a <__gethex+0x282>
 800dd12:	9a02      	ldr	r2, [sp, #8]
 800dd14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd18:	6013      	str	r3, [r2, #0]
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	6123      	str	r3, [r4, #16]
 800dd1e:	f8ca 3000 	str.w	r3, [sl]
 800dd22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd24:	2562      	movs	r5, #98	@ 0x62
 800dd26:	601c      	str	r4, [r3, #0]
 800dd28:	e73a      	b.n	800dba0 <__gethex+0xf8>
 800dd2a:	1e71      	subs	r1, r6, #1
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f7fe fba2 	bl	800c476 <__any_on>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d1ed      	bne.n	800dd12 <__gethex+0x26a>
 800dd36:	9801      	ldr	r0, [sp, #4]
 800dd38:	4621      	mov	r1, r4
 800dd3a:	f7fd ff4b 	bl	800bbd4 <_Bfree>
 800dd3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd40:	2300      	movs	r3, #0
 800dd42:	6013      	str	r3, [r2, #0]
 800dd44:	2550      	movs	r5, #80	@ 0x50
 800dd46:	e72b      	b.n	800dba0 <__gethex+0xf8>
 800dd48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1f3      	bne.n	800dd36 <__gethex+0x28e>
 800dd4e:	e7e0      	b.n	800dd12 <__gethex+0x26a>
 800dd50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d1dd      	bne.n	800dd12 <__gethex+0x26a>
 800dd56:	e7ee      	b.n	800dd36 <__gethex+0x28e>
 800dd58:	0800e4f0 	.word	0x0800e4f0
 800dd5c:	0800e389 	.word	0x0800e389
 800dd60:	0800e662 	.word	0x0800e662
 800dd64:	1e6f      	subs	r7, r5, #1
 800dd66:	f1b9 0f00 	cmp.w	r9, #0
 800dd6a:	d130      	bne.n	800ddce <__gethex+0x326>
 800dd6c:	b127      	cbz	r7, 800dd78 <__gethex+0x2d0>
 800dd6e:	4639      	mov	r1, r7
 800dd70:	4620      	mov	r0, r4
 800dd72:	f7fe fb80 	bl	800c476 <__any_on>
 800dd76:	4681      	mov	r9, r0
 800dd78:	117a      	asrs	r2, r7, #5
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dd80:	f007 071f 	and.w	r7, r7, #31
 800dd84:	40bb      	lsls	r3, r7
 800dd86:	4213      	tst	r3, r2
 800dd88:	4629      	mov	r1, r5
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	bf18      	it	ne
 800dd8e:	f049 0902 	orrne.w	r9, r9, #2
 800dd92:	f7ff fe21 	bl	800d9d8 <rshift>
 800dd96:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dd9a:	1b76      	subs	r6, r6, r5
 800dd9c:	2502      	movs	r5, #2
 800dd9e:	f1b9 0f00 	cmp.w	r9, #0
 800dda2:	d047      	beq.n	800de34 <__gethex+0x38c>
 800dda4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d015      	beq.n	800ddd8 <__gethex+0x330>
 800ddac:	2b03      	cmp	r3, #3
 800ddae:	d017      	beq.n	800dde0 <__gethex+0x338>
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d109      	bne.n	800ddc8 <__gethex+0x320>
 800ddb4:	f019 0f02 	tst.w	r9, #2
 800ddb8:	d006      	beq.n	800ddc8 <__gethex+0x320>
 800ddba:	f8da 3000 	ldr.w	r3, [sl]
 800ddbe:	ea49 0903 	orr.w	r9, r9, r3
 800ddc2:	f019 0f01 	tst.w	r9, #1
 800ddc6:	d10e      	bne.n	800dde6 <__gethex+0x33e>
 800ddc8:	f045 0510 	orr.w	r5, r5, #16
 800ddcc:	e032      	b.n	800de34 <__gethex+0x38c>
 800ddce:	f04f 0901 	mov.w	r9, #1
 800ddd2:	e7d1      	b.n	800dd78 <__gethex+0x2d0>
 800ddd4:	2501      	movs	r5, #1
 800ddd6:	e7e2      	b.n	800dd9e <__gethex+0x2f6>
 800ddd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddda:	f1c3 0301 	rsb	r3, r3, #1
 800ddde:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dde0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d0f0      	beq.n	800ddc8 <__gethex+0x320>
 800dde6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ddea:	f104 0314 	add.w	r3, r4, #20
 800ddee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ddf2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ddf6:	f04f 0c00 	mov.w	ip, #0
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800de00:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de04:	d01b      	beq.n	800de3e <__gethex+0x396>
 800de06:	3201      	adds	r2, #1
 800de08:	6002      	str	r2, [r0, #0]
 800de0a:	2d02      	cmp	r5, #2
 800de0c:	f104 0314 	add.w	r3, r4, #20
 800de10:	d13c      	bne.n	800de8c <__gethex+0x3e4>
 800de12:	f8d8 2000 	ldr.w	r2, [r8]
 800de16:	3a01      	subs	r2, #1
 800de18:	42b2      	cmp	r2, r6
 800de1a:	d109      	bne.n	800de30 <__gethex+0x388>
 800de1c:	1171      	asrs	r1, r6, #5
 800de1e:	2201      	movs	r2, #1
 800de20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de24:	f006 061f 	and.w	r6, r6, #31
 800de28:	fa02 f606 	lsl.w	r6, r2, r6
 800de2c:	421e      	tst	r6, r3
 800de2e:	d13a      	bne.n	800dea6 <__gethex+0x3fe>
 800de30:	f045 0520 	orr.w	r5, r5, #32
 800de34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de36:	601c      	str	r4, [r3, #0]
 800de38:	9b02      	ldr	r3, [sp, #8]
 800de3a:	601f      	str	r7, [r3, #0]
 800de3c:	e6b0      	b.n	800dba0 <__gethex+0xf8>
 800de3e:	4299      	cmp	r1, r3
 800de40:	f843 cc04 	str.w	ip, [r3, #-4]
 800de44:	d8d9      	bhi.n	800ddfa <__gethex+0x352>
 800de46:	68a3      	ldr	r3, [r4, #8]
 800de48:	459b      	cmp	fp, r3
 800de4a:	db17      	blt.n	800de7c <__gethex+0x3d4>
 800de4c:	6861      	ldr	r1, [r4, #4]
 800de4e:	9801      	ldr	r0, [sp, #4]
 800de50:	3101      	adds	r1, #1
 800de52:	f7fd fe7f 	bl	800bb54 <_Balloc>
 800de56:	4681      	mov	r9, r0
 800de58:	b918      	cbnz	r0, 800de62 <__gethex+0x3ba>
 800de5a:	4b1a      	ldr	r3, [pc, #104]	@ (800dec4 <__gethex+0x41c>)
 800de5c:	4602      	mov	r2, r0
 800de5e:	2184      	movs	r1, #132	@ 0x84
 800de60:	e6c5      	b.n	800dbee <__gethex+0x146>
 800de62:	6922      	ldr	r2, [r4, #16]
 800de64:	3202      	adds	r2, #2
 800de66:	f104 010c 	add.w	r1, r4, #12
 800de6a:	0092      	lsls	r2, r2, #2
 800de6c:	300c      	adds	r0, #12
 800de6e:	f7fc ffc6 	bl	800adfe <memcpy>
 800de72:	4621      	mov	r1, r4
 800de74:	9801      	ldr	r0, [sp, #4]
 800de76:	f7fd fead 	bl	800bbd4 <_Bfree>
 800de7a:	464c      	mov	r4, r9
 800de7c:	6923      	ldr	r3, [r4, #16]
 800de7e:	1c5a      	adds	r2, r3, #1
 800de80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de84:	6122      	str	r2, [r4, #16]
 800de86:	2201      	movs	r2, #1
 800de88:	615a      	str	r2, [r3, #20]
 800de8a:	e7be      	b.n	800de0a <__gethex+0x362>
 800de8c:	6922      	ldr	r2, [r4, #16]
 800de8e:	455a      	cmp	r2, fp
 800de90:	dd0b      	ble.n	800deaa <__gethex+0x402>
 800de92:	2101      	movs	r1, #1
 800de94:	4620      	mov	r0, r4
 800de96:	f7ff fd9f 	bl	800d9d8 <rshift>
 800de9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de9e:	3701      	adds	r7, #1
 800dea0:	42bb      	cmp	r3, r7
 800dea2:	f6ff aee0 	blt.w	800dc66 <__gethex+0x1be>
 800dea6:	2501      	movs	r5, #1
 800dea8:	e7c2      	b.n	800de30 <__gethex+0x388>
 800deaa:	f016 061f 	ands.w	r6, r6, #31
 800deae:	d0fa      	beq.n	800dea6 <__gethex+0x3fe>
 800deb0:	4453      	add	r3, sl
 800deb2:	f1c6 0620 	rsb	r6, r6, #32
 800deb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800deba:	f7fd ff3d 	bl	800bd38 <__hi0bits>
 800debe:	42b0      	cmp	r0, r6
 800dec0:	dbe7      	blt.n	800de92 <__gethex+0x3ea>
 800dec2:	e7f0      	b.n	800dea6 <__gethex+0x3fe>
 800dec4:	0800e389 	.word	0x0800e389

0800dec8 <L_shift>:
 800dec8:	f1c2 0208 	rsb	r2, r2, #8
 800decc:	0092      	lsls	r2, r2, #2
 800dece:	b570      	push	{r4, r5, r6, lr}
 800ded0:	f1c2 0620 	rsb	r6, r2, #32
 800ded4:	6843      	ldr	r3, [r0, #4]
 800ded6:	6804      	ldr	r4, [r0, #0]
 800ded8:	fa03 f506 	lsl.w	r5, r3, r6
 800dedc:	432c      	orrs	r4, r5
 800dede:	40d3      	lsrs	r3, r2
 800dee0:	6004      	str	r4, [r0, #0]
 800dee2:	f840 3f04 	str.w	r3, [r0, #4]!
 800dee6:	4288      	cmp	r0, r1
 800dee8:	d3f4      	bcc.n	800ded4 <L_shift+0xc>
 800deea:	bd70      	pop	{r4, r5, r6, pc}

0800deec <__match>:
 800deec:	b530      	push	{r4, r5, lr}
 800deee:	6803      	ldr	r3, [r0, #0]
 800def0:	3301      	adds	r3, #1
 800def2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800def6:	b914      	cbnz	r4, 800defe <__match+0x12>
 800def8:	6003      	str	r3, [r0, #0]
 800defa:	2001      	movs	r0, #1
 800defc:	bd30      	pop	{r4, r5, pc}
 800defe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df02:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800df06:	2d19      	cmp	r5, #25
 800df08:	bf98      	it	ls
 800df0a:	3220      	addls	r2, #32
 800df0c:	42a2      	cmp	r2, r4
 800df0e:	d0f0      	beq.n	800def2 <__match+0x6>
 800df10:	2000      	movs	r0, #0
 800df12:	e7f3      	b.n	800defc <__match+0x10>

0800df14 <__hexnan>:
 800df14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	680b      	ldr	r3, [r1, #0]
 800df1a:	6801      	ldr	r1, [r0, #0]
 800df1c:	115e      	asrs	r6, r3, #5
 800df1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df22:	f013 031f 	ands.w	r3, r3, #31
 800df26:	b087      	sub	sp, #28
 800df28:	bf18      	it	ne
 800df2a:	3604      	addne	r6, #4
 800df2c:	2500      	movs	r5, #0
 800df2e:	1f37      	subs	r7, r6, #4
 800df30:	4682      	mov	sl, r0
 800df32:	4690      	mov	r8, r2
 800df34:	9301      	str	r3, [sp, #4]
 800df36:	f846 5c04 	str.w	r5, [r6, #-4]
 800df3a:	46b9      	mov	r9, r7
 800df3c:	463c      	mov	r4, r7
 800df3e:	9502      	str	r5, [sp, #8]
 800df40:	46ab      	mov	fp, r5
 800df42:	784a      	ldrb	r2, [r1, #1]
 800df44:	1c4b      	adds	r3, r1, #1
 800df46:	9303      	str	r3, [sp, #12]
 800df48:	b342      	cbz	r2, 800df9c <__hexnan+0x88>
 800df4a:	4610      	mov	r0, r2
 800df4c:	9105      	str	r1, [sp, #20]
 800df4e:	9204      	str	r2, [sp, #16]
 800df50:	f7ff fd94 	bl	800da7c <__hexdig_fun>
 800df54:	2800      	cmp	r0, #0
 800df56:	d151      	bne.n	800dffc <__hexnan+0xe8>
 800df58:	9a04      	ldr	r2, [sp, #16]
 800df5a:	9905      	ldr	r1, [sp, #20]
 800df5c:	2a20      	cmp	r2, #32
 800df5e:	d818      	bhi.n	800df92 <__hexnan+0x7e>
 800df60:	9b02      	ldr	r3, [sp, #8]
 800df62:	459b      	cmp	fp, r3
 800df64:	dd13      	ble.n	800df8e <__hexnan+0x7a>
 800df66:	454c      	cmp	r4, r9
 800df68:	d206      	bcs.n	800df78 <__hexnan+0x64>
 800df6a:	2d07      	cmp	r5, #7
 800df6c:	dc04      	bgt.n	800df78 <__hexnan+0x64>
 800df6e:	462a      	mov	r2, r5
 800df70:	4649      	mov	r1, r9
 800df72:	4620      	mov	r0, r4
 800df74:	f7ff ffa8 	bl	800dec8 <L_shift>
 800df78:	4544      	cmp	r4, r8
 800df7a:	d952      	bls.n	800e022 <__hexnan+0x10e>
 800df7c:	2300      	movs	r3, #0
 800df7e:	f1a4 0904 	sub.w	r9, r4, #4
 800df82:	f844 3c04 	str.w	r3, [r4, #-4]
 800df86:	f8cd b008 	str.w	fp, [sp, #8]
 800df8a:	464c      	mov	r4, r9
 800df8c:	461d      	mov	r5, r3
 800df8e:	9903      	ldr	r1, [sp, #12]
 800df90:	e7d7      	b.n	800df42 <__hexnan+0x2e>
 800df92:	2a29      	cmp	r2, #41	@ 0x29
 800df94:	d157      	bne.n	800e046 <__hexnan+0x132>
 800df96:	3102      	adds	r1, #2
 800df98:	f8ca 1000 	str.w	r1, [sl]
 800df9c:	f1bb 0f00 	cmp.w	fp, #0
 800dfa0:	d051      	beq.n	800e046 <__hexnan+0x132>
 800dfa2:	454c      	cmp	r4, r9
 800dfa4:	d206      	bcs.n	800dfb4 <__hexnan+0xa0>
 800dfa6:	2d07      	cmp	r5, #7
 800dfa8:	dc04      	bgt.n	800dfb4 <__hexnan+0xa0>
 800dfaa:	462a      	mov	r2, r5
 800dfac:	4649      	mov	r1, r9
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f7ff ff8a 	bl	800dec8 <L_shift>
 800dfb4:	4544      	cmp	r4, r8
 800dfb6:	d936      	bls.n	800e026 <__hexnan+0x112>
 800dfb8:	f1a8 0204 	sub.w	r2, r8, #4
 800dfbc:	4623      	mov	r3, r4
 800dfbe:	f853 1b04 	ldr.w	r1, [r3], #4
 800dfc2:	f842 1f04 	str.w	r1, [r2, #4]!
 800dfc6:	429f      	cmp	r7, r3
 800dfc8:	d2f9      	bcs.n	800dfbe <__hexnan+0xaa>
 800dfca:	1b3b      	subs	r3, r7, r4
 800dfcc:	f023 0303 	bic.w	r3, r3, #3
 800dfd0:	3304      	adds	r3, #4
 800dfd2:	3401      	adds	r4, #1
 800dfd4:	3e03      	subs	r6, #3
 800dfd6:	42b4      	cmp	r4, r6
 800dfd8:	bf88      	it	hi
 800dfda:	2304      	movhi	r3, #4
 800dfdc:	4443      	add	r3, r8
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f843 2b04 	str.w	r2, [r3], #4
 800dfe4:	429f      	cmp	r7, r3
 800dfe6:	d2fb      	bcs.n	800dfe0 <__hexnan+0xcc>
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	b91b      	cbnz	r3, 800dff4 <__hexnan+0xe0>
 800dfec:	4547      	cmp	r7, r8
 800dfee:	d128      	bne.n	800e042 <__hexnan+0x12e>
 800dff0:	2301      	movs	r3, #1
 800dff2:	603b      	str	r3, [r7, #0]
 800dff4:	2005      	movs	r0, #5
 800dff6:	b007      	add	sp, #28
 800dff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffc:	3501      	adds	r5, #1
 800dffe:	2d08      	cmp	r5, #8
 800e000:	f10b 0b01 	add.w	fp, fp, #1
 800e004:	dd06      	ble.n	800e014 <__hexnan+0x100>
 800e006:	4544      	cmp	r4, r8
 800e008:	d9c1      	bls.n	800df8e <__hexnan+0x7a>
 800e00a:	2300      	movs	r3, #0
 800e00c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e010:	2501      	movs	r5, #1
 800e012:	3c04      	subs	r4, #4
 800e014:	6822      	ldr	r2, [r4, #0]
 800e016:	f000 000f 	and.w	r0, r0, #15
 800e01a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e01e:	6020      	str	r0, [r4, #0]
 800e020:	e7b5      	b.n	800df8e <__hexnan+0x7a>
 800e022:	2508      	movs	r5, #8
 800e024:	e7b3      	b.n	800df8e <__hexnan+0x7a>
 800e026:	9b01      	ldr	r3, [sp, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d0dd      	beq.n	800dfe8 <__hexnan+0xd4>
 800e02c:	f1c3 0320 	rsb	r3, r3, #32
 800e030:	f04f 32ff 	mov.w	r2, #4294967295
 800e034:	40da      	lsrs	r2, r3
 800e036:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e03a:	4013      	ands	r3, r2
 800e03c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e040:	e7d2      	b.n	800dfe8 <__hexnan+0xd4>
 800e042:	3f04      	subs	r7, #4
 800e044:	e7d0      	b.n	800dfe8 <__hexnan+0xd4>
 800e046:	2004      	movs	r0, #4
 800e048:	e7d5      	b.n	800dff6 <__hexnan+0xe2>

0800e04a <__ascii_mbtowc>:
 800e04a:	b082      	sub	sp, #8
 800e04c:	b901      	cbnz	r1, 800e050 <__ascii_mbtowc+0x6>
 800e04e:	a901      	add	r1, sp, #4
 800e050:	b142      	cbz	r2, 800e064 <__ascii_mbtowc+0x1a>
 800e052:	b14b      	cbz	r3, 800e068 <__ascii_mbtowc+0x1e>
 800e054:	7813      	ldrb	r3, [r2, #0]
 800e056:	600b      	str	r3, [r1, #0]
 800e058:	7812      	ldrb	r2, [r2, #0]
 800e05a:	1e10      	subs	r0, r2, #0
 800e05c:	bf18      	it	ne
 800e05e:	2001      	movne	r0, #1
 800e060:	b002      	add	sp, #8
 800e062:	4770      	bx	lr
 800e064:	4610      	mov	r0, r2
 800e066:	e7fb      	b.n	800e060 <__ascii_mbtowc+0x16>
 800e068:	f06f 0001 	mvn.w	r0, #1
 800e06c:	e7f8      	b.n	800e060 <__ascii_mbtowc+0x16>

0800e06e <_realloc_r>:
 800e06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e072:	4680      	mov	r8, r0
 800e074:	4615      	mov	r5, r2
 800e076:	460c      	mov	r4, r1
 800e078:	b921      	cbnz	r1, 800e084 <_realloc_r+0x16>
 800e07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e07e:	4611      	mov	r1, r2
 800e080:	f7fb bd8e 	b.w	8009ba0 <_malloc_r>
 800e084:	b92a      	cbnz	r2, 800e092 <_realloc_r+0x24>
 800e086:	f7fd fd1b 	bl	800bac0 <_free_r>
 800e08a:	2400      	movs	r4, #0
 800e08c:	4620      	mov	r0, r4
 800e08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e092:	f000 f8ab 	bl	800e1ec <_malloc_usable_size_r>
 800e096:	4285      	cmp	r5, r0
 800e098:	4606      	mov	r6, r0
 800e09a:	d802      	bhi.n	800e0a2 <_realloc_r+0x34>
 800e09c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e0a0:	d8f4      	bhi.n	800e08c <_realloc_r+0x1e>
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	f7fb fd7b 	bl	8009ba0 <_malloc_r>
 800e0aa:	4607      	mov	r7, r0
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d0ec      	beq.n	800e08a <_realloc_r+0x1c>
 800e0b0:	42b5      	cmp	r5, r6
 800e0b2:	462a      	mov	r2, r5
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	bf28      	it	cs
 800e0b8:	4632      	movcs	r2, r6
 800e0ba:	f7fc fea0 	bl	800adfe <memcpy>
 800e0be:	4621      	mov	r1, r4
 800e0c0:	4640      	mov	r0, r8
 800e0c2:	f7fd fcfd 	bl	800bac0 <_free_r>
 800e0c6:	463c      	mov	r4, r7
 800e0c8:	e7e0      	b.n	800e08c <_realloc_r+0x1e>

0800e0ca <__ascii_wctomb>:
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	4608      	mov	r0, r1
 800e0ce:	b141      	cbz	r1, 800e0e2 <__ascii_wctomb+0x18>
 800e0d0:	2aff      	cmp	r2, #255	@ 0xff
 800e0d2:	d904      	bls.n	800e0de <__ascii_wctomb+0x14>
 800e0d4:	228a      	movs	r2, #138	@ 0x8a
 800e0d6:	601a      	str	r2, [r3, #0]
 800e0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0dc:	4770      	bx	lr
 800e0de:	700a      	strb	r2, [r1, #0]
 800e0e0:	2001      	movs	r0, #1
 800e0e2:	4770      	bx	lr

0800e0e4 <__swhatbuf_r>:
 800e0e4:	b570      	push	{r4, r5, r6, lr}
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ec:	2900      	cmp	r1, #0
 800e0ee:	b096      	sub	sp, #88	@ 0x58
 800e0f0:	4615      	mov	r5, r2
 800e0f2:	461e      	mov	r6, r3
 800e0f4:	da0d      	bge.n	800e112 <__swhatbuf_r+0x2e>
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e0fc:	f04f 0100 	mov.w	r1, #0
 800e100:	bf14      	ite	ne
 800e102:	2340      	movne	r3, #64	@ 0x40
 800e104:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e108:	2000      	movs	r0, #0
 800e10a:	6031      	str	r1, [r6, #0]
 800e10c:	602b      	str	r3, [r5, #0]
 800e10e:	b016      	add	sp, #88	@ 0x58
 800e110:	bd70      	pop	{r4, r5, r6, pc}
 800e112:	466a      	mov	r2, sp
 800e114:	f000 f848 	bl	800e1a8 <_fstat_r>
 800e118:	2800      	cmp	r0, #0
 800e11a:	dbec      	blt.n	800e0f6 <__swhatbuf_r+0x12>
 800e11c:	9901      	ldr	r1, [sp, #4]
 800e11e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e122:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e126:	4259      	negs	r1, r3
 800e128:	4159      	adcs	r1, r3
 800e12a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e12e:	e7eb      	b.n	800e108 <__swhatbuf_r+0x24>

0800e130 <__smakebuf_r>:
 800e130:	898b      	ldrh	r3, [r1, #12]
 800e132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e134:	079d      	lsls	r5, r3, #30
 800e136:	4606      	mov	r6, r0
 800e138:	460c      	mov	r4, r1
 800e13a:	d507      	bpl.n	800e14c <__smakebuf_r+0x1c>
 800e13c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	6123      	str	r3, [r4, #16]
 800e144:	2301      	movs	r3, #1
 800e146:	6163      	str	r3, [r4, #20]
 800e148:	b003      	add	sp, #12
 800e14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e14c:	ab01      	add	r3, sp, #4
 800e14e:	466a      	mov	r2, sp
 800e150:	f7ff ffc8 	bl	800e0e4 <__swhatbuf_r>
 800e154:	9f00      	ldr	r7, [sp, #0]
 800e156:	4605      	mov	r5, r0
 800e158:	4639      	mov	r1, r7
 800e15a:	4630      	mov	r0, r6
 800e15c:	f7fb fd20 	bl	8009ba0 <_malloc_r>
 800e160:	b948      	cbnz	r0, 800e176 <__smakebuf_r+0x46>
 800e162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e166:	059a      	lsls	r2, r3, #22
 800e168:	d4ee      	bmi.n	800e148 <__smakebuf_r+0x18>
 800e16a:	f023 0303 	bic.w	r3, r3, #3
 800e16e:	f043 0302 	orr.w	r3, r3, #2
 800e172:	81a3      	strh	r3, [r4, #12]
 800e174:	e7e2      	b.n	800e13c <__smakebuf_r+0xc>
 800e176:	89a3      	ldrh	r3, [r4, #12]
 800e178:	6020      	str	r0, [r4, #0]
 800e17a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e17e:	81a3      	strh	r3, [r4, #12]
 800e180:	9b01      	ldr	r3, [sp, #4]
 800e182:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e186:	b15b      	cbz	r3, 800e1a0 <__smakebuf_r+0x70>
 800e188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e18c:	4630      	mov	r0, r6
 800e18e:	f000 f81d 	bl	800e1cc <_isatty_r>
 800e192:	b128      	cbz	r0, 800e1a0 <__smakebuf_r+0x70>
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	f023 0303 	bic.w	r3, r3, #3
 800e19a:	f043 0301 	orr.w	r3, r3, #1
 800e19e:	81a3      	strh	r3, [r4, #12]
 800e1a0:	89a3      	ldrh	r3, [r4, #12]
 800e1a2:	431d      	orrs	r5, r3
 800e1a4:	81a5      	strh	r5, [r4, #12]
 800e1a6:	e7cf      	b.n	800e148 <__smakebuf_r+0x18>

0800e1a8 <_fstat_r>:
 800e1a8:	b538      	push	{r3, r4, r5, lr}
 800e1aa:	4d07      	ldr	r5, [pc, #28]	@ (800e1c8 <_fstat_r+0x20>)
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	4608      	mov	r0, r1
 800e1b2:	4611      	mov	r1, r2
 800e1b4:	602b      	str	r3, [r5, #0]
 800e1b6:	f7f4 ff63 	bl	8003080 <_fstat>
 800e1ba:	1c43      	adds	r3, r0, #1
 800e1bc:	d102      	bne.n	800e1c4 <_fstat_r+0x1c>
 800e1be:	682b      	ldr	r3, [r5, #0]
 800e1c0:	b103      	cbz	r3, 800e1c4 <_fstat_r+0x1c>
 800e1c2:	6023      	str	r3, [r4, #0]
 800e1c4:	bd38      	pop	{r3, r4, r5, pc}
 800e1c6:	bf00      	nop
 800e1c8:	200007bc 	.word	0x200007bc

0800e1cc <_isatty_r>:
 800e1cc:	b538      	push	{r3, r4, r5, lr}
 800e1ce:	4d06      	ldr	r5, [pc, #24]	@ (800e1e8 <_isatty_r+0x1c>)
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	4608      	mov	r0, r1
 800e1d6:	602b      	str	r3, [r5, #0]
 800e1d8:	f7f4 ff62 	bl	80030a0 <_isatty>
 800e1dc:	1c43      	adds	r3, r0, #1
 800e1de:	d102      	bne.n	800e1e6 <_isatty_r+0x1a>
 800e1e0:	682b      	ldr	r3, [r5, #0]
 800e1e2:	b103      	cbz	r3, 800e1e6 <_isatty_r+0x1a>
 800e1e4:	6023      	str	r3, [r4, #0]
 800e1e6:	bd38      	pop	{r3, r4, r5, pc}
 800e1e8:	200007bc 	.word	0x200007bc

0800e1ec <_malloc_usable_size_r>:
 800e1ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1f0:	1f18      	subs	r0, r3, #4
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	bfbc      	itt	lt
 800e1f6:	580b      	ldrlt	r3, [r1, r0]
 800e1f8:	18c0      	addlt	r0, r0, r3
 800e1fa:	4770      	bx	lr

0800e1fc <_init>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr

0800e208 <_fini>:
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20a:	bf00      	nop
 800e20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20e:	bc08      	pop	{r3}
 800e210:	469e      	mov	lr, r3
 800e212:	4770      	bx	lr
